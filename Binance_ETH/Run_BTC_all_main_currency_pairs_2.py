# -*- coding: utf8 -*-
import time
import datetime 
import threading 
from decimal import Decimal 
import json 
import websocket 
from threading import * 
from binance.client import Client 


def f_minqty_size_up(kolichestvo, stepSize): 

	sell_amount_a = ((int(kolichestvo * 100000000) - int(kolichestvo * 100000000) % (stepSize * 100000000)) / 100000000) + stepSize 
	return sell_amount_a 


def f_minqty_size_down(kolichestvo, stepSize): 

	sell_amount_a = ((int(kolichestvo * 100000000) - int(kolichestvo * 100000000) % (stepSize * 100000000)) / 100000000) 
	return sell_amount_a 


api_key = 'GQJCOxFdjrcGGbjsKjCvxSMkRY3CPuaL0lv59POZ5FdQ8NH4PnRqDwoT5ofsYDmF' 
secret_key = 'jIvDMfcT56G7ZcKR5oxU2XGCCZnOA0NJzpbo0iOfmqYyDChCcPcUdQKYUh0fepyY' 

client = Client(api_key, secret_key) 

usdt_count = Decimal(input('Укажите количество монет:')) 

all_pribil = Decimal('0.0') 


locker = threading.RLock() 
symbol_g_BTCUSDT = 'BTCUSDT' 
price_bids_g_BTCUSDT = Decimal('0.0') 
qty_bids_g_BTCUSDT = Decimal('0.0') 
price_asks_g_BTCUSDT = Decimal('0.0') 
qty_asks_g_BTCUSDT = Decimal('0.0') 
stepSize_g_BTCUSDT = Decimal('0.00001') 


def on_message_BTCUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTCUSDT = 'BTCUSDT' 
	price_bids_c_l_BTCUSDT = data['b'] 
	qty_bids_c_l_BTCUSDT = data['B'] 
	price_asks_c_l_BTCUSDT = data['a'] 
	qty_asks_c_l_BTCUSDT = data['A'] 

	global symbol_g_BTCUSDT 
	global price_bids_g_BTCUSDT 
	global qty_bids_g_BTCUSDT 
	global price_asks_g_BTCUSDT 
	global qty_asks_g_BTCUSDT 

	symbol_g_BTCUSDT = symbol_c_l_BTCUSDT 
	price_bids_g_BTCUSDT = Decimal(price_bids_c_l_BTCUSDT) 
	qty_bids_g_BTCUSDT = Decimal(qty_bids_c_l_BTCUSDT) 
	price_asks_g_BTCUSDT = Decimal(price_asks_c_l_BTCUSDT) 
	qty_asks_g_BTCUSDT = Decimal(qty_asks_c_l_BTCUSDT) 


def loop_BTCUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/btcusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTCUSDT) 
	ws.run_forever() 


Thread(target=loop_BTCUSDT).start() 
symbol_g_ETHUSDT = 'ETHUSDT' 
price_bids_g_ETHUSDT = Decimal('0.0') 
qty_bids_g_ETHUSDT = Decimal('0.0') 
price_asks_g_ETHUSDT = Decimal('0.0') 
qty_asks_g_ETHUSDT = Decimal('0.0') 
stepSize_g_ETHUSDT = Decimal('0.0001') 


def on_message_ETHUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETHUSDT = 'ETHUSDT' 
	price_bids_c_l_ETHUSDT = data['b'] 
	qty_bids_c_l_ETHUSDT = data['B'] 
	price_asks_c_l_ETHUSDT = data['a'] 
	qty_asks_c_l_ETHUSDT = data['A'] 

	global symbol_g_ETHUSDT 
	global price_bids_g_ETHUSDT 
	global qty_bids_g_ETHUSDT 
	global price_asks_g_ETHUSDT 
	global qty_asks_g_ETHUSDT 

	symbol_g_ETHUSDT = symbol_c_l_ETHUSDT 
	price_bids_g_ETHUSDT = Decimal(price_bids_c_l_ETHUSDT) 
	qty_bids_g_ETHUSDT = Decimal(qty_bids_c_l_ETHUSDT) 
	price_asks_g_ETHUSDT = Decimal(price_asks_c_l_ETHUSDT) 
	qty_asks_g_ETHUSDT = Decimal(qty_asks_c_l_ETHUSDT) 


def loop_ETHUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ethusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETHUSDT) 
	ws.run_forever() 


Thread(target=loop_ETHUSDT).start() 
symbol_g_BNBUSDT = 'BNBUSDT' 
price_bids_g_BNBUSDT = Decimal('0.0') 
qty_bids_g_BNBUSDT = Decimal('0.0') 
price_asks_g_BNBUSDT = Decimal('0.0') 
qty_asks_g_BNBUSDT = Decimal('0.0') 
stepSize_g_BNBUSDT = Decimal('0.001') 


def on_message_BNBUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNBUSDT = 'BNBUSDT' 
	price_bids_c_l_BNBUSDT = data['b'] 
	qty_bids_c_l_BNBUSDT = data['B'] 
	price_asks_c_l_BNBUSDT = data['a'] 
	qty_asks_c_l_BNBUSDT = data['A'] 

	global symbol_g_BNBUSDT 
	global price_bids_g_BNBUSDT 
	global qty_bids_g_BNBUSDT 
	global price_asks_g_BNBUSDT 
	global qty_asks_g_BNBUSDT 

	symbol_g_BNBUSDT = symbol_c_l_BNBUSDT 
	price_bids_g_BNBUSDT = Decimal(price_bids_c_l_BNBUSDT) 
	qty_bids_g_BNBUSDT = Decimal(qty_bids_c_l_BNBUSDT) 
	price_asks_g_BNBUSDT = Decimal(price_asks_c_l_BNBUSDT) 
	qty_asks_g_BNBUSDT = Decimal(qty_asks_c_l_BNBUSDT) 


def loop_BNBUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnbusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNBUSDT) 
	ws.run_forever() 


Thread(target=loop_BNBUSDT).start() 
symbol_g_NEOUSDT = 'NEOUSDT' 
price_bids_g_NEOUSDT = Decimal('0.0') 
qty_bids_g_NEOUSDT = Decimal('0.0') 
price_asks_g_NEOUSDT = Decimal('0.0') 
qty_asks_g_NEOUSDT = Decimal('0.0') 
stepSize_g_NEOUSDT = Decimal('0.01') 


def on_message_NEOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEOUSDT = 'NEOUSDT' 
	price_bids_c_l_NEOUSDT = data['b'] 
	qty_bids_c_l_NEOUSDT = data['B'] 
	price_asks_c_l_NEOUSDT = data['a'] 
	qty_asks_c_l_NEOUSDT = data['A'] 

	global symbol_g_NEOUSDT 
	global price_bids_g_NEOUSDT 
	global qty_bids_g_NEOUSDT 
	global price_asks_g_NEOUSDT 
	global qty_asks_g_NEOUSDT 

	symbol_g_NEOUSDT = symbol_c_l_NEOUSDT 
	price_bids_g_NEOUSDT = Decimal(price_bids_c_l_NEOUSDT) 
	qty_bids_g_NEOUSDT = Decimal(qty_bids_c_l_NEOUSDT) 
	price_asks_g_NEOUSDT = Decimal(price_asks_c_l_NEOUSDT) 
	qty_asks_g_NEOUSDT = Decimal(qty_asks_c_l_NEOUSDT) 


def loop_NEOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/neousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEOUSDT) 
	ws.run_forever() 


Thread(target=loop_NEOUSDT).start() 
symbol_g_LTCUSDT = 'LTCUSDT' 
price_bids_g_LTCUSDT = Decimal('0.0') 
qty_bids_g_LTCUSDT = Decimal('0.0') 
price_asks_g_LTCUSDT = Decimal('0.0') 
qty_asks_g_LTCUSDT = Decimal('0.0') 
stepSize_g_LTCUSDT = Decimal('0.001') 


def on_message_LTCUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LTCUSDT = 'LTCUSDT' 
	price_bids_c_l_LTCUSDT = data['b'] 
	qty_bids_c_l_LTCUSDT = data['B'] 
	price_asks_c_l_LTCUSDT = data['a'] 
	qty_asks_c_l_LTCUSDT = data['A'] 

	global symbol_g_LTCUSDT 
	global price_bids_g_LTCUSDT 
	global qty_bids_g_LTCUSDT 
	global price_asks_g_LTCUSDT 
	global qty_asks_g_LTCUSDT 

	symbol_g_LTCUSDT = symbol_c_l_LTCUSDT 
	price_bids_g_LTCUSDT = Decimal(price_bids_c_l_LTCUSDT) 
	qty_bids_g_LTCUSDT = Decimal(qty_bids_c_l_LTCUSDT) 
	price_asks_g_LTCUSDT = Decimal(price_asks_c_l_LTCUSDT) 
	qty_asks_g_LTCUSDT = Decimal(qty_asks_c_l_LTCUSDT) 


def loop_LTCUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ltcusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LTCUSDT) 
	ws.run_forever() 


Thread(target=loop_LTCUSDT).start() 
symbol_g_ADAUSDT = 'ADAUSDT' 
price_bids_g_ADAUSDT = Decimal('0.0') 
qty_bids_g_ADAUSDT = Decimal('0.0') 
price_asks_g_ADAUSDT = Decimal('0.0') 
qty_asks_g_ADAUSDT = Decimal('0.0') 
stepSize_g_ADAUSDT = Decimal('0.1') 


def on_message_ADAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADAUSDT = 'ADAUSDT' 
	price_bids_c_l_ADAUSDT = data['b'] 
	qty_bids_c_l_ADAUSDT = data['B'] 
	price_asks_c_l_ADAUSDT = data['a'] 
	qty_asks_c_l_ADAUSDT = data['A'] 

	global symbol_g_ADAUSDT 
	global price_bids_g_ADAUSDT 
	global qty_bids_g_ADAUSDT 
	global price_asks_g_ADAUSDT 
	global qty_asks_g_ADAUSDT 

	symbol_g_ADAUSDT = symbol_c_l_ADAUSDT 
	price_bids_g_ADAUSDT = Decimal(price_bids_c_l_ADAUSDT) 
	qty_bids_g_ADAUSDT = Decimal(qty_bids_c_l_ADAUSDT) 
	price_asks_g_ADAUSDT = Decimal(price_asks_c_l_ADAUSDT) 
	qty_asks_g_ADAUSDT = Decimal(qty_asks_c_l_ADAUSDT) 


def loop_ADAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADAUSDT) 
	ws.run_forever() 


Thread(target=loop_ADAUSDT).start() 
symbol_g_XRPUSDT = 'XRPUSDT' 
price_bids_g_XRPUSDT = Decimal('0.0') 
qty_bids_g_XRPUSDT = Decimal('0.0') 
price_asks_g_XRPUSDT = Decimal('0.0') 
qty_asks_g_XRPUSDT = Decimal('0.0') 
stepSize_g_XRPUSDT = Decimal('1.0') 


def on_message_XRPUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XRPUSDT = 'XRPUSDT' 
	price_bids_c_l_XRPUSDT = data['b'] 
	qty_bids_c_l_XRPUSDT = data['B'] 
	price_asks_c_l_XRPUSDT = data['a'] 
	qty_asks_c_l_XRPUSDT = data['A'] 

	global symbol_g_XRPUSDT 
	global price_bids_g_XRPUSDT 
	global qty_bids_g_XRPUSDT 
	global price_asks_g_XRPUSDT 
	global qty_asks_g_XRPUSDT 

	symbol_g_XRPUSDT = symbol_c_l_XRPUSDT 
	price_bids_g_XRPUSDT = Decimal(price_bids_c_l_XRPUSDT) 
	qty_bids_g_XRPUSDT = Decimal(qty_bids_c_l_XRPUSDT) 
	price_asks_g_XRPUSDT = Decimal(price_asks_c_l_XRPUSDT) 
	qty_asks_g_XRPUSDT = Decimal(qty_asks_c_l_XRPUSDT) 


def loop_XRPUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xrpusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XRPUSDT) 
	ws.run_forever() 


Thread(target=loop_XRPUSDT).start() 
symbol_g_EOSUSDT = 'EOSUSDT' 
price_bids_g_EOSUSDT = Decimal('0.0') 
qty_bids_g_EOSUSDT = Decimal('0.0') 
price_asks_g_EOSUSDT = Decimal('0.0') 
qty_asks_g_EOSUSDT = Decimal('0.0') 
stepSize_g_EOSUSDT = Decimal('0.1') 


def on_message_EOSUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EOSUSDT = 'EOSUSDT' 
	price_bids_c_l_EOSUSDT = data['b'] 
	qty_bids_c_l_EOSUSDT = data['B'] 
	price_asks_c_l_EOSUSDT = data['a'] 
	qty_asks_c_l_EOSUSDT = data['A'] 

	global symbol_g_EOSUSDT 
	global price_bids_g_EOSUSDT 
	global qty_bids_g_EOSUSDT 
	global price_asks_g_EOSUSDT 
	global qty_asks_g_EOSUSDT 

	symbol_g_EOSUSDT = symbol_c_l_EOSUSDT 
	price_bids_g_EOSUSDT = Decimal(price_bids_c_l_EOSUSDT) 
	qty_bids_g_EOSUSDT = Decimal(qty_bids_c_l_EOSUSDT) 
	price_asks_g_EOSUSDT = Decimal(price_asks_c_l_EOSUSDT) 
	qty_asks_g_EOSUSDT = Decimal(qty_asks_c_l_EOSUSDT) 


def loop_EOSUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/eosusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EOSUSDT) 
	ws.run_forever() 


Thread(target=loop_EOSUSDT).start() 
symbol_g_XLMUSDT = 'XLMUSDT' 
price_bids_g_XLMUSDT = Decimal('0.0') 
qty_bids_g_XLMUSDT = Decimal('0.0') 
price_asks_g_XLMUSDT = Decimal('0.0') 
qty_asks_g_XLMUSDT = Decimal('0.0') 
stepSize_g_XLMUSDT = Decimal('1.0') 


def on_message_XLMUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XLMUSDT = 'XLMUSDT' 
	price_bids_c_l_XLMUSDT = data['b'] 
	qty_bids_c_l_XLMUSDT = data['B'] 
	price_asks_c_l_XLMUSDT = data['a'] 
	qty_asks_c_l_XLMUSDT = data['A'] 

	global symbol_g_XLMUSDT 
	global price_bids_g_XLMUSDT 
	global qty_bids_g_XLMUSDT 
	global price_asks_g_XLMUSDT 
	global qty_asks_g_XLMUSDT 

	symbol_g_XLMUSDT = symbol_c_l_XLMUSDT 
	price_bids_g_XLMUSDT = Decimal(price_bids_c_l_XLMUSDT) 
	qty_bids_g_XLMUSDT = Decimal(qty_bids_c_l_XLMUSDT) 
	price_asks_g_XLMUSDT = Decimal(price_asks_c_l_XLMUSDT) 
	qty_asks_g_XLMUSDT = Decimal(qty_asks_c_l_XLMUSDT) 


def loop_XLMUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xlmusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XLMUSDT) 
	ws.run_forever() 


Thread(target=loop_XLMUSDT).start() 
symbol_g_ONTUSDT = 'ONTUSDT' 
price_bids_g_ONTUSDT = Decimal('0.0') 
qty_bids_g_ONTUSDT = Decimal('0.0') 
price_asks_g_ONTUSDT = Decimal('0.0') 
qty_asks_g_ONTUSDT = Decimal('0.0') 
stepSize_g_ONTUSDT = Decimal('1.0') 


def on_message_ONTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ONTUSDT = 'ONTUSDT' 
	price_bids_c_l_ONTUSDT = data['b'] 
	qty_bids_c_l_ONTUSDT = data['B'] 
	price_asks_c_l_ONTUSDT = data['a'] 
	qty_asks_c_l_ONTUSDT = data['A'] 

	global symbol_g_ONTUSDT 
	global price_bids_g_ONTUSDT 
	global qty_bids_g_ONTUSDT 
	global price_asks_g_ONTUSDT 
	global qty_asks_g_ONTUSDT 

	symbol_g_ONTUSDT = symbol_c_l_ONTUSDT 
	price_bids_g_ONTUSDT = Decimal(price_bids_c_l_ONTUSDT) 
	qty_bids_g_ONTUSDT = Decimal(qty_bids_c_l_ONTUSDT) 
	price_asks_g_ONTUSDT = Decimal(price_asks_c_l_ONTUSDT) 
	qty_asks_g_ONTUSDT = Decimal(qty_asks_c_l_ONTUSDT) 


def loop_ONTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ontusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ONTUSDT) 
	ws.run_forever() 


Thread(target=loop_ONTUSDT).start() 
symbol_g_TRXUSDT = 'TRXUSDT' 
price_bids_g_TRXUSDT = Decimal('0.0') 
qty_bids_g_TRXUSDT = Decimal('0.0') 
price_asks_g_TRXUSDT = Decimal('0.0') 
qty_asks_g_TRXUSDT = Decimal('0.0') 
stepSize_g_TRXUSDT = Decimal('0.1') 


def on_message_TRXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRXUSDT = 'TRXUSDT' 
	price_bids_c_l_TRXUSDT = data['b'] 
	qty_bids_c_l_TRXUSDT = data['B'] 
	price_asks_c_l_TRXUSDT = data['a'] 
	qty_asks_c_l_TRXUSDT = data['A'] 

	global symbol_g_TRXUSDT 
	global price_bids_g_TRXUSDT 
	global qty_bids_g_TRXUSDT 
	global price_asks_g_TRXUSDT 
	global qty_asks_g_TRXUSDT 

	symbol_g_TRXUSDT = symbol_c_l_TRXUSDT 
	price_bids_g_TRXUSDT = Decimal(price_bids_c_l_TRXUSDT) 
	qty_bids_g_TRXUSDT = Decimal(qty_bids_c_l_TRXUSDT) 
	price_asks_g_TRXUSDT = Decimal(price_asks_c_l_TRXUSDT) 
	qty_asks_g_TRXUSDT = Decimal(qty_asks_c_l_TRXUSDT) 


def loop_TRXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/trxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRXUSDT) 
	ws.run_forever() 


Thread(target=loop_TRXUSDT).start() 
symbol_g_ETCUSDT = 'ETCUSDT' 
price_bids_g_ETCUSDT = Decimal('0.0') 
qty_bids_g_ETCUSDT = Decimal('0.0') 
price_asks_g_ETCUSDT = Decimal('0.0') 
qty_asks_g_ETCUSDT = Decimal('0.0') 
stepSize_g_ETCUSDT = Decimal('0.01') 


def on_message_ETCUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETCUSDT = 'ETCUSDT' 
	price_bids_c_l_ETCUSDT = data['b'] 
	qty_bids_c_l_ETCUSDT = data['B'] 
	price_asks_c_l_ETCUSDT = data['a'] 
	qty_asks_c_l_ETCUSDT = data['A'] 

	global symbol_g_ETCUSDT 
	global price_bids_g_ETCUSDT 
	global qty_bids_g_ETCUSDT 
	global price_asks_g_ETCUSDT 
	global qty_asks_g_ETCUSDT 

	symbol_g_ETCUSDT = symbol_c_l_ETCUSDT 
	price_bids_g_ETCUSDT = Decimal(price_bids_c_l_ETCUSDT) 
	qty_bids_g_ETCUSDT = Decimal(qty_bids_c_l_ETCUSDT) 
	price_asks_g_ETCUSDT = Decimal(price_asks_c_l_ETCUSDT) 
	qty_asks_g_ETCUSDT = Decimal(qty_asks_c_l_ETCUSDT) 


def loop_ETCUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/etcusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETCUSDT) 
	ws.run_forever() 


Thread(target=loop_ETCUSDT).start() 
symbol_g_VETUSDT = 'VETUSDT' 
price_bids_g_VETUSDT = Decimal('0.0') 
qty_bids_g_VETUSDT = Decimal('0.0') 
price_asks_g_VETUSDT = Decimal('0.0') 
qty_asks_g_VETUSDT = Decimal('0.0') 
stepSize_g_VETUSDT = Decimal('0.1') 


def on_message_VETUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VETUSDT = 'VETUSDT' 
	price_bids_c_l_VETUSDT = data['b'] 
	qty_bids_c_l_VETUSDT = data['B'] 
	price_asks_c_l_VETUSDT = data['a'] 
	qty_asks_c_l_VETUSDT = data['A'] 

	global symbol_g_VETUSDT 
	global price_bids_g_VETUSDT 
	global qty_bids_g_VETUSDT 
	global price_asks_g_VETUSDT 
	global qty_asks_g_VETUSDT 

	symbol_g_VETUSDT = symbol_c_l_VETUSDT 
	price_bids_g_VETUSDT = Decimal(price_bids_c_l_VETUSDT) 
	qty_bids_g_VETUSDT = Decimal(qty_bids_c_l_VETUSDT) 
	price_asks_g_VETUSDT = Decimal(price_asks_c_l_VETUSDT) 
	qty_asks_g_VETUSDT = Decimal(qty_asks_c_l_VETUSDT) 


def loop_VETUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/vetusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VETUSDT) 
	ws.run_forever() 


Thread(target=loop_VETUSDT).start() 
symbol_g_LINKUSDT = 'LINKUSDT' 
price_bids_g_LINKUSDT = Decimal('0.0') 
qty_bids_g_LINKUSDT = Decimal('0.0') 
price_asks_g_LINKUSDT = Decimal('0.0') 
qty_asks_g_LINKUSDT = Decimal('0.0') 
stepSize_g_LINKUSDT = Decimal('0.01') 


def on_message_LINKUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LINKUSDT = 'LINKUSDT' 
	price_bids_c_l_LINKUSDT = data['b'] 
	qty_bids_c_l_LINKUSDT = data['B'] 
	price_asks_c_l_LINKUSDT = data['a'] 
	qty_asks_c_l_LINKUSDT = data['A'] 

	global symbol_g_LINKUSDT 
	global price_bids_g_LINKUSDT 
	global qty_bids_g_LINKUSDT 
	global price_asks_g_LINKUSDT 
	global qty_asks_g_LINKUSDT 

	symbol_g_LINKUSDT = symbol_c_l_LINKUSDT 
	price_bids_g_LINKUSDT = Decimal(price_bids_c_l_LINKUSDT) 
	qty_bids_g_LINKUSDT = Decimal(qty_bids_c_l_LINKUSDT) 
	price_asks_g_LINKUSDT = Decimal(price_asks_c_l_LINKUSDT) 
	qty_asks_g_LINKUSDT = Decimal(qty_asks_c_l_LINKUSDT) 


def loop_LINKUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/linkusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LINKUSDT) 
	ws.run_forever() 


Thread(target=loop_LINKUSDT).start() 
symbol_g_WAVESUSDT = 'WAVESUSDT' 
price_bids_g_WAVESUSDT = Decimal('0.0') 
qty_bids_g_WAVESUSDT = Decimal('0.0') 
price_asks_g_WAVESUSDT = Decimal('0.0') 
qty_asks_g_WAVESUSDT = Decimal('0.0') 
stepSize_g_WAVESUSDT = Decimal('0.01') 


def on_message_WAVESUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WAVESUSDT = 'WAVESUSDT' 
	price_bids_c_l_WAVESUSDT = data['b'] 
	qty_bids_c_l_WAVESUSDT = data['B'] 
	price_asks_c_l_WAVESUSDT = data['a'] 
	qty_asks_c_l_WAVESUSDT = data['A'] 

	global symbol_g_WAVESUSDT 
	global price_bids_g_WAVESUSDT 
	global qty_bids_g_WAVESUSDT 
	global price_asks_g_WAVESUSDT 
	global qty_asks_g_WAVESUSDT 

	symbol_g_WAVESUSDT = symbol_c_l_WAVESUSDT 
	price_bids_g_WAVESUSDT = Decimal(price_bids_c_l_WAVESUSDT) 
	qty_bids_g_WAVESUSDT = Decimal(qty_bids_c_l_WAVESUSDT) 
	price_asks_g_WAVESUSDT = Decimal(price_asks_c_l_WAVESUSDT) 
	qty_asks_g_WAVESUSDT = Decimal(qty_asks_c_l_WAVESUSDT) 


def loop_WAVESUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wavesusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WAVESUSDT) 
	ws.run_forever() 


Thread(target=loop_WAVESUSDT).start() 
symbol_g_HOTUSDT = 'HOTUSDT' 
price_bids_g_HOTUSDT = Decimal('0.0') 
qty_bids_g_HOTUSDT = Decimal('0.0') 
price_asks_g_HOTUSDT = Decimal('0.0') 
qty_asks_g_HOTUSDT = Decimal('0.0') 
stepSize_g_HOTUSDT = Decimal('1.0') 


def on_message_HOTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HOTUSDT = 'HOTUSDT' 
	price_bids_c_l_HOTUSDT = data['b'] 
	qty_bids_c_l_HOTUSDT = data['B'] 
	price_asks_c_l_HOTUSDT = data['a'] 
	qty_asks_c_l_HOTUSDT = data['A'] 

	global symbol_g_HOTUSDT 
	global price_bids_g_HOTUSDT 
	global qty_bids_g_HOTUSDT 
	global price_asks_g_HOTUSDT 
	global qty_asks_g_HOTUSDT 

	symbol_g_HOTUSDT = symbol_c_l_HOTUSDT 
	price_bids_g_HOTUSDT = Decimal(price_bids_c_l_HOTUSDT) 
	qty_bids_g_HOTUSDT = Decimal(qty_bids_c_l_HOTUSDT) 
	price_asks_g_HOTUSDT = Decimal(price_asks_c_l_HOTUSDT) 
	qty_asks_g_HOTUSDT = Decimal(qty_asks_c_l_HOTUSDT) 


def loop_HOTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hotusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HOTUSDT) 
	ws.run_forever() 


Thread(target=loop_HOTUSDT).start() 
symbol_g_ZILUSDT = 'ZILUSDT' 
price_bids_g_ZILUSDT = Decimal('0.0') 
qty_bids_g_ZILUSDT = Decimal('0.0') 
price_asks_g_ZILUSDT = Decimal('0.0') 
qty_asks_g_ZILUSDT = Decimal('0.0') 
stepSize_g_ZILUSDT = Decimal('0.1') 


def on_message_ZILUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZILUSDT = 'ZILUSDT' 
	price_bids_c_l_ZILUSDT = data['b'] 
	qty_bids_c_l_ZILUSDT = data['B'] 
	price_asks_c_l_ZILUSDT = data['a'] 
	qty_asks_c_l_ZILUSDT = data['A'] 

	global symbol_g_ZILUSDT 
	global price_bids_g_ZILUSDT 
	global qty_bids_g_ZILUSDT 
	global price_asks_g_ZILUSDT 
	global qty_asks_g_ZILUSDT 

	symbol_g_ZILUSDT = symbol_c_l_ZILUSDT 
	price_bids_g_ZILUSDT = Decimal(price_bids_c_l_ZILUSDT) 
	qty_bids_g_ZILUSDT = Decimal(qty_bids_c_l_ZILUSDT) 
	price_asks_g_ZILUSDT = Decimal(price_asks_c_l_ZILUSDT) 
	qty_asks_g_ZILUSDT = Decimal(qty_asks_c_l_ZILUSDT) 


def loop_ZILUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zilusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZILUSDT) 
	ws.run_forever() 


Thread(target=loop_ZILUSDT).start() 
symbol_g_ENJUSDT = 'ENJUSDT' 
price_bids_g_ENJUSDT = Decimal('0.0') 
qty_bids_g_ENJUSDT = Decimal('0.0') 
price_asks_g_ENJUSDT = Decimal('0.0') 
qty_asks_g_ENJUSDT = Decimal('0.0') 
stepSize_g_ENJUSDT = Decimal('0.1') 


def on_message_ENJUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENJUSDT = 'ENJUSDT' 
	price_bids_c_l_ENJUSDT = data['b'] 
	qty_bids_c_l_ENJUSDT = data['B'] 
	price_asks_c_l_ENJUSDT = data['a'] 
	qty_asks_c_l_ENJUSDT = data['A'] 

	global symbol_g_ENJUSDT 
	global price_bids_g_ENJUSDT 
	global qty_bids_g_ENJUSDT 
	global price_asks_g_ENJUSDT 
	global qty_asks_g_ENJUSDT 

	symbol_g_ENJUSDT = symbol_c_l_ENJUSDT 
	price_bids_g_ENJUSDT = Decimal(price_bids_c_l_ENJUSDT) 
	qty_bids_g_ENJUSDT = Decimal(qty_bids_c_l_ENJUSDT) 
	price_asks_g_ENJUSDT = Decimal(price_asks_c_l_ENJUSDT) 
	qty_asks_g_ENJUSDT = Decimal(qty_asks_c_l_ENJUSDT) 


def loop_ENJUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/enjusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENJUSDT) 
	ws.run_forever() 


Thread(target=loop_ENJUSDT).start() 
symbol_g_MATICUSDT = 'MATICUSDT' 
price_bids_g_MATICUSDT = Decimal('0.0') 
qty_bids_g_MATICUSDT = Decimal('0.0') 
price_asks_g_MATICUSDT = Decimal('0.0') 
qty_asks_g_MATICUSDT = Decimal('0.0') 
stepSize_g_MATICUSDT = Decimal('0.1') 


def on_message_MATICUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MATICUSDT = 'MATICUSDT' 
	price_bids_c_l_MATICUSDT = data['b'] 
	qty_bids_c_l_MATICUSDT = data['B'] 
	price_asks_c_l_MATICUSDT = data['a'] 
	qty_asks_c_l_MATICUSDT = data['A'] 

	global symbol_g_MATICUSDT 
	global price_bids_g_MATICUSDT 
	global qty_bids_g_MATICUSDT 
	global price_asks_g_MATICUSDT 
	global qty_asks_g_MATICUSDT 

	symbol_g_MATICUSDT = symbol_c_l_MATICUSDT 
	price_bids_g_MATICUSDT = Decimal(price_bids_c_l_MATICUSDT) 
	qty_bids_g_MATICUSDT = Decimal(qty_bids_c_l_MATICUSDT) 
	price_asks_g_MATICUSDT = Decimal(price_asks_c_l_MATICUSDT) 
	qty_asks_g_MATICUSDT = Decimal(qty_asks_c_l_MATICUSDT) 


def loop_MATICUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maticusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MATICUSDT) 
	ws.run_forever() 


Thread(target=loop_MATICUSDT).start() 
symbol_g_ATOMUSDT = 'ATOMUSDT' 
price_bids_g_ATOMUSDT = Decimal('0.0') 
qty_bids_g_ATOMUSDT = Decimal('0.0') 
price_asks_g_ATOMUSDT = Decimal('0.0') 
qty_asks_g_ATOMUSDT = Decimal('0.0') 
stepSize_g_ATOMUSDT = Decimal('0.01') 


def on_message_ATOMUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATOMUSDT = 'ATOMUSDT' 
	price_bids_c_l_ATOMUSDT = data['b'] 
	qty_bids_c_l_ATOMUSDT = data['B'] 
	price_asks_c_l_ATOMUSDT = data['a'] 
	qty_asks_c_l_ATOMUSDT = data['A'] 

	global symbol_g_ATOMUSDT 
	global price_bids_g_ATOMUSDT 
	global qty_bids_g_ATOMUSDT 
	global price_asks_g_ATOMUSDT 
	global qty_asks_g_ATOMUSDT 

	symbol_g_ATOMUSDT = symbol_c_l_ATOMUSDT 
	price_bids_g_ATOMUSDT = Decimal(price_bids_c_l_ATOMUSDT) 
	qty_bids_g_ATOMUSDT = Decimal(qty_bids_c_l_ATOMUSDT) 
	price_asks_g_ATOMUSDT = Decimal(price_asks_c_l_ATOMUSDT) 
	qty_asks_g_ATOMUSDT = Decimal(qty_asks_c_l_ATOMUSDT) 


def loop_ATOMUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atomusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATOMUSDT) 
	ws.run_forever() 


Thread(target=loop_ATOMUSDT).start() 
symbol_g_ONEUSDT = 'ONEUSDT' 
price_bids_g_ONEUSDT = Decimal('0.0') 
qty_bids_g_ONEUSDT = Decimal('0.0') 
price_asks_g_ONEUSDT = Decimal('0.0') 
qty_asks_g_ONEUSDT = Decimal('0.0') 
stepSize_g_ONEUSDT = Decimal('0.1') 


def on_message_ONEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ONEUSDT = 'ONEUSDT' 
	price_bids_c_l_ONEUSDT = data['b'] 
	qty_bids_c_l_ONEUSDT = data['B'] 
	price_asks_c_l_ONEUSDT = data['a'] 
	qty_asks_c_l_ONEUSDT = data['A'] 

	global symbol_g_ONEUSDT 
	global price_bids_g_ONEUSDT 
	global qty_bids_g_ONEUSDT 
	global price_asks_g_ONEUSDT 
	global qty_asks_g_ONEUSDT 

	symbol_g_ONEUSDT = symbol_c_l_ONEUSDT 
	price_bids_g_ONEUSDT = Decimal(price_bids_c_l_ONEUSDT) 
	qty_bids_g_ONEUSDT = Decimal(qty_bids_c_l_ONEUSDT) 
	price_asks_g_ONEUSDT = Decimal(price_asks_c_l_ONEUSDT) 
	qty_asks_g_ONEUSDT = Decimal(qty_asks_c_l_ONEUSDT) 


def loop_ONEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/oneusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ONEUSDT) 
	ws.run_forever() 


Thread(target=loop_ONEUSDT).start() 
symbol_g_FTMUSDT = 'FTMUSDT' 
price_bids_g_FTMUSDT = Decimal('0.0') 
qty_bids_g_FTMUSDT = Decimal('0.0') 
price_asks_g_FTMUSDT = Decimal('0.0') 
qty_asks_g_FTMUSDT = Decimal('0.0') 
stepSize_g_FTMUSDT = Decimal('1.0') 


def on_message_FTMUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FTMUSDT = 'FTMUSDT' 
	price_bids_c_l_FTMUSDT = data['b'] 
	qty_bids_c_l_FTMUSDT = data['B'] 
	price_asks_c_l_FTMUSDT = data['a'] 
	qty_asks_c_l_FTMUSDT = data['A'] 

	global symbol_g_FTMUSDT 
	global price_bids_g_FTMUSDT 
	global qty_bids_g_FTMUSDT 
	global price_asks_g_FTMUSDT 
	global qty_asks_g_FTMUSDT 

	symbol_g_FTMUSDT = symbol_c_l_FTMUSDT 
	price_bids_g_FTMUSDT = Decimal(price_bids_c_l_FTMUSDT) 
	qty_bids_g_FTMUSDT = Decimal(qty_bids_c_l_FTMUSDT) 
	price_asks_g_FTMUSDT = Decimal(price_asks_c_l_FTMUSDT) 
	qty_asks_g_FTMUSDT = Decimal(qty_asks_c_l_FTMUSDT) 


def loop_FTMUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ftmusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FTMUSDT) 
	ws.run_forever() 


Thread(target=loop_FTMUSDT).start() 
symbol_g_ALGOUSDT = 'ALGOUSDT' 
price_bids_g_ALGOUSDT = Decimal('0.0') 
qty_bids_g_ALGOUSDT = Decimal('0.0') 
price_asks_g_ALGOUSDT = Decimal('0.0') 
qty_asks_g_ALGOUSDT = Decimal('0.0') 
stepSize_g_ALGOUSDT = Decimal('1.0') 


def on_message_ALGOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALGOUSDT = 'ALGOUSDT' 
	price_bids_c_l_ALGOUSDT = data['b'] 
	qty_bids_c_l_ALGOUSDT = data['B'] 
	price_asks_c_l_ALGOUSDT = data['a'] 
	qty_asks_c_l_ALGOUSDT = data['A'] 

	global symbol_g_ALGOUSDT 
	global price_bids_g_ALGOUSDT 
	global qty_bids_g_ALGOUSDT 
	global price_asks_g_ALGOUSDT 
	global qty_asks_g_ALGOUSDT 

	symbol_g_ALGOUSDT = symbol_c_l_ALGOUSDT 
	price_bids_g_ALGOUSDT = Decimal(price_bids_c_l_ALGOUSDT) 
	qty_bids_g_ALGOUSDT = Decimal(qty_bids_c_l_ALGOUSDT) 
	price_asks_g_ALGOUSDT = Decimal(price_asks_c_l_ALGOUSDT) 
	qty_asks_g_ALGOUSDT = Decimal(qty_asks_c_l_ALGOUSDT) 


def loop_ALGOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/algousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALGOUSDT) 
	ws.run_forever() 


Thread(target=loop_ALGOUSDT).start() 
symbol_g_DOGEUSDT = 'DOGEUSDT' 
price_bids_g_DOGEUSDT = Decimal('0.0') 
qty_bids_g_DOGEUSDT = Decimal('0.0') 
price_asks_g_DOGEUSDT = Decimal('0.0') 
qty_asks_g_DOGEUSDT = Decimal('0.0') 
stepSize_g_DOGEUSDT = Decimal('1.0') 


def on_message_DOGEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOGEUSDT = 'DOGEUSDT' 
	price_bids_c_l_DOGEUSDT = data['b'] 
	qty_bids_c_l_DOGEUSDT = data['B'] 
	price_asks_c_l_DOGEUSDT = data['a'] 
	qty_asks_c_l_DOGEUSDT = data['A'] 

	global symbol_g_DOGEUSDT 
	global price_bids_g_DOGEUSDT 
	global qty_bids_g_DOGEUSDT 
	global price_asks_g_DOGEUSDT 
	global qty_asks_g_DOGEUSDT 

	symbol_g_DOGEUSDT = symbol_c_l_DOGEUSDT 
	price_bids_g_DOGEUSDT = Decimal(price_bids_c_l_DOGEUSDT) 
	qty_bids_g_DOGEUSDT = Decimal(qty_bids_c_l_DOGEUSDT) 
	price_asks_g_DOGEUSDT = Decimal(price_asks_c_l_DOGEUSDT) 
	qty_asks_g_DOGEUSDT = Decimal(qty_asks_c_l_DOGEUSDT) 


def loop_DOGEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dogeusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOGEUSDT) 
	ws.run_forever() 


Thread(target=loop_DOGEUSDT).start() 
symbol_g_ANKRUSDT = 'ANKRUSDT' 
price_bids_g_ANKRUSDT = Decimal('0.0') 
qty_bids_g_ANKRUSDT = Decimal('0.0') 
price_asks_g_ANKRUSDT = Decimal('0.0') 
qty_asks_g_ANKRUSDT = Decimal('0.0') 
stepSize_g_ANKRUSDT = Decimal('0.1') 


def on_message_ANKRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ANKRUSDT = 'ANKRUSDT' 
	price_bids_c_l_ANKRUSDT = data['b'] 
	qty_bids_c_l_ANKRUSDT = data['B'] 
	price_asks_c_l_ANKRUSDT = data['a'] 
	qty_asks_c_l_ANKRUSDT = data['A'] 

	global symbol_g_ANKRUSDT 
	global price_bids_g_ANKRUSDT 
	global qty_bids_g_ANKRUSDT 
	global price_asks_g_ANKRUSDT 
	global qty_asks_g_ANKRUSDT 

	symbol_g_ANKRUSDT = symbol_c_l_ANKRUSDT 
	price_bids_g_ANKRUSDT = Decimal(price_bids_c_l_ANKRUSDT) 
	qty_bids_g_ANKRUSDT = Decimal(qty_bids_c_l_ANKRUSDT) 
	price_asks_g_ANKRUSDT = Decimal(price_asks_c_l_ANKRUSDT) 
	qty_asks_g_ANKRUSDT = Decimal(qty_asks_c_l_ANKRUSDT) 


def loop_ANKRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ankrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ANKRUSDT) 
	ws.run_forever() 


Thread(target=loop_ANKRUSDT).start() 
symbol_g_WINUSDT = 'WINUSDT' 
price_bids_g_WINUSDT = Decimal('0.0') 
qty_bids_g_WINUSDT = Decimal('0.0') 
price_asks_g_WINUSDT = Decimal('0.0') 
qty_asks_g_WINUSDT = Decimal('0.0') 
stepSize_g_WINUSDT = Decimal('1.0') 


def on_message_WINUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WINUSDT = 'WINUSDT' 
	price_bids_c_l_WINUSDT = data['b'] 
	qty_bids_c_l_WINUSDT = data['B'] 
	price_asks_c_l_WINUSDT = data['a'] 
	qty_asks_c_l_WINUSDT = data['A'] 

	global symbol_g_WINUSDT 
	global price_bids_g_WINUSDT 
	global qty_bids_g_WINUSDT 
	global price_asks_g_WINUSDT 
	global qty_asks_g_WINUSDT 

	symbol_g_WINUSDT = symbol_c_l_WINUSDT 
	price_bids_g_WINUSDT = Decimal(price_bids_c_l_WINUSDT) 
	qty_bids_g_WINUSDT = Decimal(qty_bids_c_l_WINUSDT) 
	price_asks_g_WINUSDT = Decimal(price_asks_c_l_WINUSDT) 
	qty_asks_g_WINUSDT = Decimal(qty_asks_c_l_WINUSDT) 


def loop_WINUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/winusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WINUSDT) 
	ws.run_forever() 


Thread(target=loop_WINUSDT).start() 
symbol_g_COSUSDT = 'COSUSDT' 
price_bids_g_COSUSDT = Decimal('0.0') 
qty_bids_g_COSUSDT = Decimal('0.0') 
price_asks_g_COSUSDT = Decimal('0.0') 
qty_asks_g_COSUSDT = Decimal('0.0') 
stepSize_g_COSUSDT = Decimal('0.1') 


def on_message_COSUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COSUSDT = 'COSUSDT' 
	price_bids_c_l_COSUSDT = data['b'] 
	qty_bids_c_l_COSUSDT = data['B'] 
	price_asks_c_l_COSUSDT = data['a'] 
	qty_asks_c_l_COSUSDT = data['A'] 

	global symbol_g_COSUSDT 
	global price_bids_g_COSUSDT 
	global qty_bids_g_COSUSDT 
	global price_asks_g_COSUSDT 
	global qty_asks_g_COSUSDT 

	symbol_g_COSUSDT = symbol_c_l_COSUSDT 
	price_bids_g_COSUSDT = Decimal(price_bids_c_l_COSUSDT) 
	qty_bids_g_COSUSDT = Decimal(qty_bids_c_l_COSUSDT) 
	price_asks_g_COSUSDT = Decimal(price_asks_c_l_COSUSDT) 
	qty_asks_g_COSUSDT = Decimal(qty_asks_c_l_COSUSDT) 


def loop_COSUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cosusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COSUSDT) 
	ws.run_forever() 


Thread(target=loop_COSUSDT).start() 
symbol_g_COCOSUSDT = 'COCOSUSDT' 
price_bids_g_COCOSUSDT = Decimal('0.0') 
qty_bids_g_COCOSUSDT = Decimal('0.0') 
price_asks_g_COCOSUSDT = Decimal('0.0') 
qty_asks_g_COCOSUSDT = Decimal('0.0') 
stepSize_g_COCOSUSDT = Decimal('1.0') 


def on_message_COCOSUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COCOSUSDT = 'COCOSUSDT' 
	price_bids_c_l_COCOSUSDT = data['b'] 
	qty_bids_c_l_COCOSUSDT = data['B'] 
	price_asks_c_l_COCOSUSDT = data['a'] 
	qty_asks_c_l_COCOSUSDT = data['A'] 

	global symbol_g_COCOSUSDT 
	global price_bids_g_COCOSUSDT 
	global qty_bids_g_COCOSUSDT 
	global price_asks_g_COCOSUSDT 
	global qty_asks_g_COCOSUSDT 

	symbol_g_COCOSUSDT = symbol_c_l_COCOSUSDT 
	price_bids_g_COCOSUSDT = Decimal(price_bids_c_l_COCOSUSDT) 
	qty_bids_g_COCOSUSDT = Decimal(qty_bids_c_l_COCOSUSDT) 
	price_asks_g_COCOSUSDT = Decimal(price_asks_c_l_COCOSUSDT) 
	qty_asks_g_COCOSUSDT = Decimal(qty_asks_c_l_COCOSUSDT) 


def loop_COCOSUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cocosusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COCOSUSDT) 
	ws.run_forever() 


Thread(target=loop_COCOSUSDT).start() 
symbol_g_DENTUSDT = 'DENTUSDT' 
price_bids_g_DENTUSDT = Decimal('0.0') 
qty_bids_g_DENTUSDT = Decimal('0.0') 
price_asks_g_DENTUSDT = Decimal('0.0') 
qty_asks_g_DENTUSDT = Decimal('0.0') 
stepSize_g_DENTUSDT = Decimal('1.0') 


def on_message_DENTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DENTUSDT = 'DENTUSDT' 
	price_bids_c_l_DENTUSDT = data['b'] 
	qty_bids_c_l_DENTUSDT = data['B'] 
	price_asks_c_l_DENTUSDT = data['a'] 
	qty_asks_c_l_DENTUSDT = data['A'] 

	global symbol_g_DENTUSDT 
	global price_bids_g_DENTUSDT 
	global qty_bids_g_DENTUSDT 
	global price_asks_g_DENTUSDT 
	global qty_asks_g_DENTUSDT 

	symbol_g_DENTUSDT = symbol_c_l_DENTUSDT 
	price_bids_g_DENTUSDT = Decimal(price_bids_c_l_DENTUSDT) 
	qty_bids_g_DENTUSDT = Decimal(qty_bids_c_l_DENTUSDT) 
	price_asks_g_DENTUSDT = Decimal(price_asks_c_l_DENTUSDT) 
	qty_asks_g_DENTUSDT = Decimal(qty_asks_c_l_DENTUSDT) 


def loop_DENTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dentusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DENTUSDT) 
	ws.run_forever() 


Thread(target=loop_DENTUSDT).start() 
symbol_g_CHZUSDT = 'CHZUSDT' 
price_bids_g_CHZUSDT = Decimal('0.0') 
qty_bids_g_CHZUSDT = Decimal('0.0') 
price_asks_g_CHZUSDT = Decimal('0.0') 
qty_asks_g_CHZUSDT = Decimal('0.0') 
stepSize_g_CHZUSDT = Decimal('1.0') 


def on_message_CHZUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHZUSDT = 'CHZUSDT' 
	price_bids_c_l_CHZUSDT = data['b'] 
	qty_bids_c_l_CHZUSDT = data['B'] 
	price_asks_c_l_CHZUSDT = data['a'] 
	qty_asks_c_l_CHZUSDT = data['A'] 

	global symbol_g_CHZUSDT 
	global price_bids_g_CHZUSDT 
	global qty_bids_g_CHZUSDT 
	global price_asks_g_CHZUSDT 
	global qty_asks_g_CHZUSDT 

	symbol_g_CHZUSDT = symbol_c_l_CHZUSDT 
	price_bids_g_CHZUSDT = Decimal(price_bids_c_l_CHZUSDT) 
	qty_bids_g_CHZUSDT = Decimal(qty_bids_c_l_CHZUSDT) 
	price_asks_g_CHZUSDT = Decimal(price_asks_c_l_CHZUSDT) 
	qty_asks_g_CHZUSDT = Decimal(qty_asks_c_l_CHZUSDT) 


def loop_CHZUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chzusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHZUSDT) 
	ws.run_forever() 


Thread(target=loop_CHZUSDT).start() 
symbol_g_BUSDUSDT = 'BUSDUSDT' 
price_bids_g_BUSDUSDT = Decimal('0.0') 
qty_bids_g_BUSDUSDT = Decimal('0.0') 
price_asks_g_BUSDUSDT = Decimal('0.0') 
qty_asks_g_BUSDUSDT = Decimal('0.0') 
stepSize_g_BUSDUSDT = Decimal('1.0') 


def on_message_BUSDUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BUSDUSDT = 'BUSDUSDT' 
	price_bids_c_l_BUSDUSDT = data['b'] 
	qty_bids_c_l_BUSDUSDT = data['B'] 
	price_asks_c_l_BUSDUSDT = data['a'] 
	qty_asks_c_l_BUSDUSDT = data['A'] 

	global symbol_g_BUSDUSDT 
	global price_bids_g_BUSDUSDT 
	global qty_bids_g_BUSDUSDT 
	global price_asks_g_BUSDUSDT 
	global qty_asks_g_BUSDUSDT 

	symbol_g_BUSDUSDT = symbol_c_l_BUSDUSDT 
	price_bids_g_BUSDUSDT = Decimal(price_bids_c_l_BUSDUSDT) 
	qty_bids_g_BUSDUSDT = Decimal(qty_bids_c_l_BUSDUSDT) 
	price_asks_g_BUSDUSDT = Decimal(price_asks_c_l_BUSDUSDT) 
	qty_asks_g_BUSDUSDT = Decimal(qty_asks_c_l_BUSDUSDT) 


def loop_BUSDUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/busdusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BUSDUSDT) 
	ws.run_forever() 


Thread(target=loop_BUSDUSDT).start() 
symbol_g_XTZUSDT = 'XTZUSDT' 
price_bids_g_XTZUSDT = Decimal('0.0') 
qty_bids_g_XTZUSDT = Decimal('0.0') 
price_asks_g_XTZUSDT = Decimal('0.0') 
qty_asks_g_XTZUSDT = Decimal('0.0') 
stepSize_g_XTZUSDT = Decimal('0.1') 


def on_message_XTZUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XTZUSDT = 'XTZUSDT' 
	price_bids_c_l_XTZUSDT = data['b'] 
	qty_bids_c_l_XTZUSDT = data['B'] 
	price_asks_c_l_XTZUSDT = data['a'] 
	qty_asks_c_l_XTZUSDT = data['A'] 

	global symbol_g_XTZUSDT 
	global price_bids_g_XTZUSDT 
	global qty_bids_g_XTZUSDT 
	global price_asks_g_XTZUSDT 
	global qty_asks_g_XTZUSDT 

	symbol_g_XTZUSDT = symbol_c_l_XTZUSDT 
	price_bids_g_XTZUSDT = Decimal(price_bids_c_l_XTZUSDT) 
	qty_bids_g_XTZUSDT = Decimal(qty_bids_c_l_XTZUSDT) 
	price_asks_g_XTZUSDT = Decimal(price_asks_c_l_XTZUSDT) 
	qty_asks_g_XTZUSDT = Decimal(qty_asks_c_l_XTZUSDT) 


def loop_XTZUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xtzusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XTZUSDT) 
	ws.run_forever() 


Thread(target=loop_XTZUSDT).start() 
symbol_g_RVNUSDT = 'RVNUSDT' 
price_bids_g_RVNUSDT = Decimal('0.0') 
qty_bids_g_RVNUSDT = Decimal('0.0') 
price_asks_g_RVNUSDT = Decimal('0.0') 
qty_asks_g_RVNUSDT = Decimal('0.0') 
stepSize_g_RVNUSDT = Decimal('0.1') 


def on_message_RVNUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RVNUSDT = 'RVNUSDT' 
	price_bids_c_l_RVNUSDT = data['b'] 
	qty_bids_c_l_RVNUSDT = data['B'] 
	price_asks_c_l_RVNUSDT = data['a'] 
	qty_asks_c_l_RVNUSDT = data['A'] 

	global symbol_g_RVNUSDT 
	global price_bids_g_RVNUSDT 
	global qty_bids_g_RVNUSDT 
	global price_asks_g_RVNUSDT 
	global qty_asks_g_RVNUSDT 

	symbol_g_RVNUSDT = symbol_c_l_RVNUSDT 
	price_bids_g_RVNUSDT = Decimal(price_bids_c_l_RVNUSDT) 
	qty_bids_g_RVNUSDT = Decimal(qty_bids_c_l_RVNUSDT) 
	price_asks_g_RVNUSDT = Decimal(price_asks_c_l_RVNUSDT) 
	qty_asks_g_RVNUSDT = Decimal(qty_asks_c_l_RVNUSDT) 


def loop_RVNUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rvnusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RVNUSDT) 
	ws.run_forever() 


Thread(target=loop_RVNUSDT).start() 
symbol_g_ARPAUSDT = 'ARPAUSDT' 
price_bids_g_ARPAUSDT = Decimal('0.0') 
qty_bids_g_ARPAUSDT = Decimal('0.0') 
price_asks_g_ARPAUSDT = Decimal('0.0') 
qty_asks_g_ARPAUSDT = Decimal('0.0') 
stepSize_g_ARPAUSDT = Decimal('0.1') 


def on_message_ARPAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ARPAUSDT = 'ARPAUSDT' 
	price_bids_c_l_ARPAUSDT = data['b'] 
	qty_bids_c_l_ARPAUSDT = data['B'] 
	price_asks_c_l_ARPAUSDT = data['a'] 
	qty_asks_c_l_ARPAUSDT = data['A'] 

	global symbol_g_ARPAUSDT 
	global price_bids_g_ARPAUSDT 
	global qty_bids_g_ARPAUSDT 
	global price_asks_g_ARPAUSDT 
	global qty_asks_g_ARPAUSDT 

	symbol_g_ARPAUSDT = symbol_c_l_ARPAUSDT 
	price_bids_g_ARPAUSDT = Decimal(price_bids_c_l_ARPAUSDT) 
	qty_bids_g_ARPAUSDT = Decimal(qty_bids_c_l_ARPAUSDT) 
	price_asks_g_ARPAUSDT = Decimal(price_asks_c_l_ARPAUSDT) 
	qty_asks_g_ARPAUSDT = Decimal(qty_asks_c_l_ARPAUSDT) 


def loop_ARPAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/arpausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ARPAUSDT) 
	ws.run_forever() 


Thread(target=loop_ARPAUSDT).start() 
symbol_g_SOLUSDT = 'SOLUSDT' 
price_bids_g_SOLUSDT = Decimal('0.0') 
qty_bids_g_SOLUSDT = Decimal('0.0') 
price_asks_g_SOLUSDT = Decimal('0.0') 
qty_asks_g_SOLUSDT = Decimal('0.0') 
stepSize_g_SOLUSDT = Decimal('0.01') 


def on_message_SOLUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SOLUSDT = 'SOLUSDT' 
	price_bids_c_l_SOLUSDT = data['b'] 
	qty_bids_c_l_SOLUSDT = data['B'] 
	price_asks_c_l_SOLUSDT = data['a'] 
	qty_asks_c_l_SOLUSDT = data['A'] 

	global symbol_g_SOLUSDT 
	global price_bids_g_SOLUSDT 
	global qty_bids_g_SOLUSDT 
	global price_asks_g_SOLUSDT 
	global qty_asks_g_SOLUSDT 

	symbol_g_SOLUSDT = symbol_c_l_SOLUSDT 
	price_bids_g_SOLUSDT = Decimal(price_bids_c_l_SOLUSDT) 
	qty_bids_g_SOLUSDT = Decimal(qty_bids_c_l_SOLUSDT) 
	price_asks_g_SOLUSDT = Decimal(price_asks_c_l_SOLUSDT) 
	qty_asks_g_SOLUSDT = Decimal(qty_asks_c_l_SOLUSDT) 


def loop_SOLUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/solusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SOLUSDT) 
	ws.run_forever() 


Thread(target=loop_SOLUSDT).start() 
symbol_g_LRCUSDT = 'LRCUSDT' 
price_bids_g_LRCUSDT = Decimal('0.0') 
qty_bids_g_LRCUSDT = Decimal('0.0') 
price_asks_g_LRCUSDT = Decimal('0.0') 
qty_asks_g_LRCUSDT = Decimal('0.0') 
stepSize_g_LRCUSDT = Decimal('1.0') 


def on_message_LRCUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LRCUSDT = 'LRCUSDT' 
	price_bids_c_l_LRCUSDT = data['b'] 
	qty_bids_c_l_LRCUSDT = data['B'] 
	price_asks_c_l_LRCUSDT = data['a'] 
	qty_asks_c_l_LRCUSDT = data['A'] 

	global symbol_g_LRCUSDT 
	global price_bids_g_LRCUSDT 
	global qty_bids_g_LRCUSDT 
	global price_asks_g_LRCUSDT 
	global qty_asks_g_LRCUSDT 

	symbol_g_LRCUSDT = symbol_c_l_LRCUSDT 
	price_bids_g_LRCUSDT = Decimal(price_bids_c_l_LRCUSDT) 
	qty_bids_g_LRCUSDT = Decimal(qty_bids_c_l_LRCUSDT) 
	price_asks_g_LRCUSDT = Decimal(price_asks_c_l_LRCUSDT) 
	qty_asks_g_LRCUSDT = Decimal(qty_asks_c_l_LRCUSDT) 


def loop_LRCUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lrcusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LRCUSDT) 
	ws.run_forever() 


Thread(target=loop_LRCUSDT).start() 
symbol_g_SXPUSDT = 'SXPUSDT' 
price_bids_g_SXPUSDT = Decimal('0.0') 
qty_bids_g_SXPUSDT = Decimal('0.0') 
price_asks_g_SXPUSDT = Decimal('0.0') 
qty_asks_g_SXPUSDT = Decimal('0.0') 
stepSize_g_SXPUSDT = Decimal('0.1') 


def on_message_SXPUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SXPUSDT = 'SXPUSDT' 
	price_bids_c_l_SXPUSDT = data['b'] 
	qty_bids_c_l_SXPUSDT = data['B'] 
	price_asks_c_l_SXPUSDT = data['a'] 
	qty_asks_c_l_SXPUSDT = data['A'] 

	global symbol_g_SXPUSDT 
	global price_bids_g_SXPUSDT 
	global qty_bids_g_SXPUSDT 
	global price_asks_g_SXPUSDT 
	global qty_asks_g_SXPUSDT 

	symbol_g_SXPUSDT = symbol_c_l_SXPUSDT 
	price_bids_g_SXPUSDT = Decimal(price_bids_c_l_SXPUSDT) 
	qty_bids_g_SXPUSDT = Decimal(qty_bids_c_l_SXPUSDT) 
	price_asks_g_SXPUSDT = Decimal(price_asks_c_l_SXPUSDT) 
	qty_asks_g_SXPUSDT = Decimal(qty_asks_c_l_SXPUSDT) 


def loop_SXPUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sxpusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SXPUSDT) 
	ws.run_forever() 


Thread(target=loop_SXPUSDT).start() 
symbol_g_STORJUSDT = 'STORJUSDT' 
price_bids_g_STORJUSDT = Decimal('0.0') 
qty_bids_g_STORJUSDT = Decimal('0.0') 
price_asks_g_STORJUSDT = Decimal('0.0') 
qty_asks_g_STORJUSDT = Decimal('0.0') 
stepSize_g_STORJUSDT = Decimal('1.0') 


def on_message_STORJUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STORJUSDT = 'STORJUSDT' 
	price_bids_c_l_STORJUSDT = data['b'] 
	qty_bids_c_l_STORJUSDT = data['B'] 
	price_asks_c_l_STORJUSDT = data['a'] 
	qty_asks_c_l_STORJUSDT = data['A'] 

	global symbol_g_STORJUSDT 
	global price_bids_g_STORJUSDT 
	global qty_bids_g_STORJUSDT 
	global price_asks_g_STORJUSDT 
	global qty_asks_g_STORJUSDT 

	symbol_g_STORJUSDT = symbol_c_l_STORJUSDT 
	price_bids_g_STORJUSDT = Decimal(price_bids_c_l_STORJUSDT) 
	qty_bids_g_STORJUSDT = Decimal(qty_bids_c_l_STORJUSDT) 
	price_asks_g_STORJUSDT = Decimal(price_asks_c_l_STORJUSDT) 
	qty_asks_g_STORJUSDT = Decimal(qty_asks_c_l_STORJUSDT) 


def loop_STORJUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/storjusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STORJUSDT) 
	ws.run_forever() 


Thread(target=loop_STORJUSDT).start() 
symbol_g_MANAUSDT = 'MANAUSDT' 
price_bids_g_MANAUSDT = Decimal('0.0') 
qty_bids_g_MANAUSDT = Decimal('0.0') 
price_asks_g_MANAUSDT = Decimal('0.0') 
qty_asks_g_MANAUSDT = Decimal('0.0') 
stepSize_g_MANAUSDT = Decimal('1.0') 


def on_message_MANAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MANAUSDT = 'MANAUSDT' 
	price_bids_c_l_MANAUSDT = data['b'] 
	qty_bids_c_l_MANAUSDT = data['B'] 
	price_asks_c_l_MANAUSDT = data['a'] 
	qty_asks_c_l_MANAUSDT = data['A'] 

	global symbol_g_MANAUSDT 
	global price_bids_g_MANAUSDT 
	global qty_bids_g_MANAUSDT 
	global price_asks_g_MANAUSDT 
	global qty_asks_g_MANAUSDT 

	symbol_g_MANAUSDT = symbol_c_l_MANAUSDT 
	price_bids_g_MANAUSDT = Decimal(price_bids_c_l_MANAUSDT) 
	qty_bids_g_MANAUSDT = Decimal(qty_bids_c_l_MANAUSDT) 
	price_asks_g_MANAUSDT = Decimal(price_asks_c_l_MANAUSDT) 
	qty_asks_g_MANAUSDT = Decimal(qty_asks_c_l_MANAUSDT) 


def loop_MANAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/manausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MANAUSDT) 
	ws.run_forever() 


Thread(target=loop_MANAUSDT).start() 
symbol_g_SANDUSDT = 'SANDUSDT' 
price_bids_g_SANDUSDT = Decimal('0.0') 
qty_bids_g_SANDUSDT = Decimal('0.0') 
price_asks_g_SANDUSDT = Decimal('0.0') 
qty_asks_g_SANDUSDT = Decimal('0.0') 
stepSize_g_SANDUSDT = Decimal('1.0') 


def on_message_SANDUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SANDUSDT = 'SANDUSDT' 
	price_bids_c_l_SANDUSDT = data['b'] 
	qty_bids_c_l_SANDUSDT = data['B'] 
	price_asks_c_l_SANDUSDT = data['a'] 
	qty_asks_c_l_SANDUSDT = data['A'] 

	global symbol_g_SANDUSDT 
	global price_bids_g_SANDUSDT 
	global qty_bids_g_SANDUSDT 
	global price_asks_g_SANDUSDT 
	global qty_asks_g_SANDUSDT 

	symbol_g_SANDUSDT = symbol_c_l_SANDUSDT 
	price_bids_g_SANDUSDT = Decimal(price_bids_c_l_SANDUSDT) 
	qty_bids_g_SANDUSDT = Decimal(qty_bids_c_l_SANDUSDT) 
	price_asks_g_SANDUSDT = Decimal(price_asks_c_l_SANDUSDT) 
	qty_asks_g_SANDUSDT = Decimal(qty_asks_c_l_SANDUSDT) 


def loop_SANDUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sandusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SANDUSDT) 
	ws.run_forever() 


Thread(target=loop_SANDUSDT).start() 
symbol_g_DOTUSDT = 'DOTUSDT' 
price_bids_g_DOTUSDT = Decimal('0.0') 
qty_bids_g_DOTUSDT = Decimal('0.0') 
price_asks_g_DOTUSDT = Decimal('0.0') 
qty_asks_g_DOTUSDT = Decimal('0.0') 
stepSize_g_DOTUSDT = Decimal('0.01') 


def on_message_DOTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOTUSDT = 'DOTUSDT' 
	price_bids_c_l_DOTUSDT = data['b'] 
	qty_bids_c_l_DOTUSDT = data['B'] 
	price_asks_c_l_DOTUSDT = data['a'] 
	qty_asks_c_l_DOTUSDT = data['A'] 

	global symbol_g_DOTUSDT 
	global price_bids_g_DOTUSDT 
	global qty_bids_g_DOTUSDT 
	global price_asks_g_DOTUSDT 
	global qty_asks_g_DOTUSDT 

	symbol_g_DOTUSDT = symbol_c_l_DOTUSDT 
	price_bids_g_DOTUSDT = Decimal(price_bids_c_l_DOTUSDT) 
	qty_bids_g_DOTUSDT = Decimal(qty_bids_c_l_DOTUSDT) 
	price_asks_g_DOTUSDT = Decimal(price_asks_c_l_DOTUSDT) 
	qty_asks_g_DOTUSDT = Decimal(qty_asks_c_l_DOTUSDT) 


def loop_DOTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dotusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOTUSDT) 
	ws.run_forever() 


Thread(target=loop_DOTUSDT).start() 
symbol_g_LUNAUSDT = 'LUNAUSDT' 
price_bids_g_LUNAUSDT = Decimal('0.0') 
qty_bids_g_LUNAUSDT = Decimal('0.0') 
price_asks_g_LUNAUSDT = Decimal('0.0') 
qty_asks_g_LUNAUSDT = Decimal('0.0') 
stepSize_g_LUNAUSDT = Decimal('0.01') 


def on_message_LUNAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LUNAUSDT = 'LUNAUSDT' 
	price_bids_c_l_LUNAUSDT = data['b'] 
	qty_bids_c_l_LUNAUSDT = data['B'] 
	price_asks_c_l_LUNAUSDT = data['a'] 
	qty_asks_c_l_LUNAUSDT = data['A'] 

	global symbol_g_LUNAUSDT 
	global price_bids_g_LUNAUSDT 
	global qty_bids_g_LUNAUSDT 
	global price_asks_g_LUNAUSDT 
	global qty_asks_g_LUNAUSDT 

	symbol_g_LUNAUSDT = symbol_c_l_LUNAUSDT 
	price_bids_g_LUNAUSDT = Decimal(price_bids_c_l_LUNAUSDT) 
	qty_bids_g_LUNAUSDT = Decimal(qty_bids_c_l_LUNAUSDT) 
	price_asks_g_LUNAUSDT = Decimal(price_asks_c_l_LUNAUSDT) 
	qty_asks_g_LUNAUSDT = Decimal(qty_asks_c_l_LUNAUSDT) 


def loop_LUNAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lunausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LUNAUSDT) 
	ws.run_forever() 


Thread(target=loop_LUNAUSDT).start() 
symbol_g_RUNEUSDT = 'RUNEUSDT' 
price_bids_g_RUNEUSDT = Decimal('0.0') 
qty_bids_g_RUNEUSDT = Decimal('0.0') 
price_asks_g_RUNEUSDT = Decimal('0.0') 
qty_asks_g_RUNEUSDT = Decimal('0.0') 
stepSize_g_RUNEUSDT = Decimal('0.1') 


def on_message_RUNEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RUNEUSDT = 'RUNEUSDT' 
	price_bids_c_l_RUNEUSDT = data['b'] 
	qty_bids_c_l_RUNEUSDT = data['B'] 
	price_asks_c_l_RUNEUSDT = data['a'] 
	qty_asks_c_l_RUNEUSDT = data['A'] 

	global symbol_g_RUNEUSDT 
	global price_bids_g_RUNEUSDT 
	global qty_bids_g_RUNEUSDT 
	global price_asks_g_RUNEUSDT 
	global qty_asks_g_RUNEUSDT 

	symbol_g_RUNEUSDT = symbol_c_l_RUNEUSDT 
	price_bids_g_RUNEUSDT = Decimal(price_bids_c_l_RUNEUSDT) 
	qty_bids_g_RUNEUSDT = Decimal(qty_bids_c_l_RUNEUSDT) 
	price_asks_g_RUNEUSDT = Decimal(price_asks_c_l_RUNEUSDT) 
	qty_asks_g_RUNEUSDT = Decimal(qty_asks_c_l_RUNEUSDT) 


def loop_RUNEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/runeusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RUNEUSDT) 
	ws.run_forever() 


Thread(target=loop_RUNEUSDT).start() 
symbol_g_UMAUSDT = 'UMAUSDT' 
price_bids_g_UMAUSDT = Decimal('0.0') 
qty_bids_g_UMAUSDT = Decimal('0.0') 
price_asks_g_UMAUSDT = Decimal('0.0') 
qty_asks_g_UMAUSDT = Decimal('0.0') 
stepSize_g_UMAUSDT = Decimal('0.1') 


def on_message_UMAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UMAUSDT = 'UMAUSDT' 
	price_bids_c_l_UMAUSDT = data['b'] 
	qty_bids_c_l_UMAUSDT = data['B'] 
	price_asks_c_l_UMAUSDT = data['a'] 
	qty_asks_c_l_UMAUSDT = data['A'] 

	global symbol_g_UMAUSDT 
	global price_bids_g_UMAUSDT 
	global qty_bids_g_UMAUSDT 
	global price_asks_g_UMAUSDT 
	global qty_asks_g_UMAUSDT 

	symbol_g_UMAUSDT = symbol_c_l_UMAUSDT 
	price_bids_g_UMAUSDT = Decimal(price_bids_c_l_UMAUSDT) 
	qty_bids_g_UMAUSDT = Decimal(qty_bids_c_l_UMAUSDT) 
	price_asks_g_UMAUSDT = Decimal(price_asks_c_l_UMAUSDT) 
	qty_asks_g_UMAUSDT = Decimal(qty_asks_c_l_UMAUSDT) 


def loop_UMAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/umausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UMAUSDT) 
	ws.run_forever() 


Thread(target=loop_UMAUSDT).start() 
symbol_g_BELUSDT = 'BELUSDT' 
price_bids_g_BELUSDT = Decimal('0.0') 
qty_bids_g_BELUSDT = Decimal('0.0') 
price_asks_g_BELUSDT = Decimal('0.0') 
qty_asks_g_BELUSDT = Decimal('0.0') 
stepSize_g_BELUSDT = Decimal('0.1') 


def on_message_BELUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BELUSDT = 'BELUSDT' 
	price_bids_c_l_BELUSDT = data['b'] 
	qty_bids_c_l_BELUSDT = data['B'] 
	price_asks_c_l_BELUSDT = data['a'] 
	qty_asks_c_l_BELUSDT = data['A'] 

	global symbol_g_BELUSDT 
	global price_bids_g_BELUSDT 
	global qty_bids_g_BELUSDT 
	global price_asks_g_BELUSDT 
	global qty_asks_g_BELUSDT 

	symbol_g_BELUSDT = symbol_c_l_BELUSDT 
	price_bids_g_BELUSDT = Decimal(price_bids_c_l_BELUSDT) 
	qty_bids_g_BELUSDT = Decimal(qty_bids_c_l_BELUSDT) 
	price_asks_g_BELUSDT = Decimal(price_asks_c_l_BELUSDT) 
	qty_asks_g_BELUSDT = Decimal(qty_asks_c_l_BELUSDT) 


def loop_BELUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/belusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BELUSDT) 
	ws.run_forever() 


Thread(target=loop_BELUSDT).start() 
symbol_g_AVAXUSDT = 'AVAXUSDT' 
price_bids_g_AVAXUSDT = Decimal('0.0') 
qty_bids_g_AVAXUSDT = Decimal('0.0') 
price_asks_g_AVAXUSDT = Decimal('0.0') 
qty_asks_g_AVAXUSDT = Decimal('0.0') 
stepSize_g_AVAXUSDT = Decimal('0.01') 


def on_message_AVAXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AVAXUSDT = 'AVAXUSDT' 
	price_bids_c_l_AVAXUSDT = data['b'] 
	qty_bids_c_l_AVAXUSDT = data['B'] 
	price_asks_c_l_AVAXUSDT = data['a'] 
	qty_asks_c_l_AVAXUSDT = data['A'] 

	global symbol_g_AVAXUSDT 
	global price_bids_g_AVAXUSDT 
	global qty_bids_g_AVAXUSDT 
	global price_asks_g_AVAXUSDT 
	global qty_asks_g_AVAXUSDT 

	symbol_g_AVAXUSDT = symbol_c_l_AVAXUSDT 
	price_bids_g_AVAXUSDT = Decimal(price_bids_c_l_AVAXUSDT) 
	qty_bids_g_AVAXUSDT = Decimal(qty_bids_c_l_AVAXUSDT) 
	price_asks_g_AVAXUSDT = Decimal(price_asks_c_l_AVAXUSDT) 
	qty_asks_g_AVAXUSDT = Decimal(qty_asks_c_l_AVAXUSDT) 


def loop_AVAXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/avaxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AVAXUSDT) 
	ws.run_forever() 


Thread(target=loop_AVAXUSDT).start() 
symbol_g_NEARUSDT = 'NEARUSDT' 
price_bids_g_NEARUSDT = Decimal('0.0') 
qty_bids_g_NEARUSDT = Decimal('0.0') 
price_asks_g_NEARUSDT = Decimal('0.0') 
qty_asks_g_NEARUSDT = Decimal('0.0') 
stepSize_g_NEARUSDT = Decimal('0.1') 


def on_message_NEARUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEARUSDT = 'NEARUSDT' 
	price_bids_c_l_NEARUSDT = data['b'] 
	qty_bids_c_l_NEARUSDT = data['B'] 
	price_asks_c_l_NEARUSDT = data['a'] 
	qty_asks_c_l_NEARUSDT = data['A'] 

	global symbol_g_NEARUSDT 
	global price_bids_g_NEARUSDT 
	global qty_bids_g_NEARUSDT 
	global price_asks_g_NEARUSDT 
	global qty_asks_g_NEARUSDT 

	symbol_g_NEARUSDT = symbol_c_l_NEARUSDT 
	price_bids_g_NEARUSDT = Decimal(price_bids_c_l_NEARUSDT) 
	qty_bids_g_NEARUSDT = Decimal(qty_bids_c_l_NEARUSDT) 
	price_asks_g_NEARUSDT = Decimal(price_asks_c_l_NEARUSDT) 
	qty_asks_g_NEARUSDT = Decimal(qty_asks_c_l_NEARUSDT) 


def loop_NEARUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nearusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEARUSDT) 
	ws.run_forever() 


Thread(target=loop_NEARUSDT).start() 
symbol_g_FILUSDT = 'FILUSDT' 
price_bids_g_FILUSDT = Decimal('0.0') 
qty_bids_g_FILUSDT = Decimal('0.0') 
price_asks_g_FILUSDT = Decimal('0.0') 
qty_asks_g_FILUSDT = Decimal('0.0') 
stepSize_g_FILUSDT = Decimal('0.01') 


def on_message_FILUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FILUSDT = 'FILUSDT' 
	price_bids_c_l_FILUSDT = data['b'] 
	qty_bids_c_l_FILUSDT = data['B'] 
	price_asks_c_l_FILUSDT = data['a'] 
	qty_asks_c_l_FILUSDT = data['A'] 

	global symbol_g_FILUSDT 
	global price_bids_g_FILUSDT 
	global qty_bids_g_FILUSDT 
	global price_asks_g_FILUSDT 
	global qty_asks_g_FILUSDT 

	symbol_g_FILUSDT = symbol_c_l_FILUSDT 
	price_bids_g_FILUSDT = Decimal(price_bids_c_l_FILUSDT) 
	qty_bids_g_FILUSDT = Decimal(qty_bids_c_l_FILUSDT) 
	price_asks_g_FILUSDT = Decimal(price_asks_c_l_FILUSDT) 
	qty_asks_g_FILUSDT = Decimal(qty_asks_c_l_FILUSDT) 


def loop_FILUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/filusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FILUSDT) 
	ws.run_forever() 


Thread(target=loop_FILUSDT).start() 
symbol_g_INJUSDT = 'INJUSDT' 
price_bids_g_INJUSDT = Decimal('0.0') 
qty_bids_g_INJUSDT = Decimal('0.0') 
price_asks_g_INJUSDT = Decimal('0.0') 
qty_asks_g_INJUSDT = Decimal('0.0') 
stepSize_g_INJUSDT = Decimal('0.1') 


def on_message_INJUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_INJUSDT = 'INJUSDT' 
	price_bids_c_l_INJUSDT = data['b'] 
	qty_bids_c_l_INJUSDT = data['B'] 
	price_asks_c_l_INJUSDT = data['a'] 
	qty_asks_c_l_INJUSDT = data['A'] 

	global symbol_g_INJUSDT 
	global price_bids_g_INJUSDT 
	global qty_bids_g_INJUSDT 
	global price_asks_g_INJUSDT 
	global qty_asks_g_INJUSDT 

	symbol_g_INJUSDT = symbol_c_l_INJUSDT 
	price_bids_g_INJUSDT = Decimal(price_bids_c_l_INJUSDT) 
	qty_bids_g_INJUSDT = Decimal(qty_bids_c_l_INJUSDT) 
	price_asks_g_INJUSDT = Decimal(price_asks_c_l_INJUSDT) 
	qty_asks_g_INJUSDT = Decimal(qty_asks_c_l_INJUSDT) 


def loop_INJUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/injusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_INJUSDT) 
	ws.run_forever() 


Thread(target=loop_INJUSDT).start() 
symbol_g_AUDIOUSDT = 'AUDIOUSDT' 
price_bids_g_AUDIOUSDT = Decimal('0.0') 
qty_bids_g_AUDIOUSDT = Decimal('0.0') 
price_asks_g_AUDIOUSDT = Decimal('0.0') 
qty_asks_g_AUDIOUSDT = Decimal('0.0') 
stepSize_g_AUDIOUSDT = Decimal('0.1') 


def on_message_AUDIOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AUDIOUSDT = 'AUDIOUSDT' 
	price_bids_c_l_AUDIOUSDT = data['b'] 
	qty_bids_c_l_AUDIOUSDT = data['B'] 
	price_asks_c_l_AUDIOUSDT = data['a'] 
	qty_asks_c_l_AUDIOUSDT = data['A'] 

	global symbol_g_AUDIOUSDT 
	global price_bids_g_AUDIOUSDT 
	global qty_bids_g_AUDIOUSDT 
	global price_asks_g_AUDIOUSDT 
	global qty_asks_g_AUDIOUSDT 

	symbol_g_AUDIOUSDT = symbol_c_l_AUDIOUSDT 
	price_bids_g_AUDIOUSDT = Decimal(price_bids_c_l_AUDIOUSDT) 
	qty_bids_g_AUDIOUSDT = Decimal(qty_bids_c_l_AUDIOUSDT) 
	price_asks_g_AUDIOUSDT = Decimal(price_asks_c_l_AUDIOUSDT) 
	qty_asks_g_AUDIOUSDT = Decimal(qty_asks_c_l_AUDIOUSDT) 


def loop_AUDIOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/audiousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AUDIOUSDT) 
	ws.run_forever() 


Thread(target=loop_AUDIOUSDT).start() 
symbol_g_AXSUSDT = 'AXSUSDT' 
price_bids_g_AXSUSDT = Decimal('0.0') 
qty_bids_g_AXSUSDT = Decimal('0.0') 
price_asks_g_AXSUSDT = Decimal('0.0') 
qty_asks_g_AXSUSDT = Decimal('0.0') 
stepSize_g_AXSUSDT = Decimal('0.01') 


def on_message_AXSUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AXSUSDT = 'AXSUSDT' 
	price_bids_c_l_AXSUSDT = data['b'] 
	qty_bids_c_l_AXSUSDT = data['B'] 
	price_asks_c_l_AXSUSDT = data['a'] 
	qty_asks_c_l_AXSUSDT = data['A'] 

	global symbol_g_AXSUSDT 
	global price_bids_g_AXSUSDT 
	global qty_bids_g_AXSUSDT 
	global price_asks_g_AXSUSDT 
	global qty_asks_g_AXSUSDT 

	symbol_g_AXSUSDT = symbol_c_l_AXSUSDT 
	price_bids_g_AXSUSDT = Decimal(price_bids_c_l_AXSUSDT) 
	qty_bids_g_AXSUSDT = Decimal(qty_bids_c_l_AXSUSDT) 
	price_asks_g_AXSUSDT = Decimal(price_asks_c_l_AXSUSDT) 
	qty_asks_g_AXSUSDT = Decimal(qty_asks_c_l_AXSUSDT) 


def loop_AXSUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/axsusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AXSUSDT) 
	ws.run_forever() 


Thread(target=loop_AXSUSDT).start() 
symbol_g_ROSEUSDT = 'ROSEUSDT' 
price_bids_g_ROSEUSDT = Decimal('0.0') 
qty_bids_g_ROSEUSDT = Decimal('0.0') 
price_asks_g_ROSEUSDT = Decimal('0.0') 
qty_asks_g_ROSEUSDT = Decimal('0.0') 
stepSize_g_ROSEUSDT = Decimal('0.1') 


def on_message_ROSEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ROSEUSDT = 'ROSEUSDT' 
	price_bids_c_l_ROSEUSDT = data['b'] 
	qty_bids_c_l_ROSEUSDT = data['B'] 
	price_asks_c_l_ROSEUSDT = data['a'] 
	qty_asks_c_l_ROSEUSDT = data['A'] 

	global symbol_g_ROSEUSDT 
	global price_bids_g_ROSEUSDT 
	global qty_bids_g_ROSEUSDT 
	global price_asks_g_ROSEUSDT 
	global qty_asks_g_ROSEUSDT 

	symbol_g_ROSEUSDT = symbol_c_l_ROSEUSDT 
	price_bids_g_ROSEUSDT = Decimal(price_bids_c_l_ROSEUSDT) 
	qty_bids_g_ROSEUSDT = Decimal(qty_bids_c_l_ROSEUSDT) 
	price_asks_g_ROSEUSDT = Decimal(price_asks_c_l_ROSEUSDT) 
	qty_asks_g_ROSEUSDT = Decimal(qty_asks_c_l_ROSEUSDT) 


def loop_ROSEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/roseusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ROSEUSDT) 
	ws.run_forever() 


Thread(target=loop_ROSEUSDT).start() 
symbol_g_GRTUSDT = 'GRTUSDT' 
price_bids_g_GRTUSDT = Decimal('0.0') 
qty_bids_g_GRTUSDT = Decimal('0.0') 
price_asks_g_GRTUSDT = Decimal('0.0') 
qty_asks_g_GRTUSDT = Decimal('0.0') 
stepSize_g_GRTUSDT = Decimal('1.0') 


def on_message_GRTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GRTUSDT = 'GRTUSDT' 
	price_bids_c_l_GRTUSDT = data['b'] 
	qty_bids_c_l_GRTUSDT = data['B'] 
	price_asks_c_l_GRTUSDT = data['a'] 
	qty_asks_c_l_GRTUSDT = data['A'] 

	global symbol_g_GRTUSDT 
	global price_bids_g_GRTUSDT 
	global qty_bids_g_GRTUSDT 
	global price_asks_g_GRTUSDT 
	global qty_asks_g_GRTUSDT 

	symbol_g_GRTUSDT = symbol_c_l_GRTUSDT 
	price_bids_g_GRTUSDT = Decimal(price_bids_c_l_GRTUSDT) 
	qty_bids_g_GRTUSDT = Decimal(qty_bids_c_l_GRTUSDT) 
	price_asks_g_GRTUSDT = Decimal(price_asks_c_l_GRTUSDT) 
	qty_asks_g_GRTUSDT = Decimal(qty_asks_c_l_GRTUSDT) 


def loop_GRTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/grtusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GRTUSDT) 
	ws.run_forever() 


Thread(target=loop_GRTUSDT).start() 
symbol_g_REEFUSDT = 'REEFUSDT' 
price_bids_g_REEFUSDT = Decimal('0.0') 
qty_bids_g_REEFUSDT = Decimal('0.0') 
price_asks_g_REEFUSDT = Decimal('0.0') 
qty_asks_g_REEFUSDT = Decimal('0.0') 
stepSize_g_REEFUSDT = Decimal('1.0') 


def on_message_REEFUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_REEFUSDT = 'REEFUSDT' 
	price_bids_c_l_REEFUSDT = data['b'] 
	qty_bids_c_l_REEFUSDT = data['B'] 
	price_asks_c_l_REEFUSDT = data['a'] 
	qty_asks_c_l_REEFUSDT = data['A'] 

	global symbol_g_REEFUSDT 
	global price_bids_g_REEFUSDT 
	global qty_bids_g_REEFUSDT 
	global price_asks_g_REEFUSDT 
	global qty_asks_g_REEFUSDT 

	symbol_g_REEFUSDT = symbol_c_l_REEFUSDT 
	price_bids_g_REEFUSDT = Decimal(price_bids_c_l_REEFUSDT) 
	qty_bids_g_REEFUSDT = Decimal(qty_bids_c_l_REEFUSDT) 
	price_asks_g_REEFUSDT = Decimal(price_asks_c_l_REEFUSDT) 
	qty_asks_g_REEFUSDT = Decimal(qty_asks_c_l_REEFUSDT) 


def loop_REEFUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/reefusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_REEFUSDT) 
	ws.run_forever() 


Thread(target=loop_REEFUSDT).start() 
symbol_g_TRUUSDT = 'TRUUSDT' 
price_bids_g_TRUUSDT = Decimal('0.0') 
qty_bids_g_TRUUSDT = Decimal('0.0') 
price_asks_g_TRUUSDT = Decimal('0.0') 
qty_asks_g_TRUUSDT = Decimal('0.0') 
stepSize_g_TRUUSDT = Decimal('1.0') 


def on_message_TRUUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRUUSDT = 'TRUUSDT' 
	price_bids_c_l_TRUUSDT = data['b'] 
	qty_bids_c_l_TRUUSDT = data['B'] 
	price_asks_c_l_TRUUSDT = data['a'] 
	qty_asks_c_l_TRUUSDT = data['A'] 

	global symbol_g_TRUUSDT 
	global price_bids_g_TRUUSDT 
	global qty_bids_g_TRUUSDT 
	global price_asks_g_TRUUSDT 
	global qty_asks_g_TRUUSDT 

	symbol_g_TRUUSDT = symbol_c_l_TRUUSDT 
	price_bids_g_TRUUSDT = Decimal(price_bids_c_l_TRUUSDT) 
	qty_bids_g_TRUUSDT = Decimal(qty_bids_c_l_TRUUSDT) 
	price_asks_g_TRUUSDT = Decimal(price_asks_c_l_TRUUSDT) 
	qty_asks_g_TRUUSDT = Decimal(qty_asks_c_l_TRUUSDT) 


def loop_TRUUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/truusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRUUSDT) 
	ws.run_forever() 


Thread(target=loop_TRUUSDT).start() 
symbol_g_TWTUSDT = 'TWTUSDT' 
price_bids_g_TWTUSDT = Decimal('0.0') 
qty_bids_g_TWTUSDT = Decimal('0.0') 
price_asks_g_TWTUSDT = Decimal('0.0') 
qty_asks_g_TWTUSDT = Decimal('0.0') 
stepSize_g_TWTUSDT = Decimal('1.0') 


def on_message_TWTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TWTUSDT = 'TWTUSDT' 
	price_bids_c_l_TWTUSDT = data['b'] 
	qty_bids_c_l_TWTUSDT = data['B'] 
	price_asks_c_l_TWTUSDT = data['a'] 
	qty_asks_c_l_TWTUSDT = data['A'] 

	global symbol_g_TWTUSDT 
	global price_bids_g_TWTUSDT 
	global qty_bids_g_TWTUSDT 
	global price_asks_g_TWTUSDT 
	global qty_asks_g_TWTUSDT 

	symbol_g_TWTUSDT = symbol_c_l_TWTUSDT 
	price_bids_g_TWTUSDT = Decimal(price_bids_c_l_TWTUSDT) 
	qty_bids_g_TWTUSDT = Decimal(qty_bids_c_l_TWTUSDT) 
	price_asks_g_TWTUSDT = Decimal(price_asks_c_l_TWTUSDT) 
	qty_asks_g_TWTUSDT = Decimal(qty_asks_c_l_TWTUSDT) 


def loop_TWTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/twtusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TWTUSDT) 
	ws.run_forever() 


Thread(target=loop_TWTUSDT).start() 
symbol_g_FISUSDT = 'FISUSDT' 
price_bids_g_FISUSDT = Decimal('0.0') 
qty_bids_g_FISUSDT = Decimal('0.0') 
price_asks_g_FISUSDT = Decimal('0.0') 
qty_asks_g_FISUSDT = Decimal('0.0') 
stepSize_g_FISUSDT = Decimal('1.0') 


def on_message_FISUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FISUSDT = 'FISUSDT' 
	price_bids_c_l_FISUSDT = data['b'] 
	qty_bids_c_l_FISUSDT = data['B'] 
	price_asks_c_l_FISUSDT = data['a'] 
	qty_asks_c_l_FISUSDT = data['A'] 

	global symbol_g_FISUSDT 
	global price_bids_g_FISUSDT 
	global qty_bids_g_FISUSDT 
	global price_asks_g_FISUSDT 
	global qty_asks_g_FISUSDT 

	symbol_g_FISUSDT = symbol_c_l_FISUSDT 
	price_bids_g_FISUSDT = Decimal(price_bids_c_l_FISUSDT) 
	qty_bids_g_FISUSDT = Decimal(qty_bids_c_l_FISUSDT) 
	price_asks_g_FISUSDT = Decimal(price_asks_c_l_FISUSDT) 
	qty_asks_g_FISUSDT = Decimal(qty_asks_c_l_FISUSDT) 


def loop_FISUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fisusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FISUSDT) 
	ws.run_forever() 


Thread(target=loop_FISUSDT).start() 
symbol_g_ALICEUSDT = 'ALICEUSDT' 
price_bids_g_ALICEUSDT = Decimal('0.0') 
qty_bids_g_ALICEUSDT = Decimal('0.0') 
price_asks_g_ALICEUSDT = Decimal('0.0') 
qty_asks_g_ALICEUSDT = Decimal('0.0') 
stepSize_g_ALICEUSDT = Decimal('0.01') 


def on_message_ALICEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALICEUSDT = 'ALICEUSDT' 
	price_bids_c_l_ALICEUSDT = data['b'] 
	qty_bids_c_l_ALICEUSDT = data['B'] 
	price_asks_c_l_ALICEUSDT = data['a'] 
	qty_asks_c_l_ALICEUSDT = data['A'] 

	global symbol_g_ALICEUSDT 
	global price_bids_g_ALICEUSDT 
	global qty_bids_g_ALICEUSDT 
	global price_asks_g_ALICEUSDT 
	global qty_asks_g_ALICEUSDT 

	symbol_g_ALICEUSDT = symbol_c_l_ALICEUSDT 
	price_bids_g_ALICEUSDT = Decimal(price_bids_c_l_ALICEUSDT) 
	qty_bids_g_ALICEUSDT = Decimal(qty_bids_c_l_ALICEUSDT) 
	price_asks_g_ALICEUSDT = Decimal(price_asks_c_l_ALICEUSDT) 
	qty_asks_g_ALICEUSDT = Decimal(qty_asks_c_l_ALICEUSDT) 


def loop_ALICEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/aliceusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALICEUSDT) 
	ws.run_forever() 


Thread(target=loop_ALICEUSDT).start() 
symbol_g_TKOUSDT = 'TKOUSDT' 
price_bids_g_TKOUSDT = Decimal('0.0') 
qty_bids_g_TKOUSDT = Decimal('0.0') 
price_asks_g_TKOUSDT = Decimal('0.0') 
qty_asks_g_TKOUSDT = Decimal('0.0') 
stepSize_g_TKOUSDT = Decimal('0.1') 


def on_message_TKOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TKOUSDT = 'TKOUSDT' 
	price_bids_c_l_TKOUSDT = data['b'] 
	qty_bids_c_l_TKOUSDT = data['B'] 
	price_asks_c_l_TKOUSDT = data['a'] 
	qty_asks_c_l_TKOUSDT = data['A'] 

	global symbol_g_TKOUSDT 
	global price_bids_g_TKOUSDT 
	global qty_bids_g_TKOUSDT 
	global price_asks_g_TKOUSDT 
	global qty_asks_g_TKOUSDT 

	symbol_g_TKOUSDT = symbol_c_l_TKOUSDT 
	price_bids_g_TKOUSDT = Decimal(price_bids_c_l_TKOUSDT) 
	qty_bids_g_TKOUSDT = Decimal(qty_bids_c_l_TKOUSDT) 
	price_asks_g_TKOUSDT = Decimal(price_asks_c_l_TKOUSDT) 
	qty_asks_g_TKOUSDT = Decimal(qty_asks_c_l_TKOUSDT) 


def loop_TKOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tkousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TKOUSDT) 
	ws.run_forever() 


Thread(target=loop_TKOUSDT).start() 
symbol_g_TLMUSDT = 'TLMUSDT' 
price_bids_g_TLMUSDT = Decimal('0.0') 
qty_bids_g_TLMUSDT = Decimal('0.0') 
price_asks_g_TLMUSDT = Decimal('0.0') 
qty_asks_g_TLMUSDT = Decimal('0.0') 
stepSize_g_TLMUSDT = Decimal('1.0') 


def on_message_TLMUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TLMUSDT = 'TLMUSDT' 
	price_bids_c_l_TLMUSDT = data['b'] 
	qty_bids_c_l_TLMUSDT = data['B'] 
	price_asks_c_l_TLMUSDT = data['a'] 
	qty_asks_c_l_TLMUSDT = data['A'] 

	global symbol_g_TLMUSDT 
	global price_bids_g_TLMUSDT 
	global qty_bids_g_TLMUSDT 
	global price_asks_g_TLMUSDT 
	global qty_asks_g_TLMUSDT 

	symbol_g_TLMUSDT = symbol_c_l_TLMUSDT 
	price_bids_g_TLMUSDT = Decimal(price_bids_c_l_TLMUSDT) 
	qty_bids_g_TLMUSDT = Decimal(qty_bids_c_l_TLMUSDT) 
	price_asks_g_TLMUSDT = Decimal(price_asks_c_l_TLMUSDT) 
	qty_asks_g_TLMUSDT = Decimal(qty_asks_c_l_TLMUSDT) 


def loop_TLMUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tlmusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TLMUSDT) 
	ws.run_forever() 


Thread(target=loop_TLMUSDT).start() 
symbol_g_SLPUSDT = 'SLPUSDT' 
price_bids_g_SLPUSDT = Decimal('0.0') 
qty_bids_g_SLPUSDT = Decimal('0.0') 
price_asks_g_SLPUSDT = Decimal('0.0') 
qty_asks_g_SLPUSDT = Decimal('0.0') 
stepSize_g_SLPUSDT = Decimal('1.0') 


def on_message_SLPUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SLPUSDT = 'SLPUSDT' 
	price_bids_c_l_SLPUSDT = data['b'] 
	qty_bids_c_l_SLPUSDT = data['B'] 
	price_asks_c_l_SLPUSDT = data['a'] 
	qty_asks_c_l_SLPUSDT = data['A'] 

	global symbol_g_SLPUSDT 
	global price_bids_g_SLPUSDT 
	global qty_bids_g_SLPUSDT 
	global price_asks_g_SLPUSDT 
	global qty_asks_g_SLPUSDT 

	symbol_g_SLPUSDT = symbol_c_l_SLPUSDT 
	price_bids_g_SLPUSDT = Decimal(price_bids_c_l_SLPUSDT) 
	qty_bids_g_SLPUSDT = Decimal(qty_bids_c_l_SLPUSDT) 
	price_asks_g_SLPUSDT = Decimal(price_asks_c_l_SLPUSDT) 
	qty_asks_g_SLPUSDT = Decimal(qty_asks_c_l_SLPUSDT) 


def loop_SLPUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/slpusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SLPUSDT) 
	ws.run_forever() 


Thread(target=loop_SLPUSDT).start() 
symbol_g_SHIBUSDT = 'SHIBUSDT' 
price_bids_g_SHIBUSDT = Decimal('0.0') 
qty_bids_g_SHIBUSDT = Decimal('0.0') 
price_asks_g_SHIBUSDT = Decimal('0.0') 
qty_asks_g_SHIBUSDT = Decimal('0.0') 
stepSize_g_SHIBUSDT = Decimal('1.0') 


def on_message_SHIBUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SHIBUSDT = 'SHIBUSDT' 
	price_bids_c_l_SHIBUSDT = data['b'] 
	qty_bids_c_l_SHIBUSDT = data['B'] 
	price_asks_c_l_SHIBUSDT = data['a'] 
	qty_asks_c_l_SHIBUSDT = data['A'] 

	global symbol_g_SHIBUSDT 
	global price_bids_g_SHIBUSDT 
	global qty_bids_g_SHIBUSDT 
	global price_asks_g_SHIBUSDT 
	global qty_asks_g_SHIBUSDT 

	symbol_g_SHIBUSDT = symbol_c_l_SHIBUSDT 
	price_bids_g_SHIBUSDT = Decimal(price_bids_c_l_SHIBUSDT) 
	qty_bids_g_SHIBUSDT = Decimal(qty_bids_c_l_SHIBUSDT) 
	price_asks_g_SHIBUSDT = Decimal(price_asks_c_l_SHIBUSDT) 
	qty_asks_g_SHIBUSDT = Decimal(qty_asks_c_l_SHIBUSDT) 


def loop_SHIBUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/shibusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SHIBUSDT) 
	ws.run_forever() 


Thread(target=loop_SHIBUSDT).start() 
symbol_g_ICPUSDT = 'ICPUSDT' 
price_bids_g_ICPUSDT = Decimal('0.0') 
qty_bids_g_ICPUSDT = Decimal('0.0') 
price_asks_g_ICPUSDT = Decimal('0.0') 
qty_asks_g_ICPUSDT = Decimal('0.0') 
stepSize_g_ICPUSDT = Decimal('0.01') 


def on_message_ICPUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ICPUSDT = 'ICPUSDT' 
	price_bids_c_l_ICPUSDT = data['b'] 
	qty_bids_c_l_ICPUSDT = data['B'] 
	price_asks_c_l_ICPUSDT = data['a'] 
	qty_asks_c_l_ICPUSDT = data['A'] 

	global symbol_g_ICPUSDT 
	global price_bids_g_ICPUSDT 
	global qty_bids_g_ICPUSDT 
	global price_asks_g_ICPUSDT 
	global qty_asks_g_ICPUSDT 

	symbol_g_ICPUSDT = symbol_c_l_ICPUSDT 
	price_bids_g_ICPUSDT = Decimal(price_bids_c_l_ICPUSDT) 
	qty_bids_g_ICPUSDT = Decimal(qty_bids_c_l_ICPUSDT) 
	price_asks_g_ICPUSDT = Decimal(price_asks_c_l_ICPUSDT) 
	qty_asks_g_ICPUSDT = Decimal(qty_asks_c_l_ICPUSDT) 


def loop_ICPUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/icpusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ICPUSDT) 
	ws.run_forever() 


Thread(target=loop_ICPUSDT).start() 
symbol_g_C98USDT = 'C98USDT' 
price_bids_g_C98USDT = Decimal('0.0') 
qty_bids_g_C98USDT = Decimal('0.0') 
price_asks_g_C98USDT = Decimal('0.0') 
qty_asks_g_C98USDT = Decimal('0.0') 
stepSize_g_C98USDT = Decimal('0.1') 


def on_message_C98USDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_C98USDT = 'C98USDT' 
	price_bids_c_l_C98USDT = data['b'] 
	qty_bids_c_l_C98USDT = data['B'] 
	price_asks_c_l_C98USDT = data['a'] 
	qty_asks_c_l_C98USDT = data['A'] 

	global symbol_g_C98USDT 
	global price_bids_g_C98USDT 
	global qty_bids_g_C98USDT 
	global price_asks_g_C98USDT 
	global qty_asks_g_C98USDT 

	symbol_g_C98USDT = symbol_c_l_C98USDT 
	price_bids_g_C98USDT = Decimal(price_bids_c_l_C98USDT) 
	qty_bids_g_C98USDT = Decimal(qty_bids_c_l_C98USDT) 
	price_asks_g_C98USDT = Decimal(price_asks_c_l_C98USDT) 
	qty_asks_g_C98USDT = Decimal(qty_asks_c_l_C98USDT) 


def loop_C98USDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/c98usdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_C98USDT) 
	ws.run_forever() 


Thread(target=loop_C98USDT).start() 
symbol_g_MINAUSDT = 'MINAUSDT' 
price_bids_g_MINAUSDT = Decimal('0.0') 
qty_bids_g_MINAUSDT = Decimal('0.0') 
price_asks_g_MINAUSDT = Decimal('0.0') 
qty_asks_g_MINAUSDT = Decimal('0.0') 
stepSize_g_MINAUSDT = Decimal('0.1') 


def on_message_MINAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MINAUSDT = 'MINAUSDT' 
	price_bids_c_l_MINAUSDT = data['b'] 
	qty_bids_c_l_MINAUSDT = data['B'] 
	price_asks_c_l_MINAUSDT = data['a'] 
	qty_asks_c_l_MINAUSDT = data['A'] 

	global symbol_g_MINAUSDT 
	global price_bids_g_MINAUSDT 
	global qty_bids_g_MINAUSDT 
	global price_asks_g_MINAUSDT 
	global qty_asks_g_MINAUSDT 

	symbol_g_MINAUSDT = symbol_c_l_MINAUSDT 
	price_bids_g_MINAUSDT = Decimal(price_bids_c_l_MINAUSDT) 
	qty_bids_g_MINAUSDT = Decimal(qty_bids_c_l_MINAUSDT) 
	price_asks_g_MINAUSDT = Decimal(price_asks_c_l_MINAUSDT) 
	qty_asks_g_MINAUSDT = Decimal(qty_asks_c_l_MINAUSDT) 


def loop_MINAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/minausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MINAUSDT) 
	ws.run_forever() 


Thread(target=loop_MINAUSDT).start() 
symbol_g_MBOXUSDT = 'MBOXUSDT' 
price_bids_g_MBOXUSDT = Decimal('0.0') 
qty_bids_g_MBOXUSDT = Decimal('0.0') 
price_asks_g_MBOXUSDT = Decimal('0.0') 
qty_asks_g_MBOXUSDT = Decimal('0.0') 
stepSize_g_MBOXUSDT = Decimal('0.1') 


def on_message_MBOXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MBOXUSDT = 'MBOXUSDT' 
	price_bids_c_l_MBOXUSDT = data['b'] 
	qty_bids_c_l_MBOXUSDT = data['B'] 
	price_asks_c_l_MBOXUSDT = data['a'] 
	qty_asks_c_l_MBOXUSDT = data['A'] 

	global symbol_g_MBOXUSDT 
	global price_bids_g_MBOXUSDT 
	global qty_bids_g_MBOXUSDT 
	global price_asks_g_MBOXUSDT 
	global qty_asks_g_MBOXUSDT 

	symbol_g_MBOXUSDT = symbol_c_l_MBOXUSDT 
	price_bids_g_MBOXUSDT = Decimal(price_bids_c_l_MBOXUSDT) 
	qty_bids_g_MBOXUSDT = Decimal(qty_bids_c_l_MBOXUSDT) 
	price_asks_g_MBOXUSDT = Decimal(price_asks_c_l_MBOXUSDT) 
	qty_asks_g_MBOXUSDT = Decimal(qty_asks_c_l_MBOXUSDT) 


def loop_MBOXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mboxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MBOXUSDT) 
	ws.run_forever() 


Thread(target=loop_MBOXUSDT).start() 
symbol_g_GALAUSDT = 'GALAUSDT' 
price_bids_g_GALAUSDT = Decimal('0.0') 
qty_bids_g_GALAUSDT = Decimal('0.0') 
price_asks_g_GALAUSDT = Decimal('0.0') 
qty_asks_g_GALAUSDT = Decimal('0.0') 
stepSize_g_GALAUSDT = Decimal('1.0') 


def on_message_GALAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALAUSDT = 'GALAUSDT' 
	price_bids_c_l_GALAUSDT = data['b'] 
	qty_bids_c_l_GALAUSDT = data['B'] 
	price_asks_c_l_GALAUSDT = data['a'] 
	qty_asks_c_l_GALAUSDT = data['A'] 

	global symbol_g_GALAUSDT 
	global price_bids_g_GALAUSDT 
	global qty_bids_g_GALAUSDT 
	global price_asks_g_GALAUSDT 
	global qty_asks_g_GALAUSDT 

	symbol_g_GALAUSDT = symbol_c_l_GALAUSDT 
	price_bids_g_GALAUSDT = Decimal(price_bids_c_l_GALAUSDT) 
	qty_bids_g_GALAUSDT = Decimal(qty_bids_c_l_GALAUSDT) 
	price_asks_g_GALAUSDT = Decimal(price_asks_c_l_GALAUSDT) 
	qty_asks_g_GALAUSDT = Decimal(qty_asks_c_l_GALAUSDT) 


def loop_GALAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALAUSDT) 
	ws.run_forever() 


Thread(target=loop_GALAUSDT).start() 
symbol_g_LAZIOUSDT = 'LAZIOUSDT' 
price_bids_g_LAZIOUSDT = Decimal('0.0') 
qty_bids_g_LAZIOUSDT = Decimal('0.0') 
price_asks_g_LAZIOUSDT = Decimal('0.0') 
qty_asks_g_LAZIOUSDT = Decimal('0.0') 
stepSize_g_LAZIOUSDT = Decimal('0.01') 


def on_message_LAZIOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LAZIOUSDT = 'LAZIOUSDT' 
	price_bids_c_l_LAZIOUSDT = data['b'] 
	qty_bids_c_l_LAZIOUSDT = data['B'] 
	price_asks_c_l_LAZIOUSDT = data['a'] 
	qty_asks_c_l_LAZIOUSDT = data['A'] 

	global symbol_g_LAZIOUSDT 
	global price_bids_g_LAZIOUSDT 
	global qty_bids_g_LAZIOUSDT 
	global price_asks_g_LAZIOUSDT 
	global qty_asks_g_LAZIOUSDT 

	symbol_g_LAZIOUSDT = symbol_c_l_LAZIOUSDT 
	price_bids_g_LAZIOUSDT = Decimal(price_bids_c_l_LAZIOUSDT) 
	qty_bids_g_LAZIOUSDT = Decimal(qty_bids_c_l_LAZIOUSDT) 
	price_asks_g_LAZIOUSDT = Decimal(price_asks_c_l_LAZIOUSDT) 
	qty_asks_g_LAZIOUSDT = Decimal(qty_asks_c_l_LAZIOUSDT) 


def loop_LAZIOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/laziousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LAZIOUSDT) 
	ws.run_forever() 


Thread(target=loop_LAZIOUSDT).start() 
symbol_g_DARUSDT = 'DARUSDT' 
price_bids_g_DARUSDT = Decimal('0.0') 
qty_bids_g_DARUSDT = Decimal('0.0') 
price_asks_g_DARUSDT = Decimal('0.0') 
qty_asks_g_DARUSDT = Decimal('0.0') 
stepSize_g_DARUSDT = Decimal('1.0') 


def on_message_DARUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DARUSDT = 'DARUSDT' 
	price_bids_c_l_DARUSDT = data['b'] 
	qty_bids_c_l_DARUSDT = data['B'] 
	price_asks_c_l_DARUSDT = data['a'] 
	qty_asks_c_l_DARUSDT = data['A'] 

	global symbol_g_DARUSDT 
	global price_bids_g_DARUSDT 
	global qty_bids_g_DARUSDT 
	global price_asks_g_DARUSDT 
	global qty_asks_g_DARUSDT 

	symbol_g_DARUSDT = symbol_c_l_DARUSDT 
	price_bids_g_DARUSDT = Decimal(price_bids_c_l_DARUSDT) 
	qty_bids_g_DARUSDT = Decimal(qty_bids_c_l_DARUSDT) 
	price_asks_g_DARUSDT = Decimal(price_asks_c_l_DARUSDT) 
	qty_asks_g_DARUSDT = Decimal(qty_asks_c_l_DARUSDT) 


def loop_DARUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/darusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DARUSDT) 
	ws.run_forever() 


Thread(target=loop_DARUSDT).start() 
symbol_g_ENSUSDT = 'ENSUSDT' 
price_bids_g_ENSUSDT = Decimal('0.0') 
qty_bids_g_ENSUSDT = Decimal('0.0') 
price_asks_g_ENSUSDT = Decimal('0.0') 
qty_asks_g_ENSUSDT = Decimal('0.0') 
stepSize_g_ENSUSDT = Decimal('0.01') 


def on_message_ENSUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENSUSDT = 'ENSUSDT' 
	price_bids_c_l_ENSUSDT = data['b'] 
	qty_bids_c_l_ENSUSDT = data['B'] 
	price_asks_c_l_ENSUSDT = data['a'] 
	qty_asks_c_l_ENSUSDT = data['A'] 

	global symbol_g_ENSUSDT 
	global price_bids_g_ENSUSDT 
	global qty_bids_g_ENSUSDT 
	global price_asks_g_ENSUSDT 
	global qty_asks_g_ENSUSDT 

	symbol_g_ENSUSDT = symbol_c_l_ENSUSDT 
	price_bids_g_ENSUSDT = Decimal(price_bids_c_l_ENSUSDT) 
	qty_bids_g_ENSUSDT = Decimal(qty_bids_c_l_ENSUSDT) 
	price_asks_g_ENSUSDT = Decimal(price_asks_c_l_ENSUSDT) 
	qty_asks_g_ENSUSDT = Decimal(qty_asks_c_l_ENSUSDT) 


def loop_ENSUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ensusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENSUSDT) 
	ws.run_forever() 


Thread(target=loop_ENSUSDT).start() 
symbol_g_PORTOUSDT = 'PORTOUSDT' 
price_bids_g_PORTOUSDT = Decimal('0.0') 
qty_bids_g_PORTOUSDT = Decimal('0.0') 
price_asks_g_PORTOUSDT = Decimal('0.0') 
qty_asks_g_PORTOUSDT = Decimal('0.0') 
stepSize_g_PORTOUSDT = Decimal('0.01') 


def on_message_PORTOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PORTOUSDT = 'PORTOUSDT' 
	price_bids_c_l_PORTOUSDT = data['b'] 
	qty_bids_c_l_PORTOUSDT = data['B'] 
	price_asks_c_l_PORTOUSDT = data['a'] 
	qty_asks_c_l_PORTOUSDT = data['A'] 

	global symbol_g_PORTOUSDT 
	global price_bids_g_PORTOUSDT 
	global qty_bids_g_PORTOUSDT 
	global price_asks_g_PORTOUSDT 
	global qty_asks_g_PORTOUSDT 

	symbol_g_PORTOUSDT = symbol_c_l_PORTOUSDT 
	price_bids_g_PORTOUSDT = Decimal(price_bids_c_l_PORTOUSDT) 
	qty_bids_g_PORTOUSDT = Decimal(qty_bids_c_l_PORTOUSDT) 
	price_asks_g_PORTOUSDT = Decimal(price_asks_c_l_PORTOUSDT) 
	qty_asks_g_PORTOUSDT = Decimal(qty_asks_c_l_PORTOUSDT) 


def loop_PORTOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/portousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PORTOUSDT) 
	ws.run_forever() 


Thread(target=loop_PORTOUSDT).start() 
symbol_g_JASMYUSDT = 'JASMYUSDT' 
price_bids_g_JASMYUSDT = Decimal('0.0') 
qty_bids_g_JASMYUSDT = Decimal('0.0') 
price_asks_g_JASMYUSDT = Decimal('0.0') 
qty_asks_g_JASMYUSDT = Decimal('0.0') 
stepSize_g_JASMYUSDT = Decimal('0.1') 


def on_message_JASMYUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JASMYUSDT = 'JASMYUSDT' 
	price_bids_c_l_JASMYUSDT = data['b'] 
	qty_bids_c_l_JASMYUSDT = data['B'] 
	price_asks_c_l_JASMYUSDT = data['a'] 
	qty_asks_c_l_JASMYUSDT = data['A'] 

	global symbol_g_JASMYUSDT 
	global price_bids_g_JASMYUSDT 
	global qty_bids_g_JASMYUSDT 
	global price_asks_g_JASMYUSDT 
	global qty_asks_g_JASMYUSDT 

	symbol_g_JASMYUSDT = symbol_c_l_JASMYUSDT 
	price_bids_g_JASMYUSDT = Decimal(price_bids_c_l_JASMYUSDT) 
	qty_bids_g_JASMYUSDT = Decimal(qty_bids_c_l_JASMYUSDT) 
	price_asks_g_JASMYUSDT = Decimal(price_asks_c_l_JASMYUSDT) 
	qty_asks_g_JASMYUSDT = Decimal(qty_asks_c_l_JASMYUSDT) 


def loop_JASMYUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/jasmyusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JASMYUSDT) 
	ws.run_forever() 


Thread(target=loop_JASMYUSDT).start() 
symbol_g_SANTOSUSDT = 'SANTOSUSDT' 
price_bids_g_SANTOSUSDT = Decimal('0.0') 
qty_bids_g_SANTOSUSDT = Decimal('0.0') 
price_asks_g_SANTOSUSDT = Decimal('0.0') 
qty_asks_g_SANTOSUSDT = Decimal('0.0') 
stepSize_g_SANTOSUSDT = Decimal('0.01') 


def on_message_SANTOSUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SANTOSUSDT = 'SANTOSUSDT' 
	price_bids_c_l_SANTOSUSDT = data['b'] 
	qty_bids_c_l_SANTOSUSDT = data['B'] 
	price_asks_c_l_SANTOSUSDT = data['a'] 
	qty_asks_c_l_SANTOSUSDT = data['A'] 

	global symbol_g_SANTOSUSDT 
	global price_bids_g_SANTOSUSDT 
	global qty_bids_g_SANTOSUSDT 
	global price_asks_g_SANTOSUSDT 
	global qty_asks_g_SANTOSUSDT 

	symbol_g_SANTOSUSDT = symbol_c_l_SANTOSUSDT 
	price_bids_g_SANTOSUSDT = Decimal(price_bids_c_l_SANTOSUSDT) 
	qty_bids_g_SANTOSUSDT = Decimal(qty_bids_c_l_SANTOSUSDT) 
	price_asks_g_SANTOSUSDT = Decimal(price_asks_c_l_SANTOSUSDT) 
	qty_asks_g_SANTOSUSDT = Decimal(qty_asks_c_l_SANTOSUSDT) 


def loop_SANTOSUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/santosusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SANTOSUSDT) 
	ws.run_forever() 


Thread(target=loop_SANTOSUSDT).start() 
symbol_g_SPELLUSDT = 'SPELLUSDT' 
price_bids_g_SPELLUSDT = Decimal('0.0') 
qty_bids_g_SPELLUSDT = Decimal('0.0') 
price_asks_g_SPELLUSDT = Decimal('0.0') 
qty_asks_g_SPELLUSDT = Decimal('0.0') 
stepSize_g_SPELLUSDT = Decimal('1.0') 


def on_message_SPELLUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SPELLUSDT = 'SPELLUSDT' 
	price_bids_c_l_SPELLUSDT = data['b'] 
	qty_bids_c_l_SPELLUSDT = data['B'] 
	price_asks_c_l_SPELLUSDT = data['a'] 
	qty_asks_c_l_SPELLUSDT = data['A'] 

	global symbol_g_SPELLUSDT 
	global price_bids_g_SPELLUSDT 
	global qty_bids_g_SPELLUSDT 
	global price_asks_g_SPELLUSDT 
	global qty_asks_g_SPELLUSDT 

	symbol_g_SPELLUSDT = symbol_c_l_SPELLUSDT 
	price_bids_g_SPELLUSDT = Decimal(price_bids_c_l_SPELLUSDT) 
	qty_bids_g_SPELLUSDT = Decimal(qty_bids_c_l_SPELLUSDT) 
	price_asks_g_SPELLUSDT = Decimal(price_asks_c_l_SPELLUSDT) 
	qty_asks_g_SPELLUSDT = Decimal(qty_asks_c_l_SPELLUSDT) 


def loop_SPELLUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/spellusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SPELLUSDT) 
	ws.run_forever() 


Thread(target=loop_SPELLUSDT).start() 
symbol_g_API3USDT = 'API3USDT' 
price_bids_g_API3USDT = Decimal('0.0') 
qty_bids_g_API3USDT = Decimal('0.0') 
price_asks_g_API3USDT = Decimal('0.0') 
qty_asks_g_API3USDT = Decimal('0.0') 
stepSize_g_API3USDT = Decimal('0.01') 


def on_message_API3USDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_API3USDT = 'API3USDT' 
	price_bids_c_l_API3USDT = data['b'] 
	qty_bids_c_l_API3USDT = data['B'] 
	price_asks_c_l_API3USDT = data['a'] 
	qty_asks_c_l_API3USDT = data['A'] 

	global symbol_g_API3USDT 
	global price_bids_g_API3USDT 
	global qty_bids_g_API3USDT 
	global price_asks_g_API3USDT 
	global qty_asks_g_API3USDT 

	symbol_g_API3USDT = symbol_c_l_API3USDT 
	price_bids_g_API3USDT = Decimal(price_bids_c_l_API3USDT) 
	qty_bids_g_API3USDT = Decimal(qty_bids_c_l_API3USDT) 
	price_asks_g_API3USDT = Decimal(price_asks_c_l_API3USDT) 
	qty_asks_g_API3USDT = Decimal(qty_asks_c_l_API3USDT) 


def loop_API3USDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/api3usdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_API3USDT) 
	ws.run_forever() 


Thread(target=loop_API3USDT).start() 
symbol_g_BTTCUSDT = 'BTTCUSDT' 
price_bids_g_BTTCUSDT = Decimal('0.0') 
qty_bids_g_BTTCUSDT = Decimal('0.0') 
price_asks_g_BTTCUSDT = Decimal('0.0') 
qty_asks_g_BTTCUSDT = Decimal('0.0') 
stepSize_g_BTTCUSDT = Decimal('1.0') 


def on_message_BTTCUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTTCUSDT = 'BTTCUSDT' 
	price_bids_c_l_BTTCUSDT = data['b'] 
	qty_bids_c_l_BTTCUSDT = data['B'] 
	price_asks_c_l_BTTCUSDT = data['a'] 
	qty_asks_c_l_BTTCUSDT = data['A'] 

	global symbol_g_BTTCUSDT 
	global price_bids_g_BTTCUSDT 
	global qty_bids_g_BTTCUSDT 
	global price_asks_g_BTTCUSDT 
	global qty_asks_g_BTTCUSDT 

	symbol_g_BTTCUSDT = symbol_c_l_BTTCUSDT 
	price_bids_g_BTTCUSDT = Decimal(price_bids_c_l_BTTCUSDT) 
	qty_bids_g_BTTCUSDT = Decimal(qty_bids_c_l_BTTCUSDT) 
	price_asks_g_BTTCUSDT = Decimal(price_asks_c_l_BTTCUSDT) 
	qty_asks_g_BTTCUSDT = Decimal(qty_asks_c_l_BTTCUSDT) 


def loop_BTTCUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bttcusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTTCUSDT) 
	ws.run_forever() 


Thread(target=loop_BTTCUSDT).start() 
symbol_g_ALPINEUSDT = 'ALPINEUSDT' 
price_bids_g_ALPINEUSDT = Decimal('0.0') 
qty_bids_g_ALPINEUSDT = Decimal('0.0') 
price_asks_g_ALPINEUSDT = Decimal('0.0') 
qty_asks_g_ALPINEUSDT = Decimal('0.0') 
stepSize_g_ALPINEUSDT = Decimal('0.01') 


def on_message_ALPINEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALPINEUSDT = 'ALPINEUSDT' 
	price_bids_c_l_ALPINEUSDT = data['b'] 
	qty_bids_c_l_ALPINEUSDT = data['B'] 
	price_asks_c_l_ALPINEUSDT = data['a'] 
	qty_asks_c_l_ALPINEUSDT = data['A'] 

	global symbol_g_ALPINEUSDT 
	global price_bids_g_ALPINEUSDT 
	global qty_bids_g_ALPINEUSDT 
	global price_asks_g_ALPINEUSDT 
	global qty_asks_g_ALPINEUSDT 

	symbol_g_ALPINEUSDT = symbol_c_l_ALPINEUSDT 
	price_bids_g_ALPINEUSDT = Decimal(price_bids_c_l_ALPINEUSDT) 
	qty_bids_g_ALPINEUSDT = Decimal(qty_bids_c_l_ALPINEUSDT) 
	price_asks_g_ALPINEUSDT = Decimal(price_asks_c_l_ALPINEUSDT) 
	qty_asks_g_ALPINEUSDT = Decimal(qty_asks_c_l_ALPINEUSDT) 


def loop_ALPINEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alpineusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALPINEUSDT) 
	ws.run_forever() 


Thread(target=loop_ALPINEUSDT).start() 
symbol_g_GMTUSDT = 'GMTUSDT' 
price_bids_g_GMTUSDT = Decimal('0.0') 
qty_bids_g_GMTUSDT = Decimal('0.0') 
price_asks_g_GMTUSDT = Decimal('0.0') 
qty_asks_g_GMTUSDT = Decimal('0.0') 
stepSize_g_GMTUSDT = Decimal('0.1') 


def on_message_GMTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GMTUSDT = 'GMTUSDT' 
	price_bids_c_l_GMTUSDT = data['b'] 
	qty_bids_c_l_GMTUSDT = data['B'] 
	price_asks_c_l_GMTUSDT = data['a'] 
	qty_asks_c_l_GMTUSDT = data['A'] 

	global symbol_g_GMTUSDT 
	global price_bids_g_GMTUSDT 
	global qty_bids_g_GMTUSDT 
	global price_asks_g_GMTUSDT 
	global qty_asks_g_GMTUSDT 

	symbol_g_GMTUSDT = symbol_c_l_GMTUSDT 
	price_bids_g_GMTUSDT = Decimal(price_bids_c_l_GMTUSDT) 
	qty_bids_g_GMTUSDT = Decimal(qty_bids_c_l_GMTUSDT) 
	price_asks_g_GMTUSDT = Decimal(price_asks_c_l_GMTUSDT) 
	qty_asks_g_GMTUSDT = Decimal(qty_asks_c_l_GMTUSDT) 


def loop_GMTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gmtusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GMTUSDT) 
	ws.run_forever() 


Thread(target=loop_GMTUSDT).start() 
symbol_g_APEUSDT = 'APEUSDT' 
price_bids_g_APEUSDT = Decimal('0.0') 
qty_bids_g_APEUSDT = Decimal('0.0') 
price_asks_g_APEUSDT = Decimal('0.0') 
qty_asks_g_APEUSDT = Decimal('0.0') 
stepSize_g_APEUSDT = Decimal('0.01') 


def on_message_APEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APEUSDT = 'APEUSDT' 
	price_bids_c_l_APEUSDT = data['b'] 
	qty_bids_c_l_APEUSDT = data['B'] 
	price_asks_c_l_APEUSDT = data['a'] 
	qty_asks_c_l_APEUSDT = data['A'] 

	global symbol_g_APEUSDT 
	global price_bids_g_APEUSDT 
	global qty_bids_g_APEUSDT 
	global price_asks_g_APEUSDT 
	global qty_asks_g_APEUSDT 

	symbol_g_APEUSDT = symbol_c_l_APEUSDT 
	price_bids_g_APEUSDT = Decimal(price_bids_c_l_APEUSDT) 
	qty_bids_g_APEUSDT = Decimal(qty_bids_c_l_APEUSDT) 
	price_asks_g_APEUSDT = Decimal(price_asks_c_l_APEUSDT) 
	qty_asks_g_APEUSDT = Decimal(qty_asks_c_l_APEUSDT) 


def loop_APEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/apeusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APEUSDT) 
	ws.run_forever() 


Thread(target=loop_APEUSDT).start() 
symbol_g_BSWUSDT = 'BSWUSDT' 
price_bids_g_BSWUSDT = Decimal('0.0') 
qty_bids_g_BSWUSDT = Decimal('0.0') 
price_asks_g_BSWUSDT = Decimal('0.0') 
qty_asks_g_BSWUSDT = Decimal('0.0') 
stepSize_g_BSWUSDT = Decimal('0.1') 


def on_message_BSWUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BSWUSDT = 'BSWUSDT' 
	price_bids_c_l_BSWUSDT = data['b'] 
	qty_bids_c_l_BSWUSDT = data['B'] 
	price_asks_c_l_BSWUSDT = data['a'] 
	qty_asks_c_l_BSWUSDT = data['A'] 

	global symbol_g_BSWUSDT 
	global price_bids_g_BSWUSDT 
	global qty_bids_g_BSWUSDT 
	global price_asks_g_BSWUSDT 
	global qty_asks_g_BSWUSDT 

	symbol_g_BSWUSDT = symbol_c_l_BSWUSDT 
	price_bids_g_BSWUSDT = Decimal(price_bids_c_l_BSWUSDT) 
	qty_bids_g_BSWUSDT = Decimal(qty_bids_c_l_BSWUSDT) 
	price_asks_g_BSWUSDT = Decimal(price_asks_c_l_BSWUSDT) 
	qty_asks_g_BSWUSDT = Decimal(qty_asks_c_l_BSWUSDT) 


def loop_BSWUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bswusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BSWUSDT) 
	ws.run_forever() 


Thread(target=loop_BSWUSDT).start() 
symbol_g_GALUSDT = 'GALUSDT' 
price_bids_g_GALUSDT = Decimal('0.0') 
qty_bids_g_GALUSDT = Decimal('0.0') 
price_asks_g_GALUSDT = Decimal('0.0') 
qty_asks_g_GALUSDT = Decimal('0.0') 
stepSize_g_GALUSDT = Decimal('0.001') 


def on_message_GALUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALUSDT = 'GALUSDT' 
	price_bids_c_l_GALUSDT = data['b'] 
	qty_bids_c_l_GALUSDT = data['B'] 
	price_asks_c_l_GALUSDT = data['a'] 
	qty_asks_c_l_GALUSDT = data['A'] 

	global symbol_g_GALUSDT 
	global price_bids_g_GALUSDT 
	global qty_bids_g_GALUSDT 
	global price_asks_g_GALUSDT 
	global qty_asks_g_GALUSDT 

	symbol_g_GALUSDT = symbol_c_l_GALUSDT 
	price_bids_g_GALUSDT = Decimal(price_bids_c_l_GALUSDT) 
	qty_bids_g_GALUSDT = Decimal(qty_bids_c_l_GALUSDT) 
	price_asks_g_GALUSDT = Decimal(price_asks_c_l_GALUSDT) 
	qty_asks_g_GALUSDT = Decimal(qty_asks_c_l_GALUSDT) 


def loop_GALUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALUSDT) 
	ws.run_forever() 


Thread(target=loop_GALUSDT).start() 
symbol_g_APTUSDT = 'APTUSDT' 
price_bids_g_APTUSDT = Decimal('0.0') 
qty_bids_g_APTUSDT = Decimal('0.0') 
price_asks_g_APTUSDT = Decimal('0.0') 
qty_asks_g_APTUSDT = Decimal('0.0') 
stepSize_g_APTUSDT = Decimal('0.01') 


def on_message_APTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APTUSDT = 'APTUSDT' 
	price_bids_c_l_APTUSDT = data['b'] 
	qty_bids_c_l_APTUSDT = data['B'] 
	price_asks_c_l_APTUSDT = data['a'] 
	qty_asks_c_l_APTUSDT = data['A'] 

	global symbol_g_APTUSDT 
	global price_bids_g_APTUSDT 
	global qty_bids_g_APTUSDT 
	global price_asks_g_APTUSDT 
	global qty_asks_g_APTUSDT 

	symbol_g_APTUSDT = symbol_c_l_APTUSDT 
	price_bids_g_APTUSDT = Decimal(price_bids_c_l_APTUSDT) 
	qty_bids_g_APTUSDT = Decimal(qty_bids_c_l_APTUSDT) 
	price_asks_g_APTUSDT = Decimal(price_asks_c_l_APTUSDT) 
	qty_asks_g_APTUSDT = Decimal(qty_asks_c_l_APTUSDT) 


def loop_APTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/aptusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APTUSDT) 
	ws.run_forever() 


Thread(target=loop_APTUSDT).start() 
symbol_g_QTUMUSDT = 'QTUMUSDT' 
price_bids_g_QTUMUSDT = Decimal('0.0') 
qty_bids_g_QTUMUSDT = Decimal('0.0') 
price_asks_g_QTUMUSDT = Decimal('0.0') 
qty_asks_g_QTUMUSDT = Decimal('0.0') 
stepSize_g_QTUMUSDT = Decimal('0.1') 


def on_message_QTUMUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QTUMUSDT = 'QTUMUSDT' 
	price_bids_c_l_QTUMUSDT = data['b'] 
	qty_bids_c_l_QTUMUSDT = data['B'] 
	price_asks_c_l_QTUMUSDT = data['a'] 
	qty_asks_c_l_QTUMUSDT = data['A'] 

	global symbol_g_QTUMUSDT 
	global price_bids_g_QTUMUSDT 
	global qty_bids_g_QTUMUSDT 
	global price_asks_g_QTUMUSDT 
	global qty_asks_g_QTUMUSDT 

	symbol_g_QTUMUSDT = symbol_c_l_QTUMUSDT 
	price_bids_g_QTUMUSDT = Decimal(price_bids_c_l_QTUMUSDT) 
	qty_bids_g_QTUMUSDT = Decimal(qty_bids_c_l_QTUMUSDT) 
	price_asks_g_QTUMUSDT = Decimal(price_asks_c_l_QTUMUSDT) 
	qty_asks_g_QTUMUSDT = Decimal(qty_asks_c_l_QTUMUSDT) 


def loop_QTUMUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/qtumusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QTUMUSDT) 
	ws.run_forever() 


Thread(target=loop_QTUMUSDT).start() 
symbol_g_IOTAUSDT = 'IOTAUSDT' 
price_bids_g_IOTAUSDT = Decimal('0.0') 
qty_bids_g_IOTAUSDT = Decimal('0.0') 
price_asks_g_IOTAUSDT = Decimal('0.0') 
qty_asks_g_IOTAUSDT = Decimal('0.0') 
stepSize_g_IOTAUSDT = Decimal('1.0') 


def on_message_IOTAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IOTAUSDT = 'IOTAUSDT' 
	price_bids_c_l_IOTAUSDT = data['b'] 
	qty_bids_c_l_IOTAUSDT = data['B'] 
	price_asks_c_l_IOTAUSDT = data['a'] 
	qty_asks_c_l_IOTAUSDT = data['A'] 

	global symbol_g_IOTAUSDT 
	global price_bids_g_IOTAUSDT 
	global qty_bids_g_IOTAUSDT 
	global price_asks_g_IOTAUSDT 
	global qty_asks_g_IOTAUSDT 

	symbol_g_IOTAUSDT = symbol_c_l_IOTAUSDT 
	price_bids_g_IOTAUSDT = Decimal(price_bids_c_l_IOTAUSDT) 
	qty_bids_g_IOTAUSDT = Decimal(qty_bids_c_l_IOTAUSDT) 
	price_asks_g_IOTAUSDT = Decimal(price_asks_c_l_IOTAUSDT) 
	qty_asks_g_IOTAUSDT = Decimal(qty_asks_c_l_IOTAUSDT) 


def loop_IOTAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/iotausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IOTAUSDT) 
	ws.run_forever() 


Thread(target=loop_IOTAUSDT).start() 
symbol_g_ICXUSDT = 'ICXUSDT' 
price_bids_g_ICXUSDT = Decimal('0.0') 
qty_bids_g_ICXUSDT = Decimal('0.0') 
price_asks_g_ICXUSDT = Decimal('0.0') 
qty_asks_g_ICXUSDT = Decimal('0.0') 
stepSize_g_ICXUSDT = Decimal('0.1') 


def on_message_ICXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ICXUSDT = 'ICXUSDT' 
	price_bids_c_l_ICXUSDT = data['b'] 
	qty_bids_c_l_ICXUSDT = data['B'] 
	price_asks_c_l_ICXUSDT = data['a'] 
	qty_asks_c_l_ICXUSDT = data['A'] 

	global symbol_g_ICXUSDT 
	global price_bids_g_ICXUSDT 
	global qty_bids_g_ICXUSDT 
	global price_asks_g_ICXUSDT 
	global qty_asks_g_ICXUSDT 

	symbol_g_ICXUSDT = symbol_c_l_ICXUSDT 
	price_bids_g_ICXUSDT = Decimal(price_bids_c_l_ICXUSDT) 
	qty_bids_g_ICXUSDT = Decimal(qty_bids_c_l_ICXUSDT) 
	price_asks_g_ICXUSDT = Decimal(price_asks_c_l_ICXUSDT) 
	qty_asks_g_ICXUSDT = Decimal(qty_asks_c_l_ICXUSDT) 


def loop_ICXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/icxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ICXUSDT) 
	ws.run_forever() 


Thread(target=loop_ICXUSDT).start() 
symbol_g_NULSUSDT = 'NULSUSDT' 
price_bids_g_NULSUSDT = Decimal('0.0') 
qty_bids_g_NULSUSDT = Decimal('0.0') 
price_asks_g_NULSUSDT = Decimal('0.0') 
qty_asks_g_NULSUSDT = Decimal('0.0') 
stepSize_g_NULSUSDT = Decimal('1.0') 


def on_message_NULSUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NULSUSDT = 'NULSUSDT' 
	price_bids_c_l_NULSUSDT = data['b'] 
	qty_bids_c_l_NULSUSDT = data['B'] 
	price_asks_c_l_NULSUSDT = data['a'] 
	qty_asks_c_l_NULSUSDT = data['A'] 

	global symbol_g_NULSUSDT 
	global price_bids_g_NULSUSDT 
	global qty_bids_g_NULSUSDT 
	global price_asks_g_NULSUSDT 
	global qty_asks_g_NULSUSDT 

	symbol_g_NULSUSDT = symbol_c_l_NULSUSDT 
	price_bids_g_NULSUSDT = Decimal(price_bids_c_l_NULSUSDT) 
	qty_bids_g_NULSUSDT = Decimal(qty_bids_c_l_NULSUSDT) 
	price_asks_g_NULSUSDT = Decimal(price_asks_c_l_NULSUSDT) 
	qty_asks_g_NULSUSDT = Decimal(qty_asks_c_l_NULSUSDT) 


def loop_NULSUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nulsusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NULSUSDT) 
	ws.run_forever() 


Thread(target=loop_NULSUSDT).start() 
symbol_g_ONGUSDT = 'ONGUSDT' 
price_bids_g_ONGUSDT = Decimal('0.0') 
qty_bids_g_ONGUSDT = Decimal('0.0') 
price_asks_g_ONGUSDT = Decimal('0.0') 
qty_asks_g_ONGUSDT = Decimal('0.0') 
stepSize_g_ONGUSDT = Decimal('1.0') 


def on_message_ONGUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ONGUSDT = 'ONGUSDT' 
	price_bids_c_l_ONGUSDT = data['b'] 
	qty_bids_c_l_ONGUSDT = data['B'] 
	price_asks_c_l_ONGUSDT = data['a'] 
	qty_asks_c_l_ONGUSDT = data['A'] 

	global symbol_g_ONGUSDT 
	global price_bids_g_ONGUSDT 
	global qty_bids_g_ONGUSDT 
	global price_asks_g_ONGUSDT 
	global qty_asks_g_ONGUSDT 

	symbol_g_ONGUSDT = symbol_c_l_ONGUSDT 
	price_bids_g_ONGUSDT = Decimal(price_bids_c_l_ONGUSDT) 
	qty_bids_g_ONGUSDT = Decimal(qty_bids_c_l_ONGUSDT) 
	price_asks_g_ONGUSDT = Decimal(price_asks_c_l_ONGUSDT) 
	qty_asks_g_ONGUSDT = Decimal(qty_asks_c_l_ONGUSDT) 


def loop_ONGUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ongusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ONGUSDT) 
	ws.run_forever() 


Thread(target=loop_ONGUSDT).start() 
symbol_g_ZRXUSDT = 'ZRXUSDT' 
price_bids_g_ZRXUSDT = Decimal('0.0') 
qty_bids_g_ZRXUSDT = Decimal('0.0') 
price_asks_g_ZRXUSDT = Decimal('0.0') 
qty_asks_g_ZRXUSDT = Decimal('0.0') 
stepSize_g_ZRXUSDT = Decimal('1.0') 


def on_message_ZRXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZRXUSDT = 'ZRXUSDT' 
	price_bids_c_l_ZRXUSDT = data['b'] 
	qty_bids_c_l_ZRXUSDT = data['B'] 
	price_asks_c_l_ZRXUSDT = data['a'] 
	qty_asks_c_l_ZRXUSDT = data['A'] 

	global symbol_g_ZRXUSDT 
	global price_bids_g_ZRXUSDT 
	global qty_bids_g_ZRXUSDT 
	global price_asks_g_ZRXUSDT 
	global qty_asks_g_ZRXUSDT 

	symbol_g_ZRXUSDT = symbol_c_l_ZRXUSDT 
	price_bids_g_ZRXUSDT = Decimal(price_bids_c_l_ZRXUSDT) 
	qty_bids_g_ZRXUSDT = Decimal(qty_bids_c_l_ZRXUSDT) 
	price_asks_g_ZRXUSDT = Decimal(price_asks_c_l_ZRXUSDT) 
	qty_asks_g_ZRXUSDT = Decimal(qty_asks_c_l_ZRXUSDT) 


def loop_ZRXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zrxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZRXUSDT) 
	ws.run_forever() 


Thread(target=loop_ZRXUSDT).start() 
symbol_g_FETUSDT = 'FETUSDT' 
price_bids_g_FETUSDT = Decimal('0.0') 
qty_bids_g_FETUSDT = Decimal('0.0') 
price_asks_g_FETUSDT = Decimal('0.0') 
qty_asks_g_FETUSDT = Decimal('0.0') 
stepSize_g_FETUSDT = Decimal('1.0') 


def on_message_FETUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FETUSDT = 'FETUSDT' 
	price_bids_c_l_FETUSDT = data['b'] 
	qty_bids_c_l_FETUSDT = data['B'] 
	price_asks_c_l_FETUSDT = data['a'] 
	qty_asks_c_l_FETUSDT = data['A'] 

	global symbol_g_FETUSDT 
	global price_bids_g_FETUSDT 
	global qty_bids_g_FETUSDT 
	global price_asks_g_FETUSDT 
	global qty_asks_g_FETUSDT 

	symbol_g_FETUSDT = symbol_c_l_FETUSDT 
	price_bids_g_FETUSDT = Decimal(price_bids_c_l_FETUSDT) 
	qty_bids_g_FETUSDT = Decimal(qty_bids_c_l_FETUSDT) 
	price_asks_g_FETUSDT = Decimal(price_asks_c_l_FETUSDT) 
	qty_asks_g_FETUSDT = Decimal(qty_asks_c_l_FETUSDT) 


def loop_FETUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fetusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FETUSDT) 
	ws.run_forever() 


Thread(target=loop_FETUSDT).start() 
symbol_g_BATUSDT = 'BATUSDT' 
price_bids_g_BATUSDT = Decimal('0.0') 
qty_bids_g_BATUSDT = Decimal('0.0') 
price_asks_g_BATUSDT = Decimal('0.0') 
qty_asks_g_BATUSDT = Decimal('0.0') 
stepSize_g_BATUSDT = Decimal('1.0') 


def on_message_BATUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BATUSDT = 'BATUSDT' 
	price_bids_c_l_BATUSDT = data['b'] 
	qty_bids_c_l_BATUSDT = data['B'] 
	price_asks_c_l_BATUSDT = data['a'] 
	qty_asks_c_l_BATUSDT = data['A'] 

	global symbol_g_BATUSDT 
	global price_bids_g_BATUSDT 
	global qty_bids_g_BATUSDT 
	global price_asks_g_BATUSDT 
	global qty_asks_g_BATUSDT 

	symbol_g_BATUSDT = symbol_c_l_BATUSDT 
	price_bids_g_BATUSDT = Decimal(price_bids_c_l_BATUSDT) 
	qty_bids_g_BATUSDT = Decimal(qty_bids_c_l_BATUSDT) 
	price_asks_g_BATUSDT = Decimal(price_asks_c_l_BATUSDT) 
	qty_asks_g_BATUSDT = Decimal(qty_asks_c_l_BATUSDT) 


def loop_BATUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/batusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BATUSDT) 
	ws.run_forever() 


Thread(target=loop_BATUSDT).start() 
symbol_g_XMRUSDT = 'XMRUSDT' 
price_bids_g_XMRUSDT = Decimal('0.0') 
qty_bids_g_XMRUSDT = Decimal('0.0') 
price_asks_g_XMRUSDT = Decimal('0.0') 
qty_asks_g_XMRUSDT = Decimal('0.0') 
stepSize_g_XMRUSDT = Decimal('0.001') 


def on_message_XMRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XMRUSDT = 'XMRUSDT' 
	price_bids_c_l_XMRUSDT = data['b'] 
	qty_bids_c_l_XMRUSDT = data['B'] 
	price_asks_c_l_XMRUSDT = data['a'] 
	qty_asks_c_l_XMRUSDT = data['A'] 

	global symbol_g_XMRUSDT 
	global price_bids_g_XMRUSDT 
	global qty_bids_g_XMRUSDT 
	global price_asks_g_XMRUSDT 
	global qty_asks_g_XMRUSDT 

	symbol_g_XMRUSDT = symbol_c_l_XMRUSDT 
	price_bids_g_XMRUSDT = Decimal(price_bids_c_l_XMRUSDT) 
	qty_bids_g_XMRUSDT = Decimal(qty_bids_c_l_XMRUSDT) 
	price_asks_g_XMRUSDT = Decimal(price_asks_c_l_XMRUSDT) 
	qty_asks_g_XMRUSDT = Decimal(qty_asks_c_l_XMRUSDT) 


def loop_XMRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xmrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XMRUSDT) 
	ws.run_forever() 


Thread(target=loop_XMRUSDT).start() 
symbol_g_ZECUSDT = 'ZECUSDT' 
price_bids_g_ZECUSDT = Decimal('0.0') 
qty_bids_g_ZECUSDT = Decimal('0.0') 
price_asks_g_ZECUSDT = Decimal('0.0') 
qty_asks_g_ZECUSDT = Decimal('0.0') 
stepSize_g_ZECUSDT = Decimal('0.001') 


def on_message_ZECUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZECUSDT = 'ZECUSDT' 
	price_bids_c_l_ZECUSDT = data['b'] 
	qty_bids_c_l_ZECUSDT = data['B'] 
	price_asks_c_l_ZECUSDT = data['a'] 
	qty_asks_c_l_ZECUSDT = data['A'] 

	global symbol_g_ZECUSDT 
	global price_bids_g_ZECUSDT 
	global qty_bids_g_ZECUSDT 
	global price_asks_g_ZECUSDT 
	global qty_asks_g_ZECUSDT 

	symbol_g_ZECUSDT = symbol_c_l_ZECUSDT 
	price_bids_g_ZECUSDT = Decimal(price_bids_c_l_ZECUSDT) 
	qty_bids_g_ZECUSDT = Decimal(qty_bids_c_l_ZECUSDT) 
	price_asks_g_ZECUSDT = Decimal(price_asks_c_l_ZECUSDT) 
	qty_asks_g_ZECUSDT = Decimal(qty_asks_c_l_ZECUSDT) 


def loop_ZECUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zecusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZECUSDT) 
	ws.run_forever() 


Thread(target=loop_ZECUSDT).start() 
symbol_g_IOSTUSDT = 'IOSTUSDT' 
price_bids_g_IOSTUSDT = Decimal('0.0') 
qty_bids_g_IOSTUSDT = Decimal('0.0') 
price_asks_g_IOSTUSDT = Decimal('0.0') 
qty_asks_g_IOSTUSDT = Decimal('0.0') 
stepSize_g_IOSTUSDT = Decimal('1.0') 


def on_message_IOSTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IOSTUSDT = 'IOSTUSDT' 
	price_bids_c_l_IOSTUSDT = data['b'] 
	qty_bids_c_l_IOSTUSDT = data['B'] 
	price_asks_c_l_IOSTUSDT = data['a'] 
	qty_asks_c_l_IOSTUSDT = data['A'] 

	global symbol_g_IOSTUSDT 
	global price_bids_g_IOSTUSDT 
	global qty_bids_g_IOSTUSDT 
	global price_asks_g_IOSTUSDT 
	global qty_asks_g_IOSTUSDT 

	symbol_g_IOSTUSDT = symbol_c_l_IOSTUSDT 
	price_bids_g_IOSTUSDT = Decimal(price_bids_c_l_IOSTUSDT) 
	qty_bids_g_IOSTUSDT = Decimal(qty_bids_c_l_IOSTUSDT) 
	price_asks_g_IOSTUSDT = Decimal(price_asks_c_l_IOSTUSDT) 
	qty_asks_g_IOSTUSDT = Decimal(qty_asks_c_l_IOSTUSDT) 


def loop_IOSTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/iostusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IOSTUSDT) 
	ws.run_forever() 


Thread(target=loop_IOSTUSDT).start() 
symbol_g_CELRUSDT = 'CELRUSDT' 
price_bids_g_CELRUSDT = Decimal('0.0') 
qty_bids_g_CELRUSDT = Decimal('0.0') 
price_asks_g_CELRUSDT = Decimal('0.0') 
qty_asks_g_CELRUSDT = Decimal('0.0') 
stepSize_g_CELRUSDT = Decimal('0.1') 


def on_message_CELRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CELRUSDT = 'CELRUSDT' 
	price_bids_c_l_CELRUSDT = data['b'] 
	qty_bids_c_l_CELRUSDT = data['B'] 
	price_asks_c_l_CELRUSDT = data['a'] 
	qty_asks_c_l_CELRUSDT = data['A'] 

	global symbol_g_CELRUSDT 
	global price_bids_g_CELRUSDT 
	global qty_bids_g_CELRUSDT 
	global price_asks_g_CELRUSDT 
	global qty_asks_g_CELRUSDT 

	symbol_g_CELRUSDT = symbol_c_l_CELRUSDT 
	price_bids_g_CELRUSDT = Decimal(price_bids_c_l_CELRUSDT) 
	qty_bids_g_CELRUSDT = Decimal(qty_bids_c_l_CELRUSDT) 
	price_asks_g_CELRUSDT = Decimal(price_asks_c_l_CELRUSDT) 
	qty_asks_g_CELRUSDT = Decimal(qty_asks_c_l_CELRUSDT) 


def loop_CELRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/celrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CELRUSDT) 
	ws.run_forever() 


Thread(target=loop_CELRUSDT).start() 
symbol_g_DASHUSDT = 'DASHUSDT' 
price_bids_g_DASHUSDT = Decimal('0.0') 
qty_bids_g_DASHUSDT = Decimal('0.0') 
price_asks_g_DASHUSDT = Decimal('0.0') 
qty_asks_g_DASHUSDT = Decimal('0.0') 
stepSize_g_DASHUSDT = Decimal('0.001') 


def on_message_DASHUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DASHUSDT = 'DASHUSDT' 
	price_bids_c_l_DASHUSDT = data['b'] 
	qty_bids_c_l_DASHUSDT = data['B'] 
	price_asks_c_l_DASHUSDT = data['a'] 
	qty_asks_c_l_DASHUSDT = data['A'] 

	global symbol_g_DASHUSDT 
	global price_bids_g_DASHUSDT 
	global qty_bids_g_DASHUSDT 
	global price_asks_g_DASHUSDT 
	global qty_asks_g_DASHUSDT 

	symbol_g_DASHUSDT = symbol_c_l_DASHUSDT 
	price_bids_g_DASHUSDT = Decimal(price_bids_c_l_DASHUSDT) 
	qty_bids_g_DASHUSDT = Decimal(qty_bids_c_l_DASHUSDT) 
	price_asks_g_DASHUSDT = Decimal(price_asks_c_l_DASHUSDT) 
	qty_asks_g_DASHUSDT = Decimal(qty_asks_c_l_DASHUSDT) 


def loop_DASHUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dashusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DASHUSDT) 
	ws.run_forever() 


Thread(target=loop_DASHUSDT).start() 
symbol_g_OMGUSDT = 'OMGUSDT' 
price_bids_g_OMGUSDT = Decimal('0.0') 
qty_bids_g_OMGUSDT = Decimal('0.0') 
price_asks_g_OMGUSDT = Decimal('0.0') 
qty_asks_g_OMGUSDT = Decimal('0.0') 
stepSize_g_OMGUSDT = Decimal('0.1') 


def on_message_OMGUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OMGUSDT = 'OMGUSDT' 
	price_bids_c_l_OMGUSDT = data['b'] 
	qty_bids_c_l_OMGUSDT = data['B'] 
	price_asks_c_l_OMGUSDT = data['a'] 
	qty_asks_c_l_OMGUSDT = data['A'] 

	global symbol_g_OMGUSDT 
	global price_bids_g_OMGUSDT 
	global qty_bids_g_OMGUSDT 
	global price_asks_g_OMGUSDT 
	global qty_asks_g_OMGUSDT 

	symbol_g_OMGUSDT = symbol_c_l_OMGUSDT 
	price_bids_g_OMGUSDT = Decimal(price_bids_c_l_OMGUSDT) 
	qty_bids_g_OMGUSDT = Decimal(qty_bids_c_l_OMGUSDT) 
	price_asks_g_OMGUSDT = Decimal(price_asks_c_l_OMGUSDT) 
	qty_asks_g_OMGUSDT = Decimal(qty_asks_c_l_OMGUSDT) 


def loop_OMGUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/omgusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OMGUSDT) 
	ws.run_forever() 


Thread(target=loop_OMGUSDT).start() 
symbol_g_THETAUSDT = 'THETAUSDT' 
price_bids_g_THETAUSDT = Decimal('0.0') 
qty_bids_g_THETAUSDT = Decimal('0.0') 
price_asks_g_THETAUSDT = Decimal('0.0') 
qty_asks_g_THETAUSDT = Decimal('0.0') 
stepSize_g_THETAUSDT = Decimal('0.1') 


def on_message_THETAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_THETAUSDT = 'THETAUSDT' 
	price_bids_c_l_THETAUSDT = data['b'] 
	qty_bids_c_l_THETAUSDT = data['B'] 
	price_asks_c_l_THETAUSDT = data['a'] 
	qty_asks_c_l_THETAUSDT = data['A'] 

	global symbol_g_THETAUSDT 
	global price_bids_g_THETAUSDT 
	global qty_bids_g_THETAUSDT 
	global price_asks_g_THETAUSDT 
	global qty_asks_g_THETAUSDT 

	symbol_g_THETAUSDT = symbol_c_l_THETAUSDT 
	price_bids_g_THETAUSDT = Decimal(price_bids_c_l_THETAUSDT) 
	qty_bids_g_THETAUSDT = Decimal(qty_bids_c_l_THETAUSDT) 
	price_asks_g_THETAUSDT = Decimal(price_asks_c_l_THETAUSDT) 
	qty_asks_g_THETAUSDT = Decimal(qty_asks_c_l_THETAUSDT) 


def loop_THETAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/thetausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_THETAUSDT) 
	ws.run_forever() 


Thread(target=loop_THETAUSDT).start() 
symbol_g_TFUELUSDT = 'TFUELUSDT' 
price_bids_g_TFUELUSDT = Decimal('0.0') 
qty_bids_g_TFUELUSDT = Decimal('0.0') 
price_asks_g_TFUELUSDT = Decimal('0.0') 
qty_asks_g_TFUELUSDT = Decimal('0.0') 
stepSize_g_TFUELUSDT = Decimal('1.0') 


def on_message_TFUELUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TFUELUSDT = 'TFUELUSDT' 
	price_bids_c_l_TFUELUSDT = data['b'] 
	qty_bids_c_l_TFUELUSDT = data['B'] 
	price_asks_c_l_TFUELUSDT = data['a'] 
	qty_asks_c_l_TFUELUSDT = data['A'] 

	global symbol_g_TFUELUSDT 
	global price_bids_g_TFUELUSDT 
	global qty_bids_g_TFUELUSDT 
	global price_asks_g_TFUELUSDT 
	global qty_asks_g_TFUELUSDT 

	symbol_g_TFUELUSDT = symbol_c_l_TFUELUSDT 
	price_bids_g_TFUELUSDT = Decimal(price_bids_c_l_TFUELUSDT) 
	qty_bids_g_TFUELUSDT = Decimal(qty_bids_c_l_TFUELUSDT) 
	price_asks_g_TFUELUSDT = Decimal(price_asks_c_l_TFUELUSDT) 
	qty_asks_g_TFUELUSDT = Decimal(qty_asks_c_l_TFUELUSDT) 


def loop_TFUELUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tfuelusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TFUELUSDT) 
	ws.run_forever() 


Thread(target=loop_TFUELUSDT).start() 
symbol_g_DUSKUSDT = 'DUSKUSDT' 
price_bids_g_DUSKUSDT = Decimal('0.0') 
qty_bids_g_DUSKUSDT = Decimal('0.0') 
price_asks_g_DUSKUSDT = Decimal('0.0') 
qty_asks_g_DUSKUSDT = Decimal('0.0') 
stepSize_g_DUSKUSDT = Decimal('1.0') 


def on_message_DUSKUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DUSKUSDT = 'DUSKUSDT' 
	price_bids_c_l_DUSKUSDT = data['b'] 
	qty_bids_c_l_DUSKUSDT = data['B'] 
	price_asks_c_l_DUSKUSDT = data['a'] 
	qty_asks_c_l_DUSKUSDT = data['A'] 

	global symbol_g_DUSKUSDT 
	global price_bids_g_DUSKUSDT 
	global qty_bids_g_DUSKUSDT 
	global price_asks_g_DUSKUSDT 
	global qty_asks_g_DUSKUSDT 

	symbol_g_DUSKUSDT = symbol_c_l_DUSKUSDT 
	price_bids_g_DUSKUSDT = Decimal(price_bids_c_l_DUSKUSDT) 
	qty_bids_g_DUSKUSDT = Decimal(qty_bids_c_l_DUSKUSDT) 
	price_asks_g_DUSKUSDT = Decimal(price_asks_c_l_DUSKUSDT) 
	qty_asks_g_DUSKUSDT = Decimal(qty_asks_c_l_DUSKUSDT) 


def loop_DUSKUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/duskusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DUSKUSDT) 
	ws.run_forever() 


Thread(target=loop_DUSKUSDT).start() 
symbol_g_MTLUSDT = 'MTLUSDT' 
price_bids_g_MTLUSDT = Decimal('0.0') 
qty_bids_g_MTLUSDT = Decimal('0.0') 
price_asks_g_MTLUSDT = Decimal('0.0') 
qty_asks_g_MTLUSDT = Decimal('0.0') 
stepSize_g_MTLUSDT = Decimal('0.1') 


def on_message_MTLUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MTLUSDT = 'MTLUSDT' 
	price_bids_c_l_MTLUSDT = data['b'] 
	qty_bids_c_l_MTLUSDT = data['B'] 
	price_asks_c_l_MTLUSDT = data['a'] 
	qty_asks_c_l_MTLUSDT = data['A'] 

	global symbol_g_MTLUSDT 
	global price_bids_g_MTLUSDT 
	global qty_bids_g_MTLUSDT 
	global price_asks_g_MTLUSDT 
	global qty_asks_g_MTLUSDT 

	symbol_g_MTLUSDT = symbol_c_l_MTLUSDT 
	price_bids_g_MTLUSDT = Decimal(price_bids_c_l_MTLUSDT) 
	qty_bids_g_MTLUSDT = Decimal(qty_bids_c_l_MTLUSDT) 
	price_asks_g_MTLUSDT = Decimal(price_asks_c_l_MTLUSDT) 
	qty_asks_g_MTLUSDT = Decimal(qty_asks_c_l_MTLUSDT) 


def loop_MTLUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mtlusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MTLUSDT) 
	ws.run_forever() 


Thread(target=loop_MTLUSDT).start() 
symbol_g_TOMOUSDT = 'TOMOUSDT' 
price_bids_g_TOMOUSDT = Decimal('0.0') 
qty_bids_g_TOMOUSDT = Decimal('0.0') 
price_asks_g_TOMOUSDT = Decimal('0.0') 
qty_asks_g_TOMOUSDT = Decimal('0.0') 
stepSize_g_TOMOUSDT = Decimal('0.1') 


def on_message_TOMOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TOMOUSDT = 'TOMOUSDT' 
	price_bids_c_l_TOMOUSDT = data['b'] 
	qty_bids_c_l_TOMOUSDT = data['B'] 
	price_asks_c_l_TOMOUSDT = data['a'] 
	qty_asks_c_l_TOMOUSDT = data['A'] 

	global symbol_g_TOMOUSDT 
	global price_bids_g_TOMOUSDT 
	global qty_bids_g_TOMOUSDT 
	global price_asks_g_TOMOUSDT 
	global qty_asks_g_TOMOUSDT 

	symbol_g_TOMOUSDT = symbol_c_l_TOMOUSDT 
	price_bids_g_TOMOUSDT = Decimal(price_bids_c_l_TOMOUSDT) 
	qty_bids_g_TOMOUSDT = Decimal(qty_bids_c_l_TOMOUSDT) 
	price_asks_g_TOMOUSDT = Decimal(price_asks_c_l_TOMOUSDT) 
	qty_asks_g_TOMOUSDT = Decimal(qty_asks_c_l_TOMOUSDT) 


def loop_TOMOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tomousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TOMOUSDT) 
	ws.run_forever() 


Thread(target=loop_TOMOUSDT).start() 
symbol_g_KEYUSDT = 'KEYUSDT' 
price_bids_g_KEYUSDT = Decimal('0.0') 
qty_bids_g_KEYUSDT = Decimal('0.0') 
price_asks_g_KEYUSDT = Decimal('0.0') 
qty_asks_g_KEYUSDT = Decimal('0.0') 
stepSize_g_KEYUSDT = Decimal('1.0') 


def on_message_KEYUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KEYUSDT = 'KEYUSDT' 
	price_bids_c_l_KEYUSDT = data['b'] 
	qty_bids_c_l_KEYUSDT = data['B'] 
	price_asks_c_l_KEYUSDT = data['a'] 
	qty_asks_c_l_KEYUSDT = data['A'] 

	global symbol_g_KEYUSDT 
	global price_bids_g_KEYUSDT 
	global qty_bids_g_KEYUSDT 
	global price_asks_g_KEYUSDT 
	global qty_asks_g_KEYUSDT 

	symbol_g_KEYUSDT = symbol_c_l_KEYUSDT 
	price_bids_g_KEYUSDT = Decimal(price_bids_c_l_KEYUSDT) 
	qty_bids_g_KEYUSDT = Decimal(qty_bids_c_l_KEYUSDT) 
	price_asks_g_KEYUSDT = Decimal(price_asks_c_l_KEYUSDT) 
	qty_asks_g_KEYUSDT = Decimal(qty_asks_c_l_KEYUSDT) 


def loop_KEYUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/keyusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KEYUSDT) 
	ws.run_forever() 


Thread(target=loop_KEYUSDT).start() 
symbol_g_DOCKUSDT = 'DOCKUSDT' 
price_bids_g_DOCKUSDT = Decimal('0.0') 
qty_bids_g_DOCKUSDT = Decimal('0.0') 
price_asks_g_DOCKUSDT = Decimal('0.0') 
qty_asks_g_DOCKUSDT = Decimal('0.0') 
stepSize_g_DOCKUSDT = Decimal('1.0') 


def on_message_DOCKUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOCKUSDT = 'DOCKUSDT' 
	price_bids_c_l_DOCKUSDT = data['b'] 
	qty_bids_c_l_DOCKUSDT = data['B'] 
	price_asks_c_l_DOCKUSDT = data['a'] 
	qty_asks_c_l_DOCKUSDT = data['A'] 

	global symbol_g_DOCKUSDT 
	global price_bids_g_DOCKUSDT 
	global qty_bids_g_DOCKUSDT 
	global price_asks_g_DOCKUSDT 
	global qty_asks_g_DOCKUSDT 

	symbol_g_DOCKUSDT = symbol_c_l_DOCKUSDT 
	price_bids_g_DOCKUSDT = Decimal(price_bids_c_l_DOCKUSDT) 
	qty_bids_g_DOCKUSDT = Decimal(qty_bids_c_l_DOCKUSDT) 
	price_asks_g_DOCKUSDT = Decimal(price_asks_c_l_DOCKUSDT) 
	qty_asks_g_DOCKUSDT = Decimal(qty_asks_c_l_DOCKUSDT) 


def loop_DOCKUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dockusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOCKUSDT) 
	ws.run_forever() 


Thread(target=loop_DOCKUSDT).start() 
symbol_g_WANUSDT = 'WANUSDT' 
price_bids_g_WANUSDT = Decimal('0.0') 
qty_bids_g_WANUSDT = Decimal('0.0') 
price_asks_g_WANUSDT = Decimal('0.0') 
qty_asks_g_WANUSDT = Decimal('0.0') 
stepSize_g_WANUSDT = Decimal('1.0') 


def on_message_WANUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WANUSDT = 'WANUSDT' 
	price_bids_c_l_WANUSDT = data['b'] 
	qty_bids_c_l_WANUSDT = data['B'] 
	price_asks_c_l_WANUSDT = data['a'] 
	qty_asks_c_l_WANUSDT = data['A'] 

	global symbol_g_WANUSDT 
	global price_bids_g_WANUSDT 
	global qty_bids_g_WANUSDT 
	global price_asks_g_WANUSDT 
	global qty_asks_g_WANUSDT 

	symbol_g_WANUSDT = symbol_c_l_WANUSDT 
	price_bids_g_WANUSDT = Decimal(price_bids_c_l_WANUSDT) 
	qty_bids_g_WANUSDT = Decimal(qty_bids_c_l_WANUSDT) 
	price_asks_g_WANUSDT = Decimal(price_asks_c_l_WANUSDT) 
	qty_asks_g_WANUSDT = Decimal(qty_asks_c_l_WANUSDT) 


def loop_WANUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wanusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WANUSDT) 
	ws.run_forever() 


Thread(target=loop_WANUSDT).start() 
symbol_g_FUNUSDT = 'FUNUSDT' 
price_bids_g_FUNUSDT = Decimal('0.0') 
qty_bids_g_FUNUSDT = Decimal('0.0') 
price_asks_g_FUNUSDT = Decimal('0.0') 
qty_asks_g_FUNUSDT = Decimal('0.0') 
stepSize_g_FUNUSDT = Decimal('1.0') 


def on_message_FUNUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FUNUSDT = 'FUNUSDT' 
	price_bids_c_l_FUNUSDT = data['b'] 
	qty_bids_c_l_FUNUSDT = data['B'] 
	price_asks_c_l_FUNUSDT = data['a'] 
	qty_asks_c_l_FUNUSDT = data['A'] 

	global symbol_g_FUNUSDT 
	global price_bids_g_FUNUSDT 
	global qty_bids_g_FUNUSDT 
	global price_asks_g_FUNUSDT 
	global qty_asks_g_FUNUSDT 

	symbol_g_FUNUSDT = symbol_c_l_FUNUSDT 
	price_bids_g_FUNUSDT = Decimal(price_bids_c_l_FUNUSDT) 
	qty_bids_g_FUNUSDT = Decimal(qty_bids_c_l_FUNUSDT) 
	price_asks_g_FUNUSDT = Decimal(price_asks_c_l_FUNUSDT) 
	qty_asks_g_FUNUSDT = Decimal(qty_asks_c_l_FUNUSDT) 


def loop_FUNUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/funusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FUNUSDT) 
	ws.run_forever() 


Thread(target=loop_FUNUSDT).start() 
symbol_g_BANDUSDT = 'BANDUSDT' 
price_bids_g_BANDUSDT = Decimal('0.0') 
qty_bids_g_BANDUSDT = Decimal('0.0') 
price_asks_g_BANDUSDT = Decimal('0.0') 
qty_asks_g_BANDUSDT = Decimal('0.0') 
stepSize_g_BANDUSDT = Decimal('0.1') 


def on_message_BANDUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BANDUSDT = 'BANDUSDT' 
	price_bids_c_l_BANDUSDT = data['b'] 
	qty_bids_c_l_BANDUSDT = data['B'] 
	price_asks_c_l_BANDUSDT = data['a'] 
	qty_asks_c_l_BANDUSDT = data['A'] 

	global symbol_g_BANDUSDT 
	global price_bids_g_BANDUSDT 
	global qty_bids_g_BANDUSDT 
	global price_asks_g_BANDUSDT 
	global qty_asks_g_BANDUSDT 

	symbol_g_BANDUSDT = symbol_c_l_BANDUSDT 
	price_bids_g_BANDUSDT = Decimal(price_bids_c_l_BANDUSDT) 
	qty_bids_g_BANDUSDT = Decimal(qty_bids_c_l_BANDUSDT) 
	price_asks_g_BANDUSDT = Decimal(price_asks_c_l_BANDUSDT) 
	qty_asks_g_BANDUSDT = Decimal(qty_asks_c_l_BANDUSDT) 


def loop_BANDUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bandusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BANDUSDT) 
	ws.run_forever() 


Thread(target=loop_BANDUSDT).start() 
symbol_g_RENUSDT = 'RENUSDT' 
price_bids_g_RENUSDT = Decimal('0.0') 
qty_bids_g_RENUSDT = Decimal('0.0') 
price_asks_g_RENUSDT = Decimal('0.0') 
qty_asks_g_RENUSDT = Decimal('0.0') 
stepSize_g_RENUSDT = Decimal('1.0') 


def on_message_RENUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RENUSDT = 'RENUSDT' 
	price_bids_c_l_RENUSDT = data['b'] 
	qty_bids_c_l_RENUSDT = data['B'] 
	price_asks_c_l_RENUSDT = data['a'] 
	qty_asks_c_l_RENUSDT = data['A'] 

	global symbol_g_RENUSDT 
	global price_bids_g_RENUSDT 
	global qty_bids_g_RENUSDT 
	global price_asks_g_RENUSDT 
	global qty_asks_g_RENUSDT 

	symbol_g_RENUSDT = symbol_c_l_RENUSDT 
	price_bids_g_RENUSDT = Decimal(price_bids_c_l_RENUSDT) 
	qty_bids_g_RENUSDT = Decimal(qty_bids_c_l_RENUSDT) 
	price_asks_g_RENUSDT = Decimal(price_asks_c_l_RENUSDT) 
	qty_asks_g_RENUSDT = Decimal(qty_asks_c_l_RENUSDT) 


def loop_RENUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/renusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RENUSDT) 
	ws.run_forever() 


Thread(target=loop_RENUSDT).start() 
symbol_g_HBARUSDT = 'HBARUSDT' 
price_bids_g_HBARUSDT = Decimal('0.0') 
qty_bids_g_HBARUSDT = Decimal('0.0') 
price_asks_g_HBARUSDT = Decimal('0.0') 
qty_asks_g_HBARUSDT = Decimal('0.0') 
stepSize_g_HBARUSDT = Decimal('1.0') 


def on_message_HBARUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HBARUSDT = 'HBARUSDT' 
	price_bids_c_l_HBARUSDT = data['b'] 
	qty_bids_c_l_HBARUSDT = data['B'] 
	price_asks_c_l_HBARUSDT = data['a'] 
	qty_asks_c_l_HBARUSDT = data['A'] 

	global symbol_g_HBARUSDT 
	global price_bids_g_HBARUSDT 
	global qty_bids_g_HBARUSDT 
	global price_asks_g_HBARUSDT 
	global qty_asks_g_HBARUSDT 

	symbol_g_HBARUSDT = symbol_c_l_HBARUSDT 
	price_bids_g_HBARUSDT = Decimal(price_bids_c_l_HBARUSDT) 
	qty_bids_g_HBARUSDT = Decimal(qty_bids_c_l_HBARUSDT) 
	price_asks_g_HBARUSDT = Decimal(price_asks_c_l_HBARUSDT) 
	qty_asks_g_HBARUSDT = Decimal(qty_asks_c_l_HBARUSDT) 


def loop_HBARUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hbarusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HBARUSDT) 
	ws.run_forever() 


Thread(target=loop_HBARUSDT).start() 
symbol_g_NKNUSDT = 'NKNUSDT' 
price_bids_g_NKNUSDT = Decimal('0.0') 
qty_bids_g_NKNUSDT = Decimal('0.0') 
price_asks_g_NKNUSDT = Decimal('0.0') 
qty_asks_g_NKNUSDT = Decimal('0.0') 
stepSize_g_NKNUSDT = Decimal('1.0') 


def on_message_NKNUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NKNUSDT = 'NKNUSDT' 
	price_bids_c_l_NKNUSDT = data['b'] 
	qty_bids_c_l_NKNUSDT = data['B'] 
	price_asks_c_l_NKNUSDT = data['a'] 
	qty_asks_c_l_NKNUSDT = data['A'] 

	global symbol_g_NKNUSDT 
	global price_bids_g_NKNUSDT 
	global qty_bids_g_NKNUSDT 
	global price_asks_g_NKNUSDT 
	global qty_asks_g_NKNUSDT 

	symbol_g_NKNUSDT = symbol_c_l_NKNUSDT 
	price_bids_g_NKNUSDT = Decimal(price_bids_c_l_NKNUSDT) 
	qty_bids_g_NKNUSDT = Decimal(qty_bids_c_l_NKNUSDT) 
	price_asks_g_NKNUSDT = Decimal(price_asks_c_l_NKNUSDT) 
	qty_asks_g_NKNUSDT = Decimal(qty_asks_c_l_NKNUSDT) 


def loop_NKNUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nknusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NKNUSDT) 
	ws.run_forever() 


Thread(target=loop_NKNUSDT).start() 
symbol_g_STXUSDT = 'STXUSDT' 
price_bids_g_STXUSDT = Decimal('0.0') 
qty_bids_g_STXUSDT = Decimal('0.0') 
price_asks_g_STXUSDT = Decimal('0.0') 
qty_asks_g_STXUSDT = Decimal('0.0') 
stepSize_g_STXUSDT = Decimal('0.1') 


def on_message_STXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STXUSDT = 'STXUSDT' 
	price_bids_c_l_STXUSDT = data['b'] 
	qty_bids_c_l_STXUSDT = data['B'] 
	price_asks_c_l_STXUSDT = data['a'] 
	qty_asks_c_l_STXUSDT = data['A'] 

	global symbol_g_STXUSDT 
	global price_bids_g_STXUSDT 
	global qty_bids_g_STXUSDT 
	global price_asks_g_STXUSDT 
	global qty_asks_g_STXUSDT 

	symbol_g_STXUSDT = symbol_c_l_STXUSDT 
	price_bids_g_STXUSDT = Decimal(price_bids_c_l_STXUSDT) 
	qty_bids_g_STXUSDT = Decimal(qty_bids_c_l_STXUSDT) 
	price_asks_g_STXUSDT = Decimal(price_asks_c_l_STXUSDT) 
	qty_asks_g_STXUSDT = Decimal(qty_asks_c_l_STXUSDT) 


def loop_STXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/stxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STXUSDT) 
	ws.run_forever() 


Thread(target=loop_STXUSDT).start() 
symbol_g_KAVAUSDT = 'KAVAUSDT' 
price_bids_g_KAVAUSDT = Decimal('0.0') 
qty_bids_g_KAVAUSDT = Decimal('0.0') 
price_asks_g_KAVAUSDT = Decimal('0.0') 
qty_asks_g_KAVAUSDT = Decimal('0.0') 
stepSize_g_KAVAUSDT = Decimal('0.1') 


def on_message_KAVAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KAVAUSDT = 'KAVAUSDT' 
	price_bids_c_l_KAVAUSDT = data['b'] 
	qty_bids_c_l_KAVAUSDT = data['B'] 
	price_asks_c_l_KAVAUSDT = data['a'] 
	qty_asks_c_l_KAVAUSDT = data['A'] 

	global symbol_g_KAVAUSDT 
	global price_bids_g_KAVAUSDT 
	global qty_bids_g_KAVAUSDT 
	global price_asks_g_KAVAUSDT 
	global qty_asks_g_KAVAUSDT 

	symbol_g_KAVAUSDT = symbol_c_l_KAVAUSDT 
	price_bids_g_KAVAUSDT = Decimal(price_bids_c_l_KAVAUSDT) 
	qty_bids_g_KAVAUSDT = Decimal(qty_bids_c_l_KAVAUSDT) 
	price_asks_g_KAVAUSDT = Decimal(price_asks_c_l_KAVAUSDT) 
	qty_asks_g_KAVAUSDT = Decimal(qty_asks_c_l_KAVAUSDT) 


def loop_KAVAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kavausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KAVAUSDT) 
	ws.run_forever() 


Thread(target=loop_KAVAUSDT).start() 
symbol_g_IOTXUSDT = 'IOTXUSDT' 
price_bids_g_IOTXUSDT = Decimal('0.0') 
qty_bids_g_IOTXUSDT = Decimal('0.0') 
price_asks_g_IOTXUSDT = Decimal('0.0') 
qty_asks_g_IOTXUSDT = Decimal('0.0') 
stepSize_g_IOTXUSDT = Decimal('1.0') 


def on_message_IOTXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IOTXUSDT = 'IOTXUSDT' 
	price_bids_c_l_IOTXUSDT = data['b'] 
	qty_bids_c_l_IOTXUSDT = data['B'] 
	price_asks_c_l_IOTXUSDT = data['a'] 
	qty_asks_c_l_IOTXUSDT = data['A'] 

	global symbol_g_IOTXUSDT 
	global price_bids_g_IOTXUSDT 
	global qty_bids_g_IOTXUSDT 
	global price_asks_g_IOTXUSDT 
	global qty_asks_g_IOTXUSDT 

	symbol_g_IOTXUSDT = symbol_c_l_IOTXUSDT 
	price_bids_g_IOTXUSDT = Decimal(price_bids_c_l_IOTXUSDT) 
	qty_bids_g_IOTXUSDT = Decimal(qty_bids_c_l_IOTXUSDT) 
	price_asks_g_IOTXUSDT = Decimal(price_asks_c_l_IOTXUSDT) 
	qty_asks_g_IOTXUSDT = Decimal(qty_asks_c_l_IOTXUSDT) 


def loop_IOTXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/iotxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IOTXUSDT) 
	ws.run_forever() 


Thread(target=loop_IOTXUSDT).start() 
symbol_g_RLCUSDT = 'RLCUSDT' 
price_bids_g_RLCUSDT = Decimal('0.0') 
qty_bids_g_RLCUSDT = Decimal('0.0') 
price_asks_g_RLCUSDT = Decimal('0.0') 
qty_asks_g_RLCUSDT = Decimal('0.0') 
stepSize_g_RLCUSDT = Decimal('0.1') 


def on_message_RLCUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RLCUSDT = 'RLCUSDT' 
	price_bids_c_l_RLCUSDT = data['b'] 
	qty_bids_c_l_RLCUSDT = data['B'] 
	price_asks_c_l_RLCUSDT = data['a'] 
	qty_asks_c_l_RLCUSDT = data['A'] 

	global symbol_g_RLCUSDT 
	global price_bids_g_RLCUSDT 
	global qty_bids_g_RLCUSDT 
	global price_asks_g_RLCUSDT 
	global qty_asks_g_RLCUSDT 

	symbol_g_RLCUSDT = symbol_c_l_RLCUSDT 
	price_bids_g_RLCUSDT = Decimal(price_bids_c_l_RLCUSDT) 
	qty_bids_g_RLCUSDT = Decimal(qty_bids_c_l_RLCUSDT) 
	price_asks_g_RLCUSDT = Decimal(price_asks_c_l_RLCUSDT) 
	qty_asks_g_RLCUSDT = Decimal(qty_asks_c_l_RLCUSDT) 


def loop_RLCUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rlcusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RLCUSDT) 
	ws.run_forever() 


Thread(target=loop_RLCUSDT).start() 
symbol_g_CTXCUSDT = 'CTXCUSDT' 
price_bids_g_CTXCUSDT = Decimal('0.0') 
qty_bids_g_CTXCUSDT = Decimal('0.0') 
price_asks_g_CTXCUSDT = Decimal('0.0') 
qty_asks_g_CTXCUSDT = Decimal('0.0') 
stepSize_g_CTXCUSDT = Decimal('1.0') 


def on_message_CTXCUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CTXCUSDT = 'CTXCUSDT' 
	price_bids_c_l_CTXCUSDT = data['b'] 
	qty_bids_c_l_CTXCUSDT = data['B'] 
	price_asks_c_l_CTXCUSDT = data['a'] 
	qty_asks_c_l_CTXCUSDT = data['A'] 

	global symbol_g_CTXCUSDT 
	global price_bids_g_CTXCUSDT 
	global qty_bids_g_CTXCUSDT 
	global price_asks_g_CTXCUSDT 
	global qty_asks_g_CTXCUSDT 

	symbol_g_CTXCUSDT = symbol_c_l_CTXCUSDT 
	price_bids_g_CTXCUSDT = Decimal(price_bids_c_l_CTXCUSDT) 
	qty_bids_g_CTXCUSDT = Decimal(qty_bids_c_l_CTXCUSDT) 
	price_asks_g_CTXCUSDT = Decimal(price_asks_c_l_CTXCUSDT) 
	qty_asks_g_CTXCUSDT = Decimal(qty_asks_c_l_CTXCUSDT) 


def loop_CTXCUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ctxcusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CTXCUSDT) 
	ws.run_forever() 


Thread(target=loop_CTXCUSDT).start() 
symbol_g_BCHUSDT = 'BCHUSDT' 
price_bids_g_BCHUSDT = Decimal('0.0') 
qty_bids_g_BCHUSDT = Decimal('0.0') 
price_asks_g_BCHUSDT = Decimal('0.0') 
qty_asks_g_BCHUSDT = Decimal('0.0') 
stepSize_g_BCHUSDT = Decimal('0.001') 


def on_message_BCHUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BCHUSDT = 'BCHUSDT' 
	price_bids_c_l_BCHUSDT = data['b'] 
	qty_bids_c_l_BCHUSDT = data['B'] 
	price_asks_c_l_BCHUSDT = data['a'] 
	qty_asks_c_l_BCHUSDT = data['A'] 

	global symbol_g_BCHUSDT 
	global price_bids_g_BCHUSDT 
	global qty_bids_g_BCHUSDT 
	global price_asks_g_BCHUSDT 
	global qty_asks_g_BCHUSDT 

	symbol_g_BCHUSDT = symbol_c_l_BCHUSDT 
	price_bids_g_BCHUSDT = Decimal(price_bids_c_l_BCHUSDT) 
	qty_bids_g_BCHUSDT = Decimal(qty_bids_c_l_BCHUSDT) 
	price_asks_g_BCHUSDT = Decimal(price_asks_c_l_BCHUSDT) 
	qty_asks_g_BCHUSDT = Decimal(qty_asks_c_l_BCHUSDT) 


def loop_BCHUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bchusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BCHUSDT) 
	ws.run_forever() 


Thread(target=loop_BCHUSDT).start() 
symbol_g_TROYUSDT = 'TROYUSDT' 
price_bids_g_TROYUSDT = Decimal('0.0') 
qty_bids_g_TROYUSDT = Decimal('0.0') 
price_asks_g_TROYUSDT = Decimal('0.0') 
qty_asks_g_TROYUSDT = Decimal('0.0') 
stepSize_g_TROYUSDT = Decimal('1.0') 


def on_message_TROYUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TROYUSDT = 'TROYUSDT' 
	price_bids_c_l_TROYUSDT = data['b'] 
	qty_bids_c_l_TROYUSDT = data['B'] 
	price_asks_c_l_TROYUSDT = data['a'] 
	qty_asks_c_l_TROYUSDT = data['A'] 

	global symbol_g_TROYUSDT 
	global price_bids_g_TROYUSDT 
	global qty_bids_g_TROYUSDT 
	global price_asks_g_TROYUSDT 
	global qty_asks_g_TROYUSDT 

	symbol_g_TROYUSDT = symbol_c_l_TROYUSDT 
	price_bids_g_TROYUSDT = Decimal(price_bids_c_l_TROYUSDT) 
	qty_bids_g_TROYUSDT = Decimal(qty_bids_c_l_TROYUSDT) 
	price_asks_g_TROYUSDT = Decimal(price_asks_c_l_TROYUSDT) 
	qty_asks_g_TROYUSDT = Decimal(qty_asks_c_l_TROYUSDT) 


def loop_TROYUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/troyusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TROYUSDT) 
	ws.run_forever() 


Thread(target=loop_TROYUSDT).start() 
symbol_g_VITEUSDT = 'VITEUSDT' 
price_bids_g_VITEUSDT = Decimal('0.0') 
qty_bids_g_VITEUSDT = Decimal('0.0') 
price_asks_g_VITEUSDT = Decimal('0.0') 
qty_asks_g_VITEUSDT = Decimal('0.0') 
stepSize_g_VITEUSDT = Decimal('0.1') 


def on_message_VITEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VITEUSDT = 'VITEUSDT' 
	price_bids_c_l_VITEUSDT = data['b'] 
	qty_bids_c_l_VITEUSDT = data['B'] 
	price_asks_c_l_VITEUSDT = data['a'] 
	qty_asks_c_l_VITEUSDT = data['A'] 

	global symbol_g_VITEUSDT 
	global price_bids_g_VITEUSDT 
	global qty_bids_g_VITEUSDT 
	global price_asks_g_VITEUSDT 
	global qty_asks_g_VITEUSDT 

	symbol_g_VITEUSDT = symbol_c_l_VITEUSDT 
	price_bids_g_VITEUSDT = Decimal(price_bids_c_l_VITEUSDT) 
	qty_bids_g_VITEUSDT = Decimal(qty_bids_c_l_VITEUSDT) 
	price_asks_g_VITEUSDT = Decimal(price_asks_c_l_VITEUSDT) 
	qty_asks_g_VITEUSDT = Decimal(qty_asks_c_l_VITEUSDT) 


def loop_VITEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/viteusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VITEUSDT) 
	ws.run_forever() 


Thread(target=loop_VITEUSDT).start() 
symbol_g_EURUSDT = 'EURUSDT' 
price_bids_g_EURUSDT = Decimal('0.0') 
qty_bids_g_EURUSDT = Decimal('0.0') 
price_asks_g_EURUSDT = Decimal('0.0') 
qty_asks_g_EURUSDT = Decimal('0.0') 
stepSize_g_EURUSDT = Decimal('0.1') 


def on_message_EURUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EURUSDT = 'EURUSDT' 
	price_bids_c_l_EURUSDT = data['b'] 
	qty_bids_c_l_EURUSDT = data['B'] 
	price_asks_c_l_EURUSDT = data['a'] 
	qty_asks_c_l_EURUSDT = data['A'] 

	global symbol_g_EURUSDT 
	global price_bids_g_EURUSDT 
	global qty_bids_g_EURUSDT 
	global price_asks_g_EURUSDT 
	global qty_asks_g_EURUSDT 

	symbol_g_EURUSDT = symbol_c_l_EURUSDT 
	price_bids_g_EURUSDT = Decimal(price_bids_c_l_EURUSDT) 
	qty_bids_g_EURUSDT = Decimal(qty_bids_c_l_EURUSDT) 
	price_asks_g_EURUSDT = Decimal(price_asks_c_l_EURUSDT) 
	qty_asks_g_EURUSDT = Decimal(qty_asks_c_l_EURUSDT) 


def loop_EURUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/eurusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EURUSDT) 
	ws.run_forever() 


Thread(target=loop_EURUSDT).start() 
symbol_g_OGNUSDT = 'OGNUSDT' 
price_bids_g_OGNUSDT = Decimal('0.0') 
qty_bids_g_OGNUSDT = Decimal('0.0') 
price_asks_g_OGNUSDT = Decimal('0.0') 
qty_asks_g_OGNUSDT = Decimal('0.0') 
stepSize_g_OGNUSDT = Decimal('1.0') 


def on_message_OGNUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OGNUSDT = 'OGNUSDT' 
	price_bids_c_l_OGNUSDT = data['b'] 
	qty_bids_c_l_OGNUSDT = data['B'] 
	price_asks_c_l_OGNUSDT = data['a'] 
	qty_asks_c_l_OGNUSDT = data['A'] 

	global symbol_g_OGNUSDT 
	global price_bids_g_OGNUSDT 
	global qty_bids_g_OGNUSDT 
	global price_asks_g_OGNUSDT 
	global qty_asks_g_OGNUSDT 

	symbol_g_OGNUSDT = symbol_c_l_OGNUSDT 
	price_bids_g_OGNUSDT = Decimal(price_bids_c_l_OGNUSDT) 
	qty_bids_g_OGNUSDT = Decimal(qty_bids_c_l_OGNUSDT) 
	price_asks_g_OGNUSDT = Decimal(price_asks_c_l_OGNUSDT) 
	qty_asks_g_OGNUSDT = Decimal(qty_asks_c_l_OGNUSDT) 


def loop_OGNUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ognusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OGNUSDT) 
	ws.run_forever() 


Thread(target=loop_OGNUSDT).start() 
symbol_g_DREPUSDT = 'DREPUSDT' 
price_bids_g_DREPUSDT = Decimal('0.0') 
qty_bids_g_DREPUSDT = Decimal('0.0') 
price_asks_g_DREPUSDT = Decimal('0.0') 
qty_asks_g_DREPUSDT = Decimal('0.0') 
stepSize_g_DREPUSDT = Decimal('1.0') 


def on_message_DREPUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DREPUSDT = 'DREPUSDT' 
	price_bids_c_l_DREPUSDT = data['b'] 
	qty_bids_c_l_DREPUSDT = data['B'] 
	price_asks_c_l_DREPUSDT = data['a'] 
	qty_asks_c_l_DREPUSDT = data['A'] 

	global symbol_g_DREPUSDT 
	global price_bids_g_DREPUSDT 
	global qty_bids_g_DREPUSDT 
	global price_asks_g_DREPUSDT 
	global qty_asks_g_DREPUSDT 

	symbol_g_DREPUSDT = symbol_c_l_DREPUSDT 
	price_bids_g_DREPUSDT = Decimal(price_bids_c_l_DREPUSDT) 
	qty_bids_g_DREPUSDT = Decimal(qty_bids_c_l_DREPUSDT) 
	price_asks_g_DREPUSDT = Decimal(price_asks_c_l_DREPUSDT) 
	qty_asks_g_DREPUSDT = Decimal(qty_asks_c_l_DREPUSDT) 


def loop_DREPUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/drepusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DREPUSDT) 
	ws.run_forever() 


Thread(target=loop_DREPUSDT).start() 
symbol_g_WRXUSDT = 'WRXUSDT' 
price_bids_g_WRXUSDT = Decimal('0.0') 
qty_bids_g_WRXUSDT = Decimal('0.0') 
price_asks_g_WRXUSDT = Decimal('0.0') 
qty_asks_g_WRXUSDT = Decimal('0.0') 
stepSize_g_WRXUSDT = Decimal('0.1') 


def on_message_WRXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WRXUSDT = 'WRXUSDT' 
	price_bids_c_l_WRXUSDT = data['b'] 
	qty_bids_c_l_WRXUSDT = data['B'] 
	price_asks_c_l_WRXUSDT = data['a'] 
	qty_asks_c_l_WRXUSDT = data['A'] 

	global symbol_g_WRXUSDT 
	global price_bids_g_WRXUSDT 
	global qty_bids_g_WRXUSDT 
	global price_asks_g_WRXUSDT 
	global qty_asks_g_WRXUSDT 

	symbol_g_WRXUSDT = symbol_c_l_WRXUSDT 
	price_bids_g_WRXUSDT = Decimal(price_bids_c_l_WRXUSDT) 
	qty_bids_g_WRXUSDT = Decimal(qty_bids_c_l_WRXUSDT) 
	price_asks_g_WRXUSDT = Decimal(price_asks_c_l_WRXUSDT) 
	qty_asks_g_WRXUSDT = Decimal(qty_asks_c_l_WRXUSDT) 


def loop_WRXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wrxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WRXUSDT) 
	ws.run_forever() 


Thread(target=loop_WRXUSDT).start() 
symbol_g_BTSUSDT = 'BTSUSDT' 
price_bids_g_BTSUSDT = Decimal('0.0') 
qty_bids_g_BTSUSDT = Decimal('0.0') 
price_asks_g_BTSUSDT = Decimal('0.0') 
qty_asks_g_BTSUSDT = Decimal('0.0') 
stepSize_g_BTSUSDT = Decimal('0.1') 


def on_message_BTSUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTSUSDT = 'BTSUSDT' 
	price_bids_c_l_BTSUSDT = data['b'] 
	qty_bids_c_l_BTSUSDT = data['B'] 
	price_asks_c_l_BTSUSDT = data['a'] 
	qty_asks_c_l_BTSUSDT = data['A'] 

	global symbol_g_BTSUSDT 
	global price_bids_g_BTSUSDT 
	global qty_bids_g_BTSUSDT 
	global price_asks_g_BTSUSDT 
	global qty_asks_g_BTSUSDT 

	symbol_g_BTSUSDT = symbol_c_l_BTSUSDT 
	price_bids_g_BTSUSDT = Decimal(price_bids_c_l_BTSUSDT) 
	qty_bids_g_BTSUSDT = Decimal(qty_bids_c_l_BTSUSDT) 
	price_asks_g_BTSUSDT = Decimal(price_asks_c_l_BTSUSDT) 
	qty_asks_g_BTSUSDT = Decimal(qty_asks_c_l_BTSUSDT) 


def loop_BTSUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/btsusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTSUSDT) 
	ws.run_forever() 


Thread(target=loop_BTSUSDT).start() 
symbol_g_LSKUSDT = 'LSKUSDT' 
price_bids_g_LSKUSDT = Decimal('0.0') 
qty_bids_g_LSKUSDT = Decimal('0.0') 
price_asks_g_LSKUSDT = Decimal('0.0') 
qty_asks_g_LSKUSDT = Decimal('0.0') 
stepSize_g_LSKUSDT = Decimal('0.1') 


def on_message_LSKUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LSKUSDT = 'LSKUSDT' 
	price_bids_c_l_LSKUSDT = data['b'] 
	qty_bids_c_l_LSKUSDT = data['B'] 
	price_asks_c_l_LSKUSDT = data['a'] 
	qty_asks_c_l_LSKUSDT = data['A'] 

	global symbol_g_LSKUSDT 
	global price_bids_g_LSKUSDT 
	global qty_bids_g_LSKUSDT 
	global price_asks_g_LSKUSDT 
	global qty_asks_g_LSKUSDT 

	symbol_g_LSKUSDT = symbol_c_l_LSKUSDT 
	price_bids_g_LSKUSDT = Decimal(price_bids_c_l_LSKUSDT) 
	qty_bids_g_LSKUSDT = Decimal(qty_bids_c_l_LSKUSDT) 
	price_asks_g_LSKUSDT = Decimal(price_asks_c_l_LSKUSDT) 
	qty_asks_g_LSKUSDT = Decimal(qty_asks_c_l_LSKUSDT) 


def loop_LSKUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lskusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LSKUSDT) 
	ws.run_forever() 


Thread(target=loop_LSKUSDT).start() 
symbol_g_BNTUSDT = 'BNTUSDT' 
price_bids_g_BNTUSDT = Decimal('0.0') 
qty_bids_g_BNTUSDT = Decimal('0.0') 
price_asks_g_BNTUSDT = Decimal('0.0') 
qty_asks_g_BNTUSDT = Decimal('0.0') 
stepSize_g_BNTUSDT = Decimal('0.1') 


def on_message_BNTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNTUSDT = 'BNTUSDT' 
	price_bids_c_l_BNTUSDT = data['b'] 
	qty_bids_c_l_BNTUSDT = data['B'] 
	price_asks_c_l_BNTUSDT = data['a'] 
	qty_asks_c_l_BNTUSDT = data['A'] 

	global symbol_g_BNTUSDT 
	global price_bids_g_BNTUSDT 
	global qty_bids_g_BNTUSDT 
	global price_asks_g_BNTUSDT 
	global qty_asks_g_BNTUSDT 

	symbol_g_BNTUSDT = symbol_c_l_BNTUSDT 
	price_bids_g_BNTUSDT = Decimal(price_bids_c_l_BNTUSDT) 
	qty_bids_g_BNTUSDT = Decimal(qty_bids_c_l_BNTUSDT) 
	price_asks_g_BNTUSDT = Decimal(price_asks_c_l_BNTUSDT) 
	qty_asks_g_BNTUSDT = Decimal(qty_asks_c_l_BNTUSDT) 


def loop_BNTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bntusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNTUSDT) 
	ws.run_forever() 


Thread(target=loop_BNTUSDT).start() 
symbol_g_LTOUSDT = 'LTOUSDT' 
price_bids_g_LTOUSDT = Decimal('0.0') 
qty_bids_g_LTOUSDT = Decimal('0.0') 
price_asks_g_LTOUSDT = Decimal('0.0') 
qty_asks_g_LTOUSDT = Decimal('0.0') 
stepSize_g_LTOUSDT = Decimal('1.0') 


def on_message_LTOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LTOUSDT = 'LTOUSDT' 
	price_bids_c_l_LTOUSDT = data['b'] 
	qty_bids_c_l_LTOUSDT = data['B'] 
	price_asks_c_l_LTOUSDT = data['a'] 
	qty_asks_c_l_LTOUSDT = data['A'] 

	global symbol_g_LTOUSDT 
	global price_bids_g_LTOUSDT 
	global qty_bids_g_LTOUSDT 
	global price_asks_g_LTOUSDT 
	global qty_asks_g_LTOUSDT 

	symbol_g_LTOUSDT = symbol_c_l_LTOUSDT 
	price_bids_g_LTOUSDT = Decimal(price_bids_c_l_LTOUSDT) 
	qty_bids_g_LTOUSDT = Decimal(qty_bids_c_l_LTOUSDT) 
	price_asks_g_LTOUSDT = Decimal(price_asks_c_l_LTOUSDT) 
	qty_asks_g_LTOUSDT = Decimal(qty_asks_c_l_LTOUSDT) 


def loop_LTOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ltousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LTOUSDT) 
	ws.run_forever() 


Thread(target=loop_LTOUSDT).start() 
symbol_g_AIONUSDT = 'AIONUSDT' 
price_bids_g_AIONUSDT = Decimal('0.0') 
qty_bids_g_AIONUSDT = Decimal('0.0') 
price_asks_g_AIONUSDT = Decimal('0.0') 
qty_asks_g_AIONUSDT = Decimal('0.0') 
stepSize_g_AIONUSDT = Decimal('1.0') 


def on_message_AIONUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AIONUSDT = 'AIONUSDT' 
	price_bids_c_l_AIONUSDT = data['b'] 
	qty_bids_c_l_AIONUSDT = data['B'] 
	price_asks_c_l_AIONUSDT = data['a'] 
	qty_asks_c_l_AIONUSDT = data['A'] 

	global symbol_g_AIONUSDT 
	global price_bids_g_AIONUSDT 
	global qty_bids_g_AIONUSDT 
	global price_asks_g_AIONUSDT 
	global qty_asks_g_AIONUSDT 

	symbol_g_AIONUSDT = symbol_c_l_AIONUSDT 
	price_bids_g_AIONUSDT = Decimal(price_bids_c_l_AIONUSDT) 
	qty_bids_g_AIONUSDT = Decimal(qty_bids_c_l_AIONUSDT) 
	price_asks_g_AIONUSDT = Decimal(price_asks_c_l_AIONUSDT) 
	qty_asks_g_AIONUSDT = Decimal(qty_asks_c_l_AIONUSDT) 


def loop_AIONUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/aionusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AIONUSDT) 
	ws.run_forever() 


Thread(target=loop_AIONUSDT).start() 
symbol_g_MBLUSDT = 'MBLUSDT' 
price_bids_g_MBLUSDT = Decimal('0.0') 
qty_bids_g_MBLUSDT = Decimal('0.0') 
price_asks_g_MBLUSDT = Decimal('0.0') 
qty_asks_g_MBLUSDT = Decimal('0.0') 
stepSize_g_MBLUSDT = Decimal('1.0') 


def on_message_MBLUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MBLUSDT = 'MBLUSDT' 
	price_bids_c_l_MBLUSDT = data['b'] 
	qty_bids_c_l_MBLUSDT = data['B'] 
	price_asks_c_l_MBLUSDT = data['a'] 
	qty_asks_c_l_MBLUSDT = data['A'] 

	global symbol_g_MBLUSDT 
	global price_bids_g_MBLUSDT 
	global qty_bids_g_MBLUSDT 
	global price_asks_g_MBLUSDT 
	global qty_asks_g_MBLUSDT 

	symbol_g_MBLUSDT = symbol_c_l_MBLUSDT 
	price_bids_g_MBLUSDT = Decimal(price_bids_c_l_MBLUSDT) 
	qty_bids_g_MBLUSDT = Decimal(qty_bids_c_l_MBLUSDT) 
	price_asks_g_MBLUSDT = Decimal(price_asks_c_l_MBLUSDT) 
	qty_asks_g_MBLUSDT = Decimal(qty_asks_c_l_MBLUSDT) 


def loop_MBLUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mblusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MBLUSDT) 
	ws.run_forever() 


Thread(target=loop_MBLUSDT).start() 
symbol_g_COTIUSDT = 'COTIUSDT' 
price_bids_g_COTIUSDT = Decimal('0.0') 
qty_bids_g_COTIUSDT = Decimal('0.0') 
price_asks_g_COTIUSDT = Decimal('0.0') 
qty_asks_g_COTIUSDT = Decimal('0.0') 
stepSize_g_COTIUSDT = Decimal('1.0') 


def on_message_COTIUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COTIUSDT = 'COTIUSDT' 
	price_bids_c_l_COTIUSDT = data['b'] 
	qty_bids_c_l_COTIUSDT = data['B'] 
	price_asks_c_l_COTIUSDT = data['a'] 
	qty_asks_c_l_COTIUSDT = data['A'] 

	global symbol_g_COTIUSDT 
	global price_bids_g_COTIUSDT 
	global qty_bids_g_COTIUSDT 
	global price_asks_g_COTIUSDT 
	global qty_asks_g_COTIUSDT 

	symbol_g_COTIUSDT = symbol_c_l_COTIUSDT 
	price_bids_g_COTIUSDT = Decimal(price_bids_c_l_COTIUSDT) 
	qty_bids_g_COTIUSDT = Decimal(qty_bids_c_l_COTIUSDT) 
	price_asks_g_COTIUSDT = Decimal(price_asks_c_l_COTIUSDT) 
	qty_asks_g_COTIUSDT = Decimal(qty_asks_c_l_COTIUSDT) 


def loop_COTIUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cotiusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COTIUSDT) 
	ws.run_forever() 


Thread(target=loop_COTIUSDT).start() 
symbol_g_STPTUSDT = 'STPTUSDT' 
price_bids_g_STPTUSDT = Decimal('0.0') 
qty_bids_g_STPTUSDT = Decimal('0.0') 
price_asks_g_STPTUSDT = Decimal('0.0') 
qty_asks_g_STPTUSDT = Decimal('0.0') 
stepSize_g_STPTUSDT = Decimal('0.1') 


def on_message_STPTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STPTUSDT = 'STPTUSDT' 
	price_bids_c_l_STPTUSDT = data['b'] 
	qty_bids_c_l_STPTUSDT = data['B'] 
	price_asks_c_l_STPTUSDT = data['a'] 
	qty_asks_c_l_STPTUSDT = data['A'] 

	global symbol_g_STPTUSDT 
	global price_bids_g_STPTUSDT 
	global qty_bids_g_STPTUSDT 
	global price_asks_g_STPTUSDT 
	global qty_asks_g_STPTUSDT 

	symbol_g_STPTUSDT = symbol_c_l_STPTUSDT 
	price_bids_g_STPTUSDT = Decimal(price_bids_c_l_STPTUSDT) 
	qty_bids_g_STPTUSDT = Decimal(qty_bids_c_l_STPTUSDT) 
	price_asks_g_STPTUSDT = Decimal(price_asks_c_l_STPTUSDT) 
	qty_asks_g_STPTUSDT = Decimal(qty_asks_c_l_STPTUSDT) 


def loop_STPTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/stptusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STPTUSDT) 
	ws.run_forever() 


Thread(target=loop_STPTUSDT).start() 
symbol_g_WTCUSDT = 'WTCUSDT' 
price_bids_g_WTCUSDT = Decimal('0.0') 
qty_bids_g_WTCUSDT = Decimal('0.0') 
price_asks_g_WTCUSDT = Decimal('0.0') 
qty_asks_g_WTCUSDT = Decimal('0.0') 
stepSize_g_WTCUSDT = Decimal('1.0') 


def on_message_WTCUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WTCUSDT = 'WTCUSDT' 
	price_bids_c_l_WTCUSDT = data['b'] 
	qty_bids_c_l_WTCUSDT = data['B'] 
	price_asks_c_l_WTCUSDT = data['a'] 
	qty_asks_c_l_WTCUSDT = data['A'] 

	global symbol_g_WTCUSDT 
	global price_bids_g_WTCUSDT 
	global qty_bids_g_WTCUSDT 
	global price_asks_g_WTCUSDT 
	global qty_asks_g_WTCUSDT 

	symbol_g_WTCUSDT = symbol_c_l_WTCUSDT 
	price_bids_g_WTCUSDT = Decimal(price_bids_c_l_WTCUSDT) 
	qty_bids_g_WTCUSDT = Decimal(qty_bids_c_l_WTCUSDT) 
	price_asks_g_WTCUSDT = Decimal(price_asks_c_l_WTCUSDT) 
	qty_asks_g_WTCUSDT = Decimal(qty_asks_c_l_WTCUSDT) 


def loop_WTCUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wtcusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WTCUSDT) 
	ws.run_forever() 


Thread(target=loop_WTCUSDT).start() 
symbol_g_DATAUSDT = 'DATAUSDT' 
price_bids_g_DATAUSDT = Decimal('0.0') 
qty_bids_g_DATAUSDT = Decimal('0.0') 
price_asks_g_DATAUSDT = Decimal('0.0') 
qty_asks_g_DATAUSDT = Decimal('0.0') 
stepSize_g_DATAUSDT = Decimal('0.1') 


def on_message_DATAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DATAUSDT = 'DATAUSDT' 
	price_bids_c_l_DATAUSDT = data['b'] 
	qty_bids_c_l_DATAUSDT = data['B'] 
	price_asks_c_l_DATAUSDT = data['a'] 
	qty_asks_c_l_DATAUSDT = data['A'] 

	global symbol_g_DATAUSDT 
	global price_bids_g_DATAUSDT 
	global qty_bids_g_DATAUSDT 
	global price_asks_g_DATAUSDT 
	global qty_asks_g_DATAUSDT 

	symbol_g_DATAUSDT = symbol_c_l_DATAUSDT 
	price_bids_g_DATAUSDT = Decimal(price_bids_c_l_DATAUSDT) 
	qty_bids_g_DATAUSDT = Decimal(qty_bids_c_l_DATAUSDT) 
	price_asks_g_DATAUSDT = Decimal(price_asks_c_l_DATAUSDT) 
	qty_asks_g_DATAUSDT = Decimal(qty_asks_c_l_DATAUSDT) 


def loop_DATAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/datausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DATAUSDT) 
	ws.run_forever() 


Thread(target=loop_DATAUSDT).start() 
symbol_g_CTSIUSDT = 'CTSIUSDT' 
price_bids_g_CTSIUSDT = Decimal('0.0') 
qty_bids_g_CTSIUSDT = Decimal('0.0') 
price_asks_g_CTSIUSDT = Decimal('0.0') 
qty_asks_g_CTSIUSDT = Decimal('0.0') 
stepSize_g_CTSIUSDT = Decimal('1.0') 


def on_message_CTSIUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CTSIUSDT = 'CTSIUSDT' 
	price_bids_c_l_CTSIUSDT = data['b'] 
	qty_bids_c_l_CTSIUSDT = data['B'] 
	price_asks_c_l_CTSIUSDT = data['a'] 
	qty_asks_c_l_CTSIUSDT = data['A'] 

	global symbol_g_CTSIUSDT 
	global price_bids_g_CTSIUSDT 
	global qty_bids_g_CTSIUSDT 
	global price_asks_g_CTSIUSDT 
	global qty_asks_g_CTSIUSDT 

	symbol_g_CTSIUSDT = symbol_c_l_CTSIUSDT 
	price_bids_g_CTSIUSDT = Decimal(price_bids_c_l_CTSIUSDT) 
	qty_bids_g_CTSIUSDT = Decimal(qty_bids_c_l_CTSIUSDT) 
	price_asks_g_CTSIUSDT = Decimal(price_asks_c_l_CTSIUSDT) 
	qty_asks_g_CTSIUSDT = Decimal(qty_asks_c_l_CTSIUSDT) 


def loop_CTSIUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ctsiusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CTSIUSDT) 
	ws.run_forever() 


Thread(target=loop_CTSIUSDT).start() 
symbol_g_HIVEUSDT = 'HIVEUSDT' 
price_bids_g_HIVEUSDT = Decimal('0.0') 
qty_bids_g_HIVEUSDT = Decimal('0.0') 
price_asks_g_HIVEUSDT = Decimal('0.0') 
qty_asks_g_HIVEUSDT = Decimal('0.0') 
stepSize_g_HIVEUSDT = Decimal('1.0') 


def on_message_HIVEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HIVEUSDT = 'HIVEUSDT' 
	price_bids_c_l_HIVEUSDT = data['b'] 
	qty_bids_c_l_HIVEUSDT = data['B'] 
	price_asks_c_l_HIVEUSDT = data['a'] 
	qty_asks_c_l_HIVEUSDT = data['A'] 

	global symbol_g_HIVEUSDT 
	global price_bids_g_HIVEUSDT 
	global qty_bids_g_HIVEUSDT 
	global price_asks_g_HIVEUSDT 
	global qty_asks_g_HIVEUSDT 

	symbol_g_HIVEUSDT = symbol_c_l_HIVEUSDT 
	price_bids_g_HIVEUSDT = Decimal(price_bids_c_l_HIVEUSDT) 
	qty_bids_g_HIVEUSDT = Decimal(qty_bids_c_l_HIVEUSDT) 
	price_asks_g_HIVEUSDT = Decimal(price_asks_c_l_HIVEUSDT) 
	qty_asks_g_HIVEUSDT = Decimal(qty_asks_c_l_HIVEUSDT) 


def loop_HIVEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hiveusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HIVEUSDT) 
	ws.run_forever() 


Thread(target=loop_HIVEUSDT).start() 
symbol_g_CHRUSDT = 'CHRUSDT' 
price_bids_g_CHRUSDT = Decimal('0.0') 
qty_bids_g_CHRUSDT = Decimal('0.0') 
price_asks_g_CHRUSDT = Decimal('0.0') 
qty_asks_g_CHRUSDT = Decimal('0.0') 
stepSize_g_CHRUSDT = Decimal('1.0') 


def on_message_CHRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHRUSDT = 'CHRUSDT' 
	price_bids_c_l_CHRUSDT = data['b'] 
	qty_bids_c_l_CHRUSDT = data['B'] 
	price_asks_c_l_CHRUSDT = data['a'] 
	qty_asks_c_l_CHRUSDT = data['A'] 

	global symbol_g_CHRUSDT 
	global price_bids_g_CHRUSDT 
	global qty_bids_g_CHRUSDT 
	global price_asks_g_CHRUSDT 
	global qty_asks_g_CHRUSDT 

	symbol_g_CHRUSDT = symbol_c_l_CHRUSDT 
	price_bids_g_CHRUSDT = Decimal(price_bids_c_l_CHRUSDT) 
	qty_bids_g_CHRUSDT = Decimal(qty_bids_c_l_CHRUSDT) 
	price_asks_g_CHRUSDT = Decimal(price_asks_c_l_CHRUSDT) 
	qty_asks_g_CHRUSDT = Decimal(qty_asks_c_l_CHRUSDT) 


def loop_CHRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHRUSDT) 
	ws.run_forever() 


Thread(target=loop_CHRUSDT).start() 
symbol_g_ARDRUSDT = 'ARDRUSDT' 
price_bids_g_ARDRUSDT = Decimal('0.0') 
qty_bids_g_ARDRUSDT = Decimal('0.0') 
price_asks_g_ARDRUSDT = Decimal('0.0') 
qty_asks_g_ARDRUSDT = Decimal('0.0') 
stepSize_g_ARDRUSDT = Decimal('1.0') 


def on_message_ARDRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ARDRUSDT = 'ARDRUSDT' 
	price_bids_c_l_ARDRUSDT = data['b'] 
	qty_bids_c_l_ARDRUSDT = data['B'] 
	price_asks_c_l_ARDRUSDT = data['a'] 
	qty_asks_c_l_ARDRUSDT = data['A'] 

	global symbol_g_ARDRUSDT 
	global price_bids_g_ARDRUSDT 
	global qty_bids_g_ARDRUSDT 
	global price_asks_g_ARDRUSDT 
	global qty_asks_g_ARDRUSDT 

	symbol_g_ARDRUSDT = symbol_c_l_ARDRUSDT 
	price_bids_g_ARDRUSDT = Decimal(price_bids_c_l_ARDRUSDT) 
	qty_bids_g_ARDRUSDT = Decimal(qty_bids_c_l_ARDRUSDT) 
	price_asks_g_ARDRUSDT = Decimal(price_asks_c_l_ARDRUSDT) 
	qty_asks_g_ARDRUSDT = Decimal(qty_asks_c_l_ARDRUSDT) 


def loop_ARDRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ardrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ARDRUSDT) 
	ws.run_forever() 


Thread(target=loop_ARDRUSDT).start() 
symbol_g_MDTUSDT = 'MDTUSDT' 
price_bids_g_MDTUSDT = Decimal('0.0') 
qty_bids_g_MDTUSDT = Decimal('0.0') 
price_asks_g_MDTUSDT = Decimal('0.0') 
qty_asks_g_MDTUSDT = Decimal('0.0') 
stepSize_g_MDTUSDT = Decimal('0.1') 


def on_message_MDTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MDTUSDT = 'MDTUSDT' 
	price_bids_c_l_MDTUSDT = data['b'] 
	qty_bids_c_l_MDTUSDT = data['B'] 
	price_asks_c_l_MDTUSDT = data['a'] 
	qty_asks_c_l_MDTUSDT = data['A'] 

	global symbol_g_MDTUSDT 
	global price_bids_g_MDTUSDT 
	global qty_bids_g_MDTUSDT 
	global price_asks_g_MDTUSDT 
	global qty_asks_g_MDTUSDT 

	symbol_g_MDTUSDT = symbol_c_l_MDTUSDT 
	price_bids_g_MDTUSDT = Decimal(price_bids_c_l_MDTUSDT) 
	qty_bids_g_MDTUSDT = Decimal(qty_bids_c_l_MDTUSDT) 
	price_asks_g_MDTUSDT = Decimal(price_asks_c_l_MDTUSDT) 
	qty_asks_g_MDTUSDT = Decimal(qty_asks_c_l_MDTUSDT) 


def loop_MDTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mdtusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MDTUSDT) 
	ws.run_forever() 


Thread(target=loop_MDTUSDT).start() 
symbol_g_STMXUSDT = 'STMXUSDT' 
price_bids_g_STMXUSDT = Decimal('0.0') 
qty_bids_g_STMXUSDT = Decimal('0.0') 
price_asks_g_STMXUSDT = Decimal('0.0') 
qty_asks_g_STMXUSDT = Decimal('0.0') 
stepSize_g_STMXUSDT = Decimal('1.0') 


def on_message_STMXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STMXUSDT = 'STMXUSDT' 
	price_bids_c_l_STMXUSDT = data['b'] 
	qty_bids_c_l_STMXUSDT = data['B'] 
	price_asks_c_l_STMXUSDT = data['a'] 
	qty_asks_c_l_STMXUSDT = data['A'] 

	global symbol_g_STMXUSDT 
	global price_bids_g_STMXUSDT 
	global qty_bids_g_STMXUSDT 
	global price_asks_g_STMXUSDT 
	global qty_asks_g_STMXUSDT 

	symbol_g_STMXUSDT = symbol_c_l_STMXUSDT 
	price_bids_g_STMXUSDT = Decimal(price_bids_c_l_STMXUSDT) 
	qty_bids_g_STMXUSDT = Decimal(qty_bids_c_l_STMXUSDT) 
	price_asks_g_STMXUSDT = Decimal(price_asks_c_l_STMXUSDT) 
	qty_asks_g_STMXUSDT = Decimal(qty_asks_c_l_STMXUSDT) 


def loop_STMXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/stmxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STMXUSDT) 
	ws.run_forever() 


Thread(target=loop_STMXUSDT).start() 
symbol_g_KNCUSDT = 'KNCUSDT' 
price_bids_g_KNCUSDT = Decimal('0.0') 
qty_bids_g_KNCUSDT = Decimal('0.0') 
price_asks_g_KNCUSDT = Decimal('0.0') 
qty_asks_g_KNCUSDT = Decimal('0.0') 
stepSize_g_KNCUSDT = Decimal('0.1') 


def on_message_KNCUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KNCUSDT = 'KNCUSDT' 
	price_bids_c_l_KNCUSDT = data['b'] 
	qty_bids_c_l_KNCUSDT = data['B'] 
	price_asks_c_l_KNCUSDT = data['a'] 
	qty_asks_c_l_KNCUSDT = data['A'] 

	global symbol_g_KNCUSDT 
	global price_bids_g_KNCUSDT 
	global qty_bids_g_KNCUSDT 
	global price_asks_g_KNCUSDT 
	global qty_asks_g_KNCUSDT 

	symbol_g_KNCUSDT = symbol_c_l_KNCUSDT 
	price_bids_g_KNCUSDT = Decimal(price_bids_c_l_KNCUSDT) 
	qty_bids_g_KNCUSDT = Decimal(qty_bids_c_l_KNCUSDT) 
	price_asks_g_KNCUSDT = Decimal(price_asks_c_l_KNCUSDT) 
	qty_asks_g_KNCUSDT = Decimal(qty_asks_c_l_KNCUSDT) 


def loop_KNCUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kncusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KNCUSDT) 
	ws.run_forever() 


Thread(target=loop_KNCUSDT).start() 
symbol_g_COMPUSDT = 'COMPUSDT' 
price_bids_g_COMPUSDT = Decimal('0.0') 
qty_bids_g_COMPUSDT = Decimal('0.0') 
price_asks_g_COMPUSDT = Decimal('0.0') 
qty_asks_g_COMPUSDT = Decimal('0.0') 
stepSize_g_COMPUSDT = Decimal('0.001') 


def on_message_COMPUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COMPUSDT = 'COMPUSDT' 
	price_bids_c_l_COMPUSDT = data['b'] 
	qty_bids_c_l_COMPUSDT = data['B'] 
	price_asks_c_l_COMPUSDT = data['a'] 
	qty_asks_c_l_COMPUSDT = data['A'] 

	global symbol_g_COMPUSDT 
	global price_bids_g_COMPUSDT 
	global qty_bids_g_COMPUSDT 
	global price_asks_g_COMPUSDT 
	global qty_asks_g_COMPUSDT 

	symbol_g_COMPUSDT = symbol_c_l_COMPUSDT 
	price_bids_g_COMPUSDT = Decimal(price_bids_c_l_COMPUSDT) 
	qty_bids_g_COMPUSDT = Decimal(qty_bids_c_l_COMPUSDT) 
	price_asks_g_COMPUSDT = Decimal(price_asks_c_l_COMPUSDT) 
	qty_asks_g_COMPUSDT = Decimal(qty_asks_c_l_COMPUSDT) 


def loop_COMPUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/compusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COMPUSDT) 
	ws.run_forever() 


Thread(target=loop_COMPUSDT).start() 
symbol_g_SCUSDT = 'SCUSDT' 
price_bids_g_SCUSDT = Decimal('0.0') 
qty_bids_g_SCUSDT = Decimal('0.0') 
price_asks_g_SCUSDT = Decimal('0.0') 
qty_asks_g_SCUSDT = Decimal('0.0') 
stepSize_g_SCUSDT = Decimal('1.0') 


def on_message_SCUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SCUSDT = 'SCUSDT' 
	price_bids_c_l_SCUSDT = data['b'] 
	qty_bids_c_l_SCUSDT = data['B'] 
	price_asks_c_l_SCUSDT = data['a'] 
	qty_asks_c_l_SCUSDT = data['A'] 

	global symbol_g_SCUSDT 
	global price_bids_g_SCUSDT 
	global qty_bids_g_SCUSDT 
	global price_asks_g_SCUSDT 
	global qty_asks_g_SCUSDT 

	symbol_g_SCUSDT = symbol_c_l_SCUSDT 
	price_bids_g_SCUSDT = Decimal(price_bids_c_l_SCUSDT) 
	qty_bids_g_SCUSDT = Decimal(qty_bids_c_l_SCUSDT) 
	price_asks_g_SCUSDT = Decimal(price_asks_c_l_SCUSDT) 
	qty_asks_g_SCUSDT = Decimal(qty_asks_c_l_SCUSDT) 


def loop_SCUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/scusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SCUSDT) 
	ws.run_forever() 


Thread(target=loop_SCUSDT).start() 
symbol_g_ZENUSDT = 'ZENUSDT' 
price_bids_g_ZENUSDT = Decimal('0.0') 
qty_bids_g_ZENUSDT = Decimal('0.0') 
price_asks_g_ZENUSDT = Decimal('0.0') 
qty_asks_g_ZENUSDT = Decimal('0.0') 
stepSize_g_ZENUSDT = Decimal('0.01') 


def on_message_ZENUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZENUSDT = 'ZENUSDT' 
	price_bids_c_l_ZENUSDT = data['b'] 
	qty_bids_c_l_ZENUSDT = data['B'] 
	price_asks_c_l_ZENUSDT = data['a'] 
	qty_asks_c_l_ZENUSDT = data['A'] 

	global symbol_g_ZENUSDT 
	global price_bids_g_ZENUSDT 
	global qty_bids_g_ZENUSDT 
	global price_asks_g_ZENUSDT 
	global qty_asks_g_ZENUSDT 

	symbol_g_ZENUSDT = symbol_c_l_ZENUSDT 
	price_bids_g_ZENUSDT = Decimal(price_bids_c_l_ZENUSDT) 
	qty_bids_g_ZENUSDT = Decimal(qty_bids_c_l_ZENUSDT) 
	price_asks_g_ZENUSDT = Decimal(price_asks_c_l_ZENUSDT) 
	qty_asks_g_ZENUSDT = Decimal(qty_asks_c_l_ZENUSDT) 


def loop_ZENUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zenusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZENUSDT) 
	ws.run_forever() 


Thread(target=loop_ZENUSDT).start() 
symbol_g_SNXUSDT = 'SNXUSDT' 
price_bids_g_SNXUSDT = Decimal('0.0') 
qty_bids_g_SNXUSDT = Decimal('0.0') 
price_asks_g_SNXUSDT = Decimal('0.0') 
qty_asks_g_SNXUSDT = Decimal('0.0') 
stepSize_g_SNXUSDT = Decimal('0.1') 


def on_message_SNXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SNXUSDT = 'SNXUSDT' 
	price_bids_c_l_SNXUSDT = data['b'] 
	qty_bids_c_l_SNXUSDT = data['B'] 
	price_asks_c_l_SNXUSDT = data['a'] 
	qty_asks_c_l_SNXUSDT = data['A'] 

	global symbol_g_SNXUSDT 
	global price_bids_g_SNXUSDT 
	global qty_bids_g_SNXUSDT 
	global price_asks_g_SNXUSDT 
	global qty_asks_g_SNXUSDT 

	symbol_g_SNXUSDT = symbol_c_l_SNXUSDT 
	price_bids_g_SNXUSDT = Decimal(price_bids_c_l_SNXUSDT) 
	qty_bids_g_SNXUSDT = Decimal(qty_bids_c_l_SNXUSDT) 
	price_asks_g_SNXUSDT = Decimal(price_asks_c_l_SNXUSDT) 
	qty_asks_g_SNXUSDT = Decimal(qty_asks_c_l_SNXUSDT) 


def loop_SNXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/snxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SNXUSDT) 
	ws.run_forever() 


Thread(target=loop_SNXUSDT).start() 
symbol_g_DGBUSDT = 'DGBUSDT' 
price_bids_g_DGBUSDT = Decimal('0.0') 
qty_bids_g_DGBUSDT = Decimal('0.0') 
price_asks_g_DGBUSDT = Decimal('0.0') 
qty_asks_g_DGBUSDT = Decimal('0.0') 
stepSize_g_DGBUSDT = Decimal('0.1') 


def on_message_DGBUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DGBUSDT = 'DGBUSDT' 
	price_bids_c_l_DGBUSDT = data['b'] 
	qty_bids_c_l_DGBUSDT = data['B'] 
	price_asks_c_l_DGBUSDT = data['a'] 
	qty_asks_c_l_DGBUSDT = data['A'] 

	global symbol_g_DGBUSDT 
	global price_bids_g_DGBUSDT 
	global qty_bids_g_DGBUSDT 
	global price_asks_g_DGBUSDT 
	global qty_asks_g_DGBUSDT 

	symbol_g_DGBUSDT = symbol_c_l_DGBUSDT 
	price_bids_g_DGBUSDT = Decimal(price_bids_c_l_DGBUSDT) 
	qty_bids_g_DGBUSDT = Decimal(qty_bids_c_l_DGBUSDT) 
	price_asks_g_DGBUSDT = Decimal(price_asks_c_l_DGBUSDT) 
	qty_asks_g_DGBUSDT = Decimal(qty_asks_c_l_DGBUSDT) 


def loop_DGBUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dgbusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DGBUSDT) 
	ws.run_forever() 


Thread(target=loop_DGBUSDT).start() 
symbol_g_GBPUSDT = 'GBPUSDT' 
price_bids_g_GBPUSDT = Decimal('0.0') 
qty_bids_g_GBPUSDT = Decimal('0.0') 
price_asks_g_GBPUSDT = Decimal('0.0') 
qty_asks_g_GBPUSDT = Decimal('0.0') 
stepSize_g_GBPUSDT = Decimal('0.1') 


def on_message_GBPUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GBPUSDT = 'GBPUSDT' 
	price_bids_c_l_GBPUSDT = data['b'] 
	qty_bids_c_l_GBPUSDT = data['B'] 
	price_asks_c_l_GBPUSDT = data['a'] 
	qty_asks_c_l_GBPUSDT = data['A'] 

	global symbol_g_GBPUSDT 
	global price_bids_g_GBPUSDT 
	global qty_bids_g_GBPUSDT 
	global price_asks_g_GBPUSDT 
	global qty_asks_g_GBPUSDT 

	symbol_g_GBPUSDT = symbol_c_l_GBPUSDT 
	price_bids_g_GBPUSDT = Decimal(price_bids_c_l_GBPUSDT) 
	qty_bids_g_GBPUSDT = Decimal(qty_bids_c_l_GBPUSDT) 
	price_asks_g_GBPUSDT = Decimal(price_asks_c_l_GBPUSDT) 
	qty_asks_g_GBPUSDT = Decimal(qty_asks_c_l_GBPUSDT) 


def loop_GBPUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gbpusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GBPUSDT) 
	ws.run_forever() 


Thread(target=loop_GBPUSDT).start() 
symbol_g_MKRUSDT = 'MKRUSDT' 
price_bids_g_MKRUSDT = Decimal('0.0') 
qty_bids_g_MKRUSDT = Decimal('0.0') 
price_asks_g_MKRUSDT = Decimal('0.0') 
qty_asks_g_MKRUSDT = Decimal('0.0') 
stepSize_g_MKRUSDT = Decimal('0.0001') 


def on_message_MKRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MKRUSDT = 'MKRUSDT' 
	price_bids_c_l_MKRUSDT = data['b'] 
	qty_bids_c_l_MKRUSDT = data['B'] 
	price_asks_c_l_MKRUSDT = data['a'] 
	qty_asks_c_l_MKRUSDT = data['A'] 

	global symbol_g_MKRUSDT 
	global price_bids_g_MKRUSDT 
	global qty_bids_g_MKRUSDT 
	global price_asks_g_MKRUSDT 
	global qty_asks_g_MKRUSDT 

	symbol_g_MKRUSDT = symbol_c_l_MKRUSDT 
	price_bids_g_MKRUSDT = Decimal(price_bids_c_l_MKRUSDT) 
	qty_bids_g_MKRUSDT = Decimal(qty_bids_c_l_MKRUSDT) 
	price_asks_g_MKRUSDT = Decimal(price_asks_c_l_MKRUSDT) 
	qty_asks_g_MKRUSDT = Decimal(qty_asks_c_l_MKRUSDT) 


def loop_MKRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mkrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MKRUSDT) 
	ws.run_forever() 


Thread(target=loop_MKRUSDT).start() 
symbol_g_DCRUSDT = 'DCRUSDT' 
price_bids_g_DCRUSDT = Decimal('0.0') 
qty_bids_g_DCRUSDT = Decimal('0.0') 
price_asks_g_DCRUSDT = Decimal('0.0') 
qty_asks_g_DCRUSDT = Decimal('0.0') 
stepSize_g_DCRUSDT = Decimal('0.001') 


def on_message_DCRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DCRUSDT = 'DCRUSDT' 
	price_bids_c_l_DCRUSDT = data['b'] 
	qty_bids_c_l_DCRUSDT = data['B'] 
	price_asks_c_l_DCRUSDT = data['a'] 
	qty_asks_c_l_DCRUSDT = data['A'] 

	global symbol_g_DCRUSDT 
	global price_bids_g_DCRUSDT 
	global qty_bids_g_DCRUSDT 
	global price_asks_g_DCRUSDT 
	global qty_asks_g_DCRUSDT 

	symbol_g_DCRUSDT = symbol_c_l_DCRUSDT 
	price_bids_g_DCRUSDT = Decimal(price_bids_c_l_DCRUSDT) 
	qty_bids_g_DCRUSDT = Decimal(qty_bids_c_l_DCRUSDT) 
	price_asks_g_DCRUSDT = Decimal(price_asks_c_l_DCRUSDT) 
	qty_asks_g_DCRUSDT = Decimal(qty_asks_c_l_DCRUSDT) 


def loop_DCRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dcrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DCRUSDT) 
	ws.run_forever() 


Thread(target=loop_DCRUSDT).start() 
symbol_g_AUDUSDT = 'AUDUSDT' 
price_bids_g_AUDUSDT = Decimal('0.0') 
qty_bids_g_AUDUSDT = Decimal('0.0') 
price_asks_g_AUDUSDT = Decimal('0.0') 
qty_asks_g_AUDUSDT = Decimal('0.0') 
stepSize_g_AUDUSDT = Decimal('1.0') 


def on_message_AUDUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AUDUSDT = 'AUDUSDT' 
	price_bids_c_l_AUDUSDT = data['b'] 
	qty_bids_c_l_AUDUSDT = data['B'] 
	price_asks_c_l_AUDUSDT = data['a'] 
	qty_asks_c_l_AUDUSDT = data['A'] 

	global symbol_g_AUDUSDT 
	global price_bids_g_AUDUSDT 
	global qty_bids_g_AUDUSDT 
	global price_asks_g_AUDUSDT 
	global qty_asks_g_AUDUSDT 

	symbol_g_AUDUSDT = symbol_c_l_AUDUSDT 
	price_bids_g_AUDUSDT = Decimal(price_bids_c_l_AUDUSDT) 
	qty_bids_g_AUDUSDT = Decimal(qty_bids_c_l_AUDUSDT) 
	price_asks_g_AUDUSDT = Decimal(price_asks_c_l_AUDUSDT) 
	qty_asks_g_AUDUSDT = Decimal(qty_asks_c_l_AUDUSDT) 


def loop_AUDUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/audusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AUDUSDT) 
	ws.run_forever() 


Thread(target=loop_AUDUSDT).start() 
symbol_g_YFIUSDT = 'YFIUSDT' 
price_bids_g_YFIUSDT = Decimal('0.0') 
qty_bids_g_YFIUSDT = Decimal('0.0') 
price_asks_g_YFIUSDT = Decimal('0.0') 
qty_asks_g_YFIUSDT = Decimal('0.0') 
stepSize_g_YFIUSDT = Decimal('0.00001') 


def on_message_YFIUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_YFIUSDT = 'YFIUSDT' 
	price_bids_c_l_YFIUSDT = data['b'] 
	qty_bids_c_l_YFIUSDT = data['B'] 
	price_asks_c_l_YFIUSDT = data['a'] 
	qty_asks_c_l_YFIUSDT = data['A'] 

	global symbol_g_YFIUSDT 
	global price_bids_g_YFIUSDT 
	global qty_bids_g_YFIUSDT 
	global price_asks_g_YFIUSDT 
	global qty_asks_g_YFIUSDT 

	symbol_g_YFIUSDT = symbol_c_l_YFIUSDT 
	price_bids_g_YFIUSDT = Decimal(price_bids_c_l_YFIUSDT) 
	qty_bids_g_YFIUSDT = Decimal(qty_bids_c_l_YFIUSDT) 
	price_asks_g_YFIUSDT = Decimal(price_asks_c_l_YFIUSDT) 
	qty_asks_g_YFIUSDT = Decimal(qty_asks_c_l_YFIUSDT) 


def loop_YFIUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/yfiusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_YFIUSDT) 
	ws.run_forever() 


Thread(target=loop_YFIUSDT).start() 
symbol_g_BALUSDT = 'BALUSDT' 
price_bids_g_BALUSDT = Decimal('0.0') 
qty_bids_g_BALUSDT = Decimal('0.0') 
price_asks_g_BALUSDT = Decimal('0.0') 
qty_asks_g_BALUSDT = Decimal('0.0') 
stepSize_g_BALUSDT = Decimal('0.01') 


def on_message_BALUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BALUSDT = 'BALUSDT' 
	price_bids_c_l_BALUSDT = data['b'] 
	qty_bids_c_l_BALUSDT = data['B'] 
	price_asks_c_l_BALUSDT = data['a'] 
	qty_asks_c_l_BALUSDT = data['A'] 

	global symbol_g_BALUSDT 
	global price_bids_g_BALUSDT 
	global qty_bids_g_BALUSDT 
	global price_asks_g_BALUSDT 
	global qty_asks_g_BALUSDT 

	symbol_g_BALUSDT = symbol_c_l_BALUSDT 
	price_bids_g_BALUSDT = Decimal(price_bids_c_l_BALUSDT) 
	qty_bids_g_BALUSDT = Decimal(qty_bids_c_l_BALUSDT) 
	price_asks_g_BALUSDT = Decimal(price_asks_c_l_BALUSDT) 
	qty_asks_g_BALUSDT = Decimal(qty_asks_c_l_BALUSDT) 


def loop_BALUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/balusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BALUSDT) 
	ws.run_forever() 


Thread(target=loop_BALUSDT).start() 
symbol_g_BLZUSDT = 'BLZUSDT' 
price_bids_g_BLZUSDT = Decimal('0.0') 
qty_bids_g_BLZUSDT = Decimal('0.0') 
price_asks_g_BLZUSDT = Decimal('0.0') 
qty_asks_g_BLZUSDT = Decimal('0.0') 
stepSize_g_BLZUSDT = Decimal('1.0') 


def on_message_BLZUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BLZUSDT = 'BLZUSDT' 
	price_bids_c_l_BLZUSDT = data['b'] 
	qty_bids_c_l_BLZUSDT = data['B'] 
	price_asks_c_l_BLZUSDT = data['a'] 
	qty_asks_c_l_BLZUSDT = data['A'] 

	global symbol_g_BLZUSDT 
	global price_bids_g_BLZUSDT 
	global qty_bids_g_BLZUSDT 
	global price_asks_g_BLZUSDT 
	global qty_asks_g_BLZUSDT 

	symbol_g_BLZUSDT = symbol_c_l_BLZUSDT 
	price_bids_g_BLZUSDT = Decimal(price_bids_c_l_BLZUSDT) 
	qty_bids_g_BLZUSDT = Decimal(qty_bids_c_l_BLZUSDT) 
	price_asks_g_BLZUSDT = Decimal(price_asks_c_l_BLZUSDT) 
	qty_asks_g_BLZUSDT = Decimal(qty_asks_c_l_BLZUSDT) 


def loop_BLZUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/blzusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BLZUSDT) 
	ws.run_forever() 


Thread(target=loop_BLZUSDT).start() 
symbol_g_IRISUSDT = 'IRISUSDT' 
price_bids_g_IRISUSDT = Decimal('0.0') 
qty_bids_g_IRISUSDT = Decimal('0.0') 
price_asks_g_IRISUSDT = Decimal('0.0') 
qty_asks_g_IRISUSDT = Decimal('0.0') 
stepSize_g_IRISUSDT = Decimal('0.1') 


def on_message_IRISUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IRISUSDT = 'IRISUSDT' 
	price_bids_c_l_IRISUSDT = data['b'] 
	qty_bids_c_l_IRISUSDT = data['B'] 
	price_asks_c_l_IRISUSDT = data['a'] 
	qty_asks_c_l_IRISUSDT = data['A'] 

	global symbol_g_IRISUSDT 
	global price_bids_g_IRISUSDT 
	global qty_bids_g_IRISUSDT 
	global price_asks_g_IRISUSDT 
	global qty_asks_g_IRISUSDT 

	symbol_g_IRISUSDT = symbol_c_l_IRISUSDT 
	price_bids_g_IRISUSDT = Decimal(price_bids_c_l_IRISUSDT) 
	qty_bids_g_IRISUSDT = Decimal(qty_bids_c_l_IRISUSDT) 
	price_asks_g_IRISUSDT = Decimal(price_asks_c_l_IRISUSDT) 
	qty_asks_g_IRISUSDT = Decimal(qty_asks_c_l_IRISUSDT) 


def loop_IRISUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/irisusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IRISUSDT) 
	ws.run_forever() 


Thread(target=loop_IRISUSDT).start() 
symbol_g_KMDUSDT = 'KMDUSDT' 
price_bids_g_KMDUSDT = Decimal('0.0') 
qty_bids_g_KMDUSDT = Decimal('0.0') 
price_asks_g_KMDUSDT = Decimal('0.0') 
qty_asks_g_KMDUSDT = Decimal('0.0') 
stepSize_g_KMDUSDT = Decimal('1.0') 


def on_message_KMDUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KMDUSDT = 'KMDUSDT' 
	price_bids_c_l_KMDUSDT = data['b'] 
	qty_bids_c_l_KMDUSDT = data['B'] 
	price_asks_c_l_KMDUSDT = data['a'] 
	qty_asks_c_l_KMDUSDT = data['A'] 

	global symbol_g_KMDUSDT 
	global price_bids_g_KMDUSDT 
	global qty_bids_g_KMDUSDT 
	global price_asks_g_KMDUSDT 
	global qty_asks_g_KMDUSDT 

	symbol_g_KMDUSDT = symbol_c_l_KMDUSDT 
	price_bids_g_KMDUSDT = Decimal(price_bids_c_l_KMDUSDT) 
	qty_bids_g_KMDUSDT = Decimal(qty_bids_c_l_KMDUSDT) 
	price_asks_g_KMDUSDT = Decimal(price_asks_c_l_KMDUSDT) 
	qty_asks_g_KMDUSDT = Decimal(qty_asks_c_l_KMDUSDT) 


def loop_KMDUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kmdusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KMDUSDT) 
	ws.run_forever() 


Thread(target=loop_KMDUSDT).start() 
symbol_g_JSTUSDT = 'JSTUSDT' 
price_bids_g_JSTUSDT = Decimal('0.0') 
qty_bids_g_JSTUSDT = Decimal('0.0') 
price_asks_g_JSTUSDT = Decimal('0.0') 
qty_asks_g_JSTUSDT = Decimal('0.0') 
stepSize_g_JSTUSDT = Decimal('0.1') 


def on_message_JSTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JSTUSDT = 'JSTUSDT' 
	price_bids_c_l_JSTUSDT = data['b'] 
	qty_bids_c_l_JSTUSDT = data['B'] 
	price_asks_c_l_JSTUSDT = data['a'] 
	qty_asks_c_l_JSTUSDT = data['A'] 

	global symbol_g_JSTUSDT 
	global price_bids_g_JSTUSDT 
	global qty_bids_g_JSTUSDT 
	global price_asks_g_JSTUSDT 
	global qty_asks_g_JSTUSDT 

	symbol_g_JSTUSDT = symbol_c_l_JSTUSDT 
	price_bids_g_JSTUSDT = Decimal(price_bids_c_l_JSTUSDT) 
	qty_bids_g_JSTUSDT = Decimal(qty_bids_c_l_JSTUSDT) 
	price_asks_g_JSTUSDT = Decimal(price_asks_c_l_JSTUSDT) 
	qty_asks_g_JSTUSDT = Decimal(qty_asks_c_l_JSTUSDT) 


def loop_JSTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/jstusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JSTUSDT) 
	ws.run_forever() 


Thread(target=loop_JSTUSDT).start() 
symbol_g_ANTUSDT = 'ANTUSDT' 
price_bids_g_ANTUSDT = Decimal('0.0') 
qty_bids_g_ANTUSDT = Decimal('0.0') 
price_asks_g_ANTUSDT = Decimal('0.0') 
qty_asks_g_ANTUSDT = Decimal('0.0') 
stepSize_g_ANTUSDT = Decimal('0.1') 


def on_message_ANTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ANTUSDT = 'ANTUSDT' 
	price_bids_c_l_ANTUSDT = data['b'] 
	qty_bids_c_l_ANTUSDT = data['B'] 
	price_asks_c_l_ANTUSDT = data['a'] 
	qty_asks_c_l_ANTUSDT = data['A'] 

	global symbol_g_ANTUSDT 
	global price_bids_g_ANTUSDT 
	global qty_bids_g_ANTUSDT 
	global price_asks_g_ANTUSDT 
	global qty_asks_g_ANTUSDT 

	symbol_g_ANTUSDT = symbol_c_l_ANTUSDT 
	price_bids_g_ANTUSDT = Decimal(price_bids_c_l_ANTUSDT) 
	qty_bids_g_ANTUSDT = Decimal(qty_bids_c_l_ANTUSDT) 
	price_asks_g_ANTUSDT = Decimal(price_asks_c_l_ANTUSDT) 
	qty_asks_g_ANTUSDT = Decimal(qty_asks_c_l_ANTUSDT) 


def loop_ANTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/antusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ANTUSDT) 
	ws.run_forever() 


Thread(target=loop_ANTUSDT).start() 
symbol_g_CRVUSDT = 'CRVUSDT' 
price_bids_g_CRVUSDT = Decimal('0.0') 
qty_bids_g_CRVUSDT = Decimal('0.0') 
price_asks_g_CRVUSDT = Decimal('0.0') 
qty_asks_g_CRVUSDT = Decimal('0.0') 
stepSize_g_CRVUSDT = Decimal('0.1') 


def on_message_CRVUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CRVUSDT = 'CRVUSDT' 
	price_bids_c_l_CRVUSDT = data['b'] 
	qty_bids_c_l_CRVUSDT = data['B'] 
	price_asks_c_l_CRVUSDT = data['a'] 
	qty_asks_c_l_CRVUSDT = data['A'] 

	global symbol_g_CRVUSDT 
	global price_bids_g_CRVUSDT 
	global qty_bids_g_CRVUSDT 
	global price_asks_g_CRVUSDT 
	global qty_asks_g_CRVUSDT 

	symbol_g_CRVUSDT = symbol_c_l_CRVUSDT 
	price_bids_g_CRVUSDT = Decimal(price_bids_c_l_CRVUSDT) 
	qty_bids_g_CRVUSDT = Decimal(qty_bids_c_l_CRVUSDT) 
	price_asks_g_CRVUSDT = Decimal(price_asks_c_l_CRVUSDT) 
	qty_asks_g_CRVUSDT = Decimal(qty_asks_c_l_CRVUSDT) 


def loop_CRVUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/crvusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CRVUSDT) 
	ws.run_forever() 


Thread(target=loop_CRVUSDT).start() 
symbol_g_OCEANUSDT = 'OCEANUSDT' 
price_bids_g_OCEANUSDT = Decimal('0.0') 
qty_bids_g_OCEANUSDT = Decimal('0.0') 
price_asks_g_OCEANUSDT = Decimal('0.0') 
qty_asks_g_OCEANUSDT = Decimal('0.0') 
stepSize_g_OCEANUSDT = Decimal('1.0') 


def on_message_OCEANUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OCEANUSDT = 'OCEANUSDT' 
	price_bids_c_l_OCEANUSDT = data['b'] 
	qty_bids_c_l_OCEANUSDT = data['B'] 
	price_asks_c_l_OCEANUSDT = data['a'] 
	qty_asks_c_l_OCEANUSDT = data['A'] 

	global symbol_g_OCEANUSDT 
	global price_bids_g_OCEANUSDT 
	global qty_bids_g_OCEANUSDT 
	global price_asks_g_OCEANUSDT 
	global qty_asks_g_OCEANUSDT 

	symbol_g_OCEANUSDT = symbol_c_l_OCEANUSDT 
	price_bids_g_OCEANUSDT = Decimal(price_bids_c_l_OCEANUSDT) 
	qty_bids_g_OCEANUSDT = Decimal(qty_bids_c_l_OCEANUSDT) 
	price_asks_g_OCEANUSDT = Decimal(price_asks_c_l_OCEANUSDT) 
	qty_asks_g_OCEANUSDT = Decimal(qty_asks_c_l_OCEANUSDT) 


def loop_OCEANUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/oceanusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OCEANUSDT) 
	ws.run_forever() 


Thread(target=loop_OCEANUSDT).start() 
symbol_g_NMRUSDT = 'NMRUSDT' 
price_bids_g_NMRUSDT = Decimal('0.0') 
qty_bids_g_NMRUSDT = Decimal('0.0') 
price_asks_g_NMRUSDT = Decimal('0.0') 
qty_asks_g_NMRUSDT = Decimal('0.0') 
stepSize_g_NMRUSDT = Decimal('0.01') 


def on_message_NMRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NMRUSDT = 'NMRUSDT' 
	price_bids_c_l_NMRUSDT = data['b'] 
	qty_bids_c_l_NMRUSDT = data['B'] 
	price_asks_c_l_NMRUSDT = data['a'] 
	qty_asks_c_l_NMRUSDT = data['A'] 

	global symbol_g_NMRUSDT 
	global price_bids_g_NMRUSDT 
	global qty_bids_g_NMRUSDT 
	global price_asks_g_NMRUSDT 
	global qty_asks_g_NMRUSDT 

	symbol_g_NMRUSDT = symbol_c_l_NMRUSDT 
	price_bids_g_NMRUSDT = Decimal(price_bids_c_l_NMRUSDT) 
	qty_bids_g_NMRUSDT = Decimal(qty_bids_c_l_NMRUSDT) 
	price_asks_g_NMRUSDT = Decimal(price_asks_c_l_NMRUSDT) 
	qty_asks_g_NMRUSDT = Decimal(qty_asks_c_l_NMRUSDT) 


def loop_NMRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nmrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NMRUSDT) 
	ws.run_forever() 


Thread(target=loop_NMRUSDT).start() 
symbol_g_RSRUSDT = 'RSRUSDT' 
price_bids_g_RSRUSDT = Decimal('0.0') 
qty_bids_g_RSRUSDT = Decimal('0.0') 
price_asks_g_RSRUSDT = Decimal('0.0') 
qty_asks_g_RSRUSDT = Decimal('0.0') 
stepSize_g_RSRUSDT = Decimal('0.1') 


def on_message_RSRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RSRUSDT = 'RSRUSDT' 
	price_bids_c_l_RSRUSDT = data['b'] 
	qty_bids_c_l_RSRUSDT = data['B'] 
	price_asks_c_l_RSRUSDT = data['a'] 
	qty_asks_c_l_RSRUSDT = data['A'] 

	global symbol_g_RSRUSDT 
	global price_bids_g_RSRUSDT 
	global qty_bids_g_RSRUSDT 
	global price_asks_g_RSRUSDT 
	global qty_asks_g_RSRUSDT 

	symbol_g_RSRUSDT = symbol_c_l_RSRUSDT 
	price_bids_g_RSRUSDT = Decimal(price_bids_c_l_RSRUSDT) 
	qty_bids_g_RSRUSDT = Decimal(qty_bids_c_l_RSRUSDT) 
	price_asks_g_RSRUSDT = Decimal(price_asks_c_l_RSRUSDT) 
	qty_asks_g_RSRUSDT = Decimal(qty_asks_c_l_RSRUSDT) 


def loop_RSRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rsrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RSRUSDT) 
	ws.run_forever() 


Thread(target=loop_RSRUSDT).start() 
symbol_g_PAXGUSDT = 'PAXGUSDT' 
price_bids_g_PAXGUSDT = Decimal('0.0') 
qty_bids_g_PAXGUSDT = Decimal('0.0') 
price_asks_g_PAXGUSDT = Decimal('0.0') 
qty_asks_g_PAXGUSDT = Decimal('0.0') 
stepSize_g_PAXGUSDT = Decimal('0.0001') 


def on_message_PAXGUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PAXGUSDT = 'PAXGUSDT' 
	price_bids_c_l_PAXGUSDT = data['b'] 
	qty_bids_c_l_PAXGUSDT = data['B'] 
	price_asks_c_l_PAXGUSDT = data['a'] 
	qty_asks_c_l_PAXGUSDT = data['A'] 

	global symbol_g_PAXGUSDT 
	global price_bids_g_PAXGUSDT 
	global qty_bids_g_PAXGUSDT 
	global price_asks_g_PAXGUSDT 
	global qty_asks_g_PAXGUSDT 

	symbol_g_PAXGUSDT = symbol_c_l_PAXGUSDT 
	price_bids_g_PAXGUSDT = Decimal(price_bids_c_l_PAXGUSDT) 
	qty_bids_g_PAXGUSDT = Decimal(qty_bids_c_l_PAXGUSDT) 
	price_asks_g_PAXGUSDT = Decimal(price_asks_c_l_PAXGUSDT) 
	qty_asks_g_PAXGUSDT = Decimal(qty_asks_c_l_PAXGUSDT) 


def loop_PAXGUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/paxgusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PAXGUSDT) 
	ws.run_forever() 


Thread(target=loop_PAXGUSDT).start() 
symbol_g_TRBUSDT = 'TRBUSDT' 
price_bids_g_TRBUSDT = Decimal('0.0') 
qty_bids_g_TRBUSDT = Decimal('0.0') 
price_asks_g_TRBUSDT = Decimal('0.0') 
qty_asks_g_TRBUSDT = Decimal('0.0') 
stepSize_g_TRBUSDT = Decimal('0.01') 


def on_message_TRBUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRBUSDT = 'TRBUSDT' 
	price_bids_c_l_TRBUSDT = data['b'] 
	qty_bids_c_l_TRBUSDT = data['B'] 
	price_asks_c_l_TRBUSDT = data['a'] 
	qty_asks_c_l_TRBUSDT = data['A'] 

	global symbol_g_TRBUSDT 
	global price_bids_g_TRBUSDT 
	global qty_bids_g_TRBUSDT 
	global price_asks_g_TRBUSDT 
	global qty_asks_g_TRBUSDT 

	symbol_g_TRBUSDT = symbol_c_l_TRBUSDT 
	price_bids_g_TRBUSDT = Decimal(price_bids_c_l_TRBUSDT) 
	qty_bids_g_TRBUSDT = Decimal(qty_bids_c_l_TRBUSDT) 
	price_asks_g_TRBUSDT = Decimal(price_asks_c_l_TRBUSDT) 
	qty_asks_g_TRBUSDT = Decimal(qty_asks_c_l_TRBUSDT) 


def loop_TRBUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/trbusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRBUSDT) 
	ws.run_forever() 


Thread(target=loop_TRBUSDT).start() 
symbol_g_SUSHIUSDT = 'SUSHIUSDT' 
price_bids_g_SUSHIUSDT = Decimal('0.0') 
qty_bids_g_SUSHIUSDT = Decimal('0.0') 
price_asks_g_SUSHIUSDT = Decimal('0.0') 
qty_asks_g_SUSHIUSDT = Decimal('0.0') 
stepSize_g_SUSHIUSDT = Decimal('0.1') 


def on_message_SUSHIUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SUSHIUSDT = 'SUSHIUSDT' 
	price_bids_c_l_SUSHIUSDT = data['b'] 
	qty_bids_c_l_SUSHIUSDT = data['B'] 
	price_asks_c_l_SUSHIUSDT = data['a'] 
	qty_asks_c_l_SUSHIUSDT = data['A'] 

	global symbol_g_SUSHIUSDT 
	global price_bids_g_SUSHIUSDT 
	global qty_bids_g_SUSHIUSDT 
	global price_asks_g_SUSHIUSDT 
	global qty_asks_g_SUSHIUSDT 

	symbol_g_SUSHIUSDT = symbol_c_l_SUSHIUSDT 
	price_bids_g_SUSHIUSDT = Decimal(price_bids_c_l_SUSHIUSDT) 
	qty_bids_g_SUSHIUSDT = Decimal(qty_bids_c_l_SUSHIUSDT) 
	price_asks_g_SUSHIUSDT = Decimal(price_asks_c_l_SUSHIUSDT) 
	qty_asks_g_SUSHIUSDT = Decimal(qty_asks_c_l_SUSHIUSDT) 


def loop_SUSHIUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sushiusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SUSHIUSDT) 
	ws.run_forever() 


Thread(target=loop_SUSHIUSDT).start() 
symbol_g_KSMUSDT = 'KSMUSDT' 
price_bids_g_KSMUSDT = Decimal('0.0') 
qty_bids_g_KSMUSDT = Decimal('0.0') 
price_asks_g_KSMUSDT = Decimal('0.0') 
qty_asks_g_KSMUSDT = Decimal('0.0') 
stepSize_g_KSMUSDT = Decimal('0.001') 


def on_message_KSMUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KSMUSDT = 'KSMUSDT' 
	price_bids_c_l_KSMUSDT = data['b'] 
	qty_bids_c_l_KSMUSDT = data['B'] 
	price_asks_c_l_KSMUSDT = data['a'] 
	qty_asks_c_l_KSMUSDT = data['A'] 

	global symbol_g_KSMUSDT 
	global price_bids_g_KSMUSDT 
	global qty_bids_g_KSMUSDT 
	global price_asks_g_KSMUSDT 
	global qty_asks_g_KSMUSDT 

	symbol_g_KSMUSDT = symbol_c_l_KSMUSDT 
	price_bids_g_KSMUSDT = Decimal(price_bids_c_l_KSMUSDT) 
	qty_bids_g_KSMUSDT = Decimal(qty_bids_c_l_KSMUSDT) 
	price_asks_g_KSMUSDT = Decimal(price_asks_c_l_KSMUSDT) 
	qty_asks_g_KSMUSDT = Decimal(qty_asks_c_l_KSMUSDT) 


def loop_KSMUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ksmusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KSMUSDT) 
	ws.run_forever() 


Thread(target=loop_KSMUSDT).start() 
symbol_g_EGLDUSDT = 'EGLDUSDT' 
price_bids_g_EGLDUSDT = Decimal('0.0') 
qty_bids_g_EGLDUSDT = Decimal('0.0') 
price_asks_g_EGLDUSDT = Decimal('0.0') 
qty_asks_g_EGLDUSDT = Decimal('0.0') 
stepSize_g_EGLDUSDT = Decimal('0.01') 


def on_message_EGLDUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EGLDUSDT = 'EGLDUSDT' 
	price_bids_c_l_EGLDUSDT = data['b'] 
	qty_bids_c_l_EGLDUSDT = data['B'] 
	price_asks_c_l_EGLDUSDT = data['a'] 
	qty_asks_c_l_EGLDUSDT = data['A'] 

	global symbol_g_EGLDUSDT 
	global price_bids_g_EGLDUSDT 
	global qty_bids_g_EGLDUSDT 
	global price_asks_g_EGLDUSDT 
	global qty_asks_g_EGLDUSDT 

	symbol_g_EGLDUSDT = symbol_c_l_EGLDUSDT 
	price_bids_g_EGLDUSDT = Decimal(price_bids_c_l_EGLDUSDT) 
	qty_bids_g_EGLDUSDT = Decimal(qty_bids_c_l_EGLDUSDT) 
	price_asks_g_EGLDUSDT = Decimal(price_asks_c_l_EGLDUSDT) 
	qty_asks_g_EGLDUSDT = Decimal(qty_asks_c_l_EGLDUSDT) 


def loop_EGLDUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/egldusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EGLDUSDT) 
	ws.run_forever() 


Thread(target=loop_EGLDUSDT).start() 
symbol_g_DIAUSDT = 'DIAUSDT' 
price_bids_g_DIAUSDT = Decimal('0.0') 
qty_bids_g_DIAUSDT = Decimal('0.0') 
price_asks_g_DIAUSDT = Decimal('0.0') 
qty_asks_g_DIAUSDT = Decimal('0.0') 
stepSize_g_DIAUSDT = Decimal('0.1') 


def on_message_DIAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DIAUSDT = 'DIAUSDT' 
	price_bids_c_l_DIAUSDT = data['b'] 
	qty_bids_c_l_DIAUSDT = data['B'] 
	price_asks_c_l_DIAUSDT = data['a'] 
	qty_asks_c_l_DIAUSDT = data['A'] 

	global symbol_g_DIAUSDT 
	global price_bids_g_DIAUSDT 
	global qty_bids_g_DIAUSDT 
	global price_asks_g_DIAUSDT 
	global qty_asks_g_DIAUSDT 

	symbol_g_DIAUSDT = symbol_c_l_DIAUSDT 
	price_bids_g_DIAUSDT = Decimal(price_bids_c_l_DIAUSDT) 
	qty_bids_g_DIAUSDT = Decimal(qty_bids_c_l_DIAUSDT) 
	price_asks_g_DIAUSDT = Decimal(price_asks_c_l_DIAUSDT) 
	qty_asks_g_DIAUSDT = Decimal(qty_asks_c_l_DIAUSDT) 


def loop_DIAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/diausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DIAUSDT) 
	ws.run_forever() 


Thread(target=loop_DIAUSDT).start() 
symbol_g_FIOUSDT = 'FIOUSDT' 
price_bids_g_FIOUSDT = Decimal('0.0') 
qty_bids_g_FIOUSDT = Decimal('0.0') 
price_asks_g_FIOUSDT = Decimal('0.0') 
qty_asks_g_FIOUSDT = Decimal('0.0') 
stepSize_g_FIOUSDT = Decimal('1.0') 


def on_message_FIOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FIOUSDT = 'FIOUSDT' 
	price_bids_c_l_FIOUSDT = data['b'] 
	qty_bids_c_l_FIOUSDT = data['B'] 
	price_asks_c_l_FIOUSDT = data['a'] 
	qty_asks_c_l_FIOUSDT = data['A'] 

	global symbol_g_FIOUSDT 
	global price_bids_g_FIOUSDT 
	global qty_bids_g_FIOUSDT 
	global price_asks_g_FIOUSDT 
	global qty_asks_g_FIOUSDT 

	symbol_g_FIOUSDT = symbol_c_l_FIOUSDT 
	price_bids_g_FIOUSDT = Decimal(price_bids_c_l_FIOUSDT) 
	qty_bids_g_FIOUSDT = Decimal(qty_bids_c_l_FIOUSDT) 
	price_asks_g_FIOUSDT = Decimal(price_asks_c_l_FIOUSDT) 
	qty_asks_g_FIOUSDT = Decimal(qty_asks_c_l_FIOUSDT) 


def loop_FIOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fiousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FIOUSDT) 
	ws.run_forever() 


Thread(target=loop_FIOUSDT).start() 
symbol_g_WINGUSDT = 'WINGUSDT' 
price_bids_g_WINGUSDT = Decimal('0.0') 
qty_bids_g_WINGUSDT = Decimal('0.0') 
price_asks_g_WINGUSDT = Decimal('0.0') 
qty_asks_g_WINGUSDT = Decimal('0.0') 
stepSize_g_WINGUSDT = Decimal('0.01') 


def on_message_WINGUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WINGUSDT = 'WINGUSDT' 
	price_bids_c_l_WINGUSDT = data['b'] 
	qty_bids_c_l_WINGUSDT = data['B'] 
	price_asks_c_l_WINGUSDT = data['a'] 
	qty_asks_c_l_WINGUSDT = data['A'] 

	global symbol_g_WINGUSDT 
	global price_bids_g_WINGUSDT 
	global qty_bids_g_WINGUSDT 
	global price_asks_g_WINGUSDT 
	global qty_asks_g_WINGUSDT 

	symbol_g_WINGUSDT = symbol_c_l_WINGUSDT 
	price_bids_g_WINGUSDT = Decimal(price_bids_c_l_WINGUSDT) 
	qty_bids_g_WINGUSDT = Decimal(qty_bids_c_l_WINGUSDT) 
	price_asks_g_WINGUSDT = Decimal(price_asks_c_l_WINGUSDT) 
	qty_asks_g_WINGUSDT = Decimal(qty_asks_c_l_WINGUSDT) 


def loop_WINGUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wingusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WINGUSDT) 
	ws.run_forever() 


Thread(target=loop_WINGUSDT).start() 
symbol_g_UNIUSDT = 'UNIUSDT' 
price_bids_g_UNIUSDT = Decimal('0.0') 
qty_bids_g_UNIUSDT = Decimal('0.0') 
price_asks_g_UNIUSDT = Decimal('0.0') 
qty_asks_g_UNIUSDT = Decimal('0.0') 
stepSize_g_UNIUSDT = Decimal('0.01') 


def on_message_UNIUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UNIUSDT = 'UNIUSDT' 
	price_bids_c_l_UNIUSDT = data['b'] 
	qty_bids_c_l_UNIUSDT = data['B'] 
	price_asks_c_l_UNIUSDT = data['a'] 
	qty_asks_c_l_UNIUSDT = data['A'] 

	global symbol_g_UNIUSDT 
	global price_bids_g_UNIUSDT 
	global qty_bids_g_UNIUSDT 
	global price_asks_g_UNIUSDT 
	global qty_asks_g_UNIUSDT 

	symbol_g_UNIUSDT = symbol_c_l_UNIUSDT 
	price_bids_g_UNIUSDT = Decimal(price_bids_c_l_UNIUSDT) 
	qty_bids_g_UNIUSDT = Decimal(qty_bids_c_l_UNIUSDT) 
	price_asks_g_UNIUSDT = Decimal(price_asks_c_l_UNIUSDT) 
	qty_asks_g_UNIUSDT = Decimal(qty_asks_c_l_UNIUSDT) 


def loop_UNIUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/uniusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UNIUSDT) 
	ws.run_forever() 


Thread(target=loop_UNIUSDT).start() 
symbol_g_OXTUSDT = 'OXTUSDT' 
price_bids_g_OXTUSDT = Decimal('0.0') 
qty_bids_g_OXTUSDT = Decimal('0.0') 
price_asks_g_OXTUSDT = Decimal('0.0') 
qty_asks_g_OXTUSDT = Decimal('0.0') 
stepSize_g_OXTUSDT = Decimal('1.0') 


def on_message_OXTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OXTUSDT = 'OXTUSDT' 
	price_bids_c_l_OXTUSDT = data['b'] 
	qty_bids_c_l_OXTUSDT = data['B'] 
	price_asks_c_l_OXTUSDT = data['a'] 
	qty_asks_c_l_OXTUSDT = data['A'] 

	global symbol_g_OXTUSDT 
	global price_bids_g_OXTUSDT 
	global qty_bids_g_OXTUSDT 
	global price_asks_g_OXTUSDT 
	global qty_asks_g_OXTUSDT 

	symbol_g_OXTUSDT = symbol_c_l_OXTUSDT 
	price_bids_g_OXTUSDT = Decimal(price_bids_c_l_OXTUSDT) 
	qty_bids_g_OXTUSDT = Decimal(qty_bids_c_l_OXTUSDT) 
	price_asks_g_OXTUSDT = Decimal(price_asks_c_l_OXTUSDT) 
	qty_asks_g_OXTUSDT = Decimal(qty_asks_c_l_OXTUSDT) 


def loop_OXTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/oxtusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OXTUSDT) 
	ws.run_forever() 


Thread(target=loop_OXTUSDT).start() 
symbol_g_SUNUSDT = 'SUNUSDT' 
price_bids_g_SUNUSDT = Decimal('0.0') 
qty_bids_g_SUNUSDT = Decimal('0.0') 
price_asks_g_SUNUSDT = Decimal('0.0') 
qty_asks_g_SUNUSDT = Decimal('0.0') 
stepSize_g_SUNUSDT = Decimal('1.0') 


def on_message_SUNUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SUNUSDT = 'SUNUSDT' 
	price_bids_c_l_SUNUSDT = data['b'] 
	qty_bids_c_l_SUNUSDT = data['B'] 
	price_asks_c_l_SUNUSDT = data['a'] 
	qty_asks_c_l_SUNUSDT = data['A'] 

	global symbol_g_SUNUSDT 
	global price_bids_g_SUNUSDT 
	global qty_bids_g_SUNUSDT 
	global price_asks_g_SUNUSDT 
	global qty_asks_g_SUNUSDT 

	symbol_g_SUNUSDT = symbol_c_l_SUNUSDT 
	price_bids_g_SUNUSDT = Decimal(price_bids_c_l_SUNUSDT) 
	qty_bids_g_SUNUSDT = Decimal(qty_bids_c_l_SUNUSDT) 
	price_asks_g_SUNUSDT = Decimal(price_asks_c_l_SUNUSDT) 
	qty_asks_g_SUNUSDT = Decimal(qty_asks_c_l_SUNUSDT) 


def loop_SUNUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sunusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SUNUSDT) 
	ws.run_forever() 


Thread(target=loop_SUNUSDT).start() 
symbol_g_FLMUSDT = 'FLMUSDT' 
price_bids_g_FLMUSDT = Decimal('0.0') 
qty_bids_g_FLMUSDT = Decimal('0.0') 
price_asks_g_FLMUSDT = Decimal('0.0') 
qty_asks_g_FLMUSDT = Decimal('0.0') 
stepSize_g_FLMUSDT = Decimal('1.0') 


def on_message_FLMUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FLMUSDT = 'FLMUSDT' 
	price_bids_c_l_FLMUSDT = data['b'] 
	qty_bids_c_l_FLMUSDT = data['B'] 
	price_asks_c_l_FLMUSDT = data['a'] 
	qty_asks_c_l_FLMUSDT = data['A'] 

	global symbol_g_FLMUSDT 
	global price_bids_g_FLMUSDT 
	global qty_bids_g_FLMUSDT 
	global price_asks_g_FLMUSDT 
	global qty_asks_g_FLMUSDT 

	symbol_g_FLMUSDT = symbol_c_l_FLMUSDT 
	price_bids_g_FLMUSDT = Decimal(price_bids_c_l_FLMUSDT) 
	qty_bids_g_FLMUSDT = Decimal(qty_bids_c_l_FLMUSDT) 
	price_asks_g_FLMUSDT = Decimal(price_asks_c_l_FLMUSDT) 
	qty_asks_g_FLMUSDT = Decimal(qty_asks_c_l_FLMUSDT) 


def loop_FLMUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/flmusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FLMUSDT) 
	ws.run_forever() 


Thread(target=loop_FLMUSDT).start() 
symbol_g_ORNUSDT = 'ORNUSDT' 
price_bids_g_ORNUSDT = Decimal('0.0') 
qty_bids_g_ORNUSDT = Decimal('0.0') 
price_asks_g_ORNUSDT = Decimal('0.0') 
qty_asks_g_ORNUSDT = Decimal('0.0') 
stepSize_g_ORNUSDT = Decimal('0.1') 


def on_message_ORNUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ORNUSDT = 'ORNUSDT' 
	price_bids_c_l_ORNUSDT = data['b'] 
	qty_bids_c_l_ORNUSDT = data['B'] 
	price_asks_c_l_ORNUSDT = data['a'] 
	qty_asks_c_l_ORNUSDT = data['A'] 

	global symbol_g_ORNUSDT 
	global price_bids_g_ORNUSDT 
	global qty_bids_g_ORNUSDT 
	global price_asks_g_ORNUSDT 
	global qty_asks_g_ORNUSDT 

	symbol_g_ORNUSDT = symbol_c_l_ORNUSDT 
	price_bids_g_ORNUSDT = Decimal(price_bids_c_l_ORNUSDT) 
	qty_bids_g_ORNUSDT = Decimal(qty_bids_c_l_ORNUSDT) 
	price_asks_g_ORNUSDT = Decimal(price_asks_c_l_ORNUSDT) 
	qty_asks_g_ORNUSDT = Decimal(qty_asks_c_l_ORNUSDT) 


def loop_ORNUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ornusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ORNUSDT) 
	ws.run_forever() 


Thread(target=loop_ORNUSDT).start() 
symbol_g_UTKUSDT = 'UTKUSDT' 
price_bids_g_UTKUSDT = Decimal('0.0') 
qty_bids_g_UTKUSDT = Decimal('0.0') 
price_asks_g_UTKUSDT = Decimal('0.0') 
qty_asks_g_UTKUSDT = Decimal('0.0') 
stepSize_g_UTKUSDT = Decimal('1.0') 


def on_message_UTKUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UTKUSDT = 'UTKUSDT' 
	price_bids_c_l_UTKUSDT = data['b'] 
	qty_bids_c_l_UTKUSDT = data['B'] 
	price_asks_c_l_UTKUSDT = data['a'] 
	qty_asks_c_l_UTKUSDT = data['A'] 

	global symbol_g_UTKUSDT 
	global price_bids_g_UTKUSDT 
	global qty_bids_g_UTKUSDT 
	global price_asks_g_UTKUSDT 
	global qty_asks_g_UTKUSDT 

	symbol_g_UTKUSDT = symbol_c_l_UTKUSDT 
	price_bids_g_UTKUSDT = Decimal(price_bids_c_l_UTKUSDT) 
	qty_bids_g_UTKUSDT = Decimal(qty_bids_c_l_UTKUSDT) 
	price_asks_g_UTKUSDT = Decimal(price_asks_c_l_UTKUSDT) 
	qty_asks_g_UTKUSDT = Decimal(qty_asks_c_l_UTKUSDT) 


def loop_UTKUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/utkusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UTKUSDT) 
	ws.run_forever() 


Thread(target=loop_UTKUSDT).start() 
symbol_g_XVSUSDT = 'XVSUSDT' 
price_bids_g_XVSUSDT = Decimal('0.0') 
qty_bids_g_XVSUSDT = Decimal('0.0') 
price_asks_g_XVSUSDT = Decimal('0.0') 
qty_asks_g_XVSUSDT = Decimal('0.0') 
stepSize_g_XVSUSDT = Decimal('0.01') 


def on_message_XVSUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XVSUSDT = 'XVSUSDT' 
	price_bids_c_l_XVSUSDT = data['b'] 
	qty_bids_c_l_XVSUSDT = data['B'] 
	price_asks_c_l_XVSUSDT = data['a'] 
	qty_asks_c_l_XVSUSDT = data['A'] 

	global symbol_g_XVSUSDT 
	global price_bids_g_XVSUSDT 
	global qty_bids_g_XVSUSDT 
	global price_asks_g_XVSUSDT 
	global qty_asks_g_XVSUSDT 

	symbol_g_XVSUSDT = symbol_c_l_XVSUSDT 
	price_bids_g_XVSUSDT = Decimal(price_bids_c_l_XVSUSDT) 
	qty_bids_g_XVSUSDT = Decimal(qty_bids_c_l_XVSUSDT) 
	price_asks_g_XVSUSDT = Decimal(price_asks_c_l_XVSUSDT) 
	qty_asks_g_XVSUSDT = Decimal(qty_asks_c_l_XVSUSDT) 


def loop_XVSUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xvsusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XVSUSDT) 
	ws.run_forever() 


Thread(target=loop_XVSUSDT).start() 
symbol_g_ALPHAUSDT = 'ALPHAUSDT' 
price_bids_g_ALPHAUSDT = Decimal('0.0') 
qty_bids_g_ALPHAUSDT = Decimal('0.0') 
price_asks_g_ALPHAUSDT = Decimal('0.0') 
qty_asks_g_ALPHAUSDT = Decimal('0.0') 
stepSize_g_ALPHAUSDT = Decimal('1.0') 


def on_message_ALPHAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALPHAUSDT = 'ALPHAUSDT' 
	price_bids_c_l_ALPHAUSDT = data['b'] 
	qty_bids_c_l_ALPHAUSDT = data['B'] 
	price_asks_c_l_ALPHAUSDT = data['a'] 
	qty_asks_c_l_ALPHAUSDT = data['A'] 

	global symbol_g_ALPHAUSDT 
	global price_bids_g_ALPHAUSDT 
	global qty_bids_g_ALPHAUSDT 
	global price_asks_g_ALPHAUSDT 
	global qty_asks_g_ALPHAUSDT 

	symbol_g_ALPHAUSDT = symbol_c_l_ALPHAUSDT 
	price_bids_g_ALPHAUSDT = Decimal(price_bids_c_l_ALPHAUSDT) 
	qty_bids_g_ALPHAUSDT = Decimal(qty_bids_c_l_ALPHAUSDT) 
	price_asks_g_ALPHAUSDT = Decimal(price_asks_c_l_ALPHAUSDT) 
	qty_asks_g_ALPHAUSDT = Decimal(qty_asks_c_l_ALPHAUSDT) 


def loop_ALPHAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alphausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALPHAUSDT) 
	ws.run_forever() 


Thread(target=loop_ALPHAUSDT).start() 
symbol_g_AAVEUSDT = 'AAVEUSDT' 
price_bids_g_AAVEUSDT = Decimal('0.0') 
qty_bids_g_AAVEUSDT = Decimal('0.0') 
price_asks_g_AAVEUSDT = Decimal('0.0') 
qty_asks_g_AAVEUSDT = Decimal('0.0') 
stepSize_g_AAVEUSDT = Decimal('0.001') 


def on_message_AAVEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AAVEUSDT = 'AAVEUSDT' 
	price_bids_c_l_AAVEUSDT = data['b'] 
	qty_bids_c_l_AAVEUSDT = data['B'] 
	price_asks_c_l_AAVEUSDT = data['a'] 
	qty_asks_c_l_AAVEUSDT = data['A'] 

	global symbol_g_AAVEUSDT 
	global price_bids_g_AAVEUSDT 
	global qty_bids_g_AAVEUSDT 
	global price_asks_g_AAVEUSDT 
	global qty_asks_g_AAVEUSDT 

	symbol_g_AAVEUSDT = symbol_c_l_AAVEUSDT 
	price_bids_g_AAVEUSDT = Decimal(price_bids_c_l_AAVEUSDT) 
	qty_bids_g_AAVEUSDT = Decimal(qty_bids_c_l_AAVEUSDT) 
	price_asks_g_AAVEUSDT = Decimal(price_asks_c_l_AAVEUSDT) 
	qty_asks_g_AAVEUSDT = Decimal(qty_asks_c_l_AAVEUSDT) 


def loop_AAVEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/aaveusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AAVEUSDT) 
	ws.run_forever() 


Thread(target=loop_AAVEUSDT).start() 
symbol_g_CTKUSDT = 'CTKUSDT' 
price_bids_g_CTKUSDT = Decimal('0.0') 
qty_bids_g_CTKUSDT = Decimal('0.0') 
price_asks_g_CTKUSDT = Decimal('0.0') 
qty_asks_g_CTKUSDT = Decimal('0.0') 
stepSize_g_CTKUSDT = Decimal('0.1') 


def on_message_CTKUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CTKUSDT = 'CTKUSDT' 
	price_bids_c_l_CTKUSDT = data['b'] 
	qty_bids_c_l_CTKUSDT = data['B'] 
	price_asks_c_l_CTKUSDT = data['a'] 
	qty_asks_c_l_CTKUSDT = data['A'] 

	global symbol_g_CTKUSDT 
	global price_bids_g_CTKUSDT 
	global qty_bids_g_CTKUSDT 
	global price_asks_g_CTKUSDT 
	global qty_asks_g_CTKUSDT 

	symbol_g_CTKUSDT = symbol_c_l_CTKUSDT 
	price_bids_g_CTKUSDT = Decimal(price_bids_c_l_CTKUSDT) 
	qty_bids_g_CTKUSDT = Decimal(qty_bids_c_l_CTKUSDT) 
	price_asks_g_CTKUSDT = Decimal(price_asks_c_l_CTKUSDT) 
	qty_asks_g_CTKUSDT = Decimal(qty_asks_c_l_CTKUSDT) 


def loop_CTKUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ctkusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CTKUSDT) 
	ws.run_forever() 


Thread(target=loop_CTKUSDT).start() 
symbol_g_AKROUSDT = 'AKROUSDT' 
price_bids_g_AKROUSDT = Decimal('0.0') 
qty_bids_g_AKROUSDT = Decimal('0.0') 
price_asks_g_AKROUSDT = Decimal('0.0') 
qty_asks_g_AKROUSDT = Decimal('0.0') 
stepSize_g_AKROUSDT = Decimal('1.0') 


def on_message_AKROUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AKROUSDT = 'AKROUSDT' 
	price_bids_c_l_AKROUSDT = data['b'] 
	qty_bids_c_l_AKROUSDT = data['B'] 
	price_asks_c_l_AKROUSDT = data['a'] 
	qty_asks_c_l_AKROUSDT = data['A'] 

	global symbol_g_AKROUSDT 
	global price_bids_g_AKROUSDT 
	global qty_bids_g_AKROUSDT 
	global price_asks_g_AKROUSDT 
	global qty_asks_g_AKROUSDT 

	symbol_g_AKROUSDT = symbol_c_l_AKROUSDT 
	price_bids_g_AKROUSDT = Decimal(price_bids_c_l_AKROUSDT) 
	qty_bids_g_AKROUSDT = Decimal(qty_bids_c_l_AKROUSDT) 
	price_asks_g_AKROUSDT = Decimal(price_asks_c_l_AKROUSDT) 
	qty_asks_g_AKROUSDT = Decimal(qty_asks_c_l_AKROUSDT) 


def loop_AKROUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/akrousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AKROUSDT) 
	ws.run_forever() 


Thread(target=loop_AKROUSDT).start() 
symbol_g_HARDUSDT = 'HARDUSDT' 
price_bids_g_HARDUSDT = Decimal('0.0') 
qty_bids_g_HARDUSDT = Decimal('0.0') 
price_asks_g_HARDUSDT = Decimal('0.0') 
qty_asks_g_HARDUSDT = Decimal('0.0') 
stepSize_g_HARDUSDT = Decimal('1.0') 


def on_message_HARDUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HARDUSDT = 'HARDUSDT' 
	price_bids_c_l_HARDUSDT = data['b'] 
	qty_bids_c_l_HARDUSDT = data['B'] 
	price_asks_c_l_HARDUSDT = data['a'] 
	qty_asks_c_l_HARDUSDT = data['A'] 

	global symbol_g_HARDUSDT 
	global price_bids_g_HARDUSDT 
	global qty_bids_g_HARDUSDT 
	global price_asks_g_HARDUSDT 
	global qty_asks_g_HARDUSDT 

	symbol_g_HARDUSDT = symbol_c_l_HARDUSDT 
	price_bids_g_HARDUSDT = Decimal(price_bids_c_l_HARDUSDT) 
	qty_bids_g_HARDUSDT = Decimal(qty_bids_c_l_HARDUSDT) 
	price_asks_g_HARDUSDT = Decimal(price_asks_c_l_HARDUSDT) 
	qty_asks_g_HARDUSDT = Decimal(qty_asks_c_l_HARDUSDT) 


def loop_HARDUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hardusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HARDUSDT) 
	ws.run_forever() 


Thread(target=loop_HARDUSDT).start() 
symbol_g_STRAXUSDT = 'STRAXUSDT' 
price_bids_g_STRAXUSDT = Decimal('0.0') 
qty_bids_g_STRAXUSDT = Decimal('0.0') 
price_asks_g_STRAXUSDT = Decimal('0.0') 
qty_asks_g_STRAXUSDT = Decimal('0.0') 
stepSize_g_STRAXUSDT = Decimal('0.1') 


def on_message_STRAXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STRAXUSDT = 'STRAXUSDT' 
	price_bids_c_l_STRAXUSDT = data['b'] 
	qty_bids_c_l_STRAXUSDT = data['B'] 
	price_asks_c_l_STRAXUSDT = data['a'] 
	qty_asks_c_l_STRAXUSDT = data['A'] 

	global symbol_g_STRAXUSDT 
	global price_bids_g_STRAXUSDT 
	global qty_bids_g_STRAXUSDT 
	global price_asks_g_STRAXUSDT 
	global qty_asks_g_STRAXUSDT 

	symbol_g_STRAXUSDT = symbol_c_l_STRAXUSDT 
	price_bids_g_STRAXUSDT = Decimal(price_bids_c_l_STRAXUSDT) 
	qty_bids_g_STRAXUSDT = Decimal(qty_bids_c_l_STRAXUSDT) 
	price_asks_g_STRAXUSDT = Decimal(price_asks_c_l_STRAXUSDT) 
	qty_asks_g_STRAXUSDT = Decimal(qty_asks_c_l_STRAXUSDT) 


def loop_STRAXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/straxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STRAXUSDT) 
	ws.run_forever() 


Thread(target=loop_STRAXUSDT).start() 
symbol_g_UNFIUSDT = 'UNFIUSDT' 
price_bids_g_UNFIUSDT = Decimal('0.0') 
qty_bids_g_UNFIUSDT = Decimal('0.0') 
price_asks_g_UNFIUSDT = Decimal('0.0') 
qty_asks_g_UNFIUSDT = Decimal('0.0') 
stepSize_g_UNFIUSDT = Decimal('0.1') 


def on_message_UNFIUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UNFIUSDT = 'UNFIUSDT' 
	price_bids_c_l_UNFIUSDT = data['b'] 
	qty_bids_c_l_UNFIUSDT = data['B'] 
	price_asks_c_l_UNFIUSDT = data['a'] 
	qty_asks_c_l_UNFIUSDT = data['A'] 

	global symbol_g_UNFIUSDT 
	global price_bids_g_UNFIUSDT 
	global qty_bids_g_UNFIUSDT 
	global price_asks_g_UNFIUSDT 
	global qty_asks_g_UNFIUSDT 

	symbol_g_UNFIUSDT = symbol_c_l_UNFIUSDT 
	price_bids_g_UNFIUSDT = Decimal(price_bids_c_l_UNFIUSDT) 
	qty_bids_g_UNFIUSDT = Decimal(qty_bids_c_l_UNFIUSDT) 
	price_asks_g_UNFIUSDT = Decimal(price_asks_c_l_UNFIUSDT) 
	qty_asks_g_UNFIUSDT = Decimal(qty_asks_c_l_UNFIUSDT) 


def loop_UNFIUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/unfiusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UNFIUSDT) 
	ws.run_forever() 


Thread(target=loop_UNFIUSDT).start() 
symbol_g_AVAUSDT = 'AVAUSDT' 
price_bids_g_AVAUSDT = Decimal('0.0') 
qty_bids_g_AVAUSDT = Decimal('0.0') 
price_asks_g_AVAUSDT = Decimal('0.0') 
qty_asks_g_AVAUSDT = Decimal('0.0') 
stepSize_g_AVAUSDT = Decimal('0.1') 


def on_message_AVAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AVAUSDT = 'AVAUSDT' 
	price_bids_c_l_AVAUSDT = data['b'] 
	qty_bids_c_l_AVAUSDT = data['B'] 
	price_asks_c_l_AVAUSDT = data['a'] 
	qty_asks_c_l_AVAUSDT = data['A'] 

	global symbol_g_AVAUSDT 
	global price_bids_g_AVAUSDT 
	global qty_bids_g_AVAUSDT 
	global price_asks_g_AVAUSDT 
	global qty_asks_g_AVAUSDT 

	symbol_g_AVAUSDT = symbol_c_l_AVAUSDT 
	price_bids_g_AVAUSDT = Decimal(price_bids_c_l_AVAUSDT) 
	qty_bids_g_AVAUSDT = Decimal(qty_bids_c_l_AVAUSDT) 
	price_asks_g_AVAUSDT = Decimal(price_asks_c_l_AVAUSDT) 
	qty_asks_g_AVAUSDT = Decimal(qty_asks_c_l_AVAUSDT) 


def loop_AVAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/avausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AVAUSDT) 
	ws.run_forever() 


Thread(target=loop_AVAUSDT).start() 
symbol_g_SKLUSDT = 'SKLUSDT' 
price_bids_g_SKLUSDT = Decimal('0.0') 
qty_bids_g_SKLUSDT = Decimal('0.0') 
price_asks_g_SKLUSDT = Decimal('0.0') 
qty_asks_g_SKLUSDT = Decimal('0.0') 
stepSize_g_SKLUSDT = Decimal('1.0') 


def on_message_SKLUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SKLUSDT = 'SKLUSDT' 
	price_bids_c_l_SKLUSDT = data['b'] 
	qty_bids_c_l_SKLUSDT = data['B'] 
	price_asks_c_l_SKLUSDT = data['a'] 
	qty_asks_c_l_SKLUSDT = data['A'] 

	global symbol_g_SKLUSDT 
	global price_bids_g_SKLUSDT 
	global qty_bids_g_SKLUSDT 
	global price_asks_g_SKLUSDT 
	global qty_asks_g_SKLUSDT 

	symbol_g_SKLUSDT = symbol_c_l_SKLUSDT 
	price_bids_g_SKLUSDT = Decimal(price_bids_c_l_SKLUSDT) 
	qty_bids_g_SKLUSDT = Decimal(qty_bids_c_l_SKLUSDT) 
	price_asks_g_SKLUSDT = Decimal(price_asks_c_l_SKLUSDT) 
	qty_asks_g_SKLUSDT = Decimal(qty_asks_c_l_SKLUSDT) 


def loop_SKLUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sklusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SKLUSDT) 
	ws.run_forever() 


Thread(target=loop_SKLUSDT).start() 
symbol_g_JUVUSDT = 'JUVUSDT' 
price_bids_g_JUVUSDT = Decimal('0.0') 
qty_bids_g_JUVUSDT = Decimal('0.0') 
price_asks_g_JUVUSDT = Decimal('0.0') 
qty_asks_g_JUVUSDT = Decimal('0.0') 
stepSize_g_JUVUSDT = Decimal('0.01') 


def on_message_JUVUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JUVUSDT = 'JUVUSDT' 
	price_bids_c_l_JUVUSDT = data['b'] 
	qty_bids_c_l_JUVUSDT = data['B'] 
	price_asks_c_l_JUVUSDT = data['a'] 
	qty_asks_c_l_JUVUSDT = data['A'] 

	global symbol_g_JUVUSDT 
	global price_bids_g_JUVUSDT 
	global qty_bids_g_JUVUSDT 
	global price_asks_g_JUVUSDT 
	global qty_asks_g_JUVUSDT 

	symbol_g_JUVUSDT = symbol_c_l_JUVUSDT 
	price_bids_g_JUVUSDT = Decimal(price_bids_c_l_JUVUSDT) 
	qty_bids_g_JUVUSDT = Decimal(qty_bids_c_l_JUVUSDT) 
	price_asks_g_JUVUSDT = Decimal(price_asks_c_l_JUVUSDT) 
	qty_asks_g_JUVUSDT = Decimal(qty_asks_c_l_JUVUSDT) 


def loop_JUVUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/juvusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JUVUSDT) 
	ws.run_forever() 


Thread(target=loop_JUVUSDT).start() 
symbol_g_PSGUSDT = 'PSGUSDT' 
price_bids_g_PSGUSDT = Decimal('0.0') 
qty_bids_g_PSGUSDT = Decimal('0.0') 
price_asks_g_PSGUSDT = Decimal('0.0') 
qty_asks_g_PSGUSDT = Decimal('0.0') 
stepSize_g_PSGUSDT = Decimal('0.01') 


def on_message_PSGUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PSGUSDT = 'PSGUSDT' 
	price_bids_c_l_PSGUSDT = data['b'] 
	qty_bids_c_l_PSGUSDT = data['B'] 
	price_asks_c_l_PSGUSDT = data['a'] 
	qty_asks_c_l_PSGUSDT = data['A'] 

	global symbol_g_PSGUSDT 
	global price_bids_g_PSGUSDT 
	global qty_bids_g_PSGUSDT 
	global price_asks_g_PSGUSDT 
	global qty_asks_g_PSGUSDT 

	symbol_g_PSGUSDT = symbol_c_l_PSGUSDT 
	price_bids_g_PSGUSDT = Decimal(price_bids_c_l_PSGUSDT) 
	qty_bids_g_PSGUSDT = Decimal(qty_bids_c_l_PSGUSDT) 
	price_asks_g_PSGUSDT = Decimal(price_asks_c_l_PSGUSDT) 
	qty_asks_g_PSGUSDT = Decimal(qty_asks_c_l_PSGUSDT) 


def loop_PSGUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/psgusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PSGUSDT) 
	ws.run_forever() 


Thread(target=loop_PSGUSDT).start() 
symbol_g_1INCHUSDT = '1INCHUSDT' 
price_bids_g_1INCHUSDT = Decimal('0.0') 
qty_bids_g_1INCHUSDT = Decimal('0.0') 
price_asks_g_1INCHUSDT = Decimal('0.0') 
qty_asks_g_1INCHUSDT = Decimal('0.0') 
stepSize_g_1INCHUSDT = Decimal('0.1') 


def on_message_1INCHUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_1INCHUSDT = '1INCHUSDT' 
	price_bids_c_l_1INCHUSDT = data['b'] 
	qty_bids_c_l_1INCHUSDT = data['B'] 
	price_asks_c_l_1INCHUSDT = data['a'] 
	qty_asks_c_l_1INCHUSDT = data['A'] 

	global symbol_g_1INCHUSDT 
	global price_bids_g_1INCHUSDT 
	global qty_bids_g_1INCHUSDT 
	global price_asks_g_1INCHUSDT 
	global qty_asks_g_1INCHUSDT 

	symbol_g_1INCHUSDT = symbol_c_l_1INCHUSDT 
	price_bids_g_1INCHUSDT = Decimal(price_bids_c_l_1INCHUSDT) 
	qty_bids_g_1INCHUSDT = Decimal(qty_bids_c_l_1INCHUSDT) 
	price_asks_g_1INCHUSDT = Decimal(price_asks_c_l_1INCHUSDT) 
	qty_asks_g_1INCHUSDT = Decimal(qty_asks_c_l_1INCHUSDT) 


def loop_1INCHUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/1inchusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_1INCHUSDT) 
	ws.run_forever() 


Thread(target=loop_1INCHUSDT).start() 
symbol_g_OGUSDT = 'OGUSDT' 
price_bids_g_OGUSDT = Decimal('0.0') 
qty_bids_g_OGUSDT = Decimal('0.0') 
price_asks_g_OGUSDT = Decimal('0.0') 
qty_asks_g_OGUSDT = Decimal('0.0') 
stepSize_g_OGUSDT = Decimal('0.1') 


def on_message_OGUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OGUSDT = 'OGUSDT' 
	price_bids_c_l_OGUSDT = data['b'] 
	qty_bids_c_l_OGUSDT = data['B'] 
	price_asks_c_l_OGUSDT = data['a'] 
	qty_asks_c_l_OGUSDT = data['A'] 

	global symbol_g_OGUSDT 
	global price_bids_g_OGUSDT 
	global qty_bids_g_OGUSDT 
	global price_asks_g_OGUSDT 
	global qty_asks_g_OGUSDT 

	symbol_g_OGUSDT = symbol_c_l_OGUSDT 
	price_bids_g_OGUSDT = Decimal(price_bids_c_l_OGUSDT) 
	qty_bids_g_OGUSDT = Decimal(qty_bids_c_l_OGUSDT) 
	price_asks_g_OGUSDT = Decimal(price_asks_c_l_OGUSDT) 
	qty_asks_g_OGUSDT = Decimal(qty_asks_c_l_OGUSDT) 


def loop_OGUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ogusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OGUSDT) 
	ws.run_forever() 


Thread(target=loop_OGUSDT).start() 
symbol_g_ATMUSDT = 'ATMUSDT' 
price_bids_g_ATMUSDT = Decimal('0.0') 
qty_bids_g_ATMUSDT = Decimal('0.0') 
price_asks_g_ATMUSDT = Decimal('0.0') 
qty_asks_g_ATMUSDT = Decimal('0.0') 
stepSize_g_ATMUSDT = Decimal('0.01') 


def on_message_ATMUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATMUSDT = 'ATMUSDT' 
	price_bids_c_l_ATMUSDT = data['b'] 
	qty_bids_c_l_ATMUSDT = data['B'] 
	price_asks_c_l_ATMUSDT = data['a'] 
	qty_asks_c_l_ATMUSDT = data['A'] 

	global symbol_g_ATMUSDT 
	global price_bids_g_ATMUSDT 
	global qty_bids_g_ATMUSDT 
	global price_asks_g_ATMUSDT 
	global qty_asks_g_ATMUSDT 

	symbol_g_ATMUSDT = symbol_c_l_ATMUSDT 
	price_bids_g_ATMUSDT = Decimal(price_bids_c_l_ATMUSDT) 
	qty_bids_g_ATMUSDT = Decimal(qty_bids_c_l_ATMUSDT) 
	price_asks_g_ATMUSDT = Decimal(price_asks_c_l_ATMUSDT) 
	qty_asks_g_ATMUSDT = Decimal(qty_asks_c_l_ATMUSDT) 


def loop_ATMUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atmusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATMUSDT) 
	ws.run_forever() 


Thread(target=loop_ATMUSDT).start() 
symbol_g_ASRUSDT = 'ASRUSDT' 
price_bids_g_ASRUSDT = Decimal('0.0') 
qty_bids_g_ASRUSDT = Decimal('0.0') 
price_asks_g_ASRUSDT = Decimal('0.0') 
qty_asks_g_ASRUSDT = Decimal('0.0') 
stepSize_g_ASRUSDT = Decimal('0.1') 


def on_message_ASRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ASRUSDT = 'ASRUSDT' 
	price_bids_c_l_ASRUSDT = data['b'] 
	qty_bids_c_l_ASRUSDT = data['B'] 
	price_asks_c_l_ASRUSDT = data['a'] 
	qty_asks_c_l_ASRUSDT = data['A'] 

	global symbol_g_ASRUSDT 
	global price_bids_g_ASRUSDT 
	global qty_bids_g_ASRUSDT 
	global price_asks_g_ASRUSDT 
	global qty_asks_g_ASRUSDT 

	symbol_g_ASRUSDT = symbol_c_l_ASRUSDT 
	price_bids_g_ASRUSDT = Decimal(price_bids_c_l_ASRUSDT) 
	qty_bids_g_ASRUSDT = Decimal(qty_bids_c_l_ASRUSDT) 
	price_asks_g_ASRUSDT = Decimal(price_asks_c_l_ASRUSDT) 
	qty_asks_g_ASRUSDT = Decimal(qty_asks_c_l_ASRUSDT) 


def loop_ASRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/asrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ASRUSDT) 
	ws.run_forever() 


Thread(target=loop_ASRUSDT).start() 
symbol_g_CELOUSDT = 'CELOUSDT' 
price_bids_g_CELOUSDT = Decimal('0.0') 
qty_bids_g_CELOUSDT = Decimal('0.0') 
price_asks_g_CELOUSDT = Decimal('0.0') 
qty_asks_g_CELOUSDT = Decimal('0.0') 
stepSize_g_CELOUSDT = Decimal('0.1') 


def on_message_CELOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CELOUSDT = 'CELOUSDT' 
	price_bids_c_l_CELOUSDT = data['b'] 
	qty_bids_c_l_CELOUSDT = data['B'] 
	price_asks_c_l_CELOUSDT = data['a'] 
	qty_asks_c_l_CELOUSDT = data['A'] 

	global symbol_g_CELOUSDT 
	global price_bids_g_CELOUSDT 
	global qty_bids_g_CELOUSDT 
	global price_asks_g_CELOUSDT 
	global qty_asks_g_CELOUSDT 

	symbol_g_CELOUSDT = symbol_c_l_CELOUSDT 
	price_bids_g_CELOUSDT = Decimal(price_bids_c_l_CELOUSDT) 
	qty_bids_g_CELOUSDT = Decimal(qty_bids_c_l_CELOUSDT) 
	price_asks_g_CELOUSDT = Decimal(price_asks_c_l_CELOUSDT) 
	qty_asks_g_CELOUSDT = Decimal(qty_asks_c_l_CELOUSDT) 


def loop_CELOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/celousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CELOUSDT) 
	ws.run_forever() 


Thread(target=loop_CELOUSDT).start() 
symbol_g_RIFUSDT = 'RIFUSDT' 
price_bids_g_RIFUSDT = Decimal('0.0') 
qty_bids_g_RIFUSDT = Decimal('0.0') 
price_asks_g_RIFUSDT = Decimal('0.0') 
qty_asks_g_RIFUSDT = Decimal('0.0') 
stepSize_g_RIFUSDT = Decimal('1.0') 


def on_message_RIFUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RIFUSDT = 'RIFUSDT' 
	price_bids_c_l_RIFUSDT = data['b'] 
	qty_bids_c_l_RIFUSDT = data['B'] 
	price_asks_c_l_RIFUSDT = data['a'] 
	qty_asks_c_l_RIFUSDT = data['A'] 

	global symbol_g_RIFUSDT 
	global price_bids_g_RIFUSDT 
	global qty_bids_g_RIFUSDT 
	global price_asks_g_RIFUSDT 
	global qty_asks_g_RIFUSDT 

	symbol_g_RIFUSDT = symbol_c_l_RIFUSDT 
	price_bids_g_RIFUSDT = Decimal(price_bids_c_l_RIFUSDT) 
	qty_bids_g_RIFUSDT = Decimal(qty_bids_c_l_RIFUSDT) 
	price_asks_g_RIFUSDT = Decimal(price_asks_c_l_RIFUSDT) 
	qty_asks_g_RIFUSDT = Decimal(qty_asks_c_l_RIFUSDT) 


def loop_RIFUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rifusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RIFUSDT) 
	ws.run_forever() 


Thread(target=loop_RIFUSDT).start() 
symbol_g_CKBUSDT = 'CKBUSDT' 
price_bids_g_CKBUSDT = Decimal('0.0') 
qty_bids_g_CKBUSDT = Decimal('0.0') 
price_asks_g_CKBUSDT = Decimal('0.0') 
qty_asks_g_CKBUSDT = Decimal('0.0') 
stepSize_g_CKBUSDT = Decimal('1.0') 


def on_message_CKBUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CKBUSDT = 'CKBUSDT' 
	price_bids_c_l_CKBUSDT = data['b'] 
	qty_bids_c_l_CKBUSDT = data['B'] 
	price_asks_c_l_CKBUSDT = data['a'] 
	qty_asks_c_l_CKBUSDT = data['A'] 

	global symbol_g_CKBUSDT 
	global price_bids_g_CKBUSDT 
	global qty_bids_g_CKBUSDT 
	global price_asks_g_CKBUSDT 
	global qty_asks_g_CKBUSDT 

	symbol_g_CKBUSDT = symbol_c_l_CKBUSDT 
	price_bids_g_CKBUSDT = Decimal(price_bids_c_l_CKBUSDT) 
	qty_bids_g_CKBUSDT = Decimal(qty_bids_c_l_CKBUSDT) 
	price_asks_g_CKBUSDT = Decimal(price_asks_c_l_CKBUSDT) 
	qty_asks_g_CKBUSDT = Decimal(qty_asks_c_l_CKBUSDT) 


def loop_CKBUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ckbusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CKBUSDT) 
	ws.run_forever() 


Thread(target=loop_CKBUSDT).start() 
symbol_g_FIROUSDT = 'FIROUSDT' 
price_bids_g_FIROUSDT = Decimal('0.0') 
qty_bids_g_FIROUSDT = Decimal('0.0') 
price_asks_g_FIROUSDT = Decimal('0.0') 
qty_asks_g_FIROUSDT = Decimal('0.0') 
stepSize_g_FIROUSDT = Decimal('0.1') 


def on_message_FIROUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FIROUSDT = 'FIROUSDT' 
	price_bids_c_l_FIROUSDT = data['b'] 
	qty_bids_c_l_FIROUSDT = data['B'] 
	price_asks_c_l_FIROUSDT = data['a'] 
	qty_asks_c_l_FIROUSDT = data['A'] 

	global symbol_g_FIROUSDT 
	global price_bids_g_FIROUSDT 
	global qty_bids_g_FIROUSDT 
	global price_asks_g_FIROUSDT 
	global qty_asks_g_FIROUSDT 

	symbol_g_FIROUSDT = symbol_c_l_FIROUSDT 
	price_bids_g_FIROUSDT = Decimal(price_bids_c_l_FIROUSDT) 
	qty_bids_g_FIROUSDT = Decimal(qty_bids_c_l_FIROUSDT) 
	price_asks_g_FIROUSDT = Decimal(price_asks_c_l_FIROUSDT) 
	qty_asks_g_FIROUSDT = Decimal(qty_asks_c_l_FIROUSDT) 


def loop_FIROUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/firousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FIROUSDT) 
	ws.run_forever() 


Thread(target=loop_FIROUSDT).start() 
symbol_g_LITUSDT = 'LITUSDT' 
price_bids_g_LITUSDT = Decimal('0.0') 
qty_bids_g_LITUSDT = Decimal('0.0') 
price_asks_g_LITUSDT = Decimal('0.0') 
qty_asks_g_LITUSDT = Decimal('0.0') 
stepSize_g_LITUSDT = Decimal('0.1') 


def on_message_LITUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LITUSDT = 'LITUSDT' 
	price_bids_c_l_LITUSDT = data['b'] 
	qty_bids_c_l_LITUSDT = data['B'] 
	price_asks_c_l_LITUSDT = data['a'] 
	qty_asks_c_l_LITUSDT = data['A'] 

	global symbol_g_LITUSDT 
	global price_bids_g_LITUSDT 
	global qty_bids_g_LITUSDT 
	global price_asks_g_LITUSDT 
	global qty_asks_g_LITUSDT 

	symbol_g_LITUSDT = symbol_c_l_LITUSDT 
	price_bids_g_LITUSDT = Decimal(price_bids_c_l_LITUSDT) 
	qty_bids_g_LITUSDT = Decimal(qty_bids_c_l_LITUSDT) 
	price_asks_g_LITUSDT = Decimal(price_asks_c_l_LITUSDT) 
	qty_asks_g_LITUSDT = Decimal(qty_asks_c_l_LITUSDT) 


def loop_LITUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/litusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LITUSDT) 
	ws.run_forever() 


Thread(target=loop_LITUSDT).start() 
symbol_g_SFPUSDT = 'SFPUSDT' 
price_bids_g_SFPUSDT = Decimal('0.0') 
qty_bids_g_SFPUSDT = Decimal('0.0') 
price_asks_g_SFPUSDT = Decimal('0.0') 
qty_asks_g_SFPUSDT = Decimal('0.0') 
stepSize_g_SFPUSDT = Decimal('1.0') 


def on_message_SFPUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SFPUSDT = 'SFPUSDT' 
	price_bids_c_l_SFPUSDT = data['b'] 
	qty_bids_c_l_SFPUSDT = data['B'] 
	price_asks_c_l_SFPUSDT = data['a'] 
	qty_asks_c_l_SFPUSDT = data['A'] 

	global symbol_g_SFPUSDT 
	global price_bids_g_SFPUSDT 
	global qty_bids_g_SFPUSDT 
	global price_asks_g_SFPUSDT 
	global qty_asks_g_SFPUSDT 

	symbol_g_SFPUSDT = symbol_c_l_SFPUSDT 
	price_bids_g_SFPUSDT = Decimal(price_bids_c_l_SFPUSDT) 
	qty_bids_g_SFPUSDT = Decimal(qty_bids_c_l_SFPUSDT) 
	price_asks_g_SFPUSDT = Decimal(price_asks_c_l_SFPUSDT) 
	qty_asks_g_SFPUSDT = Decimal(qty_asks_c_l_SFPUSDT) 


def loop_SFPUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sfpusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SFPUSDT) 
	ws.run_forever() 


Thread(target=loop_SFPUSDT).start() 
symbol_g_DODOUSDT = 'DODOUSDT' 
price_bids_g_DODOUSDT = Decimal('0.0') 
qty_bids_g_DODOUSDT = Decimal('0.0') 
price_asks_g_DODOUSDT = Decimal('0.0') 
qty_asks_g_DODOUSDT = Decimal('0.0') 
stepSize_g_DODOUSDT = Decimal('0.1') 


def on_message_DODOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DODOUSDT = 'DODOUSDT' 
	price_bids_c_l_DODOUSDT = data['b'] 
	qty_bids_c_l_DODOUSDT = data['B'] 
	price_asks_c_l_DODOUSDT = data['a'] 
	qty_asks_c_l_DODOUSDT = data['A'] 

	global symbol_g_DODOUSDT 
	global price_bids_g_DODOUSDT 
	global qty_bids_g_DODOUSDT 
	global price_asks_g_DODOUSDT 
	global qty_asks_g_DODOUSDT 

	symbol_g_DODOUSDT = symbol_c_l_DODOUSDT 
	price_bids_g_DODOUSDT = Decimal(price_bids_c_l_DODOUSDT) 
	qty_bids_g_DODOUSDT = Decimal(qty_bids_c_l_DODOUSDT) 
	price_asks_g_DODOUSDT = Decimal(price_asks_c_l_DODOUSDT) 
	qty_asks_g_DODOUSDT = Decimal(qty_asks_c_l_DODOUSDT) 


def loop_DODOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dodousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DODOUSDT) 
	ws.run_forever() 


Thread(target=loop_DODOUSDT).start() 
symbol_g_CAKEUSDT = 'CAKEUSDT' 
price_bids_g_CAKEUSDT = Decimal('0.0') 
qty_bids_g_CAKEUSDT = Decimal('0.0') 
price_asks_g_CAKEUSDT = Decimal('0.0') 
qty_asks_g_CAKEUSDT = Decimal('0.0') 
stepSize_g_CAKEUSDT = Decimal('0.01') 


def on_message_CAKEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CAKEUSDT = 'CAKEUSDT' 
	price_bids_c_l_CAKEUSDT = data['b'] 
	qty_bids_c_l_CAKEUSDT = data['B'] 
	price_asks_c_l_CAKEUSDT = data['a'] 
	qty_asks_c_l_CAKEUSDT = data['A'] 

	global symbol_g_CAKEUSDT 
	global price_bids_g_CAKEUSDT 
	global qty_bids_g_CAKEUSDT 
	global price_asks_g_CAKEUSDT 
	global qty_asks_g_CAKEUSDT 

	symbol_g_CAKEUSDT = symbol_c_l_CAKEUSDT 
	price_bids_g_CAKEUSDT = Decimal(price_bids_c_l_CAKEUSDT) 
	qty_bids_g_CAKEUSDT = Decimal(qty_bids_c_l_CAKEUSDT) 
	price_asks_g_CAKEUSDT = Decimal(price_asks_c_l_CAKEUSDT) 
	qty_asks_g_CAKEUSDT = Decimal(qty_asks_c_l_CAKEUSDT) 


def loop_CAKEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cakeusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CAKEUSDT) 
	ws.run_forever() 


Thread(target=loop_CAKEUSDT).start() 
symbol_g_ACMUSDT = 'ACMUSDT' 
price_bids_g_ACMUSDT = Decimal('0.0') 
qty_bids_g_ACMUSDT = Decimal('0.0') 
price_asks_g_ACMUSDT = Decimal('0.0') 
qty_asks_g_ACMUSDT = Decimal('0.0') 
stepSize_g_ACMUSDT = Decimal('0.1') 


def on_message_ACMUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ACMUSDT = 'ACMUSDT' 
	price_bids_c_l_ACMUSDT = data['b'] 
	qty_bids_c_l_ACMUSDT = data['B'] 
	price_asks_c_l_ACMUSDT = data['a'] 
	qty_asks_c_l_ACMUSDT = data['A'] 

	global symbol_g_ACMUSDT 
	global price_bids_g_ACMUSDT 
	global qty_bids_g_ACMUSDT 
	global price_asks_g_ACMUSDT 
	global qty_asks_g_ACMUSDT 

	symbol_g_ACMUSDT = symbol_c_l_ACMUSDT 
	price_bids_g_ACMUSDT = Decimal(price_bids_c_l_ACMUSDT) 
	qty_bids_g_ACMUSDT = Decimal(qty_bids_c_l_ACMUSDT) 
	price_asks_g_ACMUSDT = Decimal(price_asks_c_l_ACMUSDT) 
	qty_asks_g_ACMUSDT = Decimal(qty_asks_c_l_ACMUSDT) 


def loop_ACMUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/acmusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ACMUSDT) 
	ws.run_forever() 


Thread(target=loop_ACMUSDT).start() 
symbol_g_BADGERUSDT = 'BADGERUSDT' 
price_bids_g_BADGERUSDT = Decimal('0.0') 
qty_bids_g_BADGERUSDT = Decimal('0.0') 
price_asks_g_BADGERUSDT = Decimal('0.0') 
qty_asks_g_BADGERUSDT = Decimal('0.0') 
stepSize_g_BADGERUSDT = Decimal('0.01') 


def on_message_BADGERUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BADGERUSDT = 'BADGERUSDT' 
	price_bids_c_l_BADGERUSDT = data['b'] 
	qty_bids_c_l_BADGERUSDT = data['B'] 
	price_asks_c_l_BADGERUSDT = data['a'] 
	qty_asks_c_l_BADGERUSDT = data['A'] 

	global symbol_g_BADGERUSDT 
	global price_bids_g_BADGERUSDT 
	global qty_bids_g_BADGERUSDT 
	global price_asks_g_BADGERUSDT 
	global qty_asks_g_BADGERUSDT 

	symbol_g_BADGERUSDT = symbol_c_l_BADGERUSDT 
	price_bids_g_BADGERUSDT = Decimal(price_bids_c_l_BADGERUSDT) 
	qty_bids_g_BADGERUSDT = Decimal(qty_bids_c_l_BADGERUSDT) 
	price_asks_g_BADGERUSDT = Decimal(price_asks_c_l_BADGERUSDT) 
	qty_asks_g_BADGERUSDT = Decimal(qty_asks_c_l_BADGERUSDT) 


def loop_BADGERUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/badgerusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BADGERUSDT) 
	ws.run_forever() 


Thread(target=loop_BADGERUSDT).start() 
symbol_g_OMUSDT = 'OMUSDT' 
price_bids_g_OMUSDT = Decimal('0.0') 
qty_bids_g_OMUSDT = Decimal('0.0') 
price_asks_g_OMUSDT = Decimal('0.0') 
qty_asks_g_OMUSDT = Decimal('0.0') 
stepSize_g_OMUSDT = Decimal('1.0') 


def on_message_OMUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OMUSDT = 'OMUSDT' 
	price_bids_c_l_OMUSDT = data['b'] 
	qty_bids_c_l_OMUSDT = data['B'] 
	price_asks_c_l_OMUSDT = data['a'] 
	qty_asks_c_l_OMUSDT = data['A'] 

	global symbol_g_OMUSDT 
	global price_bids_g_OMUSDT 
	global qty_bids_g_OMUSDT 
	global price_asks_g_OMUSDT 
	global qty_asks_g_OMUSDT 

	symbol_g_OMUSDT = symbol_c_l_OMUSDT 
	price_bids_g_OMUSDT = Decimal(price_bids_c_l_OMUSDT) 
	qty_bids_g_OMUSDT = Decimal(qty_bids_c_l_OMUSDT) 
	price_asks_g_OMUSDT = Decimal(price_asks_c_l_OMUSDT) 
	qty_asks_g_OMUSDT = Decimal(qty_asks_c_l_OMUSDT) 


def loop_OMUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/omusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OMUSDT) 
	ws.run_forever() 


Thread(target=loop_OMUSDT).start() 
symbol_g_PONDUSDT = 'PONDUSDT' 
price_bids_g_PONDUSDT = Decimal('0.0') 
qty_bids_g_PONDUSDT = Decimal('0.0') 
price_asks_g_PONDUSDT = Decimal('0.0') 
qty_asks_g_PONDUSDT = Decimal('0.0') 
stepSize_g_PONDUSDT = Decimal('0.01') 


def on_message_PONDUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PONDUSDT = 'PONDUSDT' 
	price_bids_c_l_PONDUSDT = data['b'] 
	qty_bids_c_l_PONDUSDT = data['B'] 
	price_asks_c_l_PONDUSDT = data['a'] 
	qty_asks_c_l_PONDUSDT = data['A'] 

	global symbol_g_PONDUSDT 
	global price_bids_g_PONDUSDT 
	global qty_bids_g_PONDUSDT 
	global price_asks_g_PONDUSDT 
	global qty_asks_g_PONDUSDT 

	symbol_g_PONDUSDT = symbol_c_l_PONDUSDT 
	price_bids_g_PONDUSDT = Decimal(price_bids_c_l_PONDUSDT) 
	qty_bids_g_PONDUSDT = Decimal(qty_bids_c_l_PONDUSDT) 
	price_asks_g_PONDUSDT = Decimal(price_asks_c_l_PONDUSDT) 
	qty_asks_g_PONDUSDT = Decimal(qty_asks_c_l_PONDUSDT) 


def loop_PONDUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/pondusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PONDUSDT) 
	ws.run_forever() 


Thread(target=loop_PONDUSDT).start() 
symbol_g_DEGOUSDT = 'DEGOUSDT' 
price_bids_g_DEGOUSDT = Decimal('0.0') 
qty_bids_g_DEGOUSDT = Decimal('0.0') 
price_asks_g_DEGOUSDT = Decimal('0.0') 
qty_asks_g_DEGOUSDT = Decimal('0.0') 
stepSize_g_DEGOUSDT = Decimal('0.01') 


def on_message_DEGOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DEGOUSDT = 'DEGOUSDT' 
	price_bids_c_l_DEGOUSDT = data['b'] 
	qty_bids_c_l_DEGOUSDT = data['B'] 
	price_asks_c_l_DEGOUSDT = data['a'] 
	qty_asks_c_l_DEGOUSDT = data['A'] 

	global symbol_g_DEGOUSDT 
	global price_bids_g_DEGOUSDT 
	global qty_bids_g_DEGOUSDT 
	global price_asks_g_DEGOUSDT 
	global qty_asks_g_DEGOUSDT 

	symbol_g_DEGOUSDT = symbol_c_l_DEGOUSDT 
	price_bids_g_DEGOUSDT = Decimal(price_bids_c_l_DEGOUSDT) 
	qty_bids_g_DEGOUSDT = Decimal(qty_bids_c_l_DEGOUSDT) 
	price_asks_g_DEGOUSDT = Decimal(price_asks_c_l_DEGOUSDT) 
	qty_asks_g_DEGOUSDT = Decimal(qty_asks_c_l_DEGOUSDT) 


def loop_DEGOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/degousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DEGOUSDT) 
	ws.run_forever() 


Thread(target=loop_DEGOUSDT).start() 
symbol_g_LINAUSDT = 'LINAUSDT' 
price_bids_g_LINAUSDT = Decimal('0.0') 
qty_bids_g_LINAUSDT = Decimal('0.0') 
price_asks_g_LINAUSDT = Decimal('0.0') 
qty_asks_g_LINAUSDT = Decimal('0.0') 
stepSize_g_LINAUSDT = Decimal('0.01') 


def on_message_LINAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LINAUSDT = 'LINAUSDT' 
	price_bids_c_l_LINAUSDT = data['b'] 
	qty_bids_c_l_LINAUSDT = data['B'] 
	price_asks_c_l_LINAUSDT = data['a'] 
	qty_asks_c_l_LINAUSDT = data['A'] 

	global symbol_g_LINAUSDT 
	global price_bids_g_LINAUSDT 
	global qty_bids_g_LINAUSDT 
	global price_asks_g_LINAUSDT 
	global qty_asks_g_LINAUSDT 

	symbol_g_LINAUSDT = symbol_c_l_LINAUSDT 
	price_bids_g_LINAUSDT = Decimal(price_bids_c_l_LINAUSDT) 
	qty_bids_g_LINAUSDT = Decimal(qty_bids_c_l_LINAUSDT) 
	price_asks_g_LINAUSDT = Decimal(price_asks_c_l_LINAUSDT) 
	qty_asks_g_LINAUSDT = Decimal(qty_asks_c_l_LINAUSDT) 


def loop_LINAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/linausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LINAUSDT) 
	ws.run_forever() 


Thread(target=loop_LINAUSDT).start() 
symbol_g_PERPUSDT = 'PERPUSDT' 
price_bids_g_PERPUSDT = Decimal('0.0') 
qty_bids_g_PERPUSDT = Decimal('0.0') 
price_asks_g_PERPUSDT = Decimal('0.0') 
qty_asks_g_PERPUSDT = Decimal('0.0') 
stepSize_g_PERPUSDT = Decimal('0.01') 


def on_message_PERPUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PERPUSDT = 'PERPUSDT' 
	price_bids_c_l_PERPUSDT = data['b'] 
	qty_bids_c_l_PERPUSDT = data['B'] 
	price_asks_c_l_PERPUSDT = data['a'] 
	qty_asks_c_l_PERPUSDT = data['A'] 

	global symbol_g_PERPUSDT 
	global price_bids_g_PERPUSDT 
	global qty_bids_g_PERPUSDT 
	global price_asks_g_PERPUSDT 
	global qty_asks_g_PERPUSDT 

	symbol_g_PERPUSDT = symbol_c_l_PERPUSDT 
	price_bids_g_PERPUSDT = Decimal(price_bids_c_l_PERPUSDT) 
	qty_bids_g_PERPUSDT = Decimal(qty_bids_c_l_PERPUSDT) 
	price_asks_g_PERPUSDT = Decimal(price_asks_c_l_PERPUSDT) 
	qty_asks_g_PERPUSDT = Decimal(qty_asks_c_l_PERPUSDT) 


def loop_PERPUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/perpusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PERPUSDT) 
	ws.run_forever() 


Thread(target=loop_PERPUSDT).start() 
symbol_g_SUPERUSDT = 'SUPERUSDT' 
price_bids_g_SUPERUSDT = Decimal('0.0') 
qty_bids_g_SUPERUSDT = Decimal('0.0') 
price_asks_g_SUPERUSDT = Decimal('0.0') 
qty_asks_g_SUPERUSDT = Decimal('0.0') 
stepSize_g_SUPERUSDT = Decimal('1.0') 


def on_message_SUPERUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SUPERUSDT = 'SUPERUSDT' 
	price_bids_c_l_SUPERUSDT = data['b'] 
	qty_bids_c_l_SUPERUSDT = data['B'] 
	price_asks_c_l_SUPERUSDT = data['a'] 
	qty_asks_c_l_SUPERUSDT = data['A'] 

	global symbol_g_SUPERUSDT 
	global price_bids_g_SUPERUSDT 
	global qty_bids_g_SUPERUSDT 
	global price_asks_g_SUPERUSDT 
	global qty_asks_g_SUPERUSDT 

	symbol_g_SUPERUSDT = symbol_c_l_SUPERUSDT 
	price_bids_g_SUPERUSDT = Decimal(price_bids_c_l_SUPERUSDT) 
	qty_bids_g_SUPERUSDT = Decimal(qty_bids_c_l_SUPERUSDT) 
	price_asks_g_SUPERUSDT = Decimal(price_asks_c_l_SUPERUSDT) 
	qty_asks_g_SUPERUSDT = Decimal(qty_asks_c_l_SUPERUSDT) 


def loop_SUPERUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/superusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SUPERUSDT) 
	ws.run_forever() 


Thread(target=loop_SUPERUSDT).start() 
symbol_g_CFXUSDT = 'CFXUSDT' 
price_bids_g_CFXUSDT = Decimal('0.0') 
qty_bids_g_CFXUSDT = Decimal('0.0') 
price_asks_g_CFXUSDT = Decimal('0.0') 
qty_asks_g_CFXUSDT = Decimal('0.0') 
stepSize_g_CFXUSDT = Decimal('1.0') 


def on_message_CFXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CFXUSDT = 'CFXUSDT' 
	price_bids_c_l_CFXUSDT = data['b'] 
	qty_bids_c_l_CFXUSDT = data['B'] 
	price_asks_c_l_CFXUSDT = data['a'] 
	qty_asks_c_l_CFXUSDT = data['A'] 

	global symbol_g_CFXUSDT 
	global price_bids_g_CFXUSDT 
	global qty_bids_g_CFXUSDT 
	global price_asks_g_CFXUSDT 
	global qty_asks_g_CFXUSDT 

	symbol_g_CFXUSDT = symbol_c_l_CFXUSDT 
	price_bids_g_CFXUSDT = Decimal(price_bids_c_l_CFXUSDT) 
	qty_bids_g_CFXUSDT = Decimal(qty_bids_c_l_CFXUSDT) 
	price_asks_g_CFXUSDT = Decimal(price_asks_c_l_CFXUSDT) 
	qty_asks_g_CFXUSDT = Decimal(qty_asks_c_l_CFXUSDT) 


def loop_CFXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cfxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CFXUSDT) 
	ws.run_forever() 


Thread(target=loop_CFXUSDT).start() 
symbol_g_AUTOUSDT = 'AUTOUSDT' 
price_bids_g_AUTOUSDT = Decimal('0.0') 
qty_bids_g_AUTOUSDT = Decimal('0.0') 
price_asks_g_AUTOUSDT = Decimal('0.0') 
qty_asks_g_AUTOUSDT = Decimal('0.0') 
stepSize_g_AUTOUSDT = Decimal('0.001') 


def on_message_AUTOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AUTOUSDT = 'AUTOUSDT' 
	price_bids_c_l_AUTOUSDT = data['b'] 
	qty_bids_c_l_AUTOUSDT = data['B'] 
	price_asks_c_l_AUTOUSDT = data['a'] 
	qty_asks_c_l_AUTOUSDT = data['A'] 

	global symbol_g_AUTOUSDT 
	global price_bids_g_AUTOUSDT 
	global qty_bids_g_AUTOUSDT 
	global price_asks_g_AUTOUSDT 
	global qty_asks_g_AUTOUSDT 

	symbol_g_AUTOUSDT = symbol_c_l_AUTOUSDT 
	price_bids_g_AUTOUSDT = Decimal(price_bids_c_l_AUTOUSDT) 
	qty_bids_g_AUTOUSDT = Decimal(qty_bids_c_l_AUTOUSDT) 
	price_asks_g_AUTOUSDT = Decimal(price_asks_c_l_AUTOUSDT) 
	qty_asks_g_AUTOUSDT = Decimal(qty_asks_c_l_AUTOUSDT) 


def loop_AUTOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/autousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AUTOUSDT) 
	ws.run_forever() 


Thread(target=loop_AUTOUSDT).start() 
symbol_g_PUNDIXUSDT = 'PUNDIXUSDT' 
price_bids_g_PUNDIXUSDT = Decimal('0.0') 
qty_bids_g_PUNDIXUSDT = Decimal('0.0') 
price_asks_g_PUNDIXUSDT = Decimal('0.0') 
qty_asks_g_PUNDIXUSDT = Decimal('0.0') 
stepSize_g_PUNDIXUSDT = Decimal('0.1') 


def on_message_PUNDIXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PUNDIXUSDT = 'PUNDIXUSDT' 
	price_bids_c_l_PUNDIXUSDT = data['b'] 
	qty_bids_c_l_PUNDIXUSDT = data['B'] 
	price_asks_c_l_PUNDIXUSDT = data['a'] 
	qty_asks_c_l_PUNDIXUSDT = data['A'] 

	global symbol_g_PUNDIXUSDT 
	global price_bids_g_PUNDIXUSDT 
	global qty_bids_g_PUNDIXUSDT 
	global price_asks_g_PUNDIXUSDT 
	global qty_asks_g_PUNDIXUSDT 

	symbol_g_PUNDIXUSDT = symbol_c_l_PUNDIXUSDT 
	price_bids_g_PUNDIXUSDT = Decimal(price_bids_c_l_PUNDIXUSDT) 
	qty_bids_g_PUNDIXUSDT = Decimal(qty_bids_c_l_PUNDIXUSDT) 
	price_asks_g_PUNDIXUSDT = Decimal(price_asks_c_l_PUNDIXUSDT) 
	qty_asks_g_PUNDIXUSDT = Decimal(qty_asks_c_l_PUNDIXUSDT) 


def loop_PUNDIXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/pundixusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PUNDIXUSDT) 
	ws.run_forever() 


Thread(target=loop_PUNDIXUSDT).start() 
symbol_g_BARUSDT = 'BARUSDT' 
price_bids_g_BARUSDT = Decimal('0.0') 
qty_bids_g_BARUSDT = Decimal('0.0') 
price_asks_g_BARUSDT = Decimal('0.0') 
qty_asks_g_BARUSDT = Decimal('0.0') 
stepSize_g_BARUSDT = Decimal('0.01') 


def on_message_BARUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BARUSDT = 'BARUSDT' 
	price_bids_c_l_BARUSDT = data['b'] 
	qty_bids_c_l_BARUSDT = data['B'] 
	price_asks_c_l_BARUSDT = data['a'] 
	qty_asks_c_l_BARUSDT = data['A'] 

	global symbol_g_BARUSDT 
	global price_bids_g_BARUSDT 
	global qty_bids_g_BARUSDT 
	global price_asks_g_BARUSDT 
	global qty_asks_g_BARUSDT 

	symbol_g_BARUSDT = symbol_c_l_BARUSDT 
	price_bids_g_BARUSDT = Decimal(price_bids_c_l_BARUSDT) 
	qty_bids_g_BARUSDT = Decimal(qty_bids_c_l_BARUSDT) 
	price_asks_g_BARUSDT = Decimal(price_asks_c_l_BARUSDT) 
	qty_asks_g_BARUSDT = Decimal(qty_asks_c_l_BARUSDT) 


def loop_BARUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/barusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BARUSDT) 
	ws.run_forever() 


Thread(target=loop_BARUSDT).start() 
symbol_g_FORTHUSDT = 'FORTHUSDT' 
price_bids_g_FORTHUSDT = Decimal('0.0') 
qty_bids_g_FORTHUSDT = Decimal('0.0') 
price_asks_g_FORTHUSDT = Decimal('0.0') 
qty_asks_g_FORTHUSDT = Decimal('0.0') 
stepSize_g_FORTHUSDT = Decimal('0.01') 


def on_message_FORTHUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FORTHUSDT = 'FORTHUSDT' 
	price_bids_c_l_FORTHUSDT = data['b'] 
	qty_bids_c_l_FORTHUSDT = data['B'] 
	price_asks_c_l_FORTHUSDT = data['a'] 
	qty_asks_c_l_FORTHUSDT = data['A'] 

	global symbol_g_FORTHUSDT 
	global price_bids_g_FORTHUSDT 
	global qty_bids_g_FORTHUSDT 
	global price_asks_g_FORTHUSDT 
	global qty_asks_g_FORTHUSDT 

	symbol_g_FORTHUSDT = symbol_c_l_FORTHUSDT 
	price_bids_g_FORTHUSDT = Decimal(price_bids_c_l_FORTHUSDT) 
	qty_bids_g_FORTHUSDT = Decimal(qty_bids_c_l_FORTHUSDT) 
	price_asks_g_FORTHUSDT = Decimal(price_asks_c_l_FORTHUSDT) 
	qty_asks_g_FORTHUSDT = Decimal(qty_asks_c_l_FORTHUSDT) 


def loop_FORTHUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/forthusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FORTHUSDT) 
	ws.run_forever() 


Thread(target=loop_FORTHUSDT).start() 
symbol_g_BAKEUSDT = 'BAKEUSDT' 
price_bids_g_BAKEUSDT = Decimal('0.0') 
qty_bids_g_BAKEUSDT = Decimal('0.0') 
price_asks_g_BAKEUSDT = Decimal('0.0') 
qty_asks_g_BAKEUSDT = Decimal('0.0') 
stepSize_g_BAKEUSDT = Decimal('0.1') 


def on_message_BAKEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BAKEUSDT = 'BAKEUSDT' 
	price_bids_c_l_BAKEUSDT = data['b'] 
	qty_bids_c_l_BAKEUSDT = data['B'] 
	price_asks_c_l_BAKEUSDT = data['a'] 
	qty_asks_c_l_BAKEUSDT = data['A'] 

	global symbol_g_BAKEUSDT 
	global price_bids_g_BAKEUSDT 
	global qty_bids_g_BAKEUSDT 
	global price_asks_g_BAKEUSDT 
	global qty_asks_g_BAKEUSDT 

	symbol_g_BAKEUSDT = symbol_c_l_BAKEUSDT 
	price_bids_g_BAKEUSDT = Decimal(price_bids_c_l_BAKEUSDT) 
	qty_bids_g_BAKEUSDT = Decimal(qty_bids_c_l_BAKEUSDT) 
	price_asks_g_BAKEUSDT = Decimal(price_asks_c_l_BAKEUSDT) 
	qty_asks_g_BAKEUSDT = Decimal(qty_asks_c_l_BAKEUSDT) 


def loop_BAKEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bakeusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BAKEUSDT) 
	ws.run_forever() 


Thread(target=loop_BAKEUSDT).start() 
symbol_g_BURGERUSDT = 'BURGERUSDT' 
price_bids_g_BURGERUSDT = Decimal('0.0') 
qty_bids_g_BURGERUSDT = Decimal('0.0') 
price_asks_g_BURGERUSDT = Decimal('0.0') 
qty_asks_g_BURGERUSDT = Decimal('0.0') 
stepSize_g_BURGERUSDT = Decimal('0.1') 


def on_message_BURGERUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BURGERUSDT = 'BURGERUSDT' 
	price_bids_c_l_BURGERUSDT = data['b'] 
	qty_bids_c_l_BURGERUSDT = data['B'] 
	price_asks_c_l_BURGERUSDT = data['a'] 
	qty_asks_c_l_BURGERUSDT = data['A'] 

	global symbol_g_BURGERUSDT 
	global price_bids_g_BURGERUSDT 
	global qty_bids_g_BURGERUSDT 
	global price_asks_g_BURGERUSDT 
	global qty_asks_g_BURGERUSDT 

	symbol_g_BURGERUSDT = symbol_c_l_BURGERUSDT 
	price_bids_g_BURGERUSDT = Decimal(price_bids_c_l_BURGERUSDT) 
	qty_bids_g_BURGERUSDT = Decimal(qty_bids_c_l_BURGERUSDT) 
	price_asks_g_BURGERUSDT = Decimal(price_asks_c_l_BURGERUSDT) 
	qty_asks_g_BURGERUSDT = Decimal(qty_asks_c_l_BURGERUSDT) 


def loop_BURGERUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/burgerusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BURGERUSDT) 
	ws.run_forever() 


Thread(target=loop_BURGERUSDT).start() 
symbol_g_ARUSDT = 'ARUSDT' 
price_bids_g_ARUSDT = Decimal('0.0') 
qty_bids_g_ARUSDT = Decimal('0.0') 
price_asks_g_ARUSDT = Decimal('0.0') 
qty_asks_g_ARUSDT = Decimal('0.0') 
stepSize_g_ARUSDT = Decimal('0.01') 


def on_message_ARUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ARUSDT = 'ARUSDT' 
	price_bids_c_l_ARUSDT = data['b'] 
	qty_bids_c_l_ARUSDT = data['B'] 
	price_asks_c_l_ARUSDT = data['a'] 
	qty_asks_c_l_ARUSDT = data['A'] 

	global symbol_g_ARUSDT 
	global price_bids_g_ARUSDT 
	global qty_bids_g_ARUSDT 
	global price_asks_g_ARUSDT 
	global qty_asks_g_ARUSDT 

	symbol_g_ARUSDT = symbol_c_l_ARUSDT 
	price_bids_g_ARUSDT = Decimal(price_bids_c_l_ARUSDT) 
	qty_bids_g_ARUSDT = Decimal(qty_bids_c_l_ARUSDT) 
	price_asks_g_ARUSDT = Decimal(price_asks_c_l_ARUSDT) 
	qty_asks_g_ARUSDT = Decimal(qty_asks_c_l_ARUSDT) 


def loop_ARUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/arusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ARUSDT) 
	ws.run_forever() 


Thread(target=loop_ARUSDT).start() 
symbol_g_POLSUSDT = 'POLSUSDT' 
price_bids_g_POLSUSDT = Decimal('0.0') 
qty_bids_g_POLSUSDT = Decimal('0.0') 
price_asks_g_POLSUSDT = Decimal('0.0') 
qty_asks_g_POLSUSDT = Decimal('0.0') 
stepSize_g_POLSUSDT = Decimal('0.1') 


def on_message_POLSUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_POLSUSDT = 'POLSUSDT' 
	price_bids_c_l_POLSUSDT = data['b'] 
	qty_bids_c_l_POLSUSDT = data['B'] 
	price_asks_c_l_POLSUSDT = data['a'] 
	qty_asks_c_l_POLSUSDT = data['A'] 

	global symbol_g_POLSUSDT 
	global price_bids_g_POLSUSDT 
	global qty_bids_g_POLSUSDT 
	global price_asks_g_POLSUSDT 
	global qty_asks_g_POLSUSDT 

	symbol_g_POLSUSDT = symbol_c_l_POLSUSDT 
	price_bids_g_POLSUSDT = Decimal(price_bids_c_l_POLSUSDT) 
	qty_bids_g_POLSUSDT = Decimal(qty_bids_c_l_POLSUSDT) 
	price_asks_g_POLSUSDT = Decimal(price_asks_c_l_POLSUSDT) 
	qty_asks_g_POLSUSDT = Decimal(qty_asks_c_l_POLSUSDT) 


def loop_POLSUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/polsusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_POLSUSDT) 
	ws.run_forever() 


Thread(target=loop_POLSUSDT).start() 
symbol_g_MDXUSDT = 'MDXUSDT' 
price_bids_g_MDXUSDT = Decimal('0.0') 
qty_bids_g_MDXUSDT = Decimal('0.0') 
price_asks_g_MDXUSDT = Decimal('0.0') 
qty_asks_g_MDXUSDT = Decimal('0.0') 
stepSize_g_MDXUSDT = Decimal('0.1') 


def on_message_MDXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MDXUSDT = 'MDXUSDT' 
	price_bids_c_l_MDXUSDT = data['b'] 
	qty_bids_c_l_MDXUSDT = data['B'] 
	price_asks_c_l_MDXUSDT = data['a'] 
	qty_asks_c_l_MDXUSDT = data['A'] 

	global symbol_g_MDXUSDT 
	global price_bids_g_MDXUSDT 
	global qty_bids_g_MDXUSDT 
	global price_asks_g_MDXUSDT 
	global qty_asks_g_MDXUSDT 

	symbol_g_MDXUSDT = symbol_c_l_MDXUSDT 
	price_bids_g_MDXUSDT = Decimal(price_bids_c_l_MDXUSDT) 
	qty_bids_g_MDXUSDT = Decimal(qty_bids_c_l_MDXUSDT) 
	price_asks_g_MDXUSDT = Decimal(price_asks_c_l_MDXUSDT) 
	qty_asks_g_MDXUSDT = Decimal(qty_asks_c_l_MDXUSDT) 


def loop_MDXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mdxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MDXUSDT) 
	ws.run_forever() 


Thread(target=loop_MDXUSDT).start() 
symbol_g_MASKUSDT = 'MASKUSDT' 
price_bids_g_MASKUSDT = Decimal('0.0') 
qty_bids_g_MASKUSDT = Decimal('0.0') 
price_asks_g_MASKUSDT = Decimal('0.0') 
qty_asks_g_MASKUSDT = Decimal('0.0') 
stepSize_g_MASKUSDT = Decimal('0.1') 


def on_message_MASKUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MASKUSDT = 'MASKUSDT' 
	price_bids_c_l_MASKUSDT = data['b'] 
	qty_bids_c_l_MASKUSDT = data['B'] 
	price_asks_c_l_MASKUSDT = data['a'] 
	qty_asks_c_l_MASKUSDT = data['A'] 

	global symbol_g_MASKUSDT 
	global price_bids_g_MASKUSDT 
	global qty_bids_g_MASKUSDT 
	global price_asks_g_MASKUSDT 
	global qty_asks_g_MASKUSDT 

	symbol_g_MASKUSDT = symbol_c_l_MASKUSDT 
	price_bids_g_MASKUSDT = Decimal(price_bids_c_l_MASKUSDT) 
	qty_bids_g_MASKUSDT = Decimal(qty_bids_c_l_MASKUSDT) 
	price_asks_g_MASKUSDT = Decimal(price_asks_c_l_MASKUSDT) 
	qty_asks_g_MASKUSDT = Decimal(qty_asks_c_l_MASKUSDT) 


def loop_MASKUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maskusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MASKUSDT) 
	ws.run_forever() 


Thread(target=loop_MASKUSDT).start() 
symbol_g_LPTUSDT = 'LPTUSDT' 
price_bids_g_LPTUSDT = Decimal('0.0') 
qty_bids_g_LPTUSDT = Decimal('0.0') 
price_asks_g_LPTUSDT = Decimal('0.0') 
qty_asks_g_LPTUSDT = Decimal('0.0') 
stepSize_g_LPTUSDT = Decimal('0.01') 


def on_message_LPTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LPTUSDT = 'LPTUSDT' 
	price_bids_c_l_LPTUSDT = data['b'] 
	qty_bids_c_l_LPTUSDT = data['B'] 
	price_asks_c_l_LPTUSDT = data['a'] 
	qty_asks_c_l_LPTUSDT = data['A'] 

	global symbol_g_LPTUSDT 
	global price_bids_g_LPTUSDT 
	global qty_bids_g_LPTUSDT 
	global price_asks_g_LPTUSDT 
	global qty_asks_g_LPTUSDT 

	symbol_g_LPTUSDT = symbol_c_l_LPTUSDT 
	price_bids_g_LPTUSDT = Decimal(price_bids_c_l_LPTUSDT) 
	qty_bids_g_LPTUSDT = Decimal(qty_bids_c_l_LPTUSDT) 
	price_asks_g_LPTUSDT = Decimal(price_asks_c_l_LPTUSDT) 
	qty_asks_g_LPTUSDT = Decimal(qty_asks_c_l_LPTUSDT) 


def loop_LPTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lptusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LPTUSDT) 
	ws.run_forever() 


Thread(target=loop_LPTUSDT).start() 
symbol_g_XVGUSDT = 'XVGUSDT' 
price_bids_g_XVGUSDT = Decimal('0.0') 
qty_bids_g_XVGUSDT = Decimal('0.0') 
price_asks_g_XVGUSDT = Decimal('0.0') 
qty_asks_g_XVGUSDT = Decimal('0.0') 
stepSize_g_XVGUSDT = Decimal('1.0') 


def on_message_XVGUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XVGUSDT = 'XVGUSDT' 
	price_bids_c_l_XVGUSDT = data['b'] 
	qty_bids_c_l_XVGUSDT = data['B'] 
	price_asks_c_l_XVGUSDT = data['a'] 
	qty_asks_c_l_XVGUSDT = data['A'] 

	global symbol_g_XVGUSDT 
	global price_bids_g_XVGUSDT 
	global qty_bids_g_XVGUSDT 
	global price_asks_g_XVGUSDT 
	global qty_asks_g_XVGUSDT 

	symbol_g_XVGUSDT = symbol_c_l_XVGUSDT 
	price_bids_g_XVGUSDT = Decimal(price_bids_c_l_XVGUSDT) 
	qty_bids_g_XVGUSDT = Decimal(qty_bids_c_l_XVGUSDT) 
	price_asks_g_XVGUSDT = Decimal(price_asks_c_l_XVGUSDT) 
	qty_asks_g_XVGUSDT = Decimal(qty_asks_c_l_XVGUSDT) 


def loop_XVGUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xvgusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XVGUSDT) 
	ws.run_forever() 


Thread(target=loop_XVGUSDT).start() 
symbol_g_ATAUSDT = 'ATAUSDT' 
price_bids_g_ATAUSDT = Decimal('0.0') 
qty_bids_g_ATAUSDT = Decimal('0.0') 
price_asks_g_ATAUSDT = Decimal('0.0') 
qty_asks_g_ATAUSDT = Decimal('0.0') 
stepSize_g_ATAUSDT = Decimal('1.0') 


def on_message_ATAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATAUSDT = 'ATAUSDT' 
	price_bids_c_l_ATAUSDT = data['b'] 
	qty_bids_c_l_ATAUSDT = data['B'] 
	price_asks_c_l_ATAUSDT = data['a'] 
	qty_asks_c_l_ATAUSDT = data['A'] 

	global symbol_g_ATAUSDT 
	global price_bids_g_ATAUSDT 
	global qty_bids_g_ATAUSDT 
	global price_asks_g_ATAUSDT 
	global qty_asks_g_ATAUSDT 

	symbol_g_ATAUSDT = symbol_c_l_ATAUSDT 
	price_bids_g_ATAUSDT = Decimal(price_bids_c_l_ATAUSDT) 
	qty_bids_g_ATAUSDT = Decimal(qty_bids_c_l_ATAUSDT) 
	price_asks_g_ATAUSDT = Decimal(price_asks_c_l_ATAUSDT) 
	qty_asks_g_ATAUSDT = Decimal(qty_asks_c_l_ATAUSDT) 


def loop_ATAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATAUSDT) 
	ws.run_forever() 


Thread(target=loop_ATAUSDT).start() 
symbol_g_GTCUSDT = 'GTCUSDT' 
price_bids_g_GTCUSDT = Decimal('0.0') 
qty_bids_g_GTCUSDT = Decimal('0.0') 
price_asks_g_GTCUSDT = Decimal('0.0') 
qty_asks_g_GTCUSDT = Decimal('0.0') 
stepSize_g_GTCUSDT = Decimal('0.1') 


def on_message_GTCUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GTCUSDT = 'GTCUSDT' 
	price_bids_c_l_GTCUSDT = data['b'] 
	qty_bids_c_l_GTCUSDT = data['B'] 
	price_asks_c_l_GTCUSDT = data['a'] 
	qty_asks_c_l_GTCUSDT = data['A'] 

	global symbol_g_GTCUSDT 
	global price_bids_g_GTCUSDT 
	global qty_bids_g_GTCUSDT 
	global price_asks_g_GTCUSDT 
	global qty_asks_g_GTCUSDT 

	symbol_g_GTCUSDT = symbol_c_l_GTCUSDT 
	price_bids_g_GTCUSDT = Decimal(price_bids_c_l_GTCUSDT) 
	qty_bids_g_GTCUSDT = Decimal(qty_bids_c_l_GTCUSDT) 
	price_asks_g_GTCUSDT = Decimal(price_asks_c_l_GTCUSDT) 
	qty_asks_g_GTCUSDT = Decimal(qty_asks_c_l_GTCUSDT) 


def loop_GTCUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gtcusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GTCUSDT) 
	ws.run_forever() 


Thread(target=loop_GTCUSDT).start() 
symbol_g_ERNUSDT = 'ERNUSDT' 
price_bids_g_ERNUSDT = Decimal('0.0') 
qty_bids_g_ERNUSDT = Decimal('0.0') 
price_asks_g_ERNUSDT = Decimal('0.0') 
qty_asks_g_ERNUSDT = Decimal('0.0') 
stepSize_g_ERNUSDT = Decimal('0.1') 


def on_message_ERNUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ERNUSDT = 'ERNUSDT' 
	price_bids_c_l_ERNUSDT = data['b'] 
	qty_bids_c_l_ERNUSDT = data['B'] 
	price_asks_c_l_ERNUSDT = data['a'] 
	qty_asks_c_l_ERNUSDT = data['A'] 

	global symbol_g_ERNUSDT 
	global price_bids_g_ERNUSDT 
	global qty_bids_g_ERNUSDT 
	global price_asks_g_ERNUSDT 
	global qty_asks_g_ERNUSDT 

	symbol_g_ERNUSDT = symbol_c_l_ERNUSDT 
	price_bids_g_ERNUSDT = Decimal(price_bids_c_l_ERNUSDT) 
	qty_bids_g_ERNUSDT = Decimal(qty_bids_c_l_ERNUSDT) 
	price_asks_g_ERNUSDT = Decimal(price_asks_c_l_ERNUSDT) 
	qty_asks_g_ERNUSDT = Decimal(qty_asks_c_l_ERNUSDT) 


def loop_ERNUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ernusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ERNUSDT) 
	ws.run_forever() 


Thread(target=loop_ERNUSDT).start() 
symbol_g_KLAYUSDT = 'KLAYUSDT' 
price_bids_g_KLAYUSDT = Decimal('0.0') 
qty_bids_g_KLAYUSDT = Decimal('0.0') 
price_asks_g_KLAYUSDT = Decimal('0.0') 
qty_asks_g_KLAYUSDT = Decimal('0.0') 
stepSize_g_KLAYUSDT = Decimal('0.1') 


def on_message_KLAYUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KLAYUSDT = 'KLAYUSDT' 
	price_bids_c_l_KLAYUSDT = data['b'] 
	qty_bids_c_l_KLAYUSDT = data['B'] 
	price_asks_c_l_KLAYUSDT = data['a'] 
	qty_asks_c_l_KLAYUSDT = data['A'] 

	global symbol_g_KLAYUSDT 
	global price_bids_g_KLAYUSDT 
	global qty_bids_g_KLAYUSDT 
	global price_asks_g_KLAYUSDT 
	global qty_asks_g_KLAYUSDT 

	symbol_g_KLAYUSDT = symbol_c_l_KLAYUSDT 
	price_bids_g_KLAYUSDT = Decimal(price_bids_c_l_KLAYUSDT) 
	qty_bids_g_KLAYUSDT = Decimal(qty_bids_c_l_KLAYUSDT) 
	price_asks_g_KLAYUSDT = Decimal(price_asks_c_l_KLAYUSDT) 
	qty_asks_g_KLAYUSDT = Decimal(qty_asks_c_l_KLAYUSDT) 


def loop_KLAYUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/klayusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KLAYUSDT) 
	ws.run_forever() 


Thread(target=loop_KLAYUSDT).start() 
symbol_g_PHAUSDT = 'PHAUSDT' 
price_bids_g_PHAUSDT = Decimal('0.0') 
qty_bids_g_PHAUSDT = Decimal('0.0') 
price_asks_g_PHAUSDT = Decimal('0.0') 
qty_asks_g_PHAUSDT = Decimal('0.0') 
stepSize_g_PHAUSDT = Decimal('1.0') 


def on_message_PHAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PHAUSDT = 'PHAUSDT' 
	price_bids_c_l_PHAUSDT = data['b'] 
	qty_bids_c_l_PHAUSDT = data['B'] 
	price_asks_c_l_PHAUSDT = data['a'] 
	qty_asks_c_l_PHAUSDT = data['A'] 

	global symbol_g_PHAUSDT 
	global price_bids_g_PHAUSDT 
	global qty_bids_g_PHAUSDT 
	global price_asks_g_PHAUSDT 
	global qty_asks_g_PHAUSDT 

	symbol_g_PHAUSDT = symbol_c_l_PHAUSDT 
	price_bids_g_PHAUSDT = Decimal(price_bids_c_l_PHAUSDT) 
	qty_bids_g_PHAUSDT = Decimal(qty_bids_c_l_PHAUSDT) 
	price_asks_g_PHAUSDT = Decimal(price_asks_c_l_PHAUSDT) 
	qty_asks_g_PHAUSDT = Decimal(qty_asks_c_l_PHAUSDT) 


def loop_PHAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/phausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PHAUSDT) 
	ws.run_forever() 


Thread(target=loop_PHAUSDT).start() 
symbol_g_BONDUSDT = 'BONDUSDT' 
price_bids_g_BONDUSDT = Decimal('0.0') 
qty_bids_g_BONDUSDT = Decimal('0.0') 
price_asks_g_BONDUSDT = Decimal('0.0') 
qty_asks_g_BONDUSDT = Decimal('0.0') 
stepSize_g_BONDUSDT = Decimal('0.01') 


def on_message_BONDUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BONDUSDT = 'BONDUSDT' 
	price_bids_c_l_BONDUSDT = data['b'] 
	qty_bids_c_l_BONDUSDT = data['B'] 
	price_asks_c_l_BONDUSDT = data['a'] 
	qty_asks_c_l_BONDUSDT = data['A'] 

	global symbol_g_BONDUSDT 
	global price_bids_g_BONDUSDT 
	global qty_bids_g_BONDUSDT 
	global price_asks_g_BONDUSDT 
	global qty_asks_g_BONDUSDT 

	symbol_g_BONDUSDT = symbol_c_l_BONDUSDT 
	price_bids_g_BONDUSDT = Decimal(price_bids_c_l_BONDUSDT) 
	qty_bids_g_BONDUSDT = Decimal(qty_bids_c_l_BONDUSDT) 
	price_asks_g_BONDUSDT = Decimal(price_asks_c_l_BONDUSDT) 
	qty_asks_g_BONDUSDT = Decimal(qty_asks_c_l_BONDUSDT) 


def loop_BONDUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bondusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BONDUSDT) 
	ws.run_forever() 


Thread(target=loop_BONDUSDT).start() 
symbol_g_MLNUSDT = 'MLNUSDT' 
price_bids_g_MLNUSDT = Decimal('0.0') 
qty_bids_g_MLNUSDT = Decimal('0.0') 
price_asks_g_MLNUSDT = Decimal('0.0') 
qty_asks_g_MLNUSDT = Decimal('0.0') 
stepSize_g_MLNUSDT = Decimal('0.001') 


def on_message_MLNUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MLNUSDT = 'MLNUSDT' 
	price_bids_c_l_MLNUSDT = data['b'] 
	qty_bids_c_l_MLNUSDT = data['B'] 
	price_asks_c_l_MLNUSDT = data['a'] 
	qty_asks_c_l_MLNUSDT = data['A'] 

	global symbol_g_MLNUSDT 
	global price_bids_g_MLNUSDT 
	global qty_bids_g_MLNUSDT 
	global price_asks_g_MLNUSDT 
	global qty_asks_g_MLNUSDT 

	symbol_g_MLNUSDT = symbol_c_l_MLNUSDT 
	price_bids_g_MLNUSDT = Decimal(price_bids_c_l_MLNUSDT) 
	qty_bids_g_MLNUSDT = Decimal(qty_bids_c_l_MLNUSDT) 
	price_asks_g_MLNUSDT = Decimal(price_asks_c_l_MLNUSDT) 
	qty_asks_g_MLNUSDT = Decimal(qty_asks_c_l_MLNUSDT) 


def loop_MLNUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mlnusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MLNUSDT) 
	ws.run_forever() 


Thread(target=loop_MLNUSDT).start() 
symbol_g_DEXEUSDT = 'DEXEUSDT' 
price_bids_g_DEXEUSDT = Decimal('0.0') 
qty_bids_g_DEXEUSDT = Decimal('0.0') 
price_asks_g_DEXEUSDT = Decimal('0.0') 
qty_asks_g_DEXEUSDT = Decimal('0.0') 
stepSize_g_DEXEUSDT = Decimal('0.01') 


def on_message_DEXEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DEXEUSDT = 'DEXEUSDT' 
	price_bids_c_l_DEXEUSDT = data['b'] 
	qty_bids_c_l_DEXEUSDT = data['B'] 
	price_asks_c_l_DEXEUSDT = data['a'] 
	qty_asks_c_l_DEXEUSDT = data['A'] 

	global symbol_g_DEXEUSDT 
	global price_bids_g_DEXEUSDT 
	global qty_bids_g_DEXEUSDT 
	global price_asks_g_DEXEUSDT 
	global qty_asks_g_DEXEUSDT 

	symbol_g_DEXEUSDT = symbol_c_l_DEXEUSDT 
	price_bids_g_DEXEUSDT = Decimal(price_bids_c_l_DEXEUSDT) 
	qty_bids_g_DEXEUSDT = Decimal(qty_bids_c_l_DEXEUSDT) 
	price_asks_g_DEXEUSDT = Decimal(price_asks_c_l_DEXEUSDT) 
	qty_asks_g_DEXEUSDT = Decimal(qty_asks_c_l_DEXEUSDT) 


def loop_DEXEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dexeusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DEXEUSDT) 
	ws.run_forever() 


Thread(target=loop_DEXEUSDT).start() 
symbol_g_CLVUSDT = 'CLVUSDT' 
price_bids_g_CLVUSDT = Decimal('0.0') 
qty_bids_g_CLVUSDT = Decimal('0.0') 
price_asks_g_CLVUSDT = Decimal('0.0') 
qty_asks_g_CLVUSDT = Decimal('0.0') 
stepSize_g_CLVUSDT = Decimal('0.1') 


def on_message_CLVUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CLVUSDT = 'CLVUSDT' 
	price_bids_c_l_CLVUSDT = data['b'] 
	qty_bids_c_l_CLVUSDT = data['B'] 
	price_asks_c_l_CLVUSDT = data['a'] 
	qty_asks_c_l_CLVUSDT = data['A'] 

	global symbol_g_CLVUSDT 
	global price_bids_g_CLVUSDT 
	global qty_bids_g_CLVUSDT 
	global price_asks_g_CLVUSDT 
	global qty_asks_g_CLVUSDT 

	symbol_g_CLVUSDT = symbol_c_l_CLVUSDT 
	price_bids_g_CLVUSDT = Decimal(price_bids_c_l_CLVUSDT) 
	qty_bids_g_CLVUSDT = Decimal(qty_bids_c_l_CLVUSDT) 
	price_asks_g_CLVUSDT = Decimal(price_asks_c_l_CLVUSDT) 
	qty_asks_g_CLVUSDT = Decimal(qty_asks_c_l_CLVUSDT) 


def loop_CLVUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/clvusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CLVUSDT) 
	ws.run_forever() 


Thread(target=loop_CLVUSDT).start() 
symbol_g_QNTUSDT = 'QNTUSDT' 
price_bids_g_QNTUSDT = Decimal('0.0') 
qty_bids_g_QNTUSDT = Decimal('0.0') 
price_asks_g_QNTUSDT = Decimal('0.0') 
qty_asks_g_QNTUSDT = Decimal('0.0') 
stepSize_g_QNTUSDT = Decimal('0.001') 


def on_message_QNTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QNTUSDT = 'QNTUSDT' 
	price_bids_c_l_QNTUSDT = data['b'] 
	qty_bids_c_l_QNTUSDT = data['B'] 
	price_asks_c_l_QNTUSDT = data['a'] 
	qty_asks_c_l_QNTUSDT = data['A'] 

	global symbol_g_QNTUSDT 
	global price_bids_g_QNTUSDT 
	global qty_bids_g_QNTUSDT 
	global price_asks_g_QNTUSDT 
	global qty_asks_g_QNTUSDT 

	symbol_g_QNTUSDT = symbol_c_l_QNTUSDT 
	price_bids_g_QNTUSDT = Decimal(price_bids_c_l_QNTUSDT) 
	qty_bids_g_QNTUSDT = Decimal(qty_bids_c_l_QNTUSDT) 
	price_asks_g_QNTUSDT = Decimal(price_asks_c_l_QNTUSDT) 
	qty_asks_g_QNTUSDT = Decimal(qty_asks_c_l_QNTUSDT) 


def loop_QNTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/qntusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QNTUSDT) 
	ws.run_forever() 


Thread(target=loop_QNTUSDT).start() 
symbol_g_FLOWUSDT = 'FLOWUSDT' 
price_bids_g_FLOWUSDT = Decimal('0.0') 
qty_bids_g_FLOWUSDT = Decimal('0.0') 
price_asks_g_FLOWUSDT = Decimal('0.0') 
qty_asks_g_FLOWUSDT = Decimal('0.0') 
stepSize_g_FLOWUSDT = Decimal('0.01') 


def on_message_FLOWUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FLOWUSDT = 'FLOWUSDT' 
	price_bids_c_l_FLOWUSDT = data['b'] 
	qty_bids_c_l_FLOWUSDT = data['B'] 
	price_asks_c_l_FLOWUSDT = data['a'] 
	qty_asks_c_l_FLOWUSDT = data['A'] 

	global symbol_g_FLOWUSDT 
	global price_bids_g_FLOWUSDT 
	global qty_bids_g_FLOWUSDT 
	global price_asks_g_FLOWUSDT 
	global qty_asks_g_FLOWUSDT 

	symbol_g_FLOWUSDT = symbol_c_l_FLOWUSDT 
	price_bids_g_FLOWUSDT = Decimal(price_bids_c_l_FLOWUSDT) 
	qty_bids_g_FLOWUSDT = Decimal(qty_bids_c_l_FLOWUSDT) 
	price_asks_g_FLOWUSDT = Decimal(price_asks_c_l_FLOWUSDT) 
	qty_asks_g_FLOWUSDT = Decimal(qty_asks_c_l_FLOWUSDT) 


def loop_FLOWUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/flowusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FLOWUSDT) 
	ws.run_forever() 


Thread(target=loop_FLOWUSDT).start() 
symbol_g_TVKUSDT = 'TVKUSDT' 
price_bids_g_TVKUSDT = Decimal('0.0') 
qty_bids_g_TVKUSDT = Decimal('0.0') 
price_asks_g_TVKUSDT = Decimal('0.0') 
qty_asks_g_TVKUSDT = Decimal('0.0') 
stepSize_g_TVKUSDT = Decimal('1.0') 


def on_message_TVKUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TVKUSDT = 'TVKUSDT' 
	price_bids_c_l_TVKUSDT = data['b'] 
	qty_bids_c_l_TVKUSDT = data['B'] 
	price_asks_c_l_TVKUSDT = data['a'] 
	qty_asks_c_l_TVKUSDT = data['A'] 

	global symbol_g_TVKUSDT 
	global price_bids_g_TVKUSDT 
	global qty_bids_g_TVKUSDT 
	global price_asks_g_TVKUSDT 
	global qty_asks_g_TVKUSDT 

	symbol_g_TVKUSDT = symbol_c_l_TVKUSDT 
	price_bids_g_TVKUSDT = Decimal(price_bids_c_l_TVKUSDT) 
	qty_bids_g_TVKUSDT = Decimal(qty_bids_c_l_TVKUSDT) 
	price_asks_g_TVKUSDT = Decimal(price_asks_c_l_TVKUSDT) 
	qty_asks_g_TVKUSDT = Decimal(qty_asks_c_l_TVKUSDT) 


def loop_TVKUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tvkusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TVKUSDT) 
	ws.run_forever() 


Thread(target=loop_TVKUSDT).start() 
symbol_g_RAYUSDT = 'RAYUSDT' 
price_bids_g_RAYUSDT = Decimal('0.0') 
qty_bids_g_RAYUSDT = Decimal('0.0') 
price_asks_g_RAYUSDT = Decimal('0.0') 
qty_asks_g_RAYUSDT = Decimal('0.0') 
stepSize_g_RAYUSDT = Decimal('0.1') 


def on_message_RAYUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RAYUSDT = 'RAYUSDT' 
	price_bids_c_l_RAYUSDT = data['b'] 
	qty_bids_c_l_RAYUSDT = data['B'] 
	price_asks_c_l_RAYUSDT = data['a'] 
	qty_asks_c_l_RAYUSDT = data['A'] 

	global symbol_g_RAYUSDT 
	global price_bids_g_RAYUSDT 
	global qty_bids_g_RAYUSDT 
	global price_asks_g_RAYUSDT 
	global qty_asks_g_RAYUSDT 

	symbol_g_RAYUSDT = symbol_c_l_RAYUSDT 
	price_bids_g_RAYUSDT = Decimal(price_bids_c_l_RAYUSDT) 
	qty_bids_g_RAYUSDT = Decimal(qty_bids_c_l_RAYUSDT) 
	price_asks_g_RAYUSDT = Decimal(price_asks_c_l_RAYUSDT) 
	qty_asks_g_RAYUSDT = Decimal(qty_asks_c_l_RAYUSDT) 


def loop_RAYUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rayusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RAYUSDT) 
	ws.run_forever() 


Thread(target=loop_RAYUSDT).start() 
symbol_g_FARMUSDT = 'FARMUSDT' 
price_bids_g_FARMUSDT = Decimal('0.0') 
qty_bids_g_FARMUSDT = Decimal('0.0') 
price_asks_g_FARMUSDT = Decimal('0.0') 
qty_asks_g_FARMUSDT = Decimal('0.0') 
stepSize_g_FARMUSDT = Decimal('0.001') 


def on_message_FARMUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FARMUSDT = 'FARMUSDT' 
	price_bids_c_l_FARMUSDT = data['b'] 
	qty_bids_c_l_FARMUSDT = data['B'] 
	price_asks_c_l_FARMUSDT = data['a'] 
	qty_asks_c_l_FARMUSDT = data['A'] 

	global symbol_g_FARMUSDT 
	global price_bids_g_FARMUSDT 
	global qty_bids_g_FARMUSDT 
	global price_asks_g_FARMUSDT 
	global qty_asks_g_FARMUSDT 

	symbol_g_FARMUSDT = symbol_c_l_FARMUSDT 
	price_bids_g_FARMUSDT = Decimal(price_bids_c_l_FARMUSDT) 
	qty_bids_g_FARMUSDT = Decimal(qty_bids_c_l_FARMUSDT) 
	price_asks_g_FARMUSDT = Decimal(price_asks_c_l_FARMUSDT) 
	qty_asks_g_FARMUSDT = Decimal(qty_asks_c_l_FARMUSDT) 


def loop_FARMUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/farmusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FARMUSDT) 
	ws.run_forever() 


Thread(target=loop_FARMUSDT).start() 
symbol_g_ALPACAUSDT = 'ALPACAUSDT' 
price_bids_g_ALPACAUSDT = Decimal('0.0') 
qty_bids_g_ALPACAUSDT = Decimal('0.0') 
price_asks_g_ALPACAUSDT = Decimal('0.0') 
qty_asks_g_ALPACAUSDT = Decimal('0.0') 
stepSize_g_ALPACAUSDT = Decimal('0.1') 


def on_message_ALPACAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALPACAUSDT = 'ALPACAUSDT' 
	price_bids_c_l_ALPACAUSDT = data['b'] 
	qty_bids_c_l_ALPACAUSDT = data['B'] 
	price_asks_c_l_ALPACAUSDT = data['a'] 
	qty_asks_c_l_ALPACAUSDT = data['A'] 

	global symbol_g_ALPACAUSDT 
	global price_bids_g_ALPACAUSDT 
	global qty_bids_g_ALPACAUSDT 
	global price_asks_g_ALPACAUSDT 
	global qty_asks_g_ALPACAUSDT 

	symbol_g_ALPACAUSDT = symbol_c_l_ALPACAUSDT 
	price_bids_g_ALPACAUSDT = Decimal(price_bids_c_l_ALPACAUSDT) 
	qty_bids_g_ALPACAUSDT = Decimal(qty_bids_c_l_ALPACAUSDT) 
	price_asks_g_ALPACAUSDT = Decimal(price_asks_c_l_ALPACAUSDT) 
	qty_asks_g_ALPACAUSDT = Decimal(qty_asks_c_l_ALPACAUSDT) 


def loop_ALPACAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alpacausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALPACAUSDT) 
	ws.run_forever() 


Thread(target=loop_ALPACAUSDT).start() 
symbol_g_QUICKUSDT = 'QUICKUSDT' 
price_bids_g_QUICKUSDT = Decimal('0.0') 
qty_bids_g_QUICKUSDT = Decimal('0.0') 
price_asks_g_QUICKUSDT = Decimal('0.0') 
qty_asks_g_QUICKUSDT = Decimal('0.0') 
stepSize_g_QUICKUSDT = Decimal('0.001') 


def on_message_QUICKUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QUICKUSDT = 'QUICKUSDT' 
	price_bids_c_l_QUICKUSDT = data['b'] 
	qty_bids_c_l_QUICKUSDT = data['B'] 
	price_asks_c_l_QUICKUSDT = data['a'] 
	qty_asks_c_l_QUICKUSDT = data['A'] 

	global symbol_g_QUICKUSDT 
	global price_bids_g_QUICKUSDT 
	global qty_bids_g_QUICKUSDT 
	global price_asks_g_QUICKUSDT 
	global qty_asks_g_QUICKUSDT 

	symbol_g_QUICKUSDT = symbol_c_l_QUICKUSDT 
	price_bids_g_QUICKUSDT = Decimal(price_bids_c_l_QUICKUSDT) 
	qty_bids_g_QUICKUSDT = Decimal(qty_bids_c_l_QUICKUSDT) 
	price_asks_g_QUICKUSDT = Decimal(price_asks_c_l_QUICKUSDT) 
	qty_asks_g_QUICKUSDT = Decimal(qty_asks_c_l_QUICKUSDT) 


def loop_QUICKUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/quickusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QUICKUSDT) 
	ws.run_forever() 


Thread(target=loop_QUICKUSDT).start() 
symbol_g_FORUSDT = 'FORUSDT' 
price_bids_g_FORUSDT = Decimal('0.0') 
qty_bids_g_FORUSDT = Decimal('0.0') 
price_asks_g_FORUSDT = Decimal('0.0') 
qty_asks_g_FORUSDT = Decimal('0.0') 
stepSize_g_FORUSDT = Decimal('1.0') 


def on_message_FORUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FORUSDT = 'FORUSDT' 
	price_bids_c_l_FORUSDT = data['b'] 
	qty_bids_c_l_FORUSDT = data['B'] 
	price_asks_c_l_FORUSDT = data['a'] 
	qty_asks_c_l_FORUSDT = data['A'] 

	global symbol_g_FORUSDT 
	global price_bids_g_FORUSDT 
	global qty_bids_g_FORUSDT 
	global price_asks_g_FORUSDT 
	global qty_asks_g_FORUSDT 

	symbol_g_FORUSDT = symbol_c_l_FORUSDT 
	price_bids_g_FORUSDT = Decimal(price_bids_c_l_FORUSDT) 
	qty_bids_g_FORUSDT = Decimal(qty_bids_c_l_FORUSDT) 
	price_asks_g_FORUSDT = Decimal(price_asks_c_l_FORUSDT) 
	qty_asks_g_FORUSDT = Decimal(qty_asks_c_l_FORUSDT) 


def loop_FORUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/forusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FORUSDT) 
	ws.run_forever() 


Thread(target=loop_FORUSDT).start() 
symbol_g_REQUSDT = 'REQUSDT' 
price_bids_g_REQUSDT = Decimal('0.0') 
qty_bids_g_REQUSDT = Decimal('0.0') 
price_asks_g_REQUSDT = Decimal('0.0') 
qty_asks_g_REQUSDT = Decimal('0.0') 
stepSize_g_REQUSDT = Decimal('1.0') 


def on_message_REQUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_REQUSDT = 'REQUSDT' 
	price_bids_c_l_REQUSDT = data['b'] 
	qty_bids_c_l_REQUSDT = data['B'] 
	price_asks_c_l_REQUSDT = data['a'] 
	qty_asks_c_l_REQUSDT = data['A'] 

	global symbol_g_REQUSDT 
	global price_bids_g_REQUSDT 
	global qty_bids_g_REQUSDT 
	global price_asks_g_REQUSDT 
	global qty_asks_g_REQUSDT 

	symbol_g_REQUSDT = symbol_c_l_REQUSDT 
	price_bids_g_REQUSDT = Decimal(price_bids_c_l_REQUSDT) 
	qty_bids_g_REQUSDT = Decimal(qty_bids_c_l_REQUSDT) 
	price_asks_g_REQUSDT = Decimal(price_asks_c_l_REQUSDT) 
	qty_asks_g_REQUSDT = Decimal(qty_asks_c_l_REQUSDT) 


def loop_REQUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/requsdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_REQUSDT) 
	ws.run_forever() 


Thread(target=loop_REQUSDT).start() 
symbol_g_GHSTUSDT = 'GHSTUSDT' 
price_bids_g_GHSTUSDT = Decimal('0.0') 
qty_bids_g_GHSTUSDT = Decimal('0.0') 
price_asks_g_GHSTUSDT = Decimal('0.0') 
qty_asks_g_GHSTUSDT = Decimal('0.0') 
stepSize_g_GHSTUSDT = Decimal('0.1') 


def on_message_GHSTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GHSTUSDT = 'GHSTUSDT' 
	price_bids_c_l_GHSTUSDT = data['b'] 
	qty_bids_c_l_GHSTUSDT = data['B'] 
	price_asks_c_l_GHSTUSDT = data['a'] 
	qty_asks_c_l_GHSTUSDT = data['A'] 

	global symbol_g_GHSTUSDT 
	global price_bids_g_GHSTUSDT 
	global qty_bids_g_GHSTUSDT 
	global price_asks_g_GHSTUSDT 
	global qty_asks_g_GHSTUSDT 

	symbol_g_GHSTUSDT = symbol_c_l_GHSTUSDT 
	price_bids_g_GHSTUSDT = Decimal(price_bids_c_l_GHSTUSDT) 
	qty_bids_g_GHSTUSDT = Decimal(qty_bids_c_l_GHSTUSDT) 
	price_asks_g_GHSTUSDT = Decimal(price_asks_c_l_GHSTUSDT) 
	qty_asks_g_GHSTUSDT = Decimal(qty_asks_c_l_GHSTUSDT) 


def loop_GHSTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ghstusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GHSTUSDT) 
	ws.run_forever() 


Thread(target=loop_GHSTUSDT).start() 
symbol_g_WAXPUSDT = 'WAXPUSDT' 
price_bids_g_WAXPUSDT = Decimal('0.0') 
qty_bids_g_WAXPUSDT = Decimal('0.0') 
price_asks_g_WAXPUSDT = Decimal('0.0') 
qty_asks_g_WAXPUSDT = Decimal('0.0') 
stepSize_g_WAXPUSDT = Decimal('1.0') 


def on_message_WAXPUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WAXPUSDT = 'WAXPUSDT' 
	price_bids_c_l_WAXPUSDT = data['b'] 
	qty_bids_c_l_WAXPUSDT = data['B'] 
	price_asks_c_l_WAXPUSDT = data['a'] 
	qty_asks_c_l_WAXPUSDT = data['A'] 

	global symbol_g_WAXPUSDT 
	global price_bids_g_WAXPUSDT 
	global qty_bids_g_WAXPUSDT 
	global price_asks_g_WAXPUSDT 
	global qty_asks_g_WAXPUSDT 

	symbol_g_WAXPUSDT = symbol_c_l_WAXPUSDT 
	price_bids_g_WAXPUSDT = Decimal(price_bids_c_l_WAXPUSDT) 
	qty_bids_g_WAXPUSDT = Decimal(qty_bids_c_l_WAXPUSDT) 
	price_asks_g_WAXPUSDT = Decimal(price_asks_c_l_WAXPUSDT) 
	qty_asks_g_WAXPUSDT = Decimal(qty_asks_c_l_WAXPUSDT) 


def loop_WAXPUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/waxpusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WAXPUSDT) 
	ws.run_forever() 


Thread(target=loop_WAXPUSDT).start() 
symbol_g_XECUSDT = 'XECUSDT' 
price_bids_g_XECUSDT = Decimal('0.0') 
qty_bids_g_XECUSDT = Decimal('0.0') 
price_asks_g_XECUSDT = Decimal('0.0') 
qty_asks_g_XECUSDT = Decimal('0.0') 
stepSize_g_XECUSDT = Decimal('1.0') 


def on_message_XECUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XECUSDT = 'XECUSDT' 
	price_bids_c_l_XECUSDT = data['b'] 
	qty_bids_c_l_XECUSDT = data['B'] 
	price_asks_c_l_XECUSDT = data['a'] 
	qty_asks_c_l_XECUSDT = data['A'] 

	global symbol_g_XECUSDT 
	global price_bids_g_XECUSDT 
	global qty_bids_g_XECUSDT 
	global price_asks_g_XECUSDT 
	global qty_asks_g_XECUSDT 

	symbol_g_XECUSDT = symbol_c_l_XECUSDT 
	price_bids_g_XECUSDT = Decimal(price_bids_c_l_XECUSDT) 
	qty_bids_g_XECUSDT = Decimal(qty_bids_c_l_XECUSDT) 
	price_asks_g_XECUSDT = Decimal(price_asks_c_l_XECUSDT) 
	qty_asks_g_XECUSDT = Decimal(qty_asks_c_l_XECUSDT) 


def loop_XECUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xecusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XECUSDT) 
	ws.run_forever() 


Thread(target=loop_XECUSDT).start() 
symbol_g_ELFUSDT = 'ELFUSDT' 
price_bids_g_ELFUSDT = Decimal('0.0') 
qty_bids_g_ELFUSDT = Decimal('0.0') 
price_asks_g_ELFUSDT = Decimal('0.0') 
qty_asks_g_ELFUSDT = Decimal('0.0') 
stepSize_g_ELFUSDT = Decimal('0.1') 


def on_message_ELFUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ELFUSDT = 'ELFUSDT' 
	price_bids_c_l_ELFUSDT = data['b'] 
	qty_bids_c_l_ELFUSDT = data['B'] 
	price_asks_c_l_ELFUSDT = data['a'] 
	qty_asks_c_l_ELFUSDT = data['A'] 

	global symbol_g_ELFUSDT 
	global price_bids_g_ELFUSDT 
	global qty_bids_g_ELFUSDT 
	global price_asks_g_ELFUSDT 
	global qty_asks_g_ELFUSDT 

	symbol_g_ELFUSDT = symbol_c_l_ELFUSDT 
	price_bids_g_ELFUSDT = Decimal(price_bids_c_l_ELFUSDT) 
	qty_bids_g_ELFUSDT = Decimal(qty_bids_c_l_ELFUSDT) 
	price_asks_g_ELFUSDT = Decimal(price_asks_c_l_ELFUSDT) 
	qty_asks_g_ELFUSDT = Decimal(qty_asks_c_l_ELFUSDT) 


def loop_ELFUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/elfusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ELFUSDT) 
	ws.run_forever() 


Thread(target=loop_ELFUSDT).start() 
symbol_g_DYDXUSDT = 'DYDXUSDT' 
price_bids_g_DYDXUSDT = Decimal('0.0') 
qty_bids_g_DYDXUSDT = Decimal('0.0') 
price_asks_g_DYDXUSDT = Decimal('0.0') 
qty_asks_g_DYDXUSDT = Decimal('0.0') 
stepSize_g_DYDXUSDT = Decimal('0.01') 


def on_message_DYDXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DYDXUSDT = 'DYDXUSDT' 
	price_bids_c_l_DYDXUSDT = data['b'] 
	qty_bids_c_l_DYDXUSDT = data['B'] 
	price_asks_c_l_DYDXUSDT = data['a'] 
	qty_asks_c_l_DYDXUSDT = data['A'] 

	global symbol_g_DYDXUSDT 
	global price_bids_g_DYDXUSDT 
	global qty_bids_g_DYDXUSDT 
	global price_asks_g_DYDXUSDT 
	global qty_asks_g_DYDXUSDT 

	symbol_g_DYDXUSDT = symbol_c_l_DYDXUSDT 
	price_bids_g_DYDXUSDT = Decimal(price_bids_c_l_DYDXUSDT) 
	qty_bids_g_DYDXUSDT = Decimal(qty_bids_c_l_DYDXUSDT) 
	price_asks_g_DYDXUSDT = Decimal(price_asks_c_l_DYDXUSDT) 
	qty_asks_g_DYDXUSDT = Decimal(qty_asks_c_l_DYDXUSDT) 


def loop_DYDXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dydxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DYDXUSDT) 
	ws.run_forever() 


Thread(target=loop_DYDXUSDT).start() 
symbol_g_IDEXUSDT = 'IDEXUSDT' 
price_bids_g_IDEXUSDT = Decimal('0.0') 
qty_bids_g_IDEXUSDT = Decimal('0.0') 
price_asks_g_IDEXUSDT = Decimal('0.0') 
qty_asks_g_IDEXUSDT = Decimal('0.0') 
stepSize_g_IDEXUSDT = Decimal('0.1') 


def on_message_IDEXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IDEXUSDT = 'IDEXUSDT' 
	price_bids_c_l_IDEXUSDT = data['b'] 
	qty_bids_c_l_IDEXUSDT = data['B'] 
	price_asks_c_l_IDEXUSDT = data['a'] 
	qty_asks_c_l_IDEXUSDT = data['A'] 

	global symbol_g_IDEXUSDT 
	global price_bids_g_IDEXUSDT 
	global qty_bids_g_IDEXUSDT 
	global price_asks_g_IDEXUSDT 
	global qty_asks_g_IDEXUSDT 

	symbol_g_IDEXUSDT = symbol_c_l_IDEXUSDT 
	price_bids_g_IDEXUSDT = Decimal(price_bids_c_l_IDEXUSDT) 
	qty_bids_g_IDEXUSDT = Decimal(qty_bids_c_l_IDEXUSDT) 
	price_asks_g_IDEXUSDT = Decimal(price_asks_c_l_IDEXUSDT) 
	qty_asks_g_IDEXUSDT = Decimal(qty_asks_c_l_IDEXUSDT) 


def loop_IDEXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/idexusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IDEXUSDT) 
	ws.run_forever() 


Thread(target=loop_IDEXUSDT).start() 
symbol_g_VIDTUSDT = 'VIDTUSDT' 
price_bids_g_VIDTUSDT = Decimal('0.0') 
qty_bids_g_VIDTUSDT = Decimal('0.0') 
price_asks_g_VIDTUSDT = Decimal('0.0') 
qty_asks_g_VIDTUSDT = Decimal('0.0') 
stepSize_g_VIDTUSDT = Decimal('1.0') 


def on_message_VIDTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VIDTUSDT = 'VIDTUSDT' 
	price_bids_c_l_VIDTUSDT = data['b'] 
	qty_bids_c_l_VIDTUSDT = data['B'] 
	price_asks_c_l_VIDTUSDT = data['a'] 
	qty_asks_c_l_VIDTUSDT = data['A'] 

	global symbol_g_VIDTUSDT 
	global price_bids_g_VIDTUSDT 
	global qty_bids_g_VIDTUSDT 
	global price_asks_g_VIDTUSDT 
	global qty_asks_g_VIDTUSDT 

	symbol_g_VIDTUSDT = symbol_c_l_VIDTUSDT 
	price_bids_g_VIDTUSDT = Decimal(price_bids_c_l_VIDTUSDT) 
	qty_bids_g_VIDTUSDT = Decimal(qty_bids_c_l_VIDTUSDT) 
	price_asks_g_VIDTUSDT = Decimal(price_asks_c_l_VIDTUSDT) 
	qty_asks_g_VIDTUSDT = Decimal(qty_asks_c_l_VIDTUSDT) 


def loop_VIDTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/vidtusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VIDTUSDT) 
	ws.run_forever() 


Thread(target=loop_VIDTUSDT).start() 
symbol_g_ILVUSDT = 'ILVUSDT' 
price_bids_g_ILVUSDT = Decimal('0.0') 
qty_bids_g_ILVUSDT = Decimal('0.0') 
price_asks_g_ILVUSDT = Decimal('0.0') 
qty_asks_g_ILVUSDT = Decimal('0.0') 
stepSize_g_ILVUSDT = Decimal('0.001') 


def on_message_ILVUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ILVUSDT = 'ILVUSDT' 
	price_bids_c_l_ILVUSDT = data['b'] 
	qty_bids_c_l_ILVUSDT = data['B'] 
	price_asks_c_l_ILVUSDT = data['a'] 
	qty_asks_c_l_ILVUSDT = data['A'] 

	global symbol_g_ILVUSDT 
	global price_bids_g_ILVUSDT 
	global qty_bids_g_ILVUSDT 
	global price_asks_g_ILVUSDT 
	global qty_asks_g_ILVUSDT 

	symbol_g_ILVUSDT = symbol_c_l_ILVUSDT 
	price_bids_g_ILVUSDT = Decimal(price_bids_c_l_ILVUSDT) 
	qty_bids_g_ILVUSDT = Decimal(qty_bids_c_l_ILVUSDT) 
	price_asks_g_ILVUSDT = Decimal(price_asks_c_l_ILVUSDT) 
	qty_asks_g_ILVUSDT = Decimal(qty_asks_c_l_ILVUSDT) 


def loop_ILVUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ilvusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ILVUSDT) 
	ws.run_forever() 


Thread(target=loop_ILVUSDT).start() 
symbol_g_YGGUSDT = 'YGGUSDT' 
price_bids_g_YGGUSDT = Decimal('0.0') 
qty_bids_g_YGGUSDT = Decimal('0.0') 
price_asks_g_YGGUSDT = Decimal('0.0') 
qty_asks_g_YGGUSDT = Decimal('0.0') 
stepSize_g_YGGUSDT = Decimal('0.1') 


def on_message_YGGUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_YGGUSDT = 'YGGUSDT' 
	price_bids_c_l_YGGUSDT = data['b'] 
	qty_bids_c_l_YGGUSDT = data['B'] 
	price_asks_c_l_YGGUSDT = data['a'] 
	qty_asks_c_l_YGGUSDT = data['A'] 

	global symbol_g_YGGUSDT 
	global price_bids_g_YGGUSDT 
	global qty_bids_g_YGGUSDT 
	global price_asks_g_YGGUSDT 
	global qty_asks_g_YGGUSDT 

	symbol_g_YGGUSDT = symbol_c_l_YGGUSDT 
	price_bids_g_YGGUSDT = Decimal(price_bids_c_l_YGGUSDT) 
	qty_bids_g_YGGUSDT = Decimal(qty_bids_c_l_YGGUSDT) 
	price_asks_g_YGGUSDT = Decimal(price_asks_c_l_YGGUSDT) 
	qty_asks_g_YGGUSDT = Decimal(qty_asks_c_l_YGGUSDT) 


def loop_YGGUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/yggusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_YGGUSDT) 
	ws.run_forever() 


Thread(target=loop_YGGUSDT).start() 
symbol_g_SYSUSDT = 'SYSUSDT' 
price_bids_g_SYSUSDT = Decimal('0.0') 
qty_bids_g_SYSUSDT = Decimal('0.0') 
price_asks_g_SYSUSDT = Decimal('0.0') 
qty_asks_g_SYSUSDT = Decimal('0.0') 
stepSize_g_SYSUSDT = Decimal('1.0') 


def on_message_SYSUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SYSUSDT = 'SYSUSDT' 
	price_bids_c_l_SYSUSDT = data['b'] 
	qty_bids_c_l_SYSUSDT = data['B'] 
	price_asks_c_l_SYSUSDT = data['a'] 
	qty_asks_c_l_SYSUSDT = data['A'] 

	global symbol_g_SYSUSDT 
	global price_bids_g_SYSUSDT 
	global qty_bids_g_SYSUSDT 
	global price_asks_g_SYSUSDT 
	global qty_asks_g_SYSUSDT 

	symbol_g_SYSUSDT = symbol_c_l_SYSUSDT 
	price_bids_g_SYSUSDT = Decimal(price_bids_c_l_SYSUSDT) 
	qty_bids_g_SYSUSDT = Decimal(qty_bids_c_l_SYSUSDT) 
	price_asks_g_SYSUSDT = Decimal(price_asks_c_l_SYSUSDT) 
	qty_asks_g_SYSUSDT = Decimal(qty_asks_c_l_SYSUSDT) 


def loop_SYSUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sysusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SYSUSDT) 
	ws.run_forever() 


Thread(target=loop_SYSUSDT).start() 
symbol_g_DFUSDT = 'DFUSDT' 
price_bids_g_DFUSDT = Decimal('0.0') 
qty_bids_g_DFUSDT = Decimal('0.0') 
price_asks_g_DFUSDT = Decimal('0.0') 
qty_asks_g_DFUSDT = Decimal('0.0') 
stepSize_g_DFUSDT = Decimal('1.0') 


def on_message_DFUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DFUSDT = 'DFUSDT' 
	price_bids_c_l_DFUSDT = data['b'] 
	qty_bids_c_l_DFUSDT = data['B'] 
	price_asks_c_l_DFUSDT = data['a'] 
	qty_asks_c_l_DFUSDT = data['A'] 

	global symbol_g_DFUSDT 
	global price_bids_g_DFUSDT 
	global qty_bids_g_DFUSDT 
	global price_asks_g_DFUSDT 
	global qty_asks_g_DFUSDT 

	symbol_g_DFUSDT = symbol_c_l_DFUSDT 
	price_bids_g_DFUSDT = Decimal(price_bids_c_l_DFUSDT) 
	qty_bids_g_DFUSDT = Decimal(qty_bids_c_l_DFUSDT) 
	price_asks_g_DFUSDT = Decimal(price_asks_c_l_DFUSDT) 
	qty_asks_g_DFUSDT = Decimal(qty_asks_c_l_DFUSDT) 


def loop_DFUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dfusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DFUSDT) 
	ws.run_forever() 


Thread(target=loop_DFUSDT).start() 
symbol_g_FIDAUSDT = 'FIDAUSDT' 
price_bids_g_FIDAUSDT = Decimal('0.0') 
qty_bids_g_FIDAUSDT = Decimal('0.0') 
price_asks_g_FIDAUSDT = Decimal('0.0') 
qty_asks_g_FIDAUSDT = Decimal('0.0') 
stepSize_g_FIDAUSDT = Decimal('0.1') 


def on_message_FIDAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FIDAUSDT = 'FIDAUSDT' 
	price_bids_c_l_FIDAUSDT = data['b'] 
	qty_bids_c_l_FIDAUSDT = data['B'] 
	price_asks_c_l_FIDAUSDT = data['a'] 
	qty_asks_c_l_FIDAUSDT = data['A'] 

	global symbol_g_FIDAUSDT 
	global price_bids_g_FIDAUSDT 
	global qty_bids_g_FIDAUSDT 
	global price_asks_g_FIDAUSDT 
	global qty_asks_g_FIDAUSDT 

	symbol_g_FIDAUSDT = symbol_c_l_FIDAUSDT 
	price_bids_g_FIDAUSDT = Decimal(price_bids_c_l_FIDAUSDT) 
	qty_bids_g_FIDAUSDT = Decimal(qty_bids_c_l_FIDAUSDT) 
	price_asks_g_FIDAUSDT = Decimal(price_asks_c_l_FIDAUSDT) 
	qty_asks_g_FIDAUSDT = Decimal(qty_asks_c_l_FIDAUSDT) 


def loop_FIDAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fidausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FIDAUSDT) 
	ws.run_forever() 


Thread(target=loop_FIDAUSDT).start() 
symbol_g_FRONTUSDT = 'FRONTUSDT' 
price_bids_g_FRONTUSDT = Decimal('0.0') 
qty_bids_g_FRONTUSDT = Decimal('0.0') 
price_asks_g_FRONTUSDT = Decimal('0.0') 
qty_asks_g_FRONTUSDT = Decimal('0.0') 
stepSize_g_FRONTUSDT = Decimal('1.0') 


def on_message_FRONTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FRONTUSDT = 'FRONTUSDT' 
	price_bids_c_l_FRONTUSDT = data['b'] 
	qty_bids_c_l_FRONTUSDT = data['B'] 
	price_asks_c_l_FRONTUSDT = data['a'] 
	qty_asks_c_l_FRONTUSDT = data['A'] 

	global symbol_g_FRONTUSDT 
	global price_bids_g_FRONTUSDT 
	global qty_bids_g_FRONTUSDT 
	global price_asks_g_FRONTUSDT 
	global qty_asks_g_FRONTUSDT 

	symbol_g_FRONTUSDT = symbol_c_l_FRONTUSDT 
	price_bids_g_FRONTUSDT = Decimal(price_bids_c_l_FRONTUSDT) 
	qty_bids_g_FRONTUSDT = Decimal(qty_bids_c_l_FRONTUSDT) 
	price_asks_g_FRONTUSDT = Decimal(price_asks_c_l_FRONTUSDT) 
	qty_asks_g_FRONTUSDT = Decimal(qty_asks_c_l_FRONTUSDT) 


def loop_FRONTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/frontusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FRONTUSDT) 
	ws.run_forever() 


Thread(target=loop_FRONTUSDT).start() 
symbol_g_CVPUSDT = 'CVPUSDT' 
price_bids_g_CVPUSDT = Decimal('0.0') 
qty_bids_g_CVPUSDT = Decimal('0.0') 
price_asks_g_CVPUSDT = Decimal('0.0') 
qty_asks_g_CVPUSDT = Decimal('0.0') 
stepSize_g_CVPUSDT = Decimal('0.1') 


def on_message_CVPUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CVPUSDT = 'CVPUSDT' 
	price_bids_c_l_CVPUSDT = data['b'] 
	qty_bids_c_l_CVPUSDT = data['B'] 
	price_asks_c_l_CVPUSDT = data['a'] 
	qty_asks_c_l_CVPUSDT = data['A'] 

	global symbol_g_CVPUSDT 
	global price_bids_g_CVPUSDT 
	global qty_bids_g_CVPUSDT 
	global price_asks_g_CVPUSDT 
	global qty_asks_g_CVPUSDT 

	symbol_g_CVPUSDT = symbol_c_l_CVPUSDT 
	price_bids_g_CVPUSDT = Decimal(price_bids_c_l_CVPUSDT) 
	qty_bids_g_CVPUSDT = Decimal(qty_bids_c_l_CVPUSDT) 
	price_asks_g_CVPUSDT = Decimal(price_asks_c_l_CVPUSDT) 
	qty_asks_g_CVPUSDT = Decimal(qty_asks_c_l_CVPUSDT) 


def loop_CVPUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cvpusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CVPUSDT) 
	ws.run_forever() 


Thread(target=loop_CVPUSDT).start() 
symbol_g_AGLDUSDT = 'AGLDUSDT' 
price_bids_g_AGLDUSDT = Decimal('0.0') 
qty_bids_g_AGLDUSDT = Decimal('0.0') 
price_asks_g_AGLDUSDT = Decimal('0.0') 
qty_asks_g_AGLDUSDT = Decimal('0.0') 
stepSize_g_AGLDUSDT = Decimal('0.1') 


def on_message_AGLDUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AGLDUSDT = 'AGLDUSDT' 
	price_bids_c_l_AGLDUSDT = data['b'] 
	qty_bids_c_l_AGLDUSDT = data['B'] 
	price_asks_c_l_AGLDUSDT = data['a'] 
	qty_asks_c_l_AGLDUSDT = data['A'] 

	global symbol_g_AGLDUSDT 
	global price_bids_g_AGLDUSDT 
	global qty_bids_g_AGLDUSDT 
	global price_asks_g_AGLDUSDT 
	global qty_asks_g_AGLDUSDT 

	symbol_g_AGLDUSDT = symbol_c_l_AGLDUSDT 
	price_bids_g_AGLDUSDT = Decimal(price_bids_c_l_AGLDUSDT) 
	qty_bids_g_AGLDUSDT = Decimal(qty_bids_c_l_AGLDUSDT) 
	price_asks_g_AGLDUSDT = Decimal(price_asks_c_l_AGLDUSDT) 
	qty_asks_g_AGLDUSDT = Decimal(qty_asks_c_l_AGLDUSDT) 


def loop_AGLDUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/agldusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AGLDUSDT) 
	ws.run_forever() 


Thread(target=loop_AGLDUSDT).start() 
symbol_g_RADUSDT = 'RADUSDT' 
price_bids_g_RADUSDT = Decimal('0.0') 
qty_bids_g_RADUSDT = Decimal('0.0') 
price_asks_g_RADUSDT = Decimal('0.0') 
qty_asks_g_RADUSDT = Decimal('0.0') 
stepSize_g_RADUSDT = Decimal('0.1') 


def on_message_RADUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RADUSDT = 'RADUSDT' 
	price_bids_c_l_RADUSDT = data['b'] 
	qty_bids_c_l_RADUSDT = data['B'] 
	price_asks_c_l_RADUSDT = data['a'] 
	qty_asks_c_l_RADUSDT = data['A'] 

	global symbol_g_RADUSDT 
	global price_bids_g_RADUSDT 
	global qty_bids_g_RADUSDT 
	global price_asks_g_RADUSDT 
	global qty_asks_g_RADUSDT 

	symbol_g_RADUSDT = symbol_c_l_RADUSDT 
	price_bids_g_RADUSDT = Decimal(price_bids_c_l_RADUSDT) 
	qty_bids_g_RADUSDT = Decimal(qty_bids_c_l_RADUSDT) 
	price_asks_g_RADUSDT = Decimal(price_asks_c_l_RADUSDT) 
	qty_asks_g_RADUSDT = Decimal(qty_asks_c_l_RADUSDT) 


def loop_RADUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/radusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RADUSDT) 
	ws.run_forever() 


Thread(target=loop_RADUSDT).start() 
symbol_g_BETAUSDT = 'BETAUSDT' 
price_bids_g_BETAUSDT = Decimal('0.0') 
qty_bids_g_BETAUSDT = Decimal('0.0') 
price_asks_g_BETAUSDT = Decimal('0.0') 
qty_asks_g_BETAUSDT = Decimal('0.0') 
stepSize_g_BETAUSDT = Decimal('1.0') 


def on_message_BETAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BETAUSDT = 'BETAUSDT' 
	price_bids_c_l_BETAUSDT = data['b'] 
	qty_bids_c_l_BETAUSDT = data['B'] 
	price_asks_c_l_BETAUSDT = data['a'] 
	qty_asks_c_l_BETAUSDT = data['A'] 

	global symbol_g_BETAUSDT 
	global price_bids_g_BETAUSDT 
	global qty_bids_g_BETAUSDT 
	global price_asks_g_BETAUSDT 
	global qty_asks_g_BETAUSDT 

	symbol_g_BETAUSDT = symbol_c_l_BETAUSDT 
	price_bids_g_BETAUSDT = Decimal(price_bids_c_l_BETAUSDT) 
	qty_bids_g_BETAUSDT = Decimal(qty_bids_c_l_BETAUSDT) 
	price_asks_g_BETAUSDT = Decimal(price_asks_c_l_BETAUSDT) 
	qty_asks_g_BETAUSDT = Decimal(qty_asks_c_l_BETAUSDT) 


def loop_BETAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/betausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BETAUSDT) 
	ws.run_forever() 


Thread(target=loop_BETAUSDT).start() 
symbol_g_RAREUSDT = 'RAREUSDT' 
price_bids_g_RAREUSDT = Decimal('0.0') 
qty_bids_g_RAREUSDT = Decimal('0.0') 
price_asks_g_RAREUSDT = Decimal('0.0') 
qty_asks_g_RAREUSDT = Decimal('0.0') 
stepSize_g_RAREUSDT = Decimal('0.1') 


def on_message_RAREUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RAREUSDT = 'RAREUSDT' 
	price_bids_c_l_RAREUSDT = data['b'] 
	qty_bids_c_l_RAREUSDT = data['B'] 
	price_asks_c_l_RAREUSDT = data['a'] 
	qty_asks_c_l_RAREUSDT = data['A'] 

	global symbol_g_RAREUSDT 
	global price_bids_g_RAREUSDT 
	global qty_bids_g_RAREUSDT 
	global price_asks_g_RAREUSDT 
	global qty_asks_g_RAREUSDT 

	symbol_g_RAREUSDT = symbol_c_l_RAREUSDT 
	price_bids_g_RAREUSDT = Decimal(price_bids_c_l_RAREUSDT) 
	qty_bids_g_RAREUSDT = Decimal(qty_bids_c_l_RAREUSDT) 
	price_asks_g_RAREUSDT = Decimal(price_asks_c_l_RAREUSDT) 
	qty_asks_g_RAREUSDT = Decimal(qty_asks_c_l_RAREUSDT) 


def loop_RAREUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rareusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RAREUSDT) 
	ws.run_forever() 


Thread(target=loop_RAREUSDT).start() 
symbol_g_CHESSUSDT = 'CHESSUSDT' 
price_bids_g_CHESSUSDT = Decimal('0.0') 
qty_bids_g_CHESSUSDT = Decimal('0.0') 
price_asks_g_CHESSUSDT = Decimal('0.0') 
qty_asks_g_CHESSUSDT = Decimal('0.0') 
stepSize_g_CHESSUSDT = Decimal('0.1') 


def on_message_CHESSUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHESSUSDT = 'CHESSUSDT' 
	price_bids_c_l_CHESSUSDT = data['b'] 
	qty_bids_c_l_CHESSUSDT = data['B'] 
	price_asks_c_l_CHESSUSDT = data['a'] 
	qty_asks_c_l_CHESSUSDT = data['A'] 

	global symbol_g_CHESSUSDT 
	global price_bids_g_CHESSUSDT 
	global qty_bids_g_CHESSUSDT 
	global price_asks_g_CHESSUSDT 
	global qty_asks_g_CHESSUSDT 

	symbol_g_CHESSUSDT = symbol_c_l_CHESSUSDT 
	price_bids_g_CHESSUSDT = Decimal(price_bids_c_l_CHESSUSDT) 
	qty_bids_g_CHESSUSDT = Decimal(qty_bids_c_l_CHESSUSDT) 
	price_asks_g_CHESSUSDT = Decimal(price_asks_c_l_CHESSUSDT) 
	qty_asks_g_CHESSUSDT = Decimal(qty_asks_c_l_CHESSUSDT) 


def loop_CHESSUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chessusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHESSUSDT) 
	ws.run_forever() 


Thread(target=loop_CHESSUSDT).start() 
symbol_g_ADXUSDT = 'ADXUSDT' 
price_bids_g_ADXUSDT = Decimal('0.0') 
qty_bids_g_ADXUSDT = Decimal('0.0') 
price_asks_g_ADXUSDT = Decimal('0.0') 
qty_asks_g_ADXUSDT = Decimal('0.0') 
stepSize_g_ADXUSDT = Decimal('1.0') 


def on_message_ADXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADXUSDT = 'ADXUSDT' 
	price_bids_c_l_ADXUSDT = data['b'] 
	qty_bids_c_l_ADXUSDT = data['B'] 
	price_asks_c_l_ADXUSDT = data['a'] 
	qty_asks_c_l_ADXUSDT = data['A'] 

	global symbol_g_ADXUSDT 
	global price_bids_g_ADXUSDT 
	global qty_bids_g_ADXUSDT 
	global price_asks_g_ADXUSDT 
	global qty_asks_g_ADXUSDT 

	symbol_g_ADXUSDT = symbol_c_l_ADXUSDT 
	price_bids_g_ADXUSDT = Decimal(price_bids_c_l_ADXUSDT) 
	qty_bids_g_ADXUSDT = Decimal(qty_bids_c_l_ADXUSDT) 
	price_asks_g_ADXUSDT = Decimal(price_asks_c_l_ADXUSDT) 
	qty_asks_g_ADXUSDT = Decimal(qty_asks_c_l_ADXUSDT) 


def loop_ADXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADXUSDT) 
	ws.run_forever() 


Thread(target=loop_ADXUSDT).start() 
symbol_g_AUCTIONUSDT = 'AUCTIONUSDT' 
price_bids_g_AUCTIONUSDT = Decimal('0.0') 
qty_bids_g_AUCTIONUSDT = Decimal('0.0') 
price_asks_g_AUCTIONUSDT = Decimal('0.0') 
qty_asks_g_AUCTIONUSDT = Decimal('0.0') 
stepSize_g_AUCTIONUSDT = Decimal('0.01') 


def on_message_AUCTIONUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AUCTIONUSDT = 'AUCTIONUSDT' 
	price_bids_c_l_AUCTIONUSDT = data['b'] 
	qty_bids_c_l_AUCTIONUSDT = data['B'] 
	price_asks_c_l_AUCTIONUSDT = data['a'] 
	qty_asks_c_l_AUCTIONUSDT = data['A'] 

	global symbol_g_AUCTIONUSDT 
	global price_bids_g_AUCTIONUSDT 
	global qty_bids_g_AUCTIONUSDT 
	global price_asks_g_AUCTIONUSDT 
	global qty_asks_g_AUCTIONUSDT 

	symbol_g_AUCTIONUSDT = symbol_c_l_AUCTIONUSDT 
	price_bids_g_AUCTIONUSDT = Decimal(price_bids_c_l_AUCTIONUSDT) 
	qty_bids_g_AUCTIONUSDT = Decimal(qty_bids_c_l_AUCTIONUSDT) 
	price_asks_g_AUCTIONUSDT = Decimal(price_asks_c_l_AUCTIONUSDT) 
	qty_asks_g_AUCTIONUSDT = Decimal(qty_asks_c_l_AUCTIONUSDT) 


def loop_AUCTIONUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/auctionusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AUCTIONUSDT) 
	ws.run_forever() 


Thread(target=loop_AUCTIONUSDT).start() 
symbol_g_BNXUSDT = 'BNXUSDT' 
price_bids_g_BNXUSDT = Decimal('0.0') 
qty_bids_g_BNXUSDT = Decimal('0.0') 
price_asks_g_BNXUSDT = Decimal('0.0') 
qty_asks_g_BNXUSDT = Decimal('0.0') 
stepSize_g_BNXUSDT = Decimal('0.001') 


def on_message_BNXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNXUSDT = 'BNXUSDT' 
	price_bids_c_l_BNXUSDT = data['b'] 
	qty_bids_c_l_BNXUSDT = data['B'] 
	price_asks_c_l_BNXUSDT = data['a'] 
	qty_asks_c_l_BNXUSDT = data['A'] 

	global symbol_g_BNXUSDT 
	global price_bids_g_BNXUSDT 
	global qty_bids_g_BNXUSDT 
	global price_asks_g_BNXUSDT 
	global qty_asks_g_BNXUSDT 

	symbol_g_BNXUSDT = symbol_c_l_BNXUSDT 
	price_bids_g_BNXUSDT = Decimal(price_bids_c_l_BNXUSDT) 
	qty_bids_g_BNXUSDT = Decimal(qty_bids_c_l_BNXUSDT) 
	price_asks_g_BNXUSDT = Decimal(price_asks_c_l_BNXUSDT) 
	qty_asks_g_BNXUSDT = Decimal(qty_asks_c_l_BNXUSDT) 


def loop_BNXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNXUSDT) 
	ws.run_forever() 


Thread(target=loop_BNXUSDT).start() 
symbol_g_MOVRUSDT = 'MOVRUSDT' 
price_bids_g_MOVRUSDT = Decimal('0.0') 
qty_bids_g_MOVRUSDT = Decimal('0.0') 
price_asks_g_MOVRUSDT = Decimal('0.0') 
qty_asks_g_MOVRUSDT = Decimal('0.0') 
stepSize_g_MOVRUSDT = Decimal('0.001') 


def on_message_MOVRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MOVRUSDT = 'MOVRUSDT' 
	price_bids_c_l_MOVRUSDT = data['b'] 
	qty_bids_c_l_MOVRUSDT = data['B'] 
	price_asks_c_l_MOVRUSDT = data['a'] 
	qty_asks_c_l_MOVRUSDT = data['A'] 

	global symbol_g_MOVRUSDT 
	global price_bids_g_MOVRUSDT 
	global qty_bids_g_MOVRUSDT 
	global price_asks_g_MOVRUSDT 
	global qty_asks_g_MOVRUSDT 

	symbol_g_MOVRUSDT = symbol_c_l_MOVRUSDT 
	price_bids_g_MOVRUSDT = Decimal(price_bids_c_l_MOVRUSDT) 
	qty_bids_g_MOVRUSDT = Decimal(qty_bids_c_l_MOVRUSDT) 
	price_asks_g_MOVRUSDT = Decimal(price_asks_c_l_MOVRUSDT) 
	qty_asks_g_MOVRUSDT = Decimal(qty_asks_c_l_MOVRUSDT) 


def loop_MOVRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/movrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MOVRUSDT) 
	ws.run_forever() 


Thread(target=loop_MOVRUSDT).start() 
symbol_g_CITYUSDT = 'CITYUSDT' 
price_bids_g_CITYUSDT = Decimal('0.0') 
qty_bids_g_CITYUSDT = Decimal('0.0') 
price_asks_g_CITYUSDT = Decimal('0.0') 
qty_asks_g_CITYUSDT = Decimal('0.0') 
stepSize_g_CITYUSDT = Decimal('0.01') 


def on_message_CITYUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CITYUSDT = 'CITYUSDT' 
	price_bids_c_l_CITYUSDT = data['b'] 
	qty_bids_c_l_CITYUSDT = data['B'] 
	price_asks_c_l_CITYUSDT = data['a'] 
	qty_asks_c_l_CITYUSDT = data['A'] 

	global symbol_g_CITYUSDT 
	global price_bids_g_CITYUSDT 
	global qty_bids_g_CITYUSDT 
	global price_asks_g_CITYUSDT 
	global qty_asks_g_CITYUSDT 

	symbol_g_CITYUSDT = symbol_c_l_CITYUSDT 
	price_bids_g_CITYUSDT = Decimal(price_bids_c_l_CITYUSDT) 
	qty_bids_g_CITYUSDT = Decimal(qty_bids_c_l_CITYUSDT) 
	price_asks_g_CITYUSDT = Decimal(price_asks_c_l_CITYUSDT) 
	qty_asks_g_CITYUSDT = Decimal(qty_asks_c_l_CITYUSDT) 


def loop_CITYUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cityusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CITYUSDT) 
	ws.run_forever() 


Thread(target=loop_CITYUSDT).start() 
symbol_g_KP3RUSDT = 'KP3RUSDT' 
price_bids_g_KP3RUSDT = Decimal('0.0') 
qty_bids_g_KP3RUSDT = Decimal('0.0') 
price_asks_g_KP3RUSDT = Decimal('0.0') 
qty_asks_g_KP3RUSDT = Decimal('0.0') 
stepSize_g_KP3RUSDT = Decimal('0.01') 


def on_message_KP3RUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KP3RUSDT = 'KP3RUSDT' 
	price_bids_c_l_KP3RUSDT = data['b'] 
	qty_bids_c_l_KP3RUSDT = data['B'] 
	price_asks_c_l_KP3RUSDT = data['a'] 
	qty_asks_c_l_KP3RUSDT = data['A'] 

	global symbol_g_KP3RUSDT 
	global price_bids_g_KP3RUSDT 
	global qty_bids_g_KP3RUSDT 
	global price_asks_g_KP3RUSDT 
	global qty_asks_g_KP3RUSDT 

	symbol_g_KP3RUSDT = symbol_c_l_KP3RUSDT 
	price_bids_g_KP3RUSDT = Decimal(price_bids_c_l_KP3RUSDT) 
	qty_bids_g_KP3RUSDT = Decimal(qty_bids_c_l_KP3RUSDT) 
	price_asks_g_KP3RUSDT = Decimal(price_asks_c_l_KP3RUSDT) 
	qty_asks_g_KP3RUSDT = Decimal(qty_asks_c_l_KP3RUSDT) 


def loop_KP3RUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kp3rusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KP3RUSDT) 
	ws.run_forever() 


Thread(target=loop_KP3RUSDT).start() 
symbol_g_QIUSDT = 'QIUSDT' 
price_bids_g_QIUSDT = Decimal('0.0') 
qty_bids_g_QIUSDT = Decimal('0.0') 
price_asks_g_QIUSDT = Decimal('0.0') 
qty_asks_g_QIUSDT = Decimal('0.0') 
stepSize_g_QIUSDT = Decimal('1.0') 


def on_message_QIUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QIUSDT = 'QIUSDT' 
	price_bids_c_l_QIUSDT = data['b'] 
	qty_bids_c_l_QIUSDT = data['B'] 
	price_asks_c_l_QIUSDT = data['a'] 
	qty_asks_c_l_QIUSDT = data['A'] 

	global symbol_g_QIUSDT 
	global price_bids_g_QIUSDT 
	global qty_bids_g_QIUSDT 
	global price_asks_g_QIUSDT 
	global qty_asks_g_QIUSDT 

	symbol_g_QIUSDT = symbol_c_l_QIUSDT 
	price_bids_g_QIUSDT = Decimal(price_bids_c_l_QIUSDT) 
	qty_bids_g_QIUSDT = Decimal(qty_bids_c_l_QIUSDT) 
	price_asks_g_QIUSDT = Decimal(price_asks_c_l_QIUSDT) 
	qty_asks_g_QIUSDT = Decimal(qty_asks_c_l_QIUSDT) 


def loop_QIUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/qiusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QIUSDT) 
	ws.run_forever() 


Thread(target=loop_QIUSDT).start() 
symbol_g_POWRUSDT = 'POWRUSDT' 
price_bids_g_POWRUSDT = Decimal('0.0') 
qty_bids_g_POWRUSDT = Decimal('0.0') 
price_asks_g_POWRUSDT = Decimal('0.0') 
qty_asks_g_POWRUSDT = Decimal('0.0') 
stepSize_g_POWRUSDT = Decimal('1.0') 


def on_message_POWRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_POWRUSDT = 'POWRUSDT' 
	price_bids_c_l_POWRUSDT = data['b'] 
	qty_bids_c_l_POWRUSDT = data['B'] 
	price_asks_c_l_POWRUSDT = data['a'] 
	qty_asks_c_l_POWRUSDT = data['A'] 

	global symbol_g_POWRUSDT 
	global price_bids_g_POWRUSDT 
	global qty_bids_g_POWRUSDT 
	global price_asks_g_POWRUSDT 
	global qty_asks_g_POWRUSDT 

	symbol_g_POWRUSDT = symbol_c_l_POWRUSDT 
	price_bids_g_POWRUSDT = Decimal(price_bids_c_l_POWRUSDT) 
	qty_bids_g_POWRUSDT = Decimal(qty_bids_c_l_POWRUSDT) 
	price_asks_g_POWRUSDT = Decimal(price_asks_c_l_POWRUSDT) 
	qty_asks_g_POWRUSDT = Decimal(qty_asks_c_l_POWRUSDT) 


def loop_POWRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/powrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_POWRUSDT) 
	ws.run_forever() 


Thread(target=loop_POWRUSDT).start() 
symbol_g_AMPUSDT = 'AMPUSDT' 
price_bids_g_AMPUSDT = Decimal('0.0') 
qty_bids_g_AMPUSDT = Decimal('0.0') 
price_asks_g_AMPUSDT = Decimal('0.0') 
qty_asks_g_AMPUSDT = Decimal('0.0') 
stepSize_g_AMPUSDT = Decimal('1.0') 


def on_message_AMPUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AMPUSDT = 'AMPUSDT' 
	price_bids_c_l_AMPUSDT = data['b'] 
	qty_bids_c_l_AMPUSDT = data['B'] 
	price_asks_c_l_AMPUSDT = data['a'] 
	qty_asks_c_l_AMPUSDT = data['A'] 

	global symbol_g_AMPUSDT 
	global price_bids_g_AMPUSDT 
	global qty_bids_g_AMPUSDT 
	global price_asks_g_AMPUSDT 
	global qty_asks_g_AMPUSDT 

	symbol_g_AMPUSDT = symbol_c_l_AMPUSDT 
	price_bids_g_AMPUSDT = Decimal(price_bids_c_l_AMPUSDT) 
	qty_bids_g_AMPUSDT = Decimal(qty_bids_c_l_AMPUSDT) 
	price_asks_g_AMPUSDT = Decimal(price_asks_c_l_AMPUSDT) 
	qty_asks_g_AMPUSDT = Decimal(qty_asks_c_l_AMPUSDT) 


def loop_AMPUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ampusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AMPUSDT) 
	ws.run_forever() 


Thread(target=loop_AMPUSDT).start() 
symbol_g_PLAUSDT = 'PLAUSDT' 
price_bids_g_PLAUSDT = Decimal('0.0') 
qty_bids_g_PLAUSDT = Decimal('0.0') 
price_asks_g_PLAUSDT = Decimal('0.0') 
qty_asks_g_PLAUSDT = Decimal('0.0') 
stepSize_g_PLAUSDT = Decimal('0.01') 


def on_message_PLAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PLAUSDT = 'PLAUSDT' 
	price_bids_c_l_PLAUSDT = data['b'] 
	qty_bids_c_l_PLAUSDT = data['B'] 
	price_asks_c_l_PLAUSDT = data['a'] 
	qty_asks_c_l_PLAUSDT = data['A'] 

	global symbol_g_PLAUSDT 
	global price_bids_g_PLAUSDT 
	global qty_bids_g_PLAUSDT 
	global price_asks_g_PLAUSDT 
	global qty_asks_g_PLAUSDT 

	symbol_g_PLAUSDT = symbol_c_l_PLAUSDT 
	price_bids_g_PLAUSDT = Decimal(price_bids_c_l_PLAUSDT) 
	qty_bids_g_PLAUSDT = Decimal(qty_bids_c_l_PLAUSDT) 
	price_asks_g_PLAUSDT = Decimal(price_asks_c_l_PLAUSDT) 
	qty_asks_g_PLAUSDT = Decimal(qty_asks_c_l_PLAUSDT) 


def loop_PLAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/plausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PLAUSDT) 
	ws.run_forever() 


Thread(target=loop_PLAUSDT).start() 
symbol_g_PYRUSDT = 'PYRUSDT' 
price_bids_g_PYRUSDT = Decimal('0.0') 
qty_bids_g_PYRUSDT = Decimal('0.0') 
price_asks_g_PYRUSDT = Decimal('0.0') 
qty_asks_g_PYRUSDT = Decimal('0.0') 
stepSize_g_PYRUSDT = Decimal('0.001') 


def on_message_PYRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PYRUSDT = 'PYRUSDT' 
	price_bids_c_l_PYRUSDT = data['b'] 
	qty_bids_c_l_PYRUSDT = data['B'] 
	price_asks_c_l_PYRUSDT = data['a'] 
	qty_asks_c_l_PYRUSDT = data['A'] 

	global symbol_g_PYRUSDT 
	global price_bids_g_PYRUSDT 
	global qty_bids_g_PYRUSDT 
	global price_asks_g_PYRUSDT 
	global qty_asks_g_PYRUSDT 

	symbol_g_PYRUSDT = symbol_c_l_PYRUSDT 
	price_bids_g_PYRUSDT = Decimal(price_bids_c_l_PYRUSDT) 
	qty_bids_g_PYRUSDT = Decimal(qty_bids_c_l_PYRUSDT) 
	price_asks_g_PYRUSDT = Decimal(price_asks_c_l_PYRUSDT) 
	qty_asks_g_PYRUSDT = Decimal(qty_asks_c_l_PYRUSDT) 


def loop_PYRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/pyrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PYRUSDT) 
	ws.run_forever() 


Thread(target=loop_PYRUSDT).start() 
symbol_g_RNDRUSDT = 'RNDRUSDT' 
price_bids_g_RNDRUSDT = Decimal('0.0') 
qty_bids_g_RNDRUSDT = Decimal('0.0') 
price_asks_g_RNDRUSDT = Decimal('0.0') 
qty_asks_g_RNDRUSDT = Decimal('0.0') 
stepSize_g_RNDRUSDT = Decimal('0.01') 


def on_message_RNDRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RNDRUSDT = 'RNDRUSDT' 
	price_bids_c_l_RNDRUSDT = data['b'] 
	qty_bids_c_l_RNDRUSDT = data['B'] 
	price_asks_c_l_RNDRUSDT = data['a'] 
	qty_asks_c_l_RNDRUSDT = data['A'] 

	global symbol_g_RNDRUSDT 
	global price_bids_g_RNDRUSDT 
	global qty_bids_g_RNDRUSDT 
	global price_asks_g_RNDRUSDT 
	global qty_asks_g_RNDRUSDT 

	symbol_g_RNDRUSDT = symbol_c_l_RNDRUSDT 
	price_bids_g_RNDRUSDT = Decimal(price_bids_c_l_RNDRUSDT) 
	qty_bids_g_RNDRUSDT = Decimal(qty_bids_c_l_RNDRUSDT) 
	price_asks_g_RNDRUSDT = Decimal(price_asks_c_l_RNDRUSDT) 
	qty_asks_g_RNDRUSDT = Decimal(qty_asks_c_l_RNDRUSDT) 


def loop_RNDRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rndrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RNDRUSDT) 
	ws.run_forever() 


Thread(target=loop_RNDRUSDT).start() 
symbol_g_ALCXUSDT = 'ALCXUSDT' 
price_bids_g_ALCXUSDT = Decimal('0.0') 
qty_bids_g_ALCXUSDT = Decimal('0.0') 
price_asks_g_ALCXUSDT = Decimal('0.0') 
qty_asks_g_ALCXUSDT = Decimal('0.0') 
stepSize_g_ALCXUSDT = Decimal('0.0001') 


def on_message_ALCXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALCXUSDT = 'ALCXUSDT' 
	price_bids_c_l_ALCXUSDT = data['b'] 
	qty_bids_c_l_ALCXUSDT = data['B'] 
	price_asks_c_l_ALCXUSDT = data['a'] 
	qty_asks_c_l_ALCXUSDT = data['A'] 

	global symbol_g_ALCXUSDT 
	global price_bids_g_ALCXUSDT 
	global qty_bids_g_ALCXUSDT 
	global price_asks_g_ALCXUSDT 
	global qty_asks_g_ALCXUSDT 

	symbol_g_ALCXUSDT = symbol_c_l_ALCXUSDT 
	price_bids_g_ALCXUSDT = Decimal(price_bids_c_l_ALCXUSDT) 
	qty_bids_g_ALCXUSDT = Decimal(qty_bids_c_l_ALCXUSDT) 
	price_asks_g_ALCXUSDT = Decimal(price_asks_c_l_ALCXUSDT) 
	qty_asks_g_ALCXUSDT = Decimal(qty_asks_c_l_ALCXUSDT) 


def loop_ALCXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alcxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALCXUSDT) 
	ws.run_forever() 


Thread(target=loop_ALCXUSDT).start() 
symbol_g_MCUSDT = 'MCUSDT' 
price_bids_g_MCUSDT = Decimal('0.0') 
qty_bids_g_MCUSDT = Decimal('0.0') 
price_asks_g_MCUSDT = Decimal('0.0') 
qty_asks_g_MCUSDT = Decimal('0.0') 
stepSize_g_MCUSDT = Decimal('0.01') 


def on_message_MCUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MCUSDT = 'MCUSDT' 
	price_bids_c_l_MCUSDT = data['b'] 
	qty_bids_c_l_MCUSDT = data['B'] 
	price_asks_c_l_MCUSDT = data['a'] 
	qty_asks_c_l_MCUSDT = data['A'] 

	global symbol_g_MCUSDT 
	global price_bids_g_MCUSDT 
	global qty_bids_g_MCUSDT 
	global price_asks_g_MCUSDT 
	global qty_asks_g_MCUSDT 

	symbol_g_MCUSDT = symbol_c_l_MCUSDT 
	price_bids_g_MCUSDT = Decimal(price_bids_c_l_MCUSDT) 
	qty_bids_g_MCUSDT = Decimal(qty_bids_c_l_MCUSDT) 
	price_asks_g_MCUSDT = Decimal(price_asks_c_l_MCUSDT) 
	qty_asks_g_MCUSDT = Decimal(qty_asks_c_l_MCUSDT) 


def loop_MCUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mcusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MCUSDT) 
	ws.run_forever() 


Thread(target=loop_MCUSDT).start() 
symbol_g_BICOUSDT = 'BICOUSDT' 
price_bids_g_BICOUSDT = Decimal('0.0') 
qty_bids_g_BICOUSDT = Decimal('0.0') 
price_asks_g_BICOUSDT = Decimal('0.0') 
qty_asks_g_BICOUSDT = Decimal('0.0') 
stepSize_g_BICOUSDT = Decimal('0.01') 


def on_message_BICOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BICOUSDT = 'BICOUSDT' 
	price_bids_c_l_BICOUSDT = data['b'] 
	qty_bids_c_l_BICOUSDT = data['B'] 
	price_asks_c_l_BICOUSDT = data['a'] 
	qty_asks_c_l_BICOUSDT = data['A'] 

	global symbol_g_BICOUSDT 
	global price_bids_g_BICOUSDT 
	global qty_bids_g_BICOUSDT 
	global price_asks_g_BICOUSDT 
	global qty_asks_g_BICOUSDT 

	symbol_g_BICOUSDT = symbol_c_l_BICOUSDT 
	price_bids_g_BICOUSDT = Decimal(price_bids_c_l_BICOUSDT) 
	qty_bids_g_BICOUSDT = Decimal(qty_bids_c_l_BICOUSDT) 
	price_asks_g_BICOUSDT = Decimal(price_asks_c_l_BICOUSDT) 
	qty_asks_g_BICOUSDT = Decimal(qty_asks_c_l_BICOUSDT) 


def loop_BICOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bicousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BICOUSDT) 
	ws.run_forever() 


Thread(target=loop_BICOUSDT).start() 
symbol_g_FLUXUSDT = 'FLUXUSDT' 
price_bids_g_FLUXUSDT = Decimal('0.0') 
qty_bids_g_FLUXUSDT = Decimal('0.0') 
price_asks_g_FLUXUSDT = Decimal('0.0') 
qty_asks_g_FLUXUSDT = Decimal('0.0') 
stepSize_g_FLUXUSDT = Decimal('0.01') 


def on_message_FLUXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FLUXUSDT = 'FLUXUSDT' 
	price_bids_c_l_FLUXUSDT = data['b'] 
	qty_bids_c_l_FLUXUSDT = data['B'] 
	price_asks_c_l_FLUXUSDT = data['a'] 
	qty_asks_c_l_FLUXUSDT = data['A'] 

	global symbol_g_FLUXUSDT 
	global price_bids_g_FLUXUSDT 
	global qty_bids_g_FLUXUSDT 
	global price_asks_g_FLUXUSDT 
	global qty_asks_g_FLUXUSDT 

	symbol_g_FLUXUSDT = symbol_c_l_FLUXUSDT 
	price_bids_g_FLUXUSDT = Decimal(price_bids_c_l_FLUXUSDT) 
	qty_bids_g_FLUXUSDT = Decimal(qty_bids_c_l_FLUXUSDT) 
	price_asks_g_FLUXUSDT = Decimal(price_asks_c_l_FLUXUSDT) 
	qty_asks_g_FLUXUSDT = Decimal(qty_asks_c_l_FLUXUSDT) 


def loop_FLUXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fluxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FLUXUSDT) 
	ws.run_forever() 


Thread(target=loop_FLUXUSDT).start() 
symbol_g_FXSUSDT = 'FXSUSDT' 
price_bids_g_FXSUSDT = Decimal('0.0') 
qty_bids_g_FXSUSDT = Decimal('0.0') 
price_asks_g_FXSUSDT = Decimal('0.0') 
qty_asks_g_FXSUSDT = Decimal('0.0') 
stepSize_g_FXSUSDT = Decimal('0.1') 


def on_message_FXSUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FXSUSDT = 'FXSUSDT' 
	price_bids_c_l_FXSUSDT = data['b'] 
	qty_bids_c_l_FXSUSDT = data['B'] 
	price_asks_c_l_FXSUSDT = data['a'] 
	qty_asks_c_l_FXSUSDT = data['A'] 

	global symbol_g_FXSUSDT 
	global price_bids_g_FXSUSDT 
	global qty_bids_g_FXSUSDT 
	global price_asks_g_FXSUSDT 
	global qty_asks_g_FXSUSDT 

	symbol_g_FXSUSDT = symbol_c_l_FXSUSDT 
	price_bids_g_FXSUSDT = Decimal(price_bids_c_l_FXSUSDT) 
	qty_bids_g_FXSUSDT = Decimal(qty_bids_c_l_FXSUSDT) 
	price_asks_g_FXSUSDT = Decimal(price_asks_c_l_FXSUSDT) 
	qty_asks_g_FXSUSDT = Decimal(qty_asks_c_l_FXSUSDT) 


def loop_FXSUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fxsusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FXSUSDT) 
	ws.run_forever() 


Thread(target=loop_FXSUSDT).start() 
symbol_g_VOXELUSDT = 'VOXELUSDT' 
price_bids_g_VOXELUSDT = Decimal('0.0') 
qty_bids_g_VOXELUSDT = Decimal('0.0') 
price_asks_g_VOXELUSDT = Decimal('0.0') 
qty_asks_g_VOXELUSDT = Decimal('0.0') 
stepSize_g_VOXELUSDT = Decimal('0.1') 


def on_message_VOXELUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VOXELUSDT = 'VOXELUSDT' 
	price_bids_c_l_VOXELUSDT = data['b'] 
	qty_bids_c_l_VOXELUSDT = data['B'] 
	price_asks_c_l_VOXELUSDT = data['a'] 
	qty_asks_c_l_VOXELUSDT = data['A'] 

	global symbol_g_VOXELUSDT 
	global price_bids_g_VOXELUSDT 
	global qty_bids_g_VOXELUSDT 
	global price_asks_g_VOXELUSDT 
	global qty_asks_g_VOXELUSDT 

	symbol_g_VOXELUSDT = symbol_c_l_VOXELUSDT 
	price_bids_g_VOXELUSDT = Decimal(price_bids_c_l_VOXELUSDT) 
	qty_bids_g_VOXELUSDT = Decimal(qty_bids_c_l_VOXELUSDT) 
	price_asks_g_VOXELUSDT = Decimal(price_asks_c_l_VOXELUSDT) 
	qty_asks_g_VOXELUSDT = Decimal(qty_asks_c_l_VOXELUSDT) 


def loop_VOXELUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/voxelusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VOXELUSDT) 
	ws.run_forever() 


Thread(target=loop_VOXELUSDT).start() 
symbol_g_HIGHUSDT = 'HIGHUSDT' 
price_bids_g_HIGHUSDT = Decimal('0.0') 
qty_bids_g_HIGHUSDT = Decimal('0.0') 
price_asks_g_HIGHUSDT = Decimal('0.0') 
qty_asks_g_HIGHUSDT = Decimal('0.0') 
stepSize_g_HIGHUSDT = Decimal('0.001') 


def on_message_HIGHUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HIGHUSDT = 'HIGHUSDT' 
	price_bids_c_l_HIGHUSDT = data['b'] 
	qty_bids_c_l_HIGHUSDT = data['B'] 
	price_asks_c_l_HIGHUSDT = data['a'] 
	qty_asks_c_l_HIGHUSDT = data['A'] 

	global symbol_g_HIGHUSDT 
	global price_bids_g_HIGHUSDT 
	global qty_bids_g_HIGHUSDT 
	global price_asks_g_HIGHUSDT 
	global qty_asks_g_HIGHUSDT 

	symbol_g_HIGHUSDT = symbol_c_l_HIGHUSDT 
	price_bids_g_HIGHUSDT = Decimal(price_bids_c_l_HIGHUSDT) 
	qty_bids_g_HIGHUSDT = Decimal(qty_bids_c_l_HIGHUSDT) 
	price_asks_g_HIGHUSDT = Decimal(price_asks_c_l_HIGHUSDT) 
	qty_asks_g_HIGHUSDT = Decimal(qty_asks_c_l_HIGHUSDT) 


def loop_HIGHUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/highusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HIGHUSDT) 
	ws.run_forever() 


Thread(target=loop_HIGHUSDT).start() 
symbol_g_CVXUSDT = 'CVXUSDT' 
price_bids_g_CVXUSDT = Decimal('0.0') 
qty_bids_g_CVXUSDT = Decimal('0.0') 
price_asks_g_CVXUSDT = Decimal('0.0') 
qty_asks_g_CVXUSDT = Decimal('0.0') 
stepSize_g_CVXUSDT = Decimal('0.001') 


def on_message_CVXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CVXUSDT = 'CVXUSDT' 
	price_bids_c_l_CVXUSDT = data['b'] 
	qty_bids_c_l_CVXUSDT = data['B'] 
	price_asks_c_l_CVXUSDT = data['a'] 
	qty_asks_c_l_CVXUSDT = data['A'] 

	global symbol_g_CVXUSDT 
	global price_bids_g_CVXUSDT 
	global qty_bids_g_CVXUSDT 
	global price_asks_g_CVXUSDT 
	global qty_asks_g_CVXUSDT 

	symbol_g_CVXUSDT = symbol_c_l_CVXUSDT 
	price_bids_g_CVXUSDT = Decimal(price_bids_c_l_CVXUSDT) 
	qty_bids_g_CVXUSDT = Decimal(qty_bids_c_l_CVXUSDT) 
	price_asks_g_CVXUSDT = Decimal(price_asks_c_l_CVXUSDT) 
	qty_asks_g_CVXUSDT = Decimal(qty_asks_c_l_CVXUSDT) 


def loop_CVXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cvxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CVXUSDT) 
	ws.run_forever() 


Thread(target=loop_CVXUSDT).start() 
symbol_g_PEOPLEUSDT = 'PEOPLEUSDT' 
price_bids_g_PEOPLEUSDT = Decimal('0.0') 
qty_bids_g_PEOPLEUSDT = Decimal('0.0') 
price_asks_g_PEOPLEUSDT = Decimal('0.0') 
qty_asks_g_PEOPLEUSDT = Decimal('0.0') 
stepSize_g_PEOPLEUSDT = Decimal('0.1') 


def on_message_PEOPLEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PEOPLEUSDT = 'PEOPLEUSDT' 
	price_bids_c_l_PEOPLEUSDT = data['b'] 
	qty_bids_c_l_PEOPLEUSDT = data['B'] 
	price_asks_c_l_PEOPLEUSDT = data['a'] 
	qty_asks_c_l_PEOPLEUSDT = data['A'] 

	global symbol_g_PEOPLEUSDT 
	global price_bids_g_PEOPLEUSDT 
	global qty_bids_g_PEOPLEUSDT 
	global price_asks_g_PEOPLEUSDT 
	global qty_asks_g_PEOPLEUSDT 

	symbol_g_PEOPLEUSDT = symbol_c_l_PEOPLEUSDT 
	price_bids_g_PEOPLEUSDT = Decimal(price_bids_c_l_PEOPLEUSDT) 
	qty_bids_g_PEOPLEUSDT = Decimal(qty_bids_c_l_PEOPLEUSDT) 
	price_asks_g_PEOPLEUSDT = Decimal(price_asks_c_l_PEOPLEUSDT) 
	qty_asks_g_PEOPLEUSDT = Decimal(qty_asks_c_l_PEOPLEUSDT) 


def loop_PEOPLEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/peopleusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PEOPLEUSDT) 
	ws.run_forever() 


Thread(target=loop_PEOPLEUSDT).start() 
symbol_g_OOKIUSDT = 'OOKIUSDT' 
price_bids_g_OOKIUSDT = Decimal('0.0') 
qty_bids_g_OOKIUSDT = Decimal('0.0') 
price_asks_g_OOKIUSDT = Decimal('0.0') 
qty_asks_g_OOKIUSDT = Decimal('0.0') 
stepSize_g_OOKIUSDT = Decimal('1.0') 


def on_message_OOKIUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OOKIUSDT = 'OOKIUSDT' 
	price_bids_c_l_OOKIUSDT = data['b'] 
	qty_bids_c_l_OOKIUSDT = data['B'] 
	price_asks_c_l_OOKIUSDT = data['a'] 
	qty_asks_c_l_OOKIUSDT = data['A'] 

	global symbol_g_OOKIUSDT 
	global price_bids_g_OOKIUSDT 
	global qty_bids_g_OOKIUSDT 
	global price_asks_g_OOKIUSDT 
	global qty_asks_g_OOKIUSDT 

	symbol_g_OOKIUSDT = symbol_c_l_OOKIUSDT 
	price_bids_g_OOKIUSDT = Decimal(price_bids_c_l_OOKIUSDT) 
	qty_bids_g_OOKIUSDT = Decimal(qty_bids_c_l_OOKIUSDT) 
	price_asks_g_OOKIUSDT = Decimal(price_asks_c_l_OOKIUSDT) 
	qty_asks_g_OOKIUSDT = Decimal(qty_asks_c_l_OOKIUSDT) 


def loop_OOKIUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ookiusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OOKIUSDT) 
	ws.run_forever() 


Thread(target=loop_OOKIUSDT).start() 
symbol_g_JOEUSDT = 'JOEUSDT' 
price_bids_g_JOEUSDT = Decimal('0.0') 
qty_bids_g_JOEUSDT = Decimal('0.0') 
price_asks_g_JOEUSDT = Decimal('0.0') 
qty_asks_g_JOEUSDT = Decimal('0.0') 
stepSize_g_JOEUSDT = Decimal('0.01') 


def on_message_JOEUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JOEUSDT = 'JOEUSDT' 
	price_bids_c_l_JOEUSDT = data['b'] 
	qty_bids_c_l_JOEUSDT = data['B'] 
	price_asks_c_l_JOEUSDT = data['a'] 
	qty_asks_c_l_JOEUSDT = data['A'] 

	global symbol_g_JOEUSDT 
	global price_bids_g_JOEUSDT 
	global qty_bids_g_JOEUSDT 
	global price_asks_g_JOEUSDT 
	global qty_asks_g_JOEUSDT 

	symbol_g_JOEUSDT = symbol_c_l_JOEUSDT 
	price_bids_g_JOEUSDT = Decimal(price_bids_c_l_JOEUSDT) 
	qty_bids_g_JOEUSDT = Decimal(qty_bids_c_l_JOEUSDT) 
	price_asks_g_JOEUSDT = Decimal(price_asks_c_l_JOEUSDT) 
	qty_asks_g_JOEUSDT = Decimal(qty_asks_c_l_JOEUSDT) 


def loop_JOEUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/joeusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JOEUSDT) 
	ws.run_forever() 


Thread(target=loop_JOEUSDT).start() 
symbol_g_ACHUSDT = 'ACHUSDT' 
price_bids_g_ACHUSDT = Decimal('0.0') 
qty_bids_g_ACHUSDT = Decimal('0.0') 
price_asks_g_ACHUSDT = Decimal('0.0') 
qty_asks_g_ACHUSDT = Decimal('0.0') 
stepSize_g_ACHUSDT = Decimal('1.0') 


def on_message_ACHUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ACHUSDT = 'ACHUSDT' 
	price_bids_c_l_ACHUSDT = data['b'] 
	qty_bids_c_l_ACHUSDT = data['B'] 
	price_asks_c_l_ACHUSDT = data['a'] 
	qty_asks_c_l_ACHUSDT = data['A'] 

	global symbol_g_ACHUSDT 
	global price_bids_g_ACHUSDT 
	global qty_bids_g_ACHUSDT 
	global price_asks_g_ACHUSDT 
	global qty_asks_g_ACHUSDT 

	symbol_g_ACHUSDT = symbol_c_l_ACHUSDT 
	price_bids_g_ACHUSDT = Decimal(price_bids_c_l_ACHUSDT) 
	qty_bids_g_ACHUSDT = Decimal(qty_bids_c_l_ACHUSDT) 
	price_asks_g_ACHUSDT = Decimal(price_asks_c_l_ACHUSDT) 
	qty_asks_g_ACHUSDT = Decimal(qty_asks_c_l_ACHUSDT) 


def loop_ACHUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/achusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ACHUSDT) 
	ws.run_forever() 


Thread(target=loop_ACHUSDT).start() 
symbol_g_IMXUSDT = 'IMXUSDT' 
price_bids_g_IMXUSDT = Decimal('0.0') 
qty_bids_g_IMXUSDT = Decimal('0.0') 
price_asks_g_IMXUSDT = Decimal('0.0') 
qty_asks_g_IMXUSDT = Decimal('0.0') 
stepSize_g_IMXUSDT = Decimal('0.01') 


def on_message_IMXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IMXUSDT = 'IMXUSDT' 
	price_bids_c_l_IMXUSDT = data['b'] 
	qty_bids_c_l_IMXUSDT = data['B'] 
	price_asks_c_l_IMXUSDT = data['a'] 
	qty_asks_c_l_IMXUSDT = data['A'] 

	global symbol_g_IMXUSDT 
	global price_bids_g_IMXUSDT 
	global qty_bids_g_IMXUSDT 
	global price_asks_g_IMXUSDT 
	global qty_asks_g_IMXUSDT 

	symbol_g_IMXUSDT = symbol_c_l_IMXUSDT 
	price_bids_g_IMXUSDT = Decimal(price_bids_c_l_IMXUSDT) 
	qty_bids_g_IMXUSDT = Decimal(qty_bids_c_l_IMXUSDT) 
	price_asks_g_IMXUSDT = Decimal(price_asks_c_l_IMXUSDT) 
	qty_asks_g_IMXUSDT = Decimal(qty_asks_c_l_IMXUSDT) 


def loop_IMXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/imxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IMXUSDT) 
	ws.run_forever() 


Thread(target=loop_IMXUSDT).start() 
symbol_g_GLMRUSDT = 'GLMRUSDT' 
price_bids_g_GLMRUSDT = Decimal('0.0') 
qty_bids_g_GLMRUSDT = Decimal('0.0') 
price_asks_g_GLMRUSDT = Decimal('0.0') 
qty_asks_g_GLMRUSDT = Decimal('0.0') 
stepSize_g_GLMRUSDT = Decimal('0.1') 


def on_message_GLMRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GLMRUSDT = 'GLMRUSDT' 
	price_bids_c_l_GLMRUSDT = data['b'] 
	qty_bids_c_l_GLMRUSDT = data['B'] 
	price_asks_c_l_GLMRUSDT = data['a'] 
	qty_asks_c_l_GLMRUSDT = data['A'] 

	global symbol_g_GLMRUSDT 
	global price_bids_g_GLMRUSDT 
	global qty_bids_g_GLMRUSDT 
	global price_asks_g_GLMRUSDT 
	global qty_asks_g_GLMRUSDT 

	symbol_g_GLMRUSDT = symbol_c_l_GLMRUSDT 
	price_bids_g_GLMRUSDT = Decimal(price_bids_c_l_GLMRUSDT) 
	qty_bids_g_GLMRUSDT = Decimal(qty_bids_c_l_GLMRUSDT) 
	price_asks_g_GLMRUSDT = Decimal(price_asks_c_l_GLMRUSDT) 
	qty_asks_g_GLMRUSDT = Decimal(qty_asks_c_l_GLMRUSDT) 


def loop_GLMRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/glmrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GLMRUSDT) 
	ws.run_forever() 


Thread(target=loop_GLMRUSDT).start() 
symbol_g_LOKAUSDT = 'LOKAUSDT' 
price_bids_g_LOKAUSDT = Decimal('0.0') 
qty_bids_g_LOKAUSDT = Decimal('0.0') 
price_asks_g_LOKAUSDT = Decimal('0.0') 
qty_asks_g_LOKAUSDT = Decimal('0.0') 
stepSize_g_LOKAUSDT = Decimal('0.1') 


def on_message_LOKAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LOKAUSDT = 'LOKAUSDT' 
	price_bids_c_l_LOKAUSDT = data['b'] 
	qty_bids_c_l_LOKAUSDT = data['B'] 
	price_asks_c_l_LOKAUSDT = data['a'] 
	qty_asks_c_l_LOKAUSDT = data['A'] 

	global symbol_g_LOKAUSDT 
	global price_bids_g_LOKAUSDT 
	global qty_bids_g_LOKAUSDT 
	global price_asks_g_LOKAUSDT 
	global qty_asks_g_LOKAUSDT 

	symbol_g_LOKAUSDT = symbol_c_l_LOKAUSDT 
	price_bids_g_LOKAUSDT = Decimal(price_bids_c_l_LOKAUSDT) 
	qty_bids_g_LOKAUSDT = Decimal(qty_bids_c_l_LOKAUSDT) 
	price_asks_g_LOKAUSDT = Decimal(price_asks_c_l_LOKAUSDT) 
	qty_asks_g_LOKAUSDT = Decimal(qty_asks_c_l_LOKAUSDT) 


def loop_LOKAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lokausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LOKAUSDT) 
	ws.run_forever() 


Thread(target=loop_LOKAUSDT).start() 
symbol_g_SCRTUSDT = 'SCRTUSDT' 
price_bids_g_SCRTUSDT = Decimal('0.0') 
qty_bids_g_SCRTUSDT = Decimal('0.0') 
price_asks_g_SCRTUSDT = Decimal('0.0') 
qty_asks_g_SCRTUSDT = Decimal('0.0') 
stepSize_g_SCRTUSDT = Decimal('0.1') 


def on_message_SCRTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SCRTUSDT = 'SCRTUSDT' 
	price_bids_c_l_SCRTUSDT = data['b'] 
	qty_bids_c_l_SCRTUSDT = data['B'] 
	price_asks_c_l_SCRTUSDT = data['a'] 
	qty_asks_c_l_SCRTUSDT = data['A'] 

	global symbol_g_SCRTUSDT 
	global price_bids_g_SCRTUSDT 
	global qty_bids_g_SCRTUSDT 
	global price_asks_g_SCRTUSDT 
	global qty_asks_g_SCRTUSDT 

	symbol_g_SCRTUSDT = symbol_c_l_SCRTUSDT 
	price_bids_g_SCRTUSDT = Decimal(price_bids_c_l_SCRTUSDT) 
	qty_bids_g_SCRTUSDT = Decimal(qty_bids_c_l_SCRTUSDT) 
	price_asks_g_SCRTUSDT = Decimal(price_asks_c_l_SCRTUSDT) 
	qty_asks_g_SCRTUSDT = Decimal(qty_asks_c_l_SCRTUSDT) 


def loop_SCRTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/scrtusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SCRTUSDT) 
	ws.run_forever() 


Thread(target=loop_SCRTUSDT).start() 
symbol_g_ACAUSDT = 'ACAUSDT' 
price_bids_g_ACAUSDT = Decimal('0.0') 
qty_bids_g_ACAUSDT = Decimal('0.0') 
price_asks_g_ACAUSDT = Decimal('0.0') 
qty_asks_g_ACAUSDT = Decimal('0.0') 
stepSize_g_ACAUSDT = Decimal('0.01') 


def on_message_ACAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ACAUSDT = 'ACAUSDT' 
	price_bids_c_l_ACAUSDT = data['b'] 
	qty_bids_c_l_ACAUSDT = data['B'] 
	price_asks_c_l_ACAUSDT = data['a'] 
	qty_asks_c_l_ACAUSDT = data['A'] 

	global symbol_g_ACAUSDT 
	global price_bids_g_ACAUSDT 
	global qty_bids_g_ACAUSDT 
	global price_asks_g_ACAUSDT 
	global qty_asks_g_ACAUSDT 

	symbol_g_ACAUSDT = symbol_c_l_ACAUSDT 
	price_bids_g_ACAUSDT = Decimal(price_bids_c_l_ACAUSDT) 
	qty_bids_g_ACAUSDT = Decimal(qty_bids_c_l_ACAUSDT) 
	price_asks_g_ACAUSDT = Decimal(price_asks_c_l_ACAUSDT) 
	qty_asks_g_ACAUSDT = Decimal(qty_asks_c_l_ACAUSDT) 


def loop_ACAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/acausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ACAUSDT) 
	ws.run_forever() 


Thread(target=loop_ACAUSDT).start() 
symbol_g_XNOUSDT = 'XNOUSDT' 
price_bids_g_XNOUSDT = Decimal('0.0') 
qty_bids_g_XNOUSDT = Decimal('0.0') 
price_asks_g_XNOUSDT = Decimal('0.0') 
qty_asks_g_XNOUSDT = Decimal('0.0') 
stepSize_g_XNOUSDT = Decimal('0.01') 


def on_message_XNOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XNOUSDT = 'XNOUSDT' 
	price_bids_c_l_XNOUSDT = data['b'] 
	qty_bids_c_l_XNOUSDT = data['B'] 
	price_asks_c_l_XNOUSDT = data['a'] 
	qty_asks_c_l_XNOUSDT = data['A'] 

	global symbol_g_XNOUSDT 
	global price_bids_g_XNOUSDT 
	global qty_bids_g_XNOUSDT 
	global price_asks_g_XNOUSDT 
	global qty_asks_g_XNOUSDT 

	symbol_g_XNOUSDT = symbol_c_l_XNOUSDT 
	price_bids_g_XNOUSDT = Decimal(price_bids_c_l_XNOUSDT) 
	qty_bids_g_XNOUSDT = Decimal(qty_bids_c_l_XNOUSDT) 
	price_asks_g_XNOUSDT = Decimal(price_asks_c_l_XNOUSDT) 
	qty_asks_g_XNOUSDT = Decimal(qty_asks_c_l_XNOUSDT) 


def loop_XNOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xnousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XNOUSDT) 
	ws.run_forever() 


Thread(target=loop_XNOUSDT).start() 
symbol_g_WOOUSDT = 'WOOUSDT' 
price_bids_g_WOOUSDT = Decimal('0.0') 
qty_bids_g_WOOUSDT = Decimal('0.0') 
price_asks_g_WOOUSDT = Decimal('0.0') 
qty_asks_g_WOOUSDT = Decimal('0.0') 
stepSize_g_WOOUSDT = Decimal('0.1') 


def on_message_WOOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WOOUSDT = 'WOOUSDT' 
	price_bids_c_l_WOOUSDT = data['b'] 
	qty_bids_c_l_WOOUSDT = data['B'] 
	price_asks_c_l_WOOUSDT = data['a'] 
	qty_asks_c_l_WOOUSDT = data['A'] 

	global symbol_g_WOOUSDT 
	global price_bids_g_WOOUSDT 
	global qty_bids_g_WOOUSDT 
	global price_asks_g_WOOUSDT 
	global qty_asks_g_WOOUSDT 

	symbol_g_WOOUSDT = symbol_c_l_WOOUSDT 
	price_bids_g_WOOUSDT = Decimal(price_bids_c_l_WOOUSDT) 
	qty_bids_g_WOOUSDT = Decimal(qty_bids_c_l_WOOUSDT) 
	price_asks_g_WOOUSDT = Decimal(price_asks_c_l_WOOUSDT) 
	qty_asks_g_WOOUSDT = Decimal(qty_asks_c_l_WOOUSDT) 


def loop_WOOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/woousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WOOUSDT) 
	ws.run_forever() 


Thread(target=loop_WOOUSDT).start() 
symbol_g_TUSDT = 'TUSDT' 
price_bids_g_TUSDT = Decimal('0.0') 
qty_bids_g_TUSDT = Decimal('0.0') 
price_asks_g_TUSDT = Decimal('0.0') 
qty_asks_g_TUSDT = Decimal('0.0') 
stepSize_g_TUSDT = Decimal('0.1') 


def on_message_TUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TUSDT = 'TUSDT' 
	price_bids_c_l_TUSDT = data['b'] 
	qty_bids_c_l_TUSDT = data['B'] 
	price_asks_c_l_TUSDT = data['a'] 
	qty_asks_c_l_TUSDT = data['A'] 

	global symbol_g_TUSDT 
	global price_bids_g_TUSDT 
	global qty_bids_g_TUSDT 
	global price_asks_g_TUSDT 
	global qty_asks_g_TUSDT 

	symbol_g_TUSDT = symbol_c_l_TUSDT 
	price_bids_g_TUSDT = Decimal(price_bids_c_l_TUSDT) 
	qty_bids_g_TUSDT = Decimal(qty_bids_c_l_TUSDT) 
	price_asks_g_TUSDT = Decimal(price_asks_c_l_TUSDT) 
	qty_asks_g_TUSDT = Decimal(qty_asks_c_l_TUSDT) 


def loop_TUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TUSDT) 
	ws.run_forever() 


Thread(target=loop_TUSDT).start() 
symbol_g_ASTRUSDT = 'ASTRUSDT' 
price_bids_g_ASTRUSDT = Decimal('0.0') 
qty_bids_g_ASTRUSDT = Decimal('0.0') 
price_asks_g_ASTRUSDT = Decimal('0.0') 
qty_asks_g_ASTRUSDT = Decimal('0.0') 
stepSize_g_ASTRUSDT = Decimal('0.1') 


def on_message_ASTRUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ASTRUSDT = 'ASTRUSDT' 
	price_bids_c_l_ASTRUSDT = data['b'] 
	qty_bids_c_l_ASTRUSDT = data['B'] 
	price_asks_c_l_ASTRUSDT = data['a'] 
	qty_asks_c_l_ASTRUSDT = data['A'] 

	global symbol_g_ASTRUSDT 
	global price_bids_g_ASTRUSDT 
	global qty_bids_g_ASTRUSDT 
	global price_asks_g_ASTRUSDT 
	global qty_asks_g_ASTRUSDT 

	symbol_g_ASTRUSDT = symbol_c_l_ASTRUSDT 
	price_bids_g_ASTRUSDT = Decimal(price_bids_c_l_ASTRUSDT) 
	qty_bids_g_ASTRUSDT = Decimal(qty_bids_c_l_ASTRUSDT) 
	price_asks_g_ASTRUSDT = Decimal(price_asks_c_l_ASTRUSDT) 
	qty_asks_g_ASTRUSDT = Decimal(qty_asks_c_l_ASTRUSDT) 


def loop_ASTRUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/astrusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ASTRUSDT) 
	ws.run_forever() 


Thread(target=loop_ASTRUSDT).start() 
symbol_g_KDAUSDT = 'KDAUSDT' 
price_bids_g_KDAUSDT = Decimal('0.0') 
qty_bids_g_KDAUSDT = Decimal('0.0') 
price_asks_g_KDAUSDT = Decimal('0.0') 
qty_asks_g_KDAUSDT = Decimal('0.0') 
stepSize_g_KDAUSDT = Decimal('0.01') 


def on_message_KDAUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KDAUSDT = 'KDAUSDT' 
	price_bids_c_l_KDAUSDT = data['b'] 
	qty_bids_c_l_KDAUSDT = data['B'] 
	price_asks_c_l_KDAUSDT = data['a'] 
	qty_asks_c_l_KDAUSDT = data['A'] 

	global symbol_g_KDAUSDT 
	global price_bids_g_KDAUSDT 
	global qty_bids_g_KDAUSDT 
	global price_asks_g_KDAUSDT 
	global qty_asks_g_KDAUSDT 

	symbol_g_KDAUSDT = symbol_c_l_KDAUSDT 
	price_bids_g_KDAUSDT = Decimal(price_bids_c_l_KDAUSDT) 
	qty_bids_g_KDAUSDT = Decimal(qty_bids_c_l_KDAUSDT) 
	price_asks_g_KDAUSDT = Decimal(price_asks_c_l_KDAUSDT) 
	qty_asks_g_KDAUSDT = Decimal(qty_asks_c_l_KDAUSDT) 


def loop_KDAUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kdausdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KDAUSDT) 
	ws.run_forever() 


Thread(target=loop_KDAUSDT).start() 
symbol_g_BIFIUSDT = 'BIFIUSDT' 
price_bids_g_BIFIUSDT = Decimal('0.0') 
qty_bids_g_BIFIUSDT = Decimal('0.0') 
price_asks_g_BIFIUSDT = Decimal('0.0') 
qty_asks_g_BIFIUSDT = Decimal('0.0') 
stepSize_g_BIFIUSDT = Decimal('0.001') 


def on_message_BIFIUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BIFIUSDT = 'BIFIUSDT' 
	price_bids_c_l_BIFIUSDT = data['b'] 
	qty_bids_c_l_BIFIUSDT = data['B'] 
	price_asks_c_l_BIFIUSDT = data['a'] 
	qty_asks_c_l_BIFIUSDT = data['A'] 

	global symbol_g_BIFIUSDT 
	global price_bids_g_BIFIUSDT 
	global qty_bids_g_BIFIUSDT 
	global price_asks_g_BIFIUSDT 
	global qty_asks_g_BIFIUSDT 

	symbol_g_BIFIUSDT = symbol_c_l_BIFIUSDT 
	price_bids_g_BIFIUSDT = Decimal(price_bids_c_l_BIFIUSDT) 
	qty_bids_g_BIFIUSDT = Decimal(qty_bids_c_l_BIFIUSDT) 
	price_asks_g_BIFIUSDT = Decimal(price_asks_c_l_BIFIUSDT) 
	qty_asks_g_BIFIUSDT = Decimal(qty_asks_c_l_BIFIUSDT) 


def loop_BIFIUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bifiusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BIFIUSDT) 
	ws.run_forever() 


Thread(target=loop_BIFIUSDT).start() 
symbol_g_MULTIUSDT = 'MULTIUSDT' 
price_bids_g_MULTIUSDT = Decimal('0.0') 
qty_bids_g_MULTIUSDT = Decimal('0.0') 
price_asks_g_MULTIUSDT = Decimal('0.0') 
qty_asks_g_MULTIUSDT = Decimal('0.0') 
stepSize_g_MULTIUSDT = Decimal('0.001') 


def on_message_MULTIUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MULTIUSDT = 'MULTIUSDT' 
	price_bids_c_l_MULTIUSDT = data['b'] 
	qty_bids_c_l_MULTIUSDT = data['B'] 
	price_asks_c_l_MULTIUSDT = data['a'] 
	qty_asks_c_l_MULTIUSDT = data['A'] 

	global symbol_g_MULTIUSDT 
	global price_bids_g_MULTIUSDT 
	global qty_bids_g_MULTIUSDT 
	global price_asks_g_MULTIUSDT 
	global qty_asks_g_MULTIUSDT 

	symbol_g_MULTIUSDT = symbol_c_l_MULTIUSDT 
	price_bids_g_MULTIUSDT = Decimal(price_bids_c_l_MULTIUSDT) 
	qty_bids_g_MULTIUSDT = Decimal(qty_bids_c_l_MULTIUSDT) 
	price_asks_g_MULTIUSDT = Decimal(price_asks_c_l_MULTIUSDT) 
	qty_asks_g_MULTIUSDT = Decimal(qty_asks_c_l_MULTIUSDT) 


def loop_MULTIUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/multiusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MULTIUSDT) 
	ws.run_forever() 


Thread(target=loop_MULTIUSDT).start() 
symbol_g_STEEMUSDT = 'STEEMUSDT' 
price_bids_g_STEEMUSDT = Decimal('0.0') 
qty_bids_g_STEEMUSDT = Decimal('0.0') 
price_asks_g_STEEMUSDT = Decimal('0.0') 
qty_asks_g_STEEMUSDT = Decimal('0.0') 
stepSize_g_STEEMUSDT = Decimal('0.1') 


def on_message_STEEMUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STEEMUSDT = 'STEEMUSDT' 
	price_bids_c_l_STEEMUSDT = data['b'] 
	qty_bids_c_l_STEEMUSDT = data['B'] 
	price_asks_c_l_STEEMUSDT = data['a'] 
	qty_asks_c_l_STEEMUSDT = data['A'] 

	global symbol_g_STEEMUSDT 
	global price_bids_g_STEEMUSDT 
	global qty_bids_g_STEEMUSDT 
	global price_asks_g_STEEMUSDT 
	global qty_asks_g_STEEMUSDT 

	symbol_g_STEEMUSDT = symbol_c_l_STEEMUSDT 
	price_bids_g_STEEMUSDT = Decimal(price_bids_c_l_STEEMUSDT) 
	qty_bids_g_STEEMUSDT = Decimal(qty_bids_c_l_STEEMUSDT) 
	price_asks_g_STEEMUSDT = Decimal(price_asks_c_l_STEEMUSDT) 
	qty_asks_g_STEEMUSDT = Decimal(qty_asks_c_l_STEEMUSDT) 


def loop_STEEMUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/steemusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STEEMUSDT) 
	ws.run_forever() 


Thread(target=loop_STEEMUSDT).start() 
symbol_g_MOBUSDT = 'MOBUSDT' 
price_bids_g_MOBUSDT = Decimal('0.0') 
qty_bids_g_MOBUSDT = Decimal('0.0') 
price_asks_g_MOBUSDT = Decimal('0.0') 
qty_asks_g_MOBUSDT = Decimal('0.0') 
stepSize_g_MOBUSDT = Decimal('0.01') 


def on_message_MOBUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MOBUSDT = 'MOBUSDT' 
	price_bids_c_l_MOBUSDT = data['b'] 
	qty_bids_c_l_MOBUSDT = data['B'] 
	price_asks_c_l_MOBUSDT = data['a'] 
	qty_asks_c_l_MOBUSDT = data['A'] 

	global symbol_g_MOBUSDT 
	global price_bids_g_MOBUSDT 
	global qty_bids_g_MOBUSDT 
	global price_asks_g_MOBUSDT 
	global qty_asks_g_MOBUSDT 

	symbol_g_MOBUSDT = symbol_c_l_MOBUSDT 
	price_bids_g_MOBUSDT = Decimal(price_bids_c_l_MOBUSDT) 
	qty_bids_g_MOBUSDT = Decimal(qty_bids_c_l_MOBUSDT) 
	price_asks_g_MOBUSDT = Decimal(price_asks_c_l_MOBUSDT) 
	qty_asks_g_MOBUSDT = Decimal(qty_asks_c_l_MOBUSDT) 


def loop_MOBUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mobusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MOBUSDT) 
	ws.run_forever() 


Thread(target=loop_MOBUSDT).start() 
symbol_g_NEXOUSDT = 'NEXOUSDT' 
price_bids_g_NEXOUSDT = Decimal('0.0') 
qty_bids_g_NEXOUSDT = Decimal('0.0') 
price_asks_g_NEXOUSDT = Decimal('0.0') 
qty_asks_g_NEXOUSDT = Decimal('0.0') 
stepSize_g_NEXOUSDT = Decimal('0.01') 


def on_message_NEXOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEXOUSDT = 'NEXOUSDT' 
	price_bids_c_l_NEXOUSDT = data['b'] 
	qty_bids_c_l_NEXOUSDT = data['B'] 
	price_asks_c_l_NEXOUSDT = data['a'] 
	qty_asks_c_l_NEXOUSDT = data['A'] 

	global symbol_g_NEXOUSDT 
	global price_bids_g_NEXOUSDT 
	global qty_bids_g_NEXOUSDT 
	global price_asks_g_NEXOUSDT 
	global qty_asks_g_NEXOUSDT 

	symbol_g_NEXOUSDT = symbol_c_l_NEXOUSDT 
	price_bids_g_NEXOUSDT = Decimal(price_bids_c_l_NEXOUSDT) 
	qty_bids_g_NEXOUSDT = Decimal(qty_bids_c_l_NEXOUSDT) 
	price_asks_g_NEXOUSDT = Decimal(price_asks_c_l_NEXOUSDT) 
	qty_asks_g_NEXOUSDT = Decimal(qty_asks_c_l_NEXOUSDT) 


def loop_NEXOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nexousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEXOUSDT) 
	ws.run_forever() 


Thread(target=loop_NEXOUSDT).start() 
symbol_g_REIUSDT = 'REIUSDT' 
price_bids_g_REIUSDT = Decimal('0.0') 
qty_bids_g_REIUSDT = Decimal('0.0') 
price_asks_g_REIUSDT = Decimal('0.0') 
qty_asks_g_REIUSDT = Decimal('0.0') 
stepSize_g_REIUSDT = Decimal('0.1') 


def on_message_REIUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_REIUSDT = 'REIUSDT' 
	price_bids_c_l_REIUSDT = data['b'] 
	qty_bids_c_l_REIUSDT = data['B'] 
	price_asks_c_l_REIUSDT = data['a'] 
	qty_asks_c_l_REIUSDT = data['A'] 

	global symbol_g_REIUSDT 
	global price_bids_g_REIUSDT 
	global qty_bids_g_REIUSDT 
	global price_asks_g_REIUSDT 
	global qty_asks_g_REIUSDT 

	symbol_g_REIUSDT = symbol_c_l_REIUSDT 
	price_bids_g_REIUSDT = Decimal(price_bids_c_l_REIUSDT) 
	qty_bids_g_REIUSDT = Decimal(qty_bids_c_l_REIUSDT) 
	price_asks_g_REIUSDT = Decimal(price_asks_c_l_REIUSDT) 
	qty_asks_g_REIUSDT = Decimal(qty_asks_c_l_REIUSDT) 


def loop_REIUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/reiusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_REIUSDT) 
	ws.run_forever() 


Thread(target=loop_REIUSDT).start() 
symbol_g_LDOUSDT = 'LDOUSDT' 
price_bids_g_LDOUSDT = Decimal('0.0') 
qty_bids_g_LDOUSDT = Decimal('0.0') 
price_asks_g_LDOUSDT = Decimal('0.0') 
qty_asks_g_LDOUSDT = Decimal('0.0') 
stepSize_g_LDOUSDT = Decimal('0.01') 


def on_message_LDOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LDOUSDT = 'LDOUSDT' 
	price_bids_c_l_LDOUSDT = data['b'] 
	qty_bids_c_l_LDOUSDT = data['B'] 
	price_asks_c_l_LDOUSDT = data['a'] 
	qty_asks_c_l_LDOUSDT = data['A'] 

	global symbol_g_LDOUSDT 
	global price_bids_g_LDOUSDT 
	global qty_bids_g_LDOUSDT 
	global price_asks_g_LDOUSDT 
	global qty_asks_g_LDOUSDT 

	symbol_g_LDOUSDT = symbol_c_l_LDOUSDT 
	price_bids_g_LDOUSDT = Decimal(price_bids_c_l_LDOUSDT) 
	qty_bids_g_LDOUSDT = Decimal(qty_bids_c_l_LDOUSDT) 
	price_asks_g_LDOUSDT = Decimal(price_asks_c_l_LDOUSDT) 
	qty_asks_g_LDOUSDT = Decimal(qty_asks_c_l_LDOUSDT) 


def loop_LDOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ldousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LDOUSDT) 
	ws.run_forever() 


Thread(target=loop_LDOUSDT).start() 
symbol_g_EPXUSDT = 'EPXUSDT' 
price_bids_g_EPXUSDT = Decimal('0.0') 
qty_bids_g_EPXUSDT = Decimal('0.0') 
price_asks_g_EPXUSDT = Decimal('0.0') 
qty_asks_g_EPXUSDT = Decimal('0.0') 
stepSize_g_EPXUSDT = Decimal('1.0') 


def on_message_EPXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EPXUSDT = 'EPXUSDT' 
	price_bids_c_l_EPXUSDT = data['b'] 
	qty_bids_c_l_EPXUSDT = data['B'] 
	price_asks_c_l_EPXUSDT = data['a'] 
	qty_asks_c_l_EPXUSDT = data['A'] 

	global symbol_g_EPXUSDT 
	global price_bids_g_EPXUSDT 
	global qty_bids_g_EPXUSDT 
	global price_asks_g_EPXUSDT 
	global qty_asks_g_EPXUSDT 

	symbol_g_EPXUSDT = symbol_c_l_EPXUSDT 
	price_bids_g_EPXUSDT = Decimal(price_bids_c_l_EPXUSDT) 
	qty_bids_g_EPXUSDT = Decimal(qty_bids_c_l_EPXUSDT) 
	price_asks_g_EPXUSDT = Decimal(price_asks_c_l_EPXUSDT) 
	qty_asks_g_EPXUSDT = Decimal(qty_asks_c_l_EPXUSDT) 


def loop_EPXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/epxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EPXUSDT) 
	ws.run_forever() 


Thread(target=loop_EPXUSDT).start() 
symbol_g_OPUSDT = 'OPUSDT' 
price_bids_g_OPUSDT = Decimal('0.0') 
qty_bids_g_OPUSDT = Decimal('0.0') 
price_asks_g_OPUSDT = Decimal('0.0') 
qty_asks_g_OPUSDT = Decimal('0.0') 
stepSize_g_OPUSDT = Decimal('0.01') 


def on_message_OPUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OPUSDT = 'OPUSDT' 
	price_bids_c_l_OPUSDT = data['b'] 
	qty_bids_c_l_OPUSDT = data['B'] 
	price_asks_c_l_OPUSDT = data['a'] 
	qty_asks_c_l_OPUSDT = data['A'] 

	global symbol_g_OPUSDT 
	global price_bids_g_OPUSDT 
	global qty_bids_g_OPUSDT 
	global price_asks_g_OPUSDT 
	global qty_asks_g_OPUSDT 

	symbol_g_OPUSDT = symbol_c_l_OPUSDT 
	price_bids_g_OPUSDT = Decimal(price_bids_c_l_OPUSDT) 
	qty_bids_g_OPUSDT = Decimal(qty_bids_c_l_OPUSDT) 
	price_asks_g_OPUSDT = Decimal(price_asks_c_l_OPUSDT) 
	qty_asks_g_OPUSDT = Decimal(qty_asks_c_l_OPUSDT) 


def loop_OPUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/opusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OPUSDT) 
	ws.run_forever() 


Thread(target=loop_OPUSDT).start() 
symbol_g_LEVERUSDT = 'LEVERUSDT' 
price_bids_g_LEVERUSDT = Decimal('0.0') 
qty_bids_g_LEVERUSDT = Decimal('0.0') 
price_asks_g_LEVERUSDT = Decimal('0.0') 
qty_asks_g_LEVERUSDT = Decimal('0.0') 
stepSize_g_LEVERUSDT = Decimal('1.0') 


def on_message_LEVERUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LEVERUSDT = 'LEVERUSDT' 
	price_bids_c_l_LEVERUSDT = data['b'] 
	qty_bids_c_l_LEVERUSDT = data['B'] 
	price_asks_c_l_LEVERUSDT = data['a'] 
	qty_asks_c_l_LEVERUSDT = data['A'] 

	global symbol_g_LEVERUSDT 
	global price_bids_g_LEVERUSDT 
	global qty_bids_g_LEVERUSDT 
	global price_asks_g_LEVERUSDT 
	global qty_asks_g_LEVERUSDT 

	symbol_g_LEVERUSDT = symbol_c_l_LEVERUSDT 
	price_bids_g_LEVERUSDT = Decimal(price_bids_c_l_LEVERUSDT) 
	qty_bids_g_LEVERUSDT = Decimal(qty_bids_c_l_LEVERUSDT) 
	price_asks_g_LEVERUSDT = Decimal(price_asks_c_l_LEVERUSDT) 
	qty_asks_g_LEVERUSDT = Decimal(qty_asks_c_l_LEVERUSDT) 


def loop_LEVERUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/leverusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LEVERUSDT) 
	ws.run_forever() 


Thread(target=loop_LEVERUSDT).start() 
symbol_g_STGUSDT = 'STGUSDT' 
price_bids_g_STGUSDT = Decimal('0.0') 
qty_bids_g_STGUSDT = Decimal('0.0') 
price_asks_g_STGUSDT = Decimal('0.0') 
qty_asks_g_STGUSDT = Decimal('0.0') 
stepSize_g_STGUSDT = Decimal('0.1') 


def on_message_STGUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STGUSDT = 'STGUSDT' 
	price_bids_c_l_STGUSDT = data['b'] 
	qty_bids_c_l_STGUSDT = data['B'] 
	price_asks_c_l_STGUSDT = data['a'] 
	qty_asks_c_l_STGUSDT = data['A'] 

	global symbol_g_STGUSDT 
	global price_bids_g_STGUSDT 
	global qty_bids_g_STGUSDT 
	global price_asks_g_STGUSDT 
	global qty_asks_g_STGUSDT 

	symbol_g_STGUSDT = symbol_c_l_STGUSDT 
	price_bids_g_STGUSDT = Decimal(price_bids_c_l_STGUSDT) 
	qty_bids_g_STGUSDT = Decimal(qty_bids_c_l_STGUSDT) 
	price_asks_g_STGUSDT = Decimal(price_asks_c_l_STGUSDT) 
	qty_asks_g_STGUSDT = Decimal(qty_asks_c_l_STGUSDT) 


def loop_STGUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/stgusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STGUSDT) 
	ws.run_forever() 


Thread(target=loop_STGUSDT).start() 
symbol_g_LUNCUSDT = 'LUNCUSDT' 
price_bids_g_LUNCUSDT = Decimal('0.0') 
qty_bids_g_LUNCUSDT = Decimal('0.0') 
price_asks_g_LUNCUSDT = Decimal('0.0') 
qty_asks_g_LUNCUSDT = Decimal('0.0') 
stepSize_g_LUNCUSDT = Decimal('0.01') 


def on_message_LUNCUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LUNCUSDT = 'LUNCUSDT' 
	price_bids_c_l_LUNCUSDT = data['b'] 
	qty_bids_c_l_LUNCUSDT = data['B'] 
	price_asks_c_l_LUNCUSDT = data['a'] 
	qty_asks_c_l_LUNCUSDT = data['A'] 

	global symbol_g_LUNCUSDT 
	global price_bids_g_LUNCUSDT 
	global qty_bids_g_LUNCUSDT 
	global price_asks_g_LUNCUSDT 
	global qty_asks_g_LUNCUSDT 

	symbol_g_LUNCUSDT = symbol_c_l_LUNCUSDT 
	price_bids_g_LUNCUSDT = Decimal(price_bids_c_l_LUNCUSDT) 
	qty_bids_g_LUNCUSDT = Decimal(qty_bids_c_l_LUNCUSDT) 
	price_asks_g_LUNCUSDT = Decimal(price_asks_c_l_LUNCUSDT) 
	qty_asks_g_LUNCUSDT = Decimal(qty_asks_c_l_LUNCUSDT) 


def loop_LUNCUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/luncusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LUNCUSDT) 
	ws.run_forever() 


Thread(target=loop_LUNCUSDT).start() 
symbol_g_GMXUSDT = 'GMXUSDT' 
price_bids_g_GMXUSDT = Decimal('0.0') 
qty_bids_g_GMXUSDT = Decimal('0.0') 
price_asks_g_GMXUSDT = Decimal('0.0') 
qty_asks_g_GMXUSDT = Decimal('0.0') 
stepSize_g_GMXUSDT = Decimal('0.001') 


def on_message_GMXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GMXUSDT = 'GMXUSDT' 
	price_bids_c_l_GMXUSDT = data['b'] 
	qty_bids_c_l_GMXUSDT = data['B'] 
	price_asks_c_l_GMXUSDT = data['a'] 
	qty_asks_c_l_GMXUSDT = data['A'] 

	global symbol_g_GMXUSDT 
	global price_bids_g_GMXUSDT 
	global qty_bids_g_GMXUSDT 
	global price_asks_g_GMXUSDT 
	global qty_asks_g_GMXUSDT 

	symbol_g_GMXUSDT = symbol_c_l_GMXUSDT 
	price_bids_g_GMXUSDT = Decimal(price_bids_c_l_GMXUSDT) 
	qty_bids_g_GMXUSDT = Decimal(qty_bids_c_l_GMXUSDT) 
	price_asks_g_GMXUSDT = Decimal(price_asks_c_l_GMXUSDT) 
	qty_asks_g_GMXUSDT = Decimal(qty_asks_c_l_GMXUSDT) 


def loop_GMXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gmxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GMXUSDT) 
	ws.run_forever() 


Thread(target=loop_GMXUSDT).start() 
symbol_g_NEBLUSDT = 'NEBLUSDT' 
price_bids_g_NEBLUSDT = Decimal('0.0') 
qty_bids_g_NEBLUSDT = Decimal('0.0') 
price_asks_g_NEBLUSDT = Decimal('0.0') 
qty_asks_g_NEBLUSDT = Decimal('0.0') 
stepSize_g_NEBLUSDT = Decimal('0.1') 


def on_message_NEBLUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEBLUSDT = 'NEBLUSDT' 
	price_bids_c_l_NEBLUSDT = data['b'] 
	qty_bids_c_l_NEBLUSDT = data['B'] 
	price_asks_c_l_NEBLUSDT = data['a'] 
	qty_asks_c_l_NEBLUSDT = data['A'] 

	global symbol_g_NEBLUSDT 
	global price_bids_g_NEBLUSDT 
	global qty_bids_g_NEBLUSDT 
	global price_asks_g_NEBLUSDT 
	global qty_asks_g_NEBLUSDT 

	symbol_g_NEBLUSDT = symbol_c_l_NEBLUSDT 
	price_bids_g_NEBLUSDT = Decimal(price_bids_c_l_NEBLUSDT) 
	qty_bids_g_NEBLUSDT = Decimal(qty_bids_c_l_NEBLUSDT) 
	price_asks_g_NEBLUSDT = Decimal(price_asks_c_l_NEBLUSDT) 
	qty_asks_g_NEBLUSDT = Decimal(qty_asks_c_l_NEBLUSDT) 


def loop_NEBLUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/neblusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEBLUSDT) 
	ws.run_forever() 


Thread(target=loop_NEBLUSDT).start() 
symbol_g_POLYXUSDT = 'POLYXUSDT' 
price_bids_g_POLYXUSDT = Decimal('0.0') 
qty_bids_g_POLYXUSDT = Decimal('0.0') 
price_asks_g_POLYXUSDT = Decimal('0.0') 
qty_asks_g_POLYXUSDT = Decimal('0.0') 
stepSize_g_POLYXUSDT = Decimal('0.1') 


def on_message_POLYXUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_POLYXUSDT = 'POLYXUSDT' 
	price_bids_c_l_POLYXUSDT = data['b'] 
	qty_bids_c_l_POLYXUSDT = data['B'] 
	price_asks_c_l_POLYXUSDT = data['a'] 
	qty_asks_c_l_POLYXUSDT = data['A'] 

	global symbol_g_POLYXUSDT 
	global price_bids_g_POLYXUSDT 
	global qty_bids_g_POLYXUSDT 
	global price_asks_g_POLYXUSDT 
	global qty_asks_g_POLYXUSDT 

	symbol_g_POLYXUSDT = symbol_c_l_POLYXUSDT 
	price_bids_g_POLYXUSDT = Decimal(price_bids_c_l_POLYXUSDT) 
	qty_bids_g_POLYXUSDT = Decimal(qty_bids_c_l_POLYXUSDT) 
	price_asks_g_POLYXUSDT = Decimal(price_asks_c_l_POLYXUSDT) 
	qty_asks_g_POLYXUSDT = Decimal(qty_asks_c_l_POLYXUSDT) 


def loop_POLYXUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/polyxusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_POLYXUSDT) 
	ws.run_forever() 


Thread(target=loop_POLYXUSDT).start() 
symbol_g_OSMOUSDT = 'OSMOUSDT' 
price_bids_g_OSMOUSDT = Decimal('0.0') 
qty_bids_g_OSMOUSDT = Decimal('0.0') 
price_asks_g_OSMOUSDT = Decimal('0.0') 
qty_asks_g_OSMOUSDT = Decimal('0.0') 
stepSize_g_OSMOUSDT = Decimal('0.01') 


def on_message_OSMOUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OSMOUSDT = 'OSMOUSDT' 
	price_bids_c_l_OSMOUSDT = data['b'] 
	qty_bids_c_l_OSMOUSDT = data['B'] 
	price_asks_c_l_OSMOUSDT = data['a'] 
	qty_asks_c_l_OSMOUSDT = data['A'] 

	global symbol_g_OSMOUSDT 
	global price_bids_g_OSMOUSDT 
	global qty_bids_g_OSMOUSDT 
	global price_asks_g_OSMOUSDT 
	global qty_asks_g_OSMOUSDT 

	symbol_g_OSMOUSDT = symbol_c_l_OSMOUSDT 
	price_bids_g_OSMOUSDT = Decimal(price_bids_c_l_OSMOUSDT) 
	qty_bids_g_OSMOUSDT = Decimal(qty_bids_c_l_OSMOUSDT) 
	price_asks_g_OSMOUSDT = Decimal(price_asks_c_l_OSMOUSDT) 
	qty_asks_g_OSMOUSDT = Decimal(qty_asks_c_l_OSMOUSDT) 


def loop_OSMOUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/osmousdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OSMOUSDT) 
	ws.run_forever() 


Thread(target=loop_OSMOUSDT).start() 
symbol_g_HFTUSDT = 'HFTUSDT' 
price_bids_g_HFTUSDT = Decimal('0.0') 
qty_bids_g_HFTUSDT = Decimal('0.0') 
price_asks_g_HFTUSDT = Decimal('0.0') 
qty_asks_g_HFTUSDT = Decimal('0.0') 
stepSize_g_HFTUSDT = Decimal('0.1') 


def on_message_HFTUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HFTUSDT = 'HFTUSDT' 
	price_bids_c_l_HFTUSDT = data['b'] 
	qty_bids_c_l_HFTUSDT = data['B'] 
	price_asks_c_l_HFTUSDT = data['a'] 
	qty_asks_c_l_HFTUSDT = data['A'] 

	global symbol_g_HFTUSDT 
	global price_bids_g_HFTUSDT 
	global qty_bids_g_HFTUSDT 
	global price_asks_g_HFTUSDT 
	global qty_asks_g_HFTUSDT 

	symbol_g_HFTUSDT = symbol_c_l_HFTUSDT 
	price_bids_g_HFTUSDT = Decimal(price_bids_c_l_HFTUSDT) 
	qty_bids_g_HFTUSDT = Decimal(qty_bids_c_l_HFTUSDT) 
	price_asks_g_HFTUSDT = Decimal(price_asks_c_l_HFTUSDT) 
	qty_asks_g_HFTUSDT = Decimal(qty_asks_c_l_HFTUSDT) 


def loop_HFTUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hftusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HFTUSDT) 
	ws.run_forever() 


Thread(target=loop_HFTUSDT).start() 
symbol_g_PHBUSDT = 'PHBUSDT' 
price_bids_g_PHBUSDT = Decimal('0.0') 
qty_bids_g_PHBUSDT = Decimal('0.0') 
price_asks_g_PHBUSDT = Decimal('0.0') 
qty_asks_g_PHBUSDT = Decimal('0.0') 
stepSize_g_PHBUSDT = Decimal('1.0') 


def on_message_PHBUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PHBUSDT = 'PHBUSDT' 
	price_bids_c_l_PHBUSDT = data['b'] 
	qty_bids_c_l_PHBUSDT = data['B'] 
	price_asks_c_l_PHBUSDT = data['a'] 
	qty_asks_c_l_PHBUSDT = data['A'] 

	global symbol_g_PHBUSDT 
	global price_bids_g_PHBUSDT 
	global qty_bids_g_PHBUSDT 
	global price_asks_g_PHBUSDT 
	global qty_asks_g_PHBUSDT 

	symbol_g_PHBUSDT = symbol_c_l_PHBUSDT 
	price_bids_g_PHBUSDT = Decimal(price_bids_c_l_PHBUSDT) 
	qty_bids_g_PHBUSDT = Decimal(qty_bids_c_l_PHBUSDT) 
	price_asks_g_PHBUSDT = Decimal(price_asks_c_l_PHBUSDT) 
	qty_asks_g_PHBUSDT = Decimal(qty_asks_c_l_PHBUSDT) 


def loop_PHBUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/phbusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PHBUSDT) 
	ws.run_forever() 


Thread(target=loop_PHBUSDT).start() 
symbol_g_HOOKUSDT = 'HOOKUSDT' 
price_bids_g_HOOKUSDT = Decimal('0.0') 
qty_bids_g_HOOKUSDT = Decimal('0.0') 
price_asks_g_HOOKUSDT = Decimal('0.0') 
qty_asks_g_HOOKUSDT = Decimal('0.0') 
stepSize_g_HOOKUSDT = Decimal('0.1') 


def on_message_HOOKUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HOOKUSDT = 'HOOKUSDT' 
	price_bids_c_l_HOOKUSDT = data['b'] 
	qty_bids_c_l_HOOKUSDT = data['B'] 
	price_asks_c_l_HOOKUSDT = data['a'] 
	qty_asks_c_l_HOOKUSDT = data['A'] 

	global symbol_g_HOOKUSDT 
	global price_bids_g_HOOKUSDT 
	global qty_bids_g_HOOKUSDT 
	global price_asks_g_HOOKUSDT 
	global qty_asks_g_HOOKUSDT 

	symbol_g_HOOKUSDT = symbol_c_l_HOOKUSDT 
	price_bids_g_HOOKUSDT = Decimal(price_bids_c_l_HOOKUSDT) 
	qty_bids_g_HOOKUSDT = Decimal(qty_bids_c_l_HOOKUSDT) 
	price_asks_g_HOOKUSDT = Decimal(price_asks_c_l_HOOKUSDT) 
	qty_asks_g_HOOKUSDT = Decimal(qty_asks_c_l_HOOKUSDT) 


def loop_HOOKUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hookusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HOOKUSDT) 
	ws.run_forever() 


Thread(target=loop_HOOKUSDT).start() 
symbol_g_MAGICUSDT = 'MAGICUSDT' 
price_bids_g_MAGICUSDT = Decimal('0.0') 
qty_bids_g_MAGICUSDT = Decimal('0.0') 
price_asks_g_MAGICUSDT = Decimal('0.0') 
qty_asks_g_MAGICUSDT = Decimal('0.0') 
stepSize_g_MAGICUSDT = Decimal('0.1') 


def on_message_MAGICUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MAGICUSDT = 'MAGICUSDT' 
	price_bids_c_l_MAGICUSDT = data['b'] 
	qty_bids_c_l_MAGICUSDT = data['B'] 
	price_asks_c_l_MAGICUSDT = data['a'] 
	qty_asks_c_l_MAGICUSDT = data['A'] 

	global symbol_g_MAGICUSDT 
	global price_bids_g_MAGICUSDT 
	global qty_bids_g_MAGICUSDT 
	global price_asks_g_MAGICUSDT 
	global qty_asks_g_MAGICUSDT 

	symbol_g_MAGICUSDT = symbol_c_l_MAGICUSDT 
	price_bids_g_MAGICUSDT = Decimal(price_bids_c_l_MAGICUSDT) 
	qty_bids_g_MAGICUSDT = Decimal(qty_bids_c_l_MAGICUSDT) 
	price_asks_g_MAGICUSDT = Decimal(price_asks_c_l_MAGICUSDT) 
	qty_asks_g_MAGICUSDT = Decimal(qty_asks_c_l_MAGICUSDT) 


def loop_MAGICUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/magicusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MAGICUSDT) 
	ws.run_forever() 


Thread(target=loop_MAGICUSDT).start() 
symbol_g_HIFIUSDT = 'HIFIUSDT' 
price_bids_g_HIFIUSDT = Decimal('0.0') 
qty_bids_g_HIFIUSDT = Decimal('0.0') 
price_asks_g_HIFIUSDT = Decimal('0.0') 
qty_asks_g_HIFIUSDT = Decimal('0.0') 
stepSize_g_HIFIUSDT = Decimal('0.1') 


def on_message_HIFIUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HIFIUSDT = 'HIFIUSDT' 
	price_bids_c_l_HIFIUSDT = data['b'] 
	qty_bids_c_l_HIFIUSDT = data['B'] 
	price_asks_c_l_HIFIUSDT = data['a'] 
	qty_asks_c_l_HIFIUSDT = data['A'] 

	global symbol_g_HIFIUSDT 
	global price_bids_g_HIFIUSDT 
	global qty_bids_g_HIFIUSDT 
	global price_asks_g_HIFIUSDT 
	global qty_asks_g_HIFIUSDT 

	symbol_g_HIFIUSDT = symbol_c_l_HIFIUSDT 
	price_bids_g_HIFIUSDT = Decimal(price_bids_c_l_HIFIUSDT) 
	qty_bids_g_HIFIUSDT = Decimal(qty_bids_c_l_HIFIUSDT) 
	price_asks_g_HIFIUSDT = Decimal(price_asks_c_l_HIFIUSDT) 
	qty_asks_g_HIFIUSDT = Decimal(qty_asks_c_l_HIFIUSDT) 


def loop_HIFIUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hifiusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HIFIUSDT) 
	ws.run_forever() 


Thread(target=loop_HIFIUSDT).start() 
symbol_g_RPLUSDT = 'RPLUSDT' 
price_bids_g_RPLUSDT = Decimal('0.0') 
qty_bids_g_RPLUSDT = Decimal('0.0') 
price_asks_g_RPLUSDT = Decimal('0.0') 
qty_asks_g_RPLUSDT = Decimal('0.0') 
stepSize_g_RPLUSDT = Decimal('0.01') 


def on_message_RPLUSDT(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RPLUSDT = 'RPLUSDT' 
	price_bids_c_l_RPLUSDT = data['b'] 
	qty_bids_c_l_RPLUSDT = data['B'] 
	price_asks_c_l_RPLUSDT = data['a'] 
	qty_asks_c_l_RPLUSDT = data['A'] 

	global symbol_g_RPLUSDT 
	global price_bids_g_RPLUSDT 
	global qty_bids_g_RPLUSDT 
	global price_asks_g_RPLUSDT 
	global qty_asks_g_RPLUSDT 

	symbol_g_RPLUSDT = symbol_c_l_RPLUSDT 
	price_bids_g_RPLUSDT = Decimal(price_bids_c_l_RPLUSDT) 
	qty_bids_g_RPLUSDT = Decimal(qty_bids_c_l_RPLUSDT) 
	price_asks_g_RPLUSDT = Decimal(price_asks_c_l_RPLUSDT) 
	qty_asks_g_RPLUSDT = Decimal(qty_asks_c_l_RPLUSDT) 


def loop_RPLUSDT(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rplusdt@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RPLUSDT) 
	ws.run_forever() 


Thread(target=loop_RPLUSDT).start() 
symbol_g_BTCRUB = 'BTCRUB' 
price_bids_g_BTCRUB = Decimal('0.0') 
qty_bids_g_BTCRUB = Decimal('0.0') 
price_asks_g_BTCRUB = Decimal('0.0') 
qty_asks_g_BTCRUB = Decimal('0.0') 
stepSize_g_BTCRUB = Decimal('0.00001') 


def on_message_BTCRUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTCRUB = 'BTCRUB' 
	price_bids_c_l_BTCRUB = data['b'] 
	qty_bids_c_l_BTCRUB = data['B'] 
	price_asks_c_l_BTCRUB = data['a'] 
	qty_asks_c_l_BTCRUB = data['A'] 

	global symbol_g_BTCRUB 
	global price_bids_g_BTCRUB 
	global qty_bids_g_BTCRUB 
	global price_asks_g_BTCRUB 
	global qty_asks_g_BTCRUB 

	symbol_g_BTCRUB = symbol_c_l_BTCRUB 
	price_bids_g_BTCRUB = Decimal(price_bids_c_l_BTCRUB) 
	qty_bids_g_BTCRUB = Decimal(qty_bids_c_l_BTCRUB) 
	price_asks_g_BTCRUB = Decimal(price_asks_c_l_BTCRUB) 
	qty_asks_g_BTCRUB = Decimal(qty_asks_c_l_BTCRUB) 


def loop_BTCRUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/btcrub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTCRUB) 
	ws.run_forever() 


Thread(target=loop_BTCRUB).start() 
symbol_g_BTCTRY = 'BTCTRY' 
price_bids_g_BTCTRY = Decimal('0.0') 
qty_bids_g_BTCTRY = Decimal('0.0') 
price_asks_g_BTCTRY = Decimal('0.0') 
qty_asks_g_BTCTRY = Decimal('0.0') 
stepSize_g_BTCTRY = Decimal('0.00001') 


def on_message_BTCTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTCTRY = 'BTCTRY' 
	price_bids_c_l_BTCTRY = data['b'] 
	qty_bids_c_l_BTCTRY = data['B'] 
	price_asks_c_l_BTCTRY = data['a'] 
	qty_asks_c_l_BTCTRY = data['A'] 

	global symbol_g_BTCTRY 
	global price_bids_g_BTCTRY 
	global qty_bids_g_BTCTRY 
	global price_asks_g_BTCTRY 
	global qty_asks_g_BTCTRY 

	symbol_g_BTCTRY = symbol_c_l_BTCTRY 
	price_bids_g_BTCTRY = Decimal(price_bids_c_l_BTCTRY) 
	qty_bids_g_BTCTRY = Decimal(qty_bids_c_l_BTCTRY) 
	price_asks_g_BTCTRY = Decimal(price_asks_c_l_BTCTRY) 
	qty_asks_g_BTCTRY = Decimal(qty_asks_c_l_BTCTRY) 


def loop_BTCTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/btctry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTCTRY) 
	ws.run_forever() 


Thread(target=loop_BTCTRY).start() 
symbol_g_BTCUAH = 'BTCUAH' 
price_bids_g_BTCUAH = Decimal('0.0') 
qty_bids_g_BTCUAH = Decimal('0.0') 
price_asks_g_BTCUAH = Decimal('0.0') 
qty_asks_g_BTCUAH = Decimal('0.0') 
stepSize_g_BTCUAH = Decimal('0.00001') 


def on_message_BTCUAH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTCUAH = 'BTCUAH' 
	price_bids_c_l_BTCUAH = data['b'] 
	qty_bids_c_l_BTCUAH = data['B'] 
	price_asks_c_l_BTCUAH = data['a'] 
	qty_asks_c_l_BTCUAH = data['A'] 

	global symbol_g_BTCUAH 
	global price_bids_g_BTCUAH 
	global qty_bids_g_BTCUAH 
	global price_asks_g_BTCUAH 
	global qty_asks_g_BTCUAH 

	symbol_g_BTCUAH = symbol_c_l_BTCUAH 
	price_bids_g_BTCUAH = Decimal(price_bids_c_l_BTCUAH) 
	qty_bids_g_BTCUAH = Decimal(qty_bids_c_l_BTCUAH) 
	price_asks_g_BTCUAH = Decimal(price_asks_c_l_BTCUAH) 
	qty_asks_g_BTCUAH = Decimal(qty_asks_c_l_BTCUAH) 


def loop_BTCUAH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/btcuah@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTCUAH) 
	ws.run_forever() 


Thread(target=loop_BTCUAH).start() 
symbol_g_BTCBIDR = 'BTCBIDR' 
price_bids_g_BTCBIDR = Decimal('0.0') 
qty_bids_g_BTCBIDR = Decimal('0.0') 
price_asks_g_BTCBIDR = Decimal('0.0') 
qty_asks_g_BTCBIDR = Decimal('0.0') 
stepSize_g_BTCBIDR = Decimal('0.00001') 


def on_message_BTCBIDR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTCBIDR = 'BTCBIDR' 
	price_bids_c_l_BTCBIDR = data['b'] 
	qty_bids_c_l_BTCBIDR = data['B'] 
	price_asks_c_l_BTCBIDR = data['a'] 
	qty_asks_c_l_BTCBIDR = data['A'] 

	global symbol_g_BTCBIDR 
	global price_bids_g_BTCBIDR 
	global qty_bids_g_BTCBIDR 
	global price_asks_g_BTCBIDR 
	global qty_asks_g_BTCBIDR 

	symbol_g_BTCBIDR = symbol_c_l_BTCBIDR 
	price_bids_g_BTCBIDR = Decimal(price_bids_c_l_BTCBIDR) 
	qty_bids_g_BTCBIDR = Decimal(qty_bids_c_l_BTCBIDR) 
	price_asks_g_BTCBIDR = Decimal(price_asks_c_l_BTCBIDR) 
	qty_asks_g_BTCBIDR = Decimal(qty_asks_c_l_BTCBIDR) 


def loop_BTCBIDR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/btcbidr@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTCBIDR) 
	ws.run_forever() 


Thread(target=loop_BTCBIDR).start() 
symbol_g_BTCDAI = 'BTCDAI' 
price_bids_g_BTCDAI = Decimal('0.0') 
qty_bids_g_BTCDAI = Decimal('0.0') 
price_asks_g_BTCDAI = Decimal('0.0') 
qty_asks_g_BTCDAI = Decimal('0.0') 
stepSize_g_BTCDAI = Decimal('0.00001') 


def on_message_BTCDAI(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTCDAI = 'BTCDAI' 
	price_bids_c_l_BTCDAI = data['b'] 
	qty_bids_c_l_BTCDAI = data['B'] 
	price_asks_c_l_BTCDAI = data['a'] 
	qty_asks_c_l_BTCDAI = data['A'] 

	global symbol_g_BTCDAI 
	global price_bids_g_BTCDAI 
	global qty_bids_g_BTCDAI 
	global price_asks_g_BTCDAI 
	global qty_asks_g_BTCDAI 

	symbol_g_BTCDAI = symbol_c_l_BTCDAI 
	price_bids_g_BTCDAI = Decimal(price_bids_c_l_BTCDAI) 
	qty_bids_g_BTCDAI = Decimal(qty_bids_c_l_BTCDAI) 
	price_asks_g_BTCDAI = Decimal(price_asks_c_l_BTCDAI) 
	qty_asks_g_BTCDAI = Decimal(qty_asks_c_l_BTCDAI) 


def loop_BTCDAI(): 

	socket1 = f'wss://stream.binance.com:9443/ws/btcdai@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTCDAI) 
	ws.run_forever() 


Thread(target=loop_BTCDAI).start() 
symbol_g_BTCBRL = 'BTCBRL' 
price_bids_g_BTCBRL = Decimal('0.0') 
qty_bids_g_BTCBRL = Decimal('0.0') 
price_asks_g_BTCBRL = Decimal('0.0') 
qty_asks_g_BTCBRL = Decimal('0.0') 
stepSize_g_BTCBRL = Decimal('0.00001') 


def on_message_BTCBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTCBRL = 'BTCBRL' 
	price_bids_c_l_BTCBRL = data['b'] 
	qty_bids_c_l_BTCBRL = data['B'] 
	price_asks_c_l_BTCBRL = data['a'] 
	qty_asks_c_l_BTCBRL = data['A'] 

	global symbol_g_BTCBRL 
	global price_bids_g_BTCBRL 
	global qty_bids_g_BTCBRL 
	global price_asks_g_BTCBRL 
	global qty_asks_g_BTCBRL 

	symbol_g_BTCBRL = symbol_c_l_BTCBRL 
	price_bids_g_BTCBRL = Decimal(price_bids_c_l_BTCBRL) 
	qty_bids_g_BTCBRL = Decimal(qty_bids_c_l_BTCBRL) 
	price_asks_g_BTCBRL = Decimal(price_asks_c_l_BTCBRL) 
	qty_asks_g_BTCBRL = Decimal(qty_asks_c_l_BTCBRL) 


def loop_BTCBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/btcbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTCBRL) 
	ws.run_forever() 


Thread(target=loop_BTCBRL).start() 
symbol_g_ETHRUB = 'ETHRUB' 
price_bids_g_ETHRUB = Decimal('0.0') 
qty_bids_g_ETHRUB = Decimal('0.0') 
price_asks_g_ETHRUB = Decimal('0.0') 
qty_asks_g_ETHRUB = Decimal('0.0') 
stepSize_g_ETHRUB = Decimal('0.0001') 


def on_message_ETHRUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETHRUB = 'ETHRUB' 
	price_bids_c_l_ETHRUB = data['b'] 
	qty_bids_c_l_ETHRUB = data['B'] 
	price_asks_c_l_ETHRUB = data['a'] 
	qty_asks_c_l_ETHRUB = data['A'] 

	global symbol_g_ETHRUB 
	global price_bids_g_ETHRUB 
	global qty_bids_g_ETHRUB 
	global price_asks_g_ETHRUB 
	global qty_asks_g_ETHRUB 

	symbol_g_ETHRUB = symbol_c_l_ETHRUB 
	price_bids_g_ETHRUB = Decimal(price_bids_c_l_ETHRUB) 
	qty_bids_g_ETHRUB = Decimal(qty_bids_c_l_ETHRUB) 
	price_asks_g_ETHRUB = Decimal(price_asks_c_l_ETHRUB) 
	qty_asks_g_ETHRUB = Decimal(qty_asks_c_l_ETHRUB) 


def loop_ETHRUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ethrub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETHRUB) 
	ws.run_forever() 


Thread(target=loop_ETHRUB).start() 
symbol_g_ETHTRY = 'ETHTRY' 
price_bids_g_ETHTRY = Decimal('0.0') 
qty_bids_g_ETHTRY = Decimal('0.0') 
price_asks_g_ETHTRY = Decimal('0.0') 
qty_asks_g_ETHTRY = Decimal('0.0') 
stepSize_g_ETHTRY = Decimal('0.0001') 


def on_message_ETHTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETHTRY = 'ETHTRY' 
	price_bids_c_l_ETHTRY = data['b'] 
	qty_bids_c_l_ETHTRY = data['B'] 
	price_asks_c_l_ETHTRY = data['a'] 
	qty_asks_c_l_ETHTRY = data['A'] 

	global symbol_g_ETHTRY 
	global price_bids_g_ETHTRY 
	global qty_bids_g_ETHTRY 
	global price_asks_g_ETHTRY 
	global qty_asks_g_ETHTRY 

	symbol_g_ETHTRY = symbol_c_l_ETHTRY 
	price_bids_g_ETHTRY = Decimal(price_bids_c_l_ETHTRY) 
	qty_bids_g_ETHTRY = Decimal(qty_bids_c_l_ETHTRY) 
	price_asks_g_ETHTRY = Decimal(price_asks_c_l_ETHTRY) 
	qty_asks_g_ETHTRY = Decimal(qty_asks_c_l_ETHTRY) 


def loop_ETHTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ethtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETHTRY) 
	ws.run_forever() 


Thread(target=loop_ETHTRY).start() 
symbol_g_ETHBIDR = 'ETHBIDR' 
price_bids_g_ETHBIDR = Decimal('0.0') 
qty_bids_g_ETHBIDR = Decimal('0.0') 
price_asks_g_ETHBIDR = Decimal('0.0') 
qty_asks_g_ETHBIDR = Decimal('0.0') 
stepSize_g_ETHBIDR = Decimal('0.0001') 


def on_message_ETHBIDR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETHBIDR = 'ETHBIDR' 
	price_bids_c_l_ETHBIDR = data['b'] 
	qty_bids_c_l_ETHBIDR = data['B'] 
	price_asks_c_l_ETHBIDR = data['a'] 
	qty_asks_c_l_ETHBIDR = data['A'] 

	global symbol_g_ETHBIDR 
	global price_bids_g_ETHBIDR 
	global qty_bids_g_ETHBIDR 
	global price_asks_g_ETHBIDR 
	global qty_asks_g_ETHBIDR 

	symbol_g_ETHBIDR = symbol_c_l_ETHBIDR 
	price_bids_g_ETHBIDR = Decimal(price_bids_c_l_ETHBIDR) 
	qty_bids_g_ETHBIDR = Decimal(qty_bids_c_l_ETHBIDR) 
	price_asks_g_ETHBIDR = Decimal(price_asks_c_l_ETHBIDR) 
	qty_asks_g_ETHBIDR = Decimal(qty_asks_c_l_ETHBIDR) 


def loop_ETHBIDR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ethbidr@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETHBIDR) 
	ws.run_forever() 


Thread(target=loop_ETHBIDR).start() 
symbol_g_ETHDAI = 'ETHDAI' 
price_bids_g_ETHDAI = Decimal('0.0') 
qty_bids_g_ETHDAI = Decimal('0.0') 
price_asks_g_ETHDAI = Decimal('0.0') 
qty_asks_g_ETHDAI = Decimal('0.0') 
stepSize_g_ETHDAI = Decimal('0.0001') 


def on_message_ETHDAI(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETHDAI = 'ETHDAI' 
	price_bids_c_l_ETHDAI = data['b'] 
	qty_bids_c_l_ETHDAI = data['B'] 
	price_asks_c_l_ETHDAI = data['a'] 
	qty_asks_c_l_ETHDAI = data['A'] 

	global symbol_g_ETHDAI 
	global price_bids_g_ETHDAI 
	global qty_bids_g_ETHDAI 
	global price_asks_g_ETHDAI 
	global qty_asks_g_ETHDAI 

	symbol_g_ETHDAI = symbol_c_l_ETHDAI 
	price_bids_g_ETHDAI = Decimal(price_bids_c_l_ETHDAI) 
	qty_bids_g_ETHDAI = Decimal(qty_bids_c_l_ETHDAI) 
	price_asks_g_ETHDAI = Decimal(price_asks_c_l_ETHDAI) 
	qty_asks_g_ETHDAI = Decimal(qty_asks_c_l_ETHDAI) 


def loop_ETHDAI(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ethdai@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETHDAI) 
	ws.run_forever() 


Thread(target=loop_ETHDAI).start() 
symbol_g_ETHBRL = 'ETHBRL' 
price_bids_g_ETHBRL = Decimal('0.0') 
qty_bids_g_ETHBRL = Decimal('0.0') 
price_asks_g_ETHBRL = Decimal('0.0') 
qty_asks_g_ETHBRL = Decimal('0.0') 
stepSize_g_ETHBRL = Decimal('0.0001') 


def on_message_ETHBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETHBRL = 'ETHBRL' 
	price_bids_c_l_ETHBRL = data['b'] 
	qty_bids_c_l_ETHBRL = data['B'] 
	price_asks_c_l_ETHBRL = data['a'] 
	qty_asks_c_l_ETHBRL = data['A'] 

	global symbol_g_ETHBRL 
	global price_bids_g_ETHBRL 
	global qty_bids_g_ETHBRL 
	global price_asks_g_ETHBRL 
	global qty_asks_g_ETHBRL 

	symbol_g_ETHBRL = symbol_c_l_ETHBRL 
	price_bids_g_ETHBRL = Decimal(price_bids_c_l_ETHBRL) 
	qty_bids_g_ETHBRL = Decimal(qty_bids_c_l_ETHBRL) 
	price_asks_g_ETHBRL = Decimal(price_asks_c_l_ETHBRL) 
	qty_asks_g_ETHBRL = Decimal(qty_asks_c_l_ETHBRL) 


def loop_ETHBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ethbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETHBRL) 
	ws.run_forever() 


Thread(target=loop_ETHBRL).start() 
symbol_g_ETHUAH = 'ETHUAH' 
price_bids_g_ETHUAH = Decimal('0.0') 
qty_bids_g_ETHUAH = Decimal('0.0') 
price_asks_g_ETHUAH = Decimal('0.0') 
qty_asks_g_ETHUAH = Decimal('0.0') 
stepSize_g_ETHUAH = Decimal('0.0001') 


def on_message_ETHUAH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETHUAH = 'ETHUAH' 
	price_bids_c_l_ETHUAH = data['b'] 
	qty_bids_c_l_ETHUAH = data['B'] 
	price_asks_c_l_ETHUAH = data['a'] 
	qty_asks_c_l_ETHUAH = data['A'] 

	global symbol_g_ETHUAH 
	global price_bids_g_ETHUAH 
	global qty_bids_g_ETHUAH 
	global price_asks_g_ETHUAH 
	global qty_asks_g_ETHUAH 

	symbol_g_ETHUAH = symbol_c_l_ETHUAH 
	price_bids_g_ETHUAH = Decimal(price_bids_c_l_ETHUAH) 
	qty_bids_g_ETHUAH = Decimal(qty_bids_c_l_ETHUAH) 
	price_asks_g_ETHUAH = Decimal(price_asks_c_l_ETHUAH) 
	qty_asks_g_ETHUAH = Decimal(qty_asks_c_l_ETHUAH) 


def loop_ETHUAH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ethuah@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETHUAH) 
	ws.run_forever() 


Thread(target=loop_ETHUAH).start() 
symbol_g_BNBRUB = 'BNBRUB' 
price_bids_g_BNBRUB = Decimal('0.0') 
qty_bids_g_BNBRUB = Decimal('0.0') 
price_asks_g_BNBRUB = Decimal('0.0') 
qty_asks_g_BNBRUB = Decimal('0.0') 
stepSize_g_BNBRUB = Decimal('0.001') 


def on_message_BNBRUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNBRUB = 'BNBRUB' 
	price_bids_c_l_BNBRUB = data['b'] 
	qty_bids_c_l_BNBRUB = data['B'] 
	price_asks_c_l_BNBRUB = data['a'] 
	qty_asks_c_l_BNBRUB = data['A'] 

	global symbol_g_BNBRUB 
	global price_bids_g_BNBRUB 
	global qty_bids_g_BNBRUB 
	global price_asks_g_BNBRUB 
	global qty_asks_g_BNBRUB 

	symbol_g_BNBRUB = symbol_c_l_BNBRUB 
	price_bids_g_BNBRUB = Decimal(price_bids_c_l_BNBRUB) 
	qty_bids_g_BNBRUB = Decimal(qty_bids_c_l_BNBRUB) 
	price_asks_g_BNBRUB = Decimal(price_asks_c_l_BNBRUB) 
	qty_asks_g_BNBRUB = Decimal(qty_asks_c_l_BNBRUB) 


def loop_BNBRUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnbrub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNBRUB) 
	ws.run_forever() 


Thread(target=loop_BNBRUB).start() 
symbol_g_BNBTRY = 'BNBTRY' 
price_bids_g_BNBTRY = Decimal('0.0') 
qty_bids_g_BNBTRY = Decimal('0.0') 
price_asks_g_BNBTRY = Decimal('0.0') 
qty_asks_g_BNBTRY = Decimal('0.0') 
stepSize_g_BNBTRY = Decimal('0.001') 


def on_message_BNBTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNBTRY = 'BNBTRY' 
	price_bids_c_l_BNBTRY = data['b'] 
	qty_bids_c_l_BNBTRY = data['B'] 
	price_asks_c_l_BNBTRY = data['a'] 
	qty_asks_c_l_BNBTRY = data['A'] 

	global symbol_g_BNBTRY 
	global price_bids_g_BNBTRY 
	global qty_bids_g_BNBTRY 
	global price_asks_g_BNBTRY 
	global qty_asks_g_BNBTRY 

	symbol_g_BNBTRY = symbol_c_l_BNBTRY 
	price_bids_g_BNBTRY = Decimal(price_bids_c_l_BNBTRY) 
	qty_bids_g_BNBTRY = Decimal(qty_bids_c_l_BNBTRY) 
	price_asks_g_BNBTRY = Decimal(price_asks_c_l_BNBTRY) 
	qty_asks_g_BNBTRY = Decimal(qty_asks_c_l_BNBTRY) 


def loop_BNBTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnbtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNBTRY) 
	ws.run_forever() 


Thread(target=loop_BNBTRY).start() 
symbol_g_BNBBIDR = 'BNBBIDR' 
price_bids_g_BNBBIDR = Decimal('0.0') 
qty_bids_g_BNBBIDR = Decimal('0.0') 
price_asks_g_BNBBIDR = Decimal('0.0') 
qty_asks_g_BNBBIDR = Decimal('0.0') 
stepSize_g_BNBBIDR = Decimal('0.001') 


def on_message_BNBBIDR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNBBIDR = 'BNBBIDR' 
	price_bids_c_l_BNBBIDR = data['b'] 
	qty_bids_c_l_BNBBIDR = data['B'] 
	price_asks_c_l_BNBBIDR = data['a'] 
	qty_asks_c_l_BNBBIDR = data['A'] 

	global symbol_g_BNBBIDR 
	global price_bids_g_BNBBIDR 
	global qty_bids_g_BNBBIDR 
	global price_asks_g_BNBBIDR 
	global qty_asks_g_BNBBIDR 

	symbol_g_BNBBIDR = symbol_c_l_BNBBIDR 
	price_bids_g_BNBBIDR = Decimal(price_bids_c_l_BNBBIDR) 
	qty_bids_g_BNBBIDR = Decimal(qty_bids_c_l_BNBBIDR) 
	price_asks_g_BNBBIDR = Decimal(price_asks_c_l_BNBBIDR) 
	qty_asks_g_BNBBIDR = Decimal(qty_asks_c_l_BNBBIDR) 


def loop_BNBBIDR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnbbidr@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNBBIDR) 
	ws.run_forever() 


Thread(target=loop_BNBBIDR).start() 
symbol_g_BNBDAI = 'BNBDAI' 
price_bids_g_BNBDAI = Decimal('0.0') 
qty_bids_g_BNBDAI = Decimal('0.0') 
price_asks_g_BNBDAI = Decimal('0.0') 
qty_asks_g_BNBDAI = Decimal('0.0') 
stepSize_g_BNBDAI = Decimal('0.001') 


def on_message_BNBDAI(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNBDAI = 'BNBDAI' 
	price_bids_c_l_BNBDAI = data['b'] 
	qty_bids_c_l_BNBDAI = data['B'] 
	price_asks_c_l_BNBDAI = data['a'] 
	qty_asks_c_l_BNBDAI = data['A'] 

	global symbol_g_BNBDAI 
	global price_bids_g_BNBDAI 
	global qty_bids_g_BNBDAI 
	global price_asks_g_BNBDAI 
	global qty_asks_g_BNBDAI 

	symbol_g_BNBDAI = symbol_c_l_BNBDAI 
	price_bids_g_BNBDAI = Decimal(price_bids_c_l_BNBDAI) 
	qty_bids_g_BNBDAI = Decimal(qty_bids_c_l_BNBDAI) 
	price_asks_g_BNBDAI = Decimal(price_asks_c_l_BNBDAI) 
	qty_asks_g_BNBDAI = Decimal(qty_asks_c_l_BNBDAI) 


def loop_BNBDAI(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnbdai@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNBDAI) 
	ws.run_forever() 


Thread(target=loop_BNBDAI).start() 
symbol_g_BNBBRL = 'BNBBRL' 
price_bids_g_BNBBRL = Decimal('0.0') 
qty_bids_g_BNBBRL = Decimal('0.0') 
price_asks_g_BNBBRL = Decimal('0.0') 
qty_asks_g_BNBBRL = Decimal('0.0') 
stepSize_g_BNBBRL = Decimal('0.001') 


def on_message_BNBBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNBBRL = 'BNBBRL' 
	price_bids_c_l_BNBBRL = data['b'] 
	qty_bids_c_l_BNBBRL = data['B'] 
	price_asks_c_l_BNBBRL = data['a'] 
	qty_asks_c_l_BNBBRL = data['A'] 

	global symbol_g_BNBBRL 
	global price_bids_g_BNBBRL 
	global qty_bids_g_BNBBRL 
	global price_asks_g_BNBBRL 
	global qty_asks_g_BNBBRL 

	symbol_g_BNBBRL = symbol_c_l_BNBBRL 
	price_bids_g_BNBBRL = Decimal(price_bids_c_l_BNBBRL) 
	qty_bids_g_BNBBRL = Decimal(qty_bids_c_l_BNBBRL) 
	price_asks_g_BNBBRL = Decimal(price_asks_c_l_BNBBRL) 
	qty_asks_g_BNBBRL = Decimal(qty_asks_c_l_BNBBRL) 


def loop_BNBBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnbbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNBBRL) 
	ws.run_forever() 


Thread(target=loop_BNBBRL).start() 
symbol_g_BNBUAH = 'BNBUAH' 
price_bids_g_BNBUAH = Decimal('0.0') 
qty_bids_g_BNBUAH = Decimal('0.0') 
price_asks_g_BNBUAH = Decimal('0.0') 
qty_asks_g_BNBUAH = Decimal('0.0') 
stepSize_g_BNBUAH = Decimal('0.001') 


def on_message_BNBUAH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNBUAH = 'BNBUAH' 
	price_bids_c_l_BNBUAH = data['b'] 
	qty_bids_c_l_BNBUAH = data['B'] 
	price_asks_c_l_BNBUAH = data['a'] 
	qty_asks_c_l_BNBUAH = data['A'] 

	global symbol_g_BNBUAH 
	global price_bids_g_BNBUAH 
	global qty_bids_g_BNBUAH 
	global price_asks_g_BNBUAH 
	global qty_asks_g_BNBUAH 

	symbol_g_BNBUAH = symbol_c_l_BNBUAH 
	price_bids_g_BNBUAH = Decimal(price_bids_c_l_BNBUAH) 
	qty_bids_g_BNBUAH = Decimal(qty_bids_c_l_BNBUAH) 
	price_asks_g_BNBUAH = Decimal(price_asks_c_l_BNBUAH) 
	qty_asks_g_BNBUAH = Decimal(qty_asks_c_l_BNBUAH) 


def loop_BNBUAH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnbuah@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNBUAH) 
	ws.run_forever() 


Thread(target=loop_BNBUAH).start() 
symbol_g_NEOTRY = 'NEOTRY' 
price_bids_g_NEOTRY = Decimal('0.0') 
qty_bids_g_NEOTRY = Decimal('0.0') 
price_asks_g_NEOTRY = Decimal('0.0') 
qty_asks_g_NEOTRY = Decimal('0.0') 
stepSize_g_NEOTRY = Decimal('0.01') 


def on_message_NEOTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEOTRY = 'NEOTRY' 
	price_bids_c_l_NEOTRY = data['b'] 
	qty_bids_c_l_NEOTRY = data['B'] 
	price_asks_c_l_NEOTRY = data['a'] 
	qty_asks_c_l_NEOTRY = data['A'] 

	global symbol_g_NEOTRY 
	global price_bids_g_NEOTRY 
	global qty_bids_g_NEOTRY 
	global price_asks_g_NEOTRY 
	global qty_asks_g_NEOTRY 

	symbol_g_NEOTRY = symbol_c_l_NEOTRY 
	price_bids_g_NEOTRY = Decimal(price_bids_c_l_NEOTRY) 
	qty_bids_g_NEOTRY = Decimal(qty_bids_c_l_NEOTRY) 
	price_asks_g_NEOTRY = Decimal(price_asks_c_l_NEOTRY) 
	qty_asks_g_NEOTRY = Decimal(qty_asks_c_l_NEOTRY) 


def loop_NEOTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/neotry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEOTRY) 
	ws.run_forever() 


Thread(target=loop_NEOTRY).start() 
symbol_g_NEORUB = 'NEORUB' 
price_bids_g_NEORUB = Decimal('0.0') 
qty_bids_g_NEORUB = Decimal('0.0') 
price_asks_g_NEORUB = Decimal('0.0') 
qty_asks_g_NEORUB = Decimal('0.0') 
stepSize_g_NEORUB = Decimal('0.001') 


def on_message_NEORUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEORUB = 'NEORUB' 
	price_bids_c_l_NEORUB = data['b'] 
	qty_bids_c_l_NEORUB = data['B'] 
	price_asks_c_l_NEORUB = data['a'] 
	qty_asks_c_l_NEORUB = data['A'] 

	global symbol_g_NEORUB 
	global price_bids_g_NEORUB 
	global qty_bids_g_NEORUB 
	global price_asks_g_NEORUB 
	global qty_asks_g_NEORUB 

	symbol_g_NEORUB = symbol_c_l_NEORUB 
	price_bids_g_NEORUB = Decimal(price_bids_c_l_NEORUB) 
	qty_bids_g_NEORUB = Decimal(qty_bids_c_l_NEORUB) 
	price_asks_g_NEORUB = Decimal(price_asks_c_l_NEORUB) 
	qty_asks_g_NEORUB = Decimal(qty_asks_c_l_NEORUB) 


def loop_NEORUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/neorub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEORUB) 
	ws.run_forever() 


Thread(target=loop_NEORUB).start() 
symbol_g_LTCRUB = 'LTCRUB' 
price_bids_g_LTCRUB = Decimal('0.0') 
qty_bids_g_LTCRUB = Decimal('0.0') 
price_asks_g_LTCRUB = Decimal('0.0') 
qty_asks_g_LTCRUB = Decimal('0.0') 
stepSize_g_LTCRUB = Decimal('0.001') 


def on_message_LTCRUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LTCRUB = 'LTCRUB' 
	price_bids_c_l_LTCRUB = data['b'] 
	qty_bids_c_l_LTCRUB = data['B'] 
	price_asks_c_l_LTCRUB = data['a'] 
	qty_asks_c_l_LTCRUB = data['A'] 

	global symbol_g_LTCRUB 
	global price_bids_g_LTCRUB 
	global qty_bids_g_LTCRUB 
	global price_asks_g_LTCRUB 
	global qty_asks_g_LTCRUB 

	symbol_g_LTCRUB = symbol_c_l_LTCRUB 
	price_bids_g_LTCRUB = Decimal(price_bids_c_l_LTCRUB) 
	qty_bids_g_LTCRUB = Decimal(qty_bids_c_l_LTCRUB) 
	price_asks_g_LTCRUB = Decimal(price_asks_c_l_LTCRUB) 
	qty_asks_g_LTCRUB = Decimal(qty_asks_c_l_LTCRUB) 


def loop_LTCRUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ltcrub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LTCRUB) 
	ws.run_forever() 


Thread(target=loop_LTCRUB).start() 
symbol_g_LTCBRL = 'LTCBRL' 
price_bids_g_LTCBRL = Decimal('0.0') 
qty_bids_g_LTCBRL = Decimal('0.0') 
price_asks_g_LTCBRL = Decimal('0.0') 
qty_asks_g_LTCBRL = Decimal('0.0') 
stepSize_g_LTCBRL = Decimal('0.001') 


def on_message_LTCBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LTCBRL = 'LTCBRL' 
	price_bids_c_l_LTCBRL = data['b'] 
	qty_bids_c_l_LTCBRL = data['B'] 
	price_asks_c_l_LTCBRL = data['a'] 
	qty_asks_c_l_LTCBRL = data['A'] 

	global symbol_g_LTCBRL 
	global price_bids_g_LTCBRL 
	global qty_bids_g_LTCBRL 
	global price_asks_g_LTCBRL 
	global qty_asks_g_LTCBRL 

	symbol_g_LTCBRL = symbol_c_l_LTCBRL 
	price_bids_g_LTCBRL = Decimal(price_bids_c_l_LTCBRL) 
	qty_bids_g_LTCBRL = Decimal(qty_bids_c_l_LTCBRL) 
	price_asks_g_LTCBRL = Decimal(price_asks_c_l_LTCBRL) 
	qty_asks_g_LTCBRL = Decimal(qty_asks_c_l_LTCBRL) 


def loop_LTCBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ltcbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LTCBRL) 
	ws.run_forever() 


Thread(target=loop_LTCBRL).start() 
symbol_g_LTCUAH = 'LTCUAH' 
price_bids_g_LTCUAH = Decimal('0.0') 
qty_bids_g_LTCUAH = Decimal('0.0') 
price_asks_g_LTCUAH = Decimal('0.0') 
qty_asks_g_LTCUAH = Decimal('0.0') 
stepSize_g_LTCUAH = Decimal('0.001') 


def on_message_LTCUAH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LTCUAH = 'LTCUAH' 
	price_bids_c_l_LTCUAH = data['b'] 
	qty_bids_c_l_LTCUAH = data['B'] 
	price_asks_c_l_LTCUAH = data['a'] 
	qty_asks_c_l_LTCUAH = data['A'] 

	global symbol_g_LTCUAH 
	global price_bids_g_LTCUAH 
	global qty_bids_g_LTCUAH 
	global price_asks_g_LTCUAH 
	global qty_asks_g_LTCUAH 

	symbol_g_LTCUAH = symbol_c_l_LTCUAH 
	price_bids_g_LTCUAH = Decimal(price_bids_c_l_LTCUAH) 
	qty_bids_g_LTCUAH = Decimal(qty_bids_c_l_LTCUAH) 
	price_asks_g_LTCUAH = Decimal(price_asks_c_l_LTCUAH) 
	qty_asks_g_LTCUAH = Decimal(qty_asks_c_l_LTCUAH) 


def loop_LTCUAH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ltcuah@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LTCUAH) 
	ws.run_forever() 


Thread(target=loop_LTCUAH).start() 
symbol_g_ADATRY = 'ADATRY' 
price_bids_g_ADATRY = Decimal('0.0') 
qty_bids_g_ADATRY = Decimal('0.0') 
price_asks_g_ADATRY = Decimal('0.0') 
qty_asks_g_ADATRY = Decimal('0.0') 
stepSize_g_ADATRY = Decimal('0.1') 


def on_message_ADATRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADATRY = 'ADATRY' 
	price_bids_c_l_ADATRY = data['b'] 
	qty_bids_c_l_ADATRY = data['B'] 
	price_asks_c_l_ADATRY = data['a'] 
	qty_asks_c_l_ADATRY = data['A'] 

	global symbol_g_ADATRY 
	global price_bids_g_ADATRY 
	global qty_bids_g_ADATRY 
	global price_asks_g_ADATRY 
	global qty_asks_g_ADATRY 

	symbol_g_ADATRY = symbol_c_l_ADATRY 
	price_bids_g_ADATRY = Decimal(price_bids_c_l_ADATRY) 
	qty_bids_g_ADATRY = Decimal(qty_bids_c_l_ADATRY) 
	price_asks_g_ADATRY = Decimal(price_asks_c_l_ADATRY) 
	qty_asks_g_ADATRY = Decimal(qty_asks_c_l_ADATRY) 


def loop_ADATRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adatry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADATRY) 
	ws.run_forever() 


Thread(target=loop_ADATRY).start() 
symbol_g_ADABRL = 'ADABRL' 
price_bids_g_ADABRL = Decimal('0.0') 
qty_bids_g_ADABRL = Decimal('0.0') 
price_asks_g_ADABRL = Decimal('0.0') 
qty_asks_g_ADABRL = Decimal('0.0') 
stepSize_g_ADABRL = Decimal('0.1') 


def on_message_ADABRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADABRL = 'ADABRL' 
	price_bids_c_l_ADABRL = data['b'] 
	qty_bids_c_l_ADABRL = data['B'] 
	price_asks_c_l_ADABRL = data['a'] 
	qty_asks_c_l_ADABRL = data['A'] 

	global symbol_g_ADABRL 
	global price_bids_g_ADABRL 
	global qty_bids_g_ADABRL 
	global price_asks_g_ADABRL 
	global qty_asks_g_ADABRL 

	symbol_g_ADABRL = symbol_c_l_ADABRL 
	price_bids_g_ADABRL = Decimal(price_bids_c_l_ADABRL) 
	qty_bids_g_ADABRL = Decimal(qty_bids_c_l_ADABRL) 
	price_asks_g_ADABRL = Decimal(price_asks_c_l_ADABRL) 
	qty_asks_g_ADABRL = Decimal(qty_asks_c_l_ADABRL) 


def loop_ADABRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adabrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADABRL) 
	ws.run_forever() 


Thread(target=loop_ADABRL).start() 
symbol_g_ADARUB = 'ADARUB' 
price_bids_g_ADARUB = Decimal('0.0') 
qty_bids_g_ADARUB = Decimal('0.0') 
price_asks_g_ADARUB = Decimal('0.0') 
qty_asks_g_ADARUB = Decimal('0.0') 
stepSize_g_ADARUB = Decimal('0.1') 


def on_message_ADARUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADARUB = 'ADARUB' 
	price_bids_c_l_ADARUB = data['b'] 
	qty_bids_c_l_ADARUB = data['B'] 
	price_asks_c_l_ADARUB = data['a'] 
	qty_asks_c_l_ADARUB = data['A'] 

	global symbol_g_ADARUB 
	global price_bids_g_ADARUB 
	global qty_bids_g_ADARUB 
	global price_asks_g_ADARUB 
	global qty_asks_g_ADARUB 

	symbol_g_ADARUB = symbol_c_l_ADARUB 
	price_bids_g_ADARUB = Decimal(price_bids_c_l_ADARUB) 
	qty_bids_g_ADARUB = Decimal(qty_bids_c_l_ADARUB) 
	price_asks_g_ADARUB = Decimal(price_asks_c_l_ADARUB) 
	qty_asks_g_ADARUB = Decimal(qty_asks_c_l_ADARUB) 


def loop_ADARUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adarub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADARUB) 
	ws.run_forever() 


Thread(target=loop_ADARUB).start() 
symbol_g_ADABIDR = 'ADABIDR' 
price_bids_g_ADABIDR = Decimal('0.0') 
qty_bids_g_ADABIDR = Decimal('0.0') 
price_asks_g_ADABIDR = Decimal('0.0') 
qty_asks_g_ADABIDR = Decimal('0.0') 
stepSize_g_ADABIDR = Decimal('0.1') 


def on_message_ADABIDR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADABIDR = 'ADABIDR' 
	price_bids_c_l_ADABIDR = data['b'] 
	qty_bids_c_l_ADABIDR = data['B'] 
	price_asks_c_l_ADABIDR = data['a'] 
	qty_asks_c_l_ADABIDR = data['A'] 

	global symbol_g_ADABIDR 
	global price_bids_g_ADABIDR 
	global qty_bids_g_ADABIDR 
	global price_asks_g_ADABIDR 
	global qty_asks_g_ADABIDR 

	symbol_g_ADABIDR = symbol_c_l_ADABIDR 
	price_bids_g_ADABIDR = Decimal(price_bids_c_l_ADABIDR) 
	qty_bids_g_ADABIDR = Decimal(qty_bids_c_l_ADABIDR) 
	price_asks_g_ADABIDR = Decimal(price_asks_c_l_ADABIDR) 
	qty_asks_g_ADABIDR = Decimal(qty_asks_c_l_ADABIDR) 


def loop_ADABIDR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adabidr@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADABIDR) 
	ws.run_forever() 


Thread(target=loop_ADABIDR).start() 
symbol_g_XRPRUB = 'XRPRUB' 
price_bids_g_XRPRUB = Decimal('0.0') 
qty_bids_g_XRPRUB = Decimal('0.0') 
price_asks_g_XRPRUB = Decimal('0.0') 
qty_asks_g_XRPRUB = Decimal('0.0') 
stepSize_g_XRPRUB = Decimal('1.0') 


def on_message_XRPRUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XRPRUB = 'XRPRUB' 
	price_bids_c_l_XRPRUB = data['b'] 
	qty_bids_c_l_XRPRUB = data['B'] 
	price_asks_c_l_XRPRUB = data['a'] 
	qty_asks_c_l_XRPRUB = data['A'] 

	global symbol_g_XRPRUB 
	global price_bids_g_XRPRUB 
	global qty_bids_g_XRPRUB 
	global price_asks_g_XRPRUB 
	global qty_asks_g_XRPRUB 

	symbol_g_XRPRUB = symbol_c_l_XRPRUB 
	price_bids_g_XRPRUB = Decimal(price_bids_c_l_XRPRUB) 
	qty_bids_g_XRPRUB = Decimal(qty_bids_c_l_XRPRUB) 
	price_asks_g_XRPRUB = Decimal(price_asks_c_l_XRPRUB) 
	qty_asks_g_XRPRUB = Decimal(qty_asks_c_l_XRPRUB) 


def loop_XRPRUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xrprub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XRPRUB) 
	ws.run_forever() 


Thread(target=loop_XRPRUB).start() 
symbol_g_XRPTRY = 'XRPTRY' 
price_bids_g_XRPTRY = Decimal('0.0') 
qty_bids_g_XRPTRY = Decimal('0.0') 
price_asks_g_XRPTRY = Decimal('0.0') 
qty_asks_g_XRPTRY = Decimal('0.0') 
stepSize_g_XRPTRY = Decimal('1.0') 


def on_message_XRPTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XRPTRY = 'XRPTRY' 
	price_bids_c_l_XRPTRY = data['b'] 
	qty_bids_c_l_XRPTRY = data['B'] 
	price_asks_c_l_XRPTRY = data['a'] 
	qty_asks_c_l_XRPTRY = data['A'] 

	global symbol_g_XRPTRY 
	global price_bids_g_XRPTRY 
	global qty_bids_g_XRPTRY 
	global price_asks_g_XRPTRY 
	global qty_asks_g_XRPTRY 

	symbol_g_XRPTRY = symbol_c_l_XRPTRY 
	price_bids_g_XRPTRY = Decimal(price_bids_c_l_XRPTRY) 
	qty_bids_g_XRPTRY = Decimal(qty_bids_c_l_XRPTRY) 
	price_asks_g_XRPTRY = Decimal(price_asks_c_l_XRPTRY) 
	qty_asks_g_XRPTRY = Decimal(qty_asks_c_l_XRPTRY) 


def loop_XRPTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xrptry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XRPTRY) 
	ws.run_forever() 


Thread(target=loop_XRPTRY).start() 
symbol_g_XRPBRL = 'XRPBRL' 
price_bids_g_XRPBRL = Decimal('0.0') 
qty_bids_g_XRPBRL = Decimal('0.0') 
price_asks_g_XRPBRL = Decimal('0.0') 
qty_asks_g_XRPBRL = Decimal('0.0') 
stepSize_g_XRPBRL = Decimal('1.0') 


def on_message_XRPBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XRPBRL = 'XRPBRL' 
	price_bids_c_l_XRPBRL = data['b'] 
	qty_bids_c_l_XRPBRL = data['B'] 
	price_asks_c_l_XRPBRL = data['a'] 
	qty_asks_c_l_XRPBRL = data['A'] 

	global symbol_g_XRPBRL 
	global price_bids_g_XRPBRL 
	global qty_bids_g_XRPBRL 
	global price_asks_g_XRPBRL 
	global qty_asks_g_XRPBRL 

	symbol_g_XRPBRL = symbol_c_l_XRPBRL 
	price_bids_g_XRPBRL = Decimal(price_bids_c_l_XRPBRL) 
	qty_bids_g_XRPBRL = Decimal(qty_bids_c_l_XRPBRL) 
	price_asks_g_XRPBRL = Decimal(price_asks_c_l_XRPBRL) 
	qty_asks_g_XRPBRL = Decimal(qty_asks_c_l_XRPBRL) 


def loop_XRPBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xrpbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XRPBRL) 
	ws.run_forever() 


Thread(target=loop_XRPBRL).start() 
symbol_g_XRPBIDR = 'XRPBIDR' 
price_bids_g_XRPBIDR = Decimal('0.0') 
qty_bids_g_XRPBIDR = Decimal('0.0') 
price_asks_g_XRPBIDR = Decimal('0.0') 
qty_asks_g_XRPBIDR = Decimal('0.0') 
stepSize_g_XRPBIDR = Decimal('0.1') 


def on_message_XRPBIDR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XRPBIDR = 'XRPBIDR' 
	price_bids_c_l_XRPBIDR = data['b'] 
	qty_bids_c_l_XRPBIDR = data['B'] 
	price_asks_c_l_XRPBIDR = data['a'] 
	qty_asks_c_l_XRPBIDR = data['A'] 

	global symbol_g_XRPBIDR 
	global price_bids_g_XRPBIDR 
	global qty_bids_g_XRPBIDR 
	global price_asks_g_XRPBIDR 
	global qty_asks_g_XRPBIDR 

	symbol_g_XRPBIDR = symbol_c_l_XRPBIDR 
	price_bids_g_XRPBIDR = Decimal(price_bids_c_l_XRPBIDR) 
	qty_bids_g_XRPBIDR = Decimal(qty_bids_c_l_XRPBIDR) 
	price_asks_g_XRPBIDR = Decimal(price_asks_c_l_XRPBIDR) 
	qty_asks_g_XRPBIDR = Decimal(qty_asks_c_l_XRPBIDR) 


def loop_XRPBIDR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xrpbidr@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XRPBIDR) 
	ws.run_forever() 


Thread(target=loop_XRPBIDR).start() 
symbol_g_EOSTRY = 'EOSTRY' 
price_bids_g_EOSTRY = Decimal('0.0') 
qty_bids_g_EOSTRY = Decimal('0.0') 
price_asks_g_EOSTRY = Decimal('0.0') 
qty_asks_g_EOSTRY = Decimal('0.0') 
stepSize_g_EOSTRY = Decimal('0.1') 


def on_message_EOSTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EOSTRY = 'EOSTRY' 
	price_bids_c_l_EOSTRY = data['b'] 
	qty_bids_c_l_EOSTRY = data['B'] 
	price_asks_c_l_EOSTRY = data['a'] 
	qty_asks_c_l_EOSTRY = data['A'] 

	global symbol_g_EOSTRY 
	global price_bids_g_EOSTRY 
	global qty_bids_g_EOSTRY 
	global price_asks_g_EOSTRY 
	global qty_asks_g_EOSTRY 

	symbol_g_EOSTRY = symbol_c_l_EOSTRY 
	price_bids_g_EOSTRY = Decimal(price_bids_c_l_EOSTRY) 
	qty_bids_g_EOSTRY = Decimal(qty_bids_c_l_EOSTRY) 
	price_asks_g_EOSTRY = Decimal(price_asks_c_l_EOSTRY) 
	qty_asks_g_EOSTRY = Decimal(qty_asks_c_l_EOSTRY) 


def loop_EOSTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/eostry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EOSTRY) 
	ws.run_forever() 


Thread(target=loop_EOSTRY).start() 
symbol_g_XLMTRY = 'XLMTRY' 
price_bids_g_XLMTRY = Decimal('0.0') 
qty_bids_g_XLMTRY = Decimal('0.0') 
price_asks_g_XLMTRY = Decimal('0.0') 
qty_asks_g_XLMTRY = Decimal('0.0') 
stepSize_g_XLMTRY = Decimal('1.0') 


def on_message_XLMTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XLMTRY = 'XLMTRY' 
	price_bids_c_l_XLMTRY = data['b'] 
	qty_bids_c_l_XLMTRY = data['B'] 
	price_asks_c_l_XLMTRY = data['a'] 
	qty_asks_c_l_XLMTRY = data['A'] 

	global symbol_g_XLMTRY 
	global price_bids_g_XLMTRY 
	global qty_bids_g_XLMTRY 
	global price_asks_g_XLMTRY 
	global qty_asks_g_XLMTRY 

	symbol_g_XLMTRY = symbol_c_l_XLMTRY 
	price_bids_g_XLMTRY = Decimal(price_bids_c_l_XLMTRY) 
	qty_bids_g_XLMTRY = Decimal(qty_bids_c_l_XLMTRY) 
	price_asks_g_XLMTRY = Decimal(price_asks_c_l_XLMTRY) 
	qty_asks_g_XLMTRY = Decimal(qty_asks_c_l_XLMTRY) 


def loop_XLMTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xlmtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XLMTRY) 
	ws.run_forever() 


Thread(target=loop_XLMTRY).start() 
symbol_g_ONTTRY = 'ONTTRY' 
price_bids_g_ONTTRY = Decimal('0.0') 
qty_bids_g_ONTTRY = Decimal('0.0') 
price_asks_g_ONTTRY = Decimal('0.0') 
qty_asks_g_ONTTRY = Decimal('0.0') 
stepSize_g_ONTTRY = Decimal('1.0') 


def on_message_ONTTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ONTTRY = 'ONTTRY' 
	price_bids_c_l_ONTTRY = data['b'] 
	qty_bids_c_l_ONTTRY = data['B'] 
	price_asks_c_l_ONTTRY = data['a'] 
	qty_asks_c_l_ONTTRY = data['A'] 

	global symbol_g_ONTTRY 
	global price_bids_g_ONTTRY 
	global qty_bids_g_ONTTRY 
	global price_asks_g_ONTTRY 
	global qty_asks_g_ONTTRY 

	symbol_g_ONTTRY = symbol_c_l_ONTTRY 
	price_bids_g_ONTTRY = Decimal(price_bids_c_l_ONTTRY) 
	qty_bids_g_ONTTRY = Decimal(qty_bids_c_l_ONTTRY) 
	price_asks_g_ONTTRY = Decimal(price_asks_c_l_ONTTRY) 
	qty_asks_g_ONTTRY = Decimal(qty_asks_c_l_ONTTRY) 


def loop_ONTTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/onttry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ONTTRY) 
	ws.run_forever() 


Thread(target=loop_ONTTRY).start() 
symbol_g_TRXTRY = 'TRXTRY' 
price_bids_g_TRXTRY = Decimal('0.0') 
qty_bids_g_TRXTRY = Decimal('0.0') 
price_asks_g_TRXTRY = Decimal('0.0') 
qty_asks_g_TRXTRY = Decimal('0.0') 
stepSize_g_TRXTRY = Decimal('1.0') 


def on_message_TRXTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRXTRY = 'TRXTRY' 
	price_bids_c_l_TRXTRY = data['b'] 
	qty_bids_c_l_TRXTRY = data['B'] 
	price_asks_c_l_TRXTRY = data['a'] 
	qty_asks_c_l_TRXTRY = data['A'] 

	global symbol_g_TRXTRY 
	global price_bids_g_TRXTRY 
	global qty_bids_g_TRXTRY 
	global price_asks_g_TRXTRY 
	global qty_asks_g_TRXTRY 

	symbol_g_TRXTRY = symbol_c_l_TRXTRY 
	price_bids_g_TRXTRY = Decimal(price_bids_c_l_TRXTRY) 
	qty_bids_g_TRXTRY = Decimal(qty_bids_c_l_TRXTRY) 
	price_asks_g_TRXTRY = Decimal(price_asks_c_l_TRXTRY) 
	qty_asks_g_TRXTRY = Decimal(qty_asks_c_l_TRXTRY) 


def loop_TRXTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/trxtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRXTRY) 
	ws.run_forever() 


Thread(target=loop_TRXTRY).start() 
symbol_g_ETCTRY = 'ETCTRY' 
price_bids_g_ETCTRY = Decimal('0.0') 
qty_bids_g_ETCTRY = Decimal('0.0') 
price_asks_g_ETCTRY = Decimal('0.0') 
qty_asks_g_ETCTRY = Decimal('0.0') 
stepSize_g_ETCTRY = Decimal('0.001') 


def on_message_ETCTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETCTRY = 'ETCTRY' 
	price_bids_c_l_ETCTRY = data['b'] 
	qty_bids_c_l_ETCTRY = data['B'] 
	price_asks_c_l_ETCTRY = data['a'] 
	qty_asks_c_l_ETCTRY = data['A'] 

	global symbol_g_ETCTRY 
	global price_bids_g_ETCTRY 
	global qty_bids_g_ETCTRY 
	global price_asks_g_ETCTRY 
	global qty_asks_g_ETCTRY 

	symbol_g_ETCTRY = symbol_c_l_ETCTRY 
	price_bids_g_ETCTRY = Decimal(price_bids_c_l_ETCTRY) 
	qty_bids_g_ETCTRY = Decimal(qty_bids_c_l_ETCTRY) 
	price_asks_g_ETCTRY = Decimal(price_asks_c_l_ETCTRY) 
	qty_asks_g_ETCTRY = Decimal(qty_asks_c_l_ETCTRY) 


def loop_ETCTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/etctry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETCTRY) 
	ws.run_forever() 


Thread(target=loop_ETCTRY).start() 
symbol_g_VETTRY = 'VETTRY' 
price_bids_g_VETTRY = Decimal('0.0') 
qty_bids_g_VETTRY = Decimal('0.0') 
price_asks_g_VETTRY = Decimal('0.0') 
qty_asks_g_VETTRY = Decimal('0.0') 
stepSize_g_VETTRY = Decimal('0.1') 


def on_message_VETTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VETTRY = 'VETTRY' 
	price_bids_c_l_VETTRY = data['b'] 
	qty_bids_c_l_VETTRY = data['B'] 
	price_asks_c_l_VETTRY = data['a'] 
	qty_asks_c_l_VETTRY = data['A'] 

	global symbol_g_VETTRY 
	global price_bids_g_VETTRY 
	global qty_bids_g_VETTRY 
	global price_asks_g_VETTRY 
	global qty_asks_g_VETTRY 

	symbol_g_VETTRY = symbol_c_l_VETTRY 
	price_bids_g_VETTRY = Decimal(price_bids_c_l_VETTRY) 
	qty_bids_g_VETTRY = Decimal(qty_bids_c_l_VETTRY) 
	price_asks_g_VETTRY = Decimal(price_asks_c_l_VETTRY) 
	qty_asks_g_VETTRY = Decimal(qty_asks_c_l_VETTRY) 


def loop_VETTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/vettry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VETTRY) 
	ws.run_forever() 


Thread(target=loop_VETTRY).start() 
symbol_g_LINKTRY = 'LINKTRY' 
price_bids_g_LINKTRY = Decimal('0.0') 
qty_bids_g_LINKTRY = Decimal('0.0') 
price_asks_g_LINKTRY = Decimal('0.0') 
qty_asks_g_LINKTRY = Decimal('0.0') 
stepSize_g_LINKTRY = Decimal('0.01') 


def on_message_LINKTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LINKTRY = 'LINKTRY' 
	price_bids_c_l_LINKTRY = data['b'] 
	qty_bids_c_l_LINKTRY = data['B'] 
	price_asks_c_l_LINKTRY = data['a'] 
	qty_asks_c_l_LINKTRY = data['A'] 

	global symbol_g_LINKTRY 
	global price_bids_g_LINKTRY 
	global qty_bids_g_LINKTRY 
	global price_asks_g_LINKTRY 
	global qty_asks_g_LINKTRY 

	symbol_g_LINKTRY = symbol_c_l_LINKTRY 
	price_bids_g_LINKTRY = Decimal(price_bids_c_l_LINKTRY) 
	qty_bids_g_LINKTRY = Decimal(qty_bids_c_l_LINKTRY) 
	price_asks_g_LINKTRY = Decimal(price_asks_c_l_LINKTRY) 
	qty_asks_g_LINKTRY = Decimal(qty_asks_c_l_LINKTRY) 


def loop_LINKTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/linktry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LINKTRY) 
	ws.run_forever() 


Thread(target=loop_LINKTRY).start() 
symbol_g_LINKBRL = 'LINKBRL' 
price_bids_g_LINKBRL = Decimal('0.0') 
qty_bids_g_LINKBRL = Decimal('0.0') 
price_asks_g_LINKBRL = Decimal('0.0') 
qty_asks_g_LINKBRL = Decimal('0.0') 
stepSize_g_LINKBRL = Decimal('0.01') 


def on_message_LINKBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LINKBRL = 'LINKBRL' 
	price_bids_c_l_LINKBRL = data['b'] 
	qty_bids_c_l_LINKBRL = data['B'] 
	price_asks_c_l_LINKBRL = data['a'] 
	qty_asks_c_l_LINKBRL = data['A'] 

	global symbol_g_LINKBRL 
	global price_bids_g_LINKBRL 
	global qty_bids_g_LINKBRL 
	global price_asks_g_LINKBRL 
	global qty_asks_g_LINKBRL 

	symbol_g_LINKBRL = symbol_c_l_LINKBRL 
	price_bids_g_LINKBRL = Decimal(price_bids_c_l_LINKBRL) 
	qty_bids_g_LINKBRL = Decimal(qty_bids_c_l_LINKBRL) 
	price_asks_g_LINKBRL = Decimal(price_asks_c_l_LINKBRL) 
	qty_asks_g_LINKBRL = Decimal(qty_asks_c_l_LINKBRL) 


def loop_LINKBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/linkbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LINKBRL) 
	ws.run_forever() 


Thread(target=loop_LINKBRL).start() 
symbol_g_WAVESTRY = 'WAVESTRY' 
price_bids_g_WAVESTRY = Decimal('0.0') 
qty_bids_g_WAVESTRY = Decimal('0.0') 
price_asks_g_WAVESTRY = Decimal('0.0') 
qty_asks_g_WAVESTRY = Decimal('0.0') 
stepSize_g_WAVESTRY = Decimal('0.001') 


def on_message_WAVESTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WAVESTRY = 'WAVESTRY' 
	price_bids_c_l_WAVESTRY = data['b'] 
	qty_bids_c_l_WAVESTRY = data['B'] 
	price_asks_c_l_WAVESTRY = data['a'] 
	qty_asks_c_l_WAVESTRY = data['A'] 

	global symbol_g_WAVESTRY 
	global price_bids_g_WAVESTRY 
	global qty_bids_g_WAVESTRY 
	global price_asks_g_WAVESTRY 
	global qty_asks_g_WAVESTRY 

	symbol_g_WAVESTRY = symbol_c_l_WAVESTRY 
	price_bids_g_WAVESTRY = Decimal(price_bids_c_l_WAVESTRY) 
	qty_bids_g_WAVESTRY = Decimal(qty_bids_c_l_WAVESTRY) 
	price_asks_g_WAVESTRY = Decimal(price_asks_c_l_WAVESTRY) 
	qty_asks_g_WAVESTRY = Decimal(qty_asks_c_l_WAVESTRY) 


def loop_WAVESTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wavestry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WAVESTRY) 
	ws.run_forever() 


Thread(target=loop_WAVESTRY).start() 
symbol_g_HOTTRY = 'HOTTRY' 
price_bids_g_HOTTRY = Decimal('0.0') 
qty_bids_g_HOTTRY = Decimal('0.0') 
price_asks_g_HOTTRY = Decimal('0.0') 
qty_asks_g_HOTTRY = Decimal('0.0') 
stepSize_g_HOTTRY = Decimal('1.0') 


def on_message_HOTTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HOTTRY = 'HOTTRY' 
	price_bids_c_l_HOTTRY = data['b'] 
	qty_bids_c_l_HOTTRY = data['B'] 
	price_asks_c_l_HOTTRY = data['a'] 
	qty_asks_c_l_HOTTRY = data['A'] 

	global symbol_g_HOTTRY 
	global price_bids_g_HOTTRY 
	global qty_bids_g_HOTTRY 
	global price_asks_g_HOTTRY 
	global qty_asks_g_HOTTRY 

	symbol_g_HOTTRY = symbol_c_l_HOTTRY 
	price_bids_g_HOTTRY = Decimal(price_bids_c_l_HOTTRY) 
	qty_bids_g_HOTTRY = Decimal(qty_bids_c_l_HOTTRY) 
	price_asks_g_HOTTRY = Decimal(price_asks_c_l_HOTTRY) 
	qty_asks_g_HOTTRY = Decimal(qty_asks_c_l_HOTTRY) 


def loop_HOTTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hottry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HOTTRY) 
	ws.run_forever() 


Thread(target=loop_HOTTRY).start() 
symbol_g_ZILBIDR = 'ZILBIDR' 
price_bids_g_ZILBIDR = Decimal('0.0') 
qty_bids_g_ZILBIDR = Decimal('0.0') 
price_asks_g_ZILBIDR = Decimal('0.0') 
qty_asks_g_ZILBIDR = Decimal('0.0') 
stepSize_g_ZILBIDR = Decimal('1.0') 


def on_message_ZILBIDR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZILBIDR = 'ZILBIDR' 
	price_bids_c_l_ZILBIDR = data['b'] 
	qty_bids_c_l_ZILBIDR = data['B'] 
	price_asks_c_l_ZILBIDR = data['a'] 
	qty_asks_c_l_ZILBIDR = data['A'] 

	global symbol_g_ZILBIDR 
	global price_bids_g_ZILBIDR 
	global qty_bids_g_ZILBIDR 
	global price_asks_g_ZILBIDR 
	global qty_asks_g_ZILBIDR 

	symbol_g_ZILBIDR = symbol_c_l_ZILBIDR 
	price_bids_g_ZILBIDR = Decimal(price_bids_c_l_ZILBIDR) 
	qty_bids_g_ZILBIDR = Decimal(qty_bids_c_l_ZILBIDR) 
	price_asks_g_ZILBIDR = Decimal(price_asks_c_l_ZILBIDR) 
	qty_asks_g_ZILBIDR = Decimal(qty_asks_c_l_ZILBIDR) 


def loop_ZILBIDR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zilbidr@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZILBIDR) 
	ws.run_forever() 


Thread(target=loop_ZILBIDR).start() 
symbol_g_ZILTRY = 'ZILTRY' 
price_bids_g_ZILTRY = Decimal('0.0') 
qty_bids_g_ZILTRY = Decimal('0.0') 
price_asks_g_ZILTRY = Decimal('0.0') 
qty_asks_g_ZILTRY = Decimal('0.0') 
stepSize_g_ZILTRY = Decimal('0.1') 


def on_message_ZILTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZILTRY = 'ZILTRY' 
	price_bids_c_l_ZILTRY = data['b'] 
	qty_bids_c_l_ZILTRY = data['B'] 
	price_asks_c_l_ZILTRY = data['a'] 
	qty_asks_c_l_ZILTRY = data['A'] 

	global symbol_g_ZILTRY 
	global price_bids_g_ZILTRY 
	global qty_bids_g_ZILTRY 
	global price_asks_g_ZILTRY 
	global qty_asks_g_ZILTRY 

	symbol_g_ZILTRY = symbol_c_l_ZILTRY 
	price_bids_g_ZILTRY = Decimal(price_bids_c_l_ZILTRY) 
	qty_bids_g_ZILTRY = Decimal(qty_bids_c_l_ZILTRY) 
	price_asks_g_ZILTRY = Decimal(price_asks_c_l_ZILTRY) 
	qty_asks_g_ZILTRY = Decimal(qty_asks_c_l_ZILTRY) 


def loop_ZILTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ziltry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZILTRY) 
	ws.run_forever() 


Thread(target=loop_ZILTRY).start() 
symbol_g_ENJBRL = 'ENJBRL' 
price_bids_g_ENJBRL = Decimal('0.0') 
qty_bids_g_ENJBRL = Decimal('0.0') 
price_asks_g_ENJBRL = Decimal('0.0') 
qty_asks_g_ENJBRL = Decimal('0.0') 
stepSize_g_ENJBRL = Decimal('0.1') 


def on_message_ENJBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENJBRL = 'ENJBRL' 
	price_bids_c_l_ENJBRL = data['b'] 
	qty_bids_c_l_ENJBRL = data['B'] 
	price_asks_c_l_ENJBRL = data['a'] 
	qty_asks_c_l_ENJBRL = data['A'] 

	global symbol_g_ENJBRL 
	global price_bids_g_ENJBRL 
	global qty_bids_g_ENJBRL 
	global price_asks_g_ENJBRL 
	global qty_asks_g_ENJBRL 

	symbol_g_ENJBRL = symbol_c_l_ENJBRL 
	price_bids_g_ENJBRL = Decimal(price_bids_c_l_ENJBRL) 
	qty_bids_g_ENJBRL = Decimal(qty_bids_c_l_ENJBRL) 
	price_asks_g_ENJBRL = Decimal(price_asks_c_l_ENJBRL) 
	qty_asks_g_ENJBRL = Decimal(qty_asks_c_l_ENJBRL) 


def loop_ENJBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/enjbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENJBRL) 
	ws.run_forever() 


Thread(target=loop_ENJBRL).start() 
symbol_g_ENJTRY = 'ENJTRY' 
price_bids_g_ENJTRY = Decimal('0.0') 
qty_bids_g_ENJTRY = Decimal('0.0') 
price_asks_g_ENJTRY = Decimal('0.0') 
qty_asks_g_ENJTRY = Decimal('0.0') 
stepSize_g_ENJTRY = Decimal('0.01') 


def on_message_ENJTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENJTRY = 'ENJTRY' 
	price_bids_c_l_ENJTRY = data['b'] 
	qty_bids_c_l_ENJTRY = data['B'] 
	price_asks_c_l_ENJTRY = data['a'] 
	qty_asks_c_l_ENJTRY = data['A'] 

	global symbol_g_ENJTRY 
	global price_bids_g_ENJTRY 
	global qty_bids_g_ENJTRY 
	global price_asks_g_ENJTRY 
	global qty_asks_g_ENJTRY 

	symbol_g_ENJTRY = symbol_c_l_ENJTRY 
	price_bids_g_ENJTRY = Decimal(price_bids_c_l_ENJTRY) 
	qty_bids_g_ENJTRY = Decimal(qty_bids_c_l_ENJTRY) 
	price_asks_g_ENJTRY = Decimal(price_asks_c_l_ENJTRY) 
	qty_asks_g_ENJTRY = Decimal(qty_asks_c_l_ENJTRY) 


def loop_ENJTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/enjtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENJTRY) 
	ws.run_forever() 


Thread(target=loop_ENJTRY).start() 
symbol_g_MATICBRL = 'MATICBRL' 
price_bids_g_MATICBRL = Decimal('0.0') 
qty_bids_g_MATICBRL = Decimal('0.0') 
price_asks_g_MATICBRL = Decimal('0.0') 
qty_asks_g_MATICBRL = Decimal('0.0') 
stepSize_g_MATICBRL = Decimal('0.1') 


def on_message_MATICBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MATICBRL = 'MATICBRL' 
	price_bids_c_l_MATICBRL = data['b'] 
	qty_bids_c_l_MATICBRL = data['B'] 
	price_asks_c_l_MATICBRL = data['a'] 
	qty_asks_c_l_MATICBRL = data['A'] 

	global symbol_g_MATICBRL 
	global price_bids_g_MATICBRL 
	global qty_bids_g_MATICBRL 
	global price_asks_g_MATICBRL 
	global qty_asks_g_MATICBRL 

	symbol_g_MATICBRL = symbol_c_l_MATICBRL 
	price_bids_g_MATICBRL = Decimal(price_bids_c_l_MATICBRL) 
	qty_bids_g_MATICBRL = Decimal(qty_bids_c_l_MATICBRL) 
	price_asks_g_MATICBRL = Decimal(price_asks_c_l_MATICBRL) 
	qty_asks_g_MATICBRL = Decimal(qty_asks_c_l_MATICBRL) 


def loop_MATICBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maticbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MATICBRL) 
	ws.run_forever() 


Thread(target=loop_MATICBRL).start() 
symbol_g_MATICBIDR = 'MATICBIDR' 
price_bids_g_MATICBIDR = Decimal('0.0') 
qty_bids_g_MATICBIDR = Decimal('0.0') 
price_asks_g_MATICBIDR = Decimal('0.0') 
qty_asks_g_MATICBIDR = Decimal('0.0') 
stepSize_g_MATICBIDR = Decimal('0.1') 


def on_message_MATICBIDR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MATICBIDR = 'MATICBIDR' 
	price_bids_c_l_MATICBIDR = data['b'] 
	qty_bids_c_l_MATICBIDR = data['B'] 
	price_asks_c_l_MATICBIDR = data['a'] 
	qty_asks_c_l_MATICBIDR = data['A'] 

	global symbol_g_MATICBIDR 
	global price_bids_g_MATICBIDR 
	global qty_bids_g_MATICBIDR 
	global price_asks_g_MATICBIDR 
	global qty_asks_g_MATICBIDR 

	symbol_g_MATICBIDR = symbol_c_l_MATICBIDR 
	price_bids_g_MATICBIDR = Decimal(price_bids_c_l_MATICBIDR) 
	qty_bids_g_MATICBIDR = Decimal(qty_bids_c_l_MATICBIDR) 
	price_asks_g_MATICBIDR = Decimal(price_asks_c_l_MATICBIDR) 
	qty_asks_g_MATICBIDR = Decimal(qty_asks_c_l_MATICBIDR) 


def loop_MATICBIDR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maticbidr@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MATICBIDR) 
	ws.run_forever() 


Thread(target=loop_MATICBIDR).start() 
symbol_g_MATICRUB = 'MATICRUB' 
price_bids_g_MATICRUB = Decimal('0.0') 
qty_bids_g_MATICRUB = Decimal('0.0') 
price_asks_g_MATICRUB = Decimal('0.0') 
qty_asks_g_MATICRUB = Decimal('0.0') 
stepSize_g_MATICRUB = Decimal('0.1') 


def on_message_MATICRUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MATICRUB = 'MATICRUB' 
	price_bids_c_l_MATICRUB = data['b'] 
	qty_bids_c_l_MATICRUB = data['B'] 
	price_asks_c_l_MATICRUB = data['a'] 
	qty_asks_c_l_MATICRUB = data['A'] 

	global symbol_g_MATICRUB 
	global price_bids_g_MATICRUB 
	global qty_bids_g_MATICRUB 
	global price_asks_g_MATICRUB 
	global qty_asks_g_MATICRUB 

	symbol_g_MATICRUB = symbol_c_l_MATICRUB 
	price_bids_g_MATICRUB = Decimal(price_bids_c_l_MATICRUB) 
	qty_bids_g_MATICRUB = Decimal(qty_bids_c_l_MATICRUB) 
	price_asks_g_MATICRUB = Decimal(price_asks_c_l_MATICRUB) 
	qty_asks_g_MATICRUB = Decimal(qty_asks_c_l_MATICRUB) 


def loop_MATICRUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maticrub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MATICRUB) 
	ws.run_forever() 


Thread(target=loop_MATICRUB).start() 
symbol_g_MATICTRY = 'MATICTRY' 
price_bids_g_MATICTRY = Decimal('0.0') 
qty_bids_g_MATICTRY = Decimal('0.0') 
price_asks_g_MATICTRY = Decimal('0.0') 
qty_asks_g_MATICTRY = Decimal('0.0') 
stepSize_g_MATICTRY = Decimal('0.1') 


def on_message_MATICTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MATICTRY = 'MATICTRY' 
	price_bids_c_l_MATICTRY = data['b'] 
	qty_bids_c_l_MATICTRY = data['B'] 
	price_asks_c_l_MATICTRY = data['a'] 
	qty_asks_c_l_MATICTRY = data['A'] 

	global symbol_g_MATICTRY 
	global price_bids_g_MATICTRY 
	global qty_bids_g_MATICTRY 
	global price_asks_g_MATICTRY 
	global qty_asks_g_MATICTRY 

	symbol_g_MATICTRY = symbol_c_l_MATICTRY 
	price_bids_g_MATICTRY = Decimal(price_bids_c_l_MATICTRY) 
	qty_bids_g_MATICTRY = Decimal(qty_bids_c_l_MATICTRY) 
	price_asks_g_MATICTRY = Decimal(price_asks_c_l_MATICTRY) 
	qty_asks_g_MATICTRY = Decimal(qty_asks_c_l_MATICTRY) 


def loop_MATICTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/matictry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MATICTRY) 
	ws.run_forever() 


Thread(target=loop_MATICTRY).start() 
symbol_g_ATOMTRY = 'ATOMTRY' 
price_bids_g_ATOMTRY = Decimal('0.0') 
qty_bids_g_ATOMTRY = Decimal('0.0') 
price_asks_g_ATOMTRY = Decimal('0.0') 
qty_asks_g_ATOMTRY = Decimal('0.0') 
stepSize_g_ATOMTRY = Decimal('0.001') 


def on_message_ATOMTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATOMTRY = 'ATOMTRY' 
	price_bids_c_l_ATOMTRY = data['b'] 
	qty_bids_c_l_ATOMTRY = data['B'] 
	price_asks_c_l_ATOMTRY = data['a'] 
	qty_asks_c_l_ATOMTRY = data['A'] 

	global symbol_g_ATOMTRY 
	global price_bids_g_ATOMTRY 
	global qty_bids_g_ATOMTRY 
	global price_asks_g_ATOMTRY 
	global qty_asks_g_ATOMTRY 

	symbol_g_ATOMTRY = symbol_c_l_ATOMTRY 
	price_bids_g_ATOMTRY = Decimal(price_bids_c_l_ATOMTRY) 
	qty_bids_g_ATOMTRY = Decimal(qty_bids_c_l_ATOMTRY) 
	price_asks_g_ATOMTRY = Decimal(price_asks_c_l_ATOMTRY) 
	qty_asks_g_ATOMTRY = Decimal(qty_asks_c_l_ATOMTRY) 


def loop_ATOMTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atomtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATOMTRY) 
	ws.run_forever() 


Thread(target=loop_ATOMTRY).start() 
symbol_g_ATOMBRL = 'ATOMBRL' 
price_bids_g_ATOMBRL = Decimal('0.0') 
qty_bids_g_ATOMBRL = Decimal('0.0') 
price_asks_g_ATOMBRL = Decimal('0.0') 
qty_asks_g_ATOMBRL = Decimal('0.0') 
stepSize_g_ATOMBRL = Decimal('0.001') 


def on_message_ATOMBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATOMBRL = 'ATOMBRL' 
	price_bids_c_l_ATOMBRL = data['b'] 
	qty_bids_c_l_ATOMBRL = data['B'] 
	price_asks_c_l_ATOMBRL = data['a'] 
	qty_asks_c_l_ATOMBRL = data['A'] 

	global symbol_g_ATOMBRL 
	global price_bids_g_ATOMBRL 
	global qty_bids_g_ATOMBRL 
	global price_asks_g_ATOMBRL 
	global qty_asks_g_ATOMBRL 

	symbol_g_ATOMBRL = symbol_c_l_ATOMBRL 
	price_bids_g_ATOMBRL = Decimal(price_bids_c_l_ATOMBRL) 
	qty_bids_g_ATOMBRL = Decimal(qty_bids_c_l_ATOMBRL) 
	price_asks_g_ATOMBRL = Decimal(price_asks_c_l_ATOMBRL) 
	qty_asks_g_ATOMBRL = Decimal(qty_asks_c_l_ATOMBRL) 


def loop_ATOMBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atombrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATOMBRL) 
	ws.run_forever() 


Thread(target=loop_ATOMBRL).start() 
symbol_g_ONETRY = 'ONETRY' 
price_bids_g_ONETRY = Decimal('0.0') 
qty_bids_g_ONETRY = Decimal('0.0') 
price_asks_g_ONETRY = Decimal('0.0') 
qty_asks_g_ONETRY = Decimal('0.0') 
stepSize_g_ONETRY = Decimal('0.1') 


def on_message_ONETRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ONETRY = 'ONETRY' 
	price_bids_c_l_ONETRY = data['b'] 
	qty_bids_c_l_ONETRY = data['B'] 
	price_asks_c_l_ONETRY = data['a'] 
	qty_asks_c_l_ONETRY = data['A'] 

	global symbol_g_ONETRY 
	global price_bids_g_ONETRY 
	global qty_bids_g_ONETRY 
	global price_asks_g_ONETRY 
	global qty_asks_g_ONETRY 

	symbol_g_ONETRY = symbol_c_l_ONETRY 
	price_bids_g_ONETRY = Decimal(price_bids_c_l_ONETRY) 
	qty_bids_g_ONETRY = Decimal(qty_bids_c_l_ONETRY) 
	price_asks_g_ONETRY = Decimal(price_asks_c_l_ONETRY) 
	qty_asks_g_ONETRY = Decimal(qty_asks_c_l_ONETRY) 


def loop_ONETRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/onetry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ONETRY) 
	ws.run_forever() 


Thread(target=loop_ONETRY).start() 
symbol_g_FTMBRL = 'FTMBRL' 
price_bids_g_FTMBRL = Decimal('0.0') 
qty_bids_g_FTMBRL = Decimal('0.0') 
price_asks_g_FTMBRL = Decimal('0.0') 
qty_asks_g_FTMBRL = Decimal('0.0') 
stepSize_g_FTMBRL = Decimal('0.1') 


def on_message_FTMBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FTMBRL = 'FTMBRL' 
	price_bids_c_l_FTMBRL = data['b'] 
	qty_bids_c_l_FTMBRL = data['B'] 
	price_asks_c_l_FTMBRL = data['a'] 
	qty_asks_c_l_FTMBRL = data['A'] 

	global symbol_g_FTMBRL 
	global price_bids_g_FTMBRL 
	global qty_bids_g_FTMBRL 
	global price_asks_g_FTMBRL 
	global qty_asks_g_FTMBRL 

	symbol_g_FTMBRL = symbol_c_l_FTMBRL 
	price_bids_g_FTMBRL = Decimal(price_bids_c_l_FTMBRL) 
	qty_bids_g_FTMBRL = Decimal(qty_bids_c_l_FTMBRL) 
	price_asks_g_FTMBRL = Decimal(price_asks_c_l_FTMBRL) 
	qty_asks_g_FTMBRL = Decimal(qty_asks_c_l_FTMBRL) 


def loop_FTMBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ftmbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FTMBRL) 
	ws.run_forever() 


Thread(target=loop_FTMBRL).start() 
symbol_g_FTMRUB = 'FTMRUB' 
price_bids_g_FTMRUB = Decimal('0.0') 
qty_bids_g_FTMRUB = Decimal('0.0') 
price_asks_g_FTMRUB = Decimal('0.0') 
qty_asks_g_FTMRUB = Decimal('0.0') 
stepSize_g_FTMRUB = Decimal('0.1') 


def on_message_FTMRUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FTMRUB = 'FTMRUB' 
	price_bids_c_l_FTMRUB = data['b'] 
	qty_bids_c_l_FTMRUB = data['B'] 
	price_asks_c_l_FTMRUB = data['a'] 
	qty_asks_c_l_FTMRUB = data['A'] 

	global symbol_g_FTMRUB 
	global price_bids_g_FTMRUB 
	global qty_bids_g_FTMRUB 
	global price_asks_g_FTMRUB 
	global qty_asks_g_FTMRUB 

	symbol_g_FTMRUB = symbol_c_l_FTMRUB 
	price_bids_g_FTMRUB = Decimal(price_bids_c_l_FTMRUB) 
	qty_bids_g_FTMRUB = Decimal(qty_bids_c_l_FTMRUB) 
	price_asks_g_FTMRUB = Decimal(price_asks_c_l_FTMRUB) 
	qty_asks_g_FTMRUB = Decimal(qty_asks_c_l_FTMRUB) 


def loop_FTMRUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ftmrub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FTMRUB) 
	ws.run_forever() 


Thread(target=loop_FTMRUB).start() 
symbol_g_FTMTRY = 'FTMTRY' 
price_bids_g_FTMTRY = Decimal('0.0') 
qty_bids_g_FTMTRY = Decimal('0.0') 
price_asks_g_FTMTRY = Decimal('0.0') 
qty_asks_g_FTMTRY = Decimal('0.0') 
stepSize_g_FTMTRY = Decimal('0.01') 


def on_message_FTMTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FTMTRY = 'FTMTRY' 
	price_bids_c_l_FTMTRY = data['b'] 
	qty_bids_c_l_FTMTRY = data['B'] 
	price_asks_c_l_FTMTRY = data['a'] 
	qty_asks_c_l_FTMTRY = data['A'] 

	global symbol_g_FTMTRY 
	global price_bids_g_FTMTRY 
	global qty_bids_g_FTMTRY 
	global price_asks_g_FTMTRY 
	global qty_asks_g_FTMTRY 

	symbol_g_FTMTRY = symbol_c_l_FTMTRY 
	price_bids_g_FTMTRY = Decimal(price_bids_c_l_FTMTRY) 
	qty_bids_g_FTMTRY = Decimal(qty_bids_c_l_FTMTRY) 
	price_asks_g_FTMTRY = Decimal(price_asks_c_l_FTMTRY) 
	qty_asks_g_FTMTRY = Decimal(qty_asks_c_l_FTMTRY) 


def loop_FTMTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ftmtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FTMTRY) 
	ws.run_forever() 


Thread(target=loop_FTMTRY).start() 
symbol_g_ALGORUB = 'ALGORUB' 
price_bids_g_ALGORUB = Decimal('0.0') 
qty_bids_g_ALGORUB = Decimal('0.0') 
price_asks_g_ALGORUB = Decimal('0.0') 
qty_asks_g_ALGORUB = Decimal('0.0') 
stepSize_g_ALGORUB = Decimal('0.1') 


def on_message_ALGORUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALGORUB = 'ALGORUB' 
	price_bids_c_l_ALGORUB = data['b'] 
	qty_bids_c_l_ALGORUB = data['B'] 
	price_asks_c_l_ALGORUB = data['a'] 
	qty_asks_c_l_ALGORUB = data['A'] 

	global symbol_g_ALGORUB 
	global price_bids_g_ALGORUB 
	global qty_bids_g_ALGORUB 
	global price_asks_g_ALGORUB 
	global qty_asks_g_ALGORUB 

	symbol_g_ALGORUB = symbol_c_l_ALGORUB 
	price_bids_g_ALGORUB = Decimal(price_bids_c_l_ALGORUB) 
	qty_bids_g_ALGORUB = Decimal(qty_bids_c_l_ALGORUB) 
	price_asks_g_ALGORUB = Decimal(price_asks_c_l_ALGORUB) 
	qty_asks_g_ALGORUB = Decimal(qty_asks_c_l_ALGORUB) 


def loop_ALGORUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/algorub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALGORUB) 
	ws.run_forever() 


Thread(target=loop_ALGORUB).start() 
symbol_g_ALGOTRY = 'ALGOTRY' 
price_bids_g_ALGOTRY = Decimal('0.0') 
qty_bids_g_ALGOTRY = Decimal('0.0') 
price_asks_g_ALGOTRY = Decimal('0.0') 
qty_asks_g_ALGOTRY = Decimal('0.0') 
stepSize_g_ALGOTRY = Decimal('0.1') 


def on_message_ALGOTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALGOTRY = 'ALGOTRY' 
	price_bids_c_l_ALGOTRY = data['b'] 
	qty_bids_c_l_ALGOTRY = data['B'] 
	price_asks_c_l_ALGOTRY = data['a'] 
	qty_asks_c_l_ALGOTRY = data['A'] 

	global symbol_g_ALGOTRY 
	global price_bids_g_ALGOTRY 
	global qty_bids_g_ALGOTRY 
	global price_asks_g_ALGOTRY 
	global qty_asks_g_ALGOTRY 

	symbol_g_ALGOTRY = symbol_c_l_ALGOTRY 
	price_bids_g_ALGOTRY = Decimal(price_bids_c_l_ALGOTRY) 
	qty_bids_g_ALGOTRY = Decimal(qty_bids_c_l_ALGOTRY) 
	price_asks_g_ALGOTRY = Decimal(price_asks_c_l_ALGOTRY) 
	qty_asks_g_ALGOTRY = Decimal(qty_asks_c_l_ALGOTRY) 


def loop_ALGOTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/algotry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALGOTRY) 
	ws.run_forever() 


Thread(target=loop_ALGOTRY).start() 
symbol_g_DOGETRY = 'DOGETRY' 
price_bids_g_DOGETRY = Decimal('0.0') 
qty_bids_g_DOGETRY = Decimal('0.0') 
price_asks_g_DOGETRY = Decimal('0.0') 
qty_asks_g_DOGETRY = Decimal('0.0') 
stepSize_g_DOGETRY = Decimal('1.0') 


def on_message_DOGETRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOGETRY = 'DOGETRY' 
	price_bids_c_l_DOGETRY = data['b'] 
	qty_bids_c_l_DOGETRY = data['B'] 
	price_asks_c_l_DOGETRY = data['a'] 
	qty_asks_c_l_DOGETRY = data['A'] 

	global symbol_g_DOGETRY 
	global price_bids_g_DOGETRY 
	global qty_bids_g_DOGETRY 
	global price_asks_g_DOGETRY 
	global qty_asks_g_DOGETRY 

	symbol_g_DOGETRY = symbol_c_l_DOGETRY 
	price_bids_g_DOGETRY = Decimal(price_bids_c_l_DOGETRY) 
	qty_bids_g_DOGETRY = Decimal(qty_bids_c_l_DOGETRY) 
	price_asks_g_DOGETRY = Decimal(price_asks_c_l_DOGETRY) 
	qty_asks_g_DOGETRY = Decimal(qty_asks_c_l_DOGETRY) 


def loop_DOGETRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dogetry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOGETRY) 
	ws.run_forever() 


Thread(target=loop_DOGETRY).start() 
symbol_g_DOGEBRL = 'DOGEBRL' 
price_bids_g_DOGEBRL = Decimal('0.0') 
qty_bids_g_DOGEBRL = Decimal('0.0') 
price_asks_g_DOGEBRL = Decimal('0.0') 
qty_asks_g_DOGEBRL = Decimal('0.0') 
stepSize_g_DOGEBRL = Decimal('1.0') 


def on_message_DOGEBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOGEBRL = 'DOGEBRL' 
	price_bids_c_l_DOGEBRL = data['b'] 
	qty_bids_c_l_DOGEBRL = data['B'] 
	price_asks_c_l_DOGEBRL = data['a'] 
	qty_asks_c_l_DOGEBRL = data['A'] 

	global symbol_g_DOGEBRL 
	global price_bids_g_DOGEBRL 
	global qty_bids_g_DOGEBRL 
	global price_asks_g_DOGEBRL 
	global qty_asks_g_DOGEBRL 

	symbol_g_DOGEBRL = symbol_c_l_DOGEBRL 
	price_bids_g_DOGEBRL = Decimal(price_bids_c_l_DOGEBRL) 
	qty_bids_g_DOGEBRL = Decimal(qty_bids_c_l_DOGEBRL) 
	price_asks_g_DOGEBRL = Decimal(price_asks_c_l_DOGEBRL) 
	qty_asks_g_DOGEBRL = Decimal(qty_asks_c_l_DOGEBRL) 


def loop_DOGEBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dogebrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOGEBRL) 
	ws.run_forever() 


Thread(target=loop_DOGEBRL).start() 
symbol_g_DOGERUB = 'DOGERUB' 
price_bids_g_DOGERUB = Decimal('0.0') 
qty_bids_g_DOGERUB = Decimal('0.0') 
price_asks_g_DOGERUB = Decimal('0.0') 
qty_asks_g_DOGERUB = Decimal('0.0') 
stepSize_g_DOGERUB = Decimal('1.0') 


def on_message_DOGERUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOGERUB = 'DOGERUB' 
	price_bids_c_l_DOGERUB = data['b'] 
	qty_bids_c_l_DOGERUB = data['B'] 
	price_asks_c_l_DOGERUB = data['a'] 
	qty_asks_c_l_DOGERUB = data['A'] 

	global symbol_g_DOGERUB 
	global price_bids_g_DOGERUB 
	global qty_bids_g_DOGERUB 
	global price_asks_g_DOGERUB 
	global qty_asks_g_DOGERUB 

	symbol_g_DOGERUB = symbol_c_l_DOGERUB 
	price_bids_g_DOGERUB = Decimal(price_bids_c_l_DOGERUB) 
	qty_bids_g_DOGERUB = Decimal(qty_bids_c_l_DOGERUB) 
	price_asks_g_DOGERUB = Decimal(price_asks_c_l_DOGERUB) 
	qty_asks_g_DOGERUB = Decimal(qty_asks_c_l_DOGERUB) 


def loop_DOGERUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dogerub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOGERUB) 
	ws.run_forever() 


Thread(target=loop_DOGERUB).start() 
symbol_g_DOGEBIDR = 'DOGEBIDR' 
price_bids_g_DOGEBIDR = Decimal('0.0') 
qty_bids_g_DOGEBIDR = Decimal('0.0') 
price_asks_g_DOGEBIDR = Decimal('0.0') 
qty_asks_g_DOGEBIDR = Decimal('0.0') 
stepSize_g_DOGEBIDR = Decimal('1.0') 


def on_message_DOGEBIDR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOGEBIDR = 'DOGEBIDR' 
	price_bids_c_l_DOGEBIDR = data['b'] 
	qty_bids_c_l_DOGEBIDR = data['B'] 
	price_asks_c_l_DOGEBIDR = data['a'] 
	qty_asks_c_l_DOGEBIDR = data['A'] 

	global symbol_g_DOGEBIDR 
	global price_bids_g_DOGEBIDR 
	global qty_bids_g_DOGEBIDR 
	global price_asks_g_DOGEBIDR 
	global qty_asks_g_DOGEBIDR 

	symbol_g_DOGEBIDR = symbol_c_l_DOGEBIDR 
	price_bids_g_DOGEBIDR = Decimal(price_bids_c_l_DOGEBIDR) 
	qty_bids_g_DOGEBIDR = Decimal(qty_bids_c_l_DOGEBIDR) 
	price_asks_g_DOGEBIDR = Decimal(price_asks_c_l_DOGEBIDR) 
	qty_asks_g_DOGEBIDR = Decimal(qty_asks_c_l_DOGEBIDR) 


def loop_DOGEBIDR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dogebidr@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOGEBIDR) 
	ws.run_forever() 


Thread(target=loop_DOGEBIDR).start() 
symbol_g_ANKRTRY = 'ANKRTRY' 
price_bids_g_ANKRTRY = Decimal('0.0') 
qty_bids_g_ANKRTRY = Decimal('0.0') 
price_asks_g_ANKRTRY = Decimal('0.0') 
qty_asks_g_ANKRTRY = Decimal('0.0') 
stepSize_g_ANKRTRY = Decimal('1.0') 


def on_message_ANKRTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ANKRTRY = 'ANKRTRY' 
	price_bids_c_l_ANKRTRY = data['b'] 
	qty_bids_c_l_ANKRTRY = data['B'] 
	price_asks_c_l_ANKRTRY = data['a'] 
	qty_asks_c_l_ANKRTRY = data['A'] 

	global symbol_g_ANKRTRY 
	global price_bids_g_ANKRTRY 
	global qty_bids_g_ANKRTRY 
	global price_asks_g_ANKRTRY 
	global qty_asks_g_ANKRTRY 

	symbol_g_ANKRTRY = symbol_c_l_ANKRTRY 
	price_bids_g_ANKRTRY = Decimal(price_bids_c_l_ANKRTRY) 
	qty_bids_g_ANKRTRY = Decimal(qty_bids_c_l_ANKRTRY) 
	price_asks_g_ANKRTRY = Decimal(price_asks_c_l_ANKRTRY) 
	qty_asks_g_ANKRTRY = Decimal(qty_asks_c_l_ANKRTRY) 


def loop_ANKRTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ankrtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ANKRTRY) 
	ws.run_forever() 


Thread(target=loop_ANKRTRY).start() 
symbol_g_WINBRL = 'WINBRL' 
price_bids_g_WINBRL = Decimal('0.0') 
qty_bids_g_WINBRL = Decimal('0.0') 
price_asks_g_WINBRL = Decimal('0.0') 
qty_asks_g_WINBRL = Decimal('0.0') 
stepSize_g_WINBRL = Decimal('1.0') 


def on_message_WINBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WINBRL = 'WINBRL' 
	price_bids_c_l_WINBRL = data['b'] 
	qty_bids_c_l_WINBRL = data['B'] 
	price_asks_c_l_WINBRL = data['a'] 
	qty_asks_c_l_WINBRL = data['A'] 

	global symbol_g_WINBRL 
	global price_bids_g_WINBRL 
	global qty_bids_g_WINBRL 
	global price_asks_g_WINBRL 
	global qty_asks_g_WINBRL 

	symbol_g_WINBRL = symbol_c_l_WINBRL 
	price_bids_g_WINBRL = Decimal(price_bids_c_l_WINBRL) 
	qty_bids_g_WINBRL = Decimal(qty_bids_c_l_WINBRL) 
	price_asks_g_WINBRL = Decimal(price_asks_c_l_WINBRL) 
	qty_asks_g_WINBRL = Decimal(qty_asks_c_l_WINBRL) 


def loop_WINBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/winbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WINBRL) 
	ws.run_forever() 


Thread(target=loop_WINBRL).start() 
symbol_g_COSTRY = 'COSTRY' 
price_bids_g_COSTRY = Decimal('0.0') 
qty_bids_g_COSTRY = Decimal('0.0') 
price_asks_g_COSTRY = Decimal('0.0') 
qty_asks_g_COSTRY = Decimal('0.0') 
stepSize_g_COSTRY = Decimal('1.0') 


def on_message_COSTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COSTRY = 'COSTRY' 
	price_bids_c_l_COSTRY = data['b'] 
	qty_bids_c_l_COSTRY = data['B'] 
	price_asks_c_l_COSTRY = data['a'] 
	qty_asks_c_l_COSTRY = data['A'] 

	global symbol_g_COSTRY 
	global price_bids_g_COSTRY 
	global qty_bids_g_COSTRY 
	global price_asks_g_COSTRY 
	global qty_asks_g_COSTRY 

	symbol_g_COSTRY = symbol_c_l_COSTRY 
	price_bids_g_COSTRY = Decimal(price_bids_c_l_COSTRY) 
	qty_bids_g_COSTRY = Decimal(qty_bids_c_l_COSTRY) 
	price_asks_g_COSTRY = Decimal(price_asks_c_l_COSTRY) 
	qty_asks_g_COSTRY = Decimal(qty_asks_c_l_COSTRY) 


def loop_COSTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/costry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COSTRY) 
	ws.run_forever() 


Thread(target=loop_COSTRY).start() 
symbol_g_COCOSTRY = 'COCOSTRY' 
price_bids_g_COCOSTRY = Decimal('0.0') 
qty_bids_g_COCOSTRY = Decimal('0.0') 
price_asks_g_COCOSTRY = Decimal('0.0') 
qty_asks_g_COCOSTRY = Decimal('0.0') 
stepSize_g_COCOSTRY = Decimal('0.01') 


def on_message_COCOSTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COCOSTRY = 'COCOSTRY' 
	price_bids_c_l_COCOSTRY = data['b'] 
	qty_bids_c_l_COCOSTRY = data['B'] 
	price_asks_c_l_COCOSTRY = data['a'] 
	qty_asks_c_l_COCOSTRY = data['A'] 

	global symbol_g_COCOSTRY 
	global price_bids_g_COCOSTRY 
	global qty_bids_g_COCOSTRY 
	global price_asks_g_COCOSTRY 
	global qty_asks_g_COCOSTRY 

	symbol_g_COCOSTRY = symbol_c_l_COCOSTRY 
	price_bids_g_COCOSTRY = Decimal(price_bids_c_l_COCOSTRY) 
	qty_bids_g_COCOSTRY = Decimal(qty_bids_c_l_COCOSTRY) 
	price_asks_g_COCOSTRY = Decimal(price_asks_c_l_COCOSTRY) 
	qty_asks_g_COCOSTRY = Decimal(qty_asks_c_l_COCOSTRY) 


def loop_COCOSTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cocostry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COCOSTRY) 
	ws.run_forever() 


Thread(target=loop_COCOSTRY).start() 
symbol_g_DENTTRY = 'DENTTRY' 
price_bids_g_DENTTRY = Decimal('0.0') 
qty_bids_g_DENTTRY = Decimal('0.0') 
price_asks_g_DENTTRY = Decimal('0.0') 
qty_asks_g_DENTTRY = Decimal('0.0') 
stepSize_g_DENTTRY = Decimal('1.0') 


def on_message_DENTTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DENTTRY = 'DENTTRY' 
	price_bids_c_l_DENTTRY = data['b'] 
	qty_bids_c_l_DENTTRY = data['B'] 
	price_asks_c_l_DENTTRY = data['a'] 
	qty_asks_c_l_DENTTRY = data['A'] 

	global symbol_g_DENTTRY 
	global price_bids_g_DENTTRY 
	global qty_bids_g_DENTTRY 
	global price_asks_g_DENTTRY 
	global qty_asks_g_DENTTRY 

	symbol_g_DENTTRY = symbol_c_l_DENTTRY 
	price_bids_g_DENTTRY = Decimal(price_bids_c_l_DENTTRY) 
	qty_bids_g_DENTTRY = Decimal(qty_bids_c_l_DENTTRY) 
	price_asks_g_DENTTRY = Decimal(price_asks_c_l_DENTTRY) 
	qty_asks_g_DENTTRY = Decimal(qty_asks_c_l_DENTTRY) 


def loop_DENTTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/denttry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DENTTRY) 
	ws.run_forever() 


Thread(target=loop_DENTTRY).start() 
symbol_g_CHZTRY = 'CHZTRY' 
price_bids_g_CHZTRY = Decimal('0.0') 
qty_bids_g_CHZTRY = Decimal('0.0') 
price_asks_g_CHZTRY = Decimal('0.0') 
qty_asks_g_CHZTRY = Decimal('0.0') 
stepSize_g_CHZTRY = Decimal('1.0') 


def on_message_CHZTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHZTRY = 'CHZTRY' 
	price_bids_c_l_CHZTRY = data['b'] 
	qty_bids_c_l_CHZTRY = data['B'] 
	price_asks_c_l_CHZTRY = data['a'] 
	qty_asks_c_l_CHZTRY = data['A'] 

	global symbol_g_CHZTRY 
	global price_bids_g_CHZTRY 
	global qty_bids_g_CHZTRY 
	global price_asks_g_CHZTRY 
	global qty_asks_g_CHZTRY 

	symbol_g_CHZTRY = symbol_c_l_CHZTRY 
	price_bids_g_CHZTRY = Decimal(price_bids_c_l_CHZTRY) 
	qty_bids_g_CHZTRY = Decimal(qty_bids_c_l_CHZTRY) 
	price_asks_g_CHZTRY = Decimal(price_asks_c_l_CHZTRY) 
	qty_asks_g_CHZTRY = Decimal(qty_asks_c_l_CHZTRY) 


def loop_CHZTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chztry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHZTRY) 
	ws.run_forever() 


Thread(target=loop_CHZTRY).start() 
symbol_g_CHZBRL = 'CHZBRL' 
price_bids_g_CHZBRL = Decimal('0.0') 
qty_bids_g_CHZBRL = Decimal('0.0') 
price_asks_g_CHZBRL = Decimal('0.0') 
qty_asks_g_CHZBRL = Decimal('0.0') 
stepSize_g_CHZBRL = Decimal('1.0') 


def on_message_CHZBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHZBRL = 'CHZBRL' 
	price_bids_c_l_CHZBRL = data['b'] 
	qty_bids_c_l_CHZBRL = data['B'] 
	price_asks_c_l_CHZBRL = data['a'] 
	qty_asks_c_l_CHZBRL = data['A'] 

	global symbol_g_CHZBRL 
	global price_bids_g_CHZBRL 
	global qty_bids_g_CHZBRL 
	global price_asks_g_CHZBRL 
	global qty_asks_g_CHZBRL 

	symbol_g_CHZBRL = symbol_c_l_CHZBRL 
	price_bids_g_CHZBRL = Decimal(price_bids_c_l_CHZBRL) 
	qty_bids_g_CHZBRL = Decimal(qty_bids_c_l_CHZBRL) 
	price_asks_g_CHZBRL = Decimal(price_asks_c_l_CHZBRL) 
	qty_asks_g_CHZBRL = Decimal(qty_asks_c_l_CHZBRL) 


def loop_CHZBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chzbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHZBRL) 
	ws.run_forever() 


Thread(target=loop_CHZBRL).start() 
symbol_g_BUSDRUB = 'BUSDRUB' 
price_bids_g_BUSDRUB = Decimal('0.0') 
qty_bids_g_BUSDRUB = Decimal('0.0') 
price_asks_g_BUSDRUB = Decimal('0.0') 
qty_asks_g_BUSDRUB = Decimal('0.0') 
stepSize_g_BUSDRUB = Decimal('1.0') 


def on_message_BUSDRUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BUSDRUB = 'BUSDRUB' 
	price_bids_c_l_BUSDRUB = data['b'] 
	qty_bids_c_l_BUSDRUB = data['B'] 
	price_asks_c_l_BUSDRUB = data['a'] 
	qty_asks_c_l_BUSDRUB = data['A'] 

	global symbol_g_BUSDRUB 
	global price_bids_g_BUSDRUB 
	global qty_bids_g_BUSDRUB 
	global price_asks_g_BUSDRUB 
	global qty_asks_g_BUSDRUB 

	symbol_g_BUSDRUB = symbol_c_l_BUSDRUB 
	price_bids_g_BUSDRUB = Decimal(price_bids_c_l_BUSDRUB) 
	qty_bids_g_BUSDRUB = Decimal(qty_bids_c_l_BUSDRUB) 
	price_asks_g_BUSDRUB = Decimal(price_asks_c_l_BUSDRUB) 
	qty_asks_g_BUSDRUB = Decimal(qty_asks_c_l_BUSDRUB) 


def loop_BUSDRUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/busdrub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BUSDRUB) 
	ws.run_forever() 


Thread(target=loop_BUSDRUB).start() 
symbol_g_BUSDTRY = 'BUSDTRY' 
price_bids_g_BUSDTRY = Decimal('0.0') 
qty_bids_g_BUSDTRY = Decimal('0.0') 
price_asks_g_BUSDTRY = Decimal('0.0') 
qty_asks_g_BUSDTRY = Decimal('0.0') 
stepSize_g_BUSDTRY = Decimal('1.0') 


def on_message_BUSDTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BUSDTRY = 'BUSDTRY' 
	price_bids_c_l_BUSDTRY = data['b'] 
	qty_bids_c_l_BUSDTRY = data['B'] 
	price_asks_c_l_BUSDTRY = data['a'] 
	qty_asks_c_l_BUSDTRY = data['A'] 

	global symbol_g_BUSDTRY 
	global price_bids_g_BUSDTRY 
	global qty_bids_g_BUSDTRY 
	global price_asks_g_BUSDTRY 
	global qty_asks_g_BUSDTRY 

	symbol_g_BUSDTRY = symbol_c_l_BUSDTRY 
	price_bids_g_BUSDTRY = Decimal(price_bids_c_l_BUSDTRY) 
	qty_bids_g_BUSDTRY = Decimal(qty_bids_c_l_BUSDTRY) 
	price_asks_g_BUSDTRY = Decimal(price_asks_c_l_BUSDTRY) 
	qty_asks_g_BUSDTRY = Decimal(qty_asks_c_l_BUSDTRY) 


def loop_BUSDTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/busdtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BUSDTRY) 
	ws.run_forever() 


Thread(target=loop_BUSDTRY).start() 
symbol_g_BUSDBIDR = 'BUSDBIDR' 
price_bids_g_BUSDBIDR = Decimal('0.0') 
qty_bids_g_BUSDBIDR = Decimal('0.0') 
price_asks_g_BUSDBIDR = Decimal('0.0') 
qty_asks_g_BUSDBIDR = Decimal('0.0') 
stepSize_g_BUSDBIDR = Decimal('0.1') 


def on_message_BUSDBIDR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BUSDBIDR = 'BUSDBIDR' 
	price_bids_c_l_BUSDBIDR = data['b'] 
	qty_bids_c_l_BUSDBIDR = data['B'] 
	price_asks_c_l_BUSDBIDR = data['a'] 
	qty_asks_c_l_BUSDBIDR = data['A'] 

	global symbol_g_BUSDBIDR 
	global price_bids_g_BUSDBIDR 
	global qty_bids_g_BUSDBIDR 
	global price_asks_g_BUSDBIDR 
	global qty_asks_g_BUSDBIDR 

	symbol_g_BUSDBIDR = symbol_c_l_BUSDBIDR 
	price_bids_g_BUSDBIDR = Decimal(price_bids_c_l_BUSDBIDR) 
	qty_bids_g_BUSDBIDR = Decimal(qty_bids_c_l_BUSDBIDR) 
	price_asks_g_BUSDBIDR = Decimal(price_asks_c_l_BUSDBIDR) 
	qty_asks_g_BUSDBIDR = Decimal(qty_asks_c_l_BUSDBIDR) 


def loop_BUSDBIDR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/busdbidr@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BUSDBIDR) 
	ws.run_forever() 


Thread(target=loop_BUSDBIDR).start() 
symbol_g_BUSDDAI = 'BUSDDAI' 
price_bids_g_BUSDDAI = Decimal('0.0') 
qty_bids_g_BUSDDAI = Decimal('0.0') 
price_asks_g_BUSDDAI = Decimal('0.0') 
qty_asks_g_BUSDDAI = Decimal('0.0') 
stepSize_g_BUSDDAI = Decimal('0.1') 


def on_message_BUSDDAI(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BUSDDAI = 'BUSDDAI' 
	price_bids_c_l_BUSDDAI = data['b'] 
	qty_bids_c_l_BUSDDAI = data['B'] 
	price_asks_c_l_BUSDDAI = data['a'] 
	qty_asks_c_l_BUSDDAI = data['A'] 

	global symbol_g_BUSDDAI 
	global price_bids_g_BUSDDAI 
	global qty_bids_g_BUSDDAI 
	global price_asks_g_BUSDDAI 
	global qty_asks_g_BUSDDAI 

	symbol_g_BUSDDAI = symbol_c_l_BUSDDAI 
	price_bids_g_BUSDDAI = Decimal(price_bids_c_l_BUSDDAI) 
	qty_bids_g_BUSDDAI = Decimal(qty_bids_c_l_BUSDDAI) 
	price_asks_g_BUSDDAI = Decimal(price_asks_c_l_BUSDDAI) 
	qty_asks_g_BUSDDAI = Decimal(qty_asks_c_l_BUSDDAI) 


def loop_BUSDDAI(): 

	socket1 = f'wss://stream.binance.com:9443/ws/busddai@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BUSDDAI) 
	ws.run_forever() 


Thread(target=loop_BUSDDAI).start() 
symbol_g_BUSDBRL = 'BUSDBRL' 
price_bids_g_BUSDBRL = Decimal('0.0') 
qty_bids_g_BUSDBRL = Decimal('0.0') 
price_asks_g_BUSDBRL = Decimal('0.0') 
qty_asks_g_BUSDBRL = Decimal('0.0') 
stepSize_g_BUSDBRL = Decimal('0.1') 


def on_message_BUSDBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BUSDBRL = 'BUSDBRL' 
	price_bids_c_l_BUSDBRL = data['b'] 
	qty_bids_c_l_BUSDBRL = data['B'] 
	price_asks_c_l_BUSDBRL = data['a'] 
	qty_asks_c_l_BUSDBRL = data['A'] 

	global symbol_g_BUSDBRL 
	global price_bids_g_BUSDBRL 
	global qty_bids_g_BUSDBRL 
	global price_asks_g_BUSDBRL 
	global qty_asks_g_BUSDBRL 

	symbol_g_BUSDBRL = symbol_c_l_BUSDBRL 
	price_bids_g_BUSDBRL = Decimal(price_bids_c_l_BUSDBRL) 
	qty_bids_g_BUSDBRL = Decimal(qty_bids_c_l_BUSDBRL) 
	price_asks_g_BUSDBRL = Decimal(price_asks_c_l_BUSDBRL) 
	qty_asks_g_BUSDBRL = Decimal(qty_asks_c_l_BUSDBRL) 


def loop_BUSDBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/busdbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BUSDBRL) 
	ws.run_forever() 


Thread(target=loop_BUSDBRL).start() 
symbol_g_BUSDUAH = 'BUSDUAH' 
price_bids_g_BUSDUAH = Decimal('0.0') 
qty_bids_g_BUSDUAH = Decimal('0.0') 
price_asks_g_BUSDUAH = Decimal('0.0') 
qty_asks_g_BUSDUAH = Decimal('0.0') 
stepSize_g_BUSDUAH = Decimal('1.0') 


def on_message_BUSDUAH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BUSDUAH = 'BUSDUAH' 
	price_bids_c_l_BUSDUAH = data['b'] 
	qty_bids_c_l_BUSDUAH = data['B'] 
	price_asks_c_l_BUSDUAH = data['a'] 
	qty_asks_c_l_BUSDUAH = data['A'] 

	global symbol_g_BUSDUAH 
	global price_bids_g_BUSDUAH 
	global qty_bids_g_BUSDUAH 
	global price_asks_g_BUSDUAH 
	global qty_asks_g_BUSDUAH 

	symbol_g_BUSDUAH = symbol_c_l_BUSDUAH 
	price_bids_g_BUSDUAH = Decimal(price_bids_c_l_BUSDUAH) 
	qty_bids_g_BUSDUAH = Decimal(qty_bids_c_l_BUSDUAH) 
	price_asks_g_BUSDUAH = Decimal(price_asks_c_l_BUSDUAH) 
	qty_asks_g_BUSDUAH = Decimal(qty_asks_c_l_BUSDUAH) 


def loop_BUSDUAH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/busduah@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BUSDUAH) 
	ws.run_forever() 


Thread(target=loop_BUSDUAH).start() 
symbol_g_XTZTRY = 'XTZTRY' 
price_bids_g_XTZTRY = Decimal('0.0') 
qty_bids_g_XTZTRY = Decimal('0.0') 
price_asks_g_XTZTRY = Decimal('0.0') 
qty_asks_g_XTZTRY = Decimal('0.0') 
stepSize_g_XTZTRY = Decimal('0.01') 


def on_message_XTZTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XTZTRY = 'XTZTRY' 
	price_bids_c_l_XTZTRY = data['b'] 
	qty_bids_c_l_XTZTRY = data['B'] 
	price_asks_c_l_XTZTRY = data['a'] 
	qty_asks_c_l_XTZTRY = data['A'] 

	global symbol_g_XTZTRY 
	global price_bids_g_XTZTRY 
	global qty_bids_g_XTZTRY 
	global price_asks_g_XTZTRY 
	global qty_asks_g_XTZTRY 

	symbol_g_XTZTRY = symbol_c_l_XTZTRY 
	price_bids_g_XTZTRY = Decimal(price_bids_c_l_XTZTRY) 
	qty_bids_g_XTZTRY = Decimal(qty_bids_c_l_XTZTRY) 
	price_asks_g_XTZTRY = Decimal(price_asks_c_l_XTZTRY) 
	qty_asks_g_XTZTRY = Decimal(qty_asks_c_l_XTZTRY) 


def loop_XTZTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xtztry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XTZTRY) 
	ws.run_forever() 


Thread(target=loop_XTZTRY).start() 
symbol_g_RVNTRY = 'RVNTRY' 
price_bids_g_RVNTRY = Decimal('0.0') 
qty_bids_g_RVNTRY = Decimal('0.0') 
price_asks_g_RVNTRY = Decimal('0.0') 
qty_asks_g_RVNTRY = Decimal('0.0') 
stepSize_g_RVNTRY = Decimal('0.01') 


def on_message_RVNTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RVNTRY = 'RVNTRY' 
	price_bids_c_l_RVNTRY = data['b'] 
	qty_bids_c_l_RVNTRY = data['B'] 
	price_asks_c_l_RVNTRY = data['a'] 
	qty_asks_c_l_RVNTRY = data['A'] 

	global symbol_g_RVNTRY 
	global price_bids_g_RVNTRY 
	global qty_bids_g_RVNTRY 
	global price_asks_g_RVNTRY 
	global qty_asks_g_RVNTRY 

	symbol_g_RVNTRY = symbol_c_l_RVNTRY 
	price_bids_g_RVNTRY = Decimal(price_bids_c_l_RVNTRY) 
	qty_bids_g_RVNTRY = Decimal(qty_bids_c_l_RVNTRY) 
	price_asks_g_RVNTRY = Decimal(price_asks_c_l_RVNTRY) 
	qty_asks_g_RVNTRY = Decimal(qty_asks_c_l_RVNTRY) 


def loop_RVNTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rvntry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RVNTRY) 
	ws.run_forever() 


Thread(target=loop_RVNTRY).start() 
symbol_g_ARPATRY = 'ARPATRY' 
price_bids_g_ARPATRY = Decimal('0.0') 
qty_bids_g_ARPATRY = Decimal('0.0') 
price_asks_g_ARPATRY = Decimal('0.0') 
qty_asks_g_ARPATRY = Decimal('0.0') 
stepSize_g_ARPATRY = Decimal('1.0') 


def on_message_ARPATRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ARPATRY = 'ARPATRY' 
	price_bids_c_l_ARPATRY = data['b'] 
	qty_bids_c_l_ARPATRY = data['B'] 
	price_asks_c_l_ARPATRY = data['a'] 
	qty_asks_c_l_ARPATRY = data['A'] 

	global symbol_g_ARPATRY 
	global price_bids_g_ARPATRY 
	global qty_bids_g_ARPATRY 
	global price_asks_g_ARPATRY 
	global qty_asks_g_ARPATRY 

	symbol_g_ARPATRY = symbol_c_l_ARPATRY 
	price_bids_g_ARPATRY = Decimal(price_bids_c_l_ARPATRY) 
	qty_bids_g_ARPATRY = Decimal(qty_bids_c_l_ARPATRY) 
	price_asks_g_ARPATRY = Decimal(price_asks_c_l_ARPATRY) 
	qty_asks_g_ARPATRY = Decimal(qty_asks_c_l_ARPATRY) 


def loop_ARPATRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/arpatry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ARPATRY) 
	ws.run_forever() 


Thread(target=loop_ARPATRY).start() 
symbol_g_ARPARUB = 'ARPARUB' 
price_bids_g_ARPARUB = Decimal('0.0') 
qty_bids_g_ARPARUB = Decimal('0.0') 
price_asks_g_ARPARUB = Decimal('0.0') 
qty_asks_g_ARPARUB = Decimal('0.0') 
stepSize_g_ARPARUB = Decimal('1.0') 


def on_message_ARPARUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ARPARUB = 'ARPARUB' 
	price_bids_c_l_ARPARUB = data['b'] 
	qty_bids_c_l_ARPARUB = data['B'] 
	price_asks_c_l_ARPARUB = data['a'] 
	qty_asks_c_l_ARPARUB = data['A'] 

	global symbol_g_ARPARUB 
	global price_bids_g_ARPARUB 
	global qty_bids_g_ARPARUB 
	global price_asks_g_ARPARUB 
	global qty_asks_g_ARPARUB 

	symbol_g_ARPARUB = symbol_c_l_ARPARUB 
	price_bids_g_ARPARUB = Decimal(price_bids_c_l_ARPARUB) 
	qty_bids_g_ARPARUB = Decimal(qty_bids_c_l_ARPARUB) 
	price_asks_g_ARPARUB = Decimal(price_asks_c_l_ARPARUB) 
	qty_asks_g_ARPARUB = Decimal(qty_asks_c_l_ARPARUB) 


def loop_ARPARUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/arparub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ARPARUB) 
	ws.run_forever() 


Thread(target=loop_ARPARUB).start() 
symbol_g_SOLTRY = 'SOLTRY' 
price_bids_g_SOLTRY = Decimal('0.0') 
qty_bids_g_SOLTRY = Decimal('0.0') 
price_asks_g_SOLTRY = Decimal('0.0') 
qty_asks_g_SOLTRY = Decimal('0.0') 
stepSize_g_SOLTRY = Decimal('0.01') 


def on_message_SOLTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SOLTRY = 'SOLTRY' 
	price_bids_c_l_SOLTRY = data['b'] 
	qty_bids_c_l_SOLTRY = data['B'] 
	price_asks_c_l_SOLTRY = data['a'] 
	qty_asks_c_l_SOLTRY = data['A'] 

	global symbol_g_SOLTRY 
	global price_bids_g_SOLTRY 
	global qty_bids_g_SOLTRY 
	global price_asks_g_SOLTRY 
	global qty_asks_g_SOLTRY 

	symbol_g_SOLTRY = symbol_c_l_SOLTRY 
	price_bids_g_SOLTRY = Decimal(price_bids_c_l_SOLTRY) 
	qty_bids_g_SOLTRY = Decimal(qty_bids_c_l_SOLTRY) 
	price_asks_g_SOLTRY = Decimal(price_asks_c_l_SOLTRY) 
	qty_asks_g_SOLTRY = Decimal(qty_asks_c_l_SOLTRY) 


def loop_SOLTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/soltry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SOLTRY) 
	ws.run_forever() 


Thread(target=loop_SOLTRY).start() 
symbol_g_SOLBRL = 'SOLBRL' 
price_bids_g_SOLBRL = Decimal('0.0') 
qty_bids_g_SOLBRL = Decimal('0.0') 
price_asks_g_SOLBRL = Decimal('0.0') 
qty_asks_g_SOLBRL = Decimal('0.0') 
stepSize_g_SOLBRL = Decimal('0.01') 


def on_message_SOLBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SOLBRL = 'SOLBRL' 
	price_bids_c_l_SOLBRL = data['b'] 
	qty_bids_c_l_SOLBRL = data['B'] 
	price_asks_c_l_SOLBRL = data['a'] 
	qty_asks_c_l_SOLBRL = data['A'] 

	global symbol_g_SOLBRL 
	global price_bids_g_SOLBRL 
	global qty_bids_g_SOLBRL 
	global price_asks_g_SOLBRL 
	global qty_asks_g_SOLBRL 

	symbol_g_SOLBRL = symbol_c_l_SOLBRL 
	price_bids_g_SOLBRL = Decimal(price_bids_c_l_SOLBRL) 
	qty_bids_g_SOLBRL = Decimal(qty_bids_c_l_SOLBRL) 
	price_asks_g_SOLBRL = Decimal(price_asks_c_l_SOLBRL) 
	qty_asks_g_SOLBRL = Decimal(qty_asks_c_l_SOLBRL) 


def loop_SOLBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/solbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SOLBRL) 
	ws.run_forever() 


Thread(target=loop_SOLBRL).start() 
symbol_g_SOLRUB = 'SOLRUB' 
price_bids_g_SOLRUB = Decimal('0.0') 
qty_bids_g_SOLRUB = Decimal('0.0') 
price_asks_g_SOLRUB = Decimal('0.0') 
qty_asks_g_SOLRUB = Decimal('0.0') 
stepSize_g_SOLRUB = Decimal('0.01') 


def on_message_SOLRUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SOLRUB = 'SOLRUB' 
	price_bids_c_l_SOLRUB = data['b'] 
	qty_bids_c_l_SOLRUB = data['B'] 
	price_asks_c_l_SOLRUB = data['a'] 
	qty_asks_c_l_SOLRUB = data['A'] 

	global symbol_g_SOLRUB 
	global price_bids_g_SOLRUB 
	global qty_bids_g_SOLRUB 
	global price_asks_g_SOLRUB 
	global qty_asks_g_SOLRUB 

	symbol_g_SOLRUB = symbol_c_l_SOLRUB 
	price_bids_g_SOLRUB = Decimal(price_bids_c_l_SOLRUB) 
	qty_bids_g_SOLRUB = Decimal(qty_bids_c_l_SOLRUB) 
	price_asks_g_SOLRUB = Decimal(price_asks_c_l_SOLRUB) 
	qty_asks_g_SOLRUB = Decimal(qty_asks_c_l_SOLRUB) 


def loop_SOLRUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/solrub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SOLRUB) 
	ws.run_forever() 


Thread(target=loop_SOLRUB).start() 
symbol_g_SOLBIDR = 'SOLBIDR' 
price_bids_g_SOLBIDR = Decimal('0.0') 
qty_bids_g_SOLBIDR = Decimal('0.0') 
price_asks_g_SOLBIDR = Decimal('0.0') 
qty_asks_g_SOLBIDR = Decimal('0.0') 
stepSize_g_SOLBIDR = Decimal('0.0001') 


def on_message_SOLBIDR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SOLBIDR = 'SOLBIDR' 
	price_bids_c_l_SOLBIDR = data['b'] 
	qty_bids_c_l_SOLBIDR = data['B'] 
	price_asks_c_l_SOLBIDR = data['a'] 
	qty_asks_c_l_SOLBIDR = data['A'] 

	global symbol_g_SOLBIDR 
	global price_bids_g_SOLBIDR 
	global qty_bids_g_SOLBIDR 
	global price_asks_g_SOLBIDR 
	global qty_asks_g_SOLBIDR 

	symbol_g_SOLBIDR = symbol_c_l_SOLBIDR 
	price_bids_g_SOLBIDR = Decimal(price_bids_c_l_SOLBIDR) 
	qty_bids_g_SOLBIDR = Decimal(qty_bids_c_l_SOLBIDR) 
	price_asks_g_SOLBIDR = Decimal(price_asks_c_l_SOLBIDR) 
	qty_asks_g_SOLBIDR = Decimal(qty_asks_c_l_SOLBIDR) 


def loop_SOLBIDR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/solbidr@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SOLBIDR) 
	ws.run_forever() 


Thread(target=loop_SOLBIDR).start() 
symbol_g_LRCTRY = 'LRCTRY' 
price_bids_g_LRCTRY = Decimal('0.0') 
qty_bids_g_LRCTRY = Decimal('0.0') 
price_asks_g_LRCTRY = Decimal('0.0') 
qty_asks_g_LRCTRY = Decimal('0.0') 
stepSize_g_LRCTRY = Decimal('0.1') 


def on_message_LRCTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LRCTRY = 'LRCTRY' 
	price_bids_c_l_LRCTRY = data['b'] 
	qty_bids_c_l_LRCTRY = data['B'] 
	price_asks_c_l_LRCTRY = data['a'] 
	qty_asks_c_l_LRCTRY = data['A'] 

	global symbol_g_LRCTRY 
	global price_bids_g_LRCTRY 
	global qty_bids_g_LRCTRY 
	global price_asks_g_LRCTRY 
	global qty_asks_g_LRCTRY 

	symbol_g_LRCTRY = symbol_c_l_LRCTRY 
	price_bids_g_LRCTRY = Decimal(price_bids_c_l_LRCTRY) 
	qty_bids_g_LRCTRY = Decimal(qty_bids_c_l_LRCTRY) 
	price_asks_g_LRCTRY = Decimal(price_asks_c_l_LRCTRY) 
	qty_asks_g_LRCTRY = Decimal(qty_asks_c_l_LRCTRY) 


def loop_LRCTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lrctry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LRCTRY) 
	ws.run_forever() 


Thread(target=loop_LRCTRY).start() 
symbol_g_SXPTRY = 'SXPTRY' 
price_bids_g_SXPTRY = Decimal('0.0') 
qty_bids_g_SXPTRY = Decimal('0.0') 
price_asks_g_SXPTRY = Decimal('0.0') 
qty_asks_g_SXPTRY = Decimal('0.0') 
stepSize_g_SXPTRY = Decimal('0.1') 


def on_message_SXPTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SXPTRY = 'SXPTRY' 
	price_bids_c_l_SXPTRY = data['b'] 
	qty_bids_c_l_SXPTRY = data['B'] 
	price_asks_c_l_SXPTRY = data['a'] 
	qty_asks_c_l_SXPTRY = data['A'] 

	global symbol_g_SXPTRY 
	global price_bids_g_SXPTRY 
	global qty_bids_g_SXPTRY 
	global price_asks_g_SXPTRY 
	global qty_asks_g_SXPTRY 

	symbol_g_SXPTRY = symbol_c_l_SXPTRY 
	price_bids_g_SXPTRY = Decimal(price_bids_c_l_SXPTRY) 
	qty_bids_g_SXPTRY = Decimal(qty_bids_c_l_SXPTRY) 
	price_asks_g_SXPTRY = Decimal(price_asks_c_l_SXPTRY) 
	qty_asks_g_SXPTRY = Decimal(qty_asks_c_l_SXPTRY) 


def loop_SXPTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sxptry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SXPTRY) 
	ws.run_forever() 


Thread(target=loop_SXPTRY).start() 
symbol_g_STORJTRY = 'STORJTRY' 
price_bids_g_STORJTRY = Decimal('0.0') 
qty_bids_g_STORJTRY = Decimal('0.0') 
price_asks_g_STORJTRY = Decimal('0.0') 
qty_asks_g_STORJTRY = Decimal('0.0') 
stepSize_g_STORJTRY = Decimal('0.1') 


def on_message_STORJTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STORJTRY = 'STORJTRY' 
	price_bids_c_l_STORJTRY = data['b'] 
	qty_bids_c_l_STORJTRY = data['B'] 
	price_asks_c_l_STORJTRY = data['a'] 
	qty_asks_c_l_STORJTRY = data['A'] 

	global symbol_g_STORJTRY 
	global price_bids_g_STORJTRY 
	global qty_bids_g_STORJTRY 
	global price_asks_g_STORJTRY 
	global qty_asks_g_STORJTRY 

	symbol_g_STORJTRY = symbol_c_l_STORJTRY 
	price_bids_g_STORJTRY = Decimal(price_bids_c_l_STORJTRY) 
	qty_bids_g_STORJTRY = Decimal(qty_bids_c_l_STORJTRY) 
	price_asks_g_STORJTRY = Decimal(price_asks_c_l_STORJTRY) 
	qty_asks_g_STORJTRY = Decimal(qty_asks_c_l_STORJTRY) 


def loop_STORJTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/storjtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STORJTRY) 
	ws.run_forever() 


Thread(target=loop_STORJTRY).start() 
symbol_g_MANATRY = 'MANATRY' 
price_bids_g_MANATRY = Decimal('0.0') 
qty_bids_g_MANATRY = Decimal('0.0') 
price_asks_g_MANATRY = Decimal('0.0') 
qty_asks_g_MANATRY = Decimal('0.0') 
stepSize_g_MANATRY = Decimal('0.1') 


def on_message_MANATRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MANATRY = 'MANATRY' 
	price_bids_c_l_MANATRY = data['b'] 
	qty_bids_c_l_MANATRY = data['B'] 
	price_asks_c_l_MANATRY = data['a'] 
	qty_asks_c_l_MANATRY = data['A'] 

	global symbol_g_MANATRY 
	global price_bids_g_MANATRY 
	global qty_bids_g_MANATRY 
	global price_asks_g_MANATRY 
	global qty_asks_g_MANATRY 

	symbol_g_MANATRY = symbol_c_l_MANATRY 
	price_bids_g_MANATRY = Decimal(price_bids_c_l_MANATRY) 
	qty_bids_g_MANATRY = Decimal(qty_bids_c_l_MANATRY) 
	price_asks_g_MANATRY = Decimal(price_asks_c_l_MANATRY) 
	qty_asks_g_MANATRY = Decimal(qty_asks_c_l_MANATRY) 


def loop_MANATRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/manatry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MANATRY) 
	ws.run_forever() 


Thread(target=loop_MANATRY).start() 
symbol_g_MANABRL = 'MANABRL' 
price_bids_g_MANABRL = Decimal('0.0') 
qty_bids_g_MANABRL = Decimal('0.0') 
price_asks_g_MANABRL = Decimal('0.0') 
qty_asks_g_MANABRL = Decimal('0.0') 
stepSize_g_MANABRL = Decimal('0.1') 


def on_message_MANABRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MANABRL = 'MANABRL' 
	price_bids_c_l_MANABRL = data['b'] 
	qty_bids_c_l_MANABRL = data['B'] 
	price_asks_c_l_MANABRL = data['a'] 
	qty_asks_c_l_MANABRL = data['A'] 

	global symbol_g_MANABRL 
	global price_bids_g_MANABRL 
	global qty_bids_g_MANABRL 
	global price_asks_g_MANABRL 
	global qty_asks_g_MANABRL 

	symbol_g_MANABRL = symbol_c_l_MANABRL 
	price_bids_g_MANABRL = Decimal(price_bids_c_l_MANABRL) 
	qty_bids_g_MANABRL = Decimal(qty_bids_c_l_MANABRL) 
	price_asks_g_MANABRL = Decimal(price_asks_c_l_MANABRL) 
	qty_asks_g_MANABRL = Decimal(qty_asks_c_l_MANABRL) 


def loop_MANABRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/manabrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MANABRL) 
	ws.run_forever() 


Thread(target=loop_MANABRL).start() 
symbol_g_SANDTRY = 'SANDTRY' 
price_bids_g_SANDTRY = Decimal('0.0') 
qty_bids_g_SANDTRY = Decimal('0.0') 
price_asks_g_SANDTRY = Decimal('0.0') 
qty_asks_g_SANDTRY = Decimal('0.0') 
stepSize_g_SANDTRY = Decimal('0.1') 


def on_message_SANDTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SANDTRY = 'SANDTRY' 
	price_bids_c_l_SANDTRY = data['b'] 
	qty_bids_c_l_SANDTRY = data['B'] 
	price_asks_c_l_SANDTRY = data['a'] 
	qty_asks_c_l_SANDTRY = data['A'] 

	global symbol_g_SANDTRY 
	global price_bids_g_SANDTRY 
	global qty_bids_g_SANDTRY 
	global price_asks_g_SANDTRY 
	global qty_asks_g_SANDTRY 

	symbol_g_SANDTRY = symbol_c_l_SANDTRY 
	price_bids_g_SANDTRY = Decimal(price_bids_c_l_SANDTRY) 
	qty_bids_g_SANDTRY = Decimal(qty_bids_c_l_SANDTRY) 
	price_asks_g_SANDTRY = Decimal(price_asks_c_l_SANDTRY) 
	qty_asks_g_SANDTRY = Decimal(qty_asks_c_l_SANDTRY) 


def loop_SANDTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sandtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SANDTRY) 
	ws.run_forever() 


Thread(target=loop_SANDTRY).start() 
symbol_g_SANDBRL = 'SANDBRL' 
price_bids_g_SANDBRL = Decimal('0.0') 
qty_bids_g_SANDBRL = Decimal('0.0') 
price_asks_g_SANDBRL = Decimal('0.0') 
qty_asks_g_SANDBRL = Decimal('0.0') 
stepSize_g_SANDBRL = Decimal('0.01') 


def on_message_SANDBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SANDBRL = 'SANDBRL' 
	price_bids_c_l_SANDBRL = data['b'] 
	qty_bids_c_l_SANDBRL = data['B'] 
	price_asks_c_l_SANDBRL = data['a'] 
	qty_asks_c_l_SANDBRL = data['A'] 

	global symbol_g_SANDBRL 
	global price_bids_g_SANDBRL 
	global qty_bids_g_SANDBRL 
	global price_asks_g_SANDBRL 
	global qty_asks_g_SANDBRL 

	symbol_g_SANDBRL = symbol_c_l_SANDBRL 
	price_bids_g_SANDBRL = Decimal(price_bids_c_l_SANDBRL) 
	qty_bids_g_SANDBRL = Decimal(qty_bids_c_l_SANDBRL) 
	price_asks_g_SANDBRL = Decimal(price_asks_c_l_SANDBRL) 
	qty_asks_g_SANDBRL = Decimal(qty_asks_c_l_SANDBRL) 


def loop_SANDBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sandbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SANDBRL) 
	ws.run_forever() 


Thread(target=loop_SANDBRL).start() 
symbol_g_DOTTRY = 'DOTTRY' 
price_bids_g_DOTTRY = Decimal('0.0') 
qty_bids_g_DOTTRY = Decimal('0.0') 
price_asks_g_DOTTRY = Decimal('0.0') 
qty_asks_g_DOTTRY = Decimal('0.0') 
stepSize_g_DOTTRY = Decimal('0.01') 


def on_message_DOTTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOTTRY = 'DOTTRY' 
	price_bids_c_l_DOTTRY = data['b'] 
	qty_bids_c_l_DOTTRY = data['B'] 
	price_asks_c_l_DOTTRY = data['a'] 
	qty_asks_c_l_DOTTRY = data['A'] 

	global symbol_g_DOTTRY 
	global price_bids_g_DOTTRY 
	global qty_bids_g_DOTTRY 
	global price_asks_g_DOTTRY 
	global qty_asks_g_DOTTRY 

	symbol_g_DOTTRY = symbol_c_l_DOTTRY 
	price_bids_g_DOTTRY = Decimal(price_bids_c_l_DOTTRY) 
	qty_bids_g_DOTTRY = Decimal(qty_bids_c_l_DOTTRY) 
	price_asks_g_DOTTRY = Decimal(price_asks_c_l_DOTTRY) 
	qty_asks_g_DOTTRY = Decimal(qty_asks_c_l_DOTTRY) 


def loop_DOTTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dottry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOTTRY) 
	ws.run_forever() 


Thread(target=loop_DOTTRY).start() 
symbol_g_DOTBRL = 'DOTBRL' 
price_bids_g_DOTBRL = Decimal('0.0') 
qty_bids_g_DOTBRL = Decimal('0.0') 
price_asks_g_DOTBRL = Decimal('0.0') 
qty_asks_g_DOTBRL = Decimal('0.0') 
stepSize_g_DOTBRL = Decimal('0.01') 


def on_message_DOTBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOTBRL = 'DOTBRL' 
	price_bids_c_l_DOTBRL = data['b'] 
	qty_bids_c_l_DOTBRL = data['B'] 
	price_asks_c_l_DOTBRL = data['a'] 
	qty_asks_c_l_DOTBRL = data['A'] 

	global symbol_g_DOTBRL 
	global price_bids_g_DOTBRL 
	global qty_bids_g_DOTBRL 
	global price_asks_g_DOTBRL 
	global qty_asks_g_DOTBRL 

	symbol_g_DOTBRL = symbol_c_l_DOTBRL 
	price_bids_g_DOTBRL = Decimal(price_bids_c_l_DOTBRL) 
	qty_bids_g_DOTBRL = Decimal(qty_bids_c_l_DOTBRL) 
	price_asks_g_DOTBRL = Decimal(price_asks_c_l_DOTBRL) 
	qty_asks_g_DOTBRL = Decimal(qty_asks_c_l_DOTBRL) 


def loop_DOTBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dotbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOTBRL) 
	ws.run_forever() 


Thread(target=loop_DOTBRL).start() 
symbol_g_DOTRUB = 'DOTRUB' 
price_bids_g_DOTRUB = Decimal('0.0') 
qty_bids_g_DOTRUB = Decimal('0.0') 
price_asks_g_DOTRUB = Decimal('0.0') 
qty_asks_g_DOTRUB = Decimal('0.0') 
stepSize_g_DOTRUB = Decimal('0.01') 


def on_message_DOTRUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOTRUB = 'DOTRUB' 
	price_bids_c_l_DOTRUB = data['b'] 
	qty_bids_c_l_DOTRUB = data['B'] 
	price_asks_c_l_DOTRUB = data['a'] 
	qty_asks_c_l_DOTRUB = data['A'] 

	global symbol_g_DOTRUB 
	global price_bids_g_DOTRUB 
	global qty_bids_g_DOTRUB 
	global price_asks_g_DOTRUB 
	global qty_asks_g_DOTRUB 

	symbol_g_DOTRUB = symbol_c_l_DOTRUB 
	price_bids_g_DOTRUB = Decimal(price_bids_c_l_DOTRUB) 
	qty_bids_g_DOTRUB = Decimal(qty_bids_c_l_DOTRUB) 
	price_asks_g_DOTRUB = Decimal(price_asks_c_l_DOTRUB) 
	qty_asks_g_DOTRUB = Decimal(qty_asks_c_l_DOTRUB) 


def loop_DOTRUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dotrub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOTRUB) 
	ws.run_forever() 


Thread(target=loop_DOTRUB).start() 
symbol_g_LUNATRY = 'LUNATRY' 
price_bids_g_LUNATRY = Decimal('0.0') 
qty_bids_g_LUNATRY = Decimal('0.0') 
price_asks_g_LUNATRY = Decimal('0.0') 
qty_asks_g_LUNATRY = Decimal('0.0') 
stepSize_g_LUNATRY = Decimal('0.1') 


def on_message_LUNATRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LUNATRY = 'LUNATRY' 
	price_bids_c_l_LUNATRY = data['b'] 
	qty_bids_c_l_LUNATRY = data['B'] 
	price_asks_c_l_LUNATRY = data['a'] 
	qty_asks_c_l_LUNATRY = data['A'] 

	global symbol_g_LUNATRY 
	global price_bids_g_LUNATRY 
	global qty_bids_g_LUNATRY 
	global price_asks_g_LUNATRY 
	global qty_asks_g_LUNATRY 

	symbol_g_LUNATRY = symbol_c_l_LUNATRY 
	price_bids_g_LUNATRY = Decimal(price_bids_c_l_LUNATRY) 
	qty_bids_g_LUNATRY = Decimal(qty_bids_c_l_LUNATRY) 
	price_asks_g_LUNATRY = Decimal(price_asks_c_l_LUNATRY) 
	qty_asks_g_LUNATRY = Decimal(qty_asks_c_l_LUNATRY) 


def loop_LUNATRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lunatry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LUNATRY) 
	ws.run_forever() 


Thread(target=loop_LUNATRY).start() 
symbol_g_RUNETRY = 'RUNETRY' 
price_bids_g_RUNETRY = Decimal('0.0') 
qty_bids_g_RUNETRY = Decimal('0.0') 
price_asks_g_RUNETRY = Decimal('0.0') 
qty_asks_g_RUNETRY = Decimal('0.0') 
stepSize_g_RUNETRY = Decimal('0.01') 


def on_message_RUNETRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RUNETRY = 'RUNETRY' 
	price_bids_c_l_RUNETRY = data['b'] 
	qty_bids_c_l_RUNETRY = data['B'] 
	price_asks_c_l_RUNETRY = data['a'] 
	qty_asks_c_l_RUNETRY = data['A'] 

	global symbol_g_RUNETRY 
	global price_bids_g_RUNETRY 
	global qty_bids_g_RUNETRY 
	global price_asks_g_RUNETRY 
	global qty_asks_g_RUNETRY 

	symbol_g_RUNETRY = symbol_c_l_RUNETRY 
	price_bids_g_RUNETRY = Decimal(price_bids_c_l_RUNETRY) 
	qty_bids_g_RUNETRY = Decimal(qty_bids_c_l_RUNETRY) 
	price_asks_g_RUNETRY = Decimal(price_asks_c_l_RUNETRY) 
	qty_asks_g_RUNETRY = Decimal(qty_asks_c_l_RUNETRY) 


def loop_RUNETRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/runetry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RUNETRY) 
	ws.run_forever() 


Thread(target=loop_RUNETRY).start() 
symbol_g_UMATRY = 'UMATRY' 
price_bids_g_UMATRY = Decimal('0.0') 
qty_bids_g_UMATRY = Decimal('0.0') 
price_asks_g_UMATRY = Decimal('0.0') 
qty_asks_g_UMATRY = Decimal('0.0') 
stepSize_g_UMATRY = Decimal('0.01') 


def on_message_UMATRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UMATRY = 'UMATRY' 
	price_bids_c_l_UMATRY = data['b'] 
	qty_bids_c_l_UMATRY = data['B'] 
	price_asks_c_l_UMATRY = data['a'] 
	qty_asks_c_l_UMATRY = data['A'] 

	global symbol_g_UMATRY 
	global price_bids_g_UMATRY 
	global qty_bids_g_UMATRY 
	global price_asks_g_UMATRY 
	global qty_asks_g_UMATRY 

	symbol_g_UMATRY = symbol_c_l_UMATRY 
	price_bids_g_UMATRY = Decimal(price_bids_c_l_UMATRY) 
	qty_bids_g_UMATRY = Decimal(qty_bids_c_l_UMATRY) 
	price_asks_g_UMATRY = Decimal(price_asks_c_l_UMATRY) 
	qty_asks_g_UMATRY = Decimal(qty_asks_c_l_UMATRY) 


def loop_UMATRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/umatry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UMATRY) 
	ws.run_forever() 


Thread(target=loop_UMATRY).start() 
symbol_g_BELTRY = 'BELTRY' 
price_bids_g_BELTRY = Decimal('0.0') 
qty_bids_g_BELTRY = Decimal('0.0') 
price_asks_g_BELTRY = Decimal('0.0') 
qty_asks_g_BELTRY = Decimal('0.0') 
stepSize_g_BELTRY = Decimal('0.01') 


def on_message_BELTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BELTRY = 'BELTRY' 
	price_bids_c_l_BELTRY = data['b'] 
	qty_bids_c_l_BELTRY = data['B'] 
	price_asks_c_l_BELTRY = data['a'] 
	qty_asks_c_l_BELTRY = data['A'] 

	global symbol_g_BELTRY 
	global price_bids_g_BELTRY 
	global qty_bids_g_BELTRY 
	global price_asks_g_BELTRY 
	global qty_asks_g_BELTRY 

	symbol_g_BELTRY = symbol_c_l_BELTRY 
	price_bids_g_BELTRY = Decimal(price_bids_c_l_BELTRY) 
	qty_bids_g_BELTRY = Decimal(qty_bids_c_l_BELTRY) 
	price_asks_g_BELTRY = Decimal(price_asks_c_l_BELTRY) 
	qty_asks_g_BELTRY = Decimal(qty_asks_c_l_BELTRY) 


def loop_BELTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/beltry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BELTRY) 
	ws.run_forever() 


Thread(target=loop_BELTRY).start() 
symbol_g_AVAXTRY = 'AVAXTRY' 
price_bids_g_AVAXTRY = Decimal('0.0') 
qty_bids_g_AVAXTRY = Decimal('0.0') 
price_asks_g_AVAXTRY = Decimal('0.0') 
qty_asks_g_AVAXTRY = Decimal('0.0') 
stepSize_g_AVAXTRY = Decimal('0.01') 


def on_message_AVAXTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AVAXTRY = 'AVAXTRY' 
	price_bids_c_l_AVAXTRY = data['b'] 
	qty_bids_c_l_AVAXTRY = data['B'] 
	price_asks_c_l_AVAXTRY = data['a'] 
	qty_asks_c_l_AVAXTRY = data['A'] 

	global symbol_g_AVAXTRY 
	global price_bids_g_AVAXTRY 
	global qty_bids_g_AVAXTRY 
	global price_asks_g_AVAXTRY 
	global qty_asks_g_AVAXTRY 

	symbol_g_AVAXTRY = symbol_c_l_AVAXTRY 
	price_bids_g_AVAXTRY = Decimal(price_bids_c_l_AVAXTRY) 
	qty_bids_g_AVAXTRY = Decimal(qty_bids_c_l_AVAXTRY) 
	price_asks_g_AVAXTRY = Decimal(price_asks_c_l_AVAXTRY) 
	qty_asks_g_AVAXTRY = Decimal(qty_asks_c_l_AVAXTRY) 


def loop_AVAXTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/avaxtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AVAXTRY) 
	ws.run_forever() 


Thread(target=loop_AVAXTRY).start() 
symbol_g_AVAXBRL = 'AVAXBRL' 
price_bids_g_AVAXBRL = Decimal('0.0') 
qty_bids_g_AVAXBRL = Decimal('0.0') 
price_asks_g_AVAXBRL = Decimal('0.0') 
qty_asks_g_AVAXBRL = Decimal('0.0') 
stepSize_g_AVAXBRL = Decimal('0.01') 


def on_message_AVAXBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AVAXBRL = 'AVAXBRL' 
	price_bids_c_l_AVAXBRL = data['b'] 
	qty_bids_c_l_AVAXBRL = data['B'] 
	price_asks_c_l_AVAXBRL = data['a'] 
	qty_asks_c_l_AVAXBRL = data['A'] 

	global symbol_g_AVAXBRL 
	global price_bids_g_AVAXBRL 
	global qty_bids_g_AVAXBRL 
	global price_asks_g_AVAXBRL 
	global qty_asks_g_AVAXBRL 

	symbol_g_AVAXBRL = symbol_c_l_AVAXBRL 
	price_bids_g_AVAXBRL = Decimal(price_bids_c_l_AVAXBRL) 
	qty_bids_g_AVAXBRL = Decimal(qty_bids_c_l_AVAXBRL) 
	price_asks_g_AVAXBRL = Decimal(price_asks_c_l_AVAXBRL) 
	qty_asks_g_AVAXBRL = Decimal(qty_asks_c_l_AVAXBRL) 


def loop_AVAXBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/avaxbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AVAXBRL) 
	ws.run_forever() 


Thread(target=loop_AVAXBRL).start() 
symbol_g_NEARRUB = 'NEARRUB' 
price_bids_g_NEARRUB = Decimal('0.0') 
qty_bids_g_NEARRUB = Decimal('0.0') 
price_asks_g_NEARRUB = Decimal('0.0') 
qty_asks_g_NEARRUB = Decimal('0.0') 
stepSize_g_NEARRUB = Decimal('0.001') 


def on_message_NEARRUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEARRUB = 'NEARRUB' 
	price_bids_c_l_NEARRUB = data['b'] 
	qty_bids_c_l_NEARRUB = data['B'] 
	price_asks_c_l_NEARRUB = data['a'] 
	qty_asks_c_l_NEARRUB = data['A'] 

	global symbol_g_NEARRUB 
	global price_bids_g_NEARRUB 
	global qty_bids_g_NEARRUB 
	global price_asks_g_NEARRUB 
	global qty_asks_g_NEARRUB 

	symbol_g_NEARRUB = symbol_c_l_NEARRUB 
	price_bids_g_NEARRUB = Decimal(price_bids_c_l_NEARRUB) 
	qty_bids_g_NEARRUB = Decimal(qty_bids_c_l_NEARRUB) 
	price_asks_g_NEARRUB = Decimal(price_asks_c_l_NEARRUB) 
	qty_asks_g_NEARRUB = Decimal(qty_asks_c_l_NEARRUB) 


def loop_NEARRUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nearrub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEARRUB) 
	ws.run_forever() 


Thread(target=loop_NEARRUB).start() 
symbol_g_NEARTRY = 'NEARTRY' 
price_bids_g_NEARTRY = Decimal('0.0') 
qty_bids_g_NEARTRY = Decimal('0.0') 
price_asks_g_NEARTRY = Decimal('0.0') 
qty_asks_g_NEARTRY = Decimal('0.0') 
stepSize_g_NEARTRY = Decimal('0.001') 


def on_message_NEARTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEARTRY = 'NEARTRY' 
	price_bids_c_l_NEARTRY = data['b'] 
	qty_bids_c_l_NEARTRY = data['B'] 
	price_asks_c_l_NEARTRY = data['a'] 
	qty_asks_c_l_NEARTRY = data['A'] 

	global symbol_g_NEARTRY 
	global price_bids_g_NEARTRY 
	global qty_bids_g_NEARTRY 
	global price_asks_g_NEARTRY 
	global qty_asks_g_NEARTRY 

	symbol_g_NEARTRY = symbol_c_l_NEARTRY 
	price_bids_g_NEARTRY = Decimal(price_bids_c_l_NEARTRY) 
	qty_bids_g_NEARTRY = Decimal(qty_bids_c_l_NEARTRY) 
	price_asks_g_NEARTRY = Decimal(price_asks_c_l_NEARTRY) 
	qty_asks_g_NEARTRY = Decimal(qty_asks_c_l_NEARTRY) 


def loop_NEARTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/neartry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEARTRY) 
	ws.run_forever() 


Thread(target=loop_NEARTRY).start() 
symbol_g_FILTRY = 'FILTRY' 
price_bids_g_FILTRY = Decimal('0.0') 
qty_bids_g_FILTRY = Decimal('0.0') 
price_asks_g_FILTRY = Decimal('0.0') 
qty_asks_g_FILTRY = Decimal('0.0') 
stepSize_g_FILTRY = Decimal('0.001') 


def on_message_FILTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FILTRY = 'FILTRY' 
	price_bids_c_l_FILTRY = data['b'] 
	qty_bids_c_l_FILTRY = data['B'] 
	price_asks_c_l_FILTRY = data['a'] 
	qty_asks_c_l_FILTRY = data['A'] 

	global symbol_g_FILTRY 
	global price_bids_g_FILTRY 
	global qty_bids_g_FILTRY 
	global price_asks_g_FILTRY 
	global qty_asks_g_FILTRY 

	symbol_g_FILTRY = symbol_c_l_FILTRY 
	price_bids_g_FILTRY = Decimal(price_bids_c_l_FILTRY) 
	qty_bids_g_FILTRY = Decimal(qty_bids_c_l_FILTRY) 
	price_asks_g_FILTRY = Decimal(price_asks_c_l_FILTRY) 
	qty_asks_g_FILTRY = Decimal(qty_asks_c_l_FILTRY) 


def loop_FILTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/filtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FILTRY) 
	ws.run_forever() 


Thread(target=loop_FILTRY).start() 
symbol_g_INJTRY = 'INJTRY' 
price_bids_g_INJTRY = Decimal('0.0') 
qty_bids_g_INJTRY = Decimal('0.0') 
price_asks_g_INJTRY = Decimal('0.0') 
qty_asks_g_INJTRY = Decimal('0.0') 
stepSize_g_INJTRY = Decimal('0.01') 


def on_message_INJTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_INJTRY = 'INJTRY' 
	price_bids_c_l_INJTRY = data['b'] 
	qty_bids_c_l_INJTRY = data['B'] 
	price_asks_c_l_INJTRY = data['a'] 
	qty_asks_c_l_INJTRY = data['A'] 

	global symbol_g_INJTRY 
	global price_bids_g_INJTRY 
	global qty_bids_g_INJTRY 
	global price_asks_g_INJTRY 
	global qty_asks_g_INJTRY 

	symbol_g_INJTRY = symbol_c_l_INJTRY 
	price_bids_g_INJTRY = Decimal(price_bids_c_l_INJTRY) 
	qty_bids_g_INJTRY = Decimal(qty_bids_c_l_INJTRY) 
	price_asks_g_INJTRY = Decimal(price_asks_c_l_INJTRY) 
	qty_asks_g_INJTRY = Decimal(qty_asks_c_l_INJTRY) 


def loop_INJTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/injtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_INJTRY) 
	ws.run_forever() 


Thread(target=loop_INJTRY).start() 
symbol_g_AUDIOTRY = 'AUDIOTRY' 
price_bids_g_AUDIOTRY = Decimal('0.0') 
qty_bids_g_AUDIOTRY = Decimal('0.0') 
price_asks_g_AUDIOTRY = Decimal('0.0') 
qty_asks_g_AUDIOTRY = Decimal('0.0') 
stepSize_g_AUDIOTRY = Decimal('0.01') 


def on_message_AUDIOTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AUDIOTRY = 'AUDIOTRY' 
	price_bids_c_l_AUDIOTRY = data['b'] 
	qty_bids_c_l_AUDIOTRY = data['B'] 
	price_asks_c_l_AUDIOTRY = data['a'] 
	qty_asks_c_l_AUDIOTRY = data['A'] 

	global symbol_g_AUDIOTRY 
	global price_bids_g_AUDIOTRY 
	global qty_bids_g_AUDIOTRY 
	global price_asks_g_AUDIOTRY 
	global qty_asks_g_AUDIOTRY 

	symbol_g_AUDIOTRY = symbol_c_l_AUDIOTRY 
	price_bids_g_AUDIOTRY = Decimal(price_bids_c_l_AUDIOTRY) 
	qty_bids_g_AUDIOTRY = Decimal(qty_bids_c_l_AUDIOTRY) 
	price_asks_g_AUDIOTRY = Decimal(price_asks_c_l_AUDIOTRY) 
	qty_asks_g_AUDIOTRY = Decimal(qty_asks_c_l_AUDIOTRY) 


def loop_AUDIOTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/audiotry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AUDIOTRY) 
	ws.run_forever() 


Thread(target=loop_AUDIOTRY).start() 
symbol_g_AXSBRL = 'AXSBRL' 
price_bids_g_AXSBRL = Decimal('0.0') 
qty_bids_g_AXSBRL = Decimal('0.0') 
price_asks_g_AXSBRL = Decimal('0.0') 
qty_asks_g_AXSBRL = Decimal('0.0') 
stepSize_g_AXSBRL = Decimal('0.01') 


def on_message_AXSBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AXSBRL = 'AXSBRL' 
	price_bids_c_l_AXSBRL = data['b'] 
	qty_bids_c_l_AXSBRL = data['B'] 
	price_asks_c_l_AXSBRL = data['a'] 
	qty_asks_c_l_AXSBRL = data['A'] 

	global symbol_g_AXSBRL 
	global price_bids_g_AXSBRL 
	global qty_bids_g_AXSBRL 
	global price_asks_g_AXSBRL 
	global qty_asks_g_AXSBRL 

	symbol_g_AXSBRL = symbol_c_l_AXSBRL 
	price_bids_g_AXSBRL = Decimal(price_bids_c_l_AXSBRL) 
	qty_bids_g_AXSBRL = Decimal(qty_bids_c_l_AXSBRL) 
	price_asks_g_AXSBRL = Decimal(price_asks_c_l_AXSBRL) 
	qty_asks_g_AXSBRL = Decimal(qty_asks_c_l_AXSBRL) 


def loop_AXSBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/axsbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AXSBRL) 
	ws.run_forever() 


Thread(target=loop_AXSBRL).start() 
symbol_g_AXSTRY = 'AXSTRY' 
price_bids_g_AXSTRY = Decimal('0.0') 
qty_bids_g_AXSTRY = Decimal('0.0') 
price_asks_g_AXSTRY = Decimal('0.0') 
qty_asks_g_AXSTRY = Decimal('0.0') 
stepSize_g_AXSTRY = Decimal('0.001') 


def on_message_AXSTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AXSTRY = 'AXSTRY' 
	price_bids_c_l_AXSTRY = data['b'] 
	qty_bids_c_l_AXSTRY = data['B'] 
	price_asks_c_l_AXSTRY = data['a'] 
	qty_asks_c_l_AXSTRY = data['A'] 

	global symbol_g_AXSTRY 
	global price_bids_g_AXSTRY 
	global qty_bids_g_AXSTRY 
	global price_asks_g_AXSTRY 
	global qty_asks_g_AXSTRY 

	symbol_g_AXSTRY = symbol_c_l_AXSTRY 
	price_bids_g_AXSTRY = Decimal(price_bids_c_l_AXSTRY) 
	qty_bids_g_AXSTRY = Decimal(qty_bids_c_l_AXSTRY) 
	price_asks_g_AXSTRY = Decimal(price_asks_c_l_AXSTRY) 
	qty_asks_g_AXSTRY = Decimal(qty_asks_c_l_AXSTRY) 


def loop_AXSTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/axstry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AXSTRY) 
	ws.run_forever() 


Thread(target=loop_AXSTRY).start() 
symbol_g_ROSETRY = 'ROSETRY' 
price_bids_g_ROSETRY = Decimal('0.0') 
qty_bids_g_ROSETRY = Decimal('0.0') 
price_asks_g_ROSETRY = Decimal('0.0') 
qty_asks_g_ROSETRY = Decimal('0.0') 
stepSize_g_ROSETRY = Decimal('0.1') 


def on_message_ROSETRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ROSETRY = 'ROSETRY' 
	price_bids_c_l_ROSETRY = data['b'] 
	qty_bids_c_l_ROSETRY = data['B'] 
	price_asks_c_l_ROSETRY = data['a'] 
	qty_asks_c_l_ROSETRY = data['A'] 

	global symbol_g_ROSETRY 
	global price_bids_g_ROSETRY 
	global qty_bids_g_ROSETRY 
	global price_asks_g_ROSETRY 
	global qty_asks_g_ROSETRY 

	symbol_g_ROSETRY = symbol_c_l_ROSETRY 
	price_bids_g_ROSETRY = Decimal(price_bids_c_l_ROSETRY) 
	qty_bids_g_ROSETRY = Decimal(qty_bids_c_l_ROSETRY) 
	price_asks_g_ROSETRY = Decimal(price_asks_c_l_ROSETRY) 
	qty_asks_g_ROSETRY = Decimal(qty_asks_c_l_ROSETRY) 


def loop_ROSETRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rosetry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ROSETRY) 
	ws.run_forever() 


Thread(target=loop_ROSETRY).start() 
symbol_g_GRTTRY = 'GRTTRY' 
price_bids_g_GRTTRY = Decimal('0.0') 
qty_bids_g_GRTTRY = Decimal('0.0') 
price_asks_g_GRTTRY = Decimal('0.0') 
qty_asks_g_GRTTRY = Decimal('0.0') 
stepSize_g_GRTTRY = Decimal('1.0') 


def on_message_GRTTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GRTTRY = 'GRTTRY' 
	price_bids_c_l_GRTTRY = data['b'] 
	qty_bids_c_l_GRTTRY = data['B'] 
	price_asks_c_l_GRTTRY = data['a'] 
	qty_asks_c_l_GRTTRY = data['A'] 

	global symbol_g_GRTTRY 
	global price_bids_g_GRTTRY 
	global qty_bids_g_GRTTRY 
	global price_asks_g_GRTTRY 
	global qty_asks_g_GRTTRY 

	symbol_g_GRTTRY = symbol_c_l_GRTTRY 
	price_bids_g_GRTTRY = Decimal(price_bids_c_l_GRTTRY) 
	qty_bids_g_GRTTRY = Decimal(qty_bids_c_l_GRTTRY) 
	price_asks_g_GRTTRY = Decimal(price_asks_c_l_GRTTRY) 
	qty_asks_g_GRTTRY = Decimal(qty_asks_c_l_GRTTRY) 


def loop_GRTTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/grttry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GRTTRY) 
	ws.run_forever() 


Thread(target=loop_GRTTRY).start() 
symbol_g_REEFTRY = 'REEFTRY' 
price_bids_g_REEFTRY = Decimal('0.0') 
qty_bids_g_REEFTRY = Decimal('0.0') 
price_asks_g_REEFTRY = Decimal('0.0') 
qty_asks_g_REEFTRY = Decimal('0.0') 
stepSize_g_REEFTRY = Decimal('1.0') 


def on_message_REEFTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_REEFTRY = 'REEFTRY' 
	price_bids_c_l_REEFTRY = data['b'] 
	qty_bids_c_l_REEFTRY = data['B'] 
	price_asks_c_l_REEFTRY = data['a'] 
	qty_asks_c_l_REEFTRY = data['A'] 

	global symbol_g_REEFTRY 
	global price_bids_g_REEFTRY 
	global qty_bids_g_REEFTRY 
	global price_asks_g_REEFTRY 
	global qty_asks_g_REEFTRY 

	symbol_g_REEFTRY = symbol_c_l_REEFTRY 
	price_bids_g_REEFTRY = Decimal(price_bids_c_l_REEFTRY) 
	qty_bids_g_REEFTRY = Decimal(qty_bids_c_l_REEFTRY) 
	price_asks_g_REEFTRY = Decimal(price_asks_c_l_REEFTRY) 
	qty_asks_g_REEFTRY = Decimal(qty_asks_c_l_REEFTRY) 


def loop_REEFTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/reeftry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_REEFTRY) 
	ws.run_forever() 


Thread(target=loop_REEFTRY).start() 
symbol_g_TRURUB = 'TRURUB' 
price_bids_g_TRURUB = Decimal('0.0') 
qty_bids_g_TRURUB = Decimal('0.0') 
price_asks_g_TRURUB = Decimal('0.0') 
qty_asks_g_TRURUB = Decimal('0.0') 
stepSize_g_TRURUB = Decimal('1.0') 


def on_message_TRURUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRURUB = 'TRURUB' 
	price_bids_c_l_TRURUB = data['b'] 
	qty_bids_c_l_TRURUB = data['B'] 
	price_asks_c_l_TRURUB = data['a'] 
	qty_asks_c_l_TRURUB = data['A'] 

	global symbol_g_TRURUB 
	global price_bids_g_TRURUB 
	global qty_bids_g_TRURUB 
	global price_asks_g_TRURUB 
	global qty_asks_g_TRURUB 

	symbol_g_TRURUB = symbol_c_l_TRURUB 
	price_bids_g_TRURUB = Decimal(price_bids_c_l_TRURUB) 
	qty_bids_g_TRURUB = Decimal(qty_bids_c_l_TRURUB) 
	price_asks_g_TRURUB = Decimal(price_asks_c_l_TRURUB) 
	qty_asks_g_TRURUB = Decimal(qty_asks_c_l_TRURUB) 


def loop_TRURUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/trurub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRURUB) 
	ws.run_forever() 


Thread(target=loop_TRURUB).start() 
symbol_g_TWTTRY = 'TWTTRY' 
price_bids_g_TWTTRY = Decimal('0.0') 
qty_bids_g_TWTTRY = Decimal('0.0') 
price_asks_g_TWTTRY = Decimal('0.0') 
qty_asks_g_TWTTRY = Decimal('0.0') 
stepSize_g_TWTTRY = Decimal('0.01') 


def on_message_TWTTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TWTTRY = 'TWTTRY' 
	price_bids_c_l_TWTTRY = data['b'] 
	qty_bids_c_l_TWTTRY = data['B'] 
	price_asks_c_l_TWTTRY = data['a'] 
	qty_asks_c_l_TWTTRY = data['A'] 

	global symbol_g_TWTTRY 
	global price_bids_g_TWTTRY 
	global qty_bids_g_TWTTRY 
	global price_asks_g_TWTTRY 
	global qty_asks_g_TWTTRY 

	symbol_g_TWTTRY = symbol_c_l_TWTTRY 
	price_bids_g_TWTTRY = Decimal(price_bids_c_l_TWTTRY) 
	qty_bids_g_TWTTRY = Decimal(qty_bids_c_l_TWTTRY) 
	price_asks_g_TWTTRY = Decimal(price_asks_c_l_TWTTRY) 
	qty_asks_g_TWTTRY = Decimal(qty_asks_c_l_TWTTRY) 


def loop_TWTTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/twttry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TWTTRY) 
	ws.run_forever() 


Thread(target=loop_TWTTRY).start() 
symbol_g_FISBRL = 'FISBRL' 
price_bids_g_FISBRL = Decimal('0.0') 
qty_bids_g_FISBRL = Decimal('0.0') 
price_asks_g_FISBRL = Decimal('0.0') 
qty_asks_g_FISBRL = Decimal('0.0') 
stepSize_g_FISBRL = Decimal('0.1') 


def on_message_FISBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FISBRL = 'FISBRL' 
	price_bids_c_l_FISBRL = data['b'] 
	qty_bids_c_l_FISBRL = data['B'] 
	price_asks_c_l_FISBRL = data['a'] 
	qty_asks_c_l_FISBRL = data['A'] 

	global symbol_g_FISBRL 
	global price_bids_g_FISBRL 
	global qty_bids_g_FISBRL 
	global price_asks_g_FISBRL 
	global qty_asks_g_FISBRL 

	symbol_g_FISBRL = symbol_c_l_FISBRL 
	price_bids_g_FISBRL = Decimal(price_bids_c_l_FISBRL) 
	qty_bids_g_FISBRL = Decimal(qty_bids_c_l_FISBRL) 
	price_asks_g_FISBRL = Decimal(price_asks_c_l_FISBRL) 
	qty_asks_g_FISBRL = Decimal(qty_asks_c_l_FISBRL) 


def loop_FISBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fisbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FISBRL) 
	ws.run_forever() 


Thread(target=loop_FISBRL).start() 
symbol_g_ALICETRY = 'ALICETRY' 
price_bids_g_ALICETRY = Decimal('0.0') 
qty_bids_g_ALICETRY = Decimal('0.0') 
price_asks_g_ALICETRY = Decimal('0.0') 
qty_asks_g_ALICETRY = Decimal('0.0') 
stepSize_g_ALICETRY = Decimal('0.001') 


def on_message_ALICETRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALICETRY = 'ALICETRY' 
	price_bids_c_l_ALICETRY = data['b'] 
	qty_bids_c_l_ALICETRY = data['B'] 
	price_asks_c_l_ALICETRY = data['a'] 
	qty_asks_c_l_ALICETRY = data['A'] 

	global symbol_g_ALICETRY 
	global price_bids_g_ALICETRY 
	global qty_bids_g_ALICETRY 
	global price_asks_g_ALICETRY 
	global qty_asks_g_ALICETRY 

	symbol_g_ALICETRY = symbol_c_l_ALICETRY 
	price_bids_g_ALICETRY = Decimal(price_bids_c_l_ALICETRY) 
	qty_bids_g_ALICETRY = Decimal(qty_bids_c_l_ALICETRY) 
	price_asks_g_ALICETRY = Decimal(price_asks_c_l_ALICETRY) 
	qty_asks_g_ALICETRY = Decimal(qty_asks_c_l_ALICETRY) 


def loop_ALICETRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alicetry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALICETRY) 
	ws.run_forever() 


Thread(target=loop_ALICETRY).start() 
symbol_g_TKOBIDR = 'TKOBIDR' 
price_bids_g_TKOBIDR = Decimal('0.0') 
qty_bids_g_TKOBIDR = Decimal('0.0') 
price_asks_g_TKOBIDR = Decimal('0.0') 
qty_asks_g_TKOBIDR = Decimal('0.0') 
stepSize_g_TKOBIDR = Decimal('0.1') 


def on_message_TKOBIDR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TKOBIDR = 'TKOBIDR' 
	price_bids_c_l_TKOBIDR = data['b'] 
	qty_bids_c_l_TKOBIDR = data['B'] 
	price_asks_c_l_TKOBIDR = data['a'] 
	qty_asks_c_l_TKOBIDR = data['A'] 

	global symbol_g_TKOBIDR 
	global price_bids_g_TKOBIDR 
	global qty_bids_g_TKOBIDR 
	global price_asks_g_TKOBIDR 
	global qty_asks_g_TKOBIDR 

	symbol_g_TKOBIDR = symbol_c_l_TKOBIDR 
	price_bids_g_TKOBIDR = Decimal(price_bids_c_l_TKOBIDR) 
	qty_bids_g_TKOBIDR = Decimal(qty_bids_c_l_TKOBIDR) 
	price_asks_g_TKOBIDR = Decimal(price_asks_c_l_TKOBIDR) 
	qty_asks_g_TKOBIDR = Decimal(qty_asks_c_l_TKOBIDR) 


def loop_TKOBIDR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tkobidr@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TKOBIDR) 
	ws.run_forever() 


Thread(target=loop_TKOBIDR).start() 
symbol_g_TLMTRY = 'TLMTRY' 
price_bids_g_TLMTRY = Decimal('0.0') 
qty_bids_g_TLMTRY = Decimal('0.0') 
price_asks_g_TLMTRY = Decimal('0.0') 
qty_asks_g_TLMTRY = Decimal('0.0') 
stepSize_g_TLMTRY = Decimal('1.0') 


def on_message_TLMTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TLMTRY = 'TLMTRY' 
	price_bids_c_l_TLMTRY = data['b'] 
	qty_bids_c_l_TLMTRY = data['B'] 
	price_asks_c_l_TLMTRY = data['a'] 
	qty_asks_c_l_TLMTRY = data['A'] 

	global symbol_g_TLMTRY 
	global price_bids_g_TLMTRY 
	global qty_bids_g_TLMTRY 
	global price_asks_g_TLMTRY 
	global qty_asks_g_TLMTRY 

	symbol_g_TLMTRY = symbol_c_l_TLMTRY 
	price_bids_g_TLMTRY = Decimal(price_bids_c_l_TLMTRY) 
	qty_bids_g_TLMTRY = Decimal(qty_bids_c_l_TLMTRY) 
	price_asks_g_TLMTRY = Decimal(price_asks_c_l_TLMTRY) 
	qty_asks_g_TLMTRY = Decimal(qty_asks_c_l_TLMTRY) 


def loop_TLMTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tlmtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TLMTRY) 
	ws.run_forever() 


Thread(target=loop_TLMTRY).start() 
symbol_g_SLPTRY = 'SLPTRY' 
price_bids_g_SLPTRY = Decimal('0.0') 
qty_bids_g_SLPTRY = Decimal('0.0') 
price_asks_g_SLPTRY = Decimal('0.0') 
qty_asks_g_SLPTRY = Decimal('0.0') 
stepSize_g_SLPTRY = Decimal('1.0') 


def on_message_SLPTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SLPTRY = 'SLPTRY' 
	price_bids_c_l_SLPTRY = data['b'] 
	qty_bids_c_l_SLPTRY = data['B'] 
	price_asks_c_l_SLPTRY = data['a'] 
	qty_asks_c_l_SLPTRY = data['A'] 

	global symbol_g_SLPTRY 
	global price_bids_g_SLPTRY 
	global qty_bids_g_SLPTRY 
	global price_asks_g_SLPTRY 
	global qty_asks_g_SLPTRY 

	symbol_g_SLPTRY = symbol_c_l_SLPTRY 
	price_bids_g_SLPTRY = Decimal(price_bids_c_l_SLPTRY) 
	qty_bids_g_SLPTRY = Decimal(qty_bids_c_l_SLPTRY) 
	price_asks_g_SLPTRY = Decimal(price_asks_c_l_SLPTRY) 
	qty_asks_g_SLPTRY = Decimal(qty_asks_c_l_SLPTRY) 


def loop_SLPTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/slptry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SLPTRY) 
	ws.run_forever() 


Thread(target=loop_SLPTRY).start() 
symbol_g_SHIBBRL = 'SHIBBRL' 
price_bids_g_SHIBBRL = Decimal('0.0') 
qty_bids_g_SHIBBRL = Decimal('0.0') 
price_asks_g_SHIBBRL = Decimal('0.0') 
qty_asks_g_SHIBBRL = Decimal('0.0') 
stepSize_g_SHIBBRL = Decimal('1.0') 


def on_message_SHIBBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SHIBBRL = 'SHIBBRL' 
	price_bids_c_l_SHIBBRL = data['b'] 
	qty_bids_c_l_SHIBBRL = data['B'] 
	price_asks_c_l_SHIBBRL = data['a'] 
	qty_asks_c_l_SHIBBRL = data['A'] 

	global symbol_g_SHIBBRL 
	global price_bids_g_SHIBBRL 
	global qty_bids_g_SHIBBRL 
	global price_asks_g_SHIBBRL 
	global qty_asks_g_SHIBBRL 

	symbol_g_SHIBBRL = symbol_c_l_SHIBBRL 
	price_bids_g_SHIBBRL = Decimal(price_bids_c_l_SHIBBRL) 
	qty_bids_g_SHIBBRL = Decimal(qty_bids_c_l_SHIBBRL) 
	price_asks_g_SHIBBRL = Decimal(price_asks_c_l_SHIBBRL) 
	qty_asks_g_SHIBBRL = Decimal(qty_asks_c_l_SHIBBRL) 


def loop_SHIBBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/shibbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SHIBBRL) 
	ws.run_forever() 


Thread(target=loop_SHIBBRL).start() 
symbol_g_SHIBTRY = 'SHIBTRY' 
price_bids_g_SHIBTRY = Decimal('0.0') 
qty_bids_g_SHIBTRY = Decimal('0.0') 
price_asks_g_SHIBTRY = Decimal('0.0') 
qty_asks_g_SHIBTRY = Decimal('0.0') 
stepSize_g_SHIBTRY = Decimal('1.0') 


def on_message_SHIBTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SHIBTRY = 'SHIBTRY' 
	price_bids_c_l_SHIBTRY = data['b'] 
	qty_bids_c_l_SHIBTRY = data['B'] 
	price_asks_c_l_SHIBTRY = data['a'] 
	qty_asks_c_l_SHIBTRY = data['A'] 

	global symbol_g_SHIBTRY 
	global price_bids_g_SHIBTRY 
	global qty_bids_g_SHIBTRY 
	global price_asks_g_SHIBTRY 
	global qty_asks_g_SHIBTRY 

	symbol_g_SHIBTRY = symbol_c_l_SHIBTRY 
	price_bids_g_SHIBTRY = Decimal(price_bids_c_l_SHIBTRY) 
	qty_bids_g_SHIBTRY = Decimal(qty_bids_c_l_SHIBTRY) 
	price_asks_g_SHIBTRY = Decimal(price_asks_c_l_SHIBTRY) 
	qty_asks_g_SHIBTRY = Decimal(qty_asks_c_l_SHIBTRY) 


def loop_SHIBTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/shibtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SHIBTRY) 
	ws.run_forever() 


Thread(target=loop_SHIBTRY).start() 
symbol_g_ICPTRY = 'ICPTRY' 
price_bids_g_ICPTRY = Decimal('0.0') 
qty_bids_g_ICPTRY = Decimal('0.0') 
price_asks_g_ICPTRY = Decimal('0.0') 
qty_asks_g_ICPTRY = Decimal('0.0') 
stepSize_g_ICPTRY = Decimal('0.001') 


def on_message_ICPTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ICPTRY = 'ICPTRY' 
	price_bids_c_l_ICPTRY = data['b'] 
	qty_bids_c_l_ICPTRY = data['B'] 
	price_asks_c_l_ICPTRY = data['a'] 
	qty_asks_c_l_ICPTRY = data['A'] 

	global symbol_g_ICPTRY 
	global price_bids_g_ICPTRY 
	global qty_bids_g_ICPTRY 
	global price_asks_g_ICPTRY 
	global qty_asks_g_ICPTRY 

	symbol_g_ICPTRY = symbol_c_l_ICPTRY 
	price_bids_g_ICPTRY = Decimal(price_bids_c_l_ICPTRY) 
	qty_bids_g_ICPTRY = Decimal(qty_bids_c_l_ICPTRY) 
	price_asks_g_ICPTRY = Decimal(price_asks_c_l_ICPTRY) 
	qty_asks_g_ICPTRY = Decimal(qty_asks_c_l_ICPTRY) 


def loop_ICPTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/icptry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ICPTRY) 
	ws.run_forever() 


Thread(target=loop_ICPTRY).start() 
symbol_g_C98BRL = 'C98BRL' 
price_bids_g_C98BRL = Decimal('0.0') 
qty_bids_g_C98BRL = Decimal('0.0') 
price_asks_g_C98BRL = Decimal('0.0') 
qty_asks_g_C98BRL = Decimal('0.0') 
stepSize_g_C98BRL = Decimal('0.1') 


def on_message_C98BRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_C98BRL = 'C98BRL' 
	price_bids_c_l_C98BRL = data['b'] 
	qty_bids_c_l_C98BRL = data['B'] 
	price_asks_c_l_C98BRL = data['a'] 
	qty_asks_c_l_C98BRL = data['A'] 

	global symbol_g_C98BRL 
	global price_bids_g_C98BRL 
	global qty_bids_g_C98BRL 
	global price_asks_g_C98BRL 
	global qty_asks_g_C98BRL 

	symbol_g_C98BRL = symbol_c_l_C98BRL 
	price_bids_g_C98BRL = Decimal(price_bids_c_l_C98BRL) 
	qty_bids_g_C98BRL = Decimal(qty_bids_c_l_C98BRL) 
	price_asks_g_C98BRL = Decimal(price_asks_c_l_C98BRL) 
	qty_asks_g_C98BRL = Decimal(qty_asks_c_l_C98BRL) 


def loop_C98BRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/c98brl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_C98BRL) 
	ws.run_forever() 


Thread(target=loop_C98BRL).start() 
symbol_g_MINATRY = 'MINATRY' 
price_bids_g_MINATRY = Decimal('0.0') 
qty_bids_g_MINATRY = Decimal('0.0') 
price_asks_g_MINATRY = Decimal('0.0') 
qty_asks_g_MINATRY = Decimal('0.0') 
stepSize_g_MINATRY = Decimal('0.01') 


def on_message_MINATRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MINATRY = 'MINATRY' 
	price_bids_c_l_MINATRY = data['b'] 
	qty_bids_c_l_MINATRY = data['B'] 
	price_asks_c_l_MINATRY = data['a'] 
	qty_asks_c_l_MINATRY = data['A'] 

	global symbol_g_MINATRY 
	global price_bids_g_MINATRY 
	global qty_bids_g_MINATRY 
	global price_asks_g_MINATRY 
	global qty_asks_g_MINATRY 

	symbol_g_MINATRY = symbol_c_l_MINATRY 
	price_bids_g_MINATRY = Decimal(price_bids_c_l_MINATRY) 
	qty_bids_g_MINATRY = Decimal(qty_bids_c_l_MINATRY) 
	price_asks_g_MINATRY = Decimal(price_asks_c_l_MINATRY) 
	qty_asks_g_MINATRY = Decimal(qty_asks_c_l_MINATRY) 


def loop_MINATRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/minatry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MINATRY) 
	ws.run_forever() 


Thread(target=loop_MINATRY).start() 
symbol_g_MBOXTRY = 'MBOXTRY' 
price_bids_g_MBOXTRY = Decimal('0.0') 
qty_bids_g_MBOXTRY = Decimal('0.0') 
price_asks_g_MBOXTRY = Decimal('0.0') 
qty_asks_g_MBOXTRY = Decimal('0.0') 
stepSize_g_MBOXTRY = Decimal('0.01') 


def on_message_MBOXTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MBOXTRY = 'MBOXTRY' 
	price_bids_c_l_MBOXTRY = data['b'] 
	qty_bids_c_l_MBOXTRY = data['B'] 
	price_asks_c_l_MBOXTRY = data['a'] 
	qty_asks_c_l_MBOXTRY = data['A'] 

	global symbol_g_MBOXTRY 
	global price_bids_g_MBOXTRY 
	global qty_bids_g_MBOXTRY 
	global price_asks_g_MBOXTRY 
	global qty_asks_g_MBOXTRY 

	symbol_g_MBOXTRY = symbol_c_l_MBOXTRY 
	price_bids_g_MBOXTRY = Decimal(price_bids_c_l_MBOXTRY) 
	qty_bids_g_MBOXTRY = Decimal(qty_bids_c_l_MBOXTRY) 
	price_asks_g_MBOXTRY = Decimal(price_asks_c_l_MBOXTRY) 
	qty_asks_g_MBOXTRY = Decimal(qty_asks_c_l_MBOXTRY) 


def loop_MBOXTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mboxtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MBOXTRY) 
	ws.run_forever() 


Thread(target=loop_MBOXTRY).start() 
symbol_g_GALABRL = 'GALABRL' 
price_bids_g_GALABRL = Decimal('0.0') 
qty_bids_g_GALABRL = Decimal('0.0') 
price_asks_g_GALABRL = Decimal('0.0') 
qty_asks_g_GALABRL = Decimal('0.0') 
stepSize_g_GALABRL = Decimal('0.1') 


def on_message_GALABRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALABRL = 'GALABRL' 
	price_bids_c_l_GALABRL = data['b'] 
	qty_bids_c_l_GALABRL = data['B'] 
	price_asks_c_l_GALABRL = data['a'] 
	qty_asks_c_l_GALABRL = data['A'] 

	global symbol_g_GALABRL 
	global price_bids_g_GALABRL 
	global qty_bids_g_GALABRL 
	global price_asks_g_GALABRL 
	global qty_asks_g_GALABRL 

	symbol_g_GALABRL = symbol_c_l_GALABRL 
	price_bids_g_GALABRL = Decimal(price_bids_c_l_GALABRL) 
	qty_bids_g_GALABRL = Decimal(qty_bids_c_l_GALABRL) 
	price_asks_g_GALABRL = Decimal(price_asks_c_l_GALABRL) 
	qty_asks_g_GALABRL = Decimal(qty_asks_c_l_GALABRL) 


def loop_GALABRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galabrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALABRL) 
	ws.run_forever() 


Thread(target=loop_GALABRL).start() 
symbol_g_GALATRY = 'GALATRY' 
price_bids_g_GALATRY = Decimal('0.0') 
qty_bids_g_GALATRY = Decimal('0.0') 
price_asks_g_GALATRY = Decimal('0.0') 
qty_asks_g_GALATRY = Decimal('0.0') 
stepSize_g_GALATRY = Decimal('0.1') 


def on_message_GALATRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALATRY = 'GALATRY' 
	price_bids_c_l_GALATRY = data['b'] 
	qty_bids_c_l_GALATRY = data['B'] 
	price_asks_c_l_GALATRY = data['a'] 
	qty_asks_c_l_GALATRY = data['A'] 

	global symbol_g_GALATRY 
	global price_bids_g_GALATRY 
	global qty_bids_g_GALATRY 
	global price_asks_g_GALATRY 
	global qty_asks_g_GALATRY 

	symbol_g_GALATRY = symbol_c_l_GALATRY 
	price_bids_g_GALATRY = Decimal(price_bids_c_l_GALATRY) 
	qty_bids_g_GALATRY = Decimal(qty_bids_c_l_GALATRY) 
	price_asks_g_GALATRY = Decimal(price_asks_c_l_GALATRY) 
	qty_asks_g_GALATRY = Decimal(qty_asks_c_l_GALATRY) 


def loop_GALATRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galatry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALATRY) 
	ws.run_forever() 


Thread(target=loop_GALATRY).start() 
symbol_g_LAZIOTRY = 'LAZIOTRY' 
price_bids_g_LAZIOTRY = Decimal('0.0') 
qty_bids_g_LAZIOTRY = Decimal('0.0') 
price_asks_g_LAZIOTRY = Decimal('0.0') 
qty_asks_g_LAZIOTRY = Decimal('0.0') 
stepSize_g_LAZIOTRY = Decimal('0.01') 


def on_message_LAZIOTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LAZIOTRY = 'LAZIOTRY' 
	price_bids_c_l_LAZIOTRY = data['b'] 
	qty_bids_c_l_LAZIOTRY = data['B'] 
	price_asks_c_l_LAZIOTRY = data['a'] 
	qty_asks_c_l_LAZIOTRY = data['A'] 

	global symbol_g_LAZIOTRY 
	global price_bids_g_LAZIOTRY 
	global qty_bids_g_LAZIOTRY 
	global price_asks_g_LAZIOTRY 
	global qty_asks_g_LAZIOTRY 

	symbol_g_LAZIOTRY = symbol_c_l_LAZIOTRY 
	price_bids_g_LAZIOTRY = Decimal(price_bids_c_l_LAZIOTRY) 
	qty_bids_g_LAZIOTRY = Decimal(qty_bids_c_l_LAZIOTRY) 
	price_asks_g_LAZIOTRY = Decimal(price_asks_c_l_LAZIOTRY) 
	qty_asks_g_LAZIOTRY = Decimal(qty_asks_c_l_LAZIOTRY) 


def loop_LAZIOTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/laziotry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LAZIOTRY) 
	ws.run_forever() 


Thread(target=loop_LAZIOTRY).start() 
symbol_g_DARTRY = 'DARTRY' 
price_bids_g_DARTRY = Decimal('0.0') 
qty_bids_g_DARTRY = Decimal('0.0') 
price_asks_g_DARTRY = Decimal('0.0') 
qty_asks_g_DARTRY = Decimal('0.0') 
stepSize_g_DARTRY = Decimal('0.01') 


def on_message_DARTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DARTRY = 'DARTRY' 
	price_bids_c_l_DARTRY = data['b'] 
	qty_bids_c_l_DARTRY = data['B'] 
	price_asks_c_l_DARTRY = data['a'] 
	qty_asks_c_l_DARTRY = data['A'] 

	global symbol_g_DARTRY 
	global price_bids_g_DARTRY 
	global qty_bids_g_DARTRY 
	global price_asks_g_DARTRY 
	global qty_asks_g_DARTRY 

	symbol_g_DARTRY = symbol_c_l_DARTRY 
	price_bids_g_DARTRY = Decimal(price_bids_c_l_DARTRY) 
	qty_bids_g_DARTRY = Decimal(qty_bids_c_l_DARTRY) 
	price_asks_g_DARTRY = Decimal(price_asks_c_l_DARTRY) 
	qty_asks_g_DARTRY = Decimal(qty_asks_c_l_DARTRY) 


def loop_DARTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dartry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DARTRY) 
	ws.run_forever() 


Thread(target=loop_DARTRY).start() 
symbol_g_ENSTRY = 'ENSTRY' 
price_bids_g_ENSTRY = Decimal('0.0') 
qty_bids_g_ENSTRY = Decimal('0.0') 
price_asks_g_ENSTRY = Decimal('0.0') 
qty_asks_g_ENSTRY = Decimal('0.0') 
stepSize_g_ENSTRY = Decimal('0.001') 


def on_message_ENSTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENSTRY = 'ENSTRY' 
	price_bids_c_l_ENSTRY = data['b'] 
	qty_bids_c_l_ENSTRY = data['B'] 
	price_asks_c_l_ENSTRY = data['a'] 
	qty_asks_c_l_ENSTRY = data['A'] 

	global symbol_g_ENSTRY 
	global price_bids_g_ENSTRY 
	global qty_bids_g_ENSTRY 
	global price_asks_g_ENSTRY 
	global qty_asks_g_ENSTRY 

	symbol_g_ENSTRY = symbol_c_l_ENSTRY 
	price_bids_g_ENSTRY = Decimal(price_bids_c_l_ENSTRY) 
	qty_bids_g_ENSTRY = Decimal(qty_bids_c_l_ENSTRY) 
	price_asks_g_ENSTRY = Decimal(price_asks_c_l_ENSTRY) 
	qty_asks_g_ENSTRY = Decimal(qty_asks_c_l_ENSTRY) 


def loop_ENSTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/enstry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENSTRY) 
	ws.run_forever() 


Thread(target=loop_ENSTRY).start() 
symbol_g_PORTOTRY = 'PORTOTRY' 
price_bids_g_PORTOTRY = Decimal('0.0') 
qty_bids_g_PORTOTRY = Decimal('0.0') 
price_asks_g_PORTOTRY = Decimal('0.0') 
qty_asks_g_PORTOTRY = Decimal('0.0') 
stepSize_g_PORTOTRY = Decimal('0.01') 


def on_message_PORTOTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PORTOTRY = 'PORTOTRY' 
	price_bids_c_l_PORTOTRY = data['b'] 
	qty_bids_c_l_PORTOTRY = data['B'] 
	price_asks_c_l_PORTOTRY = data['a'] 
	qty_asks_c_l_PORTOTRY = data['A'] 

	global symbol_g_PORTOTRY 
	global price_bids_g_PORTOTRY 
	global qty_bids_g_PORTOTRY 
	global price_asks_g_PORTOTRY 
	global qty_asks_g_PORTOTRY 

	symbol_g_PORTOTRY = symbol_c_l_PORTOTRY 
	price_bids_g_PORTOTRY = Decimal(price_bids_c_l_PORTOTRY) 
	qty_bids_g_PORTOTRY = Decimal(qty_bids_c_l_PORTOTRY) 
	price_asks_g_PORTOTRY = Decimal(price_asks_c_l_PORTOTRY) 
	qty_asks_g_PORTOTRY = Decimal(qty_asks_c_l_PORTOTRY) 


def loop_PORTOTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/portotry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PORTOTRY) 
	ws.run_forever() 


Thread(target=loop_PORTOTRY).start() 
symbol_g_JASMYTRY = 'JASMYTRY' 
price_bids_g_JASMYTRY = Decimal('0.0') 
qty_bids_g_JASMYTRY = Decimal('0.0') 
price_asks_g_JASMYTRY = Decimal('0.0') 
qty_asks_g_JASMYTRY = Decimal('0.0') 
stepSize_g_JASMYTRY = Decimal('1.0') 


def on_message_JASMYTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JASMYTRY = 'JASMYTRY' 
	price_bids_c_l_JASMYTRY = data['b'] 
	qty_bids_c_l_JASMYTRY = data['B'] 
	price_asks_c_l_JASMYTRY = data['a'] 
	qty_asks_c_l_JASMYTRY = data['A'] 

	global symbol_g_JASMYTRY 
	global price_bids_g_JASMYTRY 
	global qty_bids_g_JASMYTRY 
	global price_asks_g_JASMYTRY 
	global qty_asks_g_JASMYTRY 

	symbol_g_JASMYTRY = symbol_c_l_JASMYTRY 
	price_bids_g_JASMYTRY = Decimal(price_bids_c_l_JASMYTRY) 
	qty_bids_g_JASMYTRY = Decimal(qty_bids_c_l_JASMYTRY) 
	price_asks_g_JASMYTRY = Decimal(price_asks_c_l_JASMYTRY) 
	qty_asks_g_JASMYTRY = Decimal(qty_asks_c_l_JASMYTRY) 


def loop_JASMYTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/jasmytry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JASMYTRY) 
	ws.run_forever() 


Thread(target=loop_JASMYTRY).start() 
symbol_g_SANTOSBRL = 'SANTOSBRL' 
price_bids_g_SANTOSBRL = Decimal('0.0') 
qty_bids_g_SANTOSBRL = Decimal('0.0') 
price_asks_g_SANTOSBRL = Decimal('0.0') 
qty_asks_g_SANTOSBRL = Decimal('0.0') 
stepSize_g_SANTOSBRL = Decimal('0.01') 


def on_message_SANTOSBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SANTOSBRL = 'SANTOSBRL' 
	price_bids_c_l_SANTOSBRL = data['b'] 
	qty_bids_c_l_SANTOSBRL = data['B'] 
	price_asks_c_l_SANTOSBRL = data['a'] 
	qty_asks_c_l_SANTOSBRL = data['A'] 

	global symbol_g_SANTOSBRL 
	global price_bids_g_SANTOSBRL 
	global qty_bids_g_SANTOSBRL 
	global price_asks_g_SANTOSBRL 
	global qty_asks_g_SANTOSBRL 

	symbol_g_SANTOSBRL = symbol_c_l_SANTOSBRL 
	price_bids_g_SANTOSBRL = Decimal(price_bids_c_l_SANTOSBRL) 
	qty_bids_g_SANTOSBRL = Decimal(qty_bids_c_l_SANTOSBRL) 
	price_asks_g_SANTOSBRL = Decimal(price_asks_c_l_SANTOSBRL) 
	qty_asks_g_SANTOSBRL = Decimal(qty_asks_c_l_SANTOSBRL) 


def loop_SANTOSBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/santosbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SANTOSBRL) 
	ws.run_forever() 


Thread(target=loop_SANTOSBRL).start() 
symbol_g_SANTOSTRY = 'SANTOSTRY' 
price_bids_g_SANTOSTRY = Decimal('0.0') 
qty_bids_g_SANTOSTRY = Decimal('0.0') 
price_asks_g_SANTOSTRY = Decimal('0.0') 
qty_asks_g_SANTOSTRY = Decimal('0.0') 
stepSize_g_SANTOSTRY = Decimal('0.01') 


def on_message_SANTOSTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SANTOSTRY = 'SANTOSTRY' 
	price_bids_c_l_SANTOSTRY = data['b'] 
	qty_bids_c_l_SANTOSTRY = data['B'] 
	price_asks_c_l_SANTOSTRY = data['a'] 
	qty_asks_c_l_SANTOSTRY = data['A'] 

	global symbol_g_SANTOSTRY 
	global price_bids_g_SANTOSTRY 
	global qty_bids_g_SANTOSTRY 
	global price_asks_g_SANTOSTRY 
	global qty_asks_g_SANTOSTRY 

	symbol_g_SANTOSTRY = symbol_c_l_SANTOSTRY 
	price_bids_g_SANTOSTRY = Decimal(price_bids_c_l_SANTOSTRY) 
	qty_bids_g_SANTOSTRY = Decimal(qty_bids_c_l_SANTOSTRY) 
	price_asks_g_SANTOSTRY = Decimal(price_asks_c_l_SANTOSTRY) 
	qty_asks_g_SANTOSTRY = Decimal(qty_asks_c_l_SANTOSTRY) 


def loop_SANTOSTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/santostry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SANTOSTRY) 
	ws.run_forever() 


Thread(target=loop_SANTOSTRY).start() 
symbol_g_SPELLTRY = 'SPELLTRY' 
price_bids_g_SPELLTRY = Decimal('0.0') 
qty_bids_g_SPELLTRY = Decimal('0.0') 
price_asks_g_SPELLTRY = Decimal('0.0') 
qty_asks_g_SPELLTRY = Decimal('0.0') 
stepSize_g_SPELLTRY = Decimal('1.0') 


def on_message_SPELLTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SPELLTRY = 'SPELLTRY' 
	price_bids_c_l_SPELLTRY = data['b'] 
	qty_bids_c_l_SPELLTRY = data['B'] 
	price_asks_c_l_SPELLTRY = data['a'] 
	qty_asks_c_l_SPELLTRY = data['A'] 

	global symbol_g_SPELLTRY 
	global price_bids_g_SPELLTRY 
	global qty_bids_g_SPELLTRY 
	global price_asks_g_SPELLTRY 
	global qty_asks_g_SPELLTRY 

	symbol_g_SPELLTRY = symbol_c_l_SPELLTRY 
	price_bids_g_SPELLTRY = Decimal(price_bids_c_l_SPELLTRY) 
	qty_bids_g_SPELLTRY = Decimal(qty_bids_c_l_SPELLTRY) 
	price_asks_g_SPELLTRY = Decimal(price_asks_c_l_SPELLTRY) 
	qty_asks_g_SPELLTRY = Decimal(qty_asks_c_l_SPELLTRY) 


def loop_SPELLTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/spelltry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SPELLTRY) 
	ws.run_forever() 


Thread(target=loop_SPELLTRY).start() 
symbol_g_API3TRY = 'API3TRY' 
price_bids_g_API3TRY = Decimal('0.0') 
qty_bids_g_API3TRY = Decimal('0.0') 
price_asks_g_API3TRY = Decimal('0.0') 
qty_asks_g_API3TRY = Decimal('0.0') 
stepSize_g_API3TRY = Decimal('0.01') 


def on_message_API3TRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_API3TRY = 'API3TRY' 
	price_bids_c_l_API3TRY = data['b'] 
	qty_bids_c_l_API3TRY = data['B'] 
	price_asks_c_l_API3TRY = data['a'] 
	qty_asks_c_l_API3TRY = data['A'] 

	global symbol_g_API3TRY 
	global price_bids_g_API3TRY 
	global qty_bids_g_API3TRY 
	global price_asks_g_API3TRY 
	global qty_asks_g_API3TRY 

	symbol_g_API3TRY = symbol_c_l_API3TRY 
	price_bids_g_API3TRY = Decimal(price_bids_c_l_API3TRY) 
	qty_bids_g_API3TRY = Decimal(qty_bids_c_l_API3TRY) 
	price_asks_g_API3TRY = Decimal(price_asks_c_l_API3TRY) 
	qty_asks_g_API3TRY = Decimal(qty_asks_c_l_API3TRY) 


def loop_API3TRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/api3try@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_API3TRY) 
	ws.run_forever() 


Thread(target=loop_API3TRY).start() 
symbol_g_BTTCTRY = 'BTTCTRY' 
price_bids_g_BTTCTRY = Decimal('0.0') 
qty_bids_g_BTTCTRY = Decimal('0.0') 
price_asks_g_BTTCTRY = Decimal('0.0') 
qty_asks_g_BTTCTRY = Decimal('0.0') 
stepSize_g_BTTCTRY = Decimal('1.0') 


def on_message_BTTCTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTTCTRY = 'BTTCTRY' 
	price_bids_c_l_BTTCTRY = data['b'] 
	qty_bids_c_l_BTTCTRY = data['B'] 
	price_asks_c_l_BTTCTRY = data['a'] 
	qty_asks_c_l_BTTCTRY = data['A'] 

	global symbol_g_BTTCTRY 
	global price_bids_g_BTTCTRY 
	global qty_bids_g_BTTCTRY 
	global price_asks_g_BTTCTRY 
	global qty_asks_g_BTTCTRY 

	symbol_g_BTTCTRY = symbol_c_l_BTTCTRY 
	price_bids_g_BTTCTRY = Decimal(price_bids_c_l_BTTCTRY) 
	qty_bids_g_BTTCTRY = Decimal(qty_bids_c_l_BTTCTRY) 
	price_asks_g_BTTCTRY = Decimal(price_asks_c_l_BTTCTRY) 
	qty_asks_g_BTTCTRY = Decimal(qty_asks_c_l_BTTCTRY) 


def loop_BTTCTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bttctry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTTCTRY) 
	ws.run_forever() 


Thread(target=loop_BTTCTRY).start() 
symbol_g_ALPINETRY = 'ALPINETRY' 
price_bids_g_ALPINETRY = Decimal('0.0') 
qty_bids_g_ALPINETRY = Decimal('0.0') 
price_asks_g_ALPINETRY = Decimal('0.0') 
qty_asks_g_ALPINETRY = Decimal('0.0') 
stepSize_g_ALPINETRY = Decimal('0.01') 


def on_message_ALPINETRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALPINETRY = 'ALPINETRY' 
	price_bids_c_l_ALPINETRY = data['b'] 
	qty_bids_c_l_ALPINETRY = data['B'] 
	price_asks_c_l_ALPINETRY = data['a'] 
	qty_asks_c_l_ALPINETRY = data['A'] 

	global symbol_g_ALPINETRY 
	global price_bids_g_ALPINETRY 
	global qty_bids_g_ALPINETRY 
	global price_asks_g_ALPINETRY 
	global qty_asks_g_ALPINETRY 

	symbol_g_ALPINETRY = symbol_c_l_ALPINETRY 
	price_bids_g_ALPINETRY = Decimal(price_bids_c_l_ALPINETRY) 
	qty_bids_g_ALPINETRY = Decimal(qty_bids_c_l_ALPINETRY) 
	price_asks_g_ALPINETRY = Decimal(price_asks_c_l_ALPINETRY) 
	qty_asks_g_ALPINETRY = Decimal(qty_asks_c_l_ALPINETRY) 


def loop_ALPINETRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alpinetry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALPINETRY) 
	ws.run_forever() 


Thread(target=loop_ALPINETRY).start() 
symbol_g_GMTBRL = 'GMTBRL' 
price_bids_g_GMTBRL = Decimal('0.0') 
qty_bids_g_GMTBRL = Decimal('0.0') 
price_asks_g_GMTBRL = Decimal('0.0') 
qty_asks_g_GMTBRL = Decimal('0.0') 
stepSize_g_GMTBRL = Decimal('0.1') 


def on_message_GMTBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GMTBRL = 'GMTBRL' 
	price_bids_c_l_GMTBRL = data['b'] 
	qty_bids_c_l_GMTBRL = data['B'] 
	price_asks_c_l_GMTBRL = data['a'] 
	qty_asks_c_l_GMTBRL = data['A'] 

	global symbol_g_GMTBRL 
	global price_bids_g_GMTBRL 
	global qty_bids_g_GMTBRL 
	global price_asks_g_GMTBRL 
	global qty_asks_g_GMTBRL 

	symbol_g_GMTBRL = symbol_c_l_GMTBRL 
	price_bids_g_GMTBRL = Decimal(price_bids_c_l_GMTBRL) 
	qty_bids_g_GMTBRL = Decimal(qty_bids_c_l_GMTBRL) 
	price_asks_g_GMTBRL = Decimal(price_asks_c_l_GMTBRL) 
	qty_asks_g_GMTBRL = Decimal(qty_asks_c_l_GMTBRL) 


def loop_GMTBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gmtbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GMTBRL) 
	ws.run_forever() 


Thread(target=loop_GMTBRL).start() 
symbol_g_GMTTRY = 'GMTTRY' 
price_bids_g_GMTTRY = Decimal('0.0') 
qty_bids_g_GMTTRY = Decimal('0.0') 
price_asks_g_GMTTRY = Decimal('0.0') 
qty_asks_g_GMTTRY = Decimal('0.0') 
stepSize_g_GMTTRY = Decimal('0.01') 


def on_message_GMTTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GMTTRY = 'GMTTRY' 
	price_bids_c_l_GMTTRY = data['b'] 
	qty_bids_c_l_GMTTRY = data['B'] 
	price_asks_c_l_GMTTRY = data['a'] 
	qty_asks_c_l_GMTTRY = data['A'] 

	global symbol_g_GMTTRY 
	global price_bids_g_GMTTRY 
	global qty_bids_g_GMTTRY 
	global price_asks_g_GMTTRY 
	global qty_asks_g_GMTTRY 

	symbol_g_GMTTRY = symbol_c_l_GMTTRY 
	price_bids_g_GMTTRY = Decimal(price_bids_c_l_GMTTRY) 
	qty_bids_g_GMTTRY = Decimal(qty_bids_c_l_GMTTRY) 
	price_asks_g_GMTTRY = Decimal(price_asks_c_l_GMTTRY) 
	qty_asks_g_GMTTRY = Decimal(qty_asks_c_l_GMTTRY) 


def loop_GMTTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gmttry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GMTTRY) 
	ws.run_forever() 


Thread(target=loop_GMTTRY).start() 
symbol_g_APETRY = 'APETRY' 
price_bids_g_APETRY = Decimal('0.0') 
qty_bids_g_APETRY = Decimal('0.0') 
price_asks_g_APETRY = Decimal('0.0') 
qty_asks_g_APETRY = Decimal('0.0') 
stepSize_g_APETRY = Decimal('0.001') 


def on_message_APETRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APETRY = 'APETRY' 
	price_bids_c_l_APETRY = data['b'] 
	qty_bids_c_l_APETRY = data['B'] 
	price_asks_c_l_APETRY = data['a'] 
	qty_asks_c_l_APETRY = data['A'] 

	global symbol_g_APETRY 
	global price_bids_g_APETRY 
	global qty_bids_g_APETRY 
	global price_asks_g_APETRY 
	global qty_asks_g_APETRY 

	symbol_g_APETRY = symbol_c_l_APETRY 
	price_bids_g_APETRY = Decimal(price_bids_c_l_APETRY) 
	qty_bids_g_APETRY = Decimal(qty_bids_c_l_APETRY) 
	price_asks_g_APETRY = Decimal(price_asks_c_l_APETRY) 
	qty_asks_g_APETRY = Decimal(qty_asks_c_l_APETRY) 


def loop_APETRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/apetry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APETRY) 
	ws.run_forever() 


Thread(target=loop_APETRY).start() 
symbol_g_APEBRL = 'APEBRL' 
price_bids_g_APEBRL = Decimal('0.0') 
qty_bids_g_APEBRL = Decimal('0.0') 
price_asks_g_APEBRL = Decimal('0.0') 
qty_asks_g_APEBRL = Decimal('0.0') 
stepSize_g_APEBRL = Decimal('0.01') 


def on_message_APEBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APEBRL = 'APEBRL' 
	price_bids_c_l_APEBRL = data['b'] 
	qty_bids_c_l_APEBRL = data['B'] 
	price_asks_c_l_APEBRL = data['a'] 
	qty_asks_c_l_APEBRL = data['A'] 

	global symbol_g_APEBRL 
	global price_bids_g_APEBRL 
	global qty_bids_g_APEBRL 
	global price_asks_g_APEBRL 
	global qty_asks_g_APEBRL 

	symbol_g_APEBRL = symbol_c_l_APEBRL 
	price_bids_g_APEBRL = Decimal(price_bids_c_l_APEBRL) 
	qty_bids_g_APEBRL = Decimal(qty_bids_c_l_APEBRL) 
	price_asks_g_APEBRL = Decimal(price_asks_c_l_APEBRL) 
	qty_asks_g_APEBRL = Decimal(qty_asks_c_l_APEBRL) 


def loop_APEBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/apebrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APEBRL) 
	ws.run_forever() 


Thread(target=loop_APEBRL).start() 
symbol_g_BSWTRY = 'BSWTRY' 
price_bids_g_BSWTRY = Decimal('0.0') 
qty_bids_g_BSWTRY = Decimal('0.0') 
price_asks_g_BSWTRY = Decimal('0.0') 
qty_asks_g_BSWTRY = Decimal('0.0') 
stepSize_g_BSWTRY = Decimal('0.01') 


def on_message_BSWTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BSWTRY = 'BSWTRY' 
	price_bids_c_l_BSWTRY = data['b'] 
	qty_bids_c_l_BSWTRY = data['B'] 
	price_asks_c_l_BSWTRY = data['a'] 
	qty_asks_c_l_BSWTRY = data['A'] 

	global symbol_g_BSWTRY 
	global price_bids_g_BSWTRY 
	global qty_bids_g_BSWTRY 
	global price_asks_g_BSWTRY 
	global qty_asks_g_BSWTRY 

	symbol_g_BSWTRY = symbol_c_l_BSWTRY 
	price_bids_g_BSWTRY = Decimal(price_bids_c_l_BSWTRY) 
	qty_bids_g_BSWTRY = Decimal(qty_bids_c_l_BSWTRY) 
	price_asks_g_BSWTRY = Decimal(price_asks_c_l_BSWTRY) 
	qty_asks_g_BSWTRY = Decimal(qty_asks_c_l_BSWTRY) 


def loop_BSWTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bswtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BSWTRY) 
	ws.run_forever() 


Thread(target=loop_BSWTRY).start() 
symbol_g_GALTRY = 'GALTRY' 
price_bids_g_GALTRY = Decimal('0.0') 
qty_bids_g_GALTRY = Decimal('0.0') 
price_asks_g_GALTRY = Decimal('0.0') 
qty_asks_g_GALTRY = Decimal('0.0') 
stepSize_g_GALTRY = Decimal('0.001') 


def on_message_GALTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALTRY = 'GALTRY' 
	price_bids_c_l_GALTRY = data['b'] 
	qty_bids_c_l_GALTRY = data['B'] 
	price_asks_c_l_GALTRY = data['a'] 
	qty_asks_c_l_GALTRY = data['A'] 

	global symbol_g_GALTRY 
	global price_bids_g_GALTRY 
	global qty_bids_g_GALTRY 
	global price_asks_g_GALTRY 
	global qty_asks_g_GALTRY 

	symbol_g_GALTRY = symbol_c_l_GALTRY 
	price_bids_g_GALTRY = Decimal(price_bids_c_l_GALTRY) 
	qty_bids_g_GALTRY = Decimal(qty_bids_c_l_GALTRY) 
	price_asks_g_GALTRY = Decimal(price_asks_c_l_GALTRY) 
	qty_asks_g_GALTRY = Decimal(qty_asks_c_l_GALTRY) 


def loop_GALTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galtry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALTRY) 
	ws.run_forever() 


Thread(target=loop_GALTRY).start() 
symbol_g_GALBRL = 'GALBRL' 
price_bids_g_GALBRL = Decimal('0.0') 
qty_bids_g_GALBRL = Decimal('0.0') 
price_asks_g_GALBRL = Decimal('0.0') 
qty_asks_g_GALBRL = Decimal('0.0') 
stepSize_g_GALBRL = Decimal('0.01') 


def on_message_GALBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALBRL = 'GALBRL' 
	price_bids_c_l_GALBRL = data['b'] 
	qty_bids_c_l_GALBRL = data['B'] 
	price_asks_c_l_GALBRL = data['a'] 
	qty_asks_c_l_GALBRL = data['A'] 

	global symbol_g_GALBRL 
	global price_bids_g_GALBRL 
	global qty_bids_g_GALBRL 
	global price_asks_g_GALBRL 
	global qty_asks_g_GALBRL 

	symbol_g_GALBRL = symbol_c_l_GALBRL 
	price_bids_g_GALBRL = Decimal(price_bids_c_l_GALBRL) 
	qty_bids_g_GALBRL = Decimal(qty_bids_c_l_GALBRL) 
	price_asks_g_GALBRL = Decimal(price_asks_c_l_GALBRL) 
	qty_asks_g_GALBRL = Decimal(qty_asks_c_l_GALBRL) 


def loop_GALBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALBRL) 
	ws.run_forever() 


Thread(target=loop_GALBRL).start() 
symbol_g_APTTRY = 'APTTRY' 
price_bids_g_APTTRY = Decimal('0.0') 
qty_bids_g_APTTRY = Decimal('0.0') 
price_asks_g_APTTRY = Decimal('0.0') 
qty_asks_g_APTTRY = Decimal('0.0') 
stepSize_g_APTTRY = Decimal('0.01') 


def on_message_APTTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APTTRY = 'APTTRY' 
	price_bids_c_l_APTTRY = data['b'] 
	qty_bids_c_l_APTTRY = data['B'] 
	price_asks_c_l_APTTRY = data['a'] 
	qty_asks_c_l_APTTRY = data['A'] 

	global symbol_g_APTTRY 
	global price_bids_g_APTTRY 
	global qty_bids_g_APTTRY 
	global price_asks_g_APTTRY 
	global qty_asks_g_APTTRY 

	symbol_g_APTTRY = symbol_c_l_APTTRY 
	price_bids_g_APTTRY = Decimal(price_bids_c_l_APTTRY) 
	qty_bids_g_APTTRY = Decimal(qty_bids_c_l_APTTRY) 
	price_asks_g_APTTRY = Decimal(price_asks_c_l_APTTRY) 
	qty_asks_g_APTTRY = Decimal(qty_asks_c_l_APTTRY) 


def loop_APTTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/apttry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APTTRY) 
	ws.run_forever() 


Thread(target=loop_APTTRY).start() 
symbol_g_APTBRL = 'APTBRL' 
price_bids_g_APTBRL = Decimal('0.0') 
qty_bids_g_APTBRL = Decimal('0.0') 
price_asks_g_APTBRL = Decimal('0.0') 
qty_asks_g_APTBRL = Decimal('0.0') 
stepSize_g_APTBRL = Decimal('0.01') 


def on_message_APTBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APTBRL = 'APTBRL' 
	price_bids_c_l_APTBRL = data['b'] 
	qty_bids_c_l_APTBRL = data['B'] 
	price_asks_c_l_APTBRL = data['a'] 
	qty_asks_c_l_APTBRL = data['A'] 

	global symbol_g_APTBRL 
	global price_bids_g_APTBRL 
	global qty_bids_g_APTBRL 
	global price_asks_g_APTBRL 
	global qty_asks_g_APTBRL 

	symbol_g_APTBRL = symbol_c_l_APTBRL 
	price_bids_g_APTBRL = Decimal(price_bids_c_l_APTBRL) 
	qty_bids_g_APTBRL = Decimal(qty_bids_c_l_APTBRL) 
	price_asks_g_APTBRL = Decimal(price_asks_c_l_APTBRL) 
	qty_asks_g_APTBRL = Decimal(qty_asks_c_l_APTBRL) 


def loop_APTBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/aptbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APTBRL) 
	ws.run_forever() 


Thread(target=loop_APTBRL).start() 
symbol_g_ETHBTC = 'ETHBTC' 
price_bids_g_ETHBTC = Decimal('0.0') 
qty_bids_g_ETHBTC = Decimal('0.0') 
price_asks_g_ETHBTC = Decimal('0.0') 
qty_asks_g_ETHBTC = Decimal('0.0') 
stepSize_g_ETHBTC = Decimal('0.0001') 


def on_message_ETHBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETHBTC = 'ETHBTC' 
	price_bids_c_l_ETHBTC = data['b'] 
	qty_bids_c_l_ETHBTC = data['B'] 
	price_asks_c_l_ETHBTC = data['a'] 
	qty_asks_c_l_ETHBTC = data['A'] 

	global symbol_g_ETHBTC 
	global price_bids_g_ETHBTC 
	global qty_bids_g_ETHBTC 
	global price_asks_g_ETHBTC 
	global qty_asks_g_ETHBTC 

	symbol_g_ETHBTC = symbol_c_l_ETHBTC 
	price_bids_g_ETHBTC = Decimal(price_bids_c_l_ETHBTC) 
	qty_bids_g_ETHBTC = Decimal(qty_bids_c_l_ETHBTC) 
	price_asks_g_ETHBTC = Decimal(price_asks_c_l_ETHBTC) 
	qty_asks_g_ETHBTC = Decimal(qty_asks_c_l_ETHBTC) 


def loop_ETHBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ethbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETHBTC) 
	ws.run_forever() 


Thread(target=loop_ETHBTC).start() 
symbol_g_LTCBTC = 'LTCBTC' 
price_bids_g_LTCBTC = Decimal('0.0') 
qty_bids_g_LTCBTC = Decimal('0.0') 
price_asks_g_LTCBTC = Decimal('0.0') 
qty_asks_g_LTCBTC = Decimal('0.0') 
stepSize_g_LTCBTC = Decimal('0.001') 


def on_message_LTCBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LTCBTC = 'LTCBTC' 
	price_bids_c_l_LTCBTC = data['b'] 
	qty_bids_c_l_LTCBTC = data['B'] 
	price_asks_c_l_LTCBTC = data['a'] 
	qty_asks_c_l_LTCBTC = data['A'] 

	global symbol_g_LTCBTC 
	global price_bids_g_LTCBTC 
	global qty_bids_g_LTCBTC 
	global price_asks_g_LTCBTC 
	global qty_asks_g_LTCBTC 

	symbol_g_LTCBTC = symbol_c_l_LTCBTC 
	price_bids_g_LTCBTC = Decimal(price_bids_c_l_LTCBTC) 
	qty_bids_g_LTCBTC = Decimal(qty_bids_c_l_LTCBTC) 
	price_asks_g_LTCBTC = Decimal(price_asks_c_l_LTCBTC) 
	qty_asks_g_LTCBTC = Decimal(qty_asks_c_l_LTCBTC) 


def loop_LTCBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ltcbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LTCBTC) 
	ws.run_forever() 


Thread(target=loop_LTCBTC).start() 
symbol_g_BNBBTC = 'BNBBTC' 
price_bids_g_BNBBTC = Decimal('0.0') 
qty_bids_g_BNBBTC = Decimal('0.0') 
price_asks_g_BNBBTC = Decimal('0.0') 
qty_asks_g_BNBBTC = Decimal('0.0') 
stepSize_g_BNBBTC = Decimal('0.001') 


def on_message_BNBBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNBBTC = 'BNBBTC' 
	price_bids_c_l_BNBBTC = data['b'] 
	qty_bids_c_l_BNBBTC = data['B'] 
	price_asks_c_l_BNBBTC = data['a'] 
	qty_asks_c_l_BNBBTC = data['A'] 

	global symbol_g_BNBBTC 
	global price_bids_g_BNBBTC 
	global qty_bids_g_BNBBTC 
	global price_asks_g_BNBBTC 
	global qty_asks_g_BNBBTC 

	symbol_g_BNBBTC = symbol_c_l_BNBBTC 
	price_bids_g_BNBBTC = Decimal(price_bids_c_l_BNBBTC) 
	qty_bids_g_BNBBTC = Decimal(qty_bids_c_l_BNBBTC) 
	price_asks_g_BNBBTC = Decimal(price_asks_c_l_BNBBTC) 
	qty_asks_g_BNBBTC = Decimal(qty_asks_c_l_BNBBTC) 


def loop_BNBBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnbbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNBBTC) 
	ws.run_forever() 


Thread(target=loop_BNBBTC).start() 
symbol_g_NEOBTC = 'NEOBTC' 
price_bids_g_NEOBTC = Decimal('0.0') 
qty_bids_g_NEOBTC = Decimal('0.0') 
price_asks_g_NEOBTC = Decimal('0.0') 
qty_asks_g_NEOBTC = Decimal('0.0') 
stepSize_g_NEOBTC = Decimal('0.01') 


def on_message_NEOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEOBTC = 'NEOBTC' 
	price_bids_c_l_NEOBTC = data['b'] 
	qty_bids_c_l_NEOBTC = data['B'] 
	price_asks_c_l_NEOBTC = data['a'] 
	qty_asks_c_l_NEOBTC = data['A'] 

	global symbol_g_NEOBTC 
	global price_bids_g_NEOBTC 
	global qty_bids_g_NEOBTC 
	global price_asks_g_NEOBTC 
	global qty_asks_g_NEOBTC 

	symbol_g_NEOBTC = symbol_c_l_NEOBTC 
	price_bids_g_NEOBTC = Decimal(price_bids_c_l_NEOBTC) 
	qty_bids_g_NEOBTC = Decimal(qty_bids_c_l_NEOBTC) 
	price_asks_g_NEOBTC = Decimal(price_asks_c_l_NEOBTC) 
	qty_asks_g_NEOBTC = Decimal(qty_asks_c_l_NEOBTC) 


def loop_NEOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/neobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEOBTC) 
	ws.run_forever() 


Thread(target=loop_NEOBTC).start() 
symbol_g_WTCBTC = 'WTCBTC' 
price_bids_g_WTCBTC = Decimal('0.0') 
qty_bids_g_WTCBTC = Decimal('0.0') 
price_asks_g_WTCBTC = Decimal('0.0') 
qty_asks_g_WTCBTC = Decimal('0.0') 
stepSize_g_WTCBTC = Decimal('1.0') 


def on_message_WTCBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WTCBTC = 'WTCBTC' 
	price_bids_c_l_WTCBTC = data['b'] 
	qty_bids_c_l_WTCBTC = data['B'] 
	price_asks_c_l_WTCBTC = data['a'] 
	qty_asks_c_l_WTCBTC = data['A'] 

	global symbol_g_WTCBTC 
	global price_bids_g_WTCBTC 
	global qty_bids_g_WTCBTC 
	global price_asks_g_WTCBTC 
	global qty_asks_g_WTCBTC 

	symbol_g_WTCBTC = symbol_c_l_WTCBTC 
	price_bids_g_WTCBTC = Decimal(price_bids_c_l_WTCBTC) 
	qty_bids_g_WTCBTC = Decimal(qty_bids_c_l_WTCBTC) 
	price_asks_g_WTCBTC = Decimal(price_asks_c_l_WTCBTC) 
	qty_asks_g_WTCBTC = Decimal(qty_asks_c_l_WTCBTC) 


def loop_WTCBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wtcbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WTCBTC) 
	ws.run_forever() 


Thread(target=loop_WTCBTC).start() 
symbol_g_LRCBTC = 'LRCBTC' 
price_bids_g_LRCBTC = Decimal('0.0') 
qty_bids_g_LRCBTC = Decimal('0.0') 
price_asks_g_LRCBTC = Decimal('0.0') 
qty_asks_g_LRCBTC = Decimal('0.0') 
stepSize_g_LRCBTC = Decimal('1.0') 


def on_message_LRCBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LRCBTC = 'LRCBTC' 
	price_bids_c_l_LRCBTC = data['b'] 
	qty_bids_c_l_LRCBTC = data['B'] 
	price_asks_c_l_LRCBTC = data['a'] 
	qty_asks_c_l_LRCBTC = data['A'] 

	global symbol_g_LRCBTC 
	global price_bids_g_LRCBTC 
	global qty_bids_g_LRCBTC 
	global price_asks_g_LRCBTC 
	global qty_asks_g_LRCBTC 

	symbol_g_LRCBTC = symbol_c_l_LRCBTC 
	price_bids_g_LRCBTC = Decimal(price_bids_c_l_LRCBTC) 
	qty_bids_g_LRCBTC = Decimal(qty_bids_c_l_LRCBTC) 
	price_asks_g_LRCBTC = Decimal(price_asks_c_l_LRCBTC) 
	qty_asks_g_LRCBTC = Decimal(qty_asks_c_l_LRCBTC) 


def loop_LRCBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lrcbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LRCBTC) 
	ws.run_forever() 


Thread(target=loop_LRCBTC).start() 
symbol_g_QTUMBTC = 'QTUMBTC' 
price_bids_g_QTUMBTC = Decimal('0.0') 
qty_bids_g_QTUMBTC = Decimal('0.0') 
price_asks_g_QTUMBTC = Decimal('0.0') 
qty_asks_g_QTUMBTC = Decimal('0.0') 
stepSize_g_QTUMBTC = Decimal('0.1') 


def on_message_QTUMBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QTUMBTC = 'QTUMBTC' 
	price_bids_c_l_QTUMBTC = data['b'] 
	qty_bids_c_l_QTUMBTC = data['B'] 
	price_asks_c_l_QTUMBTC = data['a'] 
	qty_asks_c_l_QTUMBTC = data['A'] 

	global symbol_g_QTUMBTC 
	global price_bids_g_QTUMBTC 
	global qty_bids_g_QTUMBTC 
	global price_asks_g_QTUMBTC 
	global qty_asks_g_QTUMBTC 

	symbol_g_QTUMBTC = symbol_c_l_QTUMBTC 
	price_bids_g_QTUMBTC = Decimal(price_bids_c_l_QTUMBTC) 
	qty_bids_g_QTUMBTC = Decimal(qty_bids_c_l_QTUMBTC) 
	price_asks_g_QTUMBTC = Decimal(price_asks_c_l_QTUMBTC) 
	qty_asks_g_QTUMBTC = Decimal(qty_asks_c_l_QTUMBTC) 


def loop_QTUMBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/qtumbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QTUMBTC) 
	ws.run_forever() 


Thread(target=loop_QTUMBTC).start() 
symbol_g_OMGBTC = 'OMGBTC' 
price_bids_g_OMGBTC = Decimal('0.0') 
qty_bids_g_OMGBTC = Decimal('0.0') 
price_asks_g_OMGBTC = Decimal('0.0') 
qty_asks_g_OMGBTC = Decimal('0.0') 
stepSize_g_OMGBTC = Decimal('0.1') 


def on_message_OMGBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OMGBTC = 'OMGBTC' 
	price_bids_c_l_OMGBTC = data['b'] 
	qty_bids_c_l_OMGBTC = data['B'] 
	price_asks_c_l_OMGBTC = data['a'] 
	qty_asks_c_l_OMGBTC = data['A'] 

	global symbol_g_OMGBTC 
	global price_bids_g_OMGBTC 
	global qty_bids_g_OMGBTC 
	global price_asks_g_OMGBTC 
	global qty_asks_g_OMGBTC 

	symbol_g_OMGBTC = symbol_c_l_OMGBTC 
	price_bids_g_OMGBTC = Decimal(price_bids_c_l_OMGBTC) 
	qty_bids_g_OMGBTC = Decimal(qty_bids_c_l_OMGBTC) 
	price_asks_g_OMGBTC = Decimal(price_asks_c_l_OMGBTC) 
	qty_asks_g_OMGBTC = Decimal(qty_asks_c_l_OMGBTC) 


def loop_OMGBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/omgbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OMGBTC) 
	ws.run_forever() 


Thread(target=loop_OMGBTC).start() 
symbol_g_ZRXBTC = 'ZRXBTC' 
price_bids_g_ZRXBTC = Decimal('0.0') 
qty_bids_g_ZRXBTC = Decimal('0.0') 
price_asks_g_ZRXBTC = Decimal('0.0') 
qty_asks_g_ZRXBTC = Decimal('0.0') 
stepSize_g_ZRXBTC = Decimal('1.0') 


def on_message_ZRXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZRXBTC = 'ZRXBTC' 
	price_bids_c_l_ZRXBTC = data['b'] 
	qty_bids_c_l_ZRXBTC = data['B'] 
	price_asks_c_l_ZRXBTC = data['a'] 
	qty_asks_c_l_ZRXBTC = data['A'] 

	global symbol_g_ZRXBTC 
	global price_bids_g_ZRXBTC 
	global qty_bids_g_ZRXBTC 
	global price_asks_g_ZRXBTC 
	global qty_asks_g_ZRXBTC 

	symbol_g_ZRXBTC = symbol_c_l_ZRXBTC 
	price_bids_g_ZRXBTC = Decimal(price_bids_c_l_ZRXBTC) 
	qty_bids_g_ZRXBTC = Decimal(qty_bids_c_l_ZRXBTC) 
	price_asks_g_ZRXBTC = Decimal(price_asks_c_l_ZRXBTC) 
	qty_asks_g_ZRXBTC = Decimal(qty_asks_c_l_ZRXBTC) 


def loop_ZRXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zrxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZRXBTC) 
	ws.run_forever() 


Thread(target=loop_ZRXBTC).start() 
symbol_g_KNCBTC = 'KNCBTC' 
price_bids_g_KNCBTC = Decimal('0.0') 
qty_bids_g_KNCBTC = Decimal('0.0') 
price_asks_g_KNCBTC = Decimal('0.0') 
qty_asks_g_KNCBTC = Decimal('0.0') 
stepSize_g_KNCBTC = Decimal('0.1') 


def on_message_KNCBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KNCBTC = 'KNCBTC' 
	price_bids_c_l_KNCBTC = data['b'] 
	qty_bids_c_l_KNCBTC = data['B'] 
	price_asks_c_l_KNCBTC = data['a'] 
	qty_asks_c_l_KNCBTC = data['A'] 

	global symbol_g_KNCBTC 
	global price_bids_g_KNCBTC 
	global qty_bids_g_KNCBTC 
	global price_asks_g_KNCBTC 
	global qty_asks_g_KNCBTC 

	symbol_g_KNCBTC = symbol_c_l_KNCBTC 
	price_bids_g_KNCBTC = Decimal(price_bids_c_l_KNCBTC) 
	qty_bids_g_KNCBTC = Decimal(qty_bids_c_l_KNCBTC) 
	price_asks_g_KNCBTC = Decimal(price_asks_c_l_KNCBTC) 
	qty_asks_g_KNCBTC = Decimal(qty_asks_c_l_KNCBTC) 


def loop_KNCBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kncbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KNCBTC) 
	ws.run_forever() 


Thread(target=loop_KNCBTC).start() 
symbol_g_IOTABTC = 'IOTABTC' 
price_bids_g_IOTABTC = Decimal('0.0') 
qty_bids_g_IOTABTC = Decimal('0.0') 
price_asks_g_IOTABTC = Decimal('0.0') 
qty_asks_g_IOTABTC = Decimal('0.0') 
stepSize_g_IOTABTC = Decimal('1.0') 


def on_message_IOTABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IOTABTC = 'IOTABTC' 
	price_bids_c_l_IOTABTC = data['b'] 
	qty_bids_c_l_IOTABTC = data['B'] 
	price_asks_c_l_IOTABTC = data['a'] 
	qty_asks_c_l_IOTABTC = data['A'] 

	global symbol_g_IOTABTC 
	global price_bids_g_IOTABTC 
	global qty_bids_g_IOTABTC 
	global price_asks_g_IOTABTC 
	global qty_asks_g_IOTABTC 

	symbol_g_IOTABTC = symbol_c_l_IOTABTC 
	price_bids_g_IOTABTC = Decimal(price_bids_c_l_IOTABTC) 
	qty_bids_g_IOTABTC = Decimal(qty_bids_c_l_IOTABTC) 
	price_asks_g_IOTABTC = Decimal(price_asks_c_l_IOTABTC) 
	qty_asks_g_IOTABTC = Decimal(qty_asks_c_l_IOTABTC) 


def loop_IOTABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/iotabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IOTABTC) 
	ws.run_forever() 


Thread(target=loop_IOTABTC).start() 
symbol_g_LINKBTC = 'LINKBTC' 
price_bids_g_LINKBTC = Decimal('0.0') 
qty_bids_g_LINKBTC = Decimal('0.0') 
price_asks_g_LINKBTC = Decimal('0.0') 
qty_asks_g_LINKBTC = Decimal('0.0') 
stepSize_g_LINKBTC = Decimal('0.01') 


def on_message_LINKBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LINKBTC = 'LINKBTC' 
	price_bids_c_l_LINKBTC = data['b'] 
	qty_bids_c_l_LINKBTC = data['B'] 
	price_asks_c_l_LINKBTC = data['a'] 
	qty_asks_c_l_LINKBTC = data['A'] 

	global symbol_g_LINKBTC 
	global price_bids_g_LINKBTC 
	global qty_bids_g_LINKBTC 
	global price_asks_g_LINKBTC 
	global qty_asks_g_LINKBTC 

	symbol_g_LINKBTC = symbol_c_l_LINKBTC 
	price_bids_g_LINKBTC = Decimal(price_bids_c_l_LINKBTC) 
	qty_bids_g_LINKBTC = Decimal(qty_bids_c_l_LINKBTC) 
	price_asks_g_LINKBTC = Decimal(price_asks_c_l_LINKBTC) 
	qty_asks_g_LINKBTC = Decimal(qty_asks_c_l_LINKBTC) 


def loop_LINKBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/linkbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LINKBTC) 
	ws.run_forever() 


Thread(target=loop_LINKBTC).start() 
symbol_g_MTLBTC = 'MTLBTC' 
price_bids_g_MTLBTC = Decimal('0.0') 
qty_bids_g_MTLBTC = Decimal('0.0') 
price_asks_g_MTLBTC = Decimal('0.0') 
qty_asks_g_MTLBTC = Decimal('0.0') 
stepSize_g_MTLBTC = Decimal('0.1') 


def on_message_MTLBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MTLBTC = 'MTLBTC' 
	price_bids_c_l_MTLBTC = data['b'] 
	qty_bids_c_l_MTLBTC = data['B'] 
	price_asks_c_l_MTLBTC = data['a'] 
	qty_asks_c_l_MTLBTC = data['A'] 

	global symbol_g_MTLBTC 
	global price_bids_g_MTLBTC 
	global qty_bids_g_MTLBTC 
	global price_asks_g_MTLBTC 
	global qty_asks_g_MTLBTC 

	symbol_g_MTLBTC = symbol_c_l_MTLBTC 
	price_bids_g_MTLBTC = Decimal(price_bids_c_l_MTLBTC) 
	qty_bids_g_MTLBTC = Decimal(qty_bids_c_l_MTLBTC) 
	price_asks_g_MTLBTC = Decimal(price_asks_c_l_MTLBTC) 
	qty_asks_g_MTLBTC = Decimal(qty_asks_c_l_MTLBTC) 


def loop_MTLBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mtlbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MTLBTC) 
	ws.run_forever() 


Thread(target=loop_MTLBTC).start() 
symbol_g_EOSBTC = 'EOSBTC' 
price_bids_g_EOSBTC = Decimal('0.0') 
qty_bids_g_EOSBTC = Decimal('0.0') 
price_asks_g_EOSBTC = Decimal('0.0') 
qty_asks_g_EOSBTC = Decimal('0.0') 
stepSize_g_EOSBTC = Decimal('0.1') 


def on_message_EOSBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EOSBTC = 'EOSBTC' 
	price_bids_c_l_EOSBTC = data['b'] 
	qty_bids_c_l_EOSBTC = data['B'] 
	price_asks_c_l_EOSBTC = data['a'] 
	qty_asks_c_l_EOSBTC = data['A'] 

	global symbol_g_EOSBTC 
	global price_bids_g_EOSBTC 
	global qty_bids_g_EOSBTC 
	global price_asks_g_EOSBTC 
	global qty_asks_g_EOSBTC 

	symbol_g_EOSBTC = symbol_c_l_EOSBTC 
	price_bids_g_EOSBTC = Decimal(price_bids_c_l_EOSBTC) 
	qty_bids_g_EOSBTC = Decimal(qty_bids_c_l_EOSBTC) 
	price_asks_g_EOSBTC = Decimal(price_asks_c_l_EOSBTC) 
	qty_asks_g_EOSBTC = Decimal(qty_asks_c_l_EOSBTC) 


def loop_EOSBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/eosbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EOSBTC) 
	ws.run_forever() 


Thread(target=loop_EOSBTC).start() 
symbol_g_ETCBTC = 'ETCBTC' 
price_bids_g_ETCBTC = Decimal('0.0') 
qty_bids_g_ETCBTC = Decimal('0.0') 
price_asks_g_ETCBTC = Decimal('0.0') 
qty_asks_g_ETCBTC = Decimal('0.0') 
stepSize_g_ETCBTC = Decimal('0.01') 


def on_message_ETCBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETCBTC = 'ETCBTC' 
	price_bids_c_l_ETCBTC = data['b'] 
	qty_bids_c_l_ETCBTC = data['B'] 
	price_asks_c_l_ETCBTC = data['a'] 
	qty_asks_c_l_ETCBTC = data['A'] 

	global symbol_g_ETCBTC 
	global price_bids_g_ETCBTC 
	global qty_bids_g_ETCBTC 
	global price_asks_g_ETCBTC 
	global qty_asks_g_ETCBTC 

	symbol_g_ETCBTC = symbol_c_l_ETCBTC 
	price_bids_g_ETCBTC = Decimal(price_bids_c_l_ETCBTC) 
	qty_bids_g_ETCBTC = Decimal(qty_bids_c_l_ETCBTC) 
	price_asks_g_ETCBTC = Decimal(price_asks_c_l_ETCBTC) 
	qty_asks_g_ETCBTC = Decimal(qty_asks_c_l_ETCBTC) 


def loop_ETCBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/etcbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETCBTC) 
	ws.run_forever() 


Thread(target=loop_ETCBTC).start() 
symbol_g_ZECBTC = 'ZECBTC' 
price_bids_g_ZECBTC = Decimal('0.0') 
qty_bids_g_ZECBTC = Decimal('0.0') 
price_asks_g_ZECBTC = Decimal('0.0') 
qty_asks_g_ZECBTC = Decimal('0.0') 
stepSize_g_ZECBTC = Decimal('0.001') 


def on_message_ZECBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZECBTC = 'ZECBTC' 
	price_bids_c_l_ZECBTC = data['b'] 
	qty_bids_c_l_ZECBTC = data['B'] 
	price_asks_c_l_ZECBTC = data['a'] 
	qty_asks_c_l_ZECBTC = data['A'] 

	global symbol_g_ZECBTC 
	global price_bids_g_ZECBTC 
	global qty_bids_g_ZECBTC 
	global price_asks_g_ZECBTC 
	global qty_asks_g_ZECBTC 

	symbol_g_ZECBTC = symbol_c_l_ZECBTC 
	price_bids_g_ZECBTC = Decimal(price_bids_c_l_ZECBTC) 
	qty_bids_g_ZECBTC = Decimal(qty_bids_c_l_ZECBTC) 
	price_asks_g_ZECBTC = Decimal(price_asks_c_l_ZECBTC) 
	qty_asks_g_ZECBTC = Decimal(qty_asks_c_l_ZECBTC) 


def loop_ZECBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zecbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZECBTC) 
	ws.run_forever() 


Thread(target=loop_ZECBTC).start() 
symbol_g_BNTBTC = 'BNTBTC' 
price_bids_g_BNTBTC = Decimal('0.0') 
qty_bids_g_BNTBTC = Decimal('0.0') 
price_asks_g_BNTBTC = Decimal('0.0') 
qty_asks_g_BNTBTC = Decimal('0.0') 
stepSize_g_BNTBTC = Decimal('0.1') 


def on_message_BNTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNTBTC = 'BNTBTC' 
	price_bids_c_l_BNTBTC = data['b'] 
	qty_bids_c_l_BNTBTC = data['B'] 
	price_asks_c_l_BNTBTC = data['a'] 
	qty_asks_c_l_BNTBTC = data['A'] 

	global symbol_g_BNTBTC 
	global price_bids_g_BNTBTC 
	global qty_bids_g_BNTBTC 
	global price_asks_g_BNTBTC 
	global qty_asks_g_BNTBTC 

	symbol_g_BNTBTC = symbol_c_l_BNTBTC 
	price_bids_g_BNTBTC = Decimal(price_bids_c_l_BNTBTC) 
	qty_bids_g_BNTBTC = Decimal(qty_bids_c_l_BNTBTC) 
	price_asks_g_BNTBTC = Decimal(price_asks_c_l_BNTBTC) 
	qty_asks_g_BNTBTC = Decimal(qty_asks_c_l_BNTBTC) 


def loop_BNTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bntbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNTBTC) 
	ws.run_forever() 


Thread(target=loop_BNTBTC).start() 
symbol_g_DASHBTC = 'DASHBTC' 
price_bids_g_DASHBTC = Decimal('0.0') 
qty_bids_g_DASHBTC = Decimal('0.0') 
price_asks_g_DASHBTC = Decimal('0.0') 
qty_asks_g_DASHBTC = Decimal('0.0') 
stepSize_g_DASHBTC = Decimal('0.001') 


def on_message_DASHBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DASHBTC = 'DASHBTC' 
	price_bids_c_l_DASHBTC = data['b'] 
	qty_bids_c_l_DASHBTC = data['B'] 
	price_asks_c_l_DASHBTC = data['a'] 
	qty_asks_c_l_DASHBTC = data['A'] 

	global symbol_g_DASHBTC 
	global price_bids_g_DASHBTC 
	global qty_bids_g_DASHBTC 
	global price_asks_g_DASHBTC 
	global qty_asks_g_DASHBTC 

	symbol_g_DASHBTC = symbol_c_l_DASHBTC 
	price_bids_g_DASHBTC = Decimal(price_bids_c_l_DASHBTC) 
	qty_bids_g_DASHBTC = Decimal(qty_bids_c_l_DASHBTC) 
	price_asks_g_DASHBTC = Decimal(price_asks_c_l_DASHBTC) 
	qty_asks_g_DASHBTC = Decimal(qty_asks_c_l_DASHBTC) 


def loop_DASHBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dashbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DASHBTC) 
	ws.run_forever() 


Thread(target=loop_DASHBTC).start() 
symbol_g_REQBTC = 'REQBTC' 
price_bids_g_REQBTC = Decimal('0.0') 
qty_bids_g_REQBTC = Decimal('0.0') 
price_asks_g_REQBTC = Decimal('0.0') 
qty_asks_g_REQBTC = Decimal('0.0') 
stepSize_g_REQBTC = Decimal('1.0') 


def on_message_REQBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_REQBTC = 'REQBTC' 
	price_bids_c_l_REQBTC = data['b'] 
	qty_bids_c_l_REQBTC = data['B'] 
	price_asks_c_l_REQBTC = data['a'] 
	qty_asks_c_l_REQBTC = data['A'] 

	global symbol_g_REQBTC 
	global price_bids_g_REQBTC 
	global qty_bids_g_REQBTC 
	global price_asks_g_REQBTC 
	global qty_asks_g_REQBTC 

	symbol_g_REQBTC = symbol_c_l_REQBTC 
	price_bids_g_REQBTC = Decimal(price_bids_c_l_REQBTC) 
	qty_bids_g_REQBTC = Decimal(qty_bids_c_l_REQBTC) 
	price_asks_g_REQBTC = Decimal(price_asks_c_l_REQBTC) 
	qty_asks_g_REQBTC = Decimal(qty_asks_c_l_REQBTC) 


def loop_REQBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/reqbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_REQBTC) 
	ws.run_forever() 


Thread(target=loop_REQBTC).start() 
symbol_g_TRXBTC = 'TRXBTC' 
price_bids_g_TRXBTC = Decimal('0.0') 
qty_bids_g_TRXBTC = Decimal('0.0') 
price_asks_g_TRXBTC = Decimal('0.0') 
qty_asks_g_TRXBTC = Decimal('0.0') 
stepSize_g_TRXBTC = Decimal('1.0') 


def on_message_TRXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRXBTC = 'TRXBTC' 
	price_bids_c_l_TRXBTC = data['b'] 
	qty_bids_c_l_TRXBTC = data['B'] 
	price_asks_c_l_TRXBTC = data['a'] 
	qty_asks_c_l_TRXBTC = data['A'] 

	global symbol_g_TRXBTC 
	global price_bids_g_TRXBTC 
	global qty_bids_g_TRXBTC 
	global price_asks_g_TRXBTC 
	global qty_asks_g_TRXBTC 

	symbol_g_TRXBTC = symbol_c_l_TRXBTC 
	price_bids_g_TRXBTC = Decimal(price_bids_c_l_TRXBTC) 
	qty_bids_g_TRXBTC = Decimal(qty_bids_c_l_TRXBTC) 
	price_asks_g_TRXBTC = Decimal(price_asks_c_l_TRXBTC) 
	qty_asks_g_TRXBTC = Decimal(qty_asks_c_l_TRXBTC) 


def loop_TRXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/trxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRXBTC) 
	ws.run_forever() 


Thread(target=loop_TRXBTC).start() 
symbol_g_POWRBTC = 'POWRBTC' 
price_bids_g_POWRBTC = Decimal('0.0') 
qty_bids_g_POWRBTC = Decimal('0.0') 
price_asks_g_POWRBTC = Decimal('0.0') 
qty_asks_g_POWRBTC = Decimal('0.0') 
stepSize_g_POWRBTC = Decimal('1.0') 


def on_message_POWRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_POWRBTC = 'POWRBTC' 
	price_bids_c_l_POWRBTC = data['b'] 
	qty_bids_c_l_POWRBTC = data['B'] 
	price_asks_c_l_POWRBTC = data['a'] 
	qty_asks_c_l_POWRBTC = data['A'] 

	global symbol_g_POWRBTC 
	global price_bids_g_POWRBTC 
	global qty_bids_g_POWRBTC 
	global price_asks_g_POWRBTC 
	global qty_asks_g_POWRBTC 

	symbol_g_POWRBTC = symbol_c_l_POWRBTC 
	price_bids_g_POWRBTC = Decimal(price_bids_c_l_POWRBTC) 
	qty_bids_g_POWRBTC = Decimal(qty_bids_c_l_POWRBTC) 
	price_asks_g_POWRBTC = Decimal(price_asks_c_l_POWRBTC) 
	qty_asks_g_POWRBTC = Decimal(qty_asks_c_l_POWRBTC) 


def loop_POWRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/powrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_POWRBTC) 
	ws.run_forever() 


Thread(target=loop_POWRBTC).start() 
symbol_g_XRPBTC = 'XRPBTC' 
price_bids_g_XRPBTC = Decimal('0.0') 
qty_bids_g_XRPBTC = Decimal('0.0') 
price_asks_g_XRPBTC = Decimal('0.0') 
qty_asks_g_XRPBTC = Decimal('0.0') 
stepSize_g_XRPBTC = Decimal('1.0') 


def on_message_XRPBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XRPBTC = 'XRPBTC' 
	price_bids_c_l_XRPBTC = data['b'] 
	qty_bids_c_l_XRPBTC = data['B'] 
	price_asks_c_l_XRPBTC = data['a'] 
	qty_asks_c_l_XRPBTC = data['A'] 

	global symbol_g_XRPBTC 
	global price_bids_g_XRPBTC 
	global qty_bids_g_XRPBTC 
	global price_asks_g_XRPBTC 
	global qty_asks_g_XRPBTC 

	symbol_g_XRPBTC = symbol_c_l_XRPBTC 
	price_bids_g_XRPBTC = Decimal(price_bids_c_l_XRPBTC) 
	qty_bids_g_XRPBTC = Decimal(qty_bids_c_l_XRPBTC) 
	price_asks_g_XRPBTC = Decimal(price_asks_c_l_XRPBTC) 
	qty_asks_g_XRPBTC = Decimal(qty_asks_c_l_XRPBTC) 


def loop_XRPBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xrpbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XRPBTC) 
	ws.run_forever() 


Thread(target=loop_XRPBTC).start() 
symbol_g_ENJBTC = 'ENJBTC' 
price_bids_g_ENJBTC = Decimal('0.0') 
qty_bids_g_ENJBTC = Decimal('0.0') 
price_asks_g_ENJBTC = Decimal('0.0') 
qty_asks_g_ENJBTC = Decimal('0.0') 
stepSize_g_ENJBTC = Decimal('0.1') 


def on_message_ENJBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENJBTC = 'ENJBTC' 
	price_bids_c_l_ENJBTC = data['b'] 
	qty_bids_c_l_ENJBTC = data['B'] 
	price_asks_c_l_ENJBTC = data['a'] 
	qty_asks_c_l_ENJBTC = data['A'] 

	global symbol_g_ENJBTC 
	global price_bids_g_ENJBTC 
	global qty_bids_g_ENJBTC 
	global price_asks_g_ENJBTC 
	global qty_asks_g_ENJBTC 

	symbol_g_ENJBTC = symbol_c_l_ENJBTC 
	price_bids_g_ENJBTC = Decimal(price_bids_c_l_ENJBTC) 
	qty_bids_g_ENJBTC = Decimal(qty_bids_c_l_ENJBTC) 
	price_asks_g_ENJBTC = Decimal(price_asks_c_l_ENJBTC) 
	qty_asks_g_ENJBTC = Decimal(qty_asks_c_l_ENJBTC) 


def loop_ENJBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/enjbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENJBTC) 
	ws.run_forever() 


Thread(target=loop_ENJBTC).start() 
symbol_g_STORJBTC = 'STORJBTC' 
price_bids_g_STORJBTC = Decimal('0.0') 
qty_bids_g_STORJBTC = Decimal('0.0') 
price_asks_g_STORJBTC = Decimal('0.0') 
qty_asks_g_STORJBTC = Decimal('0.0') 
stepSize_g_STORJBTC = Decimal('1.0') 


def on_message_STORJBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STORJBTC = 'STORJBTC' 
	price_bids_c_l_STORJBTC = data['b'] 
	qty_bids_c_l_STORJBTC = data['B'] 
	price_asks_c_l_STORJBTC = data['a'] 
	qty_asks_c_l_STORJBTC = data['A'] 

	global symbol_g_STORJBTC 
	global price_bids_g_STORJBTC 
	global qty_bids_g_STORJBTC 
	global price_asks_g_STORJBTC 
	global qty_asks_g_STORJBTC 

	symbol_g_STORJBTC = symbol_c_l_STORJBTC 
	price_bids_g_STORJBTC = Decimal(price_bids_c_l_STORJBTC) 
	qty_bids_g_STORJBTC = Decimal(qty_bids_c_l_STORJBTC) 
	price_asks_g_STORJBTC = Decimal(price_asks_c_l_STORJBTC) 
	qty_asks_g_STORJBTC = Decimal(qty_asks_c_l_STORJBTC) 


def loop_STORJBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/storjbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STORJBTC) 
	ws.run_forever() 


Thread(target=loop_STORJBTC).start() 
symbol_g_KMDBTC = 'KMDBTC' 
price_bids_g_KMDBTC = Decimal('0.0') 
qty_bids_g_KMDBTC = Decimal('0.0') 
price_asks_g_KMDBTC = Decimal('0.0') 
qty_asks_g_KMDBTC = Decimal('0.0') 
stepSize_g_KMDBTC = Decimal('1.0') 


def on_message_KMDBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KMDBTC = 'KMDBTC' 
	price_bids_c_l_KMDBTC = data['b'] 
	qty_bids_c_l_KMDBTC = data['B'] 
	price_asks_c_l_KMDBTC = data['a'] 
	qty_asks_c_l_KMDBTC = data['A'] 

	global symbol_g_KMDBTC 
	global price_bids_g_KMDBTC 
	global qty_bids_g_KMDBTC 
	global price_asks_g_KMDBTC 
	global qty_asks_g_KMDBTC 

	symbol_g_KMDBTC = symbol_c_l_KMDBTC 
	price_bids_g_KMDBTC = Decimal(price_bids_c_l_KMDBTC) 
	qty_bids_g_KMDBTC = Decimal(qty_bids_c_l_KMDBTC) 
	price_asks_g_KMDBTC = Decimal(price_asks_c_l_KMDBTC) 
	qty_asks_g_KMDBTC = Decimal(qty_asks_c_l_KMDBTC) 


def loop_KMDBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kmdbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KMDBTC) 
	ws.run_forever() 


Thread(target=loop_KMDBTC).start() 
symbol_g_NULSBTC = 'NULSBTC' 
price_bids_g_NULSBTC = Decimal('0.0') 
qty_bids_g_NULSBTC = Decimal('0.0') 
price_asks_g_NULSBTC = Decimal('0.0') 
qty_asks_g_NULSBTC = Decimal('0.0') 
stepSize_g_NULSBTC = Decimal('1.0') 


def on_message_NULSBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NULSBTC = 'NULSBTC' 
	price_bids_c_l_NULSBTC = data['b'] 
	qty_bids_c_l_NULSBTC = data['B'] 
	price_asks_c_l_NULSBTC = data['a'] 
	qty_asks_c_l_NULSBTC = data['A'] 

	global symbol_g_NULSBTC 
	global price_bids_g_NULSBTC 
	global qty_bids_g_NULSBTC 
	global price_asks_g_NULSBTC 
	global qty_asks_g_NULSBTC 

	symbol_g_NULSBTC = symbol_c_l_NULSBTC 
	price_bids_g_NULSBTC = Decimal(price_bids_c_l_NULSBTC) 
	qty_bids_g_NULSBTC = Decimal(qty_bids_c_l_NULSBTC) 
	price_asks_g_NULSBTC = Decimal(price_asks_c_l_NULSBTC) 
	qty_asks_g_NULSBTC = Decimal(qty_asks_c_l_NULSBTC) 


def loop_NULSBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nulsbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NULSBTC) 
	ws.run_forever() 


Thread(target=loop_NULSBTC).start() 
symbol_g_XMRBTC = 'XMRBTC' 
price_bids_g_XMRBTC = Decimal('0.0') 
qty_bids_g_XMRBTC = Decimal('0.0') 
price_asks_g_XMRBTC = Decimal('0.0') 
qty_asks_g_XMRBTC = Decimal('0.0') 
stepSize_g_XMRBTC = Decimal('0.001') 


def on_message_XMRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XMRBTC = 'XMRBTC' 
	price_bids_c_l_XMRBTC = data['b'] 
	qty_bids_c_l_XMRBTC = data['B'] 
	price_asks_c_l_XMRBTC = data['a'] 
	qty_asks_c_l_XMRBTC = data['A'] 

	global symbol_g_XMRBTC 
	global price_bids_g_XMRBTC 
	global qty_bids_g_XMRBTC 
	global price_asks_g_XMRBTC 
	global qty_asks_g_XMRBTC 

	symbol_g_XMRBTC = symbol_c_l_XMRBTC 
	price_bids_g_XMRBTC = Decimal(price_bids_c_l_XMRBTC) 
	qty_bids_g_XMRBTC = Decimal(qty_bids_c_l_XMRBTC) 
	price_asks_g_XMRBTC = Decimal(price_asks_c_l_XMRBTC) 
	qty_asks_g_XMRBTC = Decimal(qty_asks_c_l_XMRBTC) 


def loop_XMRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xmrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XMRBTC) 
	ws.run_forever() 


Thread(target=loop_XMRBTC).start() 
symbol_g_BATBTC = 'BATBTC' 
price_bids_g_BATBTC = Decimal('0.0') 
qty_bids_g_BATBTC = Decimal('0.0') 
price_asks_g_BATBTC = Decimal('0.0') 
qty_asks_g_BATBTC = Decimal('0.0') 
stepSize_g_BATBTC = Decimal('1.0') 


def on_message_BATBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BATBTC = 'BATBTC' 
	price_bids_c_l_BATBTC = data['b'] 
	qty_bids_c_l_BATBTC = data['B'] 
	price_asks_c_l_BATBTC = data['a'] 
	qty_asks_c_l_BATBTC = data['A'] 

	global symbol_g_BATBTC 
	global price_bids_g_BATBTC 
	global qty_bids_g_BATBTC 
	global price_asks_g_BATBTC 
	global qty_asks_g_BATBTC 

	symbol_g_BATBTC = symbol_c_l_BATBTC 
	price_bids_g_BATBTC = Decimal(price_bids_c_l_BATBTC) 
	qty_bids_g_BATBTC = Decimal(qty_bids_c_l_BATBTC) 
	price_asks_g_BATBTC = Decimal(price_asks_c_l_BATBTC) 
	qty_asks_g_BATBTC = Decimal(qty_asks_c_l_BATBTC) 


def loop_BATBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/batbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BATBTC) 
	ws.run_forever() 


Thread(target=loop_BATBTC).start() 
symbol_g_BTSBTC = 'BTSBTC' 
price_bids_g_BTSBTC = Decimal('0.0') 
qty_bids_g_BTSBTC = Decimal('0.0') 
price_asks_g_BTSBTC = Decimal('0.0') 
qty_asks_g_BTSBTC = Decimal('0.0') 
stepSize_g_BTSBTC = Decimal('1.0') 


def on_message_BTSBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTSBTC = 'BTSBTC' 
	price_bids_c_l_BTSBTC = data['b'] 
	qty_bids_c_l_BTSBTC = data['B'] 
	price_asks_c_l_BTSBTC = data['a'] 
	qty_asks_c_l_BTSBTC = data['A'] 

	global symbol_g_BTSBTC 
	global price_bids_g_BTSBTC 
	global qty_bids_g_BTSBTC 
	global price_asks_g_BTSBTC 
	global qty_asks_g_BTSBTC 

	symbol_g_BTSBTC = symbol_c_l_BTSBTC 
	price_bids_g_BTSBTC = Decimal(price_bids_c_l_BTSBTC) 
	qty_bids_g_BTSBTC = Decimal(qty_bids_c_l_BTSBTC) 
	price_asks_g_BTSBTC = Decimal(price_asks_c_l_BTSBTC) 
	qty_asks_g_BTSBTC = Decimal(qty_asks_c_l_BTSBTC) 


def loop_BTSBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/btsbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTSBTC) 
	ws.run_forever() 


Thread(target=loop_BTSBTC).start() 
symbol_g_LSKBTC = 'LSKBTC' 
price_bids_g_LSKBTC = Decimal('0.0') 
qty_bids_g_LSKBTC = Decimal('0.0') 
price_asks_g_LSKBTC = Decimal('0.0') 
qty_asks_g_LSKBTC = Decimal('0.0') 
stepSize_g_LSKBTC = Decimal('0.1') 


def on_message_LSKBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LSKBTC = 'LSKBTC' 
	price_bids_c_l_LSKBTC = data['b'] 
	qty_bids_c_l_LSKBTC = data['B'] 
	price_asks_c_l_LSKBTC = data['a'] 
	qty_asks_c_l_LSKBTC = data['A'] 

	global symbol_g_LSKBTC 
	global price_bids_g_LSKBTC 
	global qty_bids_g_LSKBTC 
	global price_asks_g_LSKBTC 
	global qty_asks_g_LSKBTC 

	symbol_g_LSKBTC = symbol_c_l_LSKBTC 
	price_bids_g_LSKBTC = Decimal(price_bids_c_l_LSKBTC) 
	qty_bids_g_LSKBTC = Decimal(qty_bids_c_l_LSKBTC) 
	price_asks_g_LSKBTC = Decimal(price_asks_c_l_LSKBTC) 
	qty_asks_g_LSKBTC = Decimal(qty_asks_c_l_LSKBTC) 


def loop_LSKBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lskbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LSKBTC) 
	ws.run_forever() 


Thread(target=loop_LSKBTC).start() 
symbol_g_MANABTC = 'MANABTC' 
price_bids_g_MANABTC = Decimal('0.0') 
qty_bids_g_MANABTC = Decimal('0.0') 
price_asks_g_MANABTC = Decimal('0.0') 
qty_asks_g_MANABTC = Decimal('0.0') 
stepSize_g_MANABTC = Decimal('1.0') 


def on_message_MANABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MANABTC = 'MANABTC' 
	price_bids_c_l_MANABTC = data['b'] 
	qty_bids_c_l_MANABTC = data['B'] 
	price_asks_c_l_MANABTC = data['a'] 
	qty_asks_c_l_MANABTC = data['A'] 

	global symbol_g_MANABTC 
	global price_bids_g_MANABTC 
	global qty_bids_g_MANABTC 
	global price_asks_g_MANABTC 
	global qty_asks_g_MANABTC 

	symbol_g_MANABTC = symbol_c_l_MANABTC 
	price_bids_g_MANABTC = Decimal(price_bids_c_l_MANABTC) 
	qty_bids_g_MANABTC = Decimal(qty_bids_c_l_MANABTC) 
	price_asks_g_MANABTC = Decimal(price_asks_c_l_MANABTC) 
	qty_asks_g_MANABTC = Decimal(qty_asks_c_l_MANABTC) 


def loop_MANABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/manabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MANABTC) 
	ws.run_forever() 


Thread(target=loop_MANABTC).start() 
symbol_g_ADXBTC = 'ADXBTC' 
price_bids_g_ADXBTC = Decimal('0.0') 
qty_bids_g_ADXBTC = Decimal('0.0') 
price_asks_g_ADXBTC = Decimal('0.0') 
qty_asks_g_ADXBTC = Decimal('0.0') 
stepSize_g_ADXBTC = Decimal('1.0') 


def on_message_ADXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADXBTC = 'ADXBTC' 
	price_bids_c_l_ADXBTC = data['b'] 
	qty_bids_c_l_ADXBTC = data['B'] 
	price_asks_c_l_ADXBTC = data['a'] 
	qty_asks_c_l_ADXBTC = data['A'] 

	global symbol_g_ADXBTC 
	global price_bids_g_ADXBTC 
	global qty_bids_g_ADXBTC 
	global price_asks_g_ADXBTC 
	global qty_asks_g_ADXBTC 

	symbol_g_ADXBTC = symbol_c_l_ADXBTC 
	price_bids_g_ADXBTC = Decimal(price_bids_c_l_ADXBTC) 
	qty_bids_g_ADXBTC = Decimal(qty_bids_c_l_ADXBTC) 
	price_asks_g_ADXBTC = Decimal(price_asks_c_l_ADXBTC) 
	qty_asks_g_ADXBTC = Decimal(qty_asks_c_l_ADXBTC) 


def loop_ADXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADXBTC) 
	ws.run_forever() 


Thread(target=loop_ADXBTC).start() 
symbol_g_ADABTC = 'ADABTC' 
price_bids_g_ADABTC = Decimal('0.0') 
qty_bids_g_ADABTC = Decimal('0.0') 
price_asks_g_ADABTC = Decimal('0.0') 
qty_asks_g_ADABTC = Decimal('0.0') 
stepSize_g_ADABTC = Decimal('0.1') 


def on_message_ADABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADABTC = 'ADABTC' 
	price_bids_c_l_ADABTC = data['b'] 
	qty_bids_c_l_ADABTC = data['B'] 
	price_asks_c_l_ADABTC = data['a'] 
	qty_asks_c_l_ADABTC = data['A'] 

	global symbol_g_ADABTC 
	global price_bids_g_ADABTC 
	global qty_bids_g_ADABTC 
	global price_asks_g_ADABTC 
	global qty_asks_g_ADABTC 

	symbol_g_ADABTC = symbol_c_l_ADABTC 
	price_bids_g_ADABTC = Decimal(price_bids_c_l_ADABTC) 
	qty_bids_g_ADABTC = Decimal(qty_bids_c_l_ADABTC) 
	price_asks_g_ADABTC = Decimal(price_asks_c_l_ADABTC) 
	qty_asks_g_ADABTC = Decimal(qty_asks_c_l_ADABTC) 


def loop_ADABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADABTC) 
	ws.run_forever() 


Thread(target=loop_ADABTC).start() 
symbol_g_XLMBTC = 'XLMBTC' 
price_bids_g_XLMBTC = Decimal('0.0') 
qty_bids_g_XLMBTC = Decimal('0.0') 
price_asks_g_XLMBTC = Decimal('0.0') 
qty_asks_g_XLMBTC = Decimal('0.0') 
stepSize_g_XLMBTC = Decimal('1.0') 


def on_message_XLMBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XLMBTC = 'XLMBTC' 
	price_bids_c_l_XLMBTC = data['b'] 
	qty_bids_c_l_XLMBTC = data['B'] 
	price_asks_c_l_XLMBTC = data['a'] 
	qty_asks_c_l_XLMBTC = data['A'] 

	global symbol_g_XLMBTC 
	global price_bids_g_XLMBTC 
	global qty_bids_g_XLMBTC 
	global price_asks_g_XLMBTC 
	global qty_asks_g_XLMBTC 

	symbol_g_XLMBTC = symbol_c_l_XLMBTC 
	price_bids_g_XLMBTC = Decimal(price_bids_c_l_XLMBTC) 
	qty_bids_g_XLMBTC = Decimal(qty_bids_c_l_XLMBTC) 
	price_asks_g_XLMBTC = Decimal(price_asks_c_l_XLMBTC) 
	qty_asks_g_XLMBTC = Decimal(qty_asks_c_l_XLMBTC) 


def loop_XLMBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xlmbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XLMBTC) 
	ws.run_forever() 


Thread(target=loop_XLMBTC).start() 
symbol_g_WAVESBTC = 'WAVESBTC' 
price_bids_g_WAVESBTC = Decimal('0.0') 
qty_bids_g_WAVESBTC = Decimal('0.0') 
price_asks_g_WAVESBTC = Decimal('0.0') 
qty_asks_g_WAVESBTC = Decimal('0.0') 
stepSize_g_WAVESBTC = Decimal('0.01') 


def on_message_WAVESBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WAVESBTC = 'WAVESBTC' 
	price_bids_c_l_WAVESBTC = data['b'] 
	qty_bids_c_l_WAVESBTC = data['B'] 
	price_asks_c_l_WAVESBTC = data['a'] 
	qty_asks_c_l_WAVESBTC = data['A'] 

	global symbol_g_WAVESBTC 
	global price_bids_g_WAVESBTC 
	global qty_bids_g_WAVESBTC 
	global price_asks_g_WAVESBTC 
	global qty_asks_g_WAVESBTC 

	symbol_g_WAVESBTC = symbol_c_l_WAVESBTC 
	price_bids_g_WAVESBTC = Decimal(price_bids_c_l_WAVESBTC) 
	qty_bids_g_WAVESBTC = Decimal(qty_bids_c_l_WAVESBTC) 
	price_asks_g_WAVESBTC = Decimal(price_asks_c_l_WAVESBTC) 
	qty_asks_g_WAVESBTC = Decimal(qty_asks_c_l_WAVESBTC) 


def loop_WAVESBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wavesbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WAVESBTC) 
	ws.run_forever() 


Thread(target=loop_WAVESBTC).start() 
symbol_g_ICXBTC = 'ICXBTC' 
price_bids_g_ICXBTC = Decimal('0.0') 
qty_bids_g_ICXBTC = Decimal('0.0') 
price_asks_g_ICXBTC = Decimal('0.0') 
qty_asks_g_ICXBTC = Decimal('0.0') 
stepSize_g_ICXBTC = Decimal('1.0') 


def on_message_ICXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ICXBTC = 'ICXBTC' 
	price_bids_c_l_ICXBTC = data['b'] 
	qty_bids_c_l_ICXBTC = data['B'] 
	price_asks_c_l_ICXBTC = data['a'] 
	qty_asks_c_l_ICXBTC = data['A'] 

	global symbol_g_ICXBTC 
	global price_bids_g_ICXBTC 
	global qty_bids_g_ICXBTC 
	global price_asks_g_ICXBTC 
	global qty_asks_g_ICXBTC 

	symbol_g_ICXBTC = symbol_c_l_ICXBTC 
	price_bids_g_ICXBTC = Decimal(price_bids_c_l_ICXBTC) 
	qty_bids_g_ICXBTC = Decimal(qty_bids_c_l_ICXBTC) 
	price_asks_g_ICXBTC = Decimal(price_asks_c_l_ICXBTC) 
	qty_asks_g_ICXBTC = Decimal(qty_asks_c_l_ICXBTC) 


def loop_ICXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/icxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ICXBTC) 
	ws.run_forever() 


Thread(target=loop_ICXBTC).start() 
symbol_g_ELFBTC = 'ELFBTC' 
price_bids_g_ELFBTC = Decimal('0.0') 
qty_bids_g_ELFBTC = Decimal('0.0') 
price_asks_g_ELFBTC = Decimal('0.0') 
qty_asks_g_ELFBTC = Decimal('0.0') 
stepSize_g_ELFBTC = Decimal('1.0') 


def on_message_ELFBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ELFBTC = 'ELFBTC' 
	price_bids_c_l_ELFBTC = data['b'] 
	qty_bids_c_l_ELFBTC = data['B'] 
	price_asks_c_l_ELFBTC = data['a'] 
	qty_asks_c_l_ELFBTC = data['A'] 

	global symbol_g_ELFBTC 
	global price_bids_g_ELFBTC 
	global qty_bids_g_ELFBTC 
	global price_asks_g_ELFBTC 
	global qty_asks_g_ELFBTC 

	symbol_g_ELFBTC = symbol_c_l_ELFBTC 
	price_bids_g_ELFBTC = Decimal(price_bids_c_l_ELFBTC) 
	qty_bids_g_ELFBTC = Decimal(qty_bids_c_l_ELFBTC) 
	price_asks_g_ELFBTC = Decimal(price_asks_c_l_ELFBTC) 
	qty_asks_g_ELFBTC = Decimal(qty_asks_c_l_ELFBTC) 


def loop_ELFBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/elfbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ELFBTC) 
	ws.run_forever() 


Thread(target=loop_ELFBTC).start() 
symbol_g_AIONBTC = 'AIONBTC' 
price_bids_g_AIONBTC = Decimal('0.0') 
qty_bids_g_AIONBTC = Decimal('0.0') 
price_asks_g_AIONBTC = Decimal('0.0') 
qty_asks_g_AIONBTC = Decimal('0.0') 
stepSize_g_AIONBTC = Decimal('1.0') 


def on_message_AIONBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AIONBTC = 'AIONBTC' 
	price_bids_c_l_AIONBTC = data['b'] 
	qty_bids_c_l_AIONBTC = data['B'] 
	price_asks_c_l_AIONBTC = data['a'] 
	qty_asks_c_l_AIONBTC = data['A'] 

	global symbol_g_AIONBTC 
	global price_bids_g_AIONBTC 
	global qty_bids_g_AIONBTC 
	global price_asks_g_AIONBTC 
	global qty_asks_g_AIONBTC 

	symbol_g_AIONBTC = symbol_c_l_AIONBTC 
	price_bids_g_AIONBTC = Decimal(price_bids_c_l_AIONBTC) 
	qty_bids_g_AIONBTC = Decimal(qty_bids_c_l_AIONBTC) 
	price_asks_g_AIONBTC = Decimal(price_asks_c_l_AIONBTC) 
	qty_asks_g_AIONBTC = Decimal(qty_asks_c_l_AIONBTC) 


def loop_AIONBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/aionbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AIONBTC) 
	ws.run_forever() 


Thread(target=loop_AIONBTC).start() 
symbol_g_NEBLBTC = 'NEBLBTC' 
price_bids_g_NEBLBTC = Decimal('0.0') 
qty_bids_g_NEBLBTC = Decimal('0.0') 
price_asks_g_NEBLBTC = Decimal('0.0') 
qty_asks_g_NEBLBTC = Decimal('0.0') 
stepSize_g_NEBLBTC = Decimal('0.1') 


def on_message_NEBLBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEBLBTC = 'NEBLBTC' 
	price_bids_c_l_NEBLBTC = data['b'] 
	qty_bids_c_l_NEBLBTC = data['B'] 
	price_asks_c_l_NEBLBTC = data['a'] 
	qty_asks_c_l_NEBLBTC = data['A'] 

	global symbol_g_NEBLBTC 
	global price_bids_g_NEBLBTC 
	global qty_bids_g_NEBLBTC 
	global price_asks_g_NEBLBTC 
	global qty_asks_g_NEBLBTC 

	symbol_g_NEBLBTC = symbol_c_l_NEBLBTC 
	price_bids_g_NEBLBTC = Decimal(price_bids_c_l_NEBLBTC) 
	qty_bids_g_NEBLBTC = Decimal(qty_bids_c_l_NEBLBTC) 
	price_asks_g_NEBLBTC = Decimal(price_asks_c_l_NEBLBTC) 
	qty_asks_g_NEBLBTC = Decimal(qty_asks_c_l_NEBLBTC) 


def loop_NEBLBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/neblbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEBLBTC) 
	ws.run_forever() 


Thread(target=loop_NEBLBTC).start() 
symbol_g_RLCBTC = 'RLCBTC' 
price_bids_g_RLCBTC = Decimal('0.0') 
qty_bids_g_RLCBTC = Decimal('0.0') 
price_asks_g_RLCBTC = Decimal('0.0') 
qty_asks_g_RLCBTC = Decimal('0.0') 
stepSize_g_RLCBTC = Decimal('0.1') 


def on_message_RLCBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RLCBTC = 'RLCBTC' 
	price_bids_c_l_RLCBTC = data['b'] 
	qty_bids_c_l_RLCBTC = data['B'] 
	price_asks_c_l_RLCBTC = data['a'] 
	qty_asks_c_l_RLCBTC = data['A'] 

	global symbol_g_RLCBTC 
	global price_bids_g_RLCBTC 
	global qty_bids_g_RLCBTC 
	global price_asks_g_RLCBTC 
	global qty_asks_g_RLCBTC 

	symbol_g_RLCBTC = symbol_c_l_RLCBTC 
	price_bids_g_RLCBTC = Decimal(price_bids_c_l_RLCBTC) 
	qty_bids_g_RLCBTC = Decimal(qty_bids_c_l_RLCBTC) 
	price_asks_g_RLCBTC = Decimal(price_asks_c_l_RLCBTC) 
	qty_asks_g_RLCBTC = Decimal(qty_asks_c_l_RLCBTC) 


def loop_RLCBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rlcbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RLCBTC) 
	ws.run_forever() 


Thread(target=loop_RLCBTC).start() 
symbol_g_IOSTBTC = 'IOSTBTC' 
price_bids_g_IOSTBTC = Decimal('0.0') 
qty_bids_g_IOSTBTC = Decimal('0.0') 
price_asks_g_IOSTBTC = Decimal('0.0') 
qty_asks_g_IOSTBTC = Decimal('0.0') 
stepSize_g_IOSTBTC = Decimal('1.0') 


def on_message_IOSTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IOSTBTC = 'IOSTBTC' 
	price_bids_c_l_IOSTBTC = data['b'] 
	qty_bids_c_l_IOSTBTC = data['B'] 
	price_asks_c_l_IOSTBTC = data['a'] 
	qty_asks_c_l_IOSTBTC = data['A'] 

	global symbol_g_IOSTBTC 
	global price_bids_g_IOSTBTC 
	global qty_bids_g_IOSTBTC 
	global price_asks_g_IOSTBTC 
	global qty_asks_g_IOSTBTC 

	symbol_g_IOSTBTC = symbol_c_l_IOSTBTC 
	price_bids_g_IOSTBTC = Decimal(price_bids_c_l_IOSTBTC) 
	qty_bids_g_IOSTBTC = Decimal(qty_bids_c_l_IOSTBTC) 
	price_asks_g_IOSTBTC = Decimal(price_asks_c_l_IOSTBTC) 
	qty_asks_g_IOSTBTC = Decimal(qty_asks_c_l_IOSTBTC) 


def loop_IOSTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/iostbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IOSTBTC) 
	ws.run_forever() 


Thread(target=loop_IOSTBTC).start() 
symbol_g_STEEMBTC = 'STEEMBTC' 
price_bids_g_STEEMBTC = Decimal('0.0') 
qty_bids_g_STEEMBTC = Decimal('0.0') 
price_asks_g_STEEMBTC = Decimal('0.0') 
qty_asks_g_STEEMBTC = Decimal('0.0') 
stepSize_g_STEEMBTC = Decimal('1.0') 


def on_message_STEEMBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STEEMBTC = 'STEEMBTC' 
	price_bids_c_l_STEEMBTC = data['b'] 
	qty_bids_c_l_STEEMBTC = data['B'] 
	price_asks_c_l_STEEMBTC = data['a'] 
	qty_asks_c_l_STEEMBTC = data['A'] 

	global symbol_g_STEEMBTC 
	global price_bids_g_STEEMBTC 
	global qty_bids_g_STEEMBTC 
	global price_asks_g_STEEMBTC 
	global qty_asks_g_STEEMBTC 

	symbol_g_STEEMBTC = symbol_c_l_STEEMBTC 
	price_bids_g_STEEMBTC = Decimal(price_bids_c_l_STEEMBTC) 
	qty_bids_g_STEEMBTC = Decimal(qty_bids_c_l_STEEMBTC) 
	price_asks_g_STEEMBTC = Decimal(price_asks_c_l_STEEMBTC) 
	qty_asks_g_STEEMBTC = Decimal(qty_asks_c_l_STEEMBTC) 


def loop_STEEMBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/steembtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STEEMBTC) 
	ws.run_forever() 


Thread(target=loop_STEEMBTC).start() 
symbol_g_BLZBTC = 'BLZBTC' 
price_bids_g_BLZBTC = Decimal('0.0') 
qty_bids_g_BLZBTC = Decimal('0.0') 
price_asks_g_BLZBTC = Decimal('0.0') 
qty_asks_g_BLZBTC = Decimal('0.0') 
stepSize_g_BLZBTC = Decimal('1.0') 


def on_message_BLZBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BLZBTC = 'BLZBTC' 
	price_bids_c_l_BLZBTC = data['b'] 
	qty_bids_c_l_BLZBTC = data['B'] 
	price_asks_c_l_BLZBTC = data['a'] 
	qty_asks_c_l_BLZBTC = data['A'] 

	global symbol_g_BLZBTC 
	global price_bids_g_BLZBTC 
	global qty_bids_g_BLZBTC 
	global price_asks_g_BLZBTC 
	global qty_asks_g_BLZBTC 

	symbol_g_BLZBTC = symbol_c_l_BLZBTC 
	price_bids_g_BLZBTC = Decimal(price_bids_c_l_BLZBTC) 
	qty_bids_g_BLZBTC = Decimal(qty_bids_c_l_BLZBTC) 
	price_asks_g_BLZBTC = Decimal(price_asks_c_l_BLZBTC) 
	qty_asks_g_BLZBTC = Decimal(qty_asks_c_l_BLZBTC) 


def loop_BLZBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/blzbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BLZBTC) 
	ws.run_forever() 


Thread(target=loop_BLZBTC).start() 
symbol_g_ZILBTC = 'ZILBTC' 
price_bids_g_ZILBTC = Decimal('0.0') 
qty_bids_g_ZILBTC = Decimal('0.0') 
price_asks_g_ZILBTC = Decimal('0.0') 
qty_asks_g_ZILBTC = Decimal('0.0') 
stepSize_g_ZILBTC = Decimal('1.0') 


def on_message_ZILBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZILBTC = 'ZILBTC' 
	price_bids_c_l_ZILBTC = data['b'] 
	qty_bids_c_l_ZILBTC = data['B'] 
	price_asks_c_l_ZILBTC = data['a'] 
	qty_asks_c_l_ZILBTC = data['A'] 

	global symbol_g_ZILBTC 
	global price_bids_g_ZILBTC 
	global qty_bids_g_ZILBTC 
	global price_asks_g_ZILBTC 
	global qty_asks_g_ZILBTC 

	symbol_g_ZILBTC = symbol_c_l_ZILBTC 
	price_bids_g_ZILBTC = Decimal(price_bids_c_l_ZILBTC) 
	qty_bids_g_ZILBTC = Decimal(qty_bids_c_l_ZILBTC) 
	price_asks_g_ZILBTC = Decimal(price_asks_c_l_ZILBTC) 
	qty_asks_g_ZILBTC = Decimal(qty_asks_c_l_ZILBTC) 


def loop_ZILBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zilbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZILBTC) 
	ws.run_forever() 


Thread(target=loop_ZILBTC).start() 
symbol_g_ONTBTC = 'ONTBTC' 
price_bids_g_ONTBTC = Decimal('0.0') 
qty_bids_g_ONTBTC = Decimal('0.0') 
price_asks_g_ONTBTC = Decimal('0.0') 
qty_asks_g_ONTBTC = Decimal('0.0') 
stepSize_g_ONTBTC = Decimal('1.0') 


def on_message_ONTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ONTBTC = 'ONTBTC' 
	price_bids_c_l_ONTBTC = data['b'] 
	qty_bids_c_l_ONTBTC = data['B'] 
	price_asks_c_l_ONTBTC = data['a'] 
	qty_asks_c_l_ONTBTC = data['A'] 

	global symbol_g_ONTBTC 
	global price_bids_g_ONTBTC 
	global qty_bids_g_ONTBTC 
	global price_asks_g_ONTBTC 
	global qty_asks_g_ONTBTC 

	symbol_g_ONTBTC = symbol_c_l_ONTBTC 
	price_bids_g_ONTBTC = Decimal(price_bids_c_l_ONTBTC) 
	qty_bids_g_ONTBTC = Decimal(qty_bids_c_l_ONTBTC) 
	price_asks_g_ONTBTC = Decimal(price_asks_c_l_ONTBTC) 
	qty_asks_g_ONTBTC = Decimal(qty_asks_c_l_ONTBTC) 


def loop_ONTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ontbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ONTBTC) 
	ws.run_forever() 


Thread(target=loop_ONTBTC).start() 
symbol_g_WANBTC = 'WANBTC' 
price_bids_g_WANBTC = Decimal('0.0') 
qty_bids_g_WANBTC = Decimal('0.0') 
price_asks_g_WANBTC = Decimal('0.0') 
qty_asks_g_WANBTC = Decimal('0.0') 
stepSize_g_WANBTC = Decimal('1.0') 


def on_message_WANBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WANBTC = 'WANBTC' 
	price_bids_c_l_WANBTC = data['b'] 
	qty_bids_c_l_WANBTC = data['B'] 
	price_asks_c_l_WANBTC = data['a'] 
	qty_asks_c_l_WANBTC = data['A'] 

	global symbol_g_WANBTC 
	global price_bids_g_WANBTC 
	global qty_bids_g_WANBTC 
	global price_asks_g_WANBTC 
	global qty_asks_g_WANBTC 

	symbol_g_WANBTC = symbol_c_l_WANBTC 
	price_bids_g_WANBTC = Decimal(price_bids_c_l_WANBTC) 
	qty_bids_g_WANBTC = Decimal(qty_bids_c_l_WANBTC) 
	price_asks_g_WANBTC = Decimal(price_asks_c_l_WANBTC) 
	qty_asks_g_WANBTC = Decimal(qty_asks_c_l_WANBTC) 


def loop_WANBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wanbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WANBTC) 
	ws.run_forever() 


Thread(target=loop_WANBTC).start() 
symbol_g_SYSBTC = 'SYSBTC' 
price_bids_g_SYSBTC = Decimal('0.0') 
qty_bids_g_SYSBTC = Decimal('0.0') 
price_asks_g_SYSBTC = Decimal('0.0') 
qty_asks_g_SYSBTC = Decimal('0.0') 
stepSize_g_SYSBTC = Decimal('1.0') 


def on_message_SYSBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SYSBTC = 'SYSBTC' 
	price_bids_c_l_SYSBTC = data['b'] 
	qty_bids_c_l_SYSBTC = data['B'] 
	price_asks_c_l_SYSBTC = data['a'] 
	qty_asks_c_l_SYSBTC = data['A'] 

	global symbol_g_SYSBTC 
	global price_bids_g_SYSBTC 
	global qty_bids_g_SYSBTC 
	global price_asks_g_SYSBTC 
	global qty_asks_g_SYSBTC 

	symbol_g_SYSBTC = symbol_c_l_SYSBTC 
	price_bids_g_SYSBTC = Decimal(price_bids_c_l_SYSBTC) 
	qty_bids_g_SYSBTC = Decimal(qty_bids_c_l_SYSBTC) 
	price_asks_g_SYSBTC = Decimal(price_asks_c_l_SYSBTC) 
	qty_asks_g_SYSBTC = Decimal(qty_asks_c_l_SYSBTC) 


def loop_SYSBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sysbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SYSBTC) 
	ws.run_forever() 


Thread(target=loop_SYSBTC).start() 
symbol_g_ZENBTC = 'ZENBTC' 
price_bids_g_ZENBTC = Decimal('0.0') 
qty_bids_g_ZENBTC = Decimal('0.0') 
price_asks_g_ZENBTC = Decimal('0.0') 
qty_asks_g_ZENBTC = Decimal('0.0') 
stepSize_g_ZENBTC = Decimal('0.01') 


def on_message_ZENBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZENBTC = 'ZENBTC' 
	price_bids_c_l_ZENBTC = data['b'] 
	qty_bids_c_l_ZENBTC = data['B'] 
	price_asks_c_l_ZENBTC = data['a'] 
	qty_asks_c_l_ZENBTC = data['A'] 

	global symbol_g_ZENBTC 
	global price_bids_g_ZENBTC 
	global qty_bids_g_ZENBTC 
	global price_asks_g_ZENBTC 
	global qty_asks_g_ZENBTC 

	symbol_g_ZENBTC = symbol_c_l_ZENBTC 
	price_bids_g_ZENBTC = Decimal(price_bids_c_l_ZENBTC) 
	qty_bids_g_ZENBTC = Decimal(qty_bids_c_l_ZENBTC) 
	price_asks_g_ZENBTC = Decimal(price_asks_c_l_ZENBTC) 
	qty_asks_g_ZENBTC = Decimal(qty_asks_c_l_ZENBTC) 


def loop_ZENBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zenbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZENBTC) 
	ws.run_forever() 


Thread(target=loop_ZENBTC).start() 
symbol_g_THETABTC = 'THETABTC' 
price_bids_g_THETABTC = Decimal('0.0') 
qty_bids_g_THETABTC = Decimal('0.0') 
price_asks_g_THETABTC = Decimal('0.0') 
qty_asks_g_THETABTC = Decimal('0.0') 
stepSize_g_THETABTC = Decimal('0.1') 


def on_message_THETABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_THETABTC = 'THETABTC' 
	price_bids_c_l_THETABTC = data['b'] 
	qty_bids_c_l_THETABTC = data['B'] 
	price_asks_c_l_THETABTC = data['a'] 
	qty_asks_c_l_THETABTC = data['A'] 

	global symbol_g_THETABTC 
	global price_bids_g_THETABTC 
	global qty_bids_g_THETABTC 
	global price_asks_g_THETABTC 
	global qty_asks_g_THETABTC 

	symbol_g_THETABTC = symbol_c_l_THETABTC 
	price_bids_g_THETABTC = Decimal(price_bids_c_l_THETABTC) 
	qty_bids_g_THETABTC = Decimal(qty_bids_c_l_THETABTC) 
	price_asks_g_THETABTC = Decimal(price_asks_c_l_THETABTC) 
	qty_asks_g_THETABTC = Decimal(qty_asks_c_l_THETABTC) 


def loop_THETABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/thetabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_THETABTC) 
	ws.run_forever() 


Thread(target=loop_THETABTC).start() 
symbol_g_IOTXBTC = 'IOTXBTC' 
price_bids_g_IOTXBTC = Decimal('0.0') 
qty_bids_g_IOTXBTC = Decimal('0.0') 
price_asks_g_IOTXBTC = Decimal('0.0') 
qty_asks_g_IOTXBTC = Decimal('0.0') 
stepSize_g_IOTXBTC = Decimal('1.0') 


def on_message_IOTXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IOTXBTC = 'IOTXBTC' 
	price_bids_c_l_IOTXBTC = data['b'] 
	qty_bids_c_l_IOTXBTC = data['B'] 
	price_asks_c_l_IOTXBTC = data['a'] 
	qty_asks_c_l_IOTXBTC = data['A'] 

	global symbol_g_IOTXBTC 
	global price_bids_g_IOTXBTC 
	global qty_bids_g_IOTXBTC 
	global price_asks_g_IOTXBTC 
	global qty_asks_g_IOTXBTC 

	symbol_g_IOTXBTC = symbol_c_l_IOTXBTC 
	price_bids_g_IOTXBTC = Decimal(price_bids_c_l_IOTXBTC) 
	qty_bids_g_IOTXBTC = Decimal(qty_bids_c_l_IOTXBTC) 
	price_asks_g_IOTXBTC = Decimal(price_asks_c_l_IOTXBTC) 
	qty_asks_g_IOTXBTC = Decimal(qty_asks_c_l_IOTXBTC) 


def loop_IOTXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/iotxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IOTXBTC) 
	ws.run_forever() 


Thread(target=loop_IOTXBTC).start() 
symbol_g_DATABTC = 'DATABTC' 
price_bids_g_DATABTC = Decimal('0.0') 
qty_bids_g_DATABTC = Decimal('0.0') 
price_asks_g_DATABTC = Decimal('0.0') 
qty_asks_g_DATABTC = Decimal('0.0') 
stepSize_g_DATABTC = Decimal('1.0') 


def on_message_DATABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DATABTC = 'DATABTC' 
	price_bids_c_l_DATABTC = data['b'] 
	qty_bids_c_l_DATABTC = data['B'] 
	price_asks_c_l_DATABTC = data['a'] 
	qty_asks_c_l_DATABTC = data['A'] 

	global symbol_g_DATABTC 
	global price_bids_g_DATABTC 
	global qty_bids_g_DATABTC 
	global price_asks_g_DATABTC 
	global qty_asks_g_DATABTC 

	symbol_g_DATABTC = symbol_c_l_DATABTC 
	price_bids_g_DATABTC = Decimal(price_bids_c_l_DATABTC) 
	qty_bids_g_DATABTC = Decimal(qty_bids_c_l_DATABTC) 
	price_asks_g_DATABTC = Decimal(price_asks_c_l_DATABTC) 
	qty_asks_g_DATABTC = Decimal(qty_asks_c_l_DATABTC) 


def loop_DATABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/databtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DATABTC) 
	ws.run_forever() 


Thread(target=loop_DATABTC).start() 
symbol_g_ARDRBTC = 'ARDRBTC' 
price_bids_g_ARDRBTC = Decimal('0.0') 
qty_bids_g_ARDRBTC = Decimal('0.0') 
price_asks_g_ARDRBTC = Decimal('0.0') 
qty_asks_g_ARDRBTC = Decimal('0.0') 
stepSize_g_ARDRBTC = Decimal('1.0') 


def on_message_ARDRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ARDRBTC = 'ARDRBTC' 
	price_bids_c_l_ARDRBTC = data['b'] 
	qty_bids_c_l_ARDRBTC = data['B'] 
	price_asks_c_l_ARDRBTC = data['a'] 
	qty_asks_c_l_ARDRBTC = data['A'] 

	global symbol_g_ARDRBTC 
	global price_bids_g_ARDRBTC 
	global qty_bids_g_ARDRBTC 
	global price_asks_g_ARDRBTC 
	global qty_asks_g_ARDRBTC 

	symbol_g_ARDRBTC = symbol_c_l_ARDRBTC 
	price_bids_g_ARDRBTC = Decimal(price_bids_c_l_ARDRBTC) 
	qty_bids_g_ARDRBTC = Decimal(qty_bids_c_l_ARDRBTC) 
	price_asks_g_ARDRBTC = Decimal(price_asks_c_l_ARDRBTC) 
	qty_asks_g_ARDRBTC = Decimal(qty_asks_c_l_ARDRBTC) 


def loop_ARDRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ardrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ARDRBTC) 
	ws.run_forever() 


Thread(target=loop_ARDRBTC).start() 
symbol_g_VETBTC = 'VETBTC' 
price_bids_g_VETBTC = Decimal('0.0') 
qty_bids_g_VETBTC = Decimal('0.0') 
price_asks_g_VETBTC = Decimal('0.0') 
qty_asks_g_VETBTC = Decimal('0.0') 
stepSize_g_VETBTC = Decimal('1.0') 


def on_message_VETBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VETBTC = 'VETBTC' 
	price_bids_c_l_VETBTC = data['b'] 
	qty_bids_c_l_VETBTC = data['B'] 
	price_asks_c_l_VETBTC = data['a'] 
	qty_asks_c_l_VETBTC = data['A'] 

	global symbol_g_VETBTC 
	global price_bids_g_VETBTC 
	global qty_bids_g_VETBTC 
	global price_asks_g_VETBTC 
	global qty_asks_g_VETBTC 

	symbol_g_VETBTC = symbol_c_l_VETBTC 
	price_bids_g_VETBTC = Decimal(price_bids_c_l_VETBTC) 
	qty_bids_g_VETBTC = Decimal(qty_bids_c_l_VETBTC) 
	price_asks_g_VETBTC = Decimal(price_asks_c_l_VETBTC) 
	qty_asks_g_VETBTC = Decimal(qty_asks_c_l_VETBTC) 


def loop_VETBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/vetbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VETBTC) 
	ws.run_forever() 


Thread(target=loop_VETBTC).start() 
symbol_g_DOCKBTC = 'DOCKBTC' 
price_bids_g_DOCKBTC = Decimal('0.0') 
qty_bids_g_DOCKBTC = Decimal('0.0') 
price_asks_g_DOCKBTC = Decimal('0.0') 
qty_asks_g_DOCKBTC = Decimal('0.0') 
stepSize_g_DOCKBTC = Decimal('1.0') 


def on_message_DOCKBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOCKBTC = 'DOCKBTC' 
	price_bids_c_l_DOCKBTC = data['b'] 
	qty_bids_c_l_DOCKBTC = data['B'] 
	price_asks_c_l_DOCKBTC = data['a'] 
	qty_asks_c_l_DOCKBTC = data['A'] 

	global symbol_g_DOCKBTC 
	global price_bids_g_DOCKBTC 
	global qty_bids_g_DOCKBTC 
	global price_asks_g_DOCKBTC 
	global qty_asks_g_DOCKBTC 

	symbol_g_DOCKBTC = symbol_c_l_DOCKBTC 
	price_bids_g_DOCKBTC = Decimal(price_bids_c_l_DOCKBTC) 
	qty_bids_g_DOCKBTC = Decimal(qty_bids_c_l_DOCKBTC) 
	price_asks_g_DOCKBTC = Decimal(price_asks_c_l_DOCKBTC) 
	qty_asks_g_DOCKBTC = Decimal(qty_asks_c_l_DOCKBTC) 


def loop_DOCKBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dockbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOCKBTC) 
	ws.run_forever() 


Thread(target=loop_DOCKBTC).start() 
symbol_g_RVNBTC = 'RVNBTC' 
price_bids_g_RVNBTC = Decimal('0.0') 
qty_bids_g_RVNBTC = Decimal('0.0') 
price_asks_g_RVNBTC = Decimal('0.0') 
qty_asks_g_RVNBTC = Decimal('0.0') 
stepSize_g_RVNBTC = Decimal('1.0') 


def on_message_RVNBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RVNBTC = 'RVNBTC' 
	price_bids_c_l_RVNBTC = data['b'] 
	qty_bids_c_l_RVNBTC = data['B'] 
	price_asks_c_l_RVNBTC = data['a'] 
	qty_asks_c_l_RVNBTC = data['A'] 

	global symbol_g_RVNBTC 
	global price_bids_g_RVNBTC 
	global qty_bids_g_RVNBTC 
	global price_asks_g_RVNBTC 
	global qty_asks_g_RVNBTC 

	symbol_g_RVNBTC = symbol_c_l_RVNBTC 
	price_bids_g_RVNBTC = Decimal(price_bids_c_l_RVNBTC) 
	qty_bids_g_RVNBTC = Decimal(qty_bids_c_l_RVNBTC) 
	price_asks_g_RVNBTC = Decimal(price_asks_c_l_RVNBTC) 
	qty_asks_g_RVNBTC = Decimal(qty_asks_c_l_RVNBTC) 


def loop_RVNBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rvnbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RVNBTC) 
	ws.run_forever() 


Thread(target=loop_RVNBTC).start() 
symbol_g_DCRBTC = 'DCRBTC' 
price_bids_g_DCRBTC = Decimal('0.0') 
qty_bids_g_DCRBTC = Decimal('0.0') 
price_asks_g_DCRBTC = Decimal('0.0') 
qty_asks_g_DCRBTC = Decimal('0.0') 
stepSize_g_DCRBTC = Decimal('0.001') 


def on_message_DCRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DCRBTC = 'DCRBTC' 
	price_bids_c_l_DCRBTC = data['b'] 
	qty_bids_c_l_DCRBTC = data['B'] 
	price_asks_c_l_DCRBTC = data['a'] 
	qty_asks_c_l_DCRBTC = data['A'] 

	global symbol_g_DCRBTC 
	global price_bids_g_DCRBTC 
	global qty_bids_g_DCRBTC 
	global price_asks_g_DCRBTC 
	global qty_asks_g_DCRBTC 

	symbol_g_DCRBTC = symbol_c_l_DCRBTC 
	price_bids_g_DCRBTC = Decimal(price_bids_c_l_DCRBTC) 
	qty_bids_g_DCRBTC = Decimal(qty_bids_c_l_DCRBTC) 
	price_asks_g_DCRBTC = Decimal(price_asks_c_l_DCRBTC) 
	qty_asks_g_DCRBTC = Decimal(qty_asks_c_l_DCRBTC) 


def loop_DCRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dcrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DCRBTC) 
	ws.run_forever() 


Thread(target=loop_DCRBTC).start() 
symbol_g_RENBTC = 'RENBTC' 
price_bids_g_RENBTC = Decimal('0.0') 
qty_bids_g_RENBTC = Decimal('0.0') 
price_asks_g_RENBTC = Decimal('0.0') 
qty_asks_g_RENBTC = Decimal('0.0') 
stepSize_g_RENBTC = Decimal('1.0') 


def on_message_RENBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RENBTC = 'RENBTC' 
	price_bids_c_l_RENBTC = data['b'] 
	qty_bids_c_l_RENBTC = data['B'] 
	price_asks_c_l_RENBTC = data['a'] 
	qty_asks_c_l_RENBTC = data['A'] 

	global symbol_g_RENBTC 
	global price_bids_g_RENBTC 
	global qty_bids_g_RENBTC 
	global price_asks_g_RENBTC 
	global qty_asks_g_RENBTC 

	symbol_g_RENBTC = symbol_c_l_RENBTC 
	price_bids_g_RENBTC = Decimal(price_bids_c_l_RENBTC) 
	qty_bids_g_RENBTC = Decimal(qty_bids_c_l_RENBTC) 
	price_asks_g_RENBTC = Decimal(price_asks_c_l_RENBTC) 
	qty_asks_g_RENBTC = Decimal(qty_asks_c_l_RENBTC) 


def loop_RENBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/renbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RENBTC) 
	ws.run_forever() 


Thread(target=loop_RENBTC).start() 
symbol_g_ONGBTC = 'ONGBTC' 
price_bids_g_ONGBTC = Decimal('0.0') 
qty_bids_g_ONGBTC = Decimal('0.0') 
price_asks_g_ONGBTC = Decimal('0.0') 
qty_asks_g_ONGBTC = Decimal('0.0') 
stepSize_g_ONGBTC = Decimal('1.0') 


def on_message_ONGBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ONGBTC = 'ONGBTC' 
	price_bids_c_l_ONGBTC = data['b'] 
	qty_bids_c_l_ONGBTC = data['B'] 
	price_asks_c_l_ONGBTC = data['a'] 
	qty_asks_c_l_ONGBTC = data['A'] 

	global symbol_g_ONGBTC 
	global price_bids_g_ONGBTC 
	global qty_bids_g_ONGBTC 
	global price_asks_g_ONGBTC 
	global qty_asks_g_ONGBTC 

	symbol_g_ONGBTC = symbol_c_l_ONGBTC 
	price_bids_g_ONGBTC = Decimal(price_bids_c_l_ONGBTC) 
	qty_bids_g_ONGBTC = Decimal(qty_bids_c_l_ONGBTC) 
	price_asks_g_ONGBTC = Decimal(price_asks_c_l_ONGBTC) 
	qty_asks_g_ONGBTC = Decimal(qty_asks_c_l_ONGBTC) 


def loop_ONGBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ongbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ONGBTC) 
	ws.run_forever() 


Thread(target=loop_ONGBTC).start() 
symbol_g_FETBTC = 'FETBTC' 
price_bids_g_FETBTC = Decimal('0.0') 
qty_bids_g_FETBTC = Decimal('0.0') 
price_asks_g_FETBTC = Decimal('0.0') 
qty_asks_g_FETBTC = Decimal('0.0') 
stepSize_g_FETBTC = Decimal('1.0') 


def on_message_FETBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FETBTC = 'FETBTC' 
	price_bids_c_l_FETBTC = data['b'] 
	qty_bids_c_l_FETBTC = data['B'] 
	price_asks_c_l_FETBTC = data['a'] 
	qty_asks_c_l_FETBTC = data['A'] 

	global symbol_g_FETBTC 
	global price_bids_g_FETBTC 
	global qty_bids_g_FETBTC 
	global price_asks_g_FETBTC 
	global qty_asks_g_FETBTC 

	symbol_g_FETBTC = symbol_c_l_FETBTC 
	price_bids_g_FETBTC = Decimal(price_bids_c_l_FETBTC) 
	qty_bids_g_FETBTC = Decimal(qty_bids_c_l_FETBTC) 
	price_asks_g_FETBTC = Decimal(price_asks_c_l_FETBTC) 
	qty_asks_g_FETBTC = Decimal(qty_asks_c_l_FETBTC) 


def loop_FETBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fetbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FETBTC) 
	ws.run_forever() 


Thread(target=loop_FETBTC).start() 
symbol_g_CELRBTC = 'CELRBTC' 
price_bids_g_CELRBTC = Decimal('0.0') 
qty_bids_g_CELRBTC = Decimal('0.0') 
price_asks_g_CELRBTC = Decimal('0.0') 
qty_asks_g_CELRBTC = Decimal('0.0') 
stepSize_g_CELRBTC = Decimal('1.0') 


def on_message_CELRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CELRBTC = 'CELRBTC' 
	price_bids_c_l_CELRBTC = data['b'] 
	qty_bids_c_l_CELRBTC = data['B'] 
	price_asks_c_l_CELRBTC = data['a'] 
	qty_asks_c_l_CELRBTC = data['A'] 

	global symbol_g_CELRBTC 
	global price_bids_g_CELRBTC 
	global qty_bids_g_CELRBTC 
	global price_asks_g_CELRBTC 
	global qty_asks_g_CELRBTC 

	symbol_g_CELRBTC = symbol_c_l_CELRBTC 
	price_bids_g_CELRBTC = Decimal(price_bids_c_l_CELRBTC) 
	qty_bids_g_CELRBTC = Decimal(qty_bids_c_l_CELRBTC) 
	price_asks_g_CELRBTC = Decimal(price_asks_c_l_CELRBTC) 
	qty_asks_g_CELRBTC = Decimal(qty_asks_c_l_CELRBTC) 


def loop_CELRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/celrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CELRBTC) 
	ws.run_forever() 


Thread(target=loop_CELRBTC).start() 
symbol_g_MATICBTC = 'MATICBTC' 
price_bids_g_MATICBTC = Decimal('0.0') 
qty_bids_g_MATICBTC = Decimal('0.0') 
price_asks_g_MATICBTC = Decimal('0.0') 
qty_asks_g_MATICBTC = Decimal('0.0') 
stepSize_g_MATICBTC = Decimal('0.1') 


def on_message_MATICBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MATICBTC = 'MATICBTC' 
	price_bids_c_l_MATICBTC = data['b'] 
	qty_bids_c_l_MATICBTC = data['B'] 
	price_asks_c_l_MATICBTC = data['a'] 
	qty_asks_c_l_MATICBTC = data['A'] 

	global symbol_g_MATICBTC 
	global price_bids_g_MATICBTC 
	global qty_bids_g_MATICBTC 
	global price_asks_g_MATICBTC 
	global qty_asks_g_MATICBTC 

	symbol_g_MATICBTC = symbol_c_l_MATICBTC 
	price_bids_g_MATICBTC = Decimal(price_bids_c_l_MATICBTC) 
	qty_bids_g_MATICBTC = Decimal(qty_bids_c_l_MATICBTC) 
	price_asks_g_MATICBTC = Decimal(price_asks_c_l_MATICBTC) 
	qty_asks_g_MATICBTC = Decimal(qty_asks_c_l_MATICBTC) 


def loop_MATICBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maticbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MATICBTC) 
	ws.run_forever() 


Thread(target=loop_MATICBTC).start() 
symbol_g_ATOMBTC = 'ATOMBTC' 
price_bids_g_ATOMBTC = Decimal('0.0') 
qty_bids_g_ATOMBTC = Decimal('0.0') 
price_asks_g_ATOMBTC = Decimal('0.0') 
qty_asks_g_ATOMBTC = Decimal('0.0') 
stepSize_g_ATOMBTC = Decimal('0.01') 


def on_message_ATOMBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATOMBTC = 'ATOMBTC' 
	price_bids_c_l_ATOMBTC = data['b'] 
	qty_bids_c_l_ATOMBTC = data['B'] 
	price_asks_c_l_ATOMBTC = data['a'] 
	qty_asks_c_l_ATOMBTC = data['A'] 

	global symbol_g_ATOMBTC 
	global price_bids_g_ATOMBTC 
	global qty_bids_g_ATOMBTC 
	global price_asks_g_ATOMBTC 
	global qty_asks_g_ATOMBTC 

	symbol_g_ATOMBTC = symbol_c_l_ATOMBTC 
	price_bids_g_ATOMBTC = Decimal(price_bids_c_l_ATOMBTC) 
	qty_bids_g_ATOMBTC = Decimal(qty_bids_c_l_ATOMBTC) 
	price_asks_g_ATOMBTC = Decimal(price_asks_c_l_ATOMBTC) 
	qty_asks_g_ATOMBTC = Decimal(qty_asks_c_l_ATOMBTC) 


def loop_ATOMBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atombtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATOMBTC) 
	ws.run_forever() 


Thread(target=loop_ATOMBTC).start() 
symbol_g_PHBBTC = 'PHBBTC' 
price_bids_g_PHBBTC = Decimal('0.0') 
qty_bids_g_PHBBTC = Decimal('0.0') 
price_asks_g_PHBBTC = Decimal('0.0') 
qty_asks_g_PHBBTC = Decimal('0.0') 
stepSize_g_PHBBTC = Decimal('0.1') 


def on_message_PHBBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PHBBTC = 'PHBBTC' 
	price_bids_c_l_PHBBTC = data['b'] 
	qty_bids_c_l_PHBBTC = data['B'] 
	price_asks_c_l_PHBBTC = data['a'] 
	qty_asks_c_l_PHBBTC = data['A'] 

	global symbol_g_PHBBTC 
	global price_bids_g_PHBBTC 
	global qty_bids_g_PHBBTC 
	global price_asks_g_PHBBTC 
	global qty_asks_g_PHBBTC 

	symbol_g_PHBBTC = symbol_c_l_PHBBTC 
	price_bids_g_PHBBTC = Decimal(price_bids_c_l_PHBBTC) 
	qty_bids_g_PHBBTC = Decimal(qty_bids_c_l_PHBBTC) 
	price_asks_g_PHBBTC = Decimal(price_asks_c_l_PHBBTC) 
	qty_asks_g_PHBBTC = Decimal(qty_asks_c_l_PHBBTC) 


def loop_PHBBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/phbbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PHBBTC) 
	ws.run_forever() 


Thread(target=loop_PHBBTC).start() 
symbol_g_TFUELBTC = 'TFUELBTC' 
price_bids_g_TFUELBTC = Decimal('0.0') 
qty_bids_g_TFUELBTC = Decimal('0.0') 
price_asks_g_TFUELBTC = Decimal('0.0') 
qty_asks_g_TFUELBTC = Decimal('0.0') 
stepSize_g_TFUELBTC = Decimal('1.0') 


def on_message_TFUELBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TFUELBTC = 'TFUELBTC' 
	price_bids_c_l_TFUELBTC = data['b'] 
	qty_bids_c_l_TFUELBTC = data['B'] 
	price_asks_c_l_TFUELBTC = data['a'] 
	qty_asks_c_l_TFUELBTC = data['A'] 

	global symbol_g_TFUELBTC 
	global price_bids_g_TFUELBTC 
	global qty_bids_g_TFUELBTC 
	global price_asks_g_TFUELBTC 
	global qty_asks_g_TFUELBTC 

	symbol_g_TFUELBTC = symbol_c_l_TFUELBTC 
	price_bids_g_TFUELBTC = Decimal(price_bids_c_l_TFUELBTC) 
	qty_bids_g_TFUELBTC = Decimal(qty_bids_c_l_TFUELBTC) 
	price_asks_g_TFUELBTC = Decimal(price_asks_c_l_TFUELBTC) 
	qty_asks_g_TFUELBTC = Decimal(qty_asks_c_l_TFUELBTC) 


def loop_TFUELBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tfuelbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TFUELBTC) 
	ws.run_forever() 


Thread(target=loop_TFUELBTC).start() 
symbol_g_ONEBTC = 'ONEBTC' 
price_bids_g_ONEBTC = Decimal('0.0') 
qty_bids_g_ONEBTC = Decimal('0.0') 
price_asks_g_ONEBTC = Decimal('0.0') 
qty_asks_g_ONEBTC = Decimal('0.0') 
stepSize_g_ONEBTC = Decimal('1.0') 


def on_message_ONEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ONEBTC = 'ONEBTC' 
	price_bids_c_l_ONEBTC = data['b'] 
	qty_bids_c_l_ONEBTC = data['B'] 
	price_asks_c_l_ONEBTC = data['a'] 
	qty_asks_c_l_ONEBTC = data['A'] 

	global symbol_g_ONEBTC 
	global price_bids_g_ONEBTC 
	global qty_bids_g_ONEBTC 
	global price_asks_g_ONEBTC 
	global qty_asks_g_ONEBTC 

	symbol_g_ONEBTC = symbol_c_l_ONEBTC 
	price_bids_g_ONEBTC = Decimal(price_bids_c_l_ONEBTC) 
	qty_bids_g_ONEBTC = Decimal(qty_bids_c_l_ONEBTC) 
	price_asks_g_ONEBTC = Decimal(price_asks_c_l_ONEBTC) 
	qty_asks_g_ONEBTC = Decimal(qty_asks_c_l_ONEBTC) 


def loop_ONEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/onebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ONEBTC) 
	ws.run_forever() 


Thread(target=loop_ONEBTC).start() 
symbol_g_FTMBTC = 'FTMBTC' 
price_bids_g_FTMBTC = Decimal('0.0') 
qty_bids_g_FTMBTC = Decimal('0.0') 
price_asks_g_FTMBTC = Decimal('0.0') 
qty_asks_g_FTMBTC = Decimal('0.0') 
stepSize_g_FTMBTC = Decimal('1.0') 


def on_message_FTMBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FTMBTC = 'FTMBTC' 
	price_bids_c_l_FTMBTC = data['b'] 
	qty_bids_c_l_FTMBTC = data['B'] 
	price_asks_c_l_FTMBTC = data['a'] 
	qty_asks_c_l_FTMBTC = data['A'] 

	global symbol_g_FTMBTC 
	global price_bids_g_FTMBTC 
	global qty_bids_g_FTMBTC 
	global price_asks_g_FTMBTC 
	global qty_asks_g_FTMBTC 

	symbol_g_FTMBTC = symbol_c_l_FTMBTC 
	price_bids_g_FTMBTC = Decimal(price_bids_c_l_FTMBTC) 
	qty_bids_g_FTMBTC = Decimal(qty_bids_c_l_FTMBTC) 
	price_asks_g_FTMBTC = Decimal(price_asks_c_l_FTMBTC) 
	qty_asks_g_FTMBTC = Decimal(qty_asks_c_l_FTMBTC) 


def loop_FTMBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ftmbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FTMBTC) 
	ws.run_forever() 


Thread(target=loop_FTMBTC).start() 
symbol_g_ALGOBTC = 'ALGOBTC' 
price_bids_g_ALGOBTC = Decimal('0.0') 
qty_bids_g_ALGOBTC = Decimal('0.0') 
price_asks_g_ALGOBTC = Decimal('0.0') 
qty_asks_g_ALGOBTC = Decimal('0.0') 
stepSize_g_ALGOBTC = Decimal('1.0') 


def on_message_ALGOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALGOBTC = 'ALGOBTC' 
	price_bids_c_l_ALGOBTC = data['b'] 
	qty_bids_c_l_ALGOBTC = data['B'] 
	price_asks_c_l_ALGOBTC = data['a'] 
	qty_asks_c_l_ALGOBTC = data['A'] 

	global symbol_g_ALGOBTC 
	global price_bids_g_ALGOBTC 
	global qty_bids_g_ALGOBTC 
	global price_asks_g_ALGOBTC 
	global qty_asks_g_ALGOBTC 

	symbol_g_ALGOBTC = symbol_c_l_ALGOBTC 
	price_bids_g_ALGOBTC = Decimal(price_bids_c_l_ALGOBTC) 
	qty_bids_g_ALGOBTC = Decimal(qty_bids_c_l_ALGOBTC) 
	price_asks_g_ALGOBTC = Decimal(price_asks_c_l_ALGOBTC) 
	qty_asks_g_ALGOBTC = Decimal(qty_asks_c_l_ALGOBTC) 


def loop_ALGOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/algobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALGOBTC) 
	ws.run_forever() 


Thread(target=loop_ALGOBTC).start() 
symbol_g_DOGEBTC = 'DOGEBTC' 
price_bids_g_DOGEBTC = Decimal('0.0') 
qty_bids_g_DOGEBTC = Decimal('0.0') 
price_asks_g_DOGEBTC = Decimal('0.0') 
qty_asks_g_DOGEBTC = Decimal('0.0') 
stepSize_g_DOGEBTC = Decimal('1.0') 


def on_message_DOGEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOGEBTC = 'DOGEBTC' 
	price_bids_c_l_DOGEBTC = data['b'] 
	qty_bids_c_l_DOGEBTC = data['B'] 
	price_asks_c_l_DOGEBTC = data['a'] 
	qty_asks_c_l_DOGEBTC = data['A'] 

	global symbol_g_DOGEBTC 
	global price_bids_g_DOGEBTC 
	global qty_bids_g_DOGEBTC 
	global price_asks_g_DOGEBTC 
	global qty_asks_g_DOGEBTC 

	symbol_g_DOGEBTC = symbol_c_l_DOGEBTC 
	price_bids_g_DOGEBTC = Decimal(price_bids_c_l_DOGEBTC) 
	qty_bids_g_DOGEBTC = Decimal(qty_bids_c_l_DOGEBTC) 
	price_asks_g_DOGEBTC = Decimal(price_asks_c_l_DOGEBTC) 
	qty_asks_g_DOGEBTC = Decimal(qty_asks_c_l_DOGEBTC) 


def loop_DOGEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dogebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOGEBTC) 
	ws.run_forever() 


Thread(target=loop_DOGEBTC).start() 
symbol_g_DUSKBTC = 'DUSKBTC' 
price_bids_g_DUSKBTC = Decimal('0.0') 
qty_bids_g_DUSKBTC = Decimal('0.0') 
price_asks_g_DUSKBTC = Decimal('0.0') 
qty_asks_g_DUSKBTC = Decimal('0.0') 
stepSize_g_DUSKBTC = Decimal('1.0') 


def on_message_DUSKBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DUSKBTC = 'DUSKBTC' 
	price_bids_c_l_DUSKBTC = data['b'] 
	qty_bids_c_l_DUSKBTC = data['B'] 
	price_asks_c_l_DUSKBTC = data['a'] 
	qty_asks_c_l_DUSKBTC = data['A'] 

	global symbol_g_DUSKBTC 
	global price_bids_g_DUSKBTC 
	global qty_bids_g_DUSKBTC 
	global price_asks_g_DUSKBTC 
	global qty_asks_g_DUSKBTC 

	symbol_g_DUSKBTC = symbol_c_l_DUSKBTC 
	price_bids_g_DUSKBTC = Decimal(price_bids_c_l_DUSKBTC) 
	qty_bids_g_DUSKBTC = Decimal(qty_bids_c_l_DUSKBTC) 
	price_asks_g_DUSKBTC = Decimal(price_asks_c_l_DUSKBTC) 
	qty_asks_g_DUSKBTC = Decimal(qty_asks_c_l_DUSKBTC) 


def loop_DUSKBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/duskbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DUSKBTC) 
	ws.run_forever() 


Thread(target=loop_DUSKBTC).start() 
symbol_g_ANKRBTC = 'ANKRBTC' 
price_bids_g_ANKRBTC = Decimal('0.0') 
qty_bids_g_ANKRBTC = Decimal('0.0') 
price_asks_g_ANKRBTC = Decimal('0.0') 
qty_asks_g_ANKRBTC = Decimal('0.0') 
stepSize_g_ANKRBTC = Decimal('1.0') 


def on_message_ANKRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ANKRBTC = 'ANKRBTC' 
	price_bids_c_l_ANKRBTC = data['b'] 
	qty_bids_c_l_ANKRBTC = data['B'] 
	price_asks_c_l_ANKRBTC = data['a'] 
	qty_asks_c_l_ANKRBTC = data['A'] 

	global symbol_g_ANKRBTC 
	global price_bids_g_ANKRBTC 
	global qty_bids_g_ANKRBTC 
	global price_asks_g_ANKRBTC 
	global qty_asks_g_ANKRBTC 

	symbol_g_ANKRBTC = symbol_c_l_ANKRBTC 
	price_bids_g_ANKRBTC = Decimal(price_bids_c_l_ANKRBTC) 
	qty_bids_g_ANKRBTC = Decimal(qty_bids_c_l_ANKRBTC) 
	price_asks_g_ANKRBTC = Decimal(price_asks_c_l_ANKRBTC) 
	qty_asks_g_ANKRBTC = Decimal(qty_asks_c_l_ANKRBTC) 


def loop_ANKRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ankrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ANKRBTC) 
	ws.run_forever() 


Thread(target=loop_ANKRBTC).start() 
symbol_g_COSBTC = 'COSBTC' 
price_bids_g_COSBTC = Decimal('0.0') 
qty_bids_g_COSBTC = Decimal('0.0') 
price_asks_g_COSBTC = Decimal('0.0') 
qty_asks_g_COSBTC = Decimal('0.0') 
stepSize_g_COSBTC = Decimal('1.0') 


def on_message_COSBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COSBTC = 'COSBTC' 
	price_bids_c_l_COSBTC = data['b'] 
	qty_bids_c_l_COSBTC = data['B'] 
	price_asks_c_l_COSBTC = data['a'] 
	qty_asks_c_l_COSBTC = data['A'] 

	global symbol_g_COSBTC 
	global price_bids_g_COSBTC 
	global qty_bids_g_COSBTC 
	global price_asks_g_COSBTC 
	global qty_asks_g_COSBTC 

	symbol_g_COSBTC = symbol_c_l_COSBTC 
	price_bids_g_COSBTC = Decimal(price_bids_c_l_COSBTC) 
	qty_bids_g_COSBTC = Decimal(qty_bids_c_l_COSBTC) 
	price_asks_g_COSBTC = Decimal(price_asks_c_l_COSBTC) 
	qty_asks_g_COSBTC = Decimal(qty_asks_c_l_COSBTC) 


def loop_COSBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cosbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COSBTC) 
	ws.run_forever() 


Thread(target=loop_COSBTC).start() 
symbol_g_TOMOBTC = 'TOMOBTC' 
price_bids_g_TOMOBTC = Decimal('0.0') 
qty_bids_g_TOMOBTC = Decimal('0.0') 
price_asks_g_TOMOBTC = Decimal('0.0') 
qty_asks_g_TOMOBTC = Decimal('0.0') 
stepSize_g_TOMOBTC = Decimal('0.1') 


def on_message_TOMOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TOMOBTC = 'TOMOBTC' 
	price_bids_c_l_TOMOBTC = data['b'] 
	qty_bids_c_l_TOMOBTC = data['B'] 
	price_asks_c_l_TOMOBTC = data['a'] 
	qty_asks_c_l_TOMOBTC = data['A'] 

	global symbol_g_TOMOBTC 
	global price_bids_g_TOMOBTC 
	global qty_bids_g_TOMOBTC 
	global price_asks_g_TOMOBTC 
	global qty_asks_g_TOMOBTC 

	symbol_g_TOMOBTC = symbol_c_l_TOMOBTC 
	price_bids_g_TOMOBTC = Decimal(price_bids_c_l_TOMOBTC) 
	qty_bids_g_TOMOBTC = Decimal(qty_bids_c_l_TOMOBTC) 
	price_asks_g_TOMOBTC = Decimal(price_asks_c_l_TOMOBTC) 
	qty_asks_g_TOMOBTC = Decimal(qty_asks_c_l_TOMOBTC) 


def loop_TOMOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tomobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TOMOBTC) 
	ws.run_forever() 


Thread(target=loop_TOMOBTC).start() 
symbol_g_CHZBTC = 'CHZBTC' 
price_bids_g_CHZBTC = Decimal('0.0') 
qty_bids_g_CHZBTC = Decimal('0.0') 
price_asks_g_CHZBTC = Decimal('0.0') 
qty_asks_g_CHZBTC = Decimal('0.0') 
stepSize_g_CHZBTC = Decimal('1.0') 


def on_message_CHZBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHZBTC = 'CHZBTC' 
	price_bids_c_l_CHZBTC = data['b'] 
	qty_bids_c_l_CHZBTC = data['B'] 
	price_asks_c_l_CHZBTC = data['a'] 
	qty_asks_c_l_CHZBTC = data['A'] 

	global symbol_g_CHZBTC 
	global price_bids_g_CHZBTC 
	global qty_bids_g_CHZBTC 
	global price_asks_g_CHZBTC 
	global qty_asks_g_CHZBTC 

	symbol_g_CHZBTC = symbol_c_l_CHZBTC 
	price_bids_g_CHZBTC = Decimal(price_bids_c_l_CHZBTC) 
	qty_bids_g_CHZBTC = Decimal(qty_bids_c_l_CHZBTC) 
	price_asks_g_CHZBTC = Decimal(price_asks_c_l_CHZBTC) 
	qty_asks_g_CHZBTC = Decimal(qty_asks_c_l_CHZBTC) 


def loop_CHZBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chzbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHZBTC) 
	ws.run_forever() 


Thread(target=loop_CHZBTC).start() 
symbol_g_BANDBTC = 'BANDBTC' 
price_bids_g_BANDBTC = Decimal('0.0') 
qty_bids_g_BANDBTC = Decimal('0.0') 
price_asks_g_BANDBTC = Decimal('0.0') 
qty_asks_g_BANDBTC = Decimal('0.0') 
stepSize_g_BANDBTC = Decimal('0.1') 


def on_message_BANDBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BANDBTC = 'BANDBTC' 
	price_bids_c_l_BANDBTC = data['b'] 
	qty_bids_c_l_BANDBTC = data['B'] 
	price_asks_c_l_BANDBTC = data['a'] 
	qty_asks_c_l_BANDBTC = data['A'] 

	global symbol_g_BANDBTC 
	global price_bids_g_BANDBTC 
	global qty_bids_g_BANDBTC 
	global price_asks_g_BANDBTC 
	global qty_asks_g_BANDBTC 

	symbol_g_BANDBTC = symbol_c_l_BANDBTC 
	price_bids_g_BANDBTC = Decimal(price_bids_c_l_BANDBTC) 
	qty_bids_g_BANDBTC = Decimal(qty_bids_c_l_BANDBTC) 
	price_asks_g_BANDBTC = Decimal(price_asks_c_l_BANDBTC) 
	qty_asks_g_BANDBTC = Decimal(qty_asks_c_l_BANDBTC) 


def loop_BANDBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bandbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BANDBTC) 
	ws.run_forever() 


Thread(target=loop_BANDBTC).start() 
symbol_g_BTCBUSD = 'BTCBUSD' 
price_bids_g_BTCBUSD = Decimal('0.0') 
qty_bids_g_BTCBUSD = Decimal('0.0') 
price_asks_g_BTCBUSD = Decimal('0.0') 
qty_asks_g_BTCBUSD = Decimal('0.0') 
stepSize_g_BTCBUSD = Decimal('0.00001') 


def on_message_BTCBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTCBUSD = 'BTCBUSD' 
	price_bids_c_l_BTCBUSD = data['b'] 
	qty_bids_c_l_BTCBUSD = data['B'] 
	price_asks_c_l_BTCBUSD = data['a'] 
	qty_asks_c_l_BTCBUSD = data['A'] 

	global symbol_g_BTCBUSD 
	global price_bids_g_BTCBUSD 
	global qty_bids_g_BTCBUSD 
	global price_asks_g_BTCBUSD 
	global qty_asks_g_BTCBUSD 

	symbol_g_BTCBUSD = symbol_c_l_BTCBUSD 
	price_bids_g_BTCBUSD = Decimal(price_bids_c_l_BTCBUSD) 
	qty_bids_g_BTCBUSD = Decimal(qty_bids_c_l_BTCBUSD) 
	price_asks_g_BTCBUSD = Decimal(price_asks_c_l_BTCBUSD) 
	qty_asks_g_BTCBUSD = Decimal(qty_asks_c_l_BTCBUSD) 


def loop_BTCBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/btcbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTCBUSD) 
	ws.run_forever() 


Thread(target=loop_BTCBUSD).start() 
symbol_g_XTZBTC = 'XTZBTC' 
price_bids_g_XTZBTC = Decimal('0.0') 
qty_bids_g_XTZBTC = Decimal('0.0') 
price_asks_g_XTZBTC = Decimal('0.0') 
qty_asks_g_XTZBTC = Decimal('0.0') 
stepSize_g_XTZBTC = Decimal('0.1') 


def on_message_XTZBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XTZBTC = 'XTZBTC' 
	price_bids_c_l_XTZBTC = data['b'] 
	qty_bids_c_l_XTZBTC = data['B'] 
	price_asks_c_l_XTZBTC = data['a'] 
	qty_asks_c_l_XTZBTC = data['A'] 

	global symbol_g_XTZBTC 
	global price_bids_g_XTZBTC 
	global qty_bids_g_XTZBTC 
	global price_asks_g_XTZBTC 
	global qty_asks_g_XTZBTC 

	symbol_g_XTZBTC = symbol_c_l_XTZBTC 
	price_bids_g_XTZBTC = Decimal(price_bids_c_l_XTZBTC) 
	qty_bids_g_XTZBTC = Decimal(qty_bids_c_l_XTZBTC) 
	price_asks_g_XTZBTC = Decimal(price_asks_c_l_XTZBTC) 
	qty_asks_g_XTZBTC = Decimal(qty_asks_c_l_XTZBTC) 


def loop_XTZBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xtzbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XTZBTC) 
	ws.run_forever() 


Thread(target=loop_XTZBTC).start() 
symbol_g_HBARBTC = 'HBARBTC' 
price_bids_g_HBARBTC = Decimal('0.0') 
qty_bids_g_HBARBTC = Decimal('0.0') 
price_asks_g_HBARBTC = Decimal('0.0') 
qty_asks_g_HBARBTC = Decimal('0.0') 
stepSize_g_HBARBTC = Decimal('1.0') 


def on_message_HBARBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HBARBTC = 'HBARBTC' 
	price_bids_c_l_HBARBTC = data['b'] 
	qty_bids_c_l_HBARBTC = data['B'] 
	price_asks_c_l_HBARBTC = data['a'] 
	qty_asks_c_l_HBARBTC = data['A'] 

	global symbol_g_HBARBTC 
	global price_bids_g_HBARBTC 
	global qty_bids_g_HBARBTC 
	global price_asks_g_HBARBTC 
	global qty_asks_g_HBARBTC 

	symbol_g_HBARBTC = symbol_c_l_HBARBTC 
	price_bids_g_HBARBTC = Decimal(price_bids_c_l_HBARBTC) 
	qty_bids_g_HBARBTC = Decimal(qty_bids_c_l_HBARBTC) 
	price_asks_g_HBARBTC = Decimal(price_asks_c_l_HBARBTC) 
	qty_asks_g_HBARBTC = Decimal(qty_asks_c_l_HBARBTC) 


def loop_HBARBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hbarbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HBARBTC) 
	ws.run_forever() 


Thread(target=loop_HBARBTC).start() 
symbol_g_NKNBTC = 'NKNBTC' 
price_bids_g_NKNBTC = Decimal('0.0') 
qty_bids_g_NKNBTC = Decimal('0.0') 
price_asks_g_NKNBTC = Decimal('0.0') 
qty_asks_g_NKNBTC = Decimal('0.0') 
stepSize_g_NKNBTC = Decimal('1.0') 


def on_message_NKNBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NKNBTC = 'NKNBTC' 
	price_bids_c_l_NKNBTC = data['b'] 
	qty_bids_c_l_NKNBTC = data['B'] 
	price_asks_c_l_NKNBTC = data['a'] 
	qty_asks_c_l_NKNBTC = data['A'] 

	global symbol_g_NKNBTC 
	global price_bids_g_NKNBTC 
	global qty_bids_g_NKNBTC 
	global price_asks_g_NKNBTC 
	global qty_asks_g_NKNBTC 

	symbol_g_NKNBTC = symbol_c_l_NKNBTC 
	price_bids_g_NKNBTC = Decimal(price_bids_c_l_NKNBTC) 
	qty_bids_g_NKNBTC = Decimal(qty_bids_c_l_NKNBTC) 
	price_asks_g_NKNBTC = Decimal(price_asks_c_l_NKNBTC) 
	qty_asks_g_NKNBTC = Decimal(qty_asks_c_l_NKNBTC) 


def loop_NKNBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nknbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NKNBTC) 
	ws.run_forever() 


Thread(target=loop_NKNBTC).start() 
symbol_g_STXBTC = 'STXBTC' 
price_bids_g_STXBTC = Decimal('0.0') 
qty_bids_g_STXBTC = Decimal('0.0') 
price_asks_g_STXBTC = Decimal('0.0') 
qty_asks_g_STXBTC = Decimal('0.0') 
stepSize_g_STXBTC = Decimal('0.1') 


def on_message_STXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STXBTC = 'STXBTC' 
	price_bids_c_l_STXBTC = data['b'] 
	qty_bids_c_l_STXBTC = data['B'] 
	price_asks_c_l_STXBTC = data['a'] 
	qty_asks_c_l_STXBTC = data['A'] 

	global symbol_g_STXBTC 
	global price_bids_g_STXBTC 
	global qty_bids_g_STXBTC 
	global price_asks_g_STXBTC 
	global qty_asks_g_STXBTC 

	symbol_g_STXBTC = symbol_c_l_STXBTC 
	price_bids_g_STXBTC = Decimal(price_bids_c_l_STXBTC) 
	qty_bids_g_STXBTC = Decimal(qty_bids_c_l_STXBTC) 
	price_asks_g_STXBTC = Decimal(price_asks_c_l_STXBTC) 
	qty_asks_g_STXBTC = Decimal(qty_asks_c_l_STXBTC) 


def loop_STXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/stxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STXBTC) 
	ws.run_forever() 


Thread(target=loop_STXBTC).start() 
symbol_g_KAVABTC = 'KAVABTC' 
price_bids_g_KAVABTC = Decimal('0.0') 
qty_bids_g_KAVABTC = Decimal('0.0') 
price_asks_g_KAVABTC = Decimal('0.0') 
qty_asks_g_KAVABTC = Decimal('0.0') 
stepSize_g_KAVABTC = Decimal('0.1') 


def on_message_KAVABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KAVABTC = 'KAVABTC' 
	price_bids_c_l_KAVABTC = data['b'] 
	qty_bids_c_l_KAVABTC = data['B'] 
	price_asks_c_l_KAVABTC = data['a'] 
	qty_asks_c_l_KAVABTC = data['A'] 

	global symbol_g_KAVABTC 
	global price_bids_g_KAVABTC 
	global qty_bids_g_KAVABTC 
	global price_asks_g_KAVABTC 
	global qty_asks_g_KAVABTC 

	symbol_g_KAVABTC = symbol_c_l_KAVABTC 
	price_bids_g_KAVABTC = Decimal(price_bids_c_l_KAVABTC) 
	qty_bids_g_KAVABTC = Decimal(qty_bids_c_l_KAVABTC) 
	price_asks_g_KAVABTC = Decimal(price_asks_c_l_KAVABTC) 
	qty_asks_g_KAVABTC = Decimal(qty_asks_c_l_KAVABTC) 


def loop_KAVABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kavabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KAVABTC) 
	ws.run_forever() 


Thread(target=loop_KAVABTC).start() 
symbol_g_ARPABTC = 'ARPABTC' 
price_bids_g_ARPABTC = Decimal('0.0') 
qty_bids_g_ARPABTC = Decimal('0.0') 
price_asks_g_ARPABTC = Decimal('0.0') 
qty_asks_g_ARPABTC = Decimal('0.0') 
stepSize_g_ARPABTC = Decimal('1.0') 


def on_message_ARPABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ARPABTC = 'ARPABTC' 
	price_bids_c_l_ARPABTC = data['b'] 
	qty_bids_c_l_ARPABTC = data['B'] 
	price_asks_c_l_ARPABTC = data['a'] 
	qty_asks_c_l_ARPABTC = data['A'] 

	global symbol_g_ARPABTC 
	global price_bids_g_ARPABTC 
	global qty_bids_g_ARPABTC 
	global price_asks_g_ARPABTC 
	global qty_asks_g_ARPABTC 

	symbol_g_ARPABTC = symbol_c_l_ARPABTC 
	price_bids_g_ARPABTC = Decimal(price_bids_c_l_ARPABTC) 
	qty_bids_g_ARPABTC = Decimal(qty_bids_c_l_ARPABTC) 
	price_asks_g_ARPABTC = Decimal(price_asks_c_l_ARPABTC) 
	qty_asks_g_ARPABTC = Decimal(qty_asks_c_l_ARPABTC) 


def loop_ARPABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/arpabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ARPABTC) 
	ws.run_forever() 


Thread(target=loop_ARPABTC).start() 
symbol_g_CTXCBTC = 'CTXCBTC' 
price_bids_g_CTXCBTC = Decimal('0.0') 
qty_bids_g_CTXCBTC = Decimal('0.0') 
price_asks_g_CTXCBTC = Decimal('0.0') 
qty_asks_g_CTXCBTC = Decimal('0.0') 
stepSize_g_CTXCBTC = Decimal('1.0') 


def on_message_CTXCBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CTXCBTC = 'CTXCBTC' 
	price_bids_c_l_CTXCBTC = data['b'] 
	qty_bids_c_l_CTXCBTC = data['B'] 
	price_asks_c_l_CTXCBTC = data['a'] 
	qty_asks_c_l_CTXCBTC = data['A'] 

	global symbol_g_CTXCBTC 
	global price_bids_g_CTXCBTC 
	global qty_bids_g_CTXCBTC 
	global price_asks_g_CTXCBTC 
	global qty_asks_g_CTXCBTC 

	symbol_g_CTXCBTC = symbol_c_l_CTXCBTC 
	price_bids_g_CTXCBTC = Decimal(price_bids_c_l_CTXCBTC) 
	qty_bids_g_CTXCBTC = Decimal(qty_bids_c_l_CTXCBTC) 
	price_asks_g_CTXCBTC = Decimal(price_asks_c_l_CTXCBTC) 
	qty_asks_g_CTXCBTC = Decimal(qty_asks_c_l_CTXCBTC) 


def loop_CTXCBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ctxcbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CTXCBTC) 
	ws.run_forever() 


Thread(target=loop_CTXCBTC).start() 
symbol_g_BCHBTC = 'BCHBTC' 
price_bids_g_BCHBTC = Decimal('0.0') 
qty_bids_g_BCHBTC = Decimal('0.0') 
price_asks_g_BCHBTC = Decimal('0.0') 
qty_asks_g_BCHBTC = Decimal('0.0') 
stepSize_g_BCHBTC = Decimal('0.001') 


def on_message_BCHBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BCHBTC = 'BCHBTC' 
	price_bids_c_l_BCHBTC = data['b'] 
	qty_bids_c_l_BCHBTC = data['B'] 
	price_asks_c_l_BCHBTC = data['a'] 
	qty_asks_c_l_BCHBTC = data['A'] 

	global symbol_g_BCHBTC 
	global price_bids_g_BCHBTC 
	global qty_bids_g_BCHBTC 
	global price_asks_g_BCHBTC 
	global qty_asks_g_BCHBTC 

	symbol_g_BCHBTC = symbol_c_l_BCHBTC 
	price_bids_g_BCHBTC = Decimal(price_bids_c_l_BCHBTC) 
	qty_bids_g_BCHBTC = Decimal(qty_bids_c_l_BCHBTC) 
	price_asks_g_BCHBTC = Decimal(price_asks_c_l_BCHBTC) 
	qty_asks_g_BCHBTC = Decimal(qty_asks_c_l_BCHBTC) 


def loop_BCHBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bchbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BCHBTC) 
	ws.run_forever() 


Thread(target=loop_BCHBTC).start() 
symbol_g_VITEBTC = 'VITEBTC' 
price_bids_g_VITEBTC = Decimal('0.0') 
qty_bids_g_VITEBTC = Decimal('0.0') 
price_asks_g_VITEBTC = Decimal('0.0') 
qty_asks_g_VITEBTC = Decimal('0.0') 
stepSize_g_VITEBTC = Decimal('1.0') 


def on_message_VITEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VITEBTC = 'VITEBTC' 
	price_bids_c_l_VITEBTC = data['b'] 
	qty_bids_c_l_VITEBTC = data['B'] 
	price_asks_c_l_VITEBTC = data['a'] 
	qty_asks_c_l_VITEBTC = data['A'] 

	global symbol_g_VITEBTC 
	global price_bids_g_VITEBTC 
	global qty_bids_g_VITEBTC 
	global price_asks_g_VITEBTC 
	global qty_asks_g_VITEBTC 

	symbol_g_VITEBTC = symbol_c_l_VITEBTC 
	price_bids_g_VITEBTC = Decimal(price_bids_c_l_VITEBTC) 
	qty_bids_g_VITEBTC = Decimal(qty_bids_c_l_VITEBTC) 
	price_asks_g_VITEBTC = Decimal(price_asks_c_l_VITEBTC) 
	qty_asks_g_VITEBTC = Decimal(qty_asks_c_l_VITEBTC) 


def loop_VITEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/vitebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VITEBTC) 
	ws.run_forever() 


Thread(target=loop_VITEBTC).start() 
symbol_g_BTCEUR = 'BTCEUR' 
price_bids_g_BTCEUR = Decimal('0.0') 
qty_bids_g_BTCEUR = Decimal('0.0') 
price_asks_g_BTCEUR = Decimal('0.0') 
qty_asks_g_BTCEUR = Decimal('0.0') 
stepSize_g_BTCEUR = Decimal('0.00001') 


def on_message_BTCEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTCEUR = 'BTCEUR' 
	price_bids_c_l_BTCEUR = data['b'] 
	qty_bids_c_l_BTCEUR = data['B'] 
	price_asks_c_l_BTCEUR = data['a'] 
	qty_asks_c_l_BTCEUR = data['A'] 

	global symbol_g_BTCEUR 
	global price_bids_g_BTCEUR 
	global qty_bids_g_BTCEUR 
	global price_asks_g_BTCEUR 
	global qty_asks_g_BTCEUR 

	symbol_g_BTCEUR = symbol_c_l_BTCEUR 
	price_bids_g_BTCEUR = Decimal(price_bids_c_l_BTCEUR) 
	qty_bids_g_BTCEUR = Decimal(qty_bids_c_l_BTCEUR) 
	price_asks_g_BTCEUR = Decimal(price_asks_c_l_BTCEUR) 
	qty_asks_g_BTCEUR = Decimal(qty_asks_c_l_BTCEUR) 


def loop_BTCEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/btceur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTCEUR) 
	ws.run_forever() 


Thread(target=loop_BTCEUR).start() 
symbol_g_OGNBTC = 'OGNBTC' 
price_bids_g_OGNBTC = Decimal('0.0') 
qty_bids_g_OGNBTC = Decimal('0.0') 
price_asks_g_OGNBTC = Decimal('0.0') 
qty_asks_g_OGNBTC = Decimal('0.0') 
stepSize_g_OGNBTC = Decimal('1.0') 


def on_message_OGNBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OGNBTC = 'OGNBTC' 
	price_bids_c_l_OGNBTC = data['b'] 
	qty_bids_c_l_OGNBTC = data['B'] 
	price_asks_c_l_OGNBTC = data['a'] 
	qty_asks_c_l_OGNBTC = data['A'] 

	global symbol_g_OGNBTC 
	global price_bids_g_OGNBTC 
	global qty_bids_g_OGNBTC 
	global price_asks_g_OGNBTC 
	global qty_asks_g_OGNBTC 

	symbol_g_OGNBTC = symbol_c_l_OGNBTC 
	price_bids_g_OGNBTC = Decimal(price_bids_c_l_OGNBTC) 
	qty_bids_g_OGNBTC = Decimal(qty_bids_c_l_OGNBTC) 
	price_asks_g_OGNBTC = Decimal(price_asks_c_l_OGNBTC) 
	qty_asks_g_OGNBTC = Decimal(qty_asks_c_l_OGNBTC) 


def loop_OGNBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ognbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OGNBTC) 
	ws.run_forever() 


Thread(target=loop_OGNBTC).start() 
symbol_g_DREPBTC = 'DREPBTC' 
price_bids_g_DREPBTC = Decimal('0.0') 
qty_bids_g_DREPBTC = Decimal('0.0') 
price_asks_g_DREPBTC = Decimal('0.0') 
qty_asks_g_DREPBTC = Decimal('0.0') 
stepSize_g_DREPBTC = Decimal('1.0') 


def on_message_DREPBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DREPBTC = 'DREPBTC' 
	price_bids_c_l_DREPBTC = data['b'] 
	qty_bids_c_l_DREPBTC = data['B'] 
	price_asks_c_l_DREPBTC = data['a'] 
	qty_asks_c_l_DREPBTC = data['A'] 

	global symbol_g_DREPBTC 
	global price_bids_g_DREPBTC 
	global qty_bids_g_DREPBTC 
	global price_asks_g_DREPBTC 
	global qty_asks_g_DREPBTC 

	symbol_g_DREPBTC = symbol_c_l_DREPBTC 
	price_bids_g_DREPBTC = Decimal(price_bids_c_l_DREPBTC) 
	qty_bids_g_DREPBTC = Decimal(qty_bids_c_l_DREPBTC) 
	price_asks_g_DREPBTC = Decimal(price_asks_c_l_DREPBTC) 
	qty_asks_g_DREPBTC = Decimal(qty_asks_c_l_DREPBTC) 


def loop_DREPBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/drepbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DREPBTC) 
	ws.run_forever() 


Thread(target=loop_DREPBTC).start() 
symbol_g_WRXBTC = 'WRXBTC' 
price_bids_g_WRXBTC = Decimal('0.0') 
qty_bids_g_WRXBTC = Decimal('0.0') 
price_asks_g_WRXBTC = Decimal('0.0') 
qty_asks_g_WRXBTC = Decimal('0.0') 
stepSize_g_WRXBTC = Decimal('0.1') 


def on_message_WRXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WRXBTC = 'WRXBTC' 
	price_bids_c_l_WRXBTC = data['b'] 
	qty_bids_c_l_WRXBTC = data['B'] 
	price_asks_c_l_WRXBTC = data['a'] 
	qty_asks_c_l_WRXBTC = data['A'] 

	global symbol_g_WRXBTC 
	global price_bids_g_WRXBTC 
	global qty_bids_g_WRXBTC 
	global price_asks_g_WRXBTC 
	global qty_asks_g_WRXBTC 

	symbol_g_WRXBTC = symbol_c_l_WRXBTC 
	price_bids_g_WRXBTC = Decimal(price_bids_c_l_WRXBTC) 
	qty_bids_g_WRXBTC = Decimal(qty_bids_c_l_WRXBTC) 
	price_asks_g_WRXBTC = Decimal(price_asks_c_l_WRXBTC) 
	qty_asks_g_WRXBTC = Decimal(qty_asks_c_l_WRXBTC) 


def loop_WRXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wrxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WRXBTC) 
	ws.run_forever() 


Thread(target=loop_WRXBTC).start() 
symbol_g_LTOBTC = 'LTOBTC' 
price_bids_g_LTOBTC = Decimal('0.0') 
qty_bids_g_LTOBTC = Decimal('0.0') 
price_asks_g_LTOBTC = Decimal('0.0') 
qty_asks_g_LTOBTC = Decimal('0.0') 
stepSize_g_LTOBTC = Decimal('1.0') 


def on_message_LTOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LTOBTC = 'LTOBTC' 
	price_bids_c_l_LTOBTC = data['b'] 
	qty_bids_c_l_LTOBTC = data['B'] 
	price_asks_c_l_LTOBTC = data['a'] 
	qty_asks_c_l_LTOBTC = data['A'] 

	global symbol_g_LTOBTC 
	global price_bids_g_LTOBTC 
	global qty_bids_g_LTOBTC 
	global price_asks_g_LTOBTC 
	global qty_asks_g_LTOBTC 

	symbol_g_LTOBTC = symbol_c_l_LTOBTC 
	price_bids_g_LTOBTC = Decimal(price_bids_c_l_LTOBTC) 
	qty_bids_g_LTOBTC = Decimal(qty_bids_c_l_LTOBTC) 
	price_asks_g_LTOBTC = Decimal(price_asks_c_l_LTOBTC) 
	qty_asks_g_LTOBTC = Decimal(qty_asks_c_l_LTOBTC) 


def loop_LTOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ltobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LTOBTC) 
	ws.run_forever() 


Thread(target=loop_LTOBTC).start() 
symbol_g_COTIBTC = 'COTIBTC' 
price_bids_g_COTIBTC = Decimal('0.0') 
qty_bids_g_COTIBTC = Decimal('0.0') 
price_asks_g_COTIBTC = Decimal('0.0') 
qty_asks_g_COTIBTC = Decimal('0.0') 
stepSize_g_COTIBTC = Decimal('1.0') 


def on_message_COTIBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COTIBTC = 'COTIBTC' 
	price_bids_c_l_COTIBTC = data['b'] 
	qty_bids_c_l_COTIBTC = data['B'] 
	price_asks_c_l_COTIBTC = data['a'] 
	qty_asks_c_l_COTIBTC = data['A'] 

	global symbol_g_COTIBTC 
	global price_bids_g_COTIBTC 
	global qty_bids_g_COTIBTC 
	global price_asks_g_COTIBTC 
	global qty_asks_g_COTIBTC 

	symbol_g_COTIBTC = symbol_c_l_COTIBTC 
	price_bids_g_COTIBTC = Decimal(price_bids_c_l_COTIBTC) 
	qty_bids_g_COTIBTC = Decimal(qty_bids_c_l_COTIBTC) 
	price_asks_g_COTIBTC = Decimal(price_asks_c_l_COTIBTC) 
	qty_asks_g_COTIBTC = Decimal(qty_asks_c_l_COTIBTC) 


def loop_COTIBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cotibtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COTIBTC) 
	ws.run_forever() 


Thread(target=loop_COTIBTC).start() 
symbol_g_STPTBTC = 'STPTBTC' 
price_bids_g_STPTBTC = Decimal('0.0') 
qty_bids_g_STPTBTC = Decimal('0.0') 
price_asks_g_STPTBTC = Decimal('0.0') 
qty_asks_g_STPTBTC = Decimal('0.0') 
stepSize_g_STPTBTC = Decimal('1.0') 


def on_message_STPTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STPTBTC = 'STPTBTC' 
	price_bids_c_l_STPTBTC = data['b'] 
	qty_bids_c_l_STPTBTC = data['B'] 
	price_asks_c_l_STPTBTC = data['a'] 
	qty_asks_c_l_STPTBTC = data['A'] 

	global symbol_g_STPTBTC 
	global price_bids_g_STPTBTC 
	global qty_bids_g_STPTBTC 
	global price_asks_g_STPTBTC 
	global qty_asks_g_STPTBTC 

	symbol_g_STPTBTC = symbol_c_l_STPTBTC 
	price_bids_g_STPTBTC = Decimal(price_bids_c_l_STPTBTC) 
	qty_bids_g_STPTBTC = Decimal(qty_bids_c_l_STPTBTC) 
	price_asks_g_STPTBTC = Decimal(price_asks_c_l_STPTBTC) 
	qty_asks_g_STPTBTC = Decimal(qty_asks_c_l_STPTBTC) 


def loop_STPTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/stptbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STPTBTC) 
	ws.run_forever() 


Thread(target=loop_STPTBTC).start() 
symbol_g_SOLBTC = 'SOLBTC' 
price_bids_g_SOLBTC = Decimal('0.0') 
qty_bids_g_SOLBTC = Decimal('0.0') 
price_asks_g_SOLBTC = Decimal('0.0') 
qty_asks_g_SOLBTC = Decimal('0.0') 
stepSize_g_SOLBTC = Decimal('0.01') 


def on_message_SOLBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SOLBTC = 'SOLBTC' 
	price_bids_c_l_SOLBTC = data['b'] 
	qty_bids_c_l_SOLBTC = data['B'] 
	price_asks_c_l_SOLBTC = data['a'] 
	qty_asks_c_l_SOLBTC = data['A'] 

	global symbol_g_SOLBTC 
	global price_bids_g_SOLBTC 
	global qty_bids_g_SOLBTC 
	global price_asks_g_SOLBTC 
	global qty_asks_g_SOLBTC 

	symbol_g_SOLBTC = symbol_c_l_SOLBTC 
	price_bids_g_SOLBTC = Decimal(price_bids_c_l_SOLBTC) 
	qty_bids_g_SOLBTC = Decimal(qty_bids_c_l_SOLBTC) 
	price_asks_g_SOLBTC = Decimal(price_asks_c_l_SOLBTC) 
	qty_asks_g_SOLBTC = Decimal(qty_asks_c_l_SOLBTC) 


def loop_SOLBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/solbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SOLBTC) 
	ws.run_forever() 


Thread(target=loop_SOLBTC).start() 
symbol_g_CTSIBTC = 'CTSIBTC' 
price_bids_g_CTSIBTC = Decimal('0.0') 
qty_bids_g_CTSIBTC = Decimal('0.0') 
price_asks_g_CTSIBTC = Decimal('0.0') 
qty_asks_g_CTSIBTC = Decimal('0.0') 
stepSize_g_CTSIBTC = Decimal('1.0') 


def on_message_CTSIBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CTSIBTC = 'CTSIBTC' 
	price_bids_c_l_CTSIBTC = data['b'] 
	qty_bids_c_l_CTSIBTC = data['B'] 
	price_asks_c_l_CTSIBTC = data['a'] 
	qty_asks_c_l_CTSIBTC = data['A'] 

	global symbol_g_CTSIBTC 
	global price_bids_g_CTSIBTC 
	global qty_bids_g_CTSIBTC 
	global price_asks_g_CTSIBTC 
	global qty_asks_g_CTSIBTC 

	symbol_g_CTSIBTC = symbol_c_l_CTSIBTC 
	price_bids_g_CTSIBTC = Decimal(price_bids_c_l_CTSIBTC) 
	qty_bids_g_CTSIBTC = Decimal(qty_bids_c_l_CTSIBTC) 
	price_asks_g_CTSIBTC = Decimal(price_asks_c_l_CTSIBTC) 
	qty_asks_g_CTSIBTC = Decimal(qty_asks_c_l_CTSIBTC) 


def loop_CTSIBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ctsibtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CTSIBTC) 
	ws.run_forever() 


Thread(target=loop_CTSIBTC).start() 
symbol_g_HIVEBTC = 'HIVEBTC' 
price_bids_g_HIVEBTC = Decimal('0.0') 
qty_bids_g_HIVEBTC = Decimal('0.0') 
price_asks_g_HIVEBTC = Decimal('0.0') 
qty_asks_g_HIVEBTC = Decimal('0.0') 
stepSize_g_HIVEBTC = Decimal('1.0') 


def on_message_HIVEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HIVEBTC = 'HIVEBTC' 
	price_bids_c_l_HIVEBTC = data['b'] 
	qty_bids_c_l_HIVEBTC = data['B'] 
	price_asks_c_l_HIVEBTC = data['a'] 
	qty_asks_c_l_HIVEBTC = data['A'] 

	global symbol_g_HIVEBTC 
	global price_bids_g_HIVEBTC 
	global qty_bids_g_HIVEBTC 
	global price_asks_g_HIVEBTC 
	global qty_asks_g_HIVEBTC 

	symbol_g_HIVEBTC = symbol_c_l_HIVEBTC 
	price_bids_g_HIVEBTC = Decimal(price_bids_c_l_HIVEBTC) 
	qty_bids_g_HIVEBTC = Decimal(qty_bids_c_l_HIVEBTC) 
	price_asks_g_HIVEBTC = Decimal(price_asks_c_l_HIVEBTC) 
	qty_asks_g_HIVEBTC = Decimal(qty_asks_c_l_HIVEBTC) 


def loop_HIVEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hivebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HIVEBTC) 
	ws.run_forever() 


Thread(target=loop_HIVEBTC).start() 
symbol_g_CHRBTC = 'CHRBTC' 
price_bids_g_CHRBTC = Decimal('0.0') 
qty_bids_g_CHRBTC = Decimal('0.0') 
price_asks_g_CHRBTC = Decimal('0.0') 
qty_asks_g_CHRBTC = Decimal('0.0') 
stepSize_g_CHRBTC = Decimal('1.0') 


def on_message_CHRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHRBTC = 'CHRBTC' 
	price_bids_c_l_CHRBTC = data['b'] 
	qty_bids_c_l_CHRBTC = data['B'] 
	price_asks_c_l_CHRBTC = data['a'] 
	qty_asks_c_l_CHRBTC = data['A'] 

	global symbol_g_CHRBTC 
	global price_bids_g_CHRBTC 
	global qty_bids_g_CHRBTC 
	global price_asks_g_CHRBTC 
	global qty_asks_g_CHRBTC 

	symbol_g_CHRBTC = symbol_c_l_CHRBTC 
	price_bids_g_CHRBTC = Decimal(price_bids_c_l_CHRBTC) 
	qty_bids_g_CHRBTC = Decimal(qty_bids_c_l_CHRBTC) 
	price_asks_g_CHRBTC = Decimal(price_asks_c_l_CHRBTC) 
	qty_asks_g_CHRBTC = Decimal(qty_asks_c_l_CHRBTC) 


def loop_CHRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHRBTC) 
	ws.run_forever() 


Thread(target=loop_CHRBTC).start() 
symbol_g_MDTBTC = 'MDTBTC' 
price_bids_g_MDTBTC = Decimal('0.0') 
qty_bids_g_MDTBTC = Decimal('0.0') 
price_asks_g_MDTBTC = Decimal('0.0') 
qty_asks_g_MDTBTC = Decimal('0.0') 
stepSize_g_MDTBTC = Decimal('1.0') 


def on_message_MDTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MDTBTC = 'MDTBTC' 
	price_bids_c_l_MDTBTC = data['b'] 
	qty_bids_c_l_MDTBTC = data['B'] 
	price_asks_c_l_MDTBTC = data['a'] 
	qty_asks_c_l_MDTBTC = data['A'] 

	global symbol_g_MDTBTC 
	global price_bids_g_MDTBTC 
	global qty_bids_g_MDTBTC 
	global price_asks_g_MDTBTC 
	global qty_asks_g_MDTBTC 

	symbol_g_MDTBTC = symbol_c_l_MDTBTC 
	price_bids_g_MDTBTC = Decimal(price_bids_c_l_MDTBTC) 
	qty_bids_g_MDTBTC = Decimal(qty_bids_c_l_MDTBTC) 
	price_asks_g_MDTBTC = Decimal(price_asks_c_l_MDTBTC) 
	qty_asks_g_MDTBTC = Decimal(qty_asks_c_l_MDTBTC) 


def loop_MDTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mdtbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MDTBTC) 
	ws.run_forever() 


Thread(target=loop_MDTBTC).start() 
symbol_g_STMXBTC = 'STMXBTC' 
price_bids_g_STMXBTC = Decimal('0.0') 
qty_bids_g_STMXBTC = Decimal('0.0') 
price_asks_g_STMXBTC = Decimal('0.0') 
qty_asks_g_STMXBTC = Decimal('0.0') 
stepSize_g_STMXBTC = Decimal('1.0') 


def on_message_STMXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STMXBTC = 'STMXBTC' 
	price_bids_c_l_STMXBTC = data['b'] 
	qty_bids_c_l_STMXBTC = data['B'] 
	price_asks_c_l_STMXBTC = data['a'] 
	qty_asks_c_l_STMXBTC = data['A'] 

	global symbol_g_STMXBTC 
	global price_bids_g_STMXBTC 
	global qty_bids_g_STMXBTC 
	global price_asks_g_STMXBTC 
	global qty_asks_g_STMXBTC 

	symbol_g_STMXBTC = symbol_c_l_STMXBTC 
	price_bids_g_STMXBTC = Decimal(price_bids_c_l_STMXBTC) 
	qty_bids_g_STMXBTC = Decimal(qty_bids_c_l_STMXBTC) 
	price_asks_g_STMXBTC = Decimal(price_asks_c_l_STMXBTC) 
	qty_asks_g_STMXBTC = Decimal(qty_asks_c_l_STMXBTC) 


def loop_STMXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/stmxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STMXBTC) 
	ws.run_forever() 


Thread(target=loop_STMXBTC).start() 
symbol_g_BTCGBP = 'BTCGBP' 
price_bids_g_BTCGBP = Decimal('0.0') 
qty_bids_g_BTCGBP = Decimal('0.0') 
price_asks_g_BTCGBP = Decimal('0.0') 
qty_asks_g_BTCGBP = Decimal('0.0') 
stepSize_g_BTCGBP = Decimal('0.00001') 


def on_message_BTCGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTCGBP = 'BTCGBP' 
	price_bids_c_l_BTCGBP = data['b'] 
	qty_bids_c_l_BTCGBP = data['B'] 
	price_asks_c_l_BTCGBP = data['a'] 
	qty_asks_c_l_BTCGBP = data['A'] 

	global symbol_g_BTCGBP 
	global price_bids_g_BTCGBP 
	global qty_bids_g_BTCGBP 
	global price_asks_g_BTCGBP 
	global qty_asks_g_BTCGBP 

	symbol_g_BTCGBP = symbol_c_l_BTCGBP 
	price_bids_g_BTCGBP = Decimal(price_bids_c_l_BTCGBP) 
	qty_bids_g_BTCGBP = Decimal(qty_bids_c_l_BTCGBP) 
	price_asks_g_BTCGBP = Decimal(price_asks_c_l_BTCGBP) 
	qty_asks_g_BTCGBP = Decimal(qty_asks_c_l_BTCGBP) 


def loop_BTCGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/btcgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTCGBP) 
	ws.run_forever() 


Thread(target=loop_BTCGBP).start() 
symbol_g_DGBBTC = 'DGBBTC' 
price_bids_g_DGBBTC = Decimal('0.0') 
qty_bids_g_DGBBTC = Decimal('0.0') 
price_asks_g_DGBBTC = Decimal('0.0') 
qty_asks_g_DGBBTC = Decimal('0.0') 
stepSize_g_DGBBTC = Decimal('1.0') 


def on_message_DGBBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DGBBTC = 'DGBBTC' 
	price_bids_c_l_DGBBTC = data['b'] 
	qty_bids_c_l_DGBBTC = data['B'] 
	price_asks_c_l_DGBBTC = data['a'] 
	qty_asks_c_l_DGBBTC = data['A'] 

	global symbol_g_DGBBTC 
	global price_bids_g_DGBBTC 
	global qty_bids_g_DGBBTC 
	global price_asks_g_DGBBTC 
	global qty_asks_g_DGBBTC 

	symbol_g_DGBBTC = symbol_c_l_DGBBTC 
	price_bids_g_DGBBTC = Decimal(price_bids_c_l_DGBBTC) 
	qty_bids_g_DGBBTC = Decimal(qty_bids_c_l_DGBBTC) 
	price_asks_g_DGBBTC = Decimal(price_asks_c_l_DGBBTC) 
	qty_asks_g_DGBBTC = Decimal(qty_asks_c_l_DGBBTC) 


def loop_DGBBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dgbbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DGBBTC) 
	ws.run_forever() 


Thread(target=loop_DGBBTC).start() 
symbol_g_COMPBTC = 'COMPBTC' 
price_bids_g_COMPBTC = Decimal('0.0') 
qty_bids_g_COMPBTC = Decimal('0.0') 
price_asks_g_COMPBTC = Decimal('0.0') 
qty_asks_g_COMPBTC = Decimal('0.0') 
stepSize_g_COMPBTC = Decimal('0.001') 


def on_message_COMPBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COMPBTC = 'COMPBTC' 
	price_bids_c_l_COMPBTC = data['b'] 
	qty_bids_c_l_COMPBTC = data['B'] 
	price_asks_c_l_COMPBTC = data['a'] 
	qty_asks_c_l_COMPBTC = data['A'] 

	global symbol_g_COMPBTC 
	global price_bids_g_COMPBTC 
	global qty_bids_g_COMPBTC 
	global price_asks_g_COMPBTC 
	global qty_asks_g_COMPBTC 

	symbol_g_COMPBTC = symbol_c_l_COMPBTC 
	price_bids_g_COMPBTC = Decimal(price_bids_c_l_COMPBTC) 
	qty_bids_g_COMPBTC = Decimal(qty_bids_c_l_COMPBTC) 
	price_asks_g_COMPBTC = Decimal(price_asks_c_l_COMPBTC) 
	qty_asks_g_COMPBTC = Decimal(qty_asks_c_l_COMPBTC) 


def loop_COMPBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/compbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COMPBTC) 
	ws.run_forever() 


Thread(target=loop_COMPBTC).start() 
symbol_g_SXPBTC = 'SXPBTC' 
price_bids_g_SXPBTC = Decimal('0.0') 
qty_bids_g_SXPBTC = Decimal('0.0') 
price_asks_g_SXPBTC = Decimal('0.0') 
qty_asks_g_SXPBTC = Decimal('0.0') 
stepSize_g_SXPBTC = Decimal('0.1') 


def on_message_SXPBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SXPBTC = 'SXPBTC' 
	price_bids_c_l_SXPBTC = data['b'] 
	qty_bids_c_l_SXPBTC = data['B'] 
	price_asks_c_l_SXPBTC = data['a'] 
	qty_asks_c_l_SXPBTC = data['A'] 

	global symbol_g_SXPBTC 
	global price_bids_g_SXPBTC 
	global qty_bids_g_SXPBTC 
	global price_asks_g_SXPBTC 
	global qty_asks_g_SXPBTC 

	symbol_g_SXPBTC = symbol_c_l_SXPBTC 
	price_bids_g_SXPBTC = Decimal(price_bids_c_l_SXPBTC) 
	qty_bids_g_SXPBTC = Decimal(qty_bids_c_l_SXPBTC) 
	price_asks_g_SXPBTC = Decimal(price_asks_c_l_SXPBTC) 
	qty_asks_g_SXPBTC = Decimal(qty_asks_c_l_SXPBTC) 


def loop_SXPBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sxpbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SXPBTC) 
	ws.run_forever() 


Thread(target=loop_SXPBTC).start() 
symbol_g_SNXBTC = 'SNXBTC' 
price_bids_g_SNXBTC = Decimal('0.0') 
qty_bids_g_SNXBTC = Decimal('0.0') 
price_asks_g_SNXBTC = Decimal('0.0') 
qty_asks_g_SNXBTC = Decimal('0.0') 
stepSize_g_SNXBTC = Decimal('0.1') 


def on_message_SNXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SNXBTC = 'SNXBTC' 
	price_bids_c_l_SNXBTC = data['b'] 
	qty_bids_c_l_SNXBTC = data['B'] 
	price_asks_c_l_SNXBTC = data['a'] 
	qty_asks_c_l_SNXBTC = data['A'] 

	global symbol_g_SNXBTC 
	global price_bids_g_SNXBTC 
	global qty_bids_g_SNXBTC 
	global price_asks_g_SNXBTC 
	global qty_asks_g_SNXBTC 

	symbol_g_SNXBTC = symbol_c_l_SNXBTC 
	price_bids_g_SNXBTC = Decimal(price_bids_c_l_SNXBTC) 
	qty_bids_g_SNXBTC = Decimal(qty_bids_c_l_SNXBTC) 
	price_asks_g_SNXBTC = Decimal(price_asks_c_l_SNXBTC) 
	qty_asks_g_SNXBTC = Decimal(qty_asks_c_l_SNXBTC) 


def loop_SNXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/snxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SNXBTC) 
	ws.run_forever() 


Thread(target=loop_SNXBTC).start() 
symbol_g_IRISBTC = 'IRISBTC' 
price_bids_g_IRISBTC = Decimal('0.0') 
qty_bids_g_IRISBTC = Decimal('0.0') 
price_asks_g_IRISBTC = Decimal('0.0') 
qty_asks_g_IRISBTC = Decimal('0.0') 
stepSize_g_IRISBTC = Decimal('1.0') 


def on_message_IRISBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IRISBTC = 'IRISBTC' 
	price_bids_c_l_IRISBTC = data['b'] 
	qty_bids_c_l_IRISBTC = data['B'] 
	price_asks_c_l_IRISBTC = data['a'] 
	qty_asks_c_l_IRISBTC = data['A'] 

	global symbol_g_IRISBTC 
	global price_bids_g_IRISBTC 
	global qty_bids_g_IRISBTC 
	global price_asks_g_IRISBTC 
	global qty_asks_g_IRISBTC 

	symbol_g_IRISBTC = symbol_c_l_IRISBTC 
	price_bids_g_IRISBTC = Decimal(price_bids_c_l_IRISBTC) 
	qty_bids_g_IRISBTC = Decimal(qty_bids_c_l_IRISBTC) 
	price_asks_g_IRISBTC = Decimal(price_asks_c_l_IRISBTC) 
	qty_asks_g_IRISBTC = Decimal(qty_asks_c_l_IRISBTC) 


def loop_IRISBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/irisbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IRISBTC) 
	ws.run_forever() 


Thread(target=loop_IRISBTC).start() 
symbol_g_MKRBTC = 'MKRBTC' 
price_bids_g_MKRBTC = Decimal('0.0') 
qty_bids_g_MKRBTC = Decimal('0.0') 
price_asks_g_MKRBTC = Decimal('0.0') 
qty_asks_g_MKRBTC = Decimal('0.0') 
stepSize_g_MKRBTC = Decimal('0.0001') 


def on_message_MKRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MKRBTC = 'MKRBTC' 
	price_bids_c_l_MKRBTC = data['b'] 
	qty_bids_c_l_MKRBTC = data['B'] 
	price_asks_c_l_MKRBTC = data['a'] 
	qty_asks_c_l_MKRBTC = data['A'] 

	global symbol_g_MKRBTC 
	global price_bids_g_MKRBTC 
	global qty_bids_g_MKRBTC 
	global price_asks_g_MKRBTC 
	global qty_asks_g_MKRBTC 

	symbol_g_MKRBTC = symbol_c_l_MKRBTC 
	price_bids_g_MKRBTC = Decimal(price_bids_c_l_MKRBTC) 
	qty_bids_g_MKRBTC = Decimal(qty_bids_c_l_MKRBTC) 
	price_asks_g_MKRBTC = Decimal(price_asks_c_l_MKRBTC) 
	qty_asks_g_MKRBTC = Decimal(qty_asks_c_l_MKRBTC) 


def loop_MKRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mkrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MKRBTC) 
	ws.run_forever() 


Thread(target=loop_MKRBTC).start() 
symbol_g_RUNEBTC = 'RUNEBTC' 
price_bids_g_RUNEBTC = Decimal('0.0') 
qty_bids_g_RUNEBTC = Decimal('0.0') 
price_asks_g_RUNEBTC = Decimal('0.0') 
qty_asks_g_RUNEBTC = Decimal('0.0') 
stepSize_g_RUNEBTC = Decimal('0.1') 


def on_message_RUNEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RUNEBTC = 'RUNEBTC' 
	price_bids_c_l_RUNEBTC = data['b'] 
	qty_bids_c_l_RUNEBTC = data['B'] 
	price_asks_c_l_RUNEBTC = data['a'] 
	qty_asks_c_l_RUNEBTC = data['A'] 

	global symbol_g_RUNEBTC 
	global price_bids_g_RUNEBTC 
	global qty_bids_g_RUNEBTC 
	global price_asks_g_RUNEBTC 
	global qty_asks_g_RUNEBTC 

	symbol_g_RUNEBTC = symbol_c_l_RUNEBTC 
	price_bids_g_RUNEBTC = Decimal(price_bids_c_l_RUNEBTC) 
	qty_bids_g_RUNEBTC = Decimal(qty_bids_c_l_RUNEBTC) 
	price_asks_g_RUNEBTC = Decimal(price_asks_c_l_RUNEBTC) 
	qty_asks_g_RUNEBTC = Decimal(qty_asks_c_l_RUNEBTC) 


def loop_RUNEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/runebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RUNEBTC) 
	ws.run_forever() 


Thread(target=loop_RUNEBTC).start() 
symbol_g_BTCAUD = 'BTCAUD' 
price_bids_g_BTCAUD = Decimal('0.0') 
qty_bids_g_BTCAUD = Decimal('0.0') 
price_asks_g_BTCAUD = Decimal('0.0') 
qty_asks_g_BTCAUD = Decimal('0.0') 
stepSize_g_BTCAUD = Decimal('0.00001') 


def on_message_BTCAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTCAUD = 'BTCAUD' 
	price_bids_c_l_BTCAUD = data['b'] 
	qty_bids_c_l_BTCAUD = data['B'] 
	price_asks_c_l_BTCAUD = data['a'] 
	qty_asks_c_l_BTCAUD = data['A'] 

	global symbol_g_BTCAUD 
	global price_bids_g_BTCAUD 
	global qty_bids_g_BTCAUD 
	global price_asks_g_BTCAUD 
	global qty_asks_g_BTCAUD 

	symbol_g_BTCAUD = symbol_c_l_BTCAUD 
	price_bids_g_BTCAUD = Decimal(price_bids_c_l_BTCAUD) 
	qty_bids_g_BTCAUD = Decimal(qty_bids_c_l_BTCAUD) 
	price_asks_g_BTCAUD = Decimal(price_asks_c_l_BTCAUD) 
	qty_asks_g_BTCAUD = Decimal(qty_asks_c_l_BTCAUD) 


def loop_BTCAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/btcaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTCAUD) 
	ws.run_forever() 


Thread(target=loop_BTCAUD).start() 
symbol_g_FIOBTC = 'FIOBTC' 
price_bids_g_FIOBTC = Decimal('0.0') 
qty_bids_g_FIOBTC = Decimal('0.0') 
price_asks_g_FIOBTC = Decimal('0.0') 
qty_asks_g_FIOBTC = Decimal('0.0') 
stepSize_g_FIOBTC = Decimal('1.0') 


def on_message_FIOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FIOBTC = 'FIOBTC' 
	price_bids_c_l_FIOBTC = data['b'] 
	qty_bids_c_l_FIOBTC = data['B'] 
	price_asks_c_l_FIOBTC = data['a'] 
	qty_asks_c_l_FIOBTC = data['A'] 

	global symbol_g_FIOBTC 
	global price_bids_g_FIOBTC 
	global qty_bids_g_FIOBTC 
	global price_asks_g_FIOBTC 
	global qty_asks_g_FIOBTC 

	symbol_g_FIOBTC = symbol_c_l_FIOBTC 
	price_bids_g_FIOBTC = Decimal(price_bids_c_l_FIOBTC) 
	qty_bids_g_FIOBTC = Decimal(qty_bids_c_l_FIOBTC) 
	price_asks_g_FIOBTC = Decimal(price_asks_c_l_FIOBTC) 
	qty_asks_g_FIOBTC = Decimal(qty_asks_c_l_FIOBTC) 


def loop_FIOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fiobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FIOBTC) 
	ws.run_forever() 


Thread(target=loop_FIOBTC).start() 
symbol_g_AVABTC = 'AVABTC' 
price_bids_g_AVABTC = Decimal('0.0') 
qty_bids_g_AVABTC = Decimal('0.0') 
price_asks_g_AVABTC = Decimal('0.0') 
qty_asks_g_AVABTC = Decimal('0.0') 
stepSize_g_AVABTC = Decimal('0.1') 


def on_message_AVABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AVABTC = 'AVABTC' 
	price_bids_c_l_AVABTC = data['b'] 
	qty_bids_c_l_AVABTC = data['B'] 
	price_asks_c_l_AVABTC = data['a'] 
	qty_asks_c_l_AVABTC = data['A'] 

	global symbol_g_AVABTC 
	global price_bids_g_AVABTC 
	global qty_bids_g_AVABTC 
	global price_asks_g_AVABTC 
	global qty_asks_g_AVABTC 

	symbol_g_AVABTC = symbol_c_l_AVABTC 
	price_bids_g_AVABTC = Decimal(price_bids_c_l_AVABTC) 
	qty_bids_g_AVABTC = Decimal(qty_bids_c_l_AVABTC) 
	price_asks_g_AVABTC = Decimal(price_asks_c_l_AVABTC) 
	qty_asks_g_AVABTC = Decimal(qty_asks_c_l_AVABTC) 


def loop_AVABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/avabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AVABTC) 
	ws.run_forever() 


Thread(target=loop_AVABTC).start() 
symbol_g_BALBTC = 'BALBTC' 
price_bids_g_BALBTC = Decimal('0.0') 
qty_bids_g_BALBTC = Decimal('0.0') 
price_asks_g_BALBTC = Decimal('0.0') 
qty_asks_g_BALBTC = Decimal('0.0') 
stepSize_g_BALBTC = Decimal('0.01') 


def on_message_BALBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BALBTC = 'BALBTC' 
	price_bids_c_l_BALBTC = data['b'] 
	qty_bids_c_l_BALBTC = data['B'] 
	price_asks_c_l_BALBTC = data['a'] 
	qty_asks_c_l_BALBTC = data['A'] 

	global symbol_g_BALBTC 
	global price_bids_g_BALBTC 
	global qty_bids_g_BALBTC 
	global price_asks_g_BALBTC 
	global qty_asks_g_BALBTC 

	symbol_g_BALBTC = symbol_c_l_BALBTC 
	price_bids_g_BALBTC = Decimal(price_bids_c_l_BALBTC) 
	qty_bids_g_BALBTC = Decimal(qty_bids_c_l_BALBTC) 
	price_asks_g_BALBTC = Decimal(price_asks_c_l_BALBTC) 
	qty_asks_g_BALBTC = Decimal(qty_asks_c_l_BALBTC) 


def loop_BALBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/balbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BALBTC) 
	ws.run_forever() 


Thread(target=loop_BALBTC).start() 
symbol_g_YFIBTC = 'YFIBTC' 
price_bids_g_YFIBTC = Decimal('0.0') 
qty_bids_g_YFIBTC = Decimal('0.0') 
price_asks_g_YFIBTC = Decimal('0.0') 
qty_asks_g_YFIBTC = Decimal('0.0') 
stepSize_g_YFIBTC = Decimal('0.00001') 


def on_message_YFIBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_YFIBTC = 'YFIBTC' 
	price_bids_c_l_YFIBTC = data['b'] 
	qty_bids_c_l_YFIBTC = data['B'] 
	price_asks_c_l_YFIBTC = data['a'] 
	qty_asks_c_l_YFIBTC = data['A'] 

	global symbol_g_YFIBTC 
	global price_bids_g_YFIBTC 
	global qty_bids_g_YFIBTC 
	global price_asks_g_YFIBTC 
	global qty_asks_g_YFIBTC 

	symbol_g_YFIBTC = symbol_c_l_YFIBTC 
	price_bids_g_YFIBTC = Decimal(price_bids_c_l_YFIBTC) 
	qty_bids_g_YFIBTC = Decimal(qty_bids_c_l_YFIBTC) 
	price_asks_g_YFIBTC = Decimal(price_asks_c_l_YFIBTC) 
	qty_asks_g_YFIBTC = Decimal(qty_asks_c_l_YFIBTC) 


def loop_YFIBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/yfibtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_YFIBTC) 
	ws.run_forever() 


Thread(target=loop_YFIBTC).start() 
symbol_g_JSTBTC = 'JSTBTC' 
price_bids_g_JSTBTC = Decimal('0.0') 
qty_bids_g_JSTBTC = Decimal('0.0') 
price_asks_g_JSTBTC = Decimal('0.0') 
qty_asks_g_JSTBTC = Decimal('0.0') 
stepSize_g_JSTBTC = Decimal('1.0') 


def on_message_JSTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JSTBTC = 'JSTBTC' 
	price_bids_c_l_JSTBTC = data['b'] 
	qty_bids_c_l_JSTBTC = data['B'] 
	price_asks_c_l_JSTBTC = data['a'] 
	qty_asks_c_l_JSTBTC = data['A'] 

	global symbol_g_JSTBTC 
	global price_bids_g_JSTBTC 
	global qty_bids_g_JSTBTC 
	global price_asks_g_JSTBTC 
	global qty_asks_g_JSTBTC 

	symbol_g_JSTBTC = symbol_c_l_JSTBTC 
	price_bids_g_JSTBTC = Decimal(price_bids_c_l_JSTBTC) 
	qty_bids_g_JSTBTC = Decimal(qty_bids_c_l_JSTBTC) 
	price_asks_g_JSTBTC = Decimal(price_asks_c_l_JSTBTC) 
	qty_asks_g_JSTBTC = Decimal(qty_asks_c_l_JSTBTC) 


def loop_JSTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/jstbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JSTBTC) 
	ws.run_forever() 


Thread(target=loop_JSTBTC).start() 
symbol_g_ANTBTC = 'ANTBTC' 
price_bids_g_ANTBTC = Decimal('0.0') 
qty_bids_g_ANTBTC = Decimal('0.0') 
price_asks_g_ANTBTC = Decimal('0.0') 
qty_asks_g_ANTBTC = Decimal('0.0') 
stepSize_g_ANTBTC = Decimal('0.1') 


def on_message_ANTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ANTBTC = 'ANTBTC' 
	price_bids_c_l_ANTBTC = data['b'] 
	qty_bids_c_l_ANTBTC = data['B'] 
	price_asks_c_l_ANTBTC = data['a'] 
	qty_asks_c_l_ANTBTC = data['A'] 

	global symbol_g_ANTBTC 
	global price_bids_g_ANTBTC 
	global qty_bids_g_ANTBTC 
	global price_asks_g_ANTBTC 
	global qty_asks_g_ANTBTC 

	symbol_g_ANTBTC = symbol_c_l_ANTBTC 
	price_bids_g_ANTBTC = Decimal(price_bids_c_l_ANTBTC) 
	qty_bids_g_ANTBTC = Decimal(qty_bids_c_l_ANTBTC) 
	price_asks_g_ANTBTC = Decimal(price_asks_c_l_ANTBTC) 
	qty_asks_g_ANTBTC = Decimal(qty_asks_c_l_ANTBTC) 


def loop_ANTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/antbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ANTBTC) 
	ws.run_forever() 


Thread(target=loop_ANTBTC).start() 
symbol_g_CRVBTC = 'CRVBTC' 
price_bids_g_CRVBTC = Decimal('0.0') 
qty_bids_g_CRVBTC = Decimal('0.0') 
price_asks_g_CRVBTC = Decimal('0.0') 
qty_asks_g_CRVBTC = Decimal('0.0') 
stepSize_g_CRVBTC = Decimal('0.1') 


def on_message_CRVBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CRVBTC = 'CRVBTC' 
	price_bids_c_l_CRVBTC = data['b'] 
	qty_bids_c_l_CRVBTC = data['B'] 
	price_asks_c_l_CRVBTC = data['a'] 
	qty_asks_c_l_CRVBTC = data['A'] 

	global symbol_g_CRVBTC 
	global price_bids_g_CRVBTC 
	global qty_bids_g_CRVBTC 
	global price_asks_g_CRVBTC 
	global qty_asks_g_CRVBTC 

	symbol_g_CRVBTC = symbol_c_l_CRVBTC 
	price_bids_g_CRVBTC = Decimal(price_bids_c_l_CRVBTC) 
	qty_bids_g_CRVBTC = Decimal(qty_bids_c_l_CRVBTC) 
	price_asks_g_CRVBTC = Decimal(price_asks_c_l_CRVBTC) 
	qty_asks_g_CRVBTC = Decimal(qty_asks_c_l_CRVBTC) 


def loop_CRVBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/crvbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CRVBTC) 
	ws.run_forever() 


Thread(target=loop_CRVBTC).start() 
symbol_g_SANDBTC = 'SANDBTC' 
price_bids_g_SANDBTC = Decimal('0.0') 
qty_bids_g_SANDBTC = Decimal('0.0') 
price_asks_g_SANDBTC = Decimal('0.0') 
qty_asks_g_SANDBTC = Decimal('0.0') 
stepSize_g_SANDBTC = Decimal('1.0') 


def on_message_SANDBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SANDBTC = 'SANDBTC' 
	price_bids_c_l_SANDBTC = data['b'] 
	qty_bids_c_l_SANDBTC = data['B'] 
	price_asks_c_l_SANDBTC = data['a'] 
	qty_asks_c_l_SANDBTC = data['A'] 

	global symbol_g_SANDBTC 
	global price_bids_g_SANDBTC 
	global qty_bids_g_SANDBTC 
	global price_asks_g_SANDBTC 
	global qty_asks_g_SANDBTC 

	symbol_g_SANDBTC = symbol_c_l_SANDBTC 
	price_bids_g_SANDBTC = Decimal(price_bids_c_l_SANDBTC) 
	qty_bids_g_SANDBTC = Decimal(qty_bids_c_l_SANDBTC) 
	price_asks_g_SANDBTC = Decimal(price_asks_c_l_SANDBTC) 
	qty_asks_g_SANDBTC = Decimal(qty_asks_c_l_SANDBTC) 


def loop_SANDBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sandbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SANDBTC) 
	ws.run_forever() 


Thread(target=loop_SANDBTC).start() 
symbol_g_OCEANBTC = 'OCEANBTC' 
price_bids_g_OCEANBTC = Decimal('0.0') 
qty_bids_g_OCEANBTC = Decimal('0.0') 
price_asks_g_OCEANBTC = Decimal('0.0') 
qty_asks_g_OCEANBTC = Decimal('0.0') 
stepSize_g_OCEANBTC = Decimal('1.0') 


def on_message_OCEANBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OCEANBTC = 'OCEANBTC' 
	price_bids_c_l_OCEANBTC = data['b'] 
	qty_bids_c_l_OCEANBTC = data['B'] 
	price_asks_c_l_OCEANBTC = data['a'] 
	qty_asks_c_l_OCEANBTC = data['A'] 

	global symbol_g_OCEANBTC 
	global price_bids_g_OCEANBTC 
	global qty_bids_g_OCEANBTC 
	global price_asks_g_OCEANBTC 
	global qty_asks_g_OCEANBTC 

	symbol_g_OCEANBTC = symbol_c_l_OCEANBTC 
	price_bids_g_OCEANBTC = Decimal(price_bids_c_l_OCEANBTC) 
	qty_bids_g_OCEANBTC = Decimal(qty_bids_c_l_OCEANBTC) 
	price_asks_g_OCEANBTC = Decimal(price_asks_c_l_OCEANBTC) 
	qty_asks_g_OCEANBTC = Decimal(qty_asks_c_l_OCEANBTC) 


def loop_OCEANBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/oceanbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OCEANBTC) 
	ws.run_forever() 


Thread(target=loop_OCEANBTC).start() 
symbol_g_NMRBTC = 'NMRBTC' 
price_bids_g_NMRBTC = Decimal('0.0') 
qty_bids_g_NMRBTC = Decimal('0.0') 
price_asks_g_NMRBTC = Decimal('0.0') 
qty_asks_g_NMRBTC = Decimal('0.0') 
stepSize_g_NMRBTC = Decimal('0.01') 


def on_message_NMRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NMRBTC = 'NMRBTC' 
	price_bids_c_l_NMRBTC = data['b'] 
	qty_bids_c_l_NMRBTC = data['B'] 
	price_asks_c_l_NMRBTC = data['a'] 
	qty_asks_c_l_NMRBTC = data['A'] 

	global symbol_g_NMRBTC 
	global price_bids_g_NMRBTC 
	global qty_bids_g_NMRBTC 
	global price_asks_g_NMRBTC 
	global qty_asks_g_NMRBTC 

	symbol_g_NMRBTC = symbol_c_l_NMRBTC 
	price_bids_g_NMRBTC = Decimal(price_bids_c_l_NMRBTC) 
	qty_bids_g_NMRBTC = Decimal(qty_bids_c_l_NMRBTC) 
	price_asks_g_NMRBTC = Decimal(price_asks_c_l_NMRBTC) 
	qty_asks_g_NMRBTC = Decimal(qty_asks_c_l_NMRBTC) 


def loop_NMRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nmrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NMRBTC) 
	ws.run_forever() 


Thread(target=loop_NMRBTC).start() 
symbol_g_DOTBTC = 'DOTBTC' 
price_bids_g_DOTBTC = Decimal('0.0') 
qty_bids_g_DOTBTC = Decimal('0.0') 
price_asks_g_DOTBTC = Decimal('0.0') 
qty_asks_g_DOTBTC = Decimal('0.0') 
stepSize_g_DOTBTC = Decimal('0.01') 


def on_message_DOTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOTBTC = 'DOTBTC' 
	price_bids_c_l_DOTBTC = data['b'] 
	qty_bids_c_l_DOTBTC = data['B'] 
	price_asks_c_l_DOTBTC = data['a'] 
	qty_asks_c_l_DOTBTC = data['A'] 

	global symbol_g_DOTBTC 
	global price_bids_g_DOTBTC 
	global qty_bids_g_DOTBTC 
	global price_asks_g_DOTBTC 
	global qty_asks_g_DOTBTC 

	symbol_g_DOTBTC = symbol_c_l_DOTBTC 
	price_bids_g_DOTBTC = Decimal(price_bids_c_l_DOTBTC) 
	qty_bids_g_DOTBTC = Decimal(qty_bids_c_l_DOTBTC) 
	price_asks_g_DOTBTC = Decimal(price_asks_c_l_DOTBTC) 
	qty_asks_g_DOTBTC = Decimal(qty_asks_c_l_DOTBTC) 


def loop_DOTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dotbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOTBTC) 
	ws.run_forever() 


Thread(target=loop_DOTBTC).start() 
symbol_g_IDEXBTC = 'IDEXBTC' 
price_bids_g_IDEXBTC = Decimal('0.0') 
qty_bids_g_IDEXBTC = Decimal('0.0') 
price_asks_g_IDEXBTC = Decimal('0.0') 
qty_asks_g_IDEXBTC = Decimal('0.0') 
stepSize_g_IDEXBTC = Decimal('1.0') 


def on_message_IDEXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IDEXBTC = 'IDEXBTC' 
	price_bids_c_l_IDEXBTC = data['b'] 
	qty_bids_c_l_IDEXBTC = data['B'] 
	price_asks_c_l_IDEXBTC = data['a'] 
	qty_asks_c_l_IDEXBTC = data['A'] 

	global symbol_g_IDEXBTC 
	global price_bids_g_IDEXBTC 
	global qty_bids_g_IDEXBTC 
	global price_asks_g_IDEXBTC 
	global qty_asks_g_IDEXBTC 

	symbol_g_IDEXBTC = symbol_c_l_IDEXBTC 
	price_bids_g_IDEXBTC = Decimal(price_bids_c_l_IDEXBTC) 
	qty_bids_g_IDEXBTC = Decimal(qty_bids_c_l_IDEXBTC) 
	price_asks_g_IDEXBTC = Decimal(price_asks_c_l_IDEXBTC) 
	qty_asks_g_IDEXBTC = Decimal(qty_asks_c_l_IDEXBTC) 


def loop_IDEXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/idexbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IDEXBTC) 
	ws.run_forever() 


Thread(target=loop_IDEXBTC).start() 
symbol_g_PAXGBTC = 'PAXGBTC' 
price_bids_g_PAXGBTC = Decimal('0.0') 
qty_bids_g_PAXGBTC = Decimal('0.0') 
price_asks_g_PAXGBTC = Decimal('0.0') 
qty_asks_g_PAXGBTC = Decimal('0.0') 
stepSize_g_PAXGBTC = Decimal('0.0001') 


def on_message_PAXGBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PAXGBTC = 'PAXGBTC' 
	price_bids_c_l_PAXGBTC = data['b'] 
	qty_bids_c_l_PAXGBTC = data['B'] 
	price_asks_c_l_PAXGBTC = data['a'] 
	qty_asks_c_l_PAXGBTC = data['A'] 

	global symbol_g_PAXGBTC 
	global price_bids_g_PAXGBTC 
	global qty_bids_g_PAXGBTC 
	global price_asks_g_PAXGBTC 
	global qty_asks_g_PAXGBTC 

	symbol_g_PAXGBTC = symbol_c_l_PAXGBTC 
	price_bids_g_PAXGBTC = Decimal(price_bids_c_l_PAXGBTC) 
	qty_bids_g_PAXGBTC = Decimal(qty_bids_c_l_PAXGBTC) 
	price_asks_g_PAXGBTC = Decimal(price_asks_c_l_PAXGBTC) 
	qty_asks_g_PAXGBTC = Decimal(qty_asks_c_l_PAXGBTC) 


def loop_PAXGBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/paxgbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PAXGBTC) 
	ws.run_forever() 


Thread(target=loop_PAXGBTC).start() 
symbol_g_TRBBTC = 'TRBBTC' 
price_bids_g_TRBBTC = Decimal('0.0') 
qty_bids_g_TRBBTC = Decimal('0.0') 
price_asks_g_TRBBTC = Decimal('0.0') 
qty_asks_g_TRBBTC = Decimal('0.0') 
stepSize_g_TRBBTC = Decimal('0.01') 


def on_message_TRBBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRBBTC = 'TRBBTC' 
	price_bids_c_l_TRBBTC = data['b'] 
	qty_bids_c_l_TRBBTC = data['B'] 
	price_asks_c_l_TRBBTC = data['a'] 
	qty_asks_c_l_TRBBTC = data['A'] 

	global symbol_g_TRBBTC 
	global price_bids_g_TRBBTC 
	global qty_bids_g_TRBBTC 
	global price_asks_g_TRBBTC 
	global qty_asks_g_TRBBTC 

	symbol_g_TRBBTC = symbol_c_l_TRBBTC 
	price_bids_g_TRBBTC = Decimal(price_bids_c_l_TRBBTC) 
	qty_bids_g_TRBBTC = Decimal(qty_bids_c_l_TRBBTC) 
	price_asks_g_TRBBTC = Decimal(price_asks_c_l_TRBBTC) 
	qty_asks_g_TRBBTC = Decimal(qty_asks_c_l_TRBBTC) 


def loop_TRBBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/trbbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRBBTC) 
	ws.run_forever() 


Thread(target=loop_TRBBTC).start() 
symbol_g_SUSHIBTC = 'SUSHIBTC' 
price_bids_g_SUSHIBTC = Decimal('0.0') 
qty_bids_g_SUSHIBTC = Decimal('0.0') 
price_asks_g_SUSHIBTC = Decimal('0.0') 
qty_asks_g_SUSHIBTC = Decimal('0.0') 
stepSize_g_SUSHIBTC = Decimal('0.1') 


def on_message_SUSHIBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SUSHIBTC = 'SUSHIBTC' 
	price_bids_c_l_SUSHIBTC = data['b'] 
	qty_bids_c_l_SUSHIBTC = data['B'] 
	price_asks_c_l_SUSHIBTC = data['a'] 
	qty_asks_c_l_SUSHIBTC = data['A'] 

	global symbol_g_SUSHIBTC 
	global price_bids_g_SUSHIBTC 
	global qty_bids_g_SUSHIBTC 
	global price_asks_g_SUSHIBTC 
	global qty_asks_g_SUSHIBTC 

	symbol_g_SUSHIBTC = symbol_c_l_SUSHIBTC 
	price_bids_g_SUSHIBTC = Decimal(price_bids_c_l_SUSHIBTC) 
	qty_bids_g_SUSHIBTC = Decimal(qty_bids_c_l_SUSHIBTC) 
	price_asks_g_SUSHIBTC = Decimal(price_asks_c_l_SUSHIBTC) 
	qty_asks_g_SUSHIBTC = Decimal(qty_asks_c_l_SUSHIBTC) 


def loop_SUSHIBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sushibtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SUSHIBTC) 
	ws.run_forever() 


Thread(target=loop_SUSHIBTC).start() 
symbol_g_KSMBTC = 'KSMBTC' 
price_bids_g_KSMBTC = Decimal('0.0') 
qty_bids_g_KSMBTC = Decimal('0.0') 
price_asks_g_KSMBTC = Decimal('0.0') 
qty_asks_g_KSMBTC = Decimal('0.0') 
stepSize_g_KSMBTC = Decimal('0.001') 


def on_message_KSMBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KSMBTC = 'KSMBTC' 
	price_bids_c_l_KSMBTC = data['b'] 
	qty_bids_c_l_KSMBTC = data['B'] 
	price_asks_c_l_KSMBTC = data['a'] 
	qty_asks_c_l_KSMBTC = data['A'] 

	global symbol_g_KSMBTC 
	global price_bids_g_KSMBTC 
	global qty_bids_g_KSMBTC 
	global price_asks_g_KSMBTC 
	global qty_asks_g_KSMBTC 

	symbol_g_KSMBTC = symbol_c_l_KSMBTC 
	price_bids_g_KSMBTC = Decimal(price_bids_c_l_KSMBTC) 
	qty_bids_g_KSMBTC = Decimal(qty_bids_c_l_KSMBTC) 
	price_asks_g_KSMBTC = Decimal(price_asks_c_l_KSMBTC) 
	qty_asks_g_KSMBTC = Decimal(qty_asks_c_l_KSMBTC) 


def loop_KSMBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ksmbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KSMBTC) 
	ws.run_forever() 


Thread(target=loop_KSMBTC).start() 
symbol_g_EGLDBTC = 'EGLDBTC' 
price_bids_g_EGLDBTC = Decimal('0.0') 
qty_bids_g_EGLDBTC = Decimal('0.0') 
price_asks_g_EGLDBTC = Decimal('0.0') 
qty_asks_g_EGLDBTC = Decimal('0.0') 
stepSize_g_EGLDBTC = Decimal('0.01') 


def on_message_EGLDBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EGLDBTC = 'EGLDBTC' 
	price_bids_c_l_EGLDBTC = data['b'] 
	qty_bids_c_l_EGLDBTC = data['B'] 
	price_asks_c_l_EGLDBTC = data['a'] 
	qty_asks_c_l_EGLDBTC = data['A'] 

	global symbol_g_EGLDBTC 
	global price_bids_g_EGLDBTC 
	global qty_bids_g_EGLDBTC 
	global price_asks_g_EGLDBTC 
	global qty_asks_g_EGLDBTC 

	symbol_g_EGLDBTC = symbol_c_l_EGLDBTC 
	price_bids_g_EGLDBTC = Decimal(price_bids_c_l_EGLDBTC) 
	qty_bids_g_EGLDBTC = Decimal(qty_bids_c_l_EGLDBTC) 
	price_asks_g_EGLDBTC = Decimal(price_asks_c_l_EGLDBTC) 
	qty_asks_g_EGLDBTC = Decimal(qty_asks_c_l_EGLDBTC) 


def loop_EGLDBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/egldbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EGLDBTC) 
	ws.run_forever() 


Thread(target=loop_EGLDBTC).start() 
symbol_g_DIABTC = 'DIABTC' 
price_bids_g_DIABTC = Decimal('0.0') 
qty_bids_g_DIABTC = Decimal('0.0') 
price_asks_g_DIABTC = Decimal('0.0') 
qty_asks_g_DIABTC = Decimal('0.0') 
stepSize_g_DIABTC = Decimal('0.1') 


def on_message_DIABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DIABTC = 'DIABTC' 
	price_bids_c_l_DIABTC = data['b'] 
	qty_bids_c_l_DIABTC = data['B'] 
	price_asks_c_l_DIABTC = data['a'] 
	qty_asks_c_l_DIABTC = data['A'] 

	global symbol_g_DIABTC 
	global price_bids_g_DIABTC 
	global qty_bids_g_DIABTC 
	global price_asks_g_DIABTC 
	global qty_asks_g_DIABTC 

	symbol_g_DIABTC = symbol_c_l_DIABTC 
	price_bids_g_DIABTC = Decimal(price_bids_c_l_DIABTC) 
	qty_bids_g_DIABTC = Decimal(qty_bids_c_l_DIABTC) 
	price_asks_g_DIABTC = Decimal(price_asks_c_l_DIABTC) 
	qty_asks_g_DIABTC = Decimal(qty_asks_c_l_DIABTC) 


def loop_DIABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/diabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DIABTC) 
	ws.run_forever() 


Thread(target=loop_DIABTC).start() 
symbol_g_UMABTC = 'UMABTC' 
price_bids_g_UMABTC = Decimal('0.0') 
qty_bids_g_UMABTC = Decimal('0.0') 
price_asks_g_UMABTC = Decimal('0.0') 
qty_asks_g_UMABTC = Decimal('0.0') 
stepSize_g_UMABTC = Decimal('0.1') 


def on_message_UMABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UMABTC = 'UMABTC' 
	price_bids_c_l_UMABTC = data['b'] 
	qty_bids_c_l_UMABTC = data['B'] 
	price_asks_c_l_UMABTC = data['a'] 
	qty_asks_c_l_UMABTC = data['A'] 

	global symbol_g_UMABTC 
	global price_bids_g_UMABTC 
	global qty_bids_g_UMABTC 
	global price_asks_g_UMABTC 
	global qty_asks_g_UMABTC 

	symbol_g_UMABTC = symbol_c_l_UMABTC 
	price_bids_g_UMABTC = Decimal(price_bids_c_l_UMABTC) 
	qty_bids_g_UMABTC = Decimal(qty_bids_c_l_UMABTC) 
	price_asks_g_UMABTC = Decimal(price_asks_c_l_UMABTC) 
	qty_asks_g_UMABTC = Decimal(qty_asks_c_l_UMABTC) 


def loop_UMABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/umabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UMABTC) 
	ws.run_forever() 


Thread(target=loop_UMABTC).start() 
symbol_g_BELBTC = 'BELBTC' 
price_bids_g_BELBTC = Decimal('0.0') 
qty_bids_g_BELBTC = Decimal('0.0') 
price_asks_g_BELBTC = Decimal('0.0') 
qty_asks_g_BELBTC = Decimal('0.0') 
stepSize_g_BELBTC = Decimal('0.1') 


def on_message_BELBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BELBTC = 'BELBTC' 
	price_bids_c_l_BELBTC = data['b'] 
	qty_bids_c_l_BELBTC = data['B'] 
	price_asks_c_l_BELBTC = data['a'] 
	qty_asks_c_l_BELBTC = data['A'] 

	global symbol_g_BELBTC 
	global price_bids_g_BELBTC 
	global qty_bids_g_BELBTC 
	global price_asks_g_BELBTC 
	global qty_asks_g_BELBTC 

	symbol_g_BELBTC = symbol_c_l_BELBTC 
	price_bids_g_BELBTC = Decimal(price_bids_c_l_BELBTC) 
	qty_bids_g_BELBTC = Decimal(qty_bids_c_l_BELBTC) 
	price_asks_g_BELBTC = Decimal(price_asks_c_l_BELBTC) 
	qty_asks_g_BELBTC = Decimal(qty_asks_c_l_BELBTC) 


def loop_BELBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/belbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BELBTC) 
	ws.run_forever() 


Thread(target=loop_BELBTC).start() 
symbol_g_WINGBTC = 'WINGBTC' 
price_bids_g_WINGBTC = Decimal('0.0') 
qty_bids_g_WINGBTC = Decimal('0.0') 
price_asks_g_WINGBTC = Decimal('0.0') 
qty_asks_g_WINGBTC = Decimal('0.0') 
stepSize_g_WINGBTC = Decimal('0.01') 


def on_message_WINGBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WINGBTC = 'WINGBTC' 
	price_bids_c_l_WINGBTC = data['b'] 
	qty_bids_c_l_WINGBTC = data['B'] 
	price_asks_c_l_WINGBTC = data['a'] 
	qty_asks_c_l_WINGBTC = data['A'] 

	global symbol_g_WINGBTC 
	global price_bids_g_WINGBTC 
	global qty_bids_g_WINGBTC 
	global price_asks_g_WINGBTC 
	global qty_asks_g_WINGBTC 

	symbol_g_WINGBTC = symbol_c_l_WINGBTC 
	price_bids_g_WINGBTC = Decimal(price_bids_c_l_WINGBTC) 
	qty_bids_g_WINGBTC = Decimal(qty_bids_c_l_WINGBTC) 
	price_asks_g_WINGBTC = Decimal(price_asks_c_l_WINGBTC) 
	qty_asks_g_WINGBTC = Decimal(qty_asks_c_l_WINGBTC) 


def loop_WINGBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wingbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WINGBTC) 
	ws.run_forever() 


Thread(target=loop_WINGBTC).start() 
symbol_g_UNIBTC = 'UNIBTC' 
price_bids_g_UNIBTC = Decimal('0.0') 
qty_bids_g_UNIBTC = Decimal('0.0') 
price_asks_g_UNIBTC = Decimal('0.0') 
qty_asks_g_UNIBTC = Decimal('0.0') 
stepSize_g_UNIBTC = Decimal('0.01') 


def on_message_UNIBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UNIBTC = 'UNIBTC' 
	price_bids_c_l_UNIBTC = data['b'] 
	qty_bids_c_l_UNIBTC = data['B'] 
	price_asks_c_l_UNIBTC = data['a'] 
	qty_asks_c_l_UNIBTC = data['A'] 

	global symbol_g_UNIBTC 
	global price_bids_g_UNIBTC 
	global qty_bids_g_UNIBTC 
	global price_asks_g_UNIBTC 
	global qty_asks_g_UNIBTC 

	symbol_g_UNIBTC = symbol_c_l_UNIBTC 
	price_bids_g_UNIBTC = Decimal(price_bids_c_l_UNIBTC) 
	qty_bids_g_UNIBTC = Decimal(qty_bids_c_l_UNIBTC) 
	price_asks_g_UNIBTC = Decimal(price_asks_c_l_UNIBTC) 
	qty_asks_g_UNIBTC = Decimal(qty_asks_c_l_UNIBTC) 


def loop_UNIBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/unibtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UNIBTC) 
	ws.run_forever() 


Thread(target=loop_UNIBTC).start() 
symbol_g_OXTBTC = 'OXTBTC' 
price_bids_g_OXTBTC = Decimal('0.0') 
qty_bids_g_OXTBTC = Decimal('0.0') 
price_asks_g_OXTBTC = Decimal('0.0') 
qty_asks_g_OXTBTC = Decimal('0.0') 
stepSize_g_OXTBTC = Decimal('1.0') 


def on_message_OXTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OXTBTC = 'OXTBTC' 
	price_bids_c_l_OXTBTC = data['b'] 
	qty_bids_c_l_OXTBTC = data['B'] 
	price_asks_c_l_OXTBTC = data['a'] 
	qty_asks_c_l_OXTBTC = data['A'] 

	global symbol_g_OXTBTC 
	global price_bids_g_OXTBTC 
	global qty_bids_g_OXTBTC 
	global price_asks_g_OXTBTC 
	global qty_asks_g_OXTBTC 

	symbol_g_OXTBTC = symbol_c_l_OXTBTC 
	price_bids_g_OXTBTC = Decimal(price_bids_c_l_OXTBTC) 
	qty_bids_g_OXTBTC = Decimal(qty_bids_c_l_OXTBTC) 
	price_asks_g_OXTBTC = Decimal(price_asks_c_l_OXTBTC) 
	qty_asks_g_OXTBTC = Decimal(qty_asks_c_l_OXTBTC) 


def loop_OXTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/oxtbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OXTBTC) 
	ws.run_forever() 


Thread(target=loop_OXTBTC).start() 
symbol_g_AVAXBTC = 'AVAXBTC' 
price_bids_g_AVAXBTC = Decimal('0.0') 
qty_bids_g_AVAXBTC = Decimal('0.0') 
price_asks_g_AVAXBTC = Decimal('0.0') 
qty_asks_g_AVAXBTC = Decimal('0.0') 
stepSize_g_AVAXBTC = Decimal('0.01') 


def on_message_AVAXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AVAXBTC = 'AVAXBTC' 
	price_bids_c_l_AVAXBTC = data['b'] 
	qty_bids_c_l_AVAXBTC = data['B'] 
	price_asks_c_l_AVAXBTC = data['a'] 
	qty_asks_c_l_AVAXBTC = data['A'] 

	global symbol_g_AVAXBTC 
	global price_bids_g_AVAXBTC 
	global qty_bids_g_AVAXBTC 
	global price_asks_g_AVAXBTC 
	global qty_asks_g_AVAXBTC 

	symbol_g_AVAXBTC = symbol_c_l_AVAXBTC 
	price_bids_g_AVAXBTC = Decimal(price_bids_c_l_AVAXBTC) 
	qty_bids_g_AVAXBTC = Decimal(qty_bids_c_l_AVAXBTC) 
	price_asks_g_AVAXBTC = Decimal(price_asks_c_l_AVAXBTC) 
	qty_asks_g_AVAXBTC = Decimal(qty_asks_c_l_AVAXBTC) 


def loop_AVAXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/avaxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AVAXBTC) 
	ws.run_forever() 


Thread(target=loop_AVAXBTC).start() 
symbol_g_FLMBTC = 'FLMBTC' 
price_bids_g_FLMBTC = Decimal('0.0') 
qty_bids_g_FLMBTC = Decimal('0.0') 
price_asks_g_FLMBTC = Decimal('0.0') 
qty_asks_g_FLMBTC = Decimal('0.0') 
stepSize_g_FLMBTC = Decimal('1.0') 


def on_message_FLMBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FLMBTC = 'FLMBTC' 
	price_bids_c_l_FLMBTC = data['b'] 
	qty_bids_c_l_FLMBTC = data['B'] 
	price_asks_c_l_FLMBTC = data['a'] 
	qty_asks_c_l_FLMBTC = data['A'] 

	global symbol_g_FLMBTC 
	global price_bids_g_FLMBTC 
	global qty_bids_g_FLMBTC 
	global price_asks_g_FLMBTC 
	global qty_asks_g_FLMBTC 

	symbol_g_FLMBTC = symbol_c_l_FLMBTC 
	price_bids_g_FLMBTC = Decimal(price_bids_c_l_FLMBTC) 
	qty_bids_g_FLMBTC = Decimal(qty_bids_c_l_FLMBTC) 
	price_asks_g_FLMBTC = Decimal(price_asks_c_l_FLMBTC) 
	qty_asks_g_FLMBTC = Decimal(qty_asks_c_l_FLMBTC) 


def loop_FLMBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/flmbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FLMBTC) 
	ws.run_forever() 


Thread(target=loop_FLMBTC).start() 
symbol_g_SCRTBTC = 'SCRTBTC' 
price_bids_g_SCRTBTC = Decimal('0.0') 
qty_bids_g_SCRTBTC = Decimal('0.0') 
price_asks_g_SCRTBTC = Decimal('0.0') 
qty_asks_g_SCRTBTC = Decimal('0.0') 
stepSize_g_SCRTBTC = Decimal('0.1') 


def on_message_SCRTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SCRTBTC = 'SCRTBTC' 
	price_bids_c_l_SCRTBTC = data['b'] 
	qty_bids_c_l_SCRTBTC = data['B'] 
	price_asks_c_l_SCRTBTC = data['a'] 
	qty_asks_c_l_SCRTBTC = data['A'] 

	global symbol_g_SCRTBTC 
	global price_bids_g_SCRTBTC 
	global qty_bids_g_SCRTBTC 
	global price_asks_g_SCRTBTC 
	global qty_asks_g_SCRTBTC 

	symbol_g_SCRTBTC = symbol_c_l_SCRTBTC 
	price_bids_g_SCRTBTC = Decimal(price_bids_c_l_SCRTBTC) 
	qty_bids_g_SCRTBTC = Decimal(qty_bids_c_l_SCRTBTC) 
	price_asks_g_SCRTBTC = Decimal(price_asks_c_l_SCRTBTC) 
	qty_asks_g_SCRTBTC = Decimal(qty_asks_c_l_SCRTBTC) 


def loop_SCRTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/scrtbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SCRTBTC) 
	ws.run_forever() 


Thread(target=loop_SCRTBTC).start() 
symbol_g_ORNBTC = 'ORNBTC' 
price_bids_g_ORNBTC = Decimal('0.0') 
qty_bids_g_ORNBTC = Decimal('0.0') 
price_asks_g_ORNBTC = Decimal('0.0') 
qty_asks_g_ORNBTC = Decimal('0.0') 
stepSize_g_ORNBTC = Decimal('0.1') 


def on_message_ORNBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ORNBTC = 'ORNBTC' 
	price_bids_c_l_ORNBTC = data['b'] 
	qty_bids_c_l_ORNBTC = data['B'] 
	price_asks_c_l_ORNBTC = data['a'] 
	qty_asks_c_l_ORNBTC = data['A'] 

	global symbol_g_ORNBTC 
	global price_bids_g_ORNBTC 
	global qty_bids_g_ORNBTC 
	global price_asks_g_ORNBTC 
	global qty_asks_g_ORNBTC 

	symbol_g_ORNBTC = symbol_c_l_ORNBTC 
	price_bids_g_ORNBTC = Decimal(price_bids_c_l_ORNBTC) 
	qty_bids_g_ORNBTC = Decimal(qty_bids_c_l_ORNBTC) 
	price_asks_g_ORNBTC = Decimal(price_asks_c_l_ORNBTC) 
	qty_asks_g_ORNBTC = Decimal(qty_asks_c_l_ORNBTC) 


def loop_ORNBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ornbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ORNBTC) 
	ws.run_forever() 


Thread(target=loop_ORNBTC).start() 
symbol_g_UTKBTC = 'UTKBTC' 
price_bids_g_UTKBTC = Decimal('0.0') 
qty_bids_g_UTKBTC = Decimal('0.0') 
price_asks_g_UTKBTC = Decimal('0.0') 
qty_asks_g_UTKBTC = Decimal('0.0') 
stepSize_g_UTKBTC = Decimal('1.0') 


def on_message_UTKBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UTKBTC = 'UTKBTC' 
	price_bids_c_l_UTKBTC = data['b'] 
	qty_bids_c_l_UTKBTC = data['B'] 
	price_asks_c_l_UTKBTC = data['a'] 
	qty_asks_c_l_UTKBTC = data['A'] 

	global symbol_g_UTKBTC 
	global price_bids_g_UTKBTC 
	global qty_bids_g_UTKBTC 
	global price_asks_g_UTKBTC 
	global qty_asks_g_UTKBTC 

	symbol_g_UTKBTC = symbol_c_l_UTKBTC 
	price_bids_g_UTKBTC = Decimal(price_bids_c_l_UTKBTC) 
	qty_bids_g_UTKBTC = Decimal(qty_bids_c_l_UTKBTC) 
	price_asks_g_UTKBTC = Decimal(price_asks_c_l_UTKBTC) 
	qty_asks_g_UTKBTC = Decimal(qty_asks_c_l_UTKBTC) 


def loop_UTKBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/utkbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UTKBTC) 
	ws.run_forever() 


Thread(target=loop_UTKBTC).start() 
symbol_g_XVSBTC = 'XVSBTC' 
price_bids_g_XVSBTC = Decimal('0.0') 
qty_bids_g_XVSBTC = Decimal('0.0') 
price_asks_g_XVSBTC = Decimal('0.0') 
qty_asks_g_XVSBTC = Decimal('0.0') 
stepSize_g_XVSBTC = Decimal('0.01') 


def on_message_XVSBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XVSBTC = 'XVSBTC' 
	price_bids_c_l_XVSBTC = data['b'] 
	qty_bids_c_l_XVSBTC = data['B'] 
	price_asks_c_l_XVSBTC = data['a'] 
	qty_asks_c_l_XVSBTC = data['A'] 

	global symbol_g_XVSBTC 
	global price_bids_g_XVSBTC 
	global qty_bids_g_XVSBTC 
	global price_asks_g_XVSBTC 
	global qty_asks_g_XVSBTC 

	symbol_g_XVSBTC = symbol_c_l_XVSBTC 
	price_bids_g_XVSBTC = Decimal(price_bids_c_l_XVSBTC) 
	qty_bids_g_XVSBTC = Decimal(qty_bids_c_l_XVSBTC) 
	price_asks_g_XVSBTC = Decimal(price_asks_c_l_XVSBTC) 
	qty_asks_g_XVSBTC = Decimal(qty_asks_c_l_XVSBTC) 


def loop_XVSBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xvsbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XVSBTC) 
	ws.run_forever() 


Thread(target=loop_XVSBTC).start() 
symbol_g_ALPHABTC = 'ALPHABTC' 
price_bids_g_ALPHABTC = Decimal('0.0') 
qty_bids_g_ALPHABTC = Decimal('0.0') 
price_asks_g_ALPHABTC = Decimal('0.0') 
qty_asks_g_ALPHABTC = Decimal('0.0') 
stepSize_g_ALPHABTC = Decimal('1.0') 


def on_message_ALPHABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALPHABTC = 'ALPHABTC' 
	price_bids_c_l_ALPHABTC = data['b'] 
	qty_bids_c_l_ALPHABTC = data['B'] 
	price_asks_c_l_ALPHABTC = data['a'] 
	qty_asks_c_l_ALPHABTC = data['A'] 

	global symbol_g_ALPHABTC 
	global price_bids_g_ALPHABTC 
	global qty_bids_g_ALPHABTC 
	global price_asks_g_ALPHABTC 
	global qty_asks_g_ALPHABTC 

	symbol_g_ALPHABTC = symbol_c_l_ALPHABTC 
	price_bids_g_ALPHABTC = Decimal(price_bids_c_l_ALPHABTC) 
	qty_bids_g_ALPHABTC = Decimal(qty_bids_c_l_ALPHABTC) 
	price_asks_g_ALPHABTC = Decimal(price_asks_c_l_ALPHABTC) 
	qty_asks_g_ALPHABTC = Decimal(qty_asks_c_l_ALPHABTC) 


def loop_ALPHABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alphabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALPHABTC) 
	ws.run_forever() 


Thread(target=loop_ALPHABTC).start() 
symbol_g_VIDTBTC = 'VIDTBTC' 
price_bids_g_VIDTBTC = Decimal('0.0') 
qty_bids_g_VIDTBTC = Decimal('0.0') 
price_asks_g_VIDTBTC = Decimal('0.0') 
qty_asks_g_VIDTBTC = Decimal('0.0') 
stepSize_g_VIDTBTC = Decimal('1.0') 


def on_message_VIDTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VIDTBTC = 'VIDTBTC' 
	price_bids_c_l_VIDTBTC = data['b'] 
	qty_bids_c_l_VIDTBTC = data['B'] 
	price_asks_c_l_VIDTBTC = data['a'] 
	qty_asks_c_l_VIDTBTC = data['A'] 

	global symbol_g_VIDTBTC 
	global price_bids_g_VIDTBTC 
	global qty_bids_g_VIDTBTC 
	global price_asks_g_VIDTBTC 
	global qty_asks_g_VIDTBTC 

	symbol_g_VIDTBTC = symbol_c_l_VIDTBTC 
	price_bids_g_VIDTBTC = Decimal(price_bids_c_l_VIDTBTC) 
	qty_bids_g_VIDTBTC = Decimal(qty_bids_c_l_VIDTBTC) 
	price_asks_g_VIDTBTC = Decimal(price_asks_c_l_VIDTBTC) 
	qty_asks_g_VIDTBTC = Decimal(qty_asks_c_l_VIDTBTC) 


def loop_VIDTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/vidtbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VIDTBTC) 
	ws.run_forever() 


Thread(target=loop_VIDTBTC).start() 
symbol_g_AAVEBTC = 'AAVEBTC' 
price_bids_g_AAVEBTC = Decimal('0.0') 
qty_bids_g_AAVEBTC = Decimal('0.0') 
price_asks_g_AAVEBTC = Decimal('0.0') 
qty_asks_g_AAVEBTC = Decimal('0.0') 
stepSize_g_AAVEBTC = Decimal('0.001') 


def on_message_AAVEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AAVEBTC = 'AAVEBTC' 
	price_bids_c_l_AAVEBTC = data['b'] 
	qty_bids_c_l_AAVEBTC = data['B'] 
	price_asks_c_l_AAVEBTC = data['a'] 
	qty_asks_c_l_AAVEBTC = data['A'] 

	global symbol_g_AAVEBTC 
	global price_bids_g_AAVEBTC 
	global qty_bids_g_AAVEBTC 
	global price_asks_g_AAVEBTC 
	global qty_asks_g_AAVEBTC 

	symbol_g_AAVEBTC = symbol_c_l_AAVEBTC 
	price_bids_g_AAVEBTC = Decimal(price_bids_c_l_AAVEBTC) 
	qty_bids_g_AAVEBTC = Decimal(qty_bids_c_l_AAVEBTC) 
	price_asks_g_AAVEBTC = Decimal(price_asks_c_l_AAVEBTC) 
	qty_asks_g_AAVEBTC = Decimal(qty_asks_c_l_AAVEBTC) 


def loop_AAVEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/aavebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AAVEBTC) 
	ws.run_forever() 


Thread(target=loop_AAVEBTC).start() 
symbol_g_NEARBTC = 'NEARBTC' 
price_bids_g_NEARBTC = Decimal('0.0') 
qty_bids_g_NEARBTC = Decimal('0.0') 
price_asks_g_NEARBTC = Decimal('0.0') 
qty_asks_g_NEARBTC = Decimal('0.0') 
stepSize_g_NEARBTC = Decimal('0.1') 


def on_message_NEARBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEARBTC = 'NEARBTC' 
	price_bids_c_l_NEARBTC = data['b'] 
	qty_bids_c_l_NEARBTC = data['B'] 
	price_asks_c_l_NEARBTC = data['a'] 
	qty_asks_c_l_NEARBTC = data['A'] 

	global symbol_g_NEARBTC 
	global price_bids_g_NEARBTC 
	global qty_bids_g_NEARBTC 
	global price_asks_g_NEARBTC 
	global qty_asks_g_NEARBTC 

	symbol_g_NEARBTC = symbol_c_l_NEARBTC 
	price_bids_g_NEARBTC = Decimal(price_bids_c_l_NEARBTC) 
	qty_bids_g_NEARBTC = Decimal(qty_bids_c_l_NEARBTC) 
	price_asks_g_NEARBTC = Decimal(price_asks_c_l_NEARBTC) 
	qty_asks_g_NEARBTC = Decimal(qty_asks_c_l_NEARBTC) 


def loop_NEARBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nearbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEARBTC) 
	ws.run_forever() 


Thread(target=loop_NEARBTC).start() 
symbol_g_FILBTC = 'FILBTC' 
price_bids_g_FILBTC = Decimal('0.0') 
qty_bids_g_FILBTC = Decimal('0.0') 
price_asks_g_FILBTC = Decimal('0.0') 
qty_asks_g_FILBTC = Decimal('0.0') 
stepSize_g_FILBTC = Decimal('0.01') 


def on_message_FILBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FILBTC = 'FILBTC' 
	price_bids_c_l_FILBTC = data['b'] 
	qty_bids_c_l_FILBTC = data['B'] 
	price_asks_c_l_FILBTC = data['a'] 
	qty_asks_c_l_FILBTC = data['A'] 

	global symbol_g_FILBTC 
	global price_bids_g_FILBTC 
	global qty_bids_g_FILBTC 
	global price_asks_g_FILBTC 
	global qty_asks_g_FILBTC 

	symbol_g_FILBTC = symbol_c_l_FILBTC 
	price_bids_g_FILBTC = Decimal(price_bids_c_l_FILBTC) 
	qty_bids_g_FILBTC = Decimal(qty_bids_c_l_FILBTC) 
	price_asks_g_FILBTC = Decimal(price_asks_c_l_FILBTC) 
	qty_asks_g_FILBTC = Decimal(qty_asks_c_l_FILBTC) 


def loop_FILBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/filbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FILBTC) 
	ws.run_forever() 


Thread(target=loop_FILBTC).start() 
symbol_g_INJBTC = 'INJBTC' 
price_bids_g_INJBTC = Decimal('0.0') 
qty_bids_g_INJBTC = Decimal('0.0') 
price_asks_g_INJBTC = Decimal('0.0') 
qty_asks_g_INJBTC = Decimal('0.0') 
stepSize_g_INJBTC = Decimal('0.1') 


def on_message_INJBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_INJBTC = 'INJBTC' 
	price_bids_c_l_INJBTC = data['b'] 
	qty_bids_c_l_INJBTC = data['B'] 
	price_asks_c_l_INJBTC = data['a'] 
	qty_asks_c_l_INJBTC = data['A'] 

	global symbol_g_INJBTC 
	global price_bids_g_INJBTC 
	global qty_bids_g_INJBTC 
	global price_asks_g_INJBTC 
	global qty_asks_g_INJBTC 

	symbol_g_INJBTC = symbol_c_l_INJBTC 
	price_bids_g_INJBTC = Decimal(price_bids_c_l_INJBTC) 
	qty_bids_g_INJBTC = Decimal(qty_bids_c_l_INJBTC) 
	price_asks_g_INJBTC = Decimal(price_asks_c_l_INJBTC) 
	qty_asks_g_INJBTC = Decimal(qty_asks_c_l_INJBTC) 


def loop_INJBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/injbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_INJBTC) 
	ws.run_forever() 


Thread(target=loop_INJBTC).start() 
symbol_g_AUDIOBTC = 'AUDIOBTC' 
price_bids_g_AUDIOBTC = Decimal('0.0') 
qty_bids_g_AUDIOBTC = Decimal('0.0') 
price_asks_g_AUDIOBTC = Decimal('0.0') 
qty_asks_g_AUDIOBTC = Decimal('0.0') 
stepSize_g_AUDIOBTC = Decimal('0.1') 


def on_message_AUDIOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AUDIOBTC = 'AUDIOBTC' 
	price_bids_c_l_AUDIOBTC = data['b'] 
	qty_bids_c_l_AUDIOBTC = data['B'] 
	price_asks_c_l_AUDIOBTC = data['a'] 
	qty_asks_c_l_AUDIOBTC = data['A'] 

	global symbol_g_AUDIOBTC 
	global price_bids_g_AUDIOBTC 
	global qty_bids_g_AUDIOBTC 
	global price_asks_g_AUDIOBTC 
	global qty_asks_g_AUDIOBTC 

	symbol_g_AUDIOBTC = symbol_c_l_AUDIOBTC 
	price_bids_g_AUDIOBTC = Decimal(price_bids_c_l_AUDIOBTC) 
	qty_bids_g_AUDIOBTC = Decimal(qty_bids_c_l_AUDIOBTC) 
	price_asks_g_AUDIOBTC = Decimal(price_asks_c_l_AUDIOBTC) 
	qty_asks_g_AUDIOBTC = Decimal(qty_asks_c_l_AUDIOBTC) 


def loop_AUDIOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/audiobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AUDIOBTC) 
	ws.run_forever() 


Thread(target=loop_AUDIOBTC).start() 
symbol_g_CTKBTC = 'CTKBTC' 
price_bids_g_CTKBTC = Decimal('0.0') 
qty_bids_g_CTKBTC = Decimal('0.0') 
price_asks_g_CTKBTC = Decimal('0.0') 
qty_asks_g_CTKBTC = Decimal('0.0') 
stepSize_g_CTKBTC = Decimal('0.1') 


def on_message_CTKBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CTKBTC = 'CTKBTC' 
	price_bids_c_l_CTKBTC = data['b'] 
	qty_bids_c_l_CTKBTC = data['B'] 
	price_asks_c_l_CTKBTC = data['a'] 
	qty_asks_c_l_CTKBTC = data['A'] 

	global symbol_g_CTKBTC 
	global price_bids_g_CTKBTC 
	global qty_bids_g_CTKBTC 
	global price_asks_g_CTKBTC 
	global qty_asks_g_CTKBTC 

	symbol_g_CTKBTC = symbol_c_l_CTKBTC 
	price_bids_g_CTKBTC = Decimal(price_bids_c_l_CTKBTC) 
	qty_bids_g_CTKBTC = Decimal(qty_bids_c_l_CTKBTC) 
	price_asks_g_CTKBTC = Decimal(price_asks_c_l_CTKBTC) 
	qty_asks_g_CTKBTC = Decimal(qty_asks_c_l_CTKBTC) 


def loop_CTKBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ctkbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CTKBTC) 
	ws.run_forever() 


Thread(target=loop_CTKBTC).start() 
symbol_g_AXSBTC = 'AXSBTC' 
price_bids_g_AXSBTC = Decimal('0.0') 
qty_bids_g_AXSBTC = Decimal('0.0') 
price_asks_g_AXSBTC = Decimal('0.0') 
qty_asks_g_AXSBTC = Decimal('0.0') 
stepSize_g_AXSBTC = Decimal('0.01') 


def on_message_AXSBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AXSBTC = 'AXSBTC' 
	price_bids_c_l_AXSBTC = data['b'] 
	qty_bids_c_l_AXSBTC = data['B'] 
	price_asks_c_l_AXSBTC = data['a'] 
	qty_asks_c_l_AXSBTC = data['A'] 

	global symbol_g_AXSBTC 
	global price_bids_g_AXSBTC 
	global qty_bids_g_AXSBTC 
	global price_asks_g_AXSBTC 
	global qty_asks_g_AXSBTC 

	symbol_g_AXSBTC = symbol_c_l_AXSBTC 
	price_bids_g_AXSBTC = Decimal(price_bids_c_l_AXSBTC) 
	qty_bids_g_AXSBTC = Decimal(qty_bids_c_l_AXSBTC) 
	price_asks_g_AXSBTC = Decimal(price_asks_c_l_AXSBTC) 
	qty_asks_g_AXSBTC = Decimal(qty_asks_c_l_AXSBTC) 


def loop_AXSBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/axsbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AXSBTC) 
	ws.run_forever() 


Thread(target=loop_AXSBTC).start() 
symbol_g_HARDBTC = 'HARDBTC' 
price_bids_g_HARDBTC = Decimal('0.0') 
qty_bids_g_HARDBTC = Decimal('0.0') 
price_asks_g_HARDBTC = Decimal('0.0') 
qty_asks_g_HARDBTC = Decimal('0.0') 
stepSize_g_HARDBTC = Decimal('1.0') 


def on_message_HARDBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HARDBTC = 'HARDBTC' 
	price_bids_c_l_HARDBTC = data['b'] 
	qty_bids_c_l_HARDBTC = data['B'] 
	price_asks_c_l_HARDBTC = data['a'] 
	qty_asks_c_l_HARDBTC = data['A'] 

	global symbol_g_HARDBTC 
	global price_bids_g_HARDBTC 
	global qty_bids_g_HARDBTC 
	global price_asks_g_HARDBTC 
	global qty_asks_g_HARDBTC 

	symbol_g_HARDBTC = symbol_c_l_HARDBTC 
	price_bids_g_HARDBTC = Decimal(price_bids_c_l_HARDBTC) 
	qty_bids_g_HARDBTC = Decimal(qty_bids_c_l_HARDBTC) 
	price_asks_g_HARDBTC = Decimal(price_asks_c_l_HARDBTC) 
	qty_asks_g_HARDBTC = Decimal(qty_asks_c_l_HARDBTC) 


def loop_HARDBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hardbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HARDBTC) 
	ws.run_forever() 


Thread(target=loop_HARDBTC).start() 
symbol_g_STRAXBTC = 'STRAXBTC' 
price_bids_g_STRAXBTC = Decimal('0.0') 
qty_bids_g_STRAXBTC = Decimal('0.0') 
price_asks_g_STRAXBTC = Decimal('0.0') 
qty_asks_g_STRAXBTC = Decimal('0.0') 
stepSize_g_STRAXBTC = Decimal('0.1') 


def on_message_STRAXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STRAXBTC = 'STRAXBTC' 
	price_bids_c_l_STRAXBTC = data['b'] 
	qty_bids_c_l_STRAXBTC = data['B'] 
	price_asks_c_l_STRAXBTC = data['a'] 
	qty_asks_c_l_STRAXBTC = data['A'] 

	global symbol_g_STRAXBTC 
	global price_bids_g_STRAXBTC 
	global qty_bids_g_STRAXBTC 
	global price_asks_g_STRAXBTC 
	global qty_asks_g_STRAXBTC 

	symbol_g_STRAXBTC = symbol_c_l_STRAXBTC 
	price_bids_g_STRAXBTC = Decimal(price_bids_c_l_STRAXBTC) 
	qty_bids_g_STRAXBTC = Decimal(qty_bids_c_l_STRAXBTC) 
	price_asks_g_STRAXBTC = Decimal(price_asks_c_l_STRAXBTC) 
	qty_asks_g_STRAXBTC = Decimal(qty_asks_c_l_STRAXBTC) 


def loop_STRAXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/straxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STRAXBTC) 
	ws.run_forever() 


Thread(target=loop_STRAXBTC).start() 
symbol_g_FORBTC = 'FORBTC' 
price_bids_g_FORBTC = Decimal('0.0') 
qty_bids_g_FORBTC = Decimal('0.0') 
price_asks_g_FORBTC = Decimal('0.0') 
qty_asks_g_FORBTC = Decimal('0.0') 
stepSize_g_FORBTC = Decimal('1.0') 


def on_message_FORBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FORBTC = 'FORBTC' 
	price_bids_c_l_FORBTC = data['b'] 
	qty_bids_c_l_FORBTC = data['B'] 
	price_asks_c_l_FORBTC = data['a'] 
	qty_asks_c_l_FORBTC = data['A'] 

	global symbol_g_FORBTC 
	global price_bids_g_FORBTC 
	global qty_bids_g_FORBTC 
	global price_asks_g_FORBTC 
	global qty_asks_g_FORBTC 

	symbol_g_FORBTC = symbol_c_l_FORBTC 
	price_bids_g_FORBTC = Decimal(price_bids_c_l_FORBTC) 
	qty_bids_g_FORBTC = Decimal(qty_bids_c_l_FORBTC) 
	price_asks_g_FORBTC = Decimal(price_asks_c_l_FORBTC) 
	qty_asks_g_FORBTC = Decimal(qty_asks_c_l_FORBTC) 


def loop_FORBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/forbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FORBTC) 
	ws.run_forever() 


Thread(target=loop_FORBTC).start() 
symbol_g_UNFIBTC = 'UNFIBTC' 
price_bids_g_UNFIBTC = Decimal('0.0') 
qty_bids_g_UNFIBTC = Decimal('0.0') 
price_asks_g_UNFIBTC = Decimal('0.0') 
qty_asks_g_UNFIBTC = Decimal('0.0') 
stepSize_g_UNFIBTC = Decimal('0.1') 


def on_message_UNFIBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UNFIBTC = 'UNFIBTC' 
	price_bids_c_l_UNFIBTC = data['b'] 
	qty_bids_c_l_UNFIBTC = data['B'] 
	price_asks_c_l_UNFIBTC = data['a'] 
	qty_asks_c_l_UNFIBTC = data['A'] 

	global symbol_g_UNFIBTC 
	global price_bids_g_UNFIBTC 
	global qty_bids_g_UNFIBTC 
	global price_asks_g_UNFIBTC 
	global qty_asks_g_UNFIBTC 

	symbol_g_UNFIBTC = symbol_c_l_UNFIBTC 
	price_bids_g_UNFIBTC = Decimal(price_bids_c_l_UNFIBTC) 
	qty_bids_g_UNFIBTC = Decimal(qty_bids_c_l_UNFIBTC) 
	price_asks_g_UNFIBTC = Decimal(price_asks_c_l_UNFIBTC) 
	qty_asks_g_UNFIBTC = Decimal(qty_asks_c_l_UNFIBTC) 


def loop_UNFIBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/unfibtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UNFIBTC) 
	ws.run_forever() 


Thread(target=loop_UNFIBTC).start() 
symbol_g_ROSEBTC = 'ROSEBTC' 
price_bids_g_ROSEBTC = Decimal('0.0') 
qty_bids_g_ROSEBTC = Decimal('0.0') 
price_asks_g_ROSEBTC = Decimal('0.0') 
qty_asks_g_ROSEBTC = Decimal('0.0') 
stepSize_g_ROSEBTC = Decimal('1.0') 


def on_message_ROSEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ROSEBTC = 'ROSEBTC' 
	price_bids_c_l_ROSEBTC = data['b'] 
	qty_bids_c_l_ROSEBTC = data['B'] 
	price_asks_c_l_ROSEBTC = data['a'] 
	qty_asks_c_l_ROSEBTC = data['A'] 

	global symbol_g_ROSEBTC 
	global price_bids_g_ROSEBTC 
	global qty_bids_g_ROSEBTC 
	global price_asks_g_ROSEBTC 
	global qty_asks_g_ROSEBTC 

	symbol_g_ROSEBTC = symbol_c_l_ROSEBTC 
	price_bids_g_ROSEBTC = Decimal(price_bids_c_l_ROSEBTC) 
	qty_bids_g_ROSEBTC = Decimal(qty_bids_c_l_ROSEBTC) 
	price_asks_g_ROSEBTC = Decimal(price_asks_c_l_ROSEBTC) 
	qty_asks_g_ROSEBTC = Decimal(qty_asks_c_l_ROSEBTC) 


def loop_ROSEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rosebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ROSEBTC) 
	ws.run_forever() 


Thread(target=loop_ROSEBTC).start() 
symbol_g_SKLBTC = 'SKLBTC' 
price_bids_g_SKLBTC = Decimal('0.0') 
qty_bids_g_SKLBTC = Decimal('0.0') 
price_asks_g_SKLBTC = Decimal('0.0') 
qty_asks_g_SKLBTC = Decimal('0.0') 
stepSize_g_SKLBTC = Decimal('1.0') 


def on_message_SKLBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SKLBTC = 'SKLBTC' 
	price_bids_c_l_SKLBTC = data['b'] 
	qty_bids_c_l_SKLBTC = data['B'] 
	price_asks_c_l_SKLBTC = data['a'] 
	qty_asks_c_l_SKLBTC = data['A'] 

	global symbol_g_SKLBTC 
	global price_bids_g_SKLBTC 
	global qty_bids_g_SKLBTC 
	global price_asks_g_SKLBTC 
	global qty_asks_g_SKLBTC 

	symbol_g_SKLBTC = symbol_c_l_SKLBTC 
	price_bids_g_SKLBTC = Decimal(price_bids_c_l_SKLBTC) 
	qty_bids_g_SKLBTC = Decimal(qty_bids_c_l_SKLBTC) 
	price_asks_g_SKLBTC = Decimal(price_asks_c_l_SKLBTC) 
	qty_asks_g_SKLBTC = Decimal(qty_asks_c_l_SKLBTC) 


def loop_SKLBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sklbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SKLBTC) 
	ws.run_forever() 


Thread(target=loop_SKLBTC).start() 
symbol_g_GRTBTC = 'GRTBTC' 
price_bids_g_GRTBTC = Decimal('0.0') 
qty_bids_g_GRTBTC = Decimal('0.0') 
price_asks_g_GRTBTC = Decimal('0.0') 
qty_asks_g_GRTBTC = Decimal('0.0') 
stepSize_g_GRTBTC = Decimal('1.0') 


def on_message_GRTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GRTBTC = 'GRTBTC' 
	price_bids_c_l_GRTBTC = data['b'] 
	qty_bids_c_l_GRTBTC = data['B'] 
	price_asks_c_l_GRTBTC = data['a'] 
	qty_asks_c_l_GRTBTC = data['A'] 

	global symbol_g_GRTBTC 
	global price_bids_g_GRTBTC 
	global qty_bids_g_GRTBTC 
	global price_asks_g_GRTBTC 
	global qty_asks_g_GRTBTC 

	symbol_g_GRTBTC = symbol_c_l_GRTBTC 
	price_bids_g_GRTBTC = Decimal(price_bids_c_l_GRTBTC) 
	qty_bids_g_GRTBTC = Decimal(qty_bids_c_l_GRTBTC) 
	price_asks_g_GRTBTC = Decimal(price_asks_c_l_GRTBTC) 
	qty_asks_g_GRTBTC = Decimal(qty_asks_c_l_GRTBTC) 


def loop_GRTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/grtbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GRTBTC) 
	ws.run_forever() 


Thread(target=loop_GRTBTC).start() 
symbol_g_JUVBTC = 'JUVBTC' 
price_bids_g_JUVBTC = Decimal('0.0') 
qty_bids_g_JUVBTC = Decimal('0.0') 
price_asks_g_JUVBTC = Decimal('0.0') 
qty_asks_g_JUVBTC = Decimal('0.0') 
stepSize_g_JUVBTC = Decimal('0.01') 


def on_message_JUVBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JUVBTC = 'JUVBTC' 
	price_bids_c_l_JUVBTC = data['b'] 
	qty_bids_c_l_JUVBTC = data['B'] 
	price_asks_c_l_JUVBTC = data['a'] 
	qty_asks_c_l_JUVBTC = data['A'] 

	global symbol_g_JUVBTC 
	global price_bids_g_JUVBTC 
	global qty_bids_g_JUVBTC 
	global price_asks_g_JUVBTC 
	global qty_asks_g_JUVBTC 

	symbol_g_JUVBTC = symbol_c_l_JUVBTC 
	price_bids_g_JUVBTC = Decimal(price_bids_c_l_JUVBTC) 
	qty_bids_g_JUVBTC = Decimal(qty_bids_c_l_JUVBTC) 
	price_asks_g_JUVBTC = Decimal(price_asks_c_l_JUVBTC) 
	qty_asks_g_JUVBTC = Decimal(qty_asks_c_l_JUVBTC) 


def loop_JUVBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/juvbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JUVBTC) 
	ws.run_forever() 


Thread(target=loop_JUVBTC).start() 
symbol_g_PSGBTC = 'PSGBTC' 
price_bids_g_PSGBTC = Decimal('0.0') 
qty_bids_g_PSGBTC = Decimal('0.0') 
price_asks_g_PSGBTC = Decimal('0.0') 
qty_asks_g_PSGBTC = Decimal('0.0') 
stepSize_g_PSGBTC = Decimal('0.01') 


def on_message_PSGBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PSGBTC = 'PSGBTC' 
	price_bids_c_l_PSGBTC = data['b'] 
	qty_bids_c_l_PSGBTC = data['B'] 
	price_asks_c_l_PSGBTC = data['a'] 
	qty_asks_c_l_PSGBTC = data['A'] 

	global symbol_g_PSGBTC 
	global price_bids_g_PSGBTC 
	global qty_bids_g_PSGBTC 
	global price_asks_g_PSGBTC 
	global qty_asks_g_PSGBTC 

	symbol_g_PSGBTC = symbol_c_l_PSGBTC 
	price_bids_g_PSGBTC = Decimal(price_bids_c_l_PSGBTC) 
	qty_bids_g_PSGBTC = Decimal(qty_bids_c_l_PSGBTC) 
	price_asks_g_PSGBTC = Decimal(price_asks_c_l_PSGBTC) 
	qty_asks_g_PSGBTC = Decimal(qty_asks_c_l_PSGBTC) 


def loop_PSGBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/psgbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PSGBTC) 
	ws.run_forever() 


Thread(target=loop_PSGBTC).start() 
symbol_g_1INCHBTC = '1INCHBTC' 
price_bids_g_1INCHBTC = Decimal('0.0') 
qty_bids_g_1INCHBTC = Decimal('0.0') 
price_asks_g_1INCHBTC = Decimal('0.0') 
qty_asks_g_1INCHBTC = Decimal('0.0') 
stepSize_g_1INCHBTC = Decimal('0.1') 


def on_message_1INCHBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_1INCHBTC = '1INCHBTC' 
	price_bids_c_l_1INCHBTC = data['b'] 
	qty_bids_c_l_1INCHBTC = data['B'] 
	price_asks_c_l_1INCHBTC = data['a'] 
	qty_asks_c_l_1INCHBTC = data['A'] 

	global symbol_g_1INCHBTC 
	global price_bids_g_1INCHBTC 
	global qty_bids_g_1INCHBTC 
	global price_asks_g_1INCHBTC 
	global qty_asks_g_1INCHBTC 

	symbol_g_1INCHBTC = symbol_c_l_1INCHBTC 
	price_bids_g_1INCHBTC = Decimal(price_bids_c_l_1INCHBTC) 
	qty_bids_g_1INCHBTC = Decimal(qty_bids_c_l_1INCHBTC) 
	price_asks_g_1INCHBTC = Decimal(price_asks_c_l_1INCHBTC) 
	qty_asks_g_1INCHBTC = Decimal(qty_asks_c_l_1INCHBTC) 


def loop_1INCHBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/1inchbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_1INCHBTC) 
	ws.run_forever() 


Thread(target=loop_1INCHBTC).start() 
symbol_g_OGBTC = 'OGBTC' 
price_bids_g_OGBTC = Decimal('0.0') 
qty_bids_g_OGBTC = Decimal('0.0') 
price_asks_g_OGBTC = Decimal('0.0') 
qty_asks_g_OGBTC = Decimal('0.0') 
stepSize_g_OGBTC = Decimal('0.1') 


def on_message_OGBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OGBTC = 'OGBTC' 
	price_bids_c_l_OGBTC = data['b'] 
	qty_bids_c_l_OGBTC = data['B'] 
	price_asks_c_l_OGBTC = data['a'] 
	qty_asks_c_l_OGBTC = data['A'] 

	global symbol_g_OGBTC 
	global price_bids_g_OGBTC 
	global qty_bids_g_OGBTC 
	global price_asks_g_OGBTC 
	global qty_asks_g_OGBTC 

	symbol_g_OGBTC = symbol_c_l_OGBTC 
	price_bids_g_OGBTC = Decimal(price_bids_c_l_OGBTC) 
	qty_bids_g_OGBTC = Decimal(qty_bids_c_l_OGBTC) 
	price_asks_g_OGBTC = Decimal(price_asks_c_l_OGBTC) 
	qty_asks_g_OGBTC = Decimal(qty_asks_c_l_OGBTC) 


def loop_OGBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ogbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OGBTC) 
	ws.run_forever() 


Thread(target=loop_OGBTC).start() 
symbol_g_ATMBTC = 'ATMBTC' 
price_bids_g_ATMBTC = Decimal('0.0') 
qty_bids_g_ATMBTC = Decimal('0.0') 
price_asks_g_ATMBTC = Decimal('0.0') 
qty_asks_g_ATMBTC = Decimal('0.0') 
stepSize_g_ATMBTC = Decimal('0.01') 


def on_message_ATMBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATMBTC = 'ATMBTC' 
	price_bids_c_l_ATMBTC = data['b'] 
	qty_bids_c_l_ATMBTC = data['B'] 
	price_asks_c_l_ATMBTC = data['a'] 
	qty_asks_c_l_ATMBTC = data['A'] 

	global symbol_g_ATMBTC 
	global price_bids_g_ATMBTC 
	global qty_bids_g_ATMBTC 
	global price_asks_g_ATMBTC 
	global qty_asks_g_ATMBTC 

	symbol_g_ATMBTC = symbol_c_l_ATMBTC 
	price_bids_g_ATMBTC = Decimal(price_bids_c_l_ATMBTC) 
	qty_bids_g_ATMBTC = Decimal(qty_bids_c_l_ATMBTC) 
	price_asks_g_ATMBTC = Decimal(price_asks_c_l_ATMBTC) 
	qty_asks_g_ATMBTC = Decimal(qty_asks_c_l_ATMBTC) 


def loop_ATMBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atmbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATMBTC) 
	ws.run_forever() 


Thread(target=loop_ATMBTC).start() 
symbol_g_ASRBTC = 'ASRBTC' 
price_bids_g_ASRBTC = Decimal('0.0') 
qty_bids_g_ASRBTC = Decimal('0.0') 
price_asks_g_ASRBTC = Decimal('0.0') 
qty_asks_g_ASRBTC = Decimal('0.0') 
stepSize_g_ASRBTC = Decimal('0.1') 


def on_message_ASRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ASRBTC = 'ASRBTC' 
	price_bids_c_l_ASRBTC = data['b'] 
	qty_bids_c_l_ASRBTC = data['B'] 
	price_asks_c_l_ASRBTC = data['a'] 
	qty_asks_c_l_ASRBTC = data['A'] 

	global symbol_g_ASRBTC 
	global price_bids_g_ASRBTC 
	global qty_bids_g_ASRBTC 
	global price_asks_g_ASRBTC 
	global qty_asks_g_ASRBTC 

	symbol_g_ASRBTC = symbol_c_l_ASRBTC 
	price_bids_g_ASRBTC = Decimal(price_bids_c_l_ASRBTC) 
	qty_bids_g_ASRBTC = Decimal(qty_bids_c_l_ASRBTC) 
	price_asks_g_ASRBTC = Decimal(price_asks_c_l_ASRBTC) 
	qty_asks_g_ASRBTC = Decimal(qty_asks_c_l_ASRBTC) 


def loop_ASRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/asrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ASRBTC) 
	ws.run_forever() 


Thread(target=loop_ASRBTC).start() 
symbol_g_CELOBTC = 'CELOBTC' 
price_bids_g_CELOBTC = Decimal('0.0') 
qty_bids_g_CELOBTC = Decimal('0.0') 
price_asks_g_CELOBTC = Decimal('0.0') 
qty_asks_g_CELOBTC = Decimal('0.0') 
stepSize_g_CELOBTC = Decimal('0.1') 


def on_message_CELOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CELOBTC = 'CELOBTC' 
	price_bids_c_l_CELOBTC = data['b'] 
	qty_bids_c_l_CELOBTC = data['B'] 
	price_asks_c_l_CELOBTC = data['a'] 
	qty_asks_c_l_CELOBTC = data['A'] 

	global symbol_g_CELOBTC 
	global price_bids_g_CELOBTC 
	global qty_bids_g_CELOBTC 
	global price_asks_g_CELOBTC 
	global qty_asks_g_CELOBTC 

	symbol_g_CELOBTC = symbol_c_l_CELOBTC 
	price_bids_g_CELOBTC = Decimal(price_bids_c_l_CELOBTC) 
	qty_bids_g_CELOBTC = Decimal(qty_bids_c_l_CELOBTC) 
	price_asks_g_CELOBTC = Decimal(price_asks_c_l_CELOBTC) 
	qty_asks_g_CELOBTC = Decimal(qty_asks_c_l_CELOBTC) 


def loop_CELOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/celobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CELOBTC) 
	ws.run_forever() 


Thread(target=loop_CELOBTC).start() 
symbol_g_RIFBTC = 'RIFBTC' 
price_bids_g_RIFBTC = Decimal('0.0') 
qty_bids_g_RIFBTC = Decimal('0.0') 
price_asks_g_RIFBTC = Decimal('0.0') 
qty_asks_g_RIFBTC = Decimal('0.0') 
stepSize_g_RIFBTC = Decimal('1.0') 


def on_message_RIFBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RIFBTC = 'RIFBTC' 
	price_bids_c_l_RIFBTC = data['b'] 
	qty_bids_c_l_RIFBTC = data['B'] 
	price_asks_c_l_RIFBTC = data['a'] 
	qty_asks_c_l_RIFBTC = data['A'] 

	global symbol_g_RIFBTC 
	global price_bids_g_RIFBTC 
	global qty_bids_g_RIFBTC 
	global price_asks_g_RIFBTC 
	global qty_asks_g_RIFBTC 

	symbol_g_RIFBTC = symbol_c_l_RIFBTC 
	price_bids_g_RIFBTC = Decimal(price_bids_c_l_RIFBTC) 
	qty_bids_g_RIFBTC = Decimal(qty_bids_c_l_RIFBTC) 
	price_asks_g_RIFBTC = Decimal(price_asks_c_l_RIFBTC) 
	qty_asks_g_RIFBTC = Decimal(qty_asks_c_l_RIFBTC) 


def loop_RIFBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rifbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RIFBTC) 
	ws.run_forever() 


Thread(target=loop_RIFBTC).start() 
symbol_g_TRUBTC = 'TRUBTC' 
price_bids_g_TRUBTC = Decimal('0.0') 
qty_bids_g_TRUBTC = Decimal('0.0') 
price_asks_g_TRUBTC = Decimal('0.0') 
qty_asks_g_TRUBTC = Decimal('0.0') 
stepSize_g_TRUBTC = Decimal('1.0') 


def on_message_TRUBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRUBTC = 'TRUBTC' 
	price_bids_c_l_TRUBTC = data['b'] 
	qty_bids_c_l_TRUBTC = data['B'] 
	price_asks_c_l_TRUBTC = data['a'] 
	qty_asks_c_l_TRUBTC = data['A'] 

	global symbol_g_TRUBTC 
	global price_bids_g_TRUBTC 
	global qty_bids_g_TRUBTC 
	global price_asks_g_TRUBTC 
	global qty_asks_g_TRUBTC 

	symbol_g_TRUBTC = symbol_c_l_TRUBTC 
	price_bids_g_TRUBTC = Decimal(price_bids_c_l_TRUBTC) 
	qty_bids_g_TRUBTC = Decimal(qty_bids_c_l_TRUBTC) 
	price_asks_g_TRUBTC = Decimal(price_asks_c_l_TRUBTC) 
	qty_asks_g_TRUBTC = Decimal(qty_asks_c_l_TRUBTC) 


def loop_TRUBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/trubtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRUBTC) 
	ws.run_forever() 


Thread(target=loop_TRUBTC).start() 
symbol_g_TWTBTC = 'TWTBTC' 
price_bids_g_TWTBTC = Decimal('0.0') 
qty_bids_g_TWTBTC = Decimal('0.0') 
price_asks_g_TWTBTC = Decimal('0.0') 
qty_asks_g_TWTBTC = Decimal('0.0') 
stepSize_g_TWTBTC = Decimal('1.0') 


def on_message_TWTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TWTBTC = 'TWTBTC' 
	price_bids_c_l_TWTBTC = data['b'] 
	qty_bids_c_l_TWTBTC = data['B'] 
	price_asks_c_l_TWTBTC = data['a'] 
	qty_asks_c_l_TWTBTC = data['A'] 

	global symbol_g_TWTBTC 
	global price_bids_g_TWTBTC 
	global qty_bids_g_TWTBTC 
	global price_asks_g_TWTBTC 
	global qty_asks_g_TWTBTC 

	symbol_g_TWTBTC = symbol_c_l_TWTBTC 
	price_bids_g_TWTBTC = Decimal(price_bids_c_l_TWTBTC) 
	qty_bids_g_TWTBTC = Decimal(qty_bids_c_l_TWTBTC) 
	price_asks_g_TWTBTC = Decimal(price_asks_c_l_TWTBTC) 
	qty_asks_g_TWTBTC = Decimal(qty_asks_c_l_TWTBTC) 


def loop_TWTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/twtbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TWTBTC) 
	ws.run_forever() 


Thread(target=loop_TWTBTC).start() 
symbol_g_FIROBTC = 'FIROBTC' 
price_bids_g_FIROBTC = Decimal('0.0') 
qty_bids_g_FIROBTC = Decimal('0.0') 
price_asks_g_FIROBTC = Decimal('0.0') 
qty_asks_g_FIROBTC = Decimal('0.0') 
stepSize_g_FIROBTC = Decimal('0.1') 


def on_message_FIROBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FIROBTC = 'FIROBTC' 
	price_bids_c_l_FIROBTC = data['b'] 
	qty_bids_c_l_FIROBTC = data['B'] 
	price_asks_c_l_FIROBTC = data['a'] 
	qty_asks_c_l_FIROBTC = data['A'] 

	global symbol_g_FIROBTC 
	global price_bids_g_FIROBTC 
	global qty_bids_g_FIROBTC 
	global price_asks_g_FIROBTC 
	global qty_asks_g_FIROBTC 

	symbol_g_FIROBTC = symbol_c_l_FIROBTC 
	price_bids_g_FIROBTC = Decimal(price_bids_c_l_FIROBTC) 
	qty_bids_g_FIROBTC = Decimal(qty_bids_c_l_FIROBTC) 
	price_asks_g_FIROBTC = Decimal(price_asks_c_l_FIROBTC) 
	qty_asks_g_FIROBTC = Decimal(qty_asks_c_l_FIROBTC) 


def loop_FIROBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/firobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FIROBTC) 
	ws.run_forever() 


Thread(target=loop_FIROBTC).start() 
symbol_g_LITBTC = 'LITBTC' 
price_bids_g_LITBTC = Decimal('0.0') 
qty_bids_g_LITBTC = Decimal('0.0') 
price_asks_g_LITBTC = Decimal('0.0') 
qty_asks_g_LITBTC = Decimal('0.0') 
stepSize_g_LITBTC = Decimal('0.1') 


def on_message_LITBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LITBTC = 'LITBTC' 
	price_bids_c_l_LITBTC = data['b'] 
	qty_bids_c_l_LITBTC = data['B'] 
	price_asks_c_l_LITBTC = data['a'] 
	qty_asks_c_l_LITBTC = data['A'] 

	global symbol_g_LITBTC 
	global price_bids_g_LITBTC 
	global qty_bids_g_LITBTC 
	global price_asks_g_LITBTC 
	global qty_asks_g_LITBTC 

	symbol_g_LITBTC = symbol_c_l_LITBTC 
	price_bids_g_LITBTC = Decimal(price_bids_c_l_LITBTC) 
	qty_bids_g_LITBTC = Decimal(qty_bids_c_l_LITBTC) 
	price_asks_g_LITBTC = Decimal(price_asks_c_l_LITBTC) 
	qty_asks_g_LITBTC = Decimal(qty_asks_c_l_LITBTC) 


def loop_LITBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/litbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LITBTC) 
	ws.run_forever() 


Thread(target=loop_LITBTC).start() 
symbol_g_SFPBTC = 'SFPBTC' 
price_bids_g_SFPBTC = Decimal('0.0') 
qty_bids_g_SFPBTC = Decimal('0.0') 
price_asks_g_SFPBTC = Decimal('0.0') 
qty_asks_g_SFPBTC = Decimal('0.0') 
stepSize_g_SFPBTC = Decimal('1.0') 


def on_message_SFPBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SFPBTC = 'SFPBTC' 
	price_bids_c_l_SFPBTC = data['b'] 
	qty_bids_c_l_SFPBTC = data['B'] 
	price_asks_c_l_SFPBTC = data['a'] 
	qty_asks_c_l_SFPBTC = data['A'] 

	global symbol_g_SFPBTC 
	global price_bids_g_SFPBTC 
	global qty_bids_g_SFPBTC 
	global price_asks_g_SFPBTC 
	global qty_asks_g_SFPBTC 

	symbol_g_SFPBTC = symbol_c_l_SFPBTC 
	price_bids_g_SFPBTC = Decimal(price_bids_c_l_SFPBTC) 
	qty_bids_g_SFPBTC = Decimal(qty_bids_c_l_SFPBTC) 
	price_asks_g_SFPBTC = Decimal(price_asks_c_l_SFPBTC) 
	qty_asks_g_SFPBTC = Decimal(qty_asks_c_l_SFPBTC) 


def loop_SFPBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sfpbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SFPBTC) 
	ws.run_forever() 


Thread(target=loop_SFPBTC).start() 
symbol_g_FXSBTC = 'FXSBTC' 
price_bids_g_FXSBTC = Decimal('0.0') 
qty_bids_g_FXSBTC = Decimal('0.0') 
price_asks_g_FXSBTC = Decimal('0.0') 
qty_asks_g_FXSBTC = Decimal('0.0') 
stepSize_g_FXSBTC = Decimal('0.1') 


def on_message_FXSBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FXSBTC = 'FXSBTC' 
	price_bids_c_l_FXSBTC = data['b'] 
	qty_bids_c_l_FXSBTC = data['B'] 
	price_asks_c_l_FXSBTC = data['a'] 
	qty_asks_c_l_FXSBTC = data['A'] 

	global symbol_g_FXSBTC 
	global price_bids_g_FXSBTC 
	global qty_bids_g_FXSBTC 
	global price_asks_g_FXSBTC 
	global qty_asks_g_FXSBTC 

	symbol_g_FXSBTC = symbol_c_l_FXSBTC 
	price_bids_g_FXSBTC = Decimal(price_bids_c_l_FXSBTC) 
	qty_bids_g_FXSBTC = Decimal(qty_bids_c_l_FXSBTC) 
	price_asks_g_FXSBTC = Decimal(price_asks_c_l_FXSBTC) 
	qty_asks_g_FXSBTC = Decimal(qty_asks_c_l_FXSBTC) 


def loop_FXSBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fxsbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FXSBTC) 
	ws.run_forever() 


Thread(target=loop_FXSBTC).start() 
symbol_g_DODOBTC = 'DODOBTC' 
price_bids_g_DODOBTC = Decimal('0.0') 
qty_bids_g_DODOBTC = Decimal('0.0') 
price_asks_g_DODOBTC = Decimal('0.0') 
qty_asks_g_DODOBTC = Decimal('0.0') 
stepSize_g_DODOBTC = Decimal('0.1') 


def on_message_DODOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DODOBTC = 'DODOBTC' 
	price_bids_c_l_DODOBTC = data['b'] 
	qty_bids_c_l_DODOBTC = data['B'] 
	price_asks_c_l_DODOBTC = data['a'] 
	qty_asks_c_l_DODOBTC = data['A'] 

	global symbol_g_DODOBTC 
	global price_bids_g_DODOBTC 
	global qty_bids_g_DODOBTC 
	global price_asks_g_DODOBTC 
	global qty_asks_g_DODOBTC 

	symbol_g_DODOBTC = symbol_c_l_DODOBTC 
	price_bids_g_DODOBTC = Decimal(price_bids_c_l_DODOBTC) 
	qty_bids_g_DODOBTC = Decimal(qty_bids_c_l_DODOBTC) 
	price_asks_g_DODOBTC = Decimal(price_asks_c_l_DODOBTC) 
	qty_asks_g_DODOBTC = Decimal(qty_asks_c_l_DODOBTC) 


def loop_DODOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dodobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DODOBTC) 
	ws.run_forever() 


Thread(target=loop_DODOBTC).start() 
symbol_g_FRONTBTC = 'FRONTBTC' 
price_bids_g_FRONTBTC = Decimal('0.0') 
qty_bids_g_FRONTBTC = Decimal('0.0') 
price_asks_g_FRONTBTC = Decimal('0.0') 
qty_asks_g_FRONTBTC = Decimal('0.0') 
stepSize_g_FRONTBTC = Decimal('1.0') 


def on_message_FRONTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FRONTBTC = 'FRONTBTC' 
	price_bids_c_l_FRONTBTC = data['b'] 
	qty_bids_c_l_FRONTBTC = data['B'] 
	price_asks_c_l_FRONTBTC = data['a'] 
	qty_asks_c_l_FRONTBTC = data['A'] 

	global symbol_g_FRONTBTC 
	global price_bids_g_FRONTBTC 
	global qty_bids_g_FRONTBTC 
	global price_asks_g_FRONTBTC 
	global qty_asks_g_FRONTBTC 

	symbol_g_FRONTBTC = symbol_c_l_FRONTBTC 
	price_bids_g_FRONTBTC = Decimal(price_bids_c_l_FRONTBTC) 
	qty_bids_g_FRONTBTC = Decimal(qty_bids_c_l_FRONTBTC) 
	price_asks_g_FRONTBTC = Decimal(price_asks_c_l_FRONTBTC) 
	qty_asks_g_FRONTBTC = Decimal(qty_asks_c_l_FRONTBTC) 


def loop_FRONTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/frontbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FRONTBTC) 
	ws.run_forever() 


Thread(target=loop_FRONTBTC).start() 
symbol_g_CAKEBTC = 'CAKEBTC' 
price_bids_g_CAKEBTC = Decimal('0.0') 
qty_bids_g_CAKEBTC = Decimal('0.0') 
price_asks_g_CAKEBTC = Decimal('0.0') 
qty_asks_g_CAKEBTC = Decimal('0.0') 
stepSize_g_CAKEBTC = Decimal('0.01') 


def on_message_CAKEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CAKEBTC = 'CAKEBTC' 
	price_bids_c_l_CAKEBTC = data['b'] 
	qty_bids_c_l_CAKEBTC = data['B'] 
	price_asks_c_l_CAKEBTC = data['a'] 
	qty_asks_c_l_CAKEBTC = data['A'] 

	global symbol_g_CAKEBTC 
	global price_bids_g_CAKEBTC 
	global qty_bids_g_CAKEBTC 
	global price_asks_g_CAKEBTC 
	global qty_asks_g_CAKEBTC 

	symbol_g_CAKEBTC = symbol_c_l_CAKEBTC 
	price_bids_g_CAKEBTC = Decimal(price_bids_c_l_CAKEBTC) 
	qty_bids_g_CAKEBTC = Decimal(qty_bids_c_l_CAKEBTC) 
	price_asks_g_CAKEBTC = Decimal(price_asks_c_l_CAKEBTC) 
	qty_asks_g_CAKEBTC = Decimal(qty_asks_c_l_CAKEBTC) 


def loop_CAKEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cakebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CAKEBTC) 
	ws.run_forever() 


Thread(target=loop_CAKEBTC).start() 
symbol_g_ACMBTC = 'ACMBTC' 
price_bids_g_ACMBTC = Decimal('0.0') 
qty_bids_g_ACMBTC = Decimal('0.0') 
price_asks_g_ACMBTC = Decimal('0.0') 
qty_asks_g_ACMBTC = Decimal('0.0') 
stepSize_g_ACMBTC = Decimal('0.1') 


def on_message_ACMBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ACMBTC = 'ACMBTC' 
	price_bids_c_l_ACMBTC = data['b'] 
	qty_bids_c_l_ACMBTC = data['B'] 
	price_asks_c_l_ACMBTC = data['a'] 
	qty_asks_c_l_ACMBTC = data['A'] 

	global symbol_g_ACMBTC 
	global price_bids_g_ACMBTC 
	global qty_bids_g_ACMBTC 
	global price_asks_g_ACMBTC 
	global qty_asks_g_ACMBTC 

	symbol_g_ACMBTC = symbol_c_l_ACMBTC 
	price_bids_g_ACMBTC = Decimal(price_bids_c_l_ACMBTC) 
	qty_bids_g_ACMBTC = Decimal(qty_bids_c_l_ACMBTC) 
	price_asks_g_ACMBTC = Decimal(price_asks_c_l_ACMBTC) 
	qty_asks_g_ACMBTC = Decimal(qty_asks_c_l_ACMBTC) 


def loop_ACMBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/acmbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ACMBTC) 
	ws.run_forever() 


Thread(target=loop_ACMBTC).start() 
symbol_g_AUCTIONBTC = 'AUCTIONBTC' 
price_bids_g_AUCTIONBTC = Decimal('0.0') 
qty_bids_g_AUCTIONBTC = Decimal('0.0') 
price_asks_g_AUCTIONBTC = Decimal('0.0') 
qty_asks_g_AUCTIONBTC = Decimal('0.0') 
stepSize_g_AUCTIONBTC = Decimal('0.01') 


def on_message_AUCTIONBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AUCTIONBTC = 'AUCTIONBTC' 
	price_bids_c_l_AUCTIONBTC = data['b'] 
	qty_bids_c_l_AUCTIONBTC = data['B'] 
	price_asks_c_l_AUCTIONBTC = data['a'] 
	qty_asks_c_l_AUCTIONBTC = data['A'] 

	global symbol_g_AUCTIONBTC 
	global price_bids_g_AUCTIONBTC 
	global qty_bids_g_AUCTIONBTC 
	global price_asks_g_AUCTIONBTC 
	global qty_asks_g_AUCTIONBTC 

	symbol_g_AUCTIONBTC = symbol_c_l_AUCTIONBTC 
	price_bids_g_AUCTIONBTC = Decimal(price_bids_c_l_AUCTIONBTC) 
	qty_bids_g_AUCTIONBTC = Decimal(qty_bids_c_l_AUCTIONBTC) 
	price_asks_g_AUCTIONBTC = Decimal(price_asks_c_l_AUCTIONBTC) 
	qty_asks_g_AUCTIONBTC = Decimal(qty_asks_c_l_AUCTIONBTC) 


def loop_AUCTIONBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/auctionbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AUCTIONBTC) 
	ws.run_forever() 


Thread(target=loop_AUCTIONBTC).start() 
symbol_g_PHABTC = 'PHABTC' 
price_bids_g_PHABTC = Decimal('0.0') 
qty_bids_g_PHABTC = Decimal('0.0') 
price_asks_g_PHABTC = Decimal('0.0') 
qty_asks_g_PHABTC = Decimal('0.0') 
stepSize_g_PHABTC = Decimal('1.0') 


def on_message_PHABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PHABTC = 'PHABTC' 
	price_bids_c_l_PHABTC = data['b'] 
	qty_bids_c_l_PHABTC = data['B'] 
	price_asks_c_l_PHABTC = data['a'] 
	qty_asks_c_l_PHABTC = data['A'] 

	global symbol_g_PHABTC 
	global price_bids_g_PHABTC 
	global qty_bids_g_PHABTC 
	global price_asks_g_PHABTC 
	global qty_asks_g_PHABTC 

	symbol_g_PHABTC = symbol_c_l_PHABTC 
	price_bids_g_PHABTC = Decimal(price_bids_c_l_PHABTC) 
	qty_bids_g_PHABTC = Decimal(qty_bids_c_l_PHABTC) 
	price_asks_g_PHABTC = Decimal(price_asks_c_l_PHABTC) 
	qty_asks_g_PHABTC = Decimal(qty_asks_c_l_PHABTC) 


def loop_PHABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/phabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PHABTC) 
	ws.run_forever() 


Thread(target=loop_PHABTC).start() 
symbol_g_TVKBTC = 'TVKBTC' 
price_bids_g_TVKBTC = Decimal('0.0') 
qty_bids_g_TVKBTC = Decimal('0.0') 
price_asks_g_TVKBTC = Decimal('0.0') 
qty_asks_g_TVKBTC = Decimal('0.0') 
stepSize_g_TVKBTC = Decimal('1.0') 


def on_message_TVKBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TVKBTC = 'TVKBTC' 
	price_bids_c_l_TVKBTC = data['b'] 
	qty_bids_c_l_TVKBTC = data['B'] 
	price_asks_c_l_TVKBTC = data['a'] 
	qty_asks_c_l_TVKBTC = data['A'] 

	global symbol_g_TVKBTC 
	global price_bids_g_TVKBTC 
	global qty_bids_g_TVKBTC 
	global price_asks_g_TVKBTC 
	global qty_asks_g_TVKBTC 

	symbol_g_TVKBTC = symbol_c_l_TVKBTC 
	price_bids_g_TVKBTC = Decimal(price_bids_c_l_TVKBTC) 
	qty_bids_g_TVKBTC = Decimal(qty_bids_c_l_TVKBTC) 
	price_asks_g_TVKBTC = Decimal(price_asks_c_l_TVKBTC) 
	qty_asks_g_TVKBTC = Decimal(qty_asks_c_l_TVKBTC) 


def loop_TVKBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tvkbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TVKBTC) 
	ws.run_forever() 


Thread(target=loop_TVKBTC).start() 
symbol_g_BADGERBTC = 'BADGERBTC' 
price_bids_g_BADGERBTC = Decimal('0.0') 
qty_bids_g_BADGERBTC = Decimal('0.0') 
price_asks_g_BADGERBTC = Decimal('0.0') 
qty_asks_g_BADGERBTC = Decimal('0.0') 
stepSize_g_BADGERBTC = Decimal('0.01') 


def on_message_BADGERBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BADGERBTC = 'BADGERBTC' 
	price_bids_c_l_BADGERBTC = data['b'] 
	qty_bids_c_l_BADGERBTC = data['B'] 
	price_asks_c_l_BADGERBTC = data['a'] 
	qty_asks_c_l_BADGERBTC = data['A'] 

	global symbol_g_BADGERBTC 
	global price_bids_g_BADGERBTC 
	global qty_bids_g_BADGERBTC 
	global price_asks_g_BADGERBTC 
	global qty_asks_g_BADGERBTC 

	symbol_g_BADGERBTC = symbol_c_l_BADGERBTC 
	price_bids_g_BADGERBTC = Decimal(price_bids_c_l_BADGERBTC) 
	qty_bids_g_BADGERBTC = Decimal(qty_bids_c_l_BADGERBTC) 
	price_asks_g_BADGERBTC = Decimal(price_asks_c_l_BADGERBTC) 
	qty_asks_g_BADGERBTC = Decimal(qty_asks_c_l_BADGERBTC) 


def loop_BADGERBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/badgerbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BADGERBTC) 
	ws.run_forever() 


Thread(target=loop_BADGERBTC).start() 
symbol_g_FISBTC = 'FISBTC' 
price_bids_g_FISBTC = Decimal('0.0') 
qty_bids_g_FISBTC = Decimal('0.0') 
price_asks_g_FISBTC = Decimal('0.0') 
qty_asks_g_FISBTC = Decimal('0.0') 
stepSize_g_FISBTC = Decimal('1.0') 


def on_message_FISBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FISBTC = 'FISBTC' 
	price_bids_c_l_FISBTC = data['b'] 
	qty_bids_c_l_FISBTC = data['B'] 
	price_asks_c_l_FISBTC = data['a'] 
	qty_asks_c_l_FISBTC = data['A'] 

	global symbol_g_FISBTC 
	global price_bids_g_FISBTC 
	global qty_bids_g_FISBTC 
	global price_asks_g_FISBTC 
	global qty_asks_g_FISBTC 

	symbol_g_FISBTC = symbol_c_l_FISBTC 
	price_bids_g_FISBTC = Decimal(price_bids_c_l_FISBTC) 
	qty_bids_g_FISBTC = Decimal(qty_bids_c_l_FISBTC) 
	price_asks_g_FISBTC = Decimal(price_asks_c_l_FISBTC) 
	qty_asks_g_FISBTC = Decimal(qty_asks_c_l_FISBTC) 


def loop_FISBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fisbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FISBTC) 
	ws.run_forever() 


Thread(target=loop_FISBTC).start() 
symbol_g_OMBTC = 'OMBTC' 
price_bids_g_OMBTC = Decimal('0.0') 
qty_bids_g_OMBTC = Decimal('0.0') 
price_asks_g_OMBTC = Decimal('0.0') 
qty_asks_g_OMBTC = Decimal('0.0') 
stepSize_g_OMBTC = Decimal('1.0') 


def on_message_OMBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OMBTC = 'OMBTC' 
	price_bids_c_l_OMBTC = data['b'] 
	qty_bids_c_l_OMBTC = data['B'] 
	price_asks_c_l_OMBTC = data['a'] 
	qty_asks_c_l_OMBTC = data['A'] 

	global symbol_g_OMBTC 
	global price_bids_g_OMBTC 
	global qty_bids_g_OMBTC 
	global price_asks_g_OMBTC 
	global qty_asks_g_OMBTC 

	symbol_g_OMBTC = symbol_c_l_OMBTC 
	price_bids_g_OMBTC = Decimal(price_bids_c_l_OMBTC) 
	qty_bids_g_OMBTC = Decimal(qty_bids_c_l_OMBTC) 
	price_asks_g_OMBTC = Decimal(price_asks_c_l_OMBTC) 
	qty_asks_g_OMBTC = Decimal(qty_asks_c_l_OMBTC) 


def loop_OMBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ombtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OMBTC) 
	ws.run_forever() 


Thread(target=loop_OMBTC).start() 
symbol_g_PONDBTC = 'PONDBTC' 
price_bids_g_PONDBTC = Decimal('0.0') 
qty_bids_g_PONDBTC = Decimal('0.0') 
price_asks_g_PONDBTC = Decimal('0.0') 
qty_asks_g_PONDBTC = Decimal('0.0') 
stepSize_g_PONDBTC = Decimal('1.0') 


def on_message_PONDBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PONDBTC = 'PONDBTC' 
	price_bids_c_l_PONDBTC = data['b'] 
	qty_bids_c_l_PONDBTC = data['B'] 
	price_asks_c_l_PONDBTC = data['a'] 
	qty_asks_c_l_PONDBTC = data['A'] 

	global symbol_g_PONDBTC 
	global price_bids_g_PONDBTC 
	global qty_bids_g_PONDBTC 
	global price_asks_g_PONDBTC 
	global qty_asks_g_PONDBTC 

	symbol_g_PONDBTC = symbol_c_l_PONDBTC 
	price_bids_g_PONDBTC = Decimal(price_bids_c_l_PONDBTC) 
	qty_bids_g_PONDBTC = Decimal(qty_bids_c_l_PONDBTC) 
	price_asks_g_PONDBTC = Decimal(price_asks_c_l_PONDBTC) 
	qty_asks_g_PONDBTC = Decimal(qty_asks_c_l_PONDBTC) 


def loop_PONDBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/pondbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PONDBTC) 
	ws.run_forever() 


Thread(target=loop_PONDBTC).start() 
symbol_g_DEGOBTC = 'DEGOBTC' 
price_bids_g_DEGOBTC = Decimal('0.0') 
qty_bids_g_DEGOBTC = Decimal('0.0') 
price_asks_g_DEGOBTC = Decimal('0.0') 
qty_asks_g_DEGOBTC = Decimal('0.0') 
stepSize_g_DEGOBTC = Decimal('0.01') 


def on_message_DEGOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DEGOBTC = 'DEGOBTC' 
	price_bids_c_l_DEGOBTC = data['b'] 
	qty_bids_c_l_DEGOBTC = data['B'] 
	price_asks_c_l_DEGOBTC = data['a'] 
	qty_asks_c_l_DEGOBTC = data['A'] 

	global symbol_g_DEGOBTC 
	global price_bids_g_DEGOBTC 
	global qty_bids_g_DEGOBTC 
	global price_asks_g_DEGOBTC 
	global qty_asks_g_DEGOBTC 

	symbol_g_DEGOBTC = symbol_c_l_DEGOBTC 
	price_bids_g_DEGOBTC = Decimal(price_bids_c_l_DEGOBTC) 
	qty_bids_g_DEGOBTC = Decimal(qty_bids_c_l_DEGOBTC) 
	price_asks_g_DEGOBTC = Decimal(price_asks_c_l_DEGOBTC) 
	qty_asks_g_DEGOBTC = Decimal(qty_asks_c_l_DEGOBTC) 


def loop_DEGOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/degobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DEGOBTC) 
	ws.run_forever() 


Thread(target=loop_DEGOBTC).start() 
symbol_g_ALICEBTC = 'ALICEBTC' 
price_bids_g_ALICEBTC = Decimal('0.0') 
qty_bids_g_ALICEBTC = Decimal('0.0') 
price_asks_g_ALICEBTC = Decimal('0.0') 
qty_asks_g_ALICEBTC = Decimal('0.0') 
stepSize_g_ALICEBTC = Decimal('0.01') 


def on_message_ALICEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALICEBTC = 'ALICEBTC' 
	price_bids_c_l_ALICEBTC = data['b'] 
	qty_bids_c_l_ALICEBTC = data['B'] 
	price_asks_c_l_ALICEBTC = data['a'] 
	qty_asks_c_l_ALICEBTC = data['A'] 

	global symbol_g_ALICEBTC 
	global price_bids_g_ALICEBTC 
	global qty_bids_g_ALICEBTC 
	global price_asks_g_ALICEBTC 
	global qty_asks_g_ALICEBTC 

	symbol_g_ALICEBTC = symbol_c_l_ALICEBTC 
	price_bids_g_ALICEBTC = Decimal(price_bids_c_l_ALICEBTC) 
	qty_bids_g_ALICEBTC = Decimal(qty_bids_c_l_ALICEBTC) 
	price_asks_g_ALICEBTC = Decimal(price_asks_c_l_ALICEBTC) 
	qty_asks_g_ALICEBTC = Decimal(qty_asks_c_l_ALICEBTC) 


def loop_ALICEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alicebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALICEBTC) 
	ws.run_forever() 


Thread(target=loop_ALICEBTC).start() 
symbol_g_LINABTC = 'LINABTC' 
price_bids_g_LINABTC = Decimal('0.0') 
qty_bids_g_LINABTC = Decimal('0.0') 
price_asks_g_LINABTC = Decimal('0.0') 
qty_asks_g_LINABTC = Decimal('0.0') 
stepSize_g_LINABTC = Decimal('1.0') 


def on_message_LINABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LINABTC = 'LINABTC' 
	price_bids_c_l_LINABTC = data['b'] 
	qty_bids_c_l_LINABTC = data['B'] 
	price_asks_c_l_LINABTC = data['a'] 
	qty_asks_c_l_LINABTC = data['A'] 

	global symbol_g_LINABTC 
	global price_bids_g_LINABTC 
	global qty_bids_g_LINABTC 
	global price_asks_g_LINABTC 
	global qty_asks_g_LINABTC 

	symbol_g_LINABTC = symbol_c_l_LINABTC 
	price_bids_g_LINABTC = Decimal(price_bids_c_l_LINABTC) 
	qty_bids_g_LINABTC = Decimal(qty_bids_c_l_LINABTC) 
	price_asks_g_LINABTC = Decimal(price_asks_c_l_LINABTC) 
	qty_asks_g_LINABTC = Decimal(qty_asks_c_l_LINABTC) 


def loop_LINABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/linabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LINABTC) 
	ws.run_forever() 


Thread(target=loop_LINABTC).start() 
symbol_g_PERPBTC = 'PERPBTC' 
price_bids_g_PERPBTC = Decimal('0.0') 
qty_bids_g_PERPBTC = Decimal('0.0') 
price_asks_g_PERPBTC = Decimal('0.0') 
qty_asks_g_PERPBTC = Decimal('0.0') 
stepSize_g_PERPBTC = Decimal('0.01') 


def on_message_PERPBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PERPBTC = 'PERPBTC' 
	price_bids_c_l_PERPBTC = data['b'] 
	qty_bids_c_l_PERPBTC = data['B'] 
	price_asks_c_l_PERPBTC = data['a'] 
	qty_asks_c_l_PERPBTC = data['A'] 

	global symbol_g_PERPBTC 
	global price_bids_g_PERPBTC 
	global qty_bids_g_PERPBTC 
	global price_asks_g_PERPBTC 
	global qty_asks_g_PERPBTC 

	symbol_g_PERPBTC = symbol_c_l_PERPBTC 
	price_bids_g_PERPBTC = Decimal(price_bids_c_l_PERPBTC) 
	qty_bids_g_PERPBTC = Decimal(qty_bids_c_l_PERPBTC) 
	price_asks_g_PERPBTC = Decimal(price_asks_c_l_PERPBTC) 
	qty_asks_g_PERPBTC = Decimal(qty_asks_c_l_PERPBTC) 


def loop_PERPBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/perpbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PERPBTC) 
	ws.run_forever() 


Thread(target=loop_PERPBTC).start() 
symbol_g_SUPERBTC = 'SUPERBTC' 
price_bids_g_SUPERBTC = Decimal('0.0') 
qty_bids_g_SUPERBTC = Decimal('0.0') 
price_asks_g_SUPERBTC = Decimal('0.0') 
qty_asks_g_SUPERBTC = Decimal('0.0') 
stepSize_g_SUPERBTC = Decimal('1.0') 


def on_message_SUPERBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SUPERBTC = 'SUPERBTC' 
	price_bids_c_l_SUPERBTC = data['b'] 
	qty_bids_c_l_SUPERBTC = data['B'] 
	price_asks_c_l_SUPERBTC = data['a'] 
	qty_asks_c_l_SUPERBTC = data['A'] 

	global symbol_g_SUPERBTC 
	global price_bids_g_SUPERBTC 
	global qty_bids_g_SUPERBTC 
	global price_asks_g_SUPERBTC 
	global qty_asks_g_SUPERBTC 

	symbol_g_SUPERBTC = symbol_c_l_SUPERBTC 
	price_bids_g_SUPERBTC = Decimal(price_bids_c_l_SUPERBTC) 
	qty_bids_g_SUPERBTC = Decimal(qty_bids_c_l_SUPERBTC) 
	price_asks_g_SUPERBTC = Decimal(price_asks_c_l_SUPERBTC) 
	qty_asks_g_SUPERBTC = Decimal(qty_asks_c_l_SUPERBTC) 


def loop_SUPERBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/superbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SUPERBTC) 
	ws.run_forever() 


Thread(target=loop_SUPERBTC).start() 
symbol_g_CFXBTC = 'CFXBTC' 
price_bids_g_CFXBTC = Decimal('0.0') 
qty_bids_g_CFXBTC = Decimal('0.0') 
price_asks_g_CFXBTC = Decimal('0.0') 
qty_asks_g_CFXBTC = Decimal('0.0') 
stepSize_g_CFXBTC = Decimal('1.0') 


def on_message_CFXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CFXBTC = 'CFXBTC' 
	price_bids_c_l_CFXBTC = data['b'] 
	qty_bids_c_l_CFXBTC = data['B'] 
	price_asks_c_l_CFXBTC = data['a'] 
	qty_asks_c_l_CFXBTC = data['A'] 

	global symbol_g_CFXBTC 
	global price_bids_g_CFXBTC 
	global qty_bids_g_CFXBTC 
	global price_asks_g_CFXBTC 
	global qty_asks_g_CFXBTC 

	symbol_g_CFXBTC = symbol_c_l_CFXBTC 
	price_bids_g_CFXBTC = Decimal(price_bids_c_l_CFXBTC) 
	qty_bids_g_CFXBTC = Decimal(qty_bids_c_l_CFXBTC) 
	price_asks_g_CFXBTC = Decimal(price_asks_c_l_CFXBTC) 
	qty_asks_g_CFXBTC = Decimal(qty_asks_c_l_CFXBTC) 


def loop_CFXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cfxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CFXBTC) 
	ws.run_forever() 


Thread(target=loop_CFXBTC).start() 
symbol_g_AUTOBTC = 'AUTOBTC' 
price_bids_g_AUTOBTC = Decimal('0.0') 
qty_bids_g_AUTOBTC = Decimal('0.0') 
price_asks_g_AUTOBTC = Decimal('0.0') 
qty_asks_g_AUTOBTC = Decimal('0.0') 
stepSize_g_AUTOBTC = Decimal('0.001') 


def on_message_AUTOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AUTOBTC = 'AUTOBTC' 
	price_bids_c_l_AUTOBTC = data['b'] 
	qty_bids_c_l_AUTOBTC = data['B'] 
	price_asks_c_l_AUTOBTC = data['a'] 
	qty_asks_c_l_AUTOBTC = data['A'] 

	global symbol_g_AUTOBTC 
	global price_bids_g_AUTOBTC 
	global qty_bids_g_AUTOBTC 
	global price_asks_g_AUTOBTC 
	global qty_asks_g_AUTOBTC 

	symbol_g_AUTOBTC = symbol_c_l_AUTOBTC 
	price_bids_g_AUTOBTC = Decimal(price_bids_c_l_AUTOBTC) 
	qty_bids_g_AUTOBTC = Decimal(qty_bids_c_l_AUTOBTC) 
	price_asks_g_AUTOBTC = Decimal(price_asks_c_l_AUTOBTC) 
	qty_asks_g_AUTOBTC = Decimal(qty_asks_c_l_AUTOBTC) 


def loop_AUTOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/autobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AUTOBTC) 
	ws.run_forever() 


Thread(target=loop_AUTOBTC).start() 
symbol_g_TKOBTC = 'TKOBTC' 
price_bids_g_TKOBTC = Decimal('0.0') 
qty_bids_g_TKOBTC = Decimal('0.0') 
price_asks_g_TKOBTC = Decimal('0.0') 
qty_asks_g_TKOBTC = Decimal('0.0') 
stepSize_g_TKOBTC = Decimal('0.1') 


def on_message_TKOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TKOBTC = 'TKOBTC' 
	price_bids_c_l_TKOBTC = data['b'] 
	qty_bids_c_l_TKOBTC = data['B'] 
	price_asks_c_l_TKOBTC = data['a'] 
	qty_asks_c_l_TKOBTC = data['A'] 

	global symbol_g_TKOBTC 
	global price_bids_g_TKOBTC 
	global qty_bids_g_TKOBTC 
	global price_asks_g_TKOBTC 
	global qty_asks_g_TKOBTC 

	symbol_g_TKOBTC = symbol_c_l_TKOBTC 
	price_bids_g_TKOBTC = Decimal(price_bids_c_l_TKOBTC) 
	qty_bids_g_TKOBTC = Decimal(qty_bids_c_l_TKOBTC) 
	price_asks_g_TKOBTC = Decimal(price_asks_c_l_TKOBTC) 
	qty_asks_g_TKOBTC = Decimal(qty_asks_c_l_TKOBTC) 


def loop_TKOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tkobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TKOBTC) 
	ws.run_forever() 


Thread(target=loop_TKOBTC).start() 
symbol_g_TLMBTC = 'TLMBTC' 
price_bids_g_TLMBTC = Decimal('0.0') 
qty_bids_g_TLMBTC = Decimal('0.0') 
price_asks_g_TLMBTC = Decimal('0.0') 
qty_asks_g_TLMBTC = Decimal('0.0') 
stepSize_g_TLMBTC = Decimal('1.0') 


def on_message_TLMBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TLMBTC = 'TLMBTC' 
	price_bids_c_l_TLMBTC = data['b'] 
	qty_bids_c_l_TLMBTC = data['B'] 
	price_asks_c_l_TLMBTC = data['a'] 
	qty_asks_c_l_TLMBTC = data['A'] 

	global symbol_g_TLMBTC 
	global price_bids_g_TLMBTC 
	global qty_bids_g_TLMBTC 
	global price_asks_g_TLMBTC 
	global qty_asks_g_TLMBTC 

	symbol_g_TLMBTC = symbol_c_l_TLMBTC 
	price_bids_g_TLMBTC = Decimal(price_bids_c_l_TLMBTC) 
	qty_bids_g_TLMBTC = Decimal(qty_bids_c_l_TLMBTC) 
	price_asks_g_TLMBTC = Decimal(price_asks_c_l_TLMBTC) 
	qty_asks_g_TLMBTC = Decimal(qty_asks_c_l_TLMBTC) 


def loop_TLMBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tlmbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TLMBTC) 
	ws.run_forever() 


Thread(target=loop_TLMBTC).start() 
symbol_g_BARBTC = 'BARBTC' 
price_bids_g_BARBTC = Decimal('0.0') 
qty_bids_g_BARBTC = Decimal('0.0') 
price_asks_g_BARBTC = Decimal('0.0') 
qty_asks_g_BARBTC = Decimal('0.0') 
stepSize_g_BARBTC = Decimal('0.01') 


def on_message_BARBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BARBTC = 'BARBTC' 
	price_bids_c_l_BARBTC = data['b'] 
	qty_bids_c_l_BARBTC = data['B'] 
	price_asks_c_l_BARBTC = data['a'] 
	qty_asks_c_l_BARBTC = data['A'] 

	global symbol_g_BARBTC 
	global price_bids_g_BARBTC 
	global qty_bids_g_BARBTC 
	global price_asks_g_BARBTC 
	global qty_asks_g_BARBTC 

	symbol_g_BARBTC = symbol_c_l_BARBTC 
	price_bids_g_BARBTC = Decimal(price_bids_c_l_BARBTC) 
	qty_bids_g_BARBTC = Decimal(qty_bids_c_l_BARBTC) 
	price_asks_g_BARBTC = Decimal(price_asks_c_l_BARBTC) 
	qty_asks_g_BARBTC = Decimal(qty_asks_c_l_BARBTC) 


def loop_BARBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/barbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BARBTC) 
	ws.run_forever() 


Thread(target=loop_BARBTC).start() 
symbol_g_FORTHBTC = 'FORTHBTC' 
price_bids_g_FORTHBTC = Decimal('0.0') 
qty_bids_g_FORTHBTC = Decimal('0.0') 
price_asks_g_FORTHBTC = Decimal('0.0') 
qty_asks_g_FORTHBTC = Decimal('0.0') 
stepSize_g_FORTHBTC = Decimal('0.01') 


def on_message_FORTHBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FORTHBTC = 'FORTHBTC' 
	price_bids_c_l_FORTHBTC = data['b'] 
	qty_bids_c_l_FORTHBTC = data['B'] 
	price_asks_c_l_FORTHBTC = data['a'] 
	qty_asks_c_l_FORTHBTC = data['A'] 

	global symbol_g_FORTHBTC 
	global price_bids_g_FORTHBTC 
	global qty_bids_g_FORTHBTC 
	global price_asks_g_FORTHBTC 
	global qty_asks_g_FORTHBTC 

	symbol_g_FORTHBTC = symbol_c_l_FORTHBTC 
	price_bids_g_FORTHBTC = Decimal(price_bids_c_l_FORTHBTC) 
	qty_bids_g_FORTHBTC = Decimal(qty_bids_c_l_FORTHBTC) 
	price_asks_g_FORTHBTC = Decimal(price_asks_c_l_FORTHBTC) 
	qty_asks_g_FORTHBTC = Decimal(qty_asks_c_l_FORTHBTC) 


def loop_FORTHBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/forthbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FORTHBTC) 
	ws.run_forever() 


Thread(target=loop_FORTHBTC).start() 
symbol_g_ICPBTC = 'ICPBTC' 
price_bids_g_ICPBTC = Decimal('0.0') 
qty_bids_g_ICPBTC = Decimal('0.0') 
price_asks_g_ICPBTC = Decimal('0.0') 
qty_asks_g_ICPBTC = Decimal('0.0') 
stepSize_g_ICPBTC = Decimal('0.01') 


def on_message_ICPBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ICPBTC = 'ICPBTC' 
	price_bids_c_l_ICPBTC = data['b'] 
	qty_bids_c_l_ICPBTC = data['B'] 
	price_asks_c_l_ICPBTC = data['a'] 
	qty_asks_c_l_ICPBTC = data['A'] 

	global symbol_g_ICPBTC 
	global price_bids_g_ICPBTC 
	global qty_bids_g_ICPBTC 
	global price_asks_g_ICPBTC 
	global qty_asks_g_ICPBTC 

	symbol_g_ICPBTC = symbol_c_l_ICPBTC 
	price_bids_g_ICPBTC = Decimal(price_bids_c_l_ICPBTC) 
	qty_bids_g_ICPBTC = Decimal(qty_bids_c_l_ICPBTC) 
	price_asks_g_ICPBTC = Decimal(price_asks_c_l_ICPBTC) 
	qty_asks_g_ICPBTC = Decimal(qty_asks_c_l_ICPBTC) 


def loop_ICPBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/icpbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ICPBTC) 
	ws.run_forever() 


Thread(target=loop_ICPBTC).start() 
symbol_g_ARBTC = 'ARBTC' 
price_bids_g_ARBTC = Decimal('0.0') 
qty_bids_g_ARBTC = Decimal('0.0') 
price_asks_g_ARBTC = Decimal('0.0') 
qty_asks_g_ARBTC = Decimal('0.0') 
stepSize_g_ARBTC = Decimal('0.01') 


def on_message_ARBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ARBTC = 'ARBTC' 
	price_bids_c_l_ARBTC = data['b'] 
	qty_bids_c_l_ARBTC = data['B'] 
	price_asks_c_l_ARBTC = data['a'] 
	qty_asks_c_l_ARBTC = data['A'] 

	global symbol_g_ARBTC 
	global price_bids_g_ARBTC 
	global qty_bids_g_ARBTC 
	global price_asks_g_ARBTC 
	global qty_asks_g_ARBTC 

	symbol_g_ARBTC = symbol_c_l_ARBTC 
	price_bids_g_ARBTC = Decimal(price_bids_c_l_ARBTC) 
	qty_bids_g_ARBTC = Decimal(qty_bids_c_l_ARBTC) 
	price_asks_g_ARBTC = Decimal(price_asks_c_l_ARBTC) 
	qty_asks_g_ARBTC = Decimal(qty_asks_c_l_ARBTC) 


def loop_ARBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/arbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ARBTC) 
	ws.run_forever() 


Thread(target=loop_ARBTC).start() 
symbol_g_POLSBTC = 'POLSBTC' 
price_bids_g_POLSBTC = Decimal('0.0') 
qty_bids_g_POLSBTC = Decimal('0.0') 
price_asks_g_POLSBTC = Decimal('0.0') 
qty_asks_g_POLSBTC = Decimal('0.0') 
stepSize_g_POLSBTC = Decimal('0.1') 


def on_message_POLSBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_POLSBTC = 'POLSBTC' 
	price_bids_c_l_POLSBTC = data['b'] 
	qty_bids_c_l_POLSBTC = data['B'] 
	price_asks_c_l_POLSBTC = data['a'] 
	qty_asks_c_l_POLSBTC = data['A'] 

	global symbol_g_POLSBTC 
	global price_bids_g_POLSBTC 
	global qty_bids_g_POLSBTC 
	global price_asks_g_POLSBTC 
	global qty_asks_g_POLSBTC 

	symbol_g_POLSBTC = symbol_c_l_POLSBTC 
	price_bids_g_POLSBTC = Decimal(price_bids_c_l_POLSBTC) 
	qty_bids_g_POLSBTC = Decimal(qty_bids_c_l_POLSBTC) 
	price_asks_g_POLSBTC = Decimal(price_asks_c_l_POLSBTC) 
	qty_asks_g_POLSBTC = Decimal(qty_asks_c_l_POLSBTC) 


def loop_POLSBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/polsbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_POLSBTC) 
	ws.run_forever() 


Thread(target=loop_POLSBTC).start() 
symbol_g_MDXBTC = 'MDXBTC' 
price_bids_g_MDXBTC = Decimal('0.0') 
qty_bids_g_MDXBTC = Decimal('0.0') 
price_asks_g_MDXBTC = Decimal('0.0') 
qty_asks_g_MDXBTC = Decimal('0.0') 
stepSize_g_MDXBTC = Decimal('0.1') 


def on_message_MDXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MDXBTC = 'MDXBTC' 
	price_bids_c_l_MDXBTC = data['b'] 
	qty_bids_c_l_MDXBTC = data['B'] 
	price_asks_c_l_MDXBTC = data['a'] 
	qty_asks_c_l_MDXBTC = data['A'] 

	global symbol_g_MDXBTC 
	global price_bids_g_MDXBTC 
	global qty_bids_g_MDXBTC 
	global price_asks_g_MDXBTC 
	global qty_asks_g_MDXBTC 

	symbol_g_MDXBTC = symbol_c_l_MDXBTC 
	price_bids_g_MDXBTC = Decimal(price_bids_c_l_MDXBTC) 
	qty_bids_g_MDXBTC = Decimal(qty_bids_c_l_MDXBTC) 
	price_asks_g_MDXBTC = Decimal(price_asks_c_l_MDXBTC) 
	qty_asks_g_MDXBTC = Decimal(qty_asks_c_l_MDXBTC) 


def loop_MDXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mdxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MDXBTC) 
	ws.run_forever() 


Thread(target=loop_MDXBTC).start() 
symbol_g_LPTBTC = 'LPTBTC' 
price_bids_g_LPTBTC = Decimal('0.0') 
qty_bids_g_LPTBTC = Decimal('0.0') 
price_asks_g_LPTBTC = Decimal('0.0') 
qty_asks_g_LPTBTC = Decimal('0.0') 
stepSize_g_LPTBTC = Decimal('0.01') 


def on_message_LPTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LPTBTC = 'LPTBTC' 
	price_bids_c_l_LPTBTC = data['b'] 
	qty_bids_c_l_LPTBTC = data['B'] 
	price_asks_c_l_LPTBTC = data['a'] 
	qty_asks_c_l_LPTBTC = data['A'] 

	global symbol_g_LPTBTC 
	global price_bids_g_LPTBTC 
	global qty_bids_g_LPTBTC 
	global price_asks_g_LPTBTC 
	global qty_asks_g_LPTBTC 

	symbol_g_LPTBTC = symbol_c_l_LPTBTC 
	price_bids_g_LPTBTC = Decimal(price_bids_c_l_LPTBTC) 
	qty_bids_g_LPTBTC = Decimal(qty_bids_c_l_LPTBTC) 
	price_asks_g_LPTBTC = Decimal(price_asks_c_l_LPTBTC) 
	qty_asks_g_LPTBTC = Decimal(qty_asks_c_l_LPTBTC) 


def loop_LPTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lptbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LPTBTC) 
	ws.run_forever() 


Thread(target=loop_LPTBTC).start() 
symbol_g_ATABTC = 'ATABTC' 
price_bids_g_ATABTC = Decimal('0.0') 
qty_bids_g_ATABTC = Decimal('0.0') 
price_asks_g_ATABTC = Decimal('0.0') 
qty_asks_g_ATABTC = Decimal('0.0') 
stepSize_g_ATABTC = Decimal('1.0') 


def on_message_ATABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATABTC = 'ATABTC' 
	price_bids_c_l_ATABTC = data['b'] 
	qty_bids_c_l_ATABTC = data['B'] 
	price_asks_c_l_ATABTC = data['a'] 
	qty_asks_c_l_ATABTC = data['A'] 

	global symbol_g_ATABTC 
	global price_bids_g_ATABTC 
	global qty_bids_g_ATABTC 
	global price_asks_g_ATABTC 
	global qty_asks_g_ATABTC 

	symbol_g_ATABTC = symbol_c_l_ATABTC 
	price_bids_g_ATABTC = Decimal(price_bids_c_l_ATABTC) 
	qty_bids_g_ATABTC = Decimal(qty_bids_c_l_ATABTC) 
	price_asks_g_ATABTC = Decimal(price_asks_c_l_ATABTC) 
	qty_asks_g_ATABTC = Decimal(qty_asks_c_l_ATABTC) 


def loop_ATABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATABTC) 
	ws.run_forever() 


Thread(target=loop_ATABTC).start() 
symbol_g_GTCBTC = 'GTCBTC' 
price_bids_g_GTCBTC = Decimal('0.0') 
qty_bids_g_GTCBTC = Decimal('0.0') 
price_asks_g_GTCBTC = Decimal('0.0') 
qty_asks_g_GTCBTC = Decimal('0.0') 
stepSize_g_GTCBTC = Decimal('0.1') 


def on_message_GTCBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GTCBTC = 'GTCBTC' 
	price_bids_c_l_GTCBTC = data['b'] 
	qty_bids_c_l_GTCBTC = data['B'] 
	price_asks_c_l_GTCBTC = data['a'] 
	qty_asks_c_l_GTCBTC = data['A'] 

	global symbol_g_GTCBTC 
	global price_bids_g_GTCBTC 
	global qty_bids_g_GTCBTC 
	global price_asks_g_GTCBTC 
	global qty_asks_g_GTCBTC 

	symbol_g_GTCBTC = symbol_c_l_GTCBTC 
	price_bids_g_GTCBTC = Decimal(price_bids_c_l_GTCBTC) 
	qty_bids_g_GTCBTC = Decimal(qty_bids_c_l_GTCBTC) 
	price_asks_g_GTCBTC = Decimal(price_asks_c_l_GTCBTC) 
	qty_asks_g_GTCBTC = Decimal(qty_asks_c_l_GTCBTC) 


def loop_GTCBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gtcbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GTCBTC) 
	ws.run_forever() 


Thread(target=loop_GTCBTC).start() 
symbol_g_BAKEBTC = 'BAKEBTC' 
price_bids_g_BAKEBTC = Decimal('0.0') 
qty_bids_g_BAKEBTC = Decimal('0.0') 
price_asks_g_BAKEBTC = Decimal('0.0') 
qty_asks_g_BAKEBTC = Decimal('0.0') 
stepSize_g_BAKEBTC = Decimal('0.1') 


def on_message_BAKEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BAKEBTC = 'BAKEBTC' 
	price_bids_c_l_BAKEBTC = data['b'] 
	qty_bids_c_l_BAKEBTC = data['B'] 
	price_asks_c_l_BAKEBTC = data['a'] 
	qty_asks_c_l_BAKEBTC = data['A'] 

	global symbol_g_BAKEBTC 
	global price_bids_g_BAKEBTC 
	global qty_bids_g_BAKEBTC 
	global price_asks_g_BAKEBTC 
	global qty_asks_g_BAKEBTC 

	symbol_g_BAKEBTC = symbol_c_l_BAKEBTC 
	price_bids_g_BAKEBTC = Decimal(price_bids_c_l_BAKEBTC) 
	qty_bids_g_BAKEBTC = Decimal(qty_bids_c_l_BAKEBTC) 
	price_asks_g_BAKEBTC = Decimal(price_asks_c_l_BAKEBTC) 
	qty_asks_g_BAKEBTC = Decimal(qty_asks_c_l_BAKEBTC) 


def loop_BAKEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bakebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BAKEBTC) 
	ws.run_forever() 


Thread(target=loop_BAKEBTC).start() 
symbol_g_KLAYBTC = 'KLAYBTC' 
price_bids_g_KLAYBTC = Decimal('0.0') 
qty_bids_g_KLAYBTC = Decimal('0.0') 
price_asks_g_KLAYBTC = Decimal('0.0') 
qty_asks_g_KLAYBTC = Decimal('0.0') 
stepSize_g_KLAYBTC = Decimal('0.1') 


def on_message_KLAYBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KLAYBTC = 'KLAYBTC' 
	price_bids_c_l_KLAYBTC = data['b'] 
	qty_bids_c_l_KLAYBTC = data['B'] 
	price_asks_c_l_KLAYBTC = data['a'] 
	qty_asks_c_l_KLAYBTC = data['A'] 

	global symbol_g_KLAYBTC 
	global price_bids_g_KLAYBTC 
	global qty_bids_g_KLAYBTC 
	global price_asks_g_KLAYBTC 
	global qty_asks_g_KLAYBTC 

	symbol_g_KLAYBTC = symbol_c_l_KLAYBTC 
	price_bids_g_KLAYBTC = Decimal(price_bids_c_l_KLAYBTC) 
	qty_bids_g_KLAYBTC = Decimal(qty_bids_c_l_KLAYBTC) 
	price_asks_g_KLAYBTC = Decimal(price_asks_c_l_KLAYBTC) 
	qty_asks_g_KLAYBTC = Decimal(qty_asks_c_l_KLAYBTC) 


def loop_KLAYBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/klaybtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KLAYBTC) 
	ws.run_forever() 


Thread(target=loop_KLAYBTC).start() 
symbol_g_BONDBTC = 'BONDBTC' 
price_bids_g_BONDBTC = Decimal('0.0') 
qty_bids_g_BONDBTC = Decimal('0.0') 
price_asks_g_BONDBTC = Decimal('0.0') 
qty_asks_g_BONDBTC = Decimal('0.0') 
stepSize_g_BONDBTC = Decimal('0.01') 


def on_message_BONDBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BONDBTC = 'BONDBTC' 
	price_bids_c_l_BONDBTC = data['b'] 
	qty_bids_c_l_BONDBTC = data['B'] 
	price_asks_c_l_BONDBTC = data['a'] 
	qty_asks_c_l_BONDBTC = data['A'] 

	global symbol_g_BONDBTC 
	global price_bids_g_BONDBTC 
	global qty_bids_g_BONDBTC 
	global price_asks_g_BONDBTC 
	global qty_asks_g_BONDBTC 

	symbol_g_BONDBTC = symbol_c_l_BONDBTC 
	price_bids_g_BONDBTC = Decimal(price_bids_c_l_BONDBTC) 
	qty_bids_g_BONDBTC = Decimal(qty_bids_c_l_BONDBTC) 
	price_asks_g_BONDBTC = Decimal(price_asks_c_l_BONDBTC) 
	qty_asks_g_BONDBTC = Decimal(qty_asks_c_l_BONDBTC) 


def loop_BONDBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bondbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BONDBTC) 
	ws.run_forever() 


Thread(target=loop_BONDBTC).start() 
symbol_g_MLNBTC = 'MLNBTC' 
price_bids_g_MLNBTC = Decimal('0.0') 
qty_bids_g_MLNBTC = Decimal('0.0') 
price_asks_g_MLNBTC = Decimal('0.0') 
qty_asks_g_MLNBTC = Decimal('0.0') 
stepSize_g_MLNBTC = Decimal('0.001') 


def on_message_MLNBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MLNBTC = 'MLNBTC' 
	price_bids_c_l_MLNBTC = data['b'] 
	qty_bids_c_l_MLNBTC = data['B'] 
	price_asks_c_l_MLNBTC = data['a'] 
	qty_asks_c_l_MLNBTC = data['A'] 

	global symbol_g_MLNBTC 
	global price_bids_g_MLNBTC 
	global qty_bids_g_MLNBTC 
	global price_asks_g_MLNBTC 
	global qty_asks_g_MLNBTC 

	symbol_g_MLNBTC = symbol_c_l_MLNBTC 
	price_bids_g_MLNBTC = Decimal(price_bids_c_l_MLNBTC) 
	qty_bids_g_MLNBTC = Decimal(qty_bids_c_l_MLNBTC) 
	price_asks_g_MLNBTC = Decimal(price_asks_c_l_MLNBTC) 
	qty_asks_g_MLNBTC = Decimal(qty_asks_c_l_MLNBTC) 


def loop_MLNBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mlnbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MLNBTC) 
	ws.run_forever() 


Thread(target=loop_MLNBTC).start() 
symbol_g_QUICKBTC = 'QUICKBTC' 
price_bids_g_QUICKBTC = Decimal('0.0') 
qty_bids_g_QUICKBTC = Decimal('0.0') 
price_asks_g_QUICKBTC = Decimal('0.0') 
qty_asks_g_QUICKBTC = Decimal('0.0') 
stepSize_g_QUICKBTC = Decimal('0.001') 


def on_message_QUICKBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QUICKBTC = 'QUICKBTC' 
	price_bids_c_l_QUICKBTC = data['b'] 
	qty_bids_c_l_QUICKBTC = data['B'] 
	price_asks_c_l_QUICKBTC = data['a'] 
	qty_asks_c_l_QUICKBTC = data['A'] 

	global symbol_g_QUICKBTC 
	global price_bids_g_QUICKBTC 
	global qty_bids_g_QUICKBTC 
	global price_asks_g_QUICKBTC 
	global qty_asks_g_QUICKBTC 

	symbol_g_QUICKBTC = symbol_c_l_QUICKBTC 
	price_bids_g_QUICKBTC = Decimal(price_bids_c_l_QUICKBTC) 
	qty_bids_g_QUICKBTC = Decimal(qty_bids_c_l_QUICKBTC) 
	price_asks_g_QUICKBTC = Decimal(price_asks_c_l_QUICKBTC) 
	qty_asks_g_QUICKBTC = Decimal(qty_asks_c_l_QUICKBTC) 


def loop_QUICKBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/quickbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QUICKBTC) 
	ws.run_forever() 


Thread(target=loop_QUICKBTC).start() 
symbol_g_C98BTC = 'C98BTC' 
price_bids_g_C98BTC = Decimal('0.0') 
qty_bids_g_C98BTC = Decimal('0.0') 
price_asks_g_C98BTC = Decimal('0.0') 
qty_asks_g_C98BTC = Decimal('0.0') 
stepSize_g_C98BTC = Decimal('0.1') 


def on_message_C98BTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_C98BTC = 'C98BTC' 
	price_bids_c_l_C98BTC = data['b'] 
	qty_bids_c_l_C98BTC = data['B'] 
	price_asks_c_l_C98BTC = data['a'] 
	qty_asks_c_l_C98BTC = data['A'] 

	global symbol_g_C98BTC 
	global price_bids_g_C98BTC 
	global qty_bids_g_C98BTC 
	global price_asks_g_C98BTC 
	global qty_asks_g_C98BTC 

	symbol_g_C98BTC = symbol_c_l_C98BTC 
	price_bids_g_C98BTC = Decimal(price_bids_c_l_C98BTC) 
	qty_bids_g_C98BTC = Decimal(qty_bids_c_l_C98BTC) 
	price_asks_g_C98BTC = Decimal(price_asks_c_l_C98BTC) 
	qty_asks_g_C98BTC = Decimal(qty_asks_c_l_C98BTC) 


def loop_C98BTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/c98btc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_C98BTC) 
	ws.run_forever() 


Thread(target=loop_C98BTC).start() 
symbol_g_CLVBTC = 'CLVBTC' 
price_bids_g_CLVBTC = Decimal('0.0') 
qty_bids_g_CLVBTC = Decimal('0.0') 
price_asks_g_CLVBTC = Decimal('0.0') 
qty_asks_g_CLVBTC = Decimal('0.0') 
stepSize_g_CLVBTC = Decimal('0.1') 


def on_message_CLVBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CLVBTC = 'CLVBTC' 
	price_bids_c_l_CLVBTC = data['b'] 
	qty_bids_c_l_CLVBTC = data['B'] 
	price_asks_c_l_CLVBTC = data['a'] 
	qty_asks_c_l_CLVBTC = data['A'] 

	global symbol_g_CLVBTC 
	global price_bids_g_CLVBTC 
	global qty_bids_g_CLVBTC 
	global price_asks_g_CLVBTC 
	global qty_asks_g_CLVBTC 

	symbol_g_CLVBTC = symbol_c_l_CLVBTC 
	price_bids_g_CLVBTC = Decimal(price_bids_c_l_CLVBTC) 
	qty_bids_g_CLVBTC = Decimal(qty_bids_c_l_CLVBTC) 
	price_asks_g_CLVBTC = Decimal(price_asks_c_l_CLVBTC) 
	qty_asks_g_CLVBTC = Decimal(qty_asks_c_l_CLVBTC) 


def loop_CLVBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/clvbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CLVBTC) 
	ws.run_forever() 


Thread(target=loop_CLVBTC).start() 
symbol_g_QNTBTC = 'QNTBTC' 
price_bids_g_QNTBTC = Decimal('0.0') 
qty_bids_g_QNTBTC = Decimal('0.0') 
price_asks_g_QNTBTC = Decimal('0.0') 
qty_asks_g_QNTBTC = Decimal('0.0') 
stepSize_g_QNTBTC = Decimal('0.001') 


def on_message_QNTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QNTBTC = 'QNTBTC' 
	price_bids_c_l_QNTBTC = data['b'] 
	qty_bids_c_l_QNTBTC = data['B'] 
	price_asks_c_l_QNTBTC = data['a'] 
	qty_asks_c_l_QNTBTC = data['A'] 

	global symbol_g_QNTBTC 
	global price_bids_g_QNTBTC 
	global qty_bids_g_QNTBTC 
	global price_asks_g_QNTBTC 
	global qty_asks_g_QNTBTC 

	symbol_g_QNTBTC = symbol_c_l_QNTBTC 
	price_bids_g_QNTBTC = Decimal(price_bids_c_l_QNTBTC) 
	qty_bids_g_QNTBTC = Decimal(qty_bids_c_l_QNTBTC) 
	price_asks_g_QNTBTC = Decimal(price_asks_c_l_QNTBTC) 
	qty_asks_g_QNTBTC = Decimal(qty_asks_c_l_QNTBTC) 


def loop_QNTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/qntbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QNTBTC) 
	ws.run_forever() 


Thread(target=loop_QNTBTC).start() 
symbol_g_FLOWBTC = 'FLOWBTC' 
price_bids_g_FLOWBTC = Decimal('0.0') 
qty_bids_g_FLOWBTC = Decimal('0.0') 
price_asks_g_FLOWBTC = Decimal('0.0') 
qty_asks_g_FLOWBTC = Decimal('0.0') 
stepSize_g_FLOWBTC = Decimal('0.01') 


def on_message_FLOWBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FLOWBTC = 'FLOWBTC' 
	price_bids_c_l_FLOWBTC = data['b'] 
	qty_bids_c_l_FLOWBTC = data['B'] 
	price_asks_c_l_FLOWBTC = data['a'] 
	qty_asks_c_l_FLOWBTC = data['A'] 

	global symbol_g_FLOWBTC 
	global price_bids_g_FLOWBTC 
	global qty_bids_g_FLOWBTC 
	global price_asks_g_FLOWBTC 
	global qty_asks_g_FLOWBTC 

	symbol_g_FLOWBTC = symbol_c_l_FLOWBTC 
	price_bids_g_FLOWBTC = Decimal(price_bids_c_l_FLOWBTC) 
	qty_bids_g_FLOWBTC = Decimal(qty_bids_c_l_FLOWBTC) 
	price_asks_g_FLOWBTC = Decimal(price_asks_c_l_FLOWBTC) 
	qty_asks_g_FLOWBTC = Decimal(qty_asks_c_l_FLOWBTC) 


def loop_FLOWBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/flowbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FLOWBTC) 
	ws.run_forever() 


Thread(target=loop_FLOWBTC).start() 
symbol_g_MINABTC = 'MINABTC' 
price_bids_g_MINABTC = Decimal('0.0') 
qty_bids_g_MINABTC = Decimal('0.0') 
price_asks_g_MINABTC = Decimal('0.0') 
qty_asks_g_MINABTC = Decimal('0.0') 
stepSize_g_MINABTC = Decimal('0.1') 


def on_message_MINABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MINABTC = 'MINABTC' 
	price_bids_c_l_MINABTC = data['b'] 
	qty_bids_c_l_MINABTC = data['B'] 
	price_asks_c_l_MINABTC = data['a'] 
	qty_asks_c_l_MINABTC = data['A'] 

	global symbol_g_MINABTC 
	global price_bids_g_MINABTC 
	global qty_bids_g_MINABTC 
	global price_asks_g_MINABTC 
	global qty_asks_g_MINABTC 

	symbol_g_MINABTC = symbol_c_l_MINABTC 
	price_bids_g_MINABTC = Decimal(price_bids_c_l_MINABTC) 
	qty_bids_g_MINABTC = Decimal(qty_bids_c_l_MINABTC) 
	price_asks_g_MINABTC = Decimal(price_asks_c_l_MINABTC) 
	qty_asks_g_MINABTC = Decimal(qty_asks_c_l_MINABTC) 


def loop_MINABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/minabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MINABTC) 
	ws.run_forever() 


Thread(target=loop_MINABTC).start() 
symbol_g_FARMBTC = 'FARMBTC' 
price_bids_g_FARMBTC = Decimal('0.0') 
qty_bids_g_FARMBTC = Decimal('0.0') 
price_asks_g_FARMBTC = Decimal('0.0') 
qty_asks_g_FARMBTC = Decimal('0.0') 
stepSize_g_FARMBTC = Decimal('0.001') 


def on_message_FARMBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FARMBTC = 'FARMBTC' 
	price_bids_c_l_FARMBTC = data['b'] 
	qty_bids_c_l_FARMBTC = data['B'] 
	price_asks_c_l_FARMBTC = data['a'] 
	qty_asks_c_l_FARMBTC = data['A'] 

	global symbol_g_FARMBTC 
	global price_bids_g_FARMBTC 
	global qty_bids_g_FARMBTC 
	global price_asks_g_FARMBTC 
	global qty_asks_g_FARMBTC 

	symbol_g_FARMBTC = symbol_c_l_FARMBTC 
	price_bids_g_FARMBTC = Decimal(price_bids_c_l_FARMBTC) 
	qty_bids_g_FARMBTC = Decimal(qty_bids_c_l_FARMBTC) 
	price_asks_g_FARMBTC = Decimal(price_asks_c_l_FARMBTC) 
	qty_asks_g_FARMBTC = Decimal(qty_asks_c_l_FARMBTC) 


def loop_FARMBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/farmbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FARMBTC) 
	ws.run_forever() 


Thread(target=loop_FARMBTC).start() 
symbol_g_ALPACABTC = 'ALPACABTC' 
price_bids_g_ALPACABTC = Decimal('0.0') 
qty_bids_g_ALPACABTC = Decimal('0.0') 
price_asks_g_ALPACABTC = Decimal('0.0') 
qty_asks_g_ALPACABTC = Decimal('0.0') 
stepSize_g_ALPACABTC = Decimal('0.1') 


def on_message_ALPACABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALPACABTC = 'ALPACABTC' 
	price_bids_c_l_ALPACABTC = data['b'] 
	qty_bids_c_l_ALPACABTC = data['B'] 
	price_asks_c_l_ALPACABTC = data['a'] 
	qty_asks_c_l_ALPACABTC = data['A'] 

	global symbol_g_ALPACABTC 
	global price_bids_g_ALPACABTC 
	global qty_bids_g_ALPACABTC 
	global price_asks_g_ALPACABTC 
	global qty_asks_g_ALPACABTC 

	symbol_g_ALPACABTC = symbol_c_l_ALPACABTC 
	price_bids_g_ALPACABTC = Decimal(price_bids_c_l_ALPACABTC) 
	qty_bids_g_ALPACABTC = Decimal(qty_bids_c_l_ALPACABTC) 
	price_asks_g_ALPACABTC = Decimal(price_asks_c_l_ALPACABTC) 
	qty_asks_g_ALPACABTC = Decimal(qty_asks_c_l_ALPACABTC) 


def loop_ALPACABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alpacabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALPACABTC) 
	ws.run_forever() 


Thread(target=loop_ALPACABTC).start() 
symbol_g_MBOXBTC = 'MBOXBTC' 
price_bids_g_MBOXBTC = Decimal('0.0') 
qty_bids_g_MBOXBTC = Decimal('0.0') 
price_asks_g_MBOXBTC = Decimal('0.0') 
qty_asks_g_MBOXBTC = Decimal('0.0') 
stepSize_g_MBOXBTC = Decimal('0.1') 


def on_message_MBOXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MBOXBTC = 'MBOXBTC' 
	price_bids_c_l_MBOXBTC = data['b'] 
	qty_bids_c_l_MBOXBTC = data['B'] 
	price_asks_c_l_MBOXBTC = data['a'] 
	qty_asks_c_l_MBOXBTC = data['A'] 

	global symbol_g_MBOXBTC 
	global price_bids_g_MBOXBTC 
	global qty_bids_g_MBOXBTC 
	global price_asks_g_MBOXBTC 
	global qty_asks_g_MBOXBTC 

	symbol_g_MBOXBTC = symbol_c_l_MBOXBTC 
	price_bids_g_MBOXBTC = Decimal(price_bids_c_l_MBOXBTC) 
	qty_bids_g_MBOXBTC = Decimal(qty_bids_c_l_MBOXBTC) 
	price_asks_g_MBOXBTC = Decimal(price_asks_c_l_MBOXBTC) 
	qty_asks_g_MBOXBTC = Decimal(qty_asks_c_l_MBOXBTC) 


def loop_MBOXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mboxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MBOXBTC) 
	ws.run_forever() 


Thread(target=loop_MBOXBTC).start() 
symbol_g_WAXPBTC = 'WAXPBTC' 
price_bids_g_WAXPBTC = Decimal('0.0') 
qty_bids_g_WAXPBTC = Decimal('0.0') 
price_asks_g_WAXPBTC = Decimal('0.0') 
qty_asks_g_WAXPBTC = Decimal('0.0') 
stepSize_g_WAXPBTC = Decimal('1.0') 


def on_message_WAXPBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WAXPBTC = 'WAXPBTC' 
	price_bids_c_l_WAXPBTC = data['b'] 
	qty_bids_c_l_WAXPBTC = data['B'] 
	price_asks_c_l_WAXPBTC = data['a'] 
	qty_asks_c_l_WAXPBTC = data['A'] 

	global symbol_g_WAXPBTC 
	global price_bids_g_WAXPBTC 
	global qty_bids_g_WAXPBTC 
	global price_asks_g_WAXPBTC 
	global qty_asks_g_WAXPBTC 

	symbol_g_WAXPBTC = symbol_c_l_WAXPBTC 
	price_bids_g_WAXPBTC = Decimal(price_bids_c_l_WAXPBTC) 
	qty_bids_g_WAXPBTC = Decimal(qty_bids_c_l_WAXPBTC) 
	price_asks_g_WAXPBTC = Decimal(price_asks_c_l_WAXPBTC) 
	qty_asks_g_WAXPBTC = Decimal(qty_asks_c_l_WAXPBTC) 


def loop_WAXPBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/waxpbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WAXPBTC) 
	ws.run_forever() 


Thread(target=loop_WAXPBTC).start() 
symbol_g_DYDXBTC = 'DYDXBTC' 
price_bids_g_DYDXBTC = Decimal('0.0') 
qty_bids_g_DYDXBTC = Decimal('0.0') 
price_asks_g_DYDXBTC = Decimal('0.0') 
qty_asks_g_DYDXBTC = Decimal('0.0') 
stepSize_g_DYDXBTC = Decimal('0.01') 


def on_message_DYDXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DYDXBTC = 'DYDXBTC' 
	price_bids_c_l_DYDXBTC = data['b'] 
	qty_bids_c_l_DYDXBTC = data['B'] 
	price_asks_c_l_DYDXBTC = data['a'] 
	qty_asks_c_l_DYDXBTC = data['A'] 

	global symbol_g_DYDXBTC 
	global price_bids_g_DYDXBTC 
	global qty_bids_g_DYDXBTC 
	global price_asks_g_DYDXBTC 
	global qty_asks_g_DYDXBTC 

	symbol_g_DYDXBTC = symbol_c_l_DYDXBTC 
	price_bids_g_DYDXBTC = Decimal(price_bids_c_l_DYDXBTC) 
	qty_bids_g_DYDXBTC = Decimal(qty_bids_c_l_DYDXBTC) 
	price_asks_g_DYDXBTC = Decimal(price_asks_c_l_DYDXBTC) 
	qty_asks_g_DYDXBTC = Decimal(qty_asks_c_l_DYDXBTC) 


def loop_DYDXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dydxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DYDXBTC) 
	ws.run_forever() 


Thread(target=loop_DYDXBTC).start() 
symbol_g_GALABTC = 'GALABTC' 
price_bids_g_GALABTC = Decimal('0.0') 
qty_bids_g_GALABTC = Decimal('0.0') 
price_asks_g_GALABTC = Decimal('0.0') 
qty_asks_g_GALABTC = Decimal('0.0') 
stepSize_g_GALABTC = Decimal('1.0') 


def on_message_GALABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALABTC = 'GALABTC' 
	price_bids_c_l_GALABTC = data['b'] 
	qty_bids_c_l_GALABTC = data['B'] 
	price_asks_c_l_GALABTC = data['a'] 
	qty_asks_c_l_GALABTC = data['A'] 

	global symbol_g_GALABTC 
	global price_bids_g_GALABTC 
	global qty_bids_g_GALABTC 
	global price_asks_g_GALABTC 
	global qty_asks_g_GALABTC 

	symbol_g_GALABTC = symbol_c_l_GALABTC 
	price_bids_g_GALABTC = Decimal(price_bids_c_l_GALABTC) 
	qty_bids_g_GALABTC = Decimal(qty_bids_c_l_GALABTC) 
	price_asks_g_GALABTC = Decimal(price_asks_c_l_GALABTC) 
	qty_asks_g_GALABTC = Decimal(qty_asks_c_l_GALABTC) 


def loop_GALABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALABTC) 
	ws.run_forever() 


Thread(target=loop_GALABTC).start() 
symbol_g_ILVBTC = 'ILVBTC' 
price_bids_g_ILVBTC = Decimal('0.0') 
qty_bids_g_ILVBTC = Decimal('0.0') 
price_asks_g_ILVBTC = Decimal('0.0') 
qty_asks_g_ILVBTC = Decimal('0.0') 
stepSize_g_ILVBTC = Decimal('0.001') 


def on_message_ILVBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ILVBTC = 'ILVBTC' 
	price_bids_c_l_ILVBTC = data['b'] 
	qty_bids_c_l_ILVBTC = data['B'] 
	price_asks_c_l_ILVBTC = data['a'] 
	qty_asks_c_l_ILVBTC = data['A'] 

	global symbol_g_ILVBTC 
	global price_bids_g_ILVBTC 
	global qty_bids_g_ILVBTC 
	global price_asks_g_ILVBTC 
	global qty_asks_g_ILVBTC 

	symbol_g_ILVBTC = symbol_c_l_ILVBTC 
	price_bids_g_ILVBTC = Decimal(price_bids_c_l_ILVBTC) 
	qty_bids_g_ILVBTC = Decimal(qty_bids_c_l_ILVBTC) 
	price_asks_g_ILVBTC = Decimal(price_asks_c_l_ILVBTC) 
	qty_asks_g_ILVBTC = Decimal(qty_asks_c_l_ILVBTC) 


def loop_ILVBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ilvbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ILVBTC) 
	ws.run_forever() 


Thread(target=loop_ILVBTC).start() 
symbol_g_YGGBTC = 'YGGBTC' 
price_bids_g_YGGBTC = Decimal('0.0') 
qty_bids_g_YGGBTC = Decimal('0.0') 
price_asks_g_YGGBTC = Decimal('0.0') 
qty_asks_g_YGGBTC = Decimal('0.0') 
stepSize_g_YGGBTC = Decimal('0.1') 


def on_message_YGGBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_YGGBTC = 'YGGBTC' 
	price_bids_c_l_YGGBTC = data['b'] 
	qty_bids_c_l_YGGBTC = data['B'] 
	price_asks_c_l_YGGBTC = data['a'] 
	qty_asks_c_l_YGGBTC = data['A'] 

	global symbol_g_YGGBTC 
	global price_bids_g_YGGBTC 
	global qty_bids_g_YGGBTC 
	global price_asks_g_YGGBTC 
	global qty_asks_g_YGGBTC 

	symbol_g_YGGBTC = symbol_c_l_YGGBTC 
	price_bids_g_YGGBTC = Decimal(price_bids_c_l_YGGBTC) 
	qty_bids_g_YGGBTC = Decimal(qty_bids_c_l_YGGBTC) 
	price_asks_g_YGGBTC = Decimal(price_asks_c_l_YGGBTC) 
	qty_asks_g_YGGBTC = Decimal(qty_asks_c_l_YGGBTC) 


def loop_YGGBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/yggbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_YGGBTC) 
	ws.run_forever() 


Thread(target=loop_YGGBTC).start() 
symbol_g_FIDABTC = 'FIDABTC' 
price_bids_g_FIDABTC = Decimal('0.0') 
qty_bids_g_FIDABTC = Decimal('0.0') 
price_asks_g_FIDABTC = Decimal('0.0') 
qty_asks_g_FIDABTC = Decimal('0.0') 
stepSize_g_FIDABTC = Decimal('0.1') 


def on_message_FIDABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FIDABTC = 'FIDABTC' 
	price_bids_c_l_FIDABTC = data['b'] 
	qty_bids_c_l_FIDABTC = data['B'] 
	price_asks_c_l_FIDABTC = data['a'] 
	qty_asks_c_l_FIDABTC = data['A'] 

	global symbol_g_FIDABTC 
	global price_bids_g_FIDABTC 
	global qty_bids_g_FIDABTC 
	global price_asks_g_FIDABTC 
	global qty_asks_g_FIDABTC 

	symbol_g_FIDABTC = symbol_c_l_FIDABTC 
	price_bids_g_FIDABTC = Decimal(price_bids_c_l_FIDABTC) 
	qty_bids_g_FIDABTC = Decimal(qty_bids_c_l_FIDABTC) 
	price_asks_g_FIDABTC = Decimal(price_asks_c_l_FIDABTC) 
	qty_asks_g_FIDABTC = Decimal(qty_asks_c_l_FIDABTC) 


def loop_FIDABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fidabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FIDABTC) 
	ws.run_forever() 


Thread(target=loop_FIDABTC).start() 
symbol_g_AGLDBTC = 'AGLDBTC' 
price_bids_g_AGLDBTC = Decimal('0.0') 
qty_bids_g_AGLDBTC = Decimal('0.0') 
price_asks_g_AGLDBTC = Decimal('0.0') 
qty_asks_g_AGLDBTC = Decimal('0.0') 
stepSize_g_AGLDBTC = Decimal('0.1') 


def on_message_AGLDBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AGLDBTC = 'AGLDBTC' 
	price_bids_c_l_AGLDBTC = data['b'] 
	qty_bids_c_l_AGLDBTC = data['B'] 
	price_asks_c_l_AGLDBTC = data['a'] 
	qty_asks_c_l_AGLDBTC = data['A'] 

	global symbol_g_AGLDBTC 
	global price_bids_g_AGLDBTC 
	global qty_bids_g_AGLDBTC 
	global price_asks_g_AGLDBTC 
	global qty_asks_g_AGLDBTC 

	symbol_g_AGLDBTC = symbol_c_l_AGLDBTC 
	price_bids_g_AGLDBTC = Decimal(price_bids_c_l_AGLDBTC) 
	qty_bids_g_AGLDBTC = Decimal(qty_bids_c_l_AGLDBTC) 
	price_asks_g_AGLDBTC = Decimal(price_asks_c_l_AGLDBTC) 
	qty_asks_g_AGLDBTC = Decimal(qty_asks_c_l_AGLDBTC) 


def loop_AGLDBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/agldbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AGLDBTC) 
	ws.run_forever() 


Thread(target=loop_AGLDBTC).start() 
symbol_g_RADBTC = 'RADBTC' 
price_bids_g_RADBTC = Decimal('0.0') 
qty_bids_g_RADBTC = Decimal('0.0') 
price_asks_g_RADBTC = Decimal('0.0') 
qty_asks_g_RADBTC = Decimal('0.0') 
stepSize_g_RADBTC = Decimal('0.1') 


def on_message_RADBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RADBTC = 'RADBTC' 
	price_bids_c_l_RADBTC = data['b'] 
	qty_bids_c_l_RADBTC = data['B'] 
	price_asks_c_l_RADBTC = data['a'] 
	qty_asks_c_l_RADBTC = data['A'] 

	global symbol_g_RADBTC 
	global price_bids_g_RADBTC 
	global qty_bids_g_RADBTC 
	global price_asks_g_RADBTC 
	global qty_asks_g_RADBTC 

	symbol_g_RADBTC = symbol_c_l_RADBTC 
	price_bids_g_RADBTC = Decimal(price_bids_c_l_RADBTC) 
	qty_bids_g_RADBTC = Decimal(qty_bids_c_l_RADBTC) 
	price_asks_g_RADBTC = Decimal(price_asks_c_l_RADBTC) 
	qty_asks_g_RADBTC = Decimal(qty_asks_c_l_RADBTC) 


def loop_RADBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/radbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RADBTC) 
	ws.run_forever() 


Thread(target=loop_RADBTC).start() 
symbol_g_BETABTC = 'BETABTC' 
price_bids_g_BETABTC = Decimal('0.0') 
qty_bids_g_BETABTC = Decimal('0.0') 
price_asks_g_BETABTC = Decimal('0.0') 
qty_asks_g_BETABTC = Decimal('0.0') 
stepSize_g_BETABTC = Decimal('1.0') 


def on_message_BETABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BETABTC = 'BETABTC' 
	price_bids_c_l_BETABTC = data['b'] 
	qty_bids_c_l_BETABTC = data['B'] 
	price_asks_c_l_BETABTC = data['a'] 
	qty_asks_c_l_BETABTC = data['A'] 

	global symbol_g_BETABTC 
	global price_bids_g_BETABTC 
	global qty_bids_g_BETABTC 
	global price_asks_g_BETABTC 
	global qty_asks_g_BETABTC 

	symbol_g_BETABTC = symbol_c_l_BETABTC 
	price_bids_g_BETABTC = Decimal(price_bids_c_l_BETABTC) 
	qty_bids_g_BETABTC = Decimal(qty_bids_c_l_BETABTC) 
	price_asks_g_BETABTC = Decimal(price_asks_c_l_BETABTC) 
	qty_asks_g_BETABTC = Decimal(qty_asks_c_l_BETABTC) 


def loop_BETABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/betabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BETABTC) 
	ws.run_forever() 


Thread(target=loop_BETABTC).start() 
symbol_g_RAREBTC = 'RAREBTC' 
price_bids_g_RAREBTC = Decimal('0.0') 
qty_bids_g_RAREBTC = Decimal('0.0') 
price_asks_g_RAREBTC = Decimal('0.0') 
qty_asks_g_RAREBTC = Decimal('0.0') 
stepSize_g_RAREBTC = Decimal('0.1') 


def on_message_RAREBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RAREBTC = 'RAREBTC' 
	price_bids_c_l_RAREBTC = data['b'] 
	qty_bids_c_l_RAREBTC = data['B'] 
	price_asks_c_l_RAREBTC = data['a'] 
	qty_asks_c_l_RAREBTC = data['A'] 

	global symbol_g_RAREBTC 
	global price_bids_g_RAREBTC 
	global qty_bids_g_RAREBTC 
	global price_asks_g_RAREBTC 
	global qty_asks_g_RAREBTC 

	symbol_g_RAREBTC = symbol_c_l_RAREBTC 
	price_bids_g_RAREBTC = Decimal(price_bids_c_l_RAREBTC) 
	qty_bids_g_RAREBTC = Decimal(qty_bids_c_l_RAREBTC) 
	price_asks_g_RAREBTC = Decimal(price_asks_c_l_RAREBTC) 
	qty_asks_g_RAREBTC = Decimal(qty_asks_c_l_RAREBTC) 


def loop_RAREBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rarebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RAREBTC) 
	ws.run_forever() 


Thread(target=loop_RAREBTC).start() 
symbol_g_LAZIOBTC = 'LAZIOBTC' 
price_bids_g_LAZIOBTC = Decimal('0.0') 
qty_bids_g_LAZIOBTC = Decimal('0.0') 
price_asks_g_LAZIOBTC = Decimal('0.0') 
qty_asks_g_LAZIOBTC = Decimal('0.0') 
stepSize_g_LAZIOBTC = Decimal('0.01') 


def on_message_LAZIOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LAZIOBTC = 'LAZIOBTC' 
	price_bids_c_l_LAZIOBTC = data['b'] 
	qty_bids_c_l_LAZIOBTC = data['B'] 
	price_asks_c_l_LAZIOBTC = data['a'] 
	qty_asks_c_l_LAZIOBTC = data['A'] 

	global symbol_g_LAZIOBTC 
	global price_bids_g_LAZIOBTC 
	global qty_bids_g_LAZIOBTC 
	global price_asks_g_LAZIOBTC 
	global qty_asks_g_LAZIOBTC 

	symbol_g_LAZIOBTC = symbol_c_l_LAZIOBTC 
	price_bids_g_LAZIOBTC = Decimal(price_bids_c_l_LAZIOBTC) 
	qty_bids_g_LAZIOBTC = Decimal(qty_bids_c_l_LAZIOBTC) 
	price_asks_g_LAZIOBTC = Decimal(price_asks_c_l_LAZIOBTC) 
	qty_asks_g_LAZIOBTC = Decimal(qty_asks_c_l_LAZIOBTC) 


def loop_LAZIOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/laziobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LAZIOBTC) 
	ws.run_forever() 


Thread(target=loop_LAZIOBTC).start() 
symbol_g_CHESSBTC = 'CHESSBTC' 
price_bids_g_CHESSBTC = Decimal('0.0') 
qty_bids_g_CHESSBTC = Decimal('0.0') 
price_asks_g_CHESSBTC = Decimal('0.0') 
qty_asks_g_CHESSBTC = Decimal('0.0') 
stepSize_g_CHESSBTC = Decimal('0.1') 


def on_message_CHESSBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHESSBTC = 'CHESSBTC' 
	price_bids_c_l_CHESSBTC = data['b'] 
	qty_bids_c_l_CHESSBTC = data['B'] 
	price_asks_c_l_CHESSBTC = data['a'] 
	qty_asks_c_l_CHESSBTC = data['A'] 

	global symbol_g_CHESSBTC 
	global price_bids_g_CHESSBTC 
	global qty_bids_g_CHESSBTC 
	global price_asks_g_CHESSBTC 
	global qty_asks_g_CHESSBTC 

	symbol_g_CHESSBTC = symbol_c_l_CHESSBTC 
	price_bids_g_CHESSBTC = Decimal(price_bids_c_l_CHESSBTC) 
	qty_bids_g_CHESSBTC = Decimal(qty_bids_c_l_CHESSBTC) 
	price_asks_g_CHESSBTC = Decimal(price_asks_c_l_CHESSBTC) 
	qty_asks_g_CHESSBTC = Decimal(qty_asks_c_l_CHESSBTC) 


def loop_CHESSBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chessbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHESSBTC) 
	ws.run_forever() 


Thread(target=loop_CHESSBTC).start() 
symbol_g_DARBTC = 'DARBTC' 
price_bids_g_DARBTC = Decimal('0.0') 
qty_bids_g_DARBTC = Decimal('0.0') 
price_asks_g_DARBTC = Decimal('0.0') 
qty_asks_g_DARBTC = Decimal('0.0') 
stepSize_g_DARBTC = Decimal('1.0') 


def on_message_DARBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DARBTC = 'DARBTC' 
	price_bids_c_l_DARBTC = data['b'] 
	qty_bids_c_l_DARBTC = data['B'] 
	price_asks_c_l_DARBTC = data['a'] 
	qty_asks_c_l_DARBTC = data['A'] 

	global symbol_g_DARBTC 
	global price_bids_g_DARBTC 
	global qty_bids_g_DARBTC 
	global price_asks_g_DARBTC 
	global qty_asks_g_DARBTC 

	symbol_g_DARBTC = symbol_c_l_DARBTC 
	price_bids_g_DARBTC = Decimal(price_bids_c_l_DARBTC) 
	qty_bids_g_DARBTC = Decimal(qty_bids_c_l_DARBTC) 
	price_asks_g_DARBTC = Decimal(price_asks_c_l_DARBTC) 
	qty_asks_g_DARBTC = Decimal(qty_asks_c_l_DARBTC) 


def loop_DARBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/darbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DARBTC) 
	ws.run_forever() 


Thread(target=loop_DARBTC).start() 
symbol_g_BNXBTC = 'BNXBTC' 
price_bids_g_BNXBTC = Decimal('0.0') 
qty_bids_g_BNXBTC = Decimal('0.0') 
price_asks_g_BNXBTC = Decimal('0.0') 
qty_asks_g_BNXBTC = Decimal('0.0') 
stepSize_g_BNXBTC = Decimal('0.001') 


def on_message_BNXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNXBTC = 'BNXBTC' 
	price_bids_c_l_BNXBTC = data['b'] 
	qty_bids_c_l_BNXBTC = data['B'] 
	price_asks_c_l_BNXBTC = data['a'] 
	qty_asks_c_l_BNXBTC = data['A'] 

	global symbol_g_BNXBTC 
	global price_bids_g_BNXBTC 
	global qty_bids_g_BNXBTC 
	global price_asks_g_BNXBTC 
	global qty_asks_g_BNXBTC 

	symbol_g_BNXBTC = symbol_c_l_BNXBTC 
	price_bids_g_BNXBTC = Decimal(price_bids_c_l_BNXBTC) 
	qty_bids_g_BNXBTC = Decimal(qty_bids_c_l_BNXBTC) 
	price_asks_g_BNXBTC = Decimal(price_asks_c_l_BNXBTC) 
	qty_asks_g_BNXBTC = Decimal(qty_asks_c_l_BNXBTC) 


def loop_BNXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNXBTC) 
	ws.run_forever() 


Thread(target=loop_BNXBTC).start() 
symbol_g_MOVRBTC = 'MOVRBTC' 
price_bids_g_MOVRBTC = Decimal('0.0') 
qty_bids_g_MOVRBTC = Decimal('0.0') 
price_asks_g_MOVRBTC = Decimal('0.0') 
qty_asks_g_MOVRBTC = Decimal('0.0') 
stepSize_g_MOVRBTC = Decimal('0.001') 


def on_message_MOVRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MOVRBTC = 'MOVRBTC' 
	price_bids_c_l_MOVRBTC = data['b'] 
	qty_bids_c_l_MOVRBTC = data['B'] 
	price_asks_c_l_MOVRBTC = data['a'] 
	qty_asks_c_l_MOVRBTC = data['A'] 

	global symbol_g_MOVRBTC 
	global price_bids_g_MOVRBTC 
	global qty_bids_g_MOVRBTC 
	global price_asks_g_MOVRBTC 
	global qty_asks_g_MOVRBTC 

	symbol_g_MOVRBTC = symbol_c_l_MOVRBTC 
	price_bids_g_MOVRBTC = Decimal(price_bids_c_l_MOVRBTC) 
	qty_bids_g_MOVRBTC = Decimal(qty_bids_c_l_MOVRBTC) 
	price_asks_g_MOVRBTC = Decimal(price_asks_c_l_MOVRBTC) 
	qty_asks_g_MOVRBTC = Decimal(qty_asks_c_l_MOVRBTC) 


def loop_MOVRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/movrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MOVRBTC) 
	ws.run_forever() 


Thread(target=loop_MOVRBTC).start() 
symbol_g_CITYBTC = 'CITYBTC' 
price_bids_g_CITYBTC = Decimal('0.0') 
qty_bids_g_CITYBTC = Decimal('0.0') 
price_asks_g_CITYBTC = Decimal('0.0') 
qty_asks_g_CITYBTC = Decimal('0.0') 
stepSize_g_CITYBTC = Decimal('0.01') 


def on_message_CITYBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CITYBTC = 'CITYBTC' 
	price_bids_c_l_CITYBTC = data['b'] 
	qty_bids_c_l_CITYBTC = data['B'] 
	price_asks_c_l_CITYBTC = data['a'] 
	qty_asks_c_l_CITYBTC = data['A'] 

	global symbol_g_CITYBTC 
	global price_bids_g_CITYBTC 
	global qty_bids_g_CITYBTC 
	global price_asks_g_CITYBTC 
	global qty_asks_g_CITYBTC 

	symbol_g_CITYBTC = symbol_c_l_CITYBTC 
	price_bids_g_CITYBTC = Decimal(price_bids_c_l_CITYBTC) 
	qty_bids_g_CITYBTC = Decimal(qty_bids_c_l_CITYBTC) 
	price_asks_g_CITYBTC = Decimal(price_asks_c_l_CITYBTC) 
	qty_asks_g_CITYBTC = Decimal(qty_asks_c_l_CITYBTC) 


def loop_CITYBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/citybtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CITYBTC) 
	ws.run_forever() 


Thread(target=loop_CITYBTC).start() 
symbol_g_ENSBTC = 'ENSBTC' 
price_bids_g_ENSBTC = Decimal('0.0') 
qty_bids_g_ENSBTC = Decimal('0.0') 
price_asks_g_ENSBTC = Decimal('0.0') 
qty_asks_g_ENSBTC = Decimal('0.0') 
stepSize_g_ENSBTC = Decimal('0.01') 


def on_message_ENSBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENSBTC = 'ENSBTC' 
	price_bids_c_l_ENSBTC = data['b'] 
	qty_bids_c_l_ENSBTC = data['B'] 
	price_asks_c_l_ENSBTC = data['a'] 
	qty_asks_c_l_ENSBTC = data['A'] 

	global symbol_g_ENSBTC 
	global price_bids_g_ENSBTC 
	global qty_bids_g_ENSBTC 
	global price_asks_g_ENSBTC 
	global qty_asks_g_ENSBTC 

	symbol_g_ENSBTC = symbol_c_l_ENSBTC 
	price_bids_g_ENSBTC = Decimal(price_bids_c_l_ENSBTC) 
	qty_bids_g_ENSBTC = Decimal(qty_bids_c_l_ENSBTC) 
	price_asks_g_ENSBTC = Decimal(price_asks_c_l_ENSBTC) 
	qty_asks_g_ENSBTC = Decimal(qty_asks_c_l_ENSBTC) 


def loop_ENSBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ensbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENSBTC) 
	ws.run_forever() 


Thread(target=loop_ENSBTC).start() 
symbol_g_QIBTC = 'QIBTC' 
price_bids_g_QIBTC = Decimal('0.0') 
qty_bids_g_QIBTC = Decimal('0.0') 
price_asks_g_QIBTC = Decimal('0.0') 
qty_asks_g_QIBTC = Decimal('0.0') 
stepSize_g_QIBTC = Decimal('1.0') 


def on_message_QIBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QIBTC = 'QIBTC' 
	price_bids_c_l_QIBTC = data['b'] 
	qty_bids_c_l_QIBTC = data['B'] 
	price_asks_c_l_QIBTC = data['a'] 
	qty_asks_c_l_QIBTC = data['A'] 

	global symbol_g_QIBTC 
	global price_bids_g_QIBTC 
	global qty_bids_g_QIBTC 
	global price_asks_g_QIBTC 
	global qty_asks_g_QIBTC 

	symbol_g_QIBTC = symbol_c_l_QIBTC 
	price_bids_g_QIBTC = Decimal(price_bids_c_l_QIBTC) 
	qty_bids_g_QIBTC = Decimal(qty_bids_c_l_QIBTC) 
	price_asks_g_QIBTC = Decimal(price_asks_c_l_QIBTC) 
	qty_asks_g_QIBTC = Decimal(qty_asks_c_l_QIBTC) 


def loop_QIBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/qibtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QIBTC) 
	ws.run_forever() 


Thread(target=loop_QIBTC).start() 
symbol_g_PORTOBTC = 'PORTOBTC' 
price_bids_g_PORTOBTC = Decimal('0.0') 
qty_bids_g_PORTOBTC = Decimal('0.0') 
price_asks_g_PORTOBTC = Decimal('0.0') 
qty_asks_g_PORTOBTC = Decimal('0.0') 
stepSize_g_PORTOBTC = Decimal('0.01') 


def on_message_PORTOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PORTOBTC = 'PORTOBTC' 
	price_bids_c_l_PORTOBTC = data['b'] 
	qty_bids_c_l_PORTOBTC = data['B'] 
	price_asks_c_l_PORTOBTC = data['a'] 
	qty_asks_c_l_PORTOBTC = data['A'] 

	global symbol_g_PORTOBTC 
	global price_bids_g_PORTOBTC 
	global qty_bids_g_PORTOBTC 
	global price_asks_g_PORTOBTC 
	global qty_asks_g_PORTOBTC 

	symbol_g_PORTOBTC = symbol_c_l_PORTOBTC 
	price_bids_g_PORTOBTC = Decimal(price_bids_c_l_PORTOBTC) 
	qty_bids_g_PORTOBTC = Decimal(qty_bids_c_l_PORTOBTC) 
	price_asks_g_PORTOBTC = Decimal(price_asks_c_l_PORTOBTC) 
	qty_asks_g_PORTOBTC = Decimal(qty_asks_c_l_PORTOBTC) 


def loop_PORTOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/portobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PORTOBTC) 
	ws.run_forever() 


Thread(target=loop_PORTOBTC).start() 
symbol_g_JASMYBTC = 'JASMYBTC' 
price_bids_g_JASMYBTC = Decimal('0.0') 
qty_bids_g_JASMYBTC = Decimal('0.0') 
price_asks_g_JASMYBTC = Decimal('0.0') 
qty_asks_g_JASMYBTC = Decimal('0.0') 
stepSize_g_JASMYBTC = Decimal('0.1') 


def on_message_JASMYBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JASMYBTC = 'JASMYBTC' 
	price_bids_c_l_JASMYBTC = data['b'] 
	qty_bids_c_l_JASMYBTC = data['B'] 
	price_asks_c_l_JASMYBTC = data['a'] 
	qty_asks_c_l_JASMYBTC = data['A'] 

	global symbol_g_JASMYBTC 
	global price_bids_g_JASMYBTC 
	global qty_bids_g_JASMYBTC 
	global price_asks_g_JASMYBTC 
	global qty_asks_g_JASMYBTC 

	symbol_g_JASMYBTC = symbol_c_l_JASMYBTC 
	price_bids_g_JASMYBTC = Decimal(price_bids_c_l_JASMYBTC) 
	qty_bids_g_JASMYBTC = Decimal(qty_bids_c_l_JASMYBTC) 
	price_asks_g_JASMYBTC = Decimal(price_asks_c_l_JASMYBTC) 
	qty_asks_g_JASMYBTC = Decimal(qty_asks_c_l_JASMYBTC) 


def loop_JASMYBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/jasmybtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JASMYBTC) 
	ws.run_forever() 


Thread(target=loop_JASMYBTC).start() 
symbol_g_AMPBTC = 'AMPBTC' 
price_bids_g_AMPBTC = Decimal('0.0') 
qty_bids_g_AMPBTC = Decimal('0.0') 
price_asks_g_AMPBTC = Decimal('0.0') 
qty_asks_g_AMPBTC = Decimal('0.0') 
stepSize_g_AMPBTC = Decimal('1.0') 


def on_message_AMPBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AMPBTC = 'AMPBTC' 
	price_bids_c_l_AMPBTC = data['b'] 
	qty_bids_c_l_AMPBTC = data['B'] 
	price_asks_c_l_AMPBTC = data['a'] 
	qty_asks_c_l_AMPBTC = data['A'] 

	global symbol_g_AMPBTC 
	global price_bids_g_AMPBTC 
	global qty_bids_g_AMPBTC 
	global price_asks_g_AMPBTC 
	global qty_asks_g_AMPBTC 

	symbol_g_AMPBTC = symbol_c_l_AMPBTC 
	price_bids_g_AMPBTC = Decimal(price_bids_c_l_AMPBTC) 
	qty_bids_g_AMPBTC = Decimal(qty_bids_c_l_AMPBTC) 
	price_asks_g_AMPBTC = Decimal(price_asks_c_l_AMPBTC) 
	qty_asks_g_AMPBTC = Decimal(qty_asks_c_l_AMPBTC) 


def loop_AMPBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ampbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AMPBTC) 
	ws.run_forever() 


Thread(target=loop_AMPBTC).start() 
symbol_g_PLABTC = 'PLABTC' 
price_bids_g_PLABTC = Decimal('0.0') 
qty_bids_g_PLABTC = Decimal('0.0') 
price_asks_g_PLABTC = Decimal('0.0') 
qty_asks_g_PLABTC = Decimal('0.0') 
stepSize_g_PLABTC = Decimal('0.01') 


def on_message_PLABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PLABTC = 'PLABTC' 
	price_bids_c_l_PLABTC = data['b'] 
	qty_bids_c_l_PLABTC = data['B'] 
	price_asks_c_l_PLABTC = data['a'] 
	qty_asks_c_l_PLABTC = data['A'] 

	global symbol_g_PLABTC 
	global price_bids_g_PLABTC 
	global qty_bids_g_PLABTC 
	global price_asks_g_PLABTC 
	global qty_asks_g_PLABTC 

	symbol_g_PLABTC = symbol_c_l_PLABTC 
	price_bids_g_PLABTC = Decimal(price_bids_c_l_PLABTC) 
	qty_bids_g_PLABTC = Decimal(qty_bids_c_l_PLABTC) 
	price_asks_g_PLABTC = Decimal(price_asks_c_l_PLABTC) 
	qty_asks_g_PLABTC = Decimal(qty_asks_c_l_PLABTC) 


def loop_PLABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/plabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PLABTC) 
	ws.run_forever() 


Thread(target=loop_PLABTC).start() 
symbol_g_PYRBTC = 'PYRBTC' 
price_bids_g_PYRBTC = Decimal('0.0') 
qty_bids_g_PYRBTC = Decimal('0.0') 
price_asks_g_PYRBTC = Decimal('0.0') 
qty_asks_g_PYRBTC = Decimal('0.0') 
stepSize_g_PYRBTC = Decimal('0.001') 


def on_message_PYRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PYRBTC = 'PYRBTC' 
	price_bids_c_l_PYRBTC = data['b'] 
	qty_bids_c_l_PYRBTC = data['B'] 
	price_asks_c_l_PYRBTC = data['a'] 
	qty_asks_c_l_PYRBTC = data['A'] 

	global symbol_g_PYRBTC 
	global price_bids_g_PYRBTC 
	global qty_bids_g_PYRBTC 
	global price_asks_g_PYRBTC 
	global qty_asks_g_PYRBTC 

	symbol_g_PYRBTC = symbol_c_l_PYRBTC 
	price_bids_g_PYRBTC = Decimal(price_bids_c_l_PYRBTC) 
	qty_bids_g_PYRBTC = Decimal(qty_bids_c_l_PYRBTC) 
	price_asks_g_PYRBTC = Decimal(price_asks_c_l_PYRBTC) 
	qty_asks_g_PYRBTC = Decimal(qty_asks_c_l_PYRBTC) 


def loop_PYRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/pyrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PYRBTC) 
	ws.run_forever() 


Thread(target=loop_PYRBTC).start() 
symbol_g_RNDRBTC = 'RNDRBTC' 
price_bids_g_RNDRBTC = Decimal('0.0') 
qty_bids_g_RNDRBTC = Decimal('0.0') 
price_asks_g_RNDRBTC = Decimal('0.0') 
qty_asks_g_RNDRBTC = Decimal('0.0') 
stepSize_g_RNDRBTC = Decimal('0.01') 


def on_message_RNDRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RNDRBTC = 'RNDRBTC' 
	price_bids_c_l_RNDRBTC = data['b'] 
	qty_bids_c_l_RNDRBTC = data['B'] 
	price_asks_c_l_RNDRBTC = data['a'] 
	qty_asks_c_l_RNDRBTC = data['A'] 

	global symbol_g_RNDRBTC 
	global price_bids_g_RNDRBTC 
	global qty_bids_g_RNDRBTC 
	global price_asks_g_RNDRBTC 
	global qty_asks_g_RNDRBTC 

	symbol_g_RNDRBTC = symbol_c_l_RNDRBTC 
	price_bids_g_RNDRBTC = Decimal(price_bids_c_l_RNDRBTC) 
	qty_bids_g_RNDRBTC = Decimal(qty_bids_c_l_RNDRBTC) 
	price_asks_g_RNDRBTC = Decimal(price_asks_c_l_RNDRBTC) 
	qty_asks_g_RNDRBTC = Decimal(qty_asks_c_l_RNDRBTC) 


def loop_RNDRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rndrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RNDRBTC) 
	ws.run_forever() 


Thread(target=loop_RNDRBTC).start() 
symbol_g_ALCXBTC = 'ALCXBTC' 
price_bids_g_ALCXBTC = Decimal('0.0') 
qty_bids_g_ALCXBTC = Decimal('0.0') 
price_asks_g_ALCXBTC = Decimal('0.0') 
qty_asks_g_ALCXBTC = Decimal('0.0') 
stepSize_g_ALCXBTC = Decimal('0.0001') 


def on_message_ALCXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALCXBTC = 'ALCXBTC' 
	price_bids_c_l_ALCXBTC = data['b'] 
	qty_bids_c_l_ALCXBTC = data['B'] 
	price_asks_c_l_ALCXBTC = data['a'] 
	qty_asks_c_l_ALCXBTC = data['A'] 

	global symbol_g_ALCXBTC 
	global price_bids_g_ALCXBTC 
	global qty_bids_g_ALCXBTC 
	global price_asks_g_ALCXBTC 
	global qty_asks_g_ALCXBTC 

	symbol_g_ALCXBTC = symbol_c_l_ALCXBTC 
	price_bids_g_ALCXBTC = Decimal(price_bids_c_l_ALCXBTC) 
	qty_bids_g_ALCXBTC = Decimal(qty_bids_c_l_ALCXBTC) 
	price_asks_g_ALCXBTC = Decimal(price_asks_c_l_ALCXBTC) 
	qty_asks_g_ALCXBTC = Decimal(qty_asks_c_l_ALCXBTC) 


def loop_ALCXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alcxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALCXBTC) 
	ws.run_forever() 


Thread(target=loop_ALCXBTC).start() 
symbol_g_SANTOSBTC = 'SANTOSBTC' 
price_bids_g_SANTOSBTC = Decimal('0.0') 
qty_bids_g_SANTOSBTC = Decimal('0.0') 
price_asks_g_SANTOSBTC = Decimal('0.0') 
qty_asks_g_SANTOSBTC = Decimal('0.0') 
stepSize_g_SANTOSBTC = Decimal('0.01') 


def on_message_SANTOSBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SANTOSBTC = 'SANTOSBTC' 
	price_bids_c_l_SANTOSBTC = data['b'] 
	qty_bids_c_l_SANTOSBTC = data['B'] 
	price_asks_c_l_SANTOSBTC = data['a'] 
	qty_asks_c_l_SANTOSBTC = data['A'] 

	global symbol_g_SANTOSBTC 
	global price_bids_g_SANTOSBTC 
	global qty_bids_g_SANTOSBTC 
	global price_asks_g_SANTOSBTC 
	global qty_asks_g_SANTOSBTC 

	symbol_g_SANTOSBTC = symbol_c_l_SANTOSBTC 
	price_bids_g_SANTOSBTC = Decimal(price_bids_c_l_SANTOSBTC) 
	qty_bids_g_SANTOSBTC = Decimal(qty_bids_c_l_SANTOSBTC) 
	price_asks_g_SANTOSBTC = Decimal(price_asks_c_l_SANTOSBTC) 
	qty_asks_g_SANTOSBTC = Decimal(qty_asks_c_l_SANTOSBTC) 


def loop_SANTOSBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/santosbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SANTOSBTC) 
	ws.run_forever() 


Thread(target=loop_SANTOSBTC).start() 
symbol_g_MCBTC = 'MCBTC' 
price_bids_g_MCBTC = Decimal('0.0') 
qty_bids_g_MCBTC = Decimal('0.0') 
price_asks_g_MCBTC = Decimal('0.0') 
qty_asks_g_MCBTC = Decimal('0.0') 
stepSize_g_MCBTC = Decimal('0.01') 


def on_message_MCBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MCBTC = 'MCBTC' 
	price_bids_c_l_MCBTC = data['b'] 
	qty_bids_c_l_MCBTC = data['B'] 
	price_asks_c_l_MCBTC = data['a'] 
	qty_asks_c_l_MCBTC = data['A'] 

	global symbol_g_MCBTC 
	global price_bids_g_MCBTC 
	global qty_bids_g_MCBTC 
	global price_asks_g_MCBTC 
	global qty_asks_g_MCBTC 

	symbol_g_MCBTC = symbol_c_l_MCBTC 
	price_bids_g_MCBTC = Decimal(price_bids_c_l_MCBTC) 
	qty_bids_g_MCBTC = Decimal(qty_bids_c_l_MCBTC) 
	price_asks_g_MCBTC = Decimal(price_asks_c_l_MCBTC) 
	qty_asks_g_MCBTC = Decimal(qty_asks_c_l_MCBTC) 


def loop_MCBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mcbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MCBTC) 
	ws.run_forever() 


Thread(target=loop_MCBTC).start() 
symbol_g_BICOBTC = 'BICOBTC' 
price_bids_g_BICOBTC = Decimal('0.0') 
qty_bids_g_BICOBTC = Decimal('0.0') 
price_asks_g_BICOBTC = Decimal('0.0') 
qty_asks_g_BICOBTC = Decimal('0.0') 
stepSize_g_BICOBTC = Decimal('0.01') 


def on_message_BICOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BICOBTC = 'BICOBTC' 
	price_bids_c_l_BICOBTC = data['b'] 
	qty_bids_c_l_BICOBTC = data['B'] 
	price_asks_c_l_BICOBTC = data['a'] 
	qty_asks_c_l_BICOBTC = data['A'] 

	global symbol_g_BICOBTC 
	global price_bids_g_BICOBTC 
	global qty_bids_g_BICOBTC 
	global price_asks_g_BICOBTC 
	global qty_asks_g_BICOBTC 

	symbol_g_BICOBTC = symbol_c_l_BICOBTC 
	price_bids_g_BICOBTC = Decimal(price_bids_c_l_BICOBTC) 
	qty_bids_g_BICOBTC = Decimal(qty_bids_c_l_BICOBTC) 
	price_asks_g_BICOBTC = Decimal(price_asks_c_l_BICOBTC) 
	qty_asks_g_BICOBTC = Decimal(qty_asks_c_l_BICOBTC) 


def loop_BICOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bicobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BICOBTC) 
	ws.run_forever() 


Thread(target=loop_BICOBTC).start() 
symbol_g_FLUXBTC = 'FLUXBTC' 
price_bids_g_FLUXBTC = Decimal('0.0') 
qty_bids_g_FLUXBTC = Decimal('0.0') 
price_asks_g_FLUXBTC = Decimal('0.0') 
qty_asks_g_FLUXBTC = Decimal('0.0') 
stepSize_g_FLUXBTC = Decimal('0.01') 


def on_message_FLUXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FLUXBTC = 'FLUXBTC' 
	price_bids_c_l_FLUXBTC = data['b'] 
	qty_bids_c_l_FLUXBTC = data['B'] 
	price_asks_c_l_FLUXBTC = data['a'] 
	qty_asks_c_l_FLUXBTC = data['A'] 

	global symbol_g_FLUXBTC 
	global price_bids_g_FLUXBTC 
	global qty_bids_g_FLUXBTC 
	global price_asks_g_FLUXBTC 
	global qty_asks_g_FLUXBTC 

	symbol_g_FLUXBTC = symbol_c_l_FLUXBTC 
	price_bids_g_FLUXBTC = Decimal(price_bids_c_l_FLUXBTC) 
	qty_bids_g_FLUXBTC = Decimal(qty_bids_c_l_FLUXBTC) 
	price_asks_g_FLUXBTC = Decimal(price_asks_c_l_FLUXBTC) 
	qty_asks_g_FLUXBTC = Decimal(qty_asks_c_l_FLUXBTC) 


def loop_FLUXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fluxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FLUXBTC) 
	ws.run_forever() 


Thread(target=loop_FLUXBTC).start() 
symbol_g_VOXELBTC = 'VOXELBTC' 
price_bids_g_VOXELBTC = Decimal('0.0') 
qty_bids_g_VOXELBTC = Decimal('0.0') 
price_asks_g_VOXELBTC = Decimal('0.0') 
qty_asks_g_VOXELBTC = Decimal('0.0') 
stepSize_g_VOXELBTC = Decimal('0.1') 


def on_message_VOXELBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VOXELBTC = 'VOXELBTC' 
	price_bids_c_l_VOXELBTC = data['b'] 
	qty_bids_c_l_VOXELBTC = data['B'] 
	price_asks_c_l_VOXELBTC = data['a'] 
	qty_asks_c_l_VOXELBTC = data['A'] 

	global symbol_g_VOXELBTC 
	global price_bids_g_VOXELBTC 
	global qty_bids_g_VOXELBTC 
	global price_asks_g_VOXELBTC 
	global qty_asks_g_VOXELBTC 

	symbol_g_VOXELBTC = symbol_c_l_VOXELBTC 
	price_bids_g_VOXELBTC = Decimal(price_bids_c_l_VOXELBTC) 
	qty_bids_g_VOXELBTC = Decimal(qty_bids_c_l_VOXELBTC) 
	price_asks_g_VOXELBTC = Decimal(price_asks_c_l_VOXELBTC) 
	qty_asks_g_VOXELBTC = Decimal(qty_asks_c_l_VOXELBTC) 


def loop_VOXELBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/voxelbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VOXELBTC) 
	ws.run_forever() 


Thread(target=loop_VOXELBTC).start() 
symbol_g_HIGHBTC = 'HIGHBTC' 
price_bids_g_HIGHBTC = Decimal('0.0') 
qty_bids_g_HIGHBTC = Decimal('0.0') 
price_asks_g_HIGHBTC = Decimal('0.0') 
qty_asks_g_HIGHBTC = Decimal('0.0') 
stepSize_g_HIGHBTC = Decimal('0.001') 


def on_message_HIGHBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HIGHBTC = 'HIGHBTC' 
	price_bids_c_l_HIGHBTC = data['b'] 
	qty_bids_c_l_HIGHBTC = data['B'] 
	price_asks_c_l_HIGHBTC = data['a'] 
	qty_asks_c_l_HIGHBTC = data['A'] 

	global symbol_g_HIGHBTC 
	global price_bids_g_HIGHBTC 
	global qty_bids_g_HIGHBTC 
	global price_asks_g_HIGHBTC 
	global qty_asks_g_HIGHBTC 

	symbol_g_HIGHBTC = symbol_c_l_HIGHBTC 
	price_bids_g_HIGHBTC = Decimal(price_bids_c_l_HIGHBTC) 
	qty_bids_g_HIGHBTC = Decimal(qty_bids_c_l_HIGHBTC) 
	price_asks_g_HIGHBTC = Decimal(price_asks_c_l_HIGHBTC) 
	qty_asks_g_HIGHBTC = Decimal(qty_asks_c_l_HIGHBTC) 


def loop_HIGHBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/highbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HIGHBTC) 
	ws.run_forever() 


Thread(target=loop_HIGHBTC).start() 
symbol_g_CVXBTC = 'CVXBTC' 
price_bids_g_CVXBTC = Decimal('0.0') 
qty_bids_g_CVXBTC = Decimal('0.0') 
price_asks_g_CVXBTC = Decimal('0.0') 
qty_asks_g_CVXBTC = Decimal('0.0') 
stepSize_g_CVXBTC = Decimal('0.001') 


def on_message_CVXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CVXBTC = 'CVXBTC' 
	price_bids_c_l_CVXBTC = data['b'] 
	qty_bids_c_l_CVXBTC = data['B'] 
	price_asks_c_l_CVXBTC = data['a'] 
	qty_asks_c_l_CVXBTC = data['A'] 

	global symbol_g_CVXBTC 
	global price_bids_g_CVXBTC 
	global qty_bids_g_CVXBTC 
	global price_asks_g_CVXBTC 
	global qty_asks_g_CVXBTC 

	symbol_g_CVXBTC = symbol_c_l_CVXBTC 
	price_bids_g_CVXBTC = Decimal(price_bids_c_l_CVXBTC) 
	qty_bids_g_CVXBTC = Decimal(qty_bids_c_l_CVXBTC) 
	price_asks_g_CVXBTC = Decimal(price_asks_c_l_CVXBTC) 
	qty_asks_g_CVXBTC = Decimal(qty_asks_c_l_CVXBTC) 


def loop_CVXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cvxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CVXBTC) 
	ws.run_forever() 


Thread(target=loop_CVXBTC).start() 
symbol_g_PEOPLEBTC = 'PEOPLEBTC' 
price_bids_g_PEOPLEBTC = Decimal('0.0') 
qty_bids_g_PEOPLEBTC = Decimal('0.0') 
price_asks_g_PEOPLEBTC = Decimal('0.0') 
qty_asks_g_PEOPLEBTC = Decimal('0.0') 
stepSize_g_PEOPLEBTC = Decimal('0.1') 


def on_message_PEOPLEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PEOPLEBTC = 'PEOPLEBTC' 
	price_bids_c_l_PEOPLEBTC = data['b'] 
	qty_bids_c_l_PEOPLEBTC = data['B'] 
	price_asks_c_l_PEOPLEBTC = data['a'] 
	qty_asks_c_l_PEOPLEBTC = data['A'] 

	global symbol_g_PEOPLEBTC 
	global price_bids_g_PEOPLEBTC 
	global qty_bids_g_PEOPLEBTC 
	global price_asks_g_PEOPLEBTC 
	global qty_asks_g_PEOPLEBTC 

	symbol_g_PEOPLEBTC = symbol_c_l_PEOPLEBTC 
	price_bids_g_PEOPLEBTC = Decimal(price_bids_c_l_PEOPLEBTC) 
	qty_bids_g_PEOPLEBTC = Decimal(qty_bids_c_l_PEOPLEBTC) 
	price_asks_g_PEOPLEBTC = Decimal(price_asks_c_l_PEOPLEBTC) 
	qty_asks_g_PEOPLEBTC = Decimal(qty_asks_c_l_PEOPLEBTC) 


def loop_PEOPLEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/peoplebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PEOPLEBTC) 
	ws.run_forever() 


Thread(target=loop_PEOPLEBTC).start() 
symbol_g_JOEBTC = 'JOEBTC' 
price_bids_g_JOEBTC = Decimal('0.0') 
qty_bids_g_JOEBTC = Decimal('0.0') 
price_asks_g_JOEBTC = Decimal('0.0') 
qty_asks_g_JOEBTC = Decimal('0.0') 
stepSize_g_JOEBTC = Decimal('0.01') 


def on_message_JOEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JOEBTC = 'JOEBTC' 
	price_bids_c_l_JOEBTC = data['b'] 
	qty_bids_c_l_JOEBTC = data['B'] 
	price_asks_c_l_JOEBTC = data['a'] 
	qty_asks_c_l_JOEBTC = data['A'] 

	global symbol_g_JOEBTC 
	global price_bids_g_JOEBTC 
	global qty_bids_g_JOEBTC 
	global price_asks_g_JOEBTC 
	global qty_asks_g_JOEBTC 

	symbol_g_JOEBTC = symbol_c_l_JOEBTC 
	price_bids_g_JOEBTC = Decimal(price_bids_c_l_JOEBTC) 
	qty_bids_g_JOEBTC = Decimal(qty_bids_c_l_JOEBTC) 
	price_asks_g_JOEBTC = Decimal(price_asks_c_l_JOEBTC) 
	qty_asks_g_JOEBTC = Decimal(qty_asks_c_l_JOEBTC) 


def loop_JOEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/joebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JOEBTC) 
	ws.run_forever() 


Thread(target=loop_JOEBTC).start() 
symbol_g_ACHBTC = 'ACHBTC' 
price_bids_g_ACHBTC = Decimal('0.0') 
qty_bids_g_ACHBTC = Decimal('0.0') 
price_asks_g_ACHBTC = Decimal('0.0') 
qty_asks_g_ACHBTC = Decimal('0.0') 
stepSize_g_ACHBTC = Decimal('1.0') 


def on_message_ACHBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ACHBTC = 'ACHBTC' 
	price_bids_c_l_ACHBTC = data['b'] 
	qty_bids_c_l_ACHBTC = data['B'] 
	price_asks_c_l_ACHBTC = data['a'] 
	qty_asks_c_l_ACHBTC = data['A'] 

	global symbol_g_ACHBTC 
	global price_bids_g_ACHBTC 
	global qty_bids_g_ACHBTC 
	global price_asks_g_ACHBTC 
	global qty_asks_g_ACHBTC 

	symbol_g_ACHBTC = symbol_c_l_ACHBTC 
	price_bids_g_ACHBTC = Decimal(price_bids_c_l_ACHBTC) 
	qty_bids_g_ACHBTC = Decimal(qty_bids_c_l_ACHBTC) 
	price_asks_g_ACHBTC = Decimal(price_asks_c_l_ACHBTC) 
	qty_asks_g_ACHBTC = Decimal(qty_asks_c_l_ACHBTC) 


def loop_ACHBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/achbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ACHBTC) 
	ws.run_forever() 


Thread(target=loop_ACHBTC).start() 
symbol_g_IMXBTC = 'IMXBTC' 
price_bids_g_IMXBTC = Decimal('0.0') 
qty_bids_g_IMXBTC = Decimal('0.0') 
price_asks_g_IMXBTC = Decimal('0.0') 
qty_asks_g_IMXBTC = Decimal('0.0') 
stepSize_g_IMXBTC = Decimal('0.01') 


def on_message_IMXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IMXBTC = 'IMXBTC' 
	price_bids_c_l_IMXBTC = data['b'] 
	qty_bids_c_l_IMXBTC = data['B'] 
	price_asks_c_l_IMXBTC = data['a'] 
	qty_asks_c_l_IMXBTC = data['A'] 

	global symbol_g_IMXBTC 
	global price_bids_g_IMXBTC 
	global qty_bids_g_IMXBTC 
	global price_asks_g_IMXBTC 
	global qty_asks_g_IMXBTC 

	symbol_g_IMXBTC = symbol_c_l_IMXBTC 
	price_bids_g_IMXBTC = Decimal(price_bids_c_l_IMXBTC) 
	qty_bids_g_IMXBTC = Decimal(qty_bids_c_l_IMXBTC) 
	price_asks_g_IMXBTC = Decimal(price_asks_c_l_IMXBTC) 
	qty_asks_g_IMXBTC = Decimal(qty_asks_c_l_IMXBTC) 


def loop_IMXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/imxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IMXBTC) 
	ws.run_forever() 


Thread(target=loop_IMXBTC).start() 
symbol_g_GLMRBTC = 'GLMRBTC' 
price_bids_g_GLMRBTC = Decimal('0.0') 
qty_bids_g_GLMRBTC = Decimal('0.0') 
price_asks_g_GLMRBTC = Decimal('0.0') 
qty_asks_g_GLMRBTC = Decimal('0.0') 
stepSize_g_GLMRBTC = Decimal('0.1') 


def on_message_GLMRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GLMRBTC = 'GLMRBTC' 
	price_bids_c_l_GLMRBTC = data['b'] 
	qty_bids_c_l_GLMRBTC = data['B'] 
	price_asks_c_l_GLMRBTC = data['a'] 
	qty_asks_c_l_GLMRBTC = data['A'] 

	global symbol_g_GLMRBTC 
	global price_bids_g_GLMRBTC 
	global qty_bids_g_GLMRBTC 
	global price_asks_g_GLMRBTC 
	global qty_asks_g_GLMRBTC 

	symbol_g_GLMRBTC = symbol_c_l_GLMRBTC 
	price_bids_g_GLMRBTC = Decimal(price_bids_c_l_GLMRBTC) 
	qty_bids_g_GLMRBTC = Decimal(qty_bids_c_l_GLMRBTC) 
	price_asks_g_GLMRBTC = Decimal(price_asks_c_l_GLMRBTC) 
	qty_asks_g_GLMRBTC = Decimal(qty_asks_c_l_GLMRBTC) 


def loop_GLMRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/glmrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GLMRBTC) 
	ws.run_forever() 


Thread(target=loop_GLMRBTC).start() 
symbol_g_LOKABTC = 'LOKABTC' 
price_bids_g_LOKABTC = Decimal('0.0') 
qty_bids_g_LOKABTC = Decimal('0.0') 
price_asks_g_LOKABTC = Decimal('0.0') 
qty_asks_g_LOKABTC = Decimal('0.0') 
stepSize_g_LOKABTC = Decimal('0.1') 


def on_message_LOKABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LOKABTC = 'LOKABTC' 
	price_bids_c_l_LOKABTC = data['b'] 
	qty_bids_c_l_LOKABTC = data['B'] 
	price_asks_c_l_LOKABTC = data['a'] 
	qty_asks_c_l_LOKABTC = data['A'] 

	global symbol_g_LOKABTC 
	global price_bids_g_LOKABTC 
	global qty_bids_g_LOKABTC 
	global price_asks_g_LOKABTC 
	global qty_asks_g_LOKABTC 

	symbol_g_LOKABTC = symbol_c_l_LOKABTC 
	price_bids_g_LOKABTC = Decimal(price_bids_c_l_LOKABTC) 
	qty_bids_g_LOKABTC = Decimal(qty_bids_c_l_LOKABTC) 
	price_asks_g_LOKABTC = Decimal(price_asks_c_l_LOKABTC) 
	qty_asks_g_LOKABTC = Decimal(qty_asks_c_l_LOKABTC) 


def loop_LOKABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lokabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LOKABTC) 
	ws.run_forever() 


Thread(target=loop_LOKABTC).start() 
symbol_g_API3BTC = 'API3BTC' 
price_bids_g_API3BTC = Decimal('0.0') 
qty_bids_g_API3BTC = Decimal('0.0') 
price_asks_g_API3BTC = Decimal('0.0') 
qty_asks_g_API3BTC = Decimal('0.0') 
stepSize_g_API3BTC = Decimal('0.01') 


def on_message_API3BTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_API3BTC = 'API3BTC' 
	price_bids_c_l_API3BTC = data['b'] 
	qty_bids_c_l_API3BTC = data['B'] 
	price_asks_c_l_API3BTC = data['a'] 
	qty_asks_c_l_API3BTC = data['A'] 

	global symbol_g_API3BTC 
	global price_bids_g_API3BTC 
	global qty_bids_g_API3BTC 
	global price_asks_g_API3BTC 
	global qty_asks_g_API3BTC 

	symbol_g_API3BTC = symbol_c_l_API3BTC 
	price_bids_g_API3BTC = Decimal(price_bids_c_l_API3BTC) 
	qty_bids_g_API3BTC = Decimal(qty_bids_c_l_API3BTC) 
	price_asks_g_API3BTC = Decimal(price_asks_c_l_API3BTC) 
	qty_asks_g_API3BTC = Decimal(qty_asks_c_l_API3BTC) 


def loop_API3BTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/api3btc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_API3BTC) 
	ws.run_forever() 


Thread(target=loop_API3BTC).start() 
symbol_g_ACABTC = 'ACABTC' 
price_bids_g_ACABTC = Decimal('0.0') 
qty_bids_g_ACABTC = Decimal('0.0') 
price_asks_g_ACABTC = Decimal('0.0') 
qty_asks_g_ACABTC = Decimal('0.0') 
stepSize_g_ACABTC = Decimal('0.01') 


def on_message_ACABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ACABTC = 'ACABTC' 
	price_bids_c_l_ACABTC = data['b'] 
	qty_bids_c_l_ACABTC = data['B'] 
	price_asks_c_l_ACABTC = data['a'] 
	qty_asks_c_l_ACABTC = data['A'] 

	global symbol_g_ACABTC 
	global price_bids_g_ACABTC 
	global qty_bids_g_ACABTC 
	global price_asks_g_ACABTC 
	global qty_asks_g_ACABTC 

	symbol_g_ACABTC = symbol_c_l_ACABTC 
	price_bids_g_ACABTC = Decimal(price_bids_c_l_ACABTC) 
	qty_bids_g_ACABTC = Decimal(qty_bids_c_l_ACABTC) 
	price_asks_g_ACABTC = Decimal(price_asks_c_l_ACABTC) 
	qty_asks_g_ACABTC = Decimal(qty_asks_c_l_ACABTC) 


def loop_ACABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/acabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ACABTC) 
	ws.run_forever() 


Thread(target=loop_ACABTC).start() 
symbol_g_XNOBTC = 'XNOBTC' 
price_bids_g_XNOBTC = Decimal('0.0') 
qty_bids_g_XNOBTC = Decimal('0.0') 
price_asks_g_XNOBTC = Decimal('0.0') 
qty_asks_g_XNOBTC = Decimal('0.0') 
stepSize_g_XNOBTC = Decimal('0.01') 


def on_message_XNOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XNOBTC = 'XNOBTC' 
	price_bids_c_l_XNOBTC = data['b'] 
	qty_bids_c_l_XNOBTC = data['B'] 
	price_asks_c_l_XNOBTC = data['a'] 
	qty_asks_c_l_XNOBTC = data['A'] 

	global symbol_g_XNOBTC 
	global price_bids_g_XNOBTC 
	global qty_bids_g_XNOBTC 
	global price_asks_g_XNOBTC 
	global qty_asks_g_XNOBTC 

	symbol_g_XNOBTC = symbol_c_l_XNOBTC 
	price_bids_g_XNOBTC = Decimal(price_bids_c_l_XNOBTC) 
	qty_bids_g_XNOBTC = Decimal(qty_bids_c_l_XNOBTC) 
	price_asks_g_XNOBTC = Decimal(price_asks_c_l_XNOBTC) 
	qty_asks_g_XNOBTC = Decimal(qty_asks_c_l_XNOBTC) 


def loop_XNOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xnobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XNOBTC) 
	ws.run_forever() 


Thread(target=loop_XNOBTC).start() 
symbol_g_WOOBTC = 'WOOBTC' 
price_bids_g_WOOBTC = Decimal('0.0') 
qty_bids_g_WOOBTC = Decimal('0.0') 
price_asks_g_WOOBTC = Decimal('0.0') 
qty_asks_g_WOOBTC = Decimal('0.0') 
stepSize_g_WOOBTC = Decimal('0.1') 


def on_message_WOOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WOOBTC = 'WOOBTC' 
	price_bids_c_l_WOOBTC = data['b'] 
	qty_bids_c_l_WOOBTC = data['B'] 
	price_asks_c_l_WOOBTC = data['a'] 
	qty_asks_c_l_WOOBTC = data['A'] 

	global symbol_g_WOOBTC 
	global price_bids_g_WOOBTC 
	global qty_bids_g_WOOBTC 
	global price_asks_g_WOOBTC 
	global qty_asks_g_WOOBTC 

	symbol_g_WOOBTC = symbol_c_l_WOOBTC 
	price_bids_g_WOOBTC = Decimal(price_bids_c_l_WOOBTC) 
	qty_bids_g_WOOBTC = Decimal(qty_bids_c_l_WOOBTC) 
	price_asks_g_WOOBTC = Decimal(price_asks_c_l_WOOBTC) 
	qty_asks_g_WOOBTC = Decimal(qty_asks_c_l_WOOBTC) 


def loop_WOOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/woobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WOOBTC) 
	ws.run_forever() 


Thread(target=loop_WOOBTC).start() 
symbol_g_ALPINEBTC = 'ALPINEBTC' 
price_bids_g_ALPINEBTC = Decimal('0.0') 
qty_bids_g_ALPINEBTC = Decimal('0.0') 
price_asks_g_ALPINEBTC = Decimal('0.0') 
qty_asks_g_ALPINEBTC = Decimal('0.0') 
stepSize_g_ALPINEBTC = Decimal('0.01') 


def on_message_ALPINEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALPINEBTC = 'ALPINEBTC' 
	price_bids_c_l_ALPINEBTC = data['b'] 
	qty_bids_c_l_ALPINEBTC = data['B'] 
	price_asks_c_l_ALPINEBTC = data['a'] 
	qty_asks_c_l_ALPINEBTC = data['A'] 

	global symbol_g_ALPINEBTC 
	global price_bids_g_ALPINEBTC 
	global qty_bids_g_ALPINEBTC 
	global price_asks_g_ALPINEBTC 
	global qty_asks_g_ALPINEBTC 

	symbol_g_ALPINEBTC = symbol_c_l_ALPINEBTC 
	price_bids_g_ALPINEBTC = Decimal(price_bids_c_l_ALPINEBTC) 
	qty_bids_g_ALPINEBTC = Decimal(qty_bids_c_l_ALPINEBTC) 
	price_asks_g_ALPINEBTC = Decimal(price_asks_c_l_ALPINEBTC) 
	qty_asks_g_ALPINEBTC = Decimal(qty_asks_c_l_ALPINEBTC) 


def loop_ALPINEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alpinebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALPINEBTC) 
	ws.run_forever() 


Thread(target=loop_ALPINEBTC).start() 
symbol_g_GMTBTC = 'GMTBTC' 
price_bids_g_GMTBTC = Decimal('0.0') 
qty_bids_g_GMTBTC = Decimal('0.0') 
price_asks_g_GMTBTC = Decimal('0.0') 
qty_asks_g_GMTBTC = Decimal('0.0') 
stepSize_g_GMTBTC = Decimal('0.1') 


def on_message_GMTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GMTBTC = 'GMTBTC' 
	price_bids_c_l_GMTBTC = data['b'] 
	qty_bids_c_l_GMTBTC = data['B'] 
	price_asks_c_l_GMTBTC = data['a'] 
	qty_asks_c_l_GMTBTC = data['A'] 

	global symbol_g_GMTBTC 
	global price_bids_g_GMTBTC 
	global qty_bids_g_GMTBTC 
	global price_asks_g_GMTBTC 
	global qty_asks_g_GMTBTC 

	symbol_g_GMTBTC = symbol_c_l_GMTBTC 
	price_bids_g_GMTBTC = Decimal(price_bids_c_l_GMTBTC) 
	qty_bids_g_GMTBTC = Decimal(qty_bids_c_l_GMTBTC) 
	price_asks_g_GMTBTC = Decimal(price_asks_c_l_GMTBTC) 
	qty_asks_g_GMTBTC = Decimal(qty_asks_c_l_GMTBTC) 


def loop_GMTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gmtbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GMTBTC) 
	ws.run_forever() 


Thread(target=loop_GMTBTC).start() 
symbol_g_KDABTC = 'KDABTC' 
price_bids_g_KDABTC = Decimal('0.0') 
qty_bids_g_KDABTC = Decimal('0.0') 
price_asks_g_KDABTC = Decimal('0.0') 
qty_asks_g_KDABTC = Decimal('0.0') 
stepSize_g_KDABTC = Decimal('0.01') 


def on_message_KDABTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KDABTC = 'KDABTC' 
	price_bids_c_l_KDABTC = data['b'] 
	qty_bids_c_l_KDABTC = data['B'] 
	price_asks_c_l_KDABTC = data['a'] 
	qty_asks_c_l_KDABTC = data['A'] 

	global symbol_g_KDABTC 
	global price_bids_g_KDABTC 
	global qty_bids_g_KDABTC 
	global price_asks_g_KDABTC 
	global qty_asks_g_KDABTC 

	symbol_g_KDABTC = symbol_c_l_KDABTC 
	price_bids_g_KDABTC = Decimal(price_bids_c_l_KDABTC) 
	qty_bids_g_KDABTC = Decimal(qty_bids_c_l_KDABTC) 
	price_asks_g_KDABTC = Decimal(price_asks_c_l_KDABTC) 
	qty_asks_g_KDABTC = Decimal(qty_asks_c_l_KDABTC) 


def loop_KDABTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kdabtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KDABTC) 
	ws.run_forever() 


Thread(target=loop_KDABTC).start() 
symbol_g_APEBTC = 'APEBTC' 
price_bids_g_APEBTC = Decimal('0.0') 
qty_bids_g_APEBTC = Decimal('0.0') 
price_asks_g_APEBTC = Decimal('0.0') 
qty_asks_g_APEBTC = Decimal('0.0') 
stepSize_g_APEBTC = Decimal('0.01') 


def on_message_APEBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APEBTC = 'APEBTC' 
	price_bids_c_l_APEBTC = data['b'] 
	qty_bids_c_l_APEBTC = data['B'] 
	price_asks_c_l_APEBTC = data['a'] 
	qty_asks_c_l_APEBTC = data['A'] 

	global symbol_g_APEBTC 
	global price_bids_g_APEBTC 
	global qty_bids_g_APEBTC 
	global price_asks_g_APEBTC 
	global qty_asks_g_APEBTC 

	symbol_g_APEBTC = symbol_c_l_APEBTC 
	price_bids_g_APEBTC = Decimal(price_bids_c_l_APEBTC) 
	qty_bids_g_APEBTC = Decimal(qty_bids_c_l_APEBTC) 
	price_asks_g_APEBTC = Decimal(price_asks_c_l_APEBTC) 
	qty_asks_g_APEBTC = Decimal(qty_asks_c_l_APEBTC) 


def loop_APEBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/apebtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APEBTC) 
	ws.run_forever() 


Thread(target=loop_APEBTC).start() 
symbol_g_MULTIBTC = 'MULTIBTC' 
price_bids_g_MULTIBTC = Decimal('0.0') 
qty_bids_g_MULTIBTC = Decimal('0.0') 
price_asks_g_MULTIBTC = Decimal('0.0') 
qty_asks_g_MULTIBTC = Decimal('0.0') 
stepSize_g_MULTIBTC = Decimal('0.001') 


def on_message_MULTIBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MULTIBTC = 'MULTIBTC' 
	price_bids_c_l_MULTIBTC = data['b'] 
	qty_bids_c_l_MULTIBTC = data['B'] 
	price_asks_c_l_MULTIBTC = data['a'] 
	qty_asks_c_l_MULTIBTC = data['A'] 

	global symbol_g_MULTIBTC 
	global price_bids_g_MULTIBTC 
	global qty_bids_g_MULTIBTC 
	global price_asks_g_MULTIBTC 
	global qty_asks_g_MULTIBTC 

	symbol_g_MULTIBTC = symbol_c_l_MULTIBTC 
	price_bids_g_MULTIBTC = Decimal(price_bids_c_l_MULTIBTC) 
	qty_bids_g_MULTIBTC = Decimal(qty_bids_c_l_MULTIBTC) 
	price_asks_g_MULTIBTC = Decimal(price_asks_c_l_MULTIBTC) 
	qty_asks_g_MULTIBTC = Decimal(qty_asks_c_l_MULTIBTC) 


def loop_MULTIBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/multibtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MULTIBTC) 
	ws.run_forever() 


Thread(target=loop_MULTIBTC).start() 
symbol_g_ASTRBTC = 'ASTRBTC' 
price_bids_g_ASTRBTC = Decimal('0.0') 
qty_bids_g_ASTRBTC = Decimal('0.0') 
price_asks_g_ASTRBTC = Decimal('0.0') 
qty_asks_g_ASTRBTC = Decimal('0.0') 
stepSize_g_ASTRBTC = Decimal('0.1') 


def on_message_ASTRBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ASTRBTC = 'ASTRBTC' 
	price_bids_c_l_ASTRBTC = data['b'] 
	qty_bids_c_l_ASTRBTC = data['B'] 
	price_asks_c_l_ASTRBTC = data['a'] 
	qty_asks_c_l_ASTRBTC = data['A'] 

	global symbol_g_ASTRBTC 
	global price_bids_g_ASTRBTC 
	global qty_bids_g_ASTRBTC 
	global price_asks_g_ASTRBTC 
	global qty_asks_g_ASTRBTC 

	symbol_g_ASTRBTC = symbol_c_l_ASTRBTC 
	price_bids_g_ASTRBTC = Decimal(price_bids_c_l_ASTRBTC) 
	qty_bids_g_ASTRBTC = Decimal(qty_bids_c_l_ASTRBTC) 
	price_asks_g_ASTRBTC = Decimal(price_asks_c_l_ASTRBTC) 
	qty_asks_g_ASTRBTC = Decimal(qty_asks_c_l_ASTRBTC) 


def loop_ASTRBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/astrbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ASTRBTC) 
	ws.run_forever() 


Thread(target=loop_ASTRBTC).start() 
symbol_g_MOBBTC = 'MOBBTC' 
price_bids_g_MOBBTC = Decimal('0.0') 
qty_bids_g_MOBBTC = Decimal('0.0') 
price_asks_g_MOBBTC = Decimal('0.0') 
qty_asks_g_MOBBTC = Decimal('0.0') 
stepSize_g_MOBBTC = Decimal('0.01') 


def on_message_MOBBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MOBBTC = 'MOBBTC' 
	price_bids_c_l_MOBBTC = data['b'] 
	qty_bids_c_l_MOBBTC = data['B'] 
	price_asks_c_l_MOBBTC = data['a'] 
	qty_asks_c_l_MOBBTC = data['A'] 

	global symbol_g_MOBBTC 
	global price_bids_g_MOBBTC 
	global qty_bids_g_MOBBTC 
	global price_asks_g_MOBBTC 
	global qty_asks_g_MOBBTC 

	symbol_g_MOBBTC = symbol_c_l_MOBBTC 
	price_bids_g_MOBBTC = Decimal(price_bids_c_l_MOBBTC) 
	qty_bids_g_MOBBTC = Decimal(qty_bids_c_l_MOBBTC) 
	price_asks_g_MOBBTC = Decimal(price_asks_c_l_MOBBTC) 
	qty_asks_g_MOBBTC = Decimal(qty_asks_c_l_MOBBTC) 


def loop_MOBBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mobbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MOBBTC) 
	ws.run_forever() 


Thread(target=loop_MOBBTC).start() 
symbol_g_NEXOBTC = 'NEXOBTC' 
price_bids_g_NEXOBTC = Decimal('0.0') 
qty_bids_g_NEXOBTC = Decimal('0.0') 
price_asks_g_NEXOBTC = Decimal('0.0') 
qty_asks_g_NEXOBTC = Decimal('0.0') 
stepSize_g_NEXOBTC = Decimal('0.01') 


def on_message_NEXOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEXOBTC = 'NEXOBTC' 
	price_bids_c_l_NEXOBTC = data['b'] 
	qty_bids_c_l_NEXOBTC = data['B'] 
	price_asks_c_l_NEXOBTC = data['a'] 
	qty_asks_c_l_NEXOBTC = data['A'] 

	global symbol_g_NEXOBTC 
	global price_bids_g_NEXOBTC 
	global qty_bids_g_NEXOBTC 
	global price_asks_g_NEXOBTC 
	global qty_asks_g_NEXOBTC 

	symbol_g_NEXOBTC = symbol_c_l_NEXOBTC 
	price_bids_g_NEXOBTC = Decimal(price_bids_c_l_NEXOBTC) 
	qty_bids_g_NEXOBTC = Decimal(qty_bids_c_l_NEXOBTC) 
	price_asks_g_NEXOBTC = Decimal(price_asks_c_l_NEXOBTC) 
	qty_asks_g_NEXOBTC = Decimal(qty_asks_c_l_NEXOBTC) 


def loop_NEXOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nexobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEXOBTC) 
	ws.run_forever() 


Thread(target=loop_NEXOBTC).start() 
symbol_g_GALBTC = 'GALBTC' 
price_bids_g_GALBTC = Decimal('0.0') 
qty_bids_g_GALBTC = Decimal('0.0') 
price_asks_g_GALBTC = Decimal('0.0') 
qty_asks_g_GALBTC = Decimal('0.0') 
stepSize_g_GALBTC = Decimal('0.001') 


def on_message_GALBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALBTC = 'GALBTC' 
	price_bids_c_l_GALBTC = data['b'] 
	qty_bids_c_l_GALBTC = data['B'] 
	price_asks_c_l_GALBTC = data['a'] 
	qty_asks_c_l_GALBTC = data['A'] 

	global symbol_g_GALBTC 
	global price_bids_g_GALBTC 
	global qty_bids_g_GALBTC 
	global price_asks_g_GALBTC 
	global qty_asks_g_GALBTC 

	symbol_g_GALBTC = symbol_c_l_GALBTC 
	price_bids_g_GALBTC = Decimal(price_bids_c_l_GALBTC) 
	qty_bids_g_GALBTC = Decimal(qty_bids_c_l_GALBTC) 
	price_asks_g_GALBTC = Decimal(price_asks_c_l_GALBTC) 
	qty_asks_g_GALBTC = Decimal(qty_asks_c_l_GALBTC) 


def loop_GALBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALBTC) 
	ws.run_forever() 


Thread(target=loop_GALBTC).start() 
symbol_g_LDOBTC = 'LDOBTC' 
price_bids_g_LDOBTC = Decimal('0.0') 
qty_bids_g_LDOBTC = Decimal('0.0') 
price_asks_g_LDOBTC = Decimal('0.0') 
qty_asks_g_LDOBTC = Decimal('0.0') 
stepSize_g_LDOBTC = Decimal('0.01') 


def on_message_LDOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LDOBTC = 'LDOBTC' 
	price_bids_c_l_LDOBTC = data['b'] 
	qty_bids_c_l_LDOBTC = data['B'] 
	price_asks_c_l_LDOBTC = data['a'] 
	qty_asks_c_l_LDOBTC = data['A'] 

	global symbol_g_LDOBTC 
	global price_bids_g_LDOBTC 
	global qty_bids_g_LDOBTC 
	global price_asks_g_LDOBTC 
	global qty_asks_g_LDOBTC 

	symbol_g_LDOBTC = symbol_c_l_LDOBTC 
	price_bids_g_LDOBTC = Decimal(price_bids_c_l_LDOBTC) 
	qty_bids_g_LDOBTC = Decimal(qty_bids_c_l_LDOBTC) 
	price_asks_g_LDOBTC = Decimal(price_asks_c_l_LDOBTC) 
	qty_asks_g_LDOBTC = Decimal(qty_asks_c_l_LDOBTC) 


def loop_LDOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ldobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LDOBTC) 
	ws.run_forever() 


Thread(target=loop_LDOBTC).start() 
symbol_g_OPBTC = 'OPBTC' 
price_bids_g_OPBTC = Decimal('0.0') 
qty_bids_g_OPBTC = Decimal('0.0') 
price_asks_g_OPBTC = Decimal('0.0') 
qty_asks_g_OPBTC = Decimal('0.0') 
stepSize_g_OPBTC = Decimal('0.01') 


def on_message_OPBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OPBTC = 'OPBTC' 
	price_bids_c_l_OPBTC = data['b'] 
	qty_bids_c_l_OPBTC = data['B'] 
	price_asks_c_l_OPBTC = data['a'] 
	qty_asks_c_l_OPBTC = data['A'] 

	global symbol_g_OPBTC 
	global price_bids_g_OPBTC 
	global qty_bids_g_OPBTC 
	global price_asks_g_OPBTC 
	global qty_asks_g_OPBTC 

	symbol_g_OPBTC = symbol_c_l_OPBTC 
	price_bids_g_OPBTC = Decimal(price_bids_c_l_OPBTC) 
	qty_bids_g_OPBTC = Decimal(qty_bids_c_l_OPBTC) 
	price_asks_g_OPBTC = Decimal(price_asks_c_l_OPBTC) 
	qty_asks_g_OPBTC = Decimal(qty_asks_c_l_OPBTC) 


def loop_OPBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/opbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OPBTC) 
	ws.run_forever() 


Thread(target=loop_OPBTC).start() 
symbol_g_STGBTC = 'STGBTC' 
price_bids_g_STGBTC = Decimal('0.0') 
qty_bids_g_STGBTC = Decimal('0.0') 
price_asks_g_STGBTC = Decimal('0.0') 
qty_asks_g_STGBTC = Decimal('0.0') 
stepSize_g_STGBTC = Decimal('0.1') 


def on_message_STGBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STGBTC = 'STGBTC' 
	price_bids_c_l_STGBTC = data['b'] 
	qty_bids_c_l_STGBTC = data['B'] 
	price_asks_c_l_STGBTC = data['a'] 
	qty_asks_c_l_STGBTC = data['A'] 

	global symbol_g_STGBTC 
	global price_bids_g_STGBTC 
	global qty_bids_g_STGBTC 
	global price_asks_g_STGBTC 
	global qty_asks_g_STGBTC 

	symbol_g_STGBTC = symbol_c_l_STGBTC 
	price_bids_g_STGBTC = Decimal(price_bids_c_l_STGBTC) 
	qty_bids_g_STGBTC = Decimal(qty_bids_c_l_STGBTC) 
	price_asks_g_STGBTC = Decimal(price_asks_c_l_STGBTC) 
	qty_asks_g_STGBTC = Decimal(qty_asks_c_l_STGBTC) 


def loop_STGBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/stgbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STGBTC) 
	ws.run_forever() 


Thread(target=loop_STGBTC).start() 
symbol_g_GMXBTC = 'GMXBTC' 
price_bids_g_GMXBTC = Decimal('0.0') 
qty_bids_g_GMXBTC = Decimal('0.0') 
price_asks_g_GMXBTC = Decimal('0.0') 
qty_asks_g_GMXBTC = Decimal('0.0') 
stepSize_g_GMXBTC = Decimal('0.001') 


def on_message_GMXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GMXBTC = 'GMXBTC' 
	price_bids_c_l_GMXBTC = data['b'] 
	qty_bids_c_l_GMXBTC = data['B'] 
	price_asks_c_l_GMXBTC = data['a'] 
	qty_asks_c_l_GMXBTC = data['A'] 

	global symbol_g_GMXBTC 
	global price_bids_g_GMXBTC 
	global qty_bids_g_GMXBTC 
	global price_asks_g_GMXBTC 
	global qty_asks_g_GMXBTC 

	symbol_g_GMXBTC = symbol_c_l_GMXBTC 
	price_bids_g_GMXBTC = Decimal(price_bids_c_l_GMXBTC) 
	qty_bids_g_GMXBTC = Decimal(qty_bids_c_l_GMXBTC) 
	price_asks_g_GMXBTC = Decimal(price_asks_c_l_GMXBTC) 
	qty_asks_g_GMXBTC = Decimal(qty_asks_c_l_GMXBTC) 


def loop_GMXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gmxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GMXBTC) 
	ws.run_forever() 


Thread(target=loop_GMXBTC).start() 
symbol_g_POLYXBTC = 'POLYXBTC' 
price_bids_g_POLYXBTC = Decimal('0.0') 
qty_bids_g_POLYXBTC = Decimal('0.0') 
price_asks_g_POLYXBTC = Decimal('0.0') 
qty_asks_g_POLYXBTC = Decimal('0.0') 
stepSize_g_POLYXBTC = Decimal('0.1') 


def on_message_POLYXBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_POLYXBTC = 'POLYXBTC' 
	price_bids_c_l_POLYXBTC = data['b'] 
	qty_bids_c_l_POLYXBTC = data['B'] 
	price_asks_c_l_POLYXBTC = data['a'] 
	qty_asks_c_l_POLYXBTC = data['A'] 

	global symbol_g_POLYXBTC 
	global price_bids_g_POLYXBTC 
	global qty_bids_g_POLYXBTC 
	global price_asks_g_POLYXBTC 
	global qty_asks_g_POLYXBTC 

	symbol_g_POLYXBTC = symbol_c_l_POLYXBTC 
	price_bids_g_POLYXBTC = Decimal(price_bids_c_l_POLYXBTC) 
	qty_bids_g_POLYXBTC = Decimal(qty_bids_c_l_POLYXBTC) 
	price_asks_g_POLYXBTC = Decimal(price_asks_c_l_POLYXBTC) 
	qty_asks_g_POLYXBTC = Decimal(qty_asks_c_l_POLYXBTC) 


def loop_POLYXBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/polyxbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_POLYXBTC) 
	ws.run_forever() 


Thread(target=loop_POLYXBTC).start() 
symbol_g_APTBTC = 'APTBTC' 
price_bids_g_APTBTC = Decimal('0.0') 
qty_bids_g_APTBTC = Decimal('0.0') 
price_asks_g_APTBTC = Decimal('0.0') 
qty_asks_g_APTBTC = Decimal('0.0') 
stepSize_g_APTBTC = Decimal('0.01') 


def on_message_APTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APTBTC = 'APTBTC' 
	price_bids_c_l_APTBTC = data['b'] 
	qty_bids_c_l_APTBTC = data['B'] 
	price_asks_c_l_APTBTC = data['a'] 
	qty_asks_c_l_APTBTC = data['A'] 

	global symbol_g_APTBTC 
	global price_bids_g_APTBTC 
	global qty_bids_g_APTBTC 
	global price_asks_g_APTBTC 
	global qty_asks_g_APTBTC 

	symbol_g_APTBTC = symbol_c_l_APTBTC 
	price_bids_g_APTBTC = Decimal(price_bids_c_l_APTBTC) 
	qty_bids_g_APTBTC = Decimal(qty_bids_c_l_APTBTC) 
	price_asks_g_APTBTC = Decimal(price_asks_c_l_APTBTC) 
	qty_asks_g_APTBTC = Decimal(qty_asks_c_l_APTBTC) 


def loop_APTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/aptbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APTBTC) 
	ws.run_forever() 


Thread(target=loop_APTBTC).start() 
symbol_g_OSMOBTC = 'OSMOBTC' 
price_bids_g_OSMOBTC = Decimal('0.0') 
qty_bids_g_OSMOBTC = Decimal('0.0') 
price_asks_g_OSMOBTC = Decimal('0.0') 
qty_asks_g_OSMOBTC = Decimal('0.0') 
stepSize_g_OSMOBTC = Decimal('0.01') 


def on_message_OSMOBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OSMOBTC = 'OSMOBTC' 
	price_bids_c_l_OSMOBTC = data['b'] 
	qty_bids_c_l_OSMOBTC = data['B'] 
	price_asks_c_l_OSMOBTC = data['a'] 
	qty_asks_c_l_OSMOBTC = data['A'] 

	global symbol_g_OSMOBTC 
	global price_bids_g_OSMOBTC 
	global qty_bids_g_OSMOBTC 
	global price_asks_g_OSMOBTC 
	global qty_asks_g_OSMOBTC 

	symbol_g_OSMOBTC = symbol_c_l_OSMOBTC 
	price_bids_g_OSMOBTC = Decimal(price_bids_c_l_OSMOBTC) 
	qty_bids_g_OSMOBTC = Decimal(qty_bids_c_l_OSMOBTC) 
	price_asks_g_OSMOBTC = Decimal(price_asks_c_l_OSMOBTC) 
	qty_asks_g_OSMOBTC = Decimal(qty_asks_c_l_OSMOBTC) 


def loop_OSMOBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/osmobtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OSMOBTC) 
	ws.run_forever() 


Thread(target=loop_OSMOBTC).start() 
symbol_g_HFTBTC = 'HFTBTC' 
price_bids_g_HFTBTC = Decimal('0.0') 
qty_bids_g_HFTBTC = Decimal('0.0') 
price_asks_g_HFTBTC = Decimal('0.0') 
qty_asks_g_HFTBTC = Decimal('0.0') 
stepSize_g_HFTBTC = Decimal('0.1') 


def on_message_HFTBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HFTBTC = 'HFTBTC' 
	price_bids_c_l_HFTBTC = data['b'] 
	qty_bids_c_l_HFTBTC = data['B'] 
	price_asks_c_l_HFTBTC = data['a'] 
	qty_asks_c_l_HFTBTC = data['A'] 

	global symbol_g_HFTBTC 
	global price_bids_g_HFTBTC 
	global qty_bids_g_HFTBTC 
	global price_asks_g_HFTBTC 
	global qty_asks_g_HFTBTC 

	symbol_g_HFTBTC = symbol_c_l_HFTBTC 
	price_bids_g_HFTBTC = Decimal(price_bids_c_l_HFTBTC) 
	qty_bids_g_HFTBTC = Decimal(qty_bids_c_l_HFTBTC) 
	price_asks_g_HFTBTC = Decimal(price_asks_c_l_HFTBTC) 
	qty_asks_g_HFTBTC = Decimal(qty_asks_c_l_HFTBTC) 


def loop_HFTBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hftbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HFTBTC) 
	ws.run_forever() 


Thread(target=loop_HFTBTC).start() 
symbol_g_HOOKBTC = 'HOOKBTC' 
price_bids_g_HOOKBTC = Decimal('0.0') 
qty_bids_g_HOOKBTC = Decimal('0.0') 
price_asks_g_HOOKBTC = Decimal('0.0') 
qty_asks_g_HOOKBTC = Decimal('0.0') 
stepSize_g_HOOKBTC = Decimal('0.1') 


def on_message_HOOKBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HOOKBTC = 'HOOKBTC' 
	price_bids_c_l_HOOKBTC = data['b'] 
	qty_bids_c_l_HOOKBTC = data['B'] 
	price_asks_c_l_HOOKBTC = data['a'] 
	qty_asks_c_l_HOOKBTC = data['A'] 

	global symbol_g_HOOKBTC 
	global price_bids_g_HOOKBTC 
	global qty_bids_g_HOOKBTC 
	global price_asks_g_HOOKBTC 
	global qty_asks_g_HOOKBTC 

	symbol_g_HOOKBTC = symbol_c_l_HOOKBTC 
	price_bids_g_HOOKBTC = Decimal(price_bids_c_l_HOOKBTC) 
	qty_bids_g_HOOKBTC = Decimal(qty_bids_c_l_HOOKBTC) 
	price_asks_g_HOOKBTC = Decimal(price_asks_c_l_HOOKBTC) 
	qty_asks_g_HOOKBTC = Decimal(qty_asks_c_l_HOOKBTC) 


def loop_HOOKBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hookbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HOOKBTC) 
	ws.run_forever() 


Thread(target=loop_HOOKBTC).start() 
symbol_g_MAGICBTC = 'MAGICBTC' 
price_bids_g_MAGICBTC = Decimal('0.0') 
qty_bids_g_MAGICBTC = Decimal('0.0') 
price_asks_g_MAGICBTC = Decimal('0.0') 
qty_asks_g_MAGICBTC = Decimal('0.0') 
stepSize_g_MAGICBTC = Decimal('0.1') 


def on_message_MAGICBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MAGICBTC = 'MAGICBTC' 
	price_bids_c_l_MAGICBTC = data['b'] 
	qty_bids_c_l_MAGICBTC = data['B'] 
	price_asks_c_l_MAGICBTC = data['a'] 
	qty_asks_c_l_MAGICBTC = data['A'] 

	global symbol_g_MAGICBTC 
	global price_bids_g_MAGICBTC 
	global qty_bids_g_MAGICBTC 
	global price_asks_g_MAGICBTC 
	global qty_asks_g_MAGICBTC 

	symbol_g_MAGICBTC = symbol_c_l_MAGICBTC 
	price_bids_g_MAGICBTC = Decimal(price_bids_c_l_MAGICBTC) 
	qty_bids_g_MAGICBTC = Decimal(qty_bids_c_l_MAGICBTC) 
	price_asks_g_MAGICBTC = Decimal(price_asks_c_l_MAGICBTC) 
	qty_asks_g_MAGICBTC = Decimal(qty_asks_c_l_MAGICBTC) 


def loop_MAGICBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/magicbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MAGICBTC) 
	ws.run_forever() 


Thread(target=loop_MAGICBTC).start() 
symbol_g_RPLBTC = 'RPLBTC' 
price_bids_g_RPLBTC = Decimal('0.0') 
qty_bids_g_RPLBTC = Decimal('0.0') 
price_asks_g_RPLBTC = Decimal('0.0') 
qty_asks_g_RPLBTC = Decimal('0.0') 
stepSize_g_RPLBTC = Decimal('0.01') 


def on_message_RPLBTC(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RPLBTC = 'RPLBTC' 
	price_bids_c_l_RPLBTC = data['b'] 
	qty_bids_c_l_RPLBTC = data['B'] 
	price_asks_c_l_RPLBTC = data['a'] 
	qty_asks_c_l_RPLBTC = data['A'] 

	global symbol_g_RPLBTC 
	global price_bids_g_RPLBTC 
	global qty_bids_g_RPLBTC 
	global price_asks_g_RPLBTC 
	global qty_asks_g_RPLBTC 

	symbol_g_RPLBTC = symbol_c_l_RPLBTC 
	price_bids_g_RPLBTC = Decimal(price_bids_c_l_RPLBTC) 
	qty_bids_g_RPLBTC = Decimal(qty_bids_c_l_RPLBTC) 
	price_asks_g_RPLBTC = Decimal(price_asks_c_l_RPLBTC) 
	qty_asks_g_RPLBTC = Decimal(qty_asks_c_l_RPLBTC) 


def loop_RPLBTC(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rplbtc@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RPLBTC) 
	ws.run_forever() 


Thread(target=loop_RPLBTC).start() 
symbol_g_QTUMETH = 'QTUMETH' 
price_bids_g_QTUMETH = Decimal('0.0') 
qty_bids_g_QTUMETH = Decimal('0.0') 
price_asks_g_QTUMETH = Decimal('0.0') 
qty_asks_g_QTUMETH = Decimal('0.0') 
stepSize_g_QTUMETH = Decimal('0.1') 


def on_message_QTUMETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QTUMETH = 'QTUMETH' 
	price_bids_c_l_QTUMETH = data['b'] 
	qty_bids_c_l_QTUMETH = data['B'] 
	price_asks_c_l_QTUMETH = data['a'] 
	qty_asks_c_l_QTUMETH = data['A'] 

	global symbol_g_QTUMETH 
	global price_bids_g_QTUMETH 
	global qty_bids_g_QTUMETH 
	global price_asks_g_QTUMETH 
	global qty_asks_g_QTUMETH 

	symbol_g_QTUMETH = symbol_c_l_QTUMETH 
	price_bids_g_QTUMETH = Decimal(price_bids_c_l_QTUMETH) 
	qty_bids_g_QTUMETH = Decimal(qty_bids_c_l_QTUMETH) 
	price_asks_g_QTUMETH = Decimal(price_asks_c_l_QTUMETH) 
	qty_asks_g_QTUMETH = Decimal(qty_asks_c_l_QTUMETH) 


def loop_QTUMETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/qtumeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QTUMETH) 
	ws.run_forever() 


Thread(target=loop_QTUMETH).start() 
symbol_g_EOSETH = 'EOSETH' 
price_bids_g_EOSETH = Decimal('0.0') 
qty_bids_g_EOSETH = Decimal('0.0') 
price_asks_g_EOSETH = Decimal('0.0') 
qty_asks_g_EOSETH = Decimal('0.0') 
stepSize_g_EOSETH = Decimal('0.1') 


def on_message_EOSETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EOSETH = 'EOSETH' 
	price_bids_c_l_EOSETH = data['b'] 
	qty_bids_c_l_EOSETH = data['B'] 
	price_asks_c_l_EOSETH = data['a'] 
	qty_asks_c_l_EOSETH = data['A'] 

	global symbol_g_EOSETH 
	global price_bids_g_EOSETH 
	global qty_bids_g_EOSETH 
	global price_asks_g_EOSETH 
	global qty_asks_g_EOSETH 

	symbol_g_EOSETH = symbol_c_l_EOSETH 
	price_bids_g_EOSETH = Decimal(price_bids_c_l_EOSETH) 
	qty_bids_g_EOSETH = Decimal(qty_bids_c_l_EOSETH) 
	price_asks_g_EOSETH = Decimal(price_asks_c_l_EOSETH) 
	qty_asks_g_EOSETH = Decimal(qty_asks_c_l_EOSETH) 


def loop_EOSETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/eoseth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EOSETH) 
	ws.run_forever() 


Thread(target=loop_EOSETH).start() 
symbol_g_BNTETH = 'BNTETH' 
price_bids_g_BNTETH = Decimal('0.0') 
qty_bids_g_BNTETH = Decimal('0.0') 
price_asks_g_BNTETH = Decimal('0.0') 
qty_asks_g_BNTETH = Decimal('0.0') 
stepSize_g_BNTETH = Decimal('0.1') 


def on_message_BNTETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNTETH = 'BNTETH' 
	price_bids_c_l_BNTETH = data['b'] 
	qty_bids_c_l_BNTETH = data['B'] 
	price_asks_c_l_BNTETH = data['a'] 
	qty_asks_c_l_BNTETH = data['A'] 

	global symbol_g_BNTETH 
	global price_bids_g_BNTETH 
	global qty_bids_g_BNTETH 
	global price_asks_g_BNTETH 
	global qty_asks_g_BNTETH 

	symbol_g_BNTETH = symbol_c_l_BNTETH 
	price_bids_g_BNTETH = Decimal(price_bids_c_l_BNTETH) 
	qty_bids_g_BNTETH = Decimal(qty_bids_c_l_BNTETH) 
	price_asks_g_BNTETH = Decimal(price_asks_c_l_BNTETH) 
	qty_asks_g_BNTETH = Decimal(qty_asks_c_l_BNTETH) 


def loop_BNTETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnteth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNTETH) 
	ws.run_forever() 


Thread(target=loop_BNTETH).start() 
symbol_g_BNBETH = 'BNBETH' 
price_bids_g_BNBETH = Decimal('0.0') 
qty_bids_g_BNBETH = Decimal('0.0') 
price_asks_g_BNBETH = Decimal('0.0') 
qty_asks_g_BNBETH = Decimal('0.0') 
stepSize_g_BNBETH = Decimal('0.001') 


def on_message_BNBETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNBETH = 'BNBETH' 
	price_bids_c_l_BNBETH = data['b'] 
	qty_bids_c_l_BNBETH = data['B'] 
	price_asks_c_l_BNBETH = data['a'] 
	qty_asks_c_l_BNBETH = data['A'] 

	global symbol_g_BNBETH 
	global price_bids_g_BNBETH 
	global qty_bids_g_BNBETH 
	global price_asks_g_BNBETH 
	global qty_asks_g_BNBETH 

	symbol_g_BNBETH = symbol_c_l_BNBETH 
	price_bids_g_BNBETH = Decimal(price_bids_c_l_BNBETH) 
	qty_bids_g_BNBETH = Decimal(qty_bids_c_l_BNBETH) 
	price_asks_g_BNBETH = Decimal(price_asks_c_l_BNBETH) 
	qty_asks_g_BNBETH = Decimal(qty_asks_c_l_BNBETH) 


def loop_BNBETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnbeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNBETH) 
	ws.run_forever() 


Thread(target=loop_BNBETH).start() 
symbol_g_LRCETH = 'LRCETH' 
price_bids_g_LRCETH = Decimal('0.0') 
qty_bids_g_LRCETH = Decimal('0.0') 
price_asks_g_LRCETH = Decimal('0.0') 
qty_asks_g_LRCETH = Decimal('0.0') 
stepSize_g_LRCETH = Decimal('1.0') 


def on_message_LRCETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LRCETH = 'LRCETH' 
	price_bids_c_l_LRCETH = data['b'] 
	qty_bids_c_l_LRCETH = data['B'] 
	price_asks_c_l_LRCETH = data['a'] 
	qty_asks_c_l_LRCETH = data['A'] 

	global symbol_g_LRCETH 
	global price_bids_g_LRCETH 
	global qty_bids_g_LRCETH 
	global price_asks_g_LRCETH 
	global qty_asks_g_LRCETH 

	symbol_g_LRCETH = symbol_c_l_LRCETH 
	price_bids_g_LRCETH = Decimal(price_bids_c_l_LRCETH) 
	qty_bids_g_LRCETH = Decimal(qty_bids_c_l_LRCETH) 
	price_asks_g_LRCETH = Decimal(price_asks_c_l_LRCETH) 
	qty_asks_g_LRCETH = Decimal(qty_asks_c_l_LRCETH) 


def loop_LRCETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lrceth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LRCETH) 
	ws.run_forever() 


Thread(target=loop_LRCETH).start() 
symbol_g_OMGETH = 'OMGETH' 
price_bids_g_OMGETH = Decimal('0.0') 
qty_bids_g_OMGETH = Decimal('0.0') 
price_asks_g_OMGETH = Decimal('0.0') 
qty_asks_g_OMGETH = Decimal('0.0') 
stepSize_g_OMGETH = Decimal('0.1') 


def on_message_OMGETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OMGETH = 'OMGETH' 
	price_bids_c_l_OMGETH = data['b'] 
	qty_bids_c_l_OMGETH = data['B'] 
	price_asks_c_l_OMGETH = data['a'] 
	qty_asks_c_l_OMGETH = data['A'] 

	global symbol_g_OMGETH 
	global price_bids_g_OMGETH 
	global qty_bids_g_OMGETH 
	global price_asks_g_OMGETH 
	global qty_asks_g_OMGETH 

	symbol_g_OMGETH = symbol_c_l_OMGETH 
	price_bids_g_OMGETH = Decimal(price_bids_c_l_OMGETH) 
	qty_bids_g_OMGETH = Decimal(qty_bids_c_l_OMGETH) 
	price_asks_g_OMGETH = Decimal(price_asks_c_l_OMGETH) 
	qty_asks_g_OMGETH = Decimal(qty_asks_c_l_OMGETH) 


def loop_OMGETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/omgeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OMGETH) 
	ws.run_forever() 


Thread(target=loop_OMGETH).start() 
symbol_g_ZRXETH = 'ZRXETH' 
price_bids_g_ZRXETH = Decimal('0.0') 
qty_bids_g_ZRXETH = Decimal('0.0') 
price_asks_g_ZRXETH = Decimal('0.0') 
qty_asks_g_ZRXETH = Decimal('0.0') 
stepSize_g_ZRXETH = Decimal('1.0') 


def on_message_ZRXETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZRXETH = 'ZRXETH' 
	price_bids_c_l_ZRXETH = data['b'] 
	qty_bids_c_l_ZRXETH = data['B'] 
	price_asks_c_l_ZRXETH = data['a'] 
	qty_asks_c_l_ZRXETH = data['A'] 

	global symbol_g_ZRXETH 
	global price_bids_g_ZRXETH 
	global qty_bids_g_ZRXETH 
	global price_asks_g_ZRXETH 
	global qty_asks_g_ZRXETH 

	symbol_g_ZRXETH = symbol_c_l_ZRXETH 
	price_bids_g_ZRXETH = Decimal(price_bids_c_l_ZRXETH) 
	qty_bids_g_ZRXETH = Decimal(qty_bids_c_l_ZRXETH) 
	price_asks_g_ZRXETH = Decimal(price_asks_c_l_ZRXETH) 
	qty_asks_g_ZRXETH = Decimal(qty_asks_c_l_ZRXETH) 


def loop_ZRXETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zrxeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZRXETH) 
	ws.run_forever() 


Thread(target=loop_ZRXETH).start() 
symbol_g_KNCETH = 'KNCETH' 
price_bids_g_KNCETH = Decimal('0.0') 
qty_bids_g_KNCETH = Decimal('0.0') 
price_asks_g_KNCETH = Decimal('0.0') 
qty_asks_g_KNCETH = Decimal('0.0') 
stepSize_g_KNCETH = Decimal('0.1') 


def on_message_KNCETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KNCETH = 'KNCETH' 
	price_bids_c_l_KNCETH = data['b'] 
	qty_bids_c_l_KNCETH = data['B'] 
	price_asks_c_l_KNCETH = data['a'] 
	qty_asks_c_l_KNCETH = data['A'] 

	global symbol_g_KNCETH 
	global price_bids_g_KNCETH 
	global qty_bids_g_KNCETH 
	global price_asks_g_KNCETH 
	global qty_asks_g_KNCETH 

	symbol_g_KNCETH = symbol_c_l_KNCETH 
	price_bids_g_KNCETH = Decimal(price_bids_c_l_KNCETH) 
	qty_bids_g_KNCETH = Decimal(qty_bids_c_l_KNCETH) 
	price_asks_g_KNCETH = Decimal(price_asks_c_l_KNCETH) 
	qty_asks_g_KNCETH = Decimal(qty_asks_c_l_KNCETH) 


def loop_KNCETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/knceth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KNCETH) 
	ws.run_forever() 


Thread(target=loop_KNCETH).start() 
symbol_g_FUNETH = 'FUNETH' 
price_bids_g_FUNETH = Decimal('0.0') 
qty_bids_g_FUNETH = Decimal('0.0') 
price_asks_g_FUNETH = Decimal('0.0') 
qty_asks_g_FUNETH = Decimal('0.0') 
stepSize_g_FUNETH = Decimal('1.0') 


def on_message_FUNETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FUNETH = 'FUNETH' 
	price_bids_c_l_FUNETH = data['b'] 
	qty_bids_c_l_FUNETH = data['B'] 
	price_asks_c_l_FUNETH = data['a'] 
	qty_asks_c_l_FUNETH = data['A'] 

	global symbol_g_FUNETH 
	global price_bids_g_FUNETH 
	global qty_bids_g_FUNETH 
	global price_asks_g_FUNETH 
	global qty_asks_g_FUNETH 

	symbol_g_FUNETH = symbol_c_l_FUNETH 
	price_bids_g_FUNETH = Decimal(price_bids_c_l_FUNETH) 
	qty_bids_g_FUNETH = Decimal(qty_bids_c_l_FUNETH) 
	price_asks_g_FUNETH = Decimal(price_asks_c_l_FUNETH) 
	qty_asks_g_FUNETH = Decimal(qty_asks_c_l_FUNETH) 


def loop_FUNETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/funeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FUNETH) 
	ws.run_forever() 


Thread(target=loop_FUNETH).start() 
symbol_g_NEOETH = 'NEOETH' 
price_bids_g_NEOETH = Decimal('0.0') 
qty_bids_g_NEOETH = Decimal('0.0') 
price_asks_g_NEOETH = Decimal('0.0') 
qty_asks_g_NEOETH = Decimal('0.0') 
stepSize_g_NEOETH = Decimal('0.01') 


def on_message_NEOETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEOETH = 'NEOETH' 
	price_bids_c_l_NEOETH = data['b'] 
	qty_bids_c_l_NEOETH = data['B'] 
	price_asks_c_l_NEOETH = data['a'] 
	qty_asks_c_l_NEOETH = data['A'] 

	global symbol_g_NEOETH 
	global price_bids_g_NEOETH 
	global qty_bids_g_NEOETH 
	global price_asks_g_NEOETH 
	global qty_asks_g_NEOETH 

	symbol_g_NEOETH = symbol_c_l_NEOETH 
	price_bids_g_NEOETH = Decimal(price_bids_c_l_NEOETH) 
	qty_bids_g_NEOETH = Decimal(qty_bids_c_l_NEOETH) 
	price_asks_g_NEOETH = Decimal(price_asks_c_l_NEOETH) 
	qty_asks_g_NEOETH = Decimal(qty_asks_c_l_NEOETH) 


def loop_NEOETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/neoeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEOETH) 
	ws.run_forever() 


Thread(target=loop_NEOETH).start() 
symbol_g_IOTAETH = 'IOTAETH' 
price_bids_g_IOTAETH = Decimal('0.0') 
qty_bids_g_IOTAETH = Decimal('0.0') 
price_asks_g_IOTAETH = Decimal('0.0') 
qty_asks_g_IOTAETH = Decimal('0.0') 
stepSize_g_IOTAETH = Decimal('1.0') 


def on_message_IOTAETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IOTAETH = 'IOTAETH' 
	price_bids_c_l_IOTAETH = data['b'] 
	qty_bids_c_l_IOTAETH = data['B'] 
	price_asks_c_l_IOTAETH = data['a'] 
	qty_asks_c_l_IOTAETH = data['A'] 

	global symbol_g_IOTAETH 
	global price_bids_g_IOTAETH 
	global qty_bids_g_IOTAETH 
	global price_asks_g_IOTAETH 
	global qty_asks_g_IOTAETH 

	symbol_g_IOTAETH = symbol_c_l_IOTAETH 
	price_bids_g_IOTAETH = Decimal(price_bids_c_l_IOTAETH) 
	qty_bids_g_IOTAETH = Decimal(qty_bids_c_l_IOTAETH) 
	price_asks_g_IOTAETH = Decimal(price_asks_c_l_IOTAETH) 
	qty_asks_g_IOTAETH = Decimal(qty_asks_c_l_IOTAETH) 


def loop_IOTAETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/iotaeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IOTAETH) 
	ws.run_forever() 


Thread(target=loop_IOTAETH).start() 
symbol_g_LINKETH = 'LINKETH' 
price_bids_g_LINKETH = Decimal('0.0') 
qty_bids_g_LINKETH = Decimal('0.0') 
price_asks_g_LINKETH = Decimal('0.0') 
qty_asks_g_LINKETH = Decimal('0.0') 
stepSize_g_LINKETH = Decimal('0.01') 


def on_message_LINKETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LINKETH = 'LINKETH' 
	price_bids_c_l_LINKETH = data['b'] 
	qty_bids_c_l_LINKETH = data['B'] 
	price_asks_c_l_LINKETH = data['a'] 
	qty_asks_c_l_LINKETH = data['A'] 

	global symbol_g_LINKETH 
	global price_bids_g_LINKETH 
	global qty_bids_g_LINKETH 
	global price_asks_g_LINKETH 
	global qty_asks_g_LINKETH 

	symbol_g_LINKETH = symbol_c_l_LINKETH 
	price_bids_g_LINKETH = Decimal(price_bids_c_l_LINKETH) 
	qty_bids_g_LINKETH = Decimal(qty_bids_c_l_LINKETH) 
	price_asks_g_LINKETH = Decimal(price_asks_c_l_LINKETH) 
	qty_asks_g_LINKETH = Decimal(qty_asks_c_l_LINKETH) 


def loop_LINKETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/linketh@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LINKETH) 
	ws.run_forever() 


Thread(target=loop_LINKETH).start() 
symbol_g_XVGETH = 'XVGETH' 
price_bids_g_XVGETH = Decimal('0.0') 
qty_bids_g_XVGETH = Decimal('0.0') 
price_asks_g_XVGETH = Decimal('0.0') 
qty_asks_g_XVGETH = Decimal('0.0') 
stepSize_g_XVGETH = Decimal('1.0') 


def on_message_XVGETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XVGETH = 'XVGETH' 
	price_bids_c_l_XVGETH = data['b'] 
	qty_bids_c_l_XVGETH = data['B'] 
	price_asks_c_l_XVGETH = data['a'] 
	qty_asks_c_l_XVGETH = data['A'] 

	global symbol_g_XVGETH 
	global price_bids_g_XVGETH 
	global qty_bids_g_XVGETH 
	global price_asks_g_XVGETH 
	global qty_asks_g_XVGETH 

	symbol_g_XVGETH = symbol_c_l_XVGETH 
	price_bids_g_XVGETH = Decimal(price_bids_c_l_XVGETH) 
	qty_bids_g_XVGETH = Decimal(qty_bids_c_l_XVGETH) 
	price_asks_g_XVGETH = Decimal(price_asks_c_l_XVGETH) 
	qty_asks_g_XVGETH = Decimal(qty_asks_c_l_XVGETH) 


def loop_XVGETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xvgeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XVGETH) 
	ws.run_forever() 


Thread(target=loop_XVGETH).start() 
symbol_g_MTLETH = 'MTLETH' 
price_bids_g_MTLETH = Decimal('0.0') 
qty_bids_g_MTLETH = Decimal('0.0') 
price_asks_g_MTLETH = Decimal('0.0') 
qty_asks_g_MTLETH = Decimal('0.0') 
stepSize_g_MTLETH = Decimal('0.1') 


def on_message_MTLETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MTLETH = 'MTLETH' 
	price_bids_c_l_MTLETH = data['b'] 
	qty_bids_c_l_MTLETH = data['B'] 
	price_asks_c_l_MTLETH = data['a'] 
	qty_asks_c_l_MTLETH = data['A'] 

	global symbol_g_MTLETH 
	global price_bids_g_MTLETH 
	global qty_bids_g_MTLETH 
	global price_asks_g_MTLETH 
	global qty_asks_g_MTLETH 

	symbol_g_MTLETH = symbol_c_l_MTLETH 
	price_bids_g_MTLETH = Decimal(price_bids_c_l_MTLETH) 
	qty_bids_g_MTLETH = Decimal(qty_bids_c_l_MTLETH) 
	price_asks_g_MTLETH = Decimal(price_asks_c_l_MTLETH) 
	qty_asks_g_MTLETH = Decimal(qty_asks_c_l_MTLETH) 


def loop_MTLETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mtleth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MTLETH) 
	ws.run_forever() 


Thread(target=loop_MTLETH).start() 
symbol_g_ETCETH = 'ETCETH' 
price_bids_g_ETCETH = Decimal('0.0') 
qty_bids_g_ETCETH = Decimal('0.0') 
price_asks_g_ETCETH = Decimal('0.0') 
qty_asks_g_ETCETH = Decimal('0.0') 
stepSize_g_ETCETH = Decimal('0.01') 


def on_message_ETCETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETCETH = 'ETCETH' 
	price_bids_c_l_ETCETH = data['b'] 
	qty_bids_c_l_ETCETH = data['B'] 
	price_asks_c_l_ETCETH = data['a'] 
	qty_asks_c_l_ETCETH = data['A'] 

	global symbol_g_ETCETH 
	global price_bids_g_ETCETH 
	global qty_bids_g_ETCETH 
	global price_asks_g_ETCETH 
	global qty_asks_g_ETCETH 

	symbol_g_ETCETH = symbol_c_l_ETCETH 
	price_bids_g_ETCETH = Decimal(price_bids_c_l_ETCETH) 
	qty_bids_g_ETCETH = Decimal(qty_bids_c_l_ETCETH) 
	price_asks_g_ETCETH = Decimal(price_asks_c_l_ETCETH) 
	qty_asks_g_ETCETH = Decimal(qty_asks_c_l_ETCETH) 


def loop_ETCETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/etceth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETCETH) 
	ws.run_forever() 


Thread(target=loop_ETCETH).start() 
symbol_g_ZECETH = 'ZECETH' 
price_bids_g_ZECETH = Decimal('0.0') 
qty_bids_g_ZECETH = Decimal('0.0') 
price_asks_g_ZECETH = Decimal('0.0') 
qty_asks_g_ZECETH = Decimal('0.0') 
stepSize_g_ZECETH = Decimal('0.001') 


def on_message_ZECETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZECETH = 'ZECETH' 
	price_bids_c_l_ZECETH = data['b'] 
	qty_bids_c_l_ZECETH = data['B'] 
	price_asks_c_l_ZECETH = data['a'] 
	qty_asks_c_l_ZECETH = data['A'] 

	global symbol_g_ZECETH 
	global price_bids_g_ZECETH 
	global qty_bids_g_ZECETH 
	global price_asks_g_ZECETH 
	global qty_asks_g_ZECETH 

	symbol_g_ZECETH = symbol_c_l_ZECETH 
	price_bids_g_ZECETH = Decimal(price_bids_c_l_ZECETH) 
	qty_bids_g_ZECETH = Decimal(qty_bids_c_l_ZECETH) 
	price_asks_g_ZECETH = Decimal(price_asks_c_l_ZECETH) 
	qty_asks_g_ZECETH = Decimal(qty_asks_c_l_ZECETH) 


def loop_ZECETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zeceth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZECETH) 
	ws.run_forever() 


Thread(target=loop_ZECETH).start() 
symbol_g_DASHETH = 'DASHETH' 
price_bids_g_DASHETH = Decimal('0.0') 
qty_bids_g_DASHETH = Decimal('0.0') 
price_asks_g_DASHETH = Decimal('0.0') 
qty_asks_g_DASHETH = Decimal('0.0') 
stepSize_g_DASHETH = Decimal('0.001') 


def on_message_DASHETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DASHETH = 'DASHETH' 
	price_bids_c_l_DASHETH = data['b'] 
	qty_bids_c_l_DASHETH = data['B'] 
	price_asks_c_l_DASHETH = data['a'] 
	qty_asks_c_l_DASHETH = data['A'] 

	global symbol_g_DASHETH 
	global price_bids_g_DASHETH 
	global qty_bids_g_DASHETH 
	global price_asks_g_DASHETH 
	global qty_asks_g_DASHETH 

	symbol_g_DASHETH = symbol_c_l_DASHETH 
	price_bids_g_DASHETH = Decimal(price_bids_c_l_DASHETH) 
	qty_bids_g_DASHETH = Decimal(qty_bids_c_l_DASHETH) 
	price_asks_g_DASHETH = Decimal(price_asks_c_l_DASHETH) 
	qty_asks_g_DASHETH = Decimal(qty_asks_c_l_DASHETH) 


def loop_DASHETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dasheth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DASHETH) 
	ws.run_forever() 


Thread(target=loop_DASHETH).start() 
symbol_g_TRXETH = 'TRXETH' 
price_bids_g_TRXETH = Decimal('0.0') 
qty_bids_g_TRXETH = Decimal('0.0') 
price_asks_g_TRXETH = Decimal('0.0') 
qty_asks_g_TRXETH = Decimal('0.0') 
stepSize_g_TRXETH = Decimal('1.0') 


def on_message_TRXETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRXETH = 'TRXETH' 
	price_bids_c_l_TRXETH = data['b'] 
	qty_bids_c_l_TRXETH = data['B'] 
	price_asks_c_l_TRXETH = data['a'] 
	qty_asks_c_l_TRXETH = data['A'] 

	global symbol_g_TRXETH 
	global price_bids_g_TRXETH 
	global qty_bids_g_TRXETH 
	global price_asks_g_TRXETH 
	global qty_asks_g_TRXETH 

	symbol_g_TRXETH = symbol_c_l_TRXETH 
	price_bids_g_TRXETH = Decimal(price_bids_c_l_TRXETH) 
	qty_bids_g_TRXETH = Decimal(qty_bids_c_l_TRXETH) 
	price_asks_g_TRXETH = Decimal(price_asks_c_l_TRXETH) 
	qty_asks_g_TRXETH = Decimal(qty_asks_c_l_TRXETH) 


def loop_TRXETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/trxeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRXETH) 
	ws.run_forever() 


Thread(target=loop_TRXETH).start() 
symbol_g_POWRETH = 'POWRETH' 
price_bids_g_POWRETH = Decimal('0.0') 
qty_bids_g_POWRETH = Decimal('0.0') 
price_asks_g_POWRETH = Decimal('0.0') 
qty_asks_g_POWRETH = Decimal('0.0') 
stepSize_g_POWRETH = Decimal('1.0') 


def on_message_POWRETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_POWRETH = 'POWRETH' 
	price_bids_c_l_POWRETH = data['b'] 
	qty_bids_c_l_POWRETH = data['B'] 
	price_asks_c_l_POWRETH = data['a'] 
	qty_asks_c_l_POWRETH = data['A'] 

	global symbol_g_POWRETH 
	global price_bids_g_POWRETH 
	global qty_bids_g_POWRETH 
	global price_asks_g_POWRETH 
	global qty_asks_g_POWRETH 

	symbol_g_POWRETH = symbol_c_l_POWRETH 
	price_bids_g_POWRETH = Decimal(price_bids_c_l_POWRETH) 
	qty_bids_g_POWRETH = Decimal(qty_bids_c_l_POWRETH) 
	price_asks_g_POWRETH = Decimal(price_asks_c_l_POWRETH) 
	qty_asks_g_POWRETH = Decimal(qty_asks_c_l_POWRETH) 


def loop_POWRETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/powreth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_POWRETH) 
	ws.run_forever() 


Thread(target=loop_POWRETH).start() 
symbol_g_XRPETH = 'XRPETH' 
price_bids_g_XRPETH = Decimal('0.0') 
qty_bids_g_XRPETH = Decimal('0.0') 
price_asks_g_XRPETH = Decimal('0.0') 
qty_asks_g_XRPETH = Decimal('0.0') 
stepSize_g_XRPETH = Decimal('1.0') 


def on_message_XRPETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XRPETH = 'XRPETH' 
	price_bids_c_l_XRPETH = data['b'] 
	qty_bids_c_l_XRPETH = data['B'] 
	price_asks_c_l_XRPETH = data['a'] 
	qty_asks_c_l_XRPETH = data['A'] 

	global symbol_g_XRPETH 
	global price_bids_g_XRPETH 
	global qty_bids_g_XRPETH 
	global price_asks_g_XRPETH 
	global qty_asks_g_XRPETH 

	symbol_g_XRPETH = symbol_c_l_XRPETH 
	price_bids_g_XRPETH = Decimal(price_bids_c_l_XRPETH) 
	qty_bids_g_XRPETH = Decimal(qty_bids_c_l_XRPETH) 
	price_asks_g_XRPETH = Decimal(price_asks_c_l_XRPETH) 
	qty_asks_g_XRPETH = Decimal(qty_asks_c_l_XRPETH) 


def loop_XRPETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xrpeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XRPETH) 
	ws.run_forever() 


Thread(target=loop_XRPETH).start() 
symbol_g_ENJETH = 'ENJETH' 
price_bids_g_ENJETH = Decimal('0.0') 
qty_bids_g_ENJETH = Decimal('0.0') 
price_asks_g_ENJETH = Decimal('0.0') 
qty_asks_g_ENJETH = Decimal('0.0') 
stepSize_g_ENJETH = Decimal('0.1') 


def on_message_ENJETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENJETH = 'ENJETH' 
	price_bids_c_l_ENJETH = data['b'] 
	qty_bids_c_l_ENJETH = data['B'] 
	price_asks_c_l_ENJETH = data['a'] 
	qty_asks_c_l_ENJETH = data['A'] 

	global symbol_g_ENJETH 
	global price_bids_g_ENJETH 
	global qty_bids_g_ENJETH 
	global price_asks_g_ENJETH 
	global qty_asks_g_ENJETH 

	symbol_g_ENJETH = symbol_c_l_ENJETH 
	price_bids_g_ENJETH = Decimal(price_bids_c_l_ENJETH) 
	qty_bids_g_ENJETH = Decimal(qty_bids_c_l_ENJETH) 
	price_asks_g_ENJETH = Decimal(price_asks_c_l_ENJETH) 
	qty_asks_g_ENJETH = Decimal(qty_asks_c_l_ENJETH) 


def loop_ENJETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/enjeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENJETH) 
	ws.run_forever() 


Thread(target=loop_ENJETH).start() 
symbol_g_XMRETH = 'XMRETH' 
price_bids_g_XMRETH = Decimal('0.0') 
qty_bids_g_XMRETH = Decimal('0.0') 
price_asks_g_XMRETH = Decimal('0.0') 
qty_asks_g_XMRETH = Decimal('0.0') 
stepSize_g_XMRETH = Decimal('0.001') 


def on_message_XMRETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XMRETH = 'XMRETH' 
	price_bids_c_l_XMRETH = data['b'] 
	qty_bids_c_l_XMRETH = data['B'] 
	price_asks_c_l_XMRETH = data['a'] 
	qty_asks_c_l_XMRETH = data['A'] 

	global symbol_g_XMRETH 
	global price_bids_g_XMRETH 
	global qty_bids_g_XMRETH 
	global price_asks_g_XMRETH 
	global qty_asks_g_XMRETH 

	symbol_g_XMRETH = symbol_c_l_XMRETH 
	price_bids_g_XMRETH = Decimal(price_bids_c_l_XMRETH) 
	qty_bids_g_XMRETH = Decimal(qty_bids_c_l_XMRETH) 
	price_asks_g_XMRETH = Decimal(price_asks_c_l_XMRETH) 
	qty_asks_g_XMRETH = Decimal(qty_asks_c_l_XMRETH) 


def loop_XMRETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xmreth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XMRETH) 
	ws.run_forever() 


Thread(target=loop_XMRETH).start() 
symbol_g_BATETH = 'BATETH' 
price_bids_g_BATETH = Decimal('0.0') 
qty_bids_g_BATETH = Decimal('0.0') 
price_asks_g_BATETH = Decimal('0.0') 
qty_asks_g_BATETH = Decimal('0.0') 
stepSize_g_BATETH = Decimal('1.0') 


def on_message_BATETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BATETH = 'BATETH' 
	price_bids_c_l_BATETH = data['b'] 
	qty_bids_c_l_BATETH = data['B'] 
	price_asks_c_l_BATETH = data['a'] 
	qty_asks_c_l_BATETH = data['A'] 

	global symbol_g_BATETH 
	global price_bids_g_BATETH 
	global qty_bids_g_BATETH 
	global price_asks_g_BATETH 
	global qty_asks_g_BATETH 

	symbol_g_BATETH = symbol_c_l_BATETH 
	price_bids_g_BATETH = Decimal(price_bids_c_l_BATETH) 
	qty_bids_g_BATETH = Decimal(qty_bids_c_l_BATETH) 
	price_asks_g_BATETH = Decimal(price_asks_c_l_BATETH) 
	qty_asks_g_BATETH = Decimal(qty_asks_c_l_BATETH) 


def loop_BATETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bateth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BATETH) 
	ws.run_forever() 


Thread(target=loop_BATETH).start() 
symbol_g_LSKETH = 'LSKETH' 
price_bids_g_LSKETH = Decimal('0.0') 
qty_bids_g_LSKETH = Decimal('0.0') 
price_asks_g_LSKETH = Decimal('0.0') 
qty_asks_g_LSKETH = Decimal('0.0') 
stepSize_g_LSKETH = Decimal('0.1') 


def on_message_LSKETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LSKETH = 'LSKETH' 
	price_bids_c_l_LSKETH = data['b'] 
	qty_bids_c_l_LSKETH = data['B'] 
	price_asks_c_l_LSKETH = data['a'] 
	qty_asks_c_l_LSKETH = data['A'] 

	global symbol_g_LSKETH 
	global price_bids_g_LSKETH 
	global qty_bids_g_LSKETH 
	global price_asks_g_LSKETH 
	global qty_asks_g_LSKETH 

	symbol_g_LSKETH = symbol_c_l_LSKETH 
	price_bids_g_LSKETH = Decimal(price_bids_c_l_LSKETH) 
	qty_bids_g_LSKETH = Decimal(qty_bids_c_l_LSKETH) 
	price_asks_g_LSKETH = Decimal(price_asks_c_l_LSKETH) 
	qty_asks_g_LSKETH = Decimal(qty_asks_c_l_LSKETH) 


def loop_LSKETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lsketh@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LSKETH) 
	ws.run_forever() 


Thread(target=loop_LSKETH).start() 
symbol_g_MANAETH = 'MANAETH' 
price_bids_g_MANAETH = Decimal('0.0') 
qty_bids_g_MANAETH = Decimal('0.0') 
price_asks_g_MANAETH = Decimal('0.0') 
qty_asks_g_MANAETH = Decimal('0.0') 
stepSize_g_MANAETH = Decimal('1.0') 


def on_message_MANAETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MANAETH = 'MANAETH' 
	price_bids_c_l_MANAETH = data['b'] 
	qty_bids_c_l_MANAETH = data['B'] 
	price_asks_c_l_MANAETH = data['a'] 
	qty_asks_c_l_MANAETH = data['A'] 

	global symbol_g_MANAETH 
	global price_bids_g_MANAETH 
	global qty_bids_g_MANAETH 
	global price_asks_g_MANAETH 
	global qty_asks_g_MANAETH 

	symbol_g_MANAETH = symbol_c_l_MANAETH 
	price_bids_g_MANAETH = Decimal(price_bids_c_l_MANAETH) 
	qty_bids_g_MANAETH = Decimal(qty_bids_c_l_MANAETH) 
	price_asks_g_MANAETH = Decimal(price_asks_c_l_MANAETH) 
	qty_asks_g_MANAETH = Decimal(qty_asks_c_l_MANAETH) 


def loop_MANAETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/manaeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MANAETH) 
	ws.run_forever() 


Thread(target=loop_MANAETH).start() 
symbol_g_ADXETH = 'ADXETH' 
price_bids_g_ADXETH = Decimal('0.0') 
qty_bids_g_ADXETH = Decimal('0.0') 
price_asks_g_ADXETH = Decimal('0.0') 
qty_asks_g_ADXETH = Decimal('0.0') 
stepSize_g_ADXETH = Decimal('1.0') 


def on_message_ADXETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADXETH = 'ADXETH' 
	price_bids_c_l_ADXETH = data['b'] 
	qty_bids_c_l_ADXETH = data['B'] 
	price_asks_c_l_ADXETH = data['a'] 
	qty_asks_c_l_ADXETH = data['A'] 

	global symbol_g_ADXETH 
	global price_bids_g_ADXETH 
	global qty_bids_g_ADXETH 
	global price_asks_g_ADXETH 
	global qty_asks_g_ADXETH 

	symbol_g_ADXETH = symbol_c_l_ADXETH 
	price_bids_g_ADXETH = Decimal(price_bids_c_l_ADXETH) 
	qty_bids_g_ADXETH = Decimal(qty_bids_c_l_ADXETH) 
	price_asks_g_ADXETH = Decimal(price_asks_c_l_ADXETH) 
	qty_asks_g_ADXETH = Decimal(qty_asks_c_l_ADXETH) 


def loop_ADXETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adxeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADXETH) 
	ws.run_forever() 


Thread(target=loop_ADXETH).start() 
symbol_g_ADAETH = 'ADAETH' 
price_bids_g_ADAETH = Decimal('0.0') 
qty_bids_g_ADAETH = Decimal('0.0') 
price_asks_g_ADAETH = Decimal('0.0') 
qty_asks_g_ADAETH = Decimal('0.0') 
stepSize_g_ADAETH = Decimal('0.1') 


def on_message_ADAETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADAETH = 'ADAETH' 
	price_bids_c_l_ADAETH = data['b'] 
	qty_bids_c_l_ADAETH = data['B'] 
	price_asks_c_l_ADAETH = data['a'] 
	qty_asks_c_l_ADAETH = data['A'] 

	global symbol_g_ADAETH 
	global price_bids_g_ADAETH 
	global qty_bids_g_ADAETH 
	global price_asks_g_ADAETH 
	global qty_asks_g_ADAETH 

	symbol_g_ADAETH = symbol_c_l_ADAETH 
	price_bids_g_ADAETH = Decimal(price_bids_c_l_ADAETH) 
	qty_bids_g_ADAETH = Decimal(qty_bids_c_l_ADAETH) 
	price_asks_g_ADAETH = Decimal(price_asks_c_l_ADAETH) 
	qty_asks_g_ADAETH = Decimal(qty_asks_c_l_ADAETH) 


def loop_ADAETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adaeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADAETH) 
	ws.run_forever() 


Thread(target=loop_ADAETH).start() 
symbol_g_XLMETH = 'XLMETH' 
price_bids_g_XLMETH = Decimal('0.0') 
qty_bids_g_XLMETH = Decimal('0.0') 
price_asks_g_XLMETH = Decimal('0.0') 
qty_asks_g_XLMETH = Decimal('0.0') 
stepSize_g_XLMETH = Decimal('1.0') 


def on_message_XLMETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XLMETH = 'XLMETH' 
	price_bids_c_l_XLMETH = data['b'] 
	qty_bids_c_l_XLMETH = data['B'] 
	price_asks_c_l_XLMETH = data['a'] 
	qty_asks_c_l_XLMETH = data['A'] 

	global symbol_g_XLMETH 
	global price_bids_g_XLMETH 
	global qty_bids_g_XLMETH 
	global price_asks_g_XLMETH 
	global qty_asks_g_XLMETH 

	symbol_g_XLMETH = symbol_c_l_XLMETH 
	price_bids_g_XLMETH = Decimal(price_bids_c_l_XLMETH) 
	qty_bids_g_XLMETH = Decimal(qty_bids_c_l_XLMETH) 
	price_asks_g_XLMETH = Decimal(price_asks_c_l_XLMETH) 
	qty_asks_g_XLMETH = Decimal(qty_asks_c_l_XLMETH) 


def loop_XLMETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xlmeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XLMETH) 
	ws.run_forever() 


Thread(target=loop_XLMETH).start() 
symbol_g_LTCETH = 'LTCETH' 
price_bids_g_LTCETH = Decimal('0.0') 
qty_bids_g_LTCETH = Decimal('0.0') 
price_asks_g_LTCETH = Decimal('0.0') 
qty_asks_g_LTCETH = Decimal('0.0') 
stepSize_g_LTCETH = Decimal('0.001') 


def on_message_LTCETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LTCETH = 'LTCETH' 
	price_bids_c_l_LTCETH = data['b'] 
	qty_bids_c_l_LTCETH = data['B'] 
	price_asks_c_l_LTCETH = data['a'] 
	qty_asks_c_l_LTCETH = data['A'] 

	global symbol_g_LTCETH 
	global price_bids_g_LTCETH 
	global qty_bids_g_LTCETH 
	global price_asks_g_LTCETH 
	global qty_asks_g_LTCETH 

	symbol_g_LTCETH = symbol_c_l_LTCETH 
	price_bids_g_LTCETH = Decimal(price_bids_c_l_LTCETH) 
	qty_bids_g_LTCETH = Decimal(qty_bids_c_l_LTCETH) 
	price_asks_g_LTCETH = Decimal(price_asks_c_l_LTCETH) 
	qty_asks_g_LTCETH = Decimal(qty_asks_c_l_LTCETH) 


def loop_LTCETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ltceth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LTCETH) 
	ws.run_forever() 


Thread(target=loop_LTCETH).start() 
symbol_g_WAVESETH = 'WAVESETH' 
price_bids_g_WAVESETH = Decimal('0.0') 
qty_bids_g_WAVESETH = Decimal('0.0') 
price_asks_g_WAVESETH = Decimal('0.0') 
qty_asks_g_WAVESETH = Decimal('0.0') 
stepSize_g_WAVESETH = Decimal('0.01') 


def on_message_WAVESETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WAVESETH = 'WAVESETH' 
	price_bids_c_l_WAVESETH = data['b'] 
	qty_bids_c_l_WAVESETH = data['B'] 
	price_asks_c_l_WAVESETH = data['a'] 
	qty_asks_c_l_WAVESETH = data['A'] 

	global symbol_g_WAVESETH 
	global price_bids_g_WAVESETH 
	global qty_bids_g_WAVESETH 
	global price_asks_g_WAVESETH 
	global qty_asks_g_WAVESETH 

	symbol_g_WAVESETH = symbol_c_l_WAVESETH 
	price_bids_g_WAVESETH = Decimal(price_bids_c_l_WAVESETH) 
	qty_bids_g_WAVESETH = Decimal(qty_bids_c_l_WAVESETH) 
	price_asks_g_WAVESETH = Decimal(price_asks_c_l_WAVESETH) 
	qty_asks_g_WAVESETH = Decimal(qty_asks_c_l_WAVESETH) 


def loop_WAVESETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/waveseth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WAVESETH) 
	ws.run_forever() 


Thread(target=loop_WAVESETH).start() 
symbol_g_ELFETH = 'ELFETH' 
price_bids_g_ELFETH = Decimal('0.0') 
qty_bids_g_ELFETH = Decimal('0.0') 
price_asks_g_ELFETH = Decimal('0.0') 
qty_asks_g_ELFETH = Decimal('0.0') 
stepSize_g_ELFETH = Decimal('1.0') 


def on_message_ELFETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ELFETH = 'ELFETH' 
	price_bids_c_l_ELFETH = data['b'] 
	qty_bids_c_l_ELFETH = data['B'] 
	price_asks_c_l_ELFETH = data['a'] 
	qty_asks_c_l_ELFETH = data['A'] 

	global symbol_g_ELFETH 
	global price_bids_g_ELFETH 
	global qty_bids_g_ELFETH 
	global price_asks_g_ELFETH 
	global qty_asks_g_ELFETH 

	symbol_g_ELFETH = symbol_c_l_ELFETH 
	price_bids_g_ELFETH = Decimal(price_bids_c_l_ELFETH) 
	qty_bids_g_ELFETH = Decimal(qty_bids_c_l_ELFETH) 
	price_asks_g_ELFETH = Decimal(price_asks_c_l_ELFETH) 
	qty_asks_g_ELFETH = Decimal(qty_asks_c_l_ELFETH) 


def loop_ELFETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/elfeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ELFETH) 
	ws.run_forever() 


Thread(target=loop_ELFETH).start() 
symbol_g_RLCETH = 'RLCETH' 
price_bids_g_RLCETH = Decimal('0.0') 
qty_bids_g_RLCETH = Decimal('0.0') 
price_asks_g_RLCETH = Decimal('0.0') 
qty_asks_g_RLCETH = Decimal('0.0') 
stepSize_g_RLCETH = Decimal('0.1') 


def on_message_RLCETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RLCETH = 'RLCETH' 
	price_bids_c_l_RLCETH = data['b'] 
	qty_bids_c_l_RLCETH = data['B'] 
	price_asks_c_l_RLCETH = data['a'] 
	qty_asks_c_l_RLCETH = data['A'] 

	global symbol_g_RLCETH 
	global price_bids_g_RLCETH 
	global qty_bids_g_RLCETH 
	global price_asks_g_RLCETH 
	global qty_asks_g_RLCETH 

	symbol_g_RLCETH = symbol_c_l_RLCETH 
	price_bids_g_RLCETH = Decimal(price_bids_c_l_RLCETH) 
	qty_bids_g_RLCETH = Decimal(qty_bids_c_l_RLCETH) 
	price_asks_g_RLCETH = Decimal(price_asks_c_l_RLCETH) 
	qty_asks_g_RLCETH = Decimal(qty_asks_c_l_RLCETH) 


def loop_RLCETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rlceth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RLCETH) 
	ws.run_forever() 


Thread(target=loop_RLCETH).start() 
symbol_g_IOSTETH = 'IOSTETH' 
price_bids_g_IOSTETH = Decimal('0.0') 
qty_bids_g_IOSTETH = Decimal('0.0') 
price_asks_g_IOSTETH = Decimal('0.0') 
qty_asks_g_IOSTETH = Decimal('0.0') 
stepSize_g_IOSTETH = Decimal('1.0') 


def on_message_IOSTETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IOSTETH = 'IOSTETH' 
	price_bids_c_l_IOSTETH = data['b'] 
	qty_bids_c_l_IOSTETH = data['B'] 
	price_asks_c_l_IOSTETH = data['a'] 
	qty_asks_c_l_IOSTETH = data['A'] 

	global symbol_g_IOSTETH 
	global price_bids_g_IOSTETH 
	global qty_bids_g_IOSTETH 
	global price_asks_g_IOSTETH 
	global qty_asks_g_IOSTETH 

	symbol_g_IOSTETH = symbol_c_l_IOSTETH 
	price_bids_g_IOSTETH = Decimal(price_bids_c_l_IOSTETH) 
	qty_bids_g_IOSTETH = Decimal(qty_bids_c_l_IOSTETH) 
	price_asks_g_IOSTETH = Decimal(price_asks_c_l_IOSTETH) 
	qty_asks_g_IOSTETH = Decimal(qty_asks_c_l_IOSTETH) 


def loop_IOSTETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/iosteth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IOSTETH) 
	ws.run_forever() 


Thread(target=loop_IOSTETH).start() 
symbol_g_STEEMETH = 'STEEMETH' 
price_bids_g_STEEMETH = Decimal('0.0') 
qty_bids_g_STEEMETH = Decimal('0.0') 
price_asks_g_STEEMETH = Decimal('0.0') 
qty_asks_g_STEEMETH = Decimal('0.0') 
stepSize_g_STEEMETH = Decimal('1.0') 


def on_message_STEEMETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STEEMETH = 'STEEMETH' 
	price_bids_c_l_STEEMETH = data['b'] 
	qty_bids_c_l_STEEMETH = data['B'] 
	price_asks_c_l_STEEMETH = data['a'] 
	qty_asks_c_l_STEEMETH = data['A'] 

	global symbol_g_STEEMETH 
	global price_bids_g_STEEMETH 
	global qty_bids_g_STEEMETH 
	global price_asks_g_STEEMETH 
	global qty_asks_g_STEEMETH 

	symbol_g_STEEMETH = symbol_c_l_STEEMETH 
	price_bids_g_STEEMETH = Decimal(price_bids_c_l_STEEMETH) 
	qty_bids_g_STEEMETH = Decimal(qty_bids_c_l_STEEMETH) 
	price_asks_g_STEEMETH = Decimal(price_asks_c_l_STEEMETH) 
	qty_asks_g_STEEMETH = Decimal(qty_asks_c_l_STEEMETH) 


def loop_STEEMETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/steemeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STEEMETH) 
	ws.run_forever() 


Thread(target=loop_STEEMETH).start() 
symbol_g_ZILETH = 'ZILETH' 
price_bids_g_ZILETH = Decimal('0.0') 
qty_bids_g_ZILETH = Decimal('0.0') 
price_asks_g_ZILETH = Decimal('0.0') 
qty_asks_g_ZILETH = Decimal('0.0') 
stepSize_g_ZILETH = Decimal('1.0') 


def on_message_ZILETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZILETH = 'ZILETH' 
	price_bids_c_l_ZILETH = data['b'] 
	qty_bids_c_l_ZILETH = data['B'] 
	price_asks_c_l_ZILETH = data['a'] 
	qty_asks_c_l_ZILETH = data['A'] 

	global symbol_g_ZILETH 
	global price_bids_g_ZILETH 
	global qty_bids_g_ZILETH 
	global price_asks_g_ZILETH 
	global qty_asks_g_ZILETH 

	symbol_g_ZILETH = symbol_c_l_ZILETH 
	price_bids_g_ZILETH = Decimal(price_bids_c_l_ZILETH) 
	qty_bids_g_ZILETH = Decimal(qty_bids_c_l_ZILETH) 
	price_asks_g_ZILETH = Decimal(price_asks_c_l_ZILETH) 
	qty_asks_g_ZILETH = Decimal(qty_asks_c_l_ZILETH) 


def loop_ZILETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zileth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZILETH) 
	ws.run_forever() 


Thread(target=loop_ZILETH).start() 
symbol_g_ONTETH = 'ONTETH' 
price_bids_g_ONTETH = Decimal('0.0') 
qty_bids_g_ONTETH = Decimal('0.0') 
price_asks_g_ONTETH = Decimal('0.0') 
qty_asks_g_ONTETH = Decimal('0.0') 
stepSize_g_ONTETH = Decimal('1.0') 


def on_message_ONTETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ONTETH = 'ONTETH' 
	price_bids_c_l_ONTETH = data['b'] 
	qty_bids_c_l_ONTETH = data['B'] 
	price_asks_c_l_ONTETH = data['a'] 
	qty_asks_c_l_ONTETH = data['A'] 

	global symbol_g_ONTETH 
	global price_bids_g_ONTETH 
	global qty_bids_g_ONTETH 
	global price_asks_g_ONTETH 
	global qty_asks_g_ONTETH 

	symbol_g_ONTETH = symbol_c_l_ONTETH 
	price_bids_g_ONTETH = Decimal(price_bids_c_l_ONTETH) 
	qty_bids_g_ONTETH = Decimal(qty_bids_c_l_ONTETH) 
	price_asks_g_ONTETH = Decimal(price_asks_c_l_ONTETH) 
	qty_asks_g_ONTETH = Decimal(qty_asks_c_l_ONTETH) 


def loop_ONTETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/onteth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ONTETH) 
	ws.run_forever() 


Thread(target=loop_ONTETH).start() 
symbol_g_WANETH = 'WANETH' 
price_bids_g_WANETH = Decimal('0.0') 
qty_bids_g_WANETH = Decimal('0.0') 
price_asks_g_WANETH = Decimal('0.0') 
qty_asks_g_WANETH = Decimal('0.0') 
stepSize_g_WANETH = Decimal('1.0') 


def on_message_WANETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WANETH = 'WANETH' 
	price_bids_c_l_WANETH = data['b'] 
	qty_bids_c_l_WANETH = data['B'] 
	price_asks_c_l_WANETH = data['a'] 
	qty_asks_c_l_WANETH = data['A'] 

	global symbol_g_WANETH 
	global price_bids_g_WANETH 
	global qty_bids_g_WANETH 
	global price_asks_g_WANETH 
	global qty_asks_g_WANETH 

	symbol_g_WANETH = symbol_c_l_WANETH 
	price_bids_g_WANETH = Decimal(price_bids_c_l_WANETH) 
	qty_bids_g_WANETH = Decimal(qty_bids_c_l_WANETH) 
	price_asks_g_WANETH = Decimal(price_asks_c_l_WANETH) 
	qty_asks_g_WANETH = Decimal(qty_asks_c_l_WANETH) 


def loop_WANETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/waneth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WANETH) 
	ws.run_forever() 


Thread(target=loop_WANETH).start() 
symbol_g_ZENETH = 'ZENETH' 
price_bids_g_ZENETH = Decimal('0.0') 
qty_bids_g_ZENETH = Decimal('0.0') 
price_asks_g_ZENETH = Decimal('0.0') 
qty_asks_g_ZENETH = Decimal('0.0') 
stepSize_g_ZENETH = Decimal('0.01') 


def on_message_ZENETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZENETH = 'ZENETH' 
	price_bids_c_l_ZENETH = data['b'] 
	qty_bids_c_l_ZENETH = data['B'] 
	price_asks_c_l_ZENETH = data['a'] 
	qty_asks_c_l_ZENETH = data['A'] 

	global symbol_g_ZENETH 
	global price_bids_g_ZENETH 
	global qty_bids_g_ZENETH 
	global price_asks_g_ZENETH 
	global qty_asks_g_ZENETH 

	symbol_g_ZENETH = symbol_c_l_ZENETH 
	price_bids_g_ZENETH = Decimal(price_bids_c_l_ZENETH) 
	qty_bids_g_ZENETH = Decimal(qty_bids_c_l_ZENETH) 
	price_asks_g_ZENETH = Decimal(price_asks_c_l_ZENETH) 
	qty_asks_g_ZENETH = Decimal(qty_asks_c_l_ZENETH) 


def loop_ZENETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zeneth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZENETH) 
	ws.run_forever() 


Thread(target=loop_ZENETH).start() 
symbol_g_THETAETH = 'THETAETH' 
price_bids_g_THETAETH = Decimal('0.0') 
qty_bids_g_THETAETH = Decimal('0.0') 
price_asks_g_THETAETH = Decimal('0.0') 
qty_asks_g_THETAETH = Decimal('0.0') 
stepSize_g_THETAETH = Decimal('0.1') 


def on_message_THETAETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_THETAETH = 'THETAETH' 
	price_bids_c_l_THETAETH = data['b'] 
	qty_bids_c_l_THETAETH = data['B'] 
	price_asks_c_l_THETAETH = data['a'] 
	qty_asks_c_l_THETAETH = data['A'] 

	global symbol_g_THETAETH 
	global price_bids_g_THETAETH 
	global qty_bids_g_THETAETH 
	global price_asks_g_THETAETH 
	global qty_asks_g_THETAETH 

	symbol_g_THETAETH = symbol_c_l_THETAETH 
	price_bids_g_THETAETH = Decimal(price_bids_c_l_THETAETH) 
	qty_bids_g_THETAETH = Decimal(qty_bids_c_l_THETAETH) 
	price_asks_g_THETAETH = Decimal(price_asks_c_l_THETAETH) 
	qty_asks_g_THETAETH = Decimal(qty_asks_c_l_THETAETH) 


def loop_THETAETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/thetaeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_THETAETH) 
	ws.run_forever() 


Thread(target=loop_THETAETH).start() 
symbol_g_IOTXETH = 'IOTXETH' 
price_bids_g_IOTXETH = Decimal('0.0') 
qty_bids_g_IOTXETH = Decimal('0.0') 
price_asks_g_IOTXETH = Decimal('0.0') 
qty_asks_g_IOTXETH = Decimal('0.0') 
stepSize_g_IOTXETH = Decimal('1.0') 


def on_message_IOTXETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IOTXETH = 'IOTXETH' 
	price_bids_c_l_IOTXETH = data['b'] 
	qty_bids_c_l_IOTXETH = data['B'] 
	price_asks_c_l_IOTXETH = data['a'] 
	qty_asks_c_l_IOTXETH = data['A'] 

	global symbol_g_IOTXETH 
	global price_bids_g_IOTXETH 
	global qty_bids_g_IOTXETH 
	global price_asks_g_IOTXETH 
	global qty_asks_g_IOTXETH 

	symbol_g_IOTXETH = symbol_c_l_IOTXETH 
	price_bids_g_IOTXETH = Decimal(price_bids_c_l_IOTXETH) 
	qty_bids_g_IOTXETH = Decimal(qty_bids_c_l_IOTXETH) 
	price_asks_g_IOTXETH = Decimal(price_asks_c_l_IOTXETH) 
	qty_asks_g_IOTXETH = Decimal(qty_asks_c_l_IOTXETH) 


def loop_IOTXETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/iotxeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IOTXETH) 
	ws.run_forever() 


Thread(target=loop_IOTXETH).start() 
symbol_g_SCETH = 'SCETH' 
price_bids_g_SCETH = Decimal('0.0') 
qty_bids_g_SCETH = Decimal('0.0') 
price_asks_g_SCETH = Decimal('0.0') 
qty_asks_g_SCETH = Decimal('0.0') 
stepSize_g_SCETH = Decimal('1.0') 


def on_message_SCETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SCETH = 'SCETH' 
	price_bids_c_l_SCETH = data['b'] 
	qty_bids_c_l_SCETH = data['B'] 
	price_asks_c_l_SCETH = data['a'] 
	qty_asks_c_l_SCETH = data['A'] 

	global symbol_g_SCETH 
	global price_bids_g_SCETH 
	global qty_bids_g_SCETH 
	global price_asks_g_SCETH 
	global qty_asks_g_SCETH 

	symbol_g_SCETH = symbol_c_l_SCETH 
	price_bids_g_SCETH = Decimal(price_bids_c_l_SCETH) 
	qty_bids_g_SCETH = Decimal(qty_bids_c_l_SCETH) 
	price_asks_g_SCETH = Decimal(price_asks_c_l_SCETH) 
	qty_asks_g_SCETH = Decimal(qty_asks_c_l_SCETH) 


def loop_SCETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sceth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SCETH) 
	ws.run_forever() 


Thread(target=loop_SCETH).start() 
symbol_g_KEYETH = 'KEYETH' 
price_bids_g_KEYETH = Decimal('0.0') 
qty_bids_g_KEYETH = Decimal('0.0') 
price_asks_g_KEYETH = Decimal('0.0') 
qty_asks_g_KEYETH = Decimal('0.0') 
stepSize_g_KEYETH = Decimal('1.0') 


def on_message_KEYETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KEYETH = 'KEYETH' 
	price_bids_c_l_KEYETH = data['b'] 
	qty_bids_c_l_KEYETH = data['B'] 
	price_asks_c_l_KEYETH = data['a'] 
	qty_asks_c_l_KEYETH = data['A'] 

	global symbol_g_KEYETH 
	global price_bids_g_KEYETH 
	global qty_bids_g_KEYETH 
	global price_asks_g_KEYETH 
	global qty_asks_g_KEYETH 

	symbol_g_KEYETH = symbol_c_l_KEYETH 
	price_bids_g_KEYETH = Decimal(price_bids_c_l_KEYETH) 
	qty_bids_g_KEYETH = Decimal(qty_bids_c_l_KEYETH) 
	price_asks_g_KEYETH = Decimal(price_asks_c_l_KEYETH) 
	qty_asks_g_KEYETH = Decimal(qty_asks_c_l_KEYETH) 


def loop_KEYETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/keyeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KEYETH) 
	ws.run_forever() 


Thread(target=loop_KEYETH).start() 
symbol_g_DENTETH = 'DENTETH' 
price_bids_g_DENTETH = Decimal('0.0') 
qty_bids_g_DENTETH = Decimal('0.0') 
price_asks_g_DENTETH = Decimal('0.0') 
qty_asks_g_DENTETH = Decimal('0.0') 
stepSize_g_DENTETH = Decimal('1.0') 


def on_message_DENTETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DENTETH = 'DENTETH' 
	price_bids_c_l_DENTETH = data['b'] 
	qty_bids_c_l_DENTETH = data['B'] 
	price_asks_c_l_DENTETH = data['a'] 
	qty_asks_c_l_DENTETH = data['A'] 

	global symbol_g_DENTETH 
	global price_bids_g_DENTETH 
	global qty_bids_g_DENTETH 
	global price_asks_g_DENTETH 
	global qty_asks_g_DENTETH 

	symbol_g_DENTETH = symbol_c_l_DENTETH 
	price_bids_g_DENTETH = Decimal(price_bids_c_l_DENTETH) 
	qty_bids_g_DENTETH = Decimal(qty_bids_c_l_DENTETH) 
	price_asks_g_DENTETH = Decimal(price_asks_c_l_DENTETH) 
	qty_asks_g_DENTETH = Decimal(qty_asks_c_l_DENTETH) 


def loop_DENTETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/denteth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DENTETH) 
	ws.run_forever() 


Thread(target=loop_DENTETH).start() 
symbol_g_HOTETH = 'HOTETH' 
price_bids_g_HOTETH = Decimal('0.0') 
qty_bids_g_HOTETH = Decimal('0.0') 
price_asks_g_HOTETH = Decimal('0.0') 
qty_asks_g_HOTETH = Decimal('0.0') 
stepSize_g_HOTETH = Decimal('1.0') 


def on_message_HOTETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HOTETH = 'HOTETH' 
	price_bids_c_l_HOTETH = data['b'] 
	qty_bids_c_l_HOTETH = data['B'] 
	price_asks_c_l_HOTETH = data['a'] 
	qty_asks_c_l_HOTETH = data['A'] 

	global symbol_g_HOTETH 
	global price_bids_g_HOTETH 
	global qty_bids_g_HOTETH 
	global price_asks_g_HOTETH 
	global qty_asks_g_HOTETH 

	symbol_g_HOTETH = symbol_c_l_HOTETH 
	price_bids_g_HOTETH = Decimal(price_bids_c_l_HOTETH) 
	qty_bids_g_HOTETH = Decimal(qty_bids_c_l_HOTETH) 
	price_asks_g_HOTETH = Decimal(price_asks_c_l_HOTETH) 
	qty_asks_g_HOTETH = Decimal(qty_asks_c_l_HOTETH) 


def loop_HOTETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hoteth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HOTETH) 
	ws.run_forever() 


Thread(target=loop_HOTETH).start() 
symbol_g_VETETH = 'VETETH' 
price_bids_g_VETETH = Decimal('0.0') 
qty_bids_g_VETETH = Decimal('0.0') 
price_asks_g_VETETH = Decimal('0.0') 
qty_asks_g_VETETH = Decimal('0.0') 
stepSize_g_VETETH = Decimal('1.0') 


def on_message_VETETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VETETH = 'VETETH' 
	price_bids_c_l_VETETH = data['b'] 
	qty_bids_c_l_VETETH = data['B'] 
	price_asks_c_l_VETETH = data['a'] 
	qty_asks_c_l_VETETH = data['A'] 

	global symbol_g_VETETH 
	global price_bids_g_VETETH 
	global qty_bids_g_VETETH 
	global price_asks_g_VETETH 
	global qty_asks_g_VETETH 

	symbol_g_VETETH = symbol_c_l_VETETH 
	price_bids_g_VETETH = Decimal(price_bids_c_l_VETETH) 
	qty_bids_g_VETETH = Decimal(qty_bids_c_l_VETETH) 
	price_asks_g_VETETH = Decimal(price_asks_c_l_VETETH) 
	qty_asks_g_VETETH = Decimal(qty_asks_c_l_VETETH) 


def loop_VETETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/veteth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VETETH) 
	ws.run_forever() 


Thread(target=loop_VETETH).start() 
symbol_g_ETHBUSD = 'ETHBUSD' 
price_bids_g_ETHBUSD = Decimal('0.0') 
qty_bids_g_ETHBUSD = Decimal('0.0') 
price_asks_g_ETHBUSD = Decimal('0.0') 
qty_asks_g_ETHBUSD = Decimal('0.0') 
stepSize_g_ETHBUSD = Decimal('0.0001') 


def on_message_ETHBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETHBUSD = 'ETHBUSD' 
	price_bids_c_l_ETHBUSD = data['b'] 
	qty_bids_c_l_ETHBUSD = data['B'] 
	price_asks_c_l_ETHBUSD = data['a'] 
	qty_asks_c_l_ETHBUSD = data['A'] 

	global symbol_g_ETHBUSD 
	global price_bids_g_ETHBUSD 
	global qty_bids_g_ETHBUSD 
	global price_asks_g_ETHBUSD 
	global qty_asks_g_ETHBUSD 

	symbol_g_ETHBUSD = symbol_c_l_ETHBUSD 
	price_bids_g_ETHBUSD = Decimal(price_bids_c_l_ETHBUSD) 
	qty_bids_g_ETHBUSD = Decimal(qty_bids_c_l_ETHBUSD) 
	price_asks_g_ETHBUSD = Decimal(price_asks_c_l_ETHBUSD) 
	qty_asks_g_ETHBUSD = Decimal(qty_asks_c_l_ETHBUSD) 


def loop_ETHBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ethbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETHBUSD) 
	ws.run_forever() 


Thread(target=loop_ETHBUSD).start() 
symbol_g_ETHEUR = 'ETHEUR' 
price_bids_g_ETHEUR = Decimal('0.0') 
qty_bids_g_ETHEUR = Decimal('0.0') 
price_asks_g_ETHEUR = Decimal('0.0') 
qty_asks_g_ETHEUR = Decimal('0.0') 
stepSize_g_ETHEUR = Decimal('0.0001') 


def on_message_ETHEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETHEUR = 'ETHEUR' 
	price_bids_c_l_ETHEUR = data['b'] 
	qty_bids_c_l_ETHEUR = data['B'] 
	price_asks_c_l_ETHEUR = data['a'] 
	qty_asks_c_l_ETHEUR = data['A'] 

	global symbol_g_ETHEUR 
	global price_bids_g_ETHEUR 
	global qty_bids_g_ETHEUR 
	global price_asks_g_ETHEUR 
	global qty_asks_g_ETHEUR 

	symbol_g_ETHEUR = symbol_c_l_ETHEUR 
	price_bids_g_ETHEUR = Decimal(price_bids_c_l_ETHEUR) 
	qty_bids_g_ETHEUR = Decimal(qty_bids_c_l_ETHEUR) 
	price_asks_g_ETHEUR = Decimal(price_asks_c_l_ETHEUR) 
	qty_asks_g_ETHEUR = Decimal(qty_asks_c_l_ETHEUR) 


def loop_ETHEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/etheur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETHEUR) 
	ws.run_forever() 


Thread(target=loop_ETHEUR).start() 
symbol_g_ETHGBP = 'ETHGBP' 
price_bids_g_ETHGBP = Decimal('0.0') 
qty_bids_g_ETHGBP = Decimal('0.0') 
price_asks_g_ETHGBP = Decimal('0.0') 
qty_asks_g_ETHGBP = Decimal('0.0') 
stepSize_g_ETHGBP = Decimal('0.0001') 


def on_message_ETHGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETHGBP = 'ETHGBP' 
	price_bids_c_l_ETHGBP = data['b'] 
	qty_bids_c_l_ETHGBP = data['B'] 
	price_asks_c_l_ETHGBP = data['a'] 
	qty_asks_c_l_ETHGBP = data['A'] 

	global symbol_g_ETHGBP 
	global price_bids_g_ETHGBP 
	global qty_bids_g_ETHGBP 
	global price_asks_g_ETHGBP 
	global qty_asks_g_ETHGBP 

	symbol_g_ETHGBP = symbol_c_l_ETHGBP 
	price_bids_g_ETHGBP = Decimal(price_bids_c_l_ETHGBP) 
	qty_bids_g_ETHGBP = Decimal(qty_bids_c_l_ETHGBP) 
	price_asks_g_ETHGBP = Decimal(price_asks_c_l_ETHGBP) 
	qty_asks_g_ETHGBP = Decimal(qty_asks_c_l_ETHGBP) 


def loop_ETHGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ethgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETHGBP) 
	ws.run_forever() 


Thread(target=loop_ETHGBP).start() 
symbol_g_ETHAUD = 'ETHAUD' 
price_bids_g_ETHAUD = Decimal('0.0') 
qty_bids_g_ETHAUD = Decimal('0.0') 
price_asks_g_ETHAUD = Decimal('0.0') 
qty_asks_g_ETHAUD = Decimal('0.0') 
stepSize_g_ETHAUD = Decimal('0.0001') 


def on_message_ETHAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETHAUD = 'ETHAUD' 
	price_bids_c_l_ETHAUD = data['b'] 
	qty_bids_c_l_ETHAUD = data['B'] 
	price_asks_c_l_ETHAUD = data['a'] 
	qty_asks_c_l_ETHAUD = data['A'] 

	global symbol_g_ETHAUD 
	global price_bids_g_ETHAUD 
	global qty_bids_g_ETHAUD 
	global price_asks_g_ETHAUD 
	global qty_asks_g_ETHAUD 

	symbol_g_ETHAUD = symbol_c_l_ETHAUD 
	price_bids_g_ETHAUD = Decimal(price_bids_c_l_ETHAUD) 
	qty_bids_g_ETHAUD = Decimal(qty_bids_c_l_ETHAUD) 
	price_asks_g_ETHAUD = Decimal(price_asks_c_l_ETHAUD) 
	qty_asks_g_ETHAUD = Decimal(qty_asks_c_l_ETHAUD) 


def loop_ETHAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ethaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETHAUD) 
	ws.run_forever() 


Thread(target=loop_ETHAUD).start() 
symbol_g_SCRTETH = 'SCRTETH' 
price_bids_g_SCRTETH = Decimal('0.0') 
qty_bids_g_SCRTETH = Decimal('0.0') 
price_asks_g_SCRTETH = Decimal('0.0') 
qty_asks_g_SCRTETH = Decimal('0.0') 
stepSize_g_SCRTETH = Decimal('1.0') 


def on_message_SCRTETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SCRTETH = 'SCRTETH' 
	price_bids_c_l_SCRTETH = data['b'] 
	qty_bids_c_l_SCRTETH = data['B'] 
	price_asks_c_l_SCRTETH = data['a'] 
	qty_asks_c_l_SCRTETH = data['A'] 

	global symbol_g_SCRTETH 
	global price_bids_g_SCRTETH 
	global qty_bids_g_SCRTETH 
	global price_asks_g_SCRTETH 
	global qty_asks_g_SCRTETH 

	symbol_g_SCRTETH = symbol_c_l_SCRTETH 
	price_bids_g_SCRTETH = Decimal(price_bids_c_l_SCRTETH) 
	qty_bids_g_SCRTETH = Decimal(qty_bids_c_l_SCRTETH) 
	price_asks_g_SCRTETH = Decimal(price_asks_c_l_SCRTETH) 
	qty_asks_g_SCRTETH = Decimal(qty_asks_c_l_SCRTETH) 


def loop_SCRTETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/scrteth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SCRTETH) 
	ws.run_forever() 


Thread(target=loop_SCRTETH).start() 
symbol_g_AAVEETH = 'AAVEETH' 
price_bids_g_AAVEETH = Decimal('0.0') 
qty_bids_g_AAVEETH = Decimal('0.0') 
price_asks_g_AAVEETH = Decimal('0.0') 
qty_asks_g_AAVEETH = Decimal('0.0') 
stepSize_g_AAVEETH = Decimal('0.001') 


def on_message_AAVEETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AAVEETH = 'AAVEETH' 
	price_bids_c_l_AAVEETH = data['b'] 
	qty_bids_c_l_AAVEETH = data['B'] 
	price_asks_c_l_AAVEETH = data['a'] 
	qty_asks_c_l_AAVEETH = data['A'] 

	global symbol_g_AAVEETH 
	global price_bids_g_AAVEETH 
	global qty_bids_g_AAVEETH 
	global price_asks_g_AAVEETH 
	global qty_asks_g_AAVEETH 

	symbol_g_AAVEETH = symbol_c_l_AAVEETH 
	price_bids_g_AAVEETH = Decimal(price_bids_c_l_AAVEETH) 
	qty_bids_g_AAVEETH = Decimal(qty_bids_c_l_AAVEETH) 
	price_asks_g_AAVEETH = Decimal(price_asks_c_l_AAVEETH) 
	qty_asks_g_AAVEETH = Decimal(qty_asks_c_l_AAVEETH) 


def loop_AAVEETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/aaveeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AAVEETH) 
	ws.run_forever() 


Thread(target=loop_AAVEETH).start() 
symbol_g_SLPETH = 'SLPETH' 
price_bids_g_SLPETH = Decimal('0.0') 
qty_bids_g_SLPETH = Decimal('0.0') 
price_asks_g_SLPETH = Decimal('0.0') 
qty_asks_g_SLPETH = Decimal('0.0') 
stepSize_g_SLPETH = Decimal('1.0') 


def on_message_SLPETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SLPETH = 'SLPETH' 
	price_bids_c_l_SLPETH = data['b'] 
	qty_bids_c_l_SLPETH = data['B'] 
	price_asks_c_l_SLPETH = data['a'] 
	qty_asks_c_l_SLPETH = data['A'] 

	global symbol_g_SLPETH 
	global price_bids_g_SLPETH 
	global qty_bids_g_SLPETH 
	global price_asks_g_SLPETH 
	global qty_asks_g_SLPETH 

	symbol_g_SLPETH = symbol_c_l_SLPETH 
	price_bids_g_SLPETH = Decimal(price_bids_c_l_SLPETH) 
	qty_bids_g_SLPETH = Decimal(qty_bids_c_l_SLPETH) 
	price_asks_g_SLPETH = Decimal(price_asks_c_l_SLPETH) 
	qty_asks_g_SLPETH = Decimal(qty_asks_c_l_SLPETH) 


def loop_SLPETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/slpeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SLPETH) 
	ws.run_forever() 


Thread(target=loop_SLPETH).start() 
symbol_g_CVPETH = 'CVPETH' 
price_bids_g_CVPETH = Decimal('0.0') 
qty_bids_g_CVPETH = Decimal('0.0') 
price_asks_g_CVPETH = Decimal('0.0') 
qty_asks_g_CVPETH = Decimal('0.0') 
stepSize_g_CVPETH = Decimal('1.0') 


def on_message_CVPETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CVPETH = 'CVPETH' 
	price_bids_c_l_CVPETH = data['b'] 
	qty_bids_c_l_CVPETH = data['B'] 
	price_asks_c_l_CVPETH = data['a'] 
	qty_asks_c_l_CVPETH = data['A'] 

	global symbol_g_CVPETH 
	global price_bids_g_CVPETH 
	global qty_bids_g_CVPETH 
	global price_asks_g_CVPETH 
	global qty_asks_g_CVPETH 

	symbol_g_CVPETH = symbol_c_l_CVPETH 
	price_bids_g_CVPETH = Decimal(price_bids_c_l_CVPETH) 
	qty_bids_g_CVPETH = Decimal(qty_bids_c_l_CVPETH) 
	price_asks_g_CVPETH = Decimal(price_asks_c_l_CVPETH) 
	qty_asks_g_CVPETH = Decimal(qty_asks_c_l_CVPETH) 


def loop_CVPETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cvpeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CVPETH) 
	ws.run_forever() 


Thread(target=loop_CVPETH).start() 
symbol_g_GRTETH = 'GRTETH' 
price_bids_g_GRTETH = Decimal('0.0') 
qty_bids_g_GRTETH = Decimal('0.0') 
price_asks_g_GRTETH = Decimal('0.0') 
qty_asks_g_GRTETH = Decimal('0.0') 
stepSize_g_GRTETH = Decimal('1.0') 


def on_message_GRTETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GRTETH = 'GRTETH' 
	price_bids_c_l_GRTETH = data['b'] 
	qty_bids_c_l_GRTETH = data['B'] 
	price_asks_c_l_GRTETH = data['a'] 
	qty_asks_c_l_GRTETH = data['A'] 

	global symbol_g_GRTETH 
	global price_bids_g_GRTETH 
	global qty_bids_g_GRTETH 
	global price_asks_g_GRTETH 
	global qty_asks_g_GRTETH 

	symbol_g_GRTETH = symbol_c_l_GRTETH 
	price_bids_g_GRTETH = Decimal(price_bids_c_l_GRTETH) 
	qty_bids_g_GRTETH = Decimal(qty_bids_c_l_GRTETH) 
	price_asks_g_GRTETH = Decimal(price_asks_c_l_GRTETH) 
	qty_asks_g_GRTETH = Decimal(qty_asks_c_l_GRTETH) 


def loop_GRTETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/grteth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GRTETH) 
	ws.run_forever() 


Thread(target=loop_GRTETH).start() 
symbol_g_DEXEETH = 'DEXEETH' 
price_bids_g_DEXEETH = Decimal('0.0') 
qty_bids_g_DEXEETH = Decimal('0.0') 
price_asks_g_DEXEETH = Decimal('0.0') 
qty_asks_g_DEXEETH = Decimal('0.0') 
stepSize_g_DEXEETH = Decimal('0.01') 


def on_message_DEXEETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DEXEETH = 'DEXEETH' 
	price_bids_c_l_DEXEETH = data['b'] 
	qty_bids_c_l_DEXEETH = data['B'] 
	price_asks_c_l_DEXEETH = data['a'] 
	qty_asks_c_l_DEXEETH = data['A'] 

	global symbol_g_DEXEETH 
	global price_bids_g_DEXEETH 
	global qty_bids_g_DEXEETH 
	global price_asks_g_DEXEETH 
	global qty_asks_g_DEXEETH 

	symbol_g_DEXEETH = symbol_c_l_DEXEETH 
	price_bids_g_DEXEETH = Decimal(price_bids_c_l_DEXEETH) 
	qty_bids_g_DEXEETH = Decimal(qty_bids_c_l_DEXEETH) 
	price_asks_g_DEXEETH = Decimal(price_asks_c_l_DEXEETH) 
	qty_asks_g_DEXEETH = Decimal(qty_asks_c_l_DEXEETH) 


def loop_DEXEETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dexeeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DEXEETH) 
	ws.run_forever() 


Thread(target=loop_DEXEETH).start() 
symbol_g_PUNDIXETH = 'PUNDIXETH' 
price_bids_g_PUNDIXETH = Decimal('0.0') 
qty_bids_g_PUNDIXETH = Decimal('0.0') 
price_asks_g_PUNDIXETH = Decimal('0.0') 
qty_asks_g_PUNDIXETH = Decimal('0.0') 
stepSize_g_PUNDIXETH = Decimal('0.1') 


def on_message_PUNDIXETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PUNDIXETH = 'PUNDIXETH' 
	price_bids_c_l_PUNDIXETH = data['b'] 
	qty_bids_c_l_PUNDIXETH = data['B'] 
	price_asks_c_l_PUNDIXETH = data['a'] 
	qty_asks_c_l_PUNDIXETH = data['A'] 

	global symbol_g_PUNDIXETH 
	global price_bids_g_PUNDIXETH 
	global qty_bids_g_PUNDIXETH 
	global price_asks_g_PUNDIXETH 
	global qty_asks_g_PUNDIXETH 

	symbol_g_PUNDIXETH = symbol_c_l_PUNDIXETH 
	price_bids_g_PUNDIXETH = Decimal(price_bids_c_l_PUNDIXETH) 
	qty_bids_g_PUNDIXETH = Decimal(qty_bids_c_l_PUNDIXETH) 
	price_asks_g_PUNDIXETH = Decimal(price_asks_c_l_PUNDIXETH) 
	qty_asks_g_PUNDIXETH = Decimal(qty_asks_c_l_PUNDIXETH) 


def loop_PUNDIXETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/pundixeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PUNDIXETH) 
	ws.run_forever() 


Thread(target=loop_PUNDIXETH).start() 
symbol_g_AXSETH = 'AXSETH' 
price_bids_g_AXSETH = Decimal('0.0') 
qty_bids_g_AXSETH = Decimal('0.0') 
price_asks_g_AXSETH = Decimal('0.0') 
qty_asks_g_AXSETH = Decimal('0.0') 
stepSize_g_AXSETH = Decimal('0.001') 


def on_message_AXSETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AXSETH = 'AXSETH' 
	price_bids_c_l_AXSETH = data['b'] 
	qty_bids_c_l_AXSETH = data['B'] 
	price_asks_c_l_AXSETH = data['a'] 
	qty_asks_c_l_AXSETH = data['A'] 

	global symbol_g_AXSETH 
	global price_bids_g_AXSETH 
	global qty_bids_g_AXSETH 
	global price_asks_g_AXSETH 
	global qty_asks_g_AXSETH 

	symbol_g_AXSETH = symbol_c_l_AXSETH 
	price_bids_g_AXSETH = Decimal(price_bids_c_l_AXSETH) 
	qty_bids_g_AXSETH = Decimal(qty_bids_c_l_AXSETH) 
	price_asks_g_AXSETH = Decimal(price_asks_c_l_AXSETH) 
	qty_asks_g_AXSETH = Decimal(qty_asks_c_l_AXSETH) 


def loop_AXSETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/axseth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AXSETH) 
	ws.run_forever() 


Thread(target=loop_AXSETH).start() 
symbol_g_FTMETH = 'FTMETH' 
price_bids_g_FTMETH = Decimal('0.0') 
qty_bids_g_FTMETH = Decimal('0.0') 
price_asks_g_FTMETH = Decimal('0.0') 
qty_asks_g_FTMETH = Decimal('0.0') 
stepSize_g_FTMETH = Decimal('0.1') 


def on_message_FTMETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FTMETH = 'FTMETH' 
	price_bids_c_l_FTMETH = data['b'] 
	qty_bids_c_l_FTMETH = data['B'] 
	price_asks_c_l_FTMETH = data['a'] 
	qty_asks_c_l_FTMETH = data['A'] 

	global symbol_g_FTMETH 
	global price_bids_g_FTMETH 
	global qty_bids_g_FTMETH 
	global price_asks_g_FTMETH 
	global qty_asks_g_FTMETH 

	symbol_g_FTMETH = symbol_c_l_FTMETH 
	price_bids_g_FTMETH = Decimal(price_bids_c_l_FTMETH) 
	qty_bids_g_FTMETH = Decimal(qty_bids_c_l_FTMETH) 
	price_asks_g_FTMETH = Decimal(price_asks_c_l_FTMETH) 
	qty_asks_g_FTMETH = Decimal(qty_asks_c_l_FTMETH) 


def loop_FTMETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ftmeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FTMETH) 
	ws.run_forever() 


Thread(target=loop_FTMETH).start() 
symbol_g_SOLETH = 'SOLETH' 
price_bids_g_SOLETH = Decimal('0.0') 
qty_bids_g_SOLETH = Decimal('0.0') 
price_asks_g_SOLETH = Decimal('0.0') 
qty_asks_g_SOLETH = Decimal('0.0') 
stepSize_g_SOLETH = Decimal('0.001') 


def on_message_SOLETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SOLETH = 'SOLETH' 
	price_bids_c_l_SOLETH = data['b'] 
	qty_bids_c_l_SOLETH = data['B'] 
	price_asks_c_l_SOLETH = data['a'] 
	qty_asks_c_l_SOLETH = data['A'] 

	global symbol_g_SOLETH 
	global price_bids_g_SOLETH 
	global qty_bids_g_SOLETH 
	global price_asks_g_SOLETH 
	global qty_asks_g_SOLETH 

	symbol_g_SOLETH = symbol_c_l_SOLETH 
	price_bids_g_SOLETH = Decimal(price_bids_c_l_SOLETH) 
	qty_bids_g_SOLETH = Decimal(qty_bids_c_l_SOLETH) 
	price_asks_g_SOLETH = Decimal(price_asks_c_l_SOLETH) 
	qty_asks_g_SOLETH = Decimal(qty_asks_c_l_SOLETH) 


def loop_SOLETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/soleth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SOLETH) 
	ws.run_forever() 


Thread(target=loop_SOLETH).start() 
symbol_g_SANDETH = 'SANDETH' 
price_bids_g_SANDETH = Decimal('0.0') 
qty_bids_g_SANDETH = Decimal('0.0') 
price_asks_g_SANDETH = Decimal('0.0') 
qty_asks_g_SANDETH = Decimal('0.0') 
stepSize_g_SANDETH = Decimal('0.1') 


def on_message_SANDETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SANDETH = 'SANDETH' 
	price_bids_c_l_SANDETH = data['b'] 
	qty_bids_c_l_SANDETH = data['B'] 
	price_asks_c_l_SANDETH = data['a'] 
	qty_asks_c_l_SANDETH = data['A'] 

	global symbol_g_SANDETH 
	global price_bids_g_SANDETH 
	global qty_bids_g_SANDETH 
	global price_asks_g_SANDETH 
	global qty_asks_g_SANDETH 

	symbol_g_SANDETH = symbol_c_l_SANDETH 
	price_bids_g_SANDETH = Decimal(price_bids_c_l_SANDETH) 
	qty_bids_g_SANDETH = Decimal(qty_bids_c_l_SANDETH) 
	price_asks_g_SANDETH = Decimal(price_asks_c_l_SANDETH) 
	qty_asks_g_SANDETH = Decimal(qty_asks_c_l_SANDETH) 


def loop_SANDETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sandeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SANDETH) 
	ws.run_forever() 


Thread(target=loop_SANDETH).start() 
symbol_g_DOTETH = 'DOTETH' 
price_bids_g_DOTETH = Decimal('0.0') 
qty_bids_g_DOTETH = Decimal('0.0') 
price_asks_g_DOTETH = Decimal('0.0') 
qty_asks_g_DOTETH = Decimal('0.0') 
stepSize_g_DOTETH = Decimal('0.01') 


def on_message_DOTETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOTETH = 'DOTETH' 
	price_bids_c_l_DOTETH = data['b'] 
	qty_bids_c_l_DOTETH = data['B'] 
	price_asks_c_l_DOTETH = data['a'] 
	qty_asks_c_l_DOTETH = data['A'] 

	global symbol_g_DOTETH 
	global price_bids_g_DOTETH 
	global qty_bids_g_DOTETH 
	global price_asks_g_DOTETH 
	global qty_asks_g_DOTETH 

	symbol_g_DOTETH = symbol_c_l_DOTETH 
	price_bids_g_DOTETH = Decimal(price_bids_c_l_DOTETH) 
	qty_bids_g_DOTETH = Decimal(qty_bids_c_l_DOTETH) 
	price_asks_g_DOTETH = Decimal(price_asks_c_l_DOTETH) 
	qty_asks_g_DOTETH = Decimal(qty_asks_c_l_DOTETH) 


def loop_DOTETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/doteth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOTETH) 
	ws.run_forever() 


Thread(target=loop_DOTETH).start() 
symbol_g_MATICETH = 'MATICETH' 
price_bids_g_MATICETH = Decimal('0.0') 
qty_bids_g_MATICETH = Decimal('0.0') 
price_asks_g_MATICETH = Decimal('0.0') 
qty_asks_g_MATICETH = Decimal('0.0') 
stepSize_g_MATICETH = Decimal('0.1') 


def on_message_MATICETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MATICETH = 'MATICETH' 
	price_bids_c_l_MATICETH = data['b'] 
	qty_bids_c_l_MATICETH = data['B'] 
	price_asks_c_l_MATICETH = data['a'] 
	qty_asks_c_l_MATICETH = data['A'] 

	global symbol_g_MATICETH 
	global price_bids_g_MATICETH 
	global qty_bids_g_MATICETH 
	global price_asks_g_MATICETH 
	global qty_asks_g_MATICETH 

	symbol_g_MATICETH = symbol_c_l_MATICETH 
	price_bids_g_MATICETH = Decimal(price_bids_c_l_MATICETH) 
	qty_bids_g_MATICETH = Decimal(qty_bids_c_l_MATICETH) 
	price_asks_g_MATICETH = Decimal(price_asks_c_l_MATICETH) 
	qty_asks_g_MATICETH = Decimal(qty_asks_c_l_MATICETH) 


def loop_MATICETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maticeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MATICETH) 
	ws.run_forever() 


Thread(target=loop_MATICETH).start() 
symbol_g_AVAXETH = 'AVAXETH' 
price_bids_g_AVAXETH = Decimal('0.0') 
qty_bids_g_AVAXETH = Decimal('0.0') 
price_asks_g_AVAXETH = Decimal('0.0') 
qty_asks_g_AVAXETH = Decimal('0.0') 
stepSize_g_AVAXETH = Decimal('0.01') 


def on_message_AVAXETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AVAXETH = 'AVAXETH' 
	price_bids_c_l_AVAXETH = data['b'] 
	qty_bids_c_l_AVAXETH = data['B'] 
	price_asks_c_l_AVAXETH = data['a'] 
	qty_asks_c_l_AVAXETH = data['A'] 

	global symbol_g_AVAXETH 
	global price_bids_g_AVAXETH 
	global qty_bids_g_AVAXETH 
	global price_asks_g_AVAXETH 
	global qty_asks_g_AVAXETH 

	symbol_g_AVAXETH = symbol_c_l_AVAXETH 
	price_bids_g_AVAXETH = Decimal(price_bids_c_l_AVAXETH) 
	qty_bids_g_AVAXETH = Decimal(qty_bids_c_l_AVAXETH) 
	price_asks_g_AVAXETH = Decimal(price_asks_c_l_AVAXETH) 
	qty_asks_g_AVAXETH = Decimal(qty_asks_c_l_AVAXETH) 


def loop_AVAXETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/avaxeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AVAXETH) 
	ws.run_forever() 


Thread(target=loop_AVAXETH).start() 
symbol_g_CHRETH = 'CHRETH' 
price_bids_g_CHRETH = Decimal('0.0') 
qty_bids_g_CHRETH = Decimal('0.0') 
price_asks_g_CHRETH = Decimal('0.0') 
qty_asks_g_CHRETH = Decimal('0.0') 
stepSize_g_CHRETH = Decimal('0.1') 


def on_message_CHRETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHRETH = 'CHRETH' 
	price_bids_c_l_CHRETH = data['b'] 
	qty_bids_c_l_CHRETH = data['B'] 
	price_asks_c_l_CHRETH = data['a'] 
	qty_asks_c_l_CHRETH = data['A'] 

	global symbol_g_CHRETH 
	global price_bids_g_CHRETH 
	global qty_bids_g_CHRETH 
	global price_asks_g_CHRETH 
	global qty_asks_g_CHRETH 

	symbol_g_CHRETH = symbol_c_l_CHRETH 
	price_bids_g_CHRETH = Decimal(price_bids_c_l_CHRETH) 
	qty_bids_g_CHRETH = Decimal(qty_bids_c_l_CHRETH) 
	price_asks_g_CHRETH = Decimal(price_asks_c_l_CHRETH) 
	qty_asks_g_CHRETH = Decimal(qty_asks_c_l_CHRETH) 


def loop_CHRETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chreth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHRETH) 
	ws.run_forever() 


Thread(target=loop_CHRETH).start() 
symbol_g_GALAETH = 'GALAETH' 
price_bids_g_GALAETH = Decimal('0.0') 
qty_bids_g_GALAETH = Decimal('0.0') 
price_asks_g_GALAETH = Decimal('0.0') 
qty_asks_g_GALAETH = Decimal('0.0') 
stepSize_g_GALAETH = Decimal('1.0') 


def on_message_GALAETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALAETH = 'GALAETH' 
	price_bids_c_l_GALAETH = data['b'] 
	qty_bids_c_l_GALAETH = data['B'] 
	price_asks_c_l_GALAETH = data['a'] 
	qty_asks_c_l_GALAETH = data['A'] 

	global symbol_g_GALAETH 
	global price_bids_g_GALAETH 
	global qty_bids_g_GALAETH 
	global price_asks_g_GALAETH 
	global qty_asks_g_GALAETH 

	symbol_g_GALAETH = symbol_c_l_GALAETH 
	price_bids_g_GALAETH = Decimal(price_bids_c_l_GALAETH) 
	qty_bids_g_GALAETH = Decimal(qty_bids_c_l_GALAETH) 
	price_asks_g_GALAETH = Decimal(price_asks_c_l_GALAETH) 
	qty_asks_g_GALAETH = Decimal(qty_asks_c_l_GALAETH) 


def loop_GALAETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galaeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALAETH) 
	ws.run_forever() 


Thread(target=loop_GALAETH).start() 
symbol_g_ATOMETH = 'ATOMETH' 
price_bids_g_ATOMETH = Decimal('0.0') 
qty_bids_g_ATOMETH = Decimal('0.0') 
price_asks_g_ATOMETH = Decimal('0.0') 
qty_asks_g_ATOMETH = Decimal('0.0') 
stepSize_g_ATOMETH = Decimal('0.001') 


def on_message_ATOMETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATOMETH = 'ATOMETH' 
	price_bids_c_l_ATOMETH = data['b'] 
	qty_bids_c_l_ATOMETH = data['B'] 
	price_asks_c_l_ATOMETH = data['a'] 
	qty_asks_c_l_ATOMETH = data['A'] 

	global symbol_g_ATOMETH 
	global price_bids_g_ATOMETH 
	global qty_bids_g_ATOMETH 
	global price_asks_g_ATOMETH 
	global qty_asks_g_ATOMETH 

	symbol_g_ATOMETH = symbol_c_l_ATOMETH 
	price_bids_g_ATOMETH = Decimal(price_bids_c_l_ATOMETH) 
	qty_bids_g_ATOMETH = Decimal(qty_bids_c_l_ATOMETH) 
	price_asks_g_ATOMETH = Decimal(price_asks_c_l_ATOMETH) 
	qty_asks_g_ATOMETH = Decimal(qty_asks_c_l_ATOMETH) 


def loop_ATOMETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atometh@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATOMETH) 
	ws.run_forever() 


Thread(target=loop_ATOMETH).start() 
symbol_g_EGLDETH = 'EGLDETH' 
price_bids_g_EGLDETH = Decimal('0.0') 
qty_bids_g_EGLDETH = Decimal('0.0') 
price_asks_g_EGLDETH = Decimal('0.0') 
qty_asks_g_EGLDETH = Decimal('0.0') 
stepSize_g_EGLDETH = Decimal('0.0001') 


def on_message_EGLDETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EGLDETH = 'EGLDETH' 
	price_bids_c_l_EGLDETH = data['b'] 
	qty_bids_c_l_EGLDETH = data['B'] 
	price_asks_c_l_EGLDETH = data['a'] 
	qty_asks_c_l_EGLDETH = data['A'] 

	global symbol_g_EGLDETH 
	global price_bids_g_EGLDETH 
	global qty_bids_g_EGLDETH 
	global price_asks_g_EGLDETH 
	global qty_asks_g_EGLDETH 

	symbol_g_EGLDETH = symbol_c_l_EGLDETH 
	price_bids_g_EGLDETH = Decimal(price_bids_c_l_EGLDETH) 
	qty_bids_g_EGLDETH = Decimal(qty_bids_c_l_EGLDETH) 
	price_asks_g_EGLDETH = Decimal(price_asks_c_l_EGLDETH) 
	qty_asks_g_EGLDETH = Decimal(qty_asks_c_l_EGLDETH) 


def loop_EGLDETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/egldeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EGLDETH) 
	ws.run_forever() 


Thread(target=loop_EGLDETH).start() 
symbol_g_ICPETH = 'ICPETH' 
price_bids_g_ICPETH = Decimal('0.0') 
qty_bids_g_ICPETH = Decimal('0.0') 
price_asks_g_ICPETH = Decimal('0.0') 
qty_asks_g_ICPETH = Decimal('0.0') 
stepSize_g_ICPETH = Decimal('0.001') 


def on_message_ICPETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ICPETH = 'ICPETH' 
	price_bids_c_l_ICPETH = data['b'] 
	qty_bids_c_l_ICPETH = data['B'] 
	price_asks_c_l_ICPETH = data['a'] 
	qty_asks_c_l_ICPETH = data['A'] 

	global symbol_g_ICPETH 
	global price_bids_g_ICPETH 
	global qty_bids_g_ICPETH 
	global price_asks_g_ICPETH 
	global qty_asks_g_ICPETH 

	symbol_g_ICPETH = symbol_c_l_ICPETH 
	price_bids_g_ICPETH = Decimal(price_bids_c_l_ICPETH) 
	qty_bids_g_ICPETH = Decimal(qty_bids_c_l_ICPETH) 
	price_asks_g_ICPETH = Decimal(price_asks_c_l_ICPETH) 
	qty_asks_g_ICPETH = Decimal(qty_asks_c_l_ICPETH) 


def loop_ICPETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/icpeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ICPETH) 
	ws.run_forever() 


Thread(target=loop_ICPETH).start() 
symbol_g_NEARETH = 'NEARETH' 
price_bids_g_NEARETH = Decimal('0.0') 
qty_bids_g_NEARETH = Decimal('0.0') 
price_asks_g_NEARETH = Decimal('0.0') 
qty_asks_g_NEARETH = Decimal('0.0') 
stepSize_g_NEARETH = Decimal('0.001') 


def on_message_NEARETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEARETH = 'NEARETH' 
	price_bids_c_l_NEARETH = data['b'] 
	qty_bids_c_l_NEARETH = data['B'] 
	price_asks_c_l_NEARETH = data['a'] 
	qty_asks_c_l_NEARETH = data['A'] 

	global symbol_g_NEARETH 
	global price_bids_g_NEARETH 
	global qty_bids_g_NEARETH 
	global price_asks_g_NEARETH 
	global qty_asks_g_NEARETH 

	symbol_g_NEARETH = symbol_c_l_NEARETH 
	price_bids_g_NEARETH = Decimal(price_bids_c_l_NEARETH) 
	qty_bids_g_NEARETH = Decimal(qty_bids_c_l_NEARETH) 
	price_asks_g_NEARETH = Decimal(price_asks_c_l_NEARETH) 
	qty_asks_g_NEARETH = Decimal(qty_asks_c_l_NEARETH) 


def loop_NEARETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/neareth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEARETH) 
	ws.run_forever() 


Thread(target=loop_NEARETH).start() 
symbol_g_ONEETH = 'ONEETH' 
price_bids_g_ONEETH = Decimal('0.0') 
qty_bids_g_ONEETH = Decimal('0.0') 
price_asks_g_ONEETH = Decimal('0.0') 
qty_asks_g_ONEETH = Decimal('0.0') 
stepSize_g_ONEETH = Decimal('0.1') 


def on_message_ONEETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ONEETH = 'ONEETH' 
	price_bids_c_l_ONEETH = data['b'] 
	qty_bids_c_l_ONEETH = data['B'] 
	price_asks_c_l_ONEETH = data['a'] 
	qty_asks_c_l_ONEETH = data['A'] 

	global symbol_g_ONEETH 
	global price_bids_g_ONEETH 
	global qty_bids_g_ONEETH 
	global price_asks_g_ONEETH 
	global qty_asks_g_ONEETH 

	symbol_g_ONEETH = symbol_c_l_ONEETH 
	price_bids_g_ONEETH = Decimal(price_bids_c_l_ONEETH) 
	qty_bids_g_ONEETH = Decimal(qty_bids_c_l_ONEETH) 
	price_asks_g_ONEETH = Decimal(price_asks_c_l_ONEETH) 
	qty_asks_g_ONEETH = Decimal(qty_asks_c_l_ONEETH) 


def loop_ONEETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/oneeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ONEETH) 
	ws.run_forever() 


Thread(target=loop_ONEETH).start() 
symbol_g_JASMYETH = 'JASMYETH' 
price_bids_g_JASMYETH = Decimal('0.0') 
qty_bids_g_JASMYETH = Decimal('0.0') 
price_asks_g_JASMYETH = Decimal('0.0') 
qty_asks_g_JASMYETH = Decimal('0.0') 
stepSize_g_JASMYETH = Decimal('1.0') 


def on_message_JASMYETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JASMYETH = 'JASMYETH' 
	price_bids_c_l_JASMYETH = data['b'] 
	qty_bids_c_l_JASMYETH = data['B'] 
	price_asks_c_l_JASMYETH = data['a'] 
	qty_asks_c_l_JASMYETH = data['A'] 

	global symbol_g_JASMYETH 
	global price_bids_g_JASMYETH 
	global qty_bids_g_JASMYETH 
	global price_asks_g_JASMYETH 
	global qty_asks_g_JASMYETH 

	symbol_g_JASMYETH = symbol_c_l_JASMYETH 
	price_bids_g_JASMYETH = Decimal(price_bids_c_l_JASMYETH) 
	qty_bids_g_JASMYETH = Decimal(qty_bids_c_l_JASMYETH) 
	price_asks_g_JASMYETH = Decimal(price_asks_c_l_JASMYETH) 
	qty_asks_g_JASMYETH = Decimal(qty_asks_c_l_JASMYETH) 


def loop_JASMYETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/jasmyeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JASMYETH) 
	ws.run_forever() 


Thread(target=loop_JASMYETH).start() 
symbol_g_OOKIETH = 'OOKIETH' 
price_bids_g_OOKIETH = Decimal('0.0') 
qty_bids_g_OOKIETH = Decimal('0.0') 
price_asks_g_OOKIETH = Decimal('0.0') 
qty_asks_g_OOKIETH = Decimal('0.0') 
stepSize_g_OOKIETH = Decimal('1.0') 


def on_message_OOKIETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OOKIETH = 'OOKIETH' 
	price_bids_c_l_OOKIETH = data['b'] 
	qty_bids_c_l_OOKIETH = data['B'] 
	price_asks_c_l_OOKIETH = data['a'] 
	qty_asks_c_l_OOKIETH = data['A'] 

	global symbol_g_OOKIETH 
	global price_bids_g_OOKIETH 
	global qty_bids_g_OOKIETH 
	global price_asks_g_OOKIETH 
	global qty_asks_g_OOKIETH 

	symbol_g_OOKIETH = symbol_c_l_OOKIETH 
	price_bids_g_OOKIETH = Decimal(price_bids_c_l_OOKIETH) 
	qty_bids_g_OOKIETH = Decimal(qty_bids_c_l_OOKIETH) 
	price_asks_g_OOKIETH = Decimal(price_asks_c_l_OOKIETH) 
	qty_asks_g_OOKIETH = Decimal(qty_asks_c_l_OOKIETH) 


def loop_OOKIETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ookieth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OOKIETH) 
	ws.run_forever() 


Thread(target=loop_OOKIETH).start() 
symbol_g_ROSEETH = 'ROSEETH' 
price_bids_g_ROSEETH = Decimal('0.0') 
qty_bids_g_ROSEETH = Decimal('0.0') 
price_asks_g_ROSEETH = Decimal('0.0') 
qty_asks_g_ROSEETH = Decimal('0.0') 
stepSize_g_ROSEETH = Decimal('0.1') 


def on_message_ROSEETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ROSEETH = 'ROSEETH' 
	price_bids_c_l_ROSEETH = data['b'] 
	qty_bids_c_l_ROSEETH = data['B'] 
	price_asks_c_l_ROSEETH = data['a'] 
	qty_asks_c_l_ROSEETH = data['A'] 

	global symbol_g_ROSEETH 
	global price_bids_g_ROSEETH 
	global qty_bids_g_ROSEETH 
	global price_asks_g_ROSEETH 
	global qty_asks_g_ROSEETH 

	symbol_g_ROSEETH = symbol_c_l_ROSEETH 
	price_bids_g_ROSEETH = Decimal(price_bids_c_l_ROSEETH) 
	qty_bids_g_ROSEETH = Decimal(qty_bids_c_l_ROSEETH) 
	price_asks_g_ROSEETH = Decimal(price_asks_c_l_ROSEETH) 
	qty_asks_g_ROSEETH = Decimal(qty_asks_c_l_ROSEETH) 


def loop_ROSEETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/roseeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ROSEETH) 
	ws.run_forever() 


Thread(target=loop_ROSEETH).start() 
symbol_g_UNIETH = 'UNIETH' 
price_bids_g_UNIETH = Decimal('0.0') 
qty_bids_g_UNIETH = Decimal('0.0') 
price_asks_g_UNIETH = Decimal('0.0') 
qty_asks_g_UNIETH = Decimal('0.0') 
stepSize_g_UNIETH = Decimal('0.001') 


def on_message_UNIETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UNIETH = 'UNIETH' 
	price_bids_c_l_UNIETH = data['b'] 
	qty_bids_c_l_UNIETH = data['B'] 
	price_asks_c_l_UNIETH = data['a'] 
	qty_asks_c_l_UNIETH = data['A'] 

	global symbol_g_UNIETH 
	global price_bids_g_UNIETH 
	global qty_bids_g_UNIETH 
	global price_asks_g_UNIETH 
	global qty_asks_g_UNIETH 

	symbol_g_UNIETH = symbol_c_l_UNIETH 
	price_bids_g_UNIETH = Decimal(price_bids_c_l_UNIETH) 
	qty_bids_g_UNIETH = Decimal(qty_bids_c_l_UNIETH) 
	price_asks_g_UNIETH = Decimal(price_asks_c_l_UNIETH) 
	qty_asks_g_UNIETH = Decimal(qty_asks_c_l_UNIETH) 


def loop_UNIETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/unieth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UNIETH) 
	ws.run_forever() 


Thread(target=loop_UNIETH).start() 
symbol_g_XTZETH = 'XTZETH' 
price_bids_g_XTZETH = Decimal('0.0') 
qty_bids_g_XTZETH = Decimal('0.0') 
price_asks_g_XTZETH = Decimal('0.0') 
qty_asks_g_XTZETH = Decimal('0.0') 
stepSize_g_XTZETH = Decimal('0.01') 


def on_message_XTZETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XTZETH = 'XTZETH' 
	price_bids_c_l_XTZETH = data['b'] 
	qty_bids_c_l_XTZETH = data['B'] 
	price_asks_c_l_XTZETH = data['a'] 
	qty_asks_c_l_XTZETH = data['A'] 

	global symbol_g_XTZETH 
	global price_bids_g_XTZETH 
	global qty_bids_g_XTZETH 
	global price_asks_g_XTZETH 
	global qty_asks_g_XTZETH 

	symbol_g_XTZETH = symbol_c_l_XTZETH 
	price_bids_g_XTZETH = Decimal(price_bids_c_l_XTZETH) 
	qty_bids_g_XTZETH = Decimal(qty_bids_c_l_XTZETH) 
	price_asks_g_XTZETH = Decimal(price_asks_c_l_XTZETH) 
	qty_asks_g_XTZETH = Decimal(qty_asks_c_l_XTZETH) 


def loop_XTZETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xtzeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XTZETH) 
	ws.run_forever() 


Thread(target=loop_XTZETH).start() 
symbol_g_CRVETH = 'CRVETH' 
price_bids_g_CRVETH = Decimal('0.0') 
qty_bids_g_CRVETH = Decimal('0.0') 
price_asks_g_CRVETH = Decimal('0.0') 
qty_asks_g_CRVETH = Decimal('0.0') 
stepSize_g_CRVETH = Decimal('0.01') 


def on_message_CRVETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CRVETH = 'CRVETH' 
	price_bids_c_l_CRVETH = data['b'] 
	qty_bids_c_l_CRVETH = data['B'] 
	price_asks_c_l_CRVETH = data['a'] 
	qty_asks_c_l_CRVETH = data['A'] 

	global symbol_g_CRVETH 
	global price_bids_g_CRVETH 
	global qty_bids_g_CRVETH 
	global price_asks_g_CRVETH 
	global qty_asks_g_CRVETH 

	symbol_g_CRVETH = symbol_c_l_CRVETH 
	price_bids_g_CRVETH = Decimal(price_bids_c_l_CRVETH) 
	qty_bids_g_CRVETH = Decimal(qty_bids_c_l_CRVETH) 
	price_asks_g_CRVETH = Decimal(price_asks_c_l_CRVETH) 
	qty_asks_g_CRVETH = Decimal(qty_asks_c_l_CRVETH) 


def loop_CRVETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/crveth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CRVETH) 
	ws.run_forever() 


Thread(target=loop_CRVETH).start() 
symbol_g_XNOETH = 'XNOETH' 
price_bids_g_XNOETH = Decimal('0.0') 
qty_bids_g_XNOETH = Decimal('0.0') 
price_asks_g_XNOETH = Decimal('0.0') 
qty_asks_g_XNOETH = Decimal('0.0') 
stepSize_g_XNOETH = Decimal('0.01') 


def on_message_XNOETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XNOETH = 'XNOETH' 
	price_bids_c_l_XNOETH = data['b'] 
	qty_bids_c_l_XNOETH = data['B'] 
	price_asks_c_l_XNOETH = data['a'] 
	qty_asks_c_l_XNOETH = data['A'] 

	global symbol_g_XNOETH 
	global price_bids_g_XNOETH 
	global qty_bids_g_XNOETH 
	global price_asks_g_XNOETH 
	global qty_asks_g_XNOETH 

	symbol_g_XNOETH = symbol_c_l_XNOETH 
	price_bids_g_XNOETH = Decimal(price_bids_c_l_XNOETH) 
	qty_bids_g_XNOETH = Decimal(qty_bids_c_l_XNOETH) 
	price_asks_g_XNOETH = Decimal(price_asks_c_l_XNOETH) 
	qty_asks_g_XNOETH = Decimal(qty_asks_c_l_XNOETH) 


def loop_XNOETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xnoeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XNOETH) 
	ws.run_forever() 


Thread(target=loop_XNOETH).start() 
symbol_g_KAVAETH = 'KAVAETH' 
price_bids_g_KAVAETH = Decimal('0.0') 
qty_bids_g_KAVAETH = Decimal('0.0') 
price_asks_g_KAVAETH = Decimal('0.0') 
qty_asks_g_KAVAETH = Decimal('0.0') 
stepSize_g_KAVAETH = Decimal('0.01') 


def on_message_KAVAETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KAVAETH = 'KAVAETH' 
	price_bids_c_l_KAVAETH = data['b'] 
	qty_bids_c_l_KAVAETH = data['B'] 
	price_asks_c_l_KAVAETH = data['a'] 
	qty_asks_c_l_KAVAETH = data['A'] 

	global symbol_g_KAVAETH 
	global price_bids_g_KAVAETH 
	global qty_bids_g_KAVAETH 
	global price_asks_g_KAVAETH 
	global qty_asks_g_KAVAETH 

	symbol_g_KAVAETH = symbol_c_l_KAVAETH 
	price_bids_g_KAVAETH = Decimal(price_bids_c_l_KAVAETH) 
	qty_bids_g_KAVAETH = Decimal(qty_bids_c_l_KAVAETH) 
	price_asks_g_KAVAETH = Decimal(price_asks_c_l_KAVAETH) 
	qty_asks_g_KAVAETH = Decimal(qty_asks_c_l_KAVAETH) 


def loop_KAVAETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kavaeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KAVAETH) 
	ws.run_forever() 


Thread(target=loop_KAVAETH).start() 
symbol_g_BETAETH = 'BETAETH' 
price_bids_g_BETAETH = Decimal('0.0') 
qty_bids_g_BETAETH = Decimal('0.0') 
price_asks_g_BETAETH = Decimal('0.0') 
qty_asks_g_BETAETH = Decimal('0.0') 
stepSize_g_BETAETH = Decimal('0.1') 


def on_message_BETAETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BETAETH = 'BETAETH' 
	price_bids_c_l_BETAETH = data['b'] 
	qty_bids_c_l_BETAETH = data['B'] 
	price_asks_c_l_BETAETH = data['a'] 
	qty_asks_c_l_BETAETH = data['A'] 

	global symbol_g_BETAETH 
	global price_bids_g_BETAETH 
	global qty_bids_g_BETAETH 
	global price_asks_g_BETAETH 
	global qty_asks_g_BETAETH 

	symbol_g_BETAETH = symbol_c_l_BETAETH 
	price_bids_g_BETAETH = Decimal(price_bids_c_l_BETAETH) 
	qty_bids_g_BETAETH = Decimal(qty_bids_c_l_BETAETH) 
	price_asks_g_BETAETH = Decimal(price_asks_c_l_BETAETH) 
	qty_asks_g_BETAETH = Decimal(qty_asks_c_l_BETAETH) 


def loop_BETAETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/betaeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BETAETH) 
	ws.run_forever() 


Thread(target=loop_BETAETH).start() 
symbol_g_GMTETH = 'GMTETH' 
price_bids_g_GMTETH = Decimal('0.0') 
qty_bids_g_GMTETH = Decimal('0.0') 
price_asks_g_GMTETH = Decimal('0.0') 
qty_asks_g_GMTETH = Decimal('0.0') 
stepSize_g_GMTETH = Decimal('0.1') 


def on_message_GMTETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GMTETH = 'GMTETH' 
	price_bids_c_l_GMTETH = data['b'] 
	qty_bids_c_l_GMTETH = data['B'] 
	price_asks_c_l_GMTETH = data['a'] 
	qty_asks_c_l_GMTETH = data['A'] 

	global symbol_g_GMTETH 
	global price_bids_g_GMTETH 
	global qty_bids_g_GMTETH 
	global price_asks_g_GMTETH 
	global qty_asks_g_GMTETH 

	symbol_g_GMTETH = symbol_c_l_GMTETH 
	price_bids_g_GMTETH = Decimal(price_bids_c_l_GMTETH) 
	qty_bids_g_GMTETH = Decimal(qty_bids_c_l_GMTETH) 
	price_asks_g_GMTETH = Decimal(price_asks_c_l_GMTETH) 
	qty_asks_g_GMTETH = Decimal(qty_asks_c_l_GMTETH) 


def loop_GMTETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gmteth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GMTETH) 
	ws.run_forever() 


Thread(target=loop_GMTETH).start() 
symbol_g_RUNEETH = 'RUNEETH' 
price_bids_g_RUNEETH = Decimal('0.0') 
qty_bids_g_RUNEETH = Decimal('0.0') 
price_asks_g_RUNEETH = Decimal('0.0') 
qty_asks_g_RUNEETH = Decimal('0.0') 
stepSize_g_RUNEETH = Decimal('0.001') 


def on_message_RUNEETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RUNEETH = 'RUNEETH' 
	price_bids_c_l_RUNEETH = data['b'] 
	qty_bids_c_l_RUNEETH = data['B'] 
	price_asks_c_l_RUNEETH = data['a'] 
	qty_asks_c_l_RUNEETH = data['A'] 

	global symbol_g_RUNEETH 
	global price_bids_g_RUNEETH 
	global qty_bids_g_RUNEETH 
	global price_asks_g_RUNEETH 
	global qty_asks_g_RUNEETH 

	symbol_g_RUNEETH = symbol_c_l_RUNEETH 
	price_bids_g_RUNEETH = Decimal(price_bids_c_l_RUNEETH) 
	qty_bids_g_RUNEETH = Decimal(qty_bids_c_l_RUNEETH) 
	price_asks_g_RUNEETH = Decimal(price_asks_c_l_RUNEETH) 
	qty_asks_g_RUNEETH = Decimal(qty_asks_c_l_RUNEETH) 


def loop_RUNEETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/runeeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RUNEETH) 
	ws.run_forever() 


Thread(target=loop_RUNEETH).start() 
symbol_g_APEETH = 'APEETH' 
price_bids_g_APEETH = Decimal('0.0') 
qty_bids_g_APEETH = Decimal('0.0') 
price_asks_g_APEETH = Decimal('0.0') 
qty_asks_g_APEETH = Decimal('0.0') 
stepSize_g_APEETH = Decimal('0.001') 


def on_message_APEETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APEETH = 'APEETH' 
	price_bids_c_l_APEETH = data['b'] 
	qty_bids_c_l_APEETH = data['B'] 
	price_asks_c_l_APEETH = data['a'] 
	qty_asks_c_l_APEETH = data['A'] 

	global symbol_g_APEETH 
	global price_bids_g_APEETH 
	global qty_bids_g_APEETH 
	global price_asks_g_APEETH 
	global qty_asks_g_APEETH 

	symbol_g_APEETH = symbol_c_l_APEETH 
	price_bids_g_APEETH = Decimal(price_bids_c_l_APEETH) 
	qty_bids_g_APEETH = Decimal(qty_bids_c_l_APEETH) 
	price_asks_g_APEETH = Decimal(price_asks_c_l_APEETH) 
	qty_asks_g_APEETH = Decimal(qty_asks_c_l_APEETH) 


def loop_APEETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/apeeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APEETH) 
	ws.run_forever() 


Thread(target=loop_APEETH).start() 
symbol_g_BSWETH = 'BSWETH' 
price_bids_g_BSWETH = Decimal('0.0') 
qty_bids_g_BSWETH = Decimal('0.0') 
price_asks_g_BSWETH = Decimal('0.0') 
qty_asks_g_BSWETH = Decimal('0.0') 
stepSize_g_BSWETH = Decimal('0.01') 


def on_message_BSWETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BSWETH = 'BSWETH' 
	price_bids_c_l_BSWETH = data['b'] 
	qty_bids_c_l_BSWETH = data['B'] 
	price_asks_c_l_BSWETH = data['a'] 
	qty_asks_c_l_BSWETH = data['A'] 

	global symbol_g_BSWETH 
	global price_bids_g_BSWETH 
	global qty_bids_g_BSWETH 
	global price_asks_g_BSWETH 
	global qty_asks_g_BSWETH 

	symbol_g_BSWETH = symbol_c_l_BSWETH 
	price_bids_g_BSWETH = Decimal(price_bids_c_l_BSWETH) 
	qty_bids_g_BSWETH = Decimal(qty_bids_c_l_BSWETH) 
	price_asks_g_BSWETH = Decimal(price_asks_c_l_BSWETH) 
	qty_asks_g_BSWETH = Decimal(qty_asks_c_l_BSWETH) 


def loop_BSWETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bsweth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BSWETH) 
	ws.run_forever() 


Thread(target=loop_BSWETH).start() 
symbol_g_ALGOETH = 'ALGOETH' 
price_bids_g_ALGOETH = Decimal('0.0') 
qty_bids_g_ALGOETH = Decimal('0.0') 
price_asks_g_ALGOETH = Decimal('0.0') 
qty_asks_g_ALGOETH = Decimal('0.0') 
stepSize_g_ALGOETH = Decimal('0.1') 


def on_message_ALGOETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALGOETH = 'ALGOETH' 
	price_bids_c_l_ALGOETH = data['b'] 
	qty_bids_c_l_ALGOETH = data['B'] 
	price_asks_c_l_ALGOETH = data['a'] 
	qty_asks_c_l_ALGOETH = data['A'] 

	global symbol_g_ALGOETH 
	global price_bids_g_ALGOETH 
	global qty_bids_g_ALGOETH 
	global price_asks_g_ALGOETH 
	global qty_asks_g_ALGOETH 

	symbol_g_ALGOETH = symbol_c_l_ALGOETH 
	price_bids_g_ALGOETH = Decimal(price_bids_c_l_ALGOETH) 
	qty_bids_g_ALGOETH = Decimal(qty_bids_c_l_ALGOETH) 
	price_asks_g_ALGOETH = Decimal(price_asks_c_l_ALGOETH) 
	qty_asks_g_ALGOETH = Decimal(qty_asks_c_l_ALGOETH) 


def loop_ALGOETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/algoeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALGOETH) 
	ws.run_forever() 


Thread(target=loop_ALGOETH).start() 
symbol_g_GALETH = 'GALETH' 
price_bids_g_GALETH = Decimal('0.0') 
qty_bids_g_GALETH = Decimal('0.0') 
price_asks_g_GALETH = Decimal('0.0') 
qty_asks_g_GALETH = Decimal('0.0') 
stepSize_g_GALETH = Decimal('0.01') 


def on_message_GALETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALETH = 'GALETH' 
	price_bids_c_l_GALETH = data['b'] 
	qty_bids_c_l_GALETH = data['B'] 
	price_asks_c_l_GALETH = data['a'] 
	qty_asks_c_l_GALETH = data['A'] 

	global symbol_g_GALETH 
	global price_bids_g_GALETH 
	global qty_bids_g_GALETH 
	global price_asks_g_GALETH 
	global qty_asks_g_GALETH 

	symbol_g_GALETH = symbol_c_l_GALETH 
	price_bids_g_GALETH = Decimal(price_bids_c_l_GALETH) 
	qty_bids_g_GALETH = Decimal(qty_bids_c_l_GALETH) 
	price_asks_g_GALETH = Decimal(price_asks_c_l_GALETH) 
	qty_asks_g_GALETH = Decimal(qty_asks_c_l_GALETH) 


def loop_GALETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALETH) 
	ws.run_forever() 


Thread(target=loop_GALETH).start() 
symbol_g_SNXETH = 'SNXETH' 
price_bids_g_SNXETH = Decimal('0.0') 
qty_bids_g_SNXETH = Decimal('0.0') 
price_asks_g_SNXETH = Decimal('0.0') 
qty_asks_g_SNXETH = Decimal('0.0') 
stepSize_g_SNXETH = Decimal('0.01') 


def on_message_SNXETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SNXETH = 'SNXETH' 
	price_bids_c_l_SNXETH = data['b'] 
	qty_bids_c_l_SNXETH = data['B'] 
	price_asks_c_l_SNXETH = data['a'] 
	qty_asks_c_l_SNXETH = data['A'] 

	global symbol_g_SNXETH 
	global price_bids_g_SNXETH 
	global qty_bids_g_SNXETH 
	global price_asks_g_SNXETH 
	global qty_asks_g_SNXETH 

	symbol_g_SNXETH = symbol_c_l_SNXETH 
	price_bids_g_SNXETH = Decimal(price_bids_c_l_SNXETH) 
	qty_bids_g_SNXETH = Decimal(qty_bids_c_l_SNXETH) 
	price_asks_g_SNXETH = Decimal(price_asks_c_l_SNXETH) 
	qty_asks_g_SNXETH = Decimal(qty_asks_c_l_SNXETH) 


def loop_SNXETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/snxeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SNXETH) 
	ws.run_forever() 


Thread(target=loop_SNXETH).start() 
symbol_g_BELETH = 'BELETH' 
price_bids_g_BELETH = Decimal('0.0') 
qty_bids_g_BELETH = Decimal('0.0') 
price_asks_g_BELETH = Decimal('0.0') 
qty_asks_g_BELETH = Decimal('0.0') 
stepSize_g_BELETH = Decimal('0.1') 


def on_message_BELETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BELETH = 'BELETH' 
	price_bids_c_l_BELETH = data['b'] 
	qty_bids_c_l_BELETH = data['B'] 
	price_asks_c_l_BELETH = data['a'] 
	qty_asks_c_l_BELETH = data['A'] 

	global symbol_g_BELETH 
	global price_bids_g_BELETH 
	global qty_bids_g_BELETH 
	global price_asks_g_BELETH 
	global qty_asks_g_BELETH 

	symbol_g_BELETH = symbol_c_l_BELETH 
	price_bids_g_BELETH = Decimal(price_bids_c_l_BELETH) 
	qty_bids_g_BELETH = Decimal(qty_bids_c_l_BELETH) 
	price_asks_g_BELETH = Decimal(price_asks_c_l_BELETH) 
	qty_asks_g_BELETH = Decimal(qty_asks_c_l_BELETH) 


def loop_BELETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/beleth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BELETH) 
	ws.run_forever() 


Thread(target=loop_BELETH).start() 
symbol_g_LITETH = 'LITETH' 
price_bids_g_LITETH = Decimal('0.0') 
qty_bids_g_LITETH = Decimal('0.0') 
price_asks_g_LITETH = Decimal('0.0') 
qty_asks_g_LITETH = Decimal('0.0') 
stepSize_g_LITETH = Decimal('0.1') 


def on_message_LITETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LITETH = 'LITETH' 
	price_bids_c_l_LITETH = data['b'] 
	qty_bids_c_l_LITETH = data['B'] 
	price_asks_c_l_LITETH = data['a'] 
	qty_asks_c_l_LITETH = data['A'] 

	global symbol_g_LITETH 
	global price_bids_g_LITETH 
	global qty_bids_g_LITETH 
	global price_asks_g_LITETH 
	global qty_asks_g_LITETH 

	symbol_g_LITETH = symbol_c_l_LITETH 
	price_bids_g_LITETH = Decimal(price_bids_c_l_LITETH) 
	qty_bids_g_LITETH = Decimal(qty_bids_c_l_LITETH) 
	price_asks_g_LITETH = Decimal(price_asks_c_l_LITETH) 
	qty_asks_g_LITETH = Decimal(qty_asks_c_l_LITETH) 


def loop_LITETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/liteth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LITETH) 
	ws.run_forever() 


Thread(target=loop_LITETH).start() 
symbol_g_BURGERETH = 'BURGERETH' 
price_bids_g_BURGERETH = Decimal('0.0') 
qty_bids_g_BURGERETH = Decimal('0.0') 
price_asks_g_BURGERETH = Decimal('0.0') 
qty_asks_g_BURGERETH = Decimal('0.0') 
stepSize_g_BURGERETH = Decimal('0.01') 


def on_message_BURGERETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BURGERETH = 'BURGERETH' 
	price_bids_c_l_BURGERETH = data['b'] 
	qty_bids_c_l_BURGERETH = data['B'] 
	price_asks_c_l_BURGERETH = data['a'] 
	qty_asks_c_l_BURGERETH = data['A'] 

	global symbol_g_BURGERETH 
	global price_bids_g_BURGERETH 
	global qty_bids_g_BURGERETH 
	global price_asks_g_BURGERETH 
	global qty_asks_g_BURGERETH 

	symbol_g_BURGERETH = symbol_c_l_BURGERETH 
	price_bids_g_BURGERETH = Decimal(price_bids_c_l_BURGERETH) 
	qty_bids_g_BURGERETH = Decimal(qty_bids_c_l_BURGERETH) 
	price_asks_g_BURGERETH = Decimal(price_asks_c_l_BURGERETH) 
	qty_asks_g_BURGERETH = Decimal(qty_asks_c_l_BURGERETH) 


def loop_BURGERETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/burgereth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BURGERETH) 
	ws.run_forever() 


Thread(target=loop_BURGERETH).start() 
symbol_g_PEOPLEETH = 'PEOPLEETH' 
price_bids_g_PEOPLEETH = Decimal('0.0') 
qty_bids_g_PEOPLEETH = Decimal('0.0') 
price_asks_g_PEOPLEETH = Decimal('0.0') 
qty_asks_g_PEOPLEETH = Decimal('0.0') 
stepSize_g_PEOPLEETH = Decimal('1.0') 


def on_message_PEOPLEETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PEOPLEETH = 'PEOPLEETH' 
	price_bids_c_l_PEOPLEETH = data['b'] 
	qty_bids_c_l_PEOPLEETH = data['B'] 
	price_asks_c_l_PEOPLEETH = data['a'] 
	qty_asks_c_l_PEOPLEETH = data['A'] 

	global symbol_g_PEOPLEETH 
	global price_bids_g_PEOPLEETH 
	global qty_bids_g_PEOPLEETH 
	global price_asks_g_PEOPLEETH 
	global qty_asks_g_PEOPLEETH 

	symbol_g_PEOPLEETH = symbol_c_l_PEOPLEETH 
	price_bids_g_PEOPLEETH = Decimal(price_bids_c_l_PEOPLEETH) 
	qty_bids_g_PEOPLEETH = Decimal(qty_bids_c_l_PEOPLEETH) 
	price_asks_g_PEOPLEETH = Decimal(price_asks_c_l_PEOPLEETH) 
	qty_asks_g_PEOPLEETH = Decimal(qty_asks_c_l_PEOPLEETH) 


def loop_PEOPLEETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/peopleeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PEOPLEETH) 
	ws.run_forever() 


Thread(target=loop_PEOPLEETH).start() 
symbol_g_UNFIETH = 'UNFIETH' 
price_bids_g_UNFIETH = Decimal('0.0') 
qty_bids_g_UNFIETH = Decimal('0.0') 
price_asks_g_UNFIETH = Decimal('0.0') 
qty_asks_g_UNFIETH = Decimal('0.0') 
stepSize_g_UNFIETH = Decimal('0.01') 


def on_message_UNFIETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UNFIETH = 'UNFIETH' 
	price_bids_c_l_UNFIETH = data['b'] 
	qty_bids_c_l_UNFIETH = data['B'] 
	price_asks_c_l_UNFIETH = data['a'] 
	qty_asks_c_l_UNFIETH = data['A'] 

	global symbol_g_UNFIETH 
	global price_bids_g_UNFIETH 
	global qty_bids_g_UNFIETH 
	global price_asks_g_UNFIETH 
	global qty_asks_g_UNFIETH 

	symbol_g_UNFIETH = symbol_c_l_UNFIETH 
	price_bids_g_UNFIETH = Decimal(price_bids_c_l_UNFIETH) 
	qty_bids_g_UNFIETH = Decimal(qty_bids_c_l_UNFIETH) 
	price_asks_g_UNFIETH = Decimal(price_asks_c_l_UNFIETH) 
	qty_asks_g_UNFIETH = Decimal(qty_asks_c_l_UNFIETH) 


def loop_UNFIETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/unfieth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UNFIETH) 
	ws.run_forever() 


Thread(target=loop_UNFIETH).start() 
symbol_g_BONDETH = 'BONDETH' 
price_bids_g_BONDETH = Decimal('0.0') 
qty_bids_g_BONDETH = Decimal('0.0') 
price_asks_g_BONDETH = Decimal('0.0') 
qty_asks_g_BONDETH = Decimal('0.0') 
stepSize_g_BONDETH = Decimal('0.001') 


def on_message_BONDETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BONDETH = 'BONDETH' 
	price_bids_c_l_BONDETH = data['b'] 
	qty_bids_c_l_BONDETH = data['B'] 
	price_asks_c_l_BONDETH = data['a'] 
	qty_asks_c_l_BONDETH = data['A'] 

	global symbol_g_BONDETH 
	global price_bids_g_BONDETH 
	global qty_bids_g_BONDETH 
	global price_asks_g_BONDETH 
	global qty_asks_g_BONDETH 

	symbol_g_BONDETH = symbol_c_l_BONDETH 
	price_bids_g_BONDETH = Decimal(price_bids_c_l_BONDETH) 
	qty_bids_g_BONDETH = Decimal(qty_bids_c_l_BONDETH) 
	price_asks_g_BONDETH = Decimal(price_asks_c_l_BONDETH) 
	qty_asks_g_BONDETH = Decimal(qty_asks_c_l_BONDETH) 


def loop_BONDETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bondeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BONDETH) 
	ws.run_forever() 


Thread(target=loop_BONDETH).start() 
symbol_g_OPETH = 'OPETH' 
price_bids_g_OPETH = Decimal('0.0') 
qty_bids_g_OPETH = Decimal('0.0') 
price_asks_g_OPETH = Decimal('0.0') 
qty_asks_g_OPETH = Decimal('0.0') 
stepSize_g_OPETH = Decimal('0.01') 


def on_message_OPETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OPETH = 'OPETH' 
	price_bids_c_l_OPETH = data['b'] 
	qty_bids_c_l_OPETH = data['B'] 
	price_asks_c_l_OPETH = data['a'] 
	qty_asks_c_l_OPETH = data['A'] 

	global symbol_g_OPETH 
	global price_bids_g_OPETH 
	global qty_bids_g_OPETH 
	global price_asks_g_OPETH 
	global qty_asks_g_OPETH 

	symbol_g_OPETH = symbol_c_l_OPETH 
	price_bids_g_OPETH = Decimal(price_bids_c_l_OPETH) 
	qty_bids_g_OPETH = Decimal(qty_bids_c_l_OPETH) 
	price_asks_g_OPETH = Decimal(price_asks_c_l_OPETH) 
	qty_asks_g_OPETH = Decimal(qty_asks_c_l_OPETH) 


def loop_OPETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/opeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OPETH) 
	ws.run_forever() 


Thread(target=loop_OPETH).start() 
symbol_g_WINGETH = 'WINGETH' 
price_bids_g_WINGETH = Decimal('0.0') 
qty_bids_g_WINGETH = Decimal('0.0') 
price_asks_g_WINGETH = Decimal('0.0') 
qty_asks_g_WINGETH = Decimal('0.0') 
stepSize_g_WINGETH = Decimal('0.001') 


def on_message_WINGETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WINGETH = 'WINGETH' 
	price_bids_c_l_WINGETH = data['b'] 
	qty_bids_c_l_WINGETH = data['B'] 
	price_asks_c_l_WINGETH = data['a'] 
	qty_asks_c_l_WINGETH = data['A'] 

	global symbol_g_WINGETH 
	global price_bids_g_WINGETH 
	global qty_bids_g_WINGETH 
	global price_asks_g_WINGETH 
	global qty_asks_g_WINGETH 

	symbol_g_WINGETH = symbol_c_l_WINGETH 
	price_bids_g_WINGETH = Decimal(price_bids_c_l_WINGETH) 
	qty_bids_g_WINGETH = Decimal(qty_bids_c_l_WINGETH) 
	price_asks_g_WINGETH = Decimal(price_asks_c_l_WINGETH) 
	qty_asks_g_WINGETH = Decimal(qty_asks_c_l_WINGETH) 


def loop_WINGETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wingeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WINGETH) 
	ws.run_forever() 


Thread(target=loop_WINGETH).start() 
symbol_g_FILETH = 'FILETH' 
price_bids_g_FILETH = Decimal('0.0') 
qty_bids_g_FILETH = Decimal('0.0') 
price_asks_g_FILETH = Decimal('0.0') 
qty_asks_g_FILETH = Decimal('0.0') 
stepSize_g_FILETH = Decimal('0.01') 


def on_message_FILETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FILETH = 'FILETH' 
	price_bids_c_l_FILETH = data['b'] 
	qty_bids_c_l_FILETH = data['B'] 
	price_asks_c_l_FILETH = data['a'] 
	qty_asks_c_l_FILETH = data['A'] 

	global symbol_g_FILETH 
	global price_bids_g_FILETH 
	global qty_bids_g_FILETH 
	global price_asks_g_FILETH 
	global qty_asks_g_FILETH 

	symbol_g_FILETH = symbol_c_l_FILETH 
	price_bids_g_FILETH = Decimal(price_bids_c_l_FILETH) 
	qty_bids_g_FILETH = Decimal(qty_bids_c_l_FILETH) 
	price_asks_g_FILETH = Decimal(price_asks_c_l_FILETH) 
	qty_asks_g_FILETH = Decimal(qty_asks_c_l_FILETH) 


def loop_FILETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fileth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FILETH) 
	ws.run_forever() 


Thread(target=loop_FILETH).start() 
symbol_g_ARPAETH = 'ARPAETH' 
price_bids_g_ARPAETH = Decimal('0.0') 
qty_bids_g_ARPAETH = Decimal('0.0') 
price_asks_g_ARPAETH = Decimal('0.0') 
qty_asks_g_ARPAETH = Decimal('0.0') 
stepSize_g_ARPAETH = Decimal('1.0') 


def on_message_ARPAETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ARPAETH = 'ARPAETH' 
	price_bids_c_l_ARPAETH = data['b'] 
	qty_bids_c_l_ARPAETH = data['B'] 
	price_asks_c_l_ARPAETH = data['a'] 
	qty_asks_c_l_ARPAETH = data['A'] 

	global symbol_g_ARPAETH 
	global price_bids_g_ARPAETH 
	global qty_bids_g_ARPAETH 
	global price_asks_g_ARPAETH 
	global qty_asks_g_ARPAETH 

	symbol_g_ARPAETH = symbol_c_l_ARPAETH 
	price_bids_g_ARPAETH = Decimal(price_bids_c_l_ARPAETH) 
	qty_bids_g_ARPAETH = Decimal(qty_bids_c_l_ARPAETH) 
	price_asks_g_ARPAETH = Decimal(price_asks_c_l_ARPAETH) 
	qty_asks_g_ARPAETH = Decimal(qty_asks_c_l_ARPAETH) 


def loop_ARPAETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/arpaeth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ARPAETH) 
	ws.run_forever() 


Thread(target=loop_ARPAETH).start() 
symbol_g_HIFIETH = 'HIFIETH' 
price_bids_g_HIFIETH = Decimal('0.0') 
qty_bids_g_HIFIETH = Decimal('0.0') 
price_asks_g_HIFIETH = Decimal('0.0') 
qty_asks_g_HIFIETH = Decimal('0.0') 
stepSize_g_HIFIETH = Decimal('0.1') 


def on_message_HIFIETH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HIFIETH = 'HIFIETH' 
	price_bids_c_l_HIFIETH = data['b'] 
	qty_bids_c_l_HIFIETH = data['B'] 
	price_asks_c_l_HIFIETH = data['a'] 
	qty_asks_c_l_HIFIETH = data['A'] 

	global symbol_g_HIFIETH 
	global price_bids_g_HIFIETH 
	global qty_bids_g_HIFIETH 
	global price_asks_g_HIFIETH 
	global qty_asks_g_HIFIETH 

	symbol_g_HIFIETH = symbol_c_l_HIFIETH 
	price_bids_g_HIFIETH = Decimal(price_bids_c_l_HIFIETH) 
	qty_bids_g_HIFIETH = Decimal(qty_bids_c_l_HIFIETH) 
	price_asks_g_HIFIETH = Decimal(price_asks_c_l_HIFIETH) 
	qty_asks_g_HIFIETH = Decimal(qty_asks_c_l_HIFIETH) 


def loop_HIFIETH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hifieth@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HIFIETH) 
	ws.run_forever() 


Thread(target=loop_HIFIETH).start() 
symbol_g_NEOBNB = 'NEOBNB' 
price_bids_g_NEOBNB = Decimal('0.0') 
qty_bids_g_NEOBNB = Decimal('0.0') 
price_asks_g_NEOBNB = Decimal('0.0') 
qty_asks_g_NEOBNB = Decimal('0.0') 
stepSize_g_NEOBNB = Decimal('0.01') 


def on_message_NEOBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEOBNB = 'NEOBNB' 
	price_bids_c_l_NEOBNB = data['b'] 
	qty_bids_c_l_NEOBNB = data['B'] 
	price_asks_c_l_NEOBNB = data['a'] 
	qty_asks_c_l_NEOBNB = data['A'] 

	global symbol_g_NEOBNB 
	global price_bids_g_NEOBNB 
	global qty_bids_g_NEOBNB 
	global price_asks_g_NEOBNB 
	global qty_asks_g_NEOBNB 

	symbol_g_NEOBNB = symbol_c_l_NEOBNB 
	price_bids_g_NEOBNB = Decimal(price_bids_c_l_NEOBNB) 
	qty_bids_g_NEOBNB = Decimal(qty_bids_c_l_NEOBNB) 
	price_asks_g_NEOBNB = Decimal(price_asks_c_l_NEOBNB) 
	qty_asks_g_NEOBNB = Decimal(qty_asks_c_l_NEOBNB) 


def loop_NEOBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/neobnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEOBNB) 
	ws.run_forever() 


Thread(target=loop_NEOBNB).start() 
symbol_g_IOTABNB = 'IOTABNB' 
price_bids_g_IOTABNB = Decimal('0.0') 
qty_bids_g_IOTABNB = Decimal('0.0') 
price_asks_g_IOTABNB = Decimal('0.0') 
qty_asks_g_IOTABNB = Decimal('0.0') 
stepSize_g_IOTABNB = Decimal('1.0') 


def on_message_IOTABNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IOTABNB = 'IOTABNB' 
	price_bids_c_l_IOTABNB = data['b'] 
	qty_bids_c_l_IOTABNB = data['B'] 
	price_asks_c_l_IOTABNB = data['a'] 
	qty_asks_c_l_IOTABNB = data['A'] 

	global symbol_g_IOTABNB 
	global price_bids_g_IOTABNB 
	global qty_bids_g_IOTABNB 
	global price_asks_g_IOTABNB 
	global qty_asks_g_IOTABNB 

	symbol_g_IOTABNB = symbol_c_l_IOTABNB 
	price_bids_g_IOTABNB = Decimal(price_bids_c_l_IOTABNB) 
	qty_bids_g_IOTABNB = Decimal(qty_bids_c_l_IOTABNB) 
	price_asks_g_IOTABNB = Decimal(price_asks_c_l_IOTABNB) 
	qty_asks_g_IOTABNB = Decimal(qty_asks_c_l_IOTABNB) 


def loop_IOTABNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/iotabnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IOTABNB) 
	ws.run_forever() 


Thread(target=loop_IOTABNB).start() 
symbol_g_XLMBNB = 'XLMBNB' 
price_bids_g_XLMBNB = Decimal('0.0') 
qty_bids_g_XLMBNB = Decimal('0.0') 
price_asks_g_XLMBNB = Decimal('0.0') 
qty_asks_g_XLMBNB = Decimal('0.0') 
stepSize_g_XLMBNB = Decimal('1.0') 


def on_message_XLMBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XLMBNB = 'XLMBNB' 
	price_bids_c_l_XLMBNB = data['b'] 
	qty_bids_c_l_XLMBNB = data['B'] 
	price_asks_c_l_XLMBNB = data['a'] 
	qty_asks_c_l_XLMBNB = data['A'] 

	global symbol_g_XLMBNB 
	global price_bids_g_XLMBNB 
	global qty_bids_g_XLMBNB 
	global price_asks_g_XLMBNB 
	global qty_asks_g_XLMBNB 

	symbol_g_XLMBNB = symbol_c_l_XLMBNB 
	price_bids_g_XLMBNB = Decimal(price_bids_c_l_XLMBNB) 
	qty_bids_g_XLMBNB = Decimal(qty_bids_c_l_XLMBNB) 
	price_asks_g_XLMBNB = Decimal(price_asks_c_l_XLMBNB) 
	qty_asks_g_XLMBNB = Decimal(qty_asks_c_l_XLMBNB) 


def loop_XLMBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xlmbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XLMBNB) 
	ws.run_forever() 


Thread(target=loop_XLMBNB).start() 
symbol_g_LTCBNB = 'LTCBNB' 
price_bids_g_LTCBNB = Decimal('0.0') 
qty_bids_g_LTCBNB = Decimal('0.0') 
price_asks_g_LTCBNB = Decimal('0.0') 
qty_asks_g_LTCBNB = Decimal('0.0') 
stepSize_g_LTCBNB = Decimal('0.001') 


def on_message_LTCBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LTCBNB = 'LTCBNB' 
	price_bids_c_l_LTCBNB = data['b'] 
	qty_bids_c_l_LTCBNB = data['B'] 
	price_asks_c_l_LTCBNB = data['a'] 
	qty_asks_c_l_LTCBNB = data['A'] 

	global symbol_g_LTCBNB 
	global price_bids_g_LTCBNB 
	global qty_bids_g_LTCBNB 
	global price_asks_g_LTCBNB 
	global qty_asks_g_LTCBNB 

	symbol_g_LTCBNB = symbol_c_l_LTCBNB 
	price_bids_g_LTCBNB = Decimal(price_bids_c_l_LTCBNB) 
	qty_bids_g_LTCBNB = Decimal(qty_bids_c_l_LTCBNB) 
	price_asks_g_LTCBNB = Decimal(price_asks_c_l_LTCBNB) 
	qty_asks_g_LTCBNB = Decimal(qty_asks_c_l_LTCBNB) 


def loop_LTCBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ltcbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LTCBNB) 
	ws.run_forever() 


Thread(target=loop_LTCBNB).start() 
symbol_g_WAVESBNB = 'WAVESBNB' 
price_bids_g_WAVESBNB = Decimal('0.0') 
qty_bids_g_WAVESBNB = Decimal('0.0') 
price_asks_g_WAVESBNB = Decimal('0.0') 
qty_asks_g_WAVESBNB = Decimal('0.0') 
stepSize_g_WAVESBNB = Decimal('0.01') 


def on_message_WAVESBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WAVESBNB = 'WAVESBNB' 
	price_bids_c_l_WAVESBNB = data['b'] 
	qty_bids_c_l_WAVESBNB = data['B'] 
	price_asks_c_l_WAVESBNB = data['a'] 
	qty_asks_c_l_WAVESBNB = data['A'] 

	global symbol_g_WAVESBNB 
	global price_bids_g_WAVESBNB 
	global qty_bids_g_WAVESBNB 
	global price_asks_g_WAVESBNB 
	global qty_asks_g_WAVESBNB 

	symbol_g_WAVESBNB = symbol_c_l_WAVESBNB 
	price_bids_g_WAVESBNB = Decimal(price_bids_c_l_WAVESBNB) 
	qty_bids_g_WAVESBNB = Decimal(qty_bids_c_l_WAVESBNB) 
	price_asks_g_WAVESBNB = Decimal(price_asks_c_l_WAVESBNB) 
	qty_asks_g_WAVESBNB = Decimal(qty_asks_c_l_WAVESBNB) 


def loop_WAVESBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wavesbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WAVESBNB) 
	ws.run_forever() 


Thread(target=loop_WAVESBNB).start() 
symbol_g_ZILBNB = 'ZILBNB' 
price_bids_g_ZILBNB = Decimal('0.0') 
qty_bids_g_ZILBNB = Decimal('0.0') 
price_asks_g_ZILBNB = Decimal('0.0') 
qty_asks_g_ZILBNB = Decimal('0.0') 
stepSize_g_ZILBNB = Decimal('1.0') 


def on_message_ZILBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZILBNB = 'ZILBNB' 
	price_bids_c_l_ZILBNB = data['b'] 
	qty_bids_c_l_ZILBNB = data['B'] 
	price_asks_c_l_ZILBNB = data['a'] 
	qty_asks_c_l_ZILBNB = data['A'] 

	global symbol_g_ZILBNB 
	global price_bids_g_ZILBNB 
	global qty_bids_g_ZILBNB 
	global price_asks_g_ZILBNB 
	global qty_asks_g_ZILBNB 

	symbol_g_ZILBNB = symbol_c_l_ZILBNB 
	price_bids_g_ZILBNB = Decimal(price_bids_c_l_ZILBNB) 
	qty_bids_g_ZILBNB = Decimal(qty_bids_c_l_ZILBNB) 
	price_asks_g_ZILBNB = Decimal(price_asks_c_l_ZILBNB) 
	qty_asks_g_ZILBNB = Decimal(qty_asks_c_l_ZILBNB) 


def loop_ZILBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zilbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZILBNB) 
	ws.run_forever() 


Thread(target=loop_ZILBNB).start() 
symbol_g_ADABNB = 'ADABNB' 
price_bids_g_ADABNB = Decimal('0.0') 
qty_bids_g_ADABNB = Decimal('0.0') 
price_asks_g_ADABNB = Decimal('0.0') 
qty_asks_g_ADABNB = Decimal('0.0') 
stepSize_g_ADABNB = Decimal('0.1') 


def on_message_ADABNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADABNB = 'ADABNB' 
	price_bids_c_l_ADABNB = data['b'] 
	qty_bids_c_l_ADABNB = data['B'] 
	price_asks_c_l_ADABNB = data['a'] 
	qty_asks_c_l_ADABNB = data['A'] 

	global symbol_g_ADABNB 
	global price_bids_g_ADABNB 
	global qty_bids_g_ADABNB 
	global price_asks_g_ADABNB 
	global qty_asks_g_ADABNB 

	symbol_g_ADABNB = symbol_c_l_ADABNB 
	price_bids_g_ADABNB = Decimal(price_bids_c_l_ADABNB) 
	qty_bids_g_ADABNB = Decimal(qty_bids_c_l_ADABNB) 
	price_asks_g_ADABNB = Decimal(price_asks_c_l_ADABNB) 
	qty_asks_g_ADABNB = Decimal(qty_asks_c_l_ADABNB) 


def loop_ADABNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adabnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADABNB) 
	ws.run_forever() 


Thread(target=loop_ADABNB).start() 
symbol_g_EOSBNB = 'EOSBNB' 
price_bids_g_EOSBNB = Decimal('0.0') 
qty_bids_g_EOSBNB = Decimal('0.0') 
price_asks_g_EOSBNB = Decimal('0.0') 
qty_asks_g_EOSBNB = Decimal('0.0') 
stepSize_g_EOSBNB = Decimal('0.1') 


def on_message_EOSBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EOSBNB = 'EOSBNB' 
	price_bids_c_l_EOSBNB = data['b'] 
	qty_bids_c_l_EOSBNB = data['B'] 
	price_asks_c_l_EOSBNB = data['a'] 
	qty_asks_c_l_EOSBNB = data['A'] 

	global symbol_g_EOSBNB 
	global price_bids_g_EOSBNB 
	global qty_bids_g_EOSBNB 
	global price_asks_g_EOSBNB 
	global qty_asks_g_EOSBNB 

	symbol_g_EOSBNB = symbol_c_l_EOSBNB 
	price_bids_g_EOSBNB = Decimal(price_bids_c_l_EOSBNB) 
	qty_bids_g_EOSBNB = Decimal(qty_bids_c_l_EOSBNB) 
	price_asks_g_EOSBNB = Decimal(price_asks_c_l_EOSBNB) 
	qty_asks_g_EOSBNB = Decimal(qty_asks_c_l_EOSBNB) 


def loop_EOSBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/eosbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EOSBNB) 
	ws.run_forever() 


Thread(target=loop_EOSBNB).start() 
symbol_g_THETABNB = 'THETABNB' 
price_bids_g_THETABNB = Decimal('0.0') 
qty_bids_g_THETABNB = Decimal('0.0') 
price_asks_g_THETABNB = Decimal('0.0') 
qty_asks_g_THETABNB = Decimal('0.0') 
stepSize_g_THETABNB = Decimal('0.1') 


def on_message_THETABNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_THETABNB = 'THETABNB' 
	price_bids_c_l_THETABNB = data['b'] 
	qty_bids_c_l_THETABNB = data['B'] 
	price_asks_c_l_THETABNB = data['a'] 
	qty_asks_c_l_THETABNB = data['A'] 

	global symbol_g_THETABNB 
	global price_bids_g_THETABNB 
	global qty_bids_g_THETABNB 
	global price_asks_g_THETABNB 
	global qty_asks_g_THETABNB 

	symbol_g_THETABNB = symbol_c_l_THETABNB 
	price_bids_g_THETABNB = Decimal(price_bids_c_l_THETABNB) 
	qty_bids_g_THETABNB = Decimal(qty_bids_c_l_THETABNB) 
	price_asks_g_THETABNB = Decimal(price_asks_c_l_THETABNB) 
	qty_asks_g_THETABNB = Decimal(qty_asks_c_l_THETABNB) 


def loop_THETABNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/thetabnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_THETABNB) 
	ws.run_forever() 


Thread(target=loop_THETABNB).start() 
symbol_g_XRPBNB = 'XRPBNB' 
price_bids_g_XRPBNB = Decimal('0.0') 
qty_bids_g_XRPBNB = Decimal('0.0') 
price_asks_g_XRPBNB = Decimal('0.0') 
qty_asks_g_XRPBNB = Decimal('0.0') 
stepSize_g_XRPBNB = Decimal('1.0') 


def on_message_XRPBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XRPBNB = 'XRPBNB' 
	price_bids_c_l_XRPBNB = data['b'] 
	qty_bids_c_l_XRPBNB = data['B'] 
	price_asks_c_l_XRPBNB = data['a'] 
	qty_asks_c_l_XRPBNB = data['A'] 

	global symbol_g_XRPBNB 
	global price_bids_g_XRPBNB 
	global qty_bids_g_XRPBNB 
	global price_asks_g_XRPBNB 
	global qty_asks_g_XRPBNB 

	symbol_g_XRPBNB = symbol_c_l_XRPBNB 
	price_bids_g_XRPBNB = Decimal(price_bids_c_l_XRPBNB) 
	qty_bids_g_XRPBNB = Decimal(qty_bids_c_l_XRPBNB) 
	price_asks_g_XRPBNB = Decimal(price_asks_c_l_XRPBNB) 
	qty_asks_g_XRPBNB = Decimal(qty_asks_c_l_XRPBNB) 


def loop_XRPBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xrpbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XRPBNB) 
	ws.run_forever() 


Thread(target=loop_XRPBNB).start() 
symbol_g_ENJBNB = 'ENJBNB' 
price_bids_g_ENJBNB = Decimal('0.0') 
qty_bids_g_ENJBNB = Decimal('0.0') 
price_asks_g_ENJBNB = Decimal('0.0') 
qty_asks_g_ENJBNB = Decimal('0.0') 
stepSize_g_ENJBNB = Decimal('0.1') 


def on_message_ENJBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENJBNB = 'ENJBNB' 
	price_bids_c_l_ENJBNB = data['b'] 
	qty_bids_c_l_ENJBNB = data['B'] 
	price_asks_c_l_ENJBNB = data['a'] 
	qty_asks_c_l_ENJBNB = data['A'] 

	global symbol_g_ENJBNB 
	global price_bids_g_ENJBNB 
	global qty_bids_g_ENJBNB 
	global price_asks_g_ENJBNB 
	global qty_asks_g_ENJBNB 

	symbol_g_ENJBNB = symbol_c_l_ENJBNB 
	price_bids_g_ENJBNB = Decimal(price_bids_c_l_ENJBNB) 
	qty_bids_g_ENJBNB = Decimal(qty_bids_c_l_ENJBNB) 
	price_asks_g_ENJBNB = Decimal(price_asks_c_l_ENJBNB) 
	qty_asks_g_ENJBNB = Decimal(qty_asks_c_l_ENJBNB) 


def loop_ENJBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/enjbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENJBNB) 
	ws.run_forever() 


Thread(target=loop_ENJBNB).start() 
symbol_g_TRXBNB = 'TRXBNB' 
price_bids_g_TRXBNB = Decimal('0.0') 
qty_bids_g_TRXBNB = Decimal('0.0') 
price_asks_g_TRXBNB = Decimal('0.0') 
qty_asks_g_TRXBNB = Decimal('0.0') 
stepSize_g_TRXBNB = Decimal('1.0') 


def on_message_TRXBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRXBNB = 'TRXBNB' 
	price_bids_c_l_TRXBNB = data['b'] 
	qty_bids_c_l_TRXBNB = data['B'] 
	price_asks_c_l_TRXBNB = data['a'] 
	qty_asks_c_l_TRXBNB = data['A'] 

	global symbol_g_TRXBNB 
	global price_bids_g_TRXBNB 
	global qty_bids_g_TRXBNB 
	global price_asks_g_TRXBNB 
	global qty_asks_g_TRXBNB 

	symbol_g_TRXBNB = symbol_c_l_TRXBNB 
	price_bids_g_TRXBNB = Decimal(price_bids_c_l_TRXBNB) 
	qty_bids_g_TRXBNB = Decimal(qty_bids_c_l_TRXBNB) 
	price_asks_g_TRXBNB = Decimal(price_asks_c_l_TRXBNB) 
	qty_asks_g_TRXBNB = Decimal(qty_asks_c_l_TRXBNB) 


def loop_TRXBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/trxbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRXBNB) 
	ws.run_forever() 


Thread(target=loop_TRXBNB).start() 
symbol_g_ETCBNB = 'ETCBNB' 
price_bids_g_ETCBNB = Decimal('0.0') 
qty_bids_g_ETCBNB = Decimal('0.0') 
price_asks_g_ETCBNB = Decimal('0.0') 
qty_asks_g_ETCBNB = Decimal('0.0') 
stepSize_g_ETCBNB = Decimal('0.01') 


def on_message_ETCBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETCBNB = 'ETCBNB' 
	price_bids_c_l_ETCBNB = data['b'] 
	qty_bids_c_l_ETCBNB = data['B'] 
	price_asks_c_l_ETCBNB = data['a'] 
	qty_asks_c_l_ETCBNB = data['A'] 

	global symbol_g_ETCBNB 
	global price_bids_g_ETCBNB 
	global qty_bids_g_ETCBNB 
	global price_asks_g_ETCBNB 
	global qty_asks_g_ETCBNB 

	symbol_g_ETCBNB = symbol_c_l_ETCBNB 
	price_bids_g_ETCBNB = Decimal(price_bids_c_l_ETCBNB) 
	qty_bids_g_ETCBNB = Decimal(qty_bids_c_l_ETCBNB) 
	price_asks_g_ETCBNB = Decimal(price_asks_c_l_ETCBNB) 
	qty_asks_g_ETCBNB = Decimal(qty_asks_c_l_ETCBNB) 


def loop_ETCBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/etcbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETCBNB) 
	ws.run_forever() 


Thread(target=loop_ETCBNB).start() 
symbol_g_VETBNB = 'VETBNB' 
price_bids_g_VETBNB = Decimal('0.0') 
qty_bids_g_VETBNB = Decimal('0.0') 
price_asks_g_VETBNB = Decimal('0.0') 
qty_asks_g_VETBNB = Decimal('0.0') 
stepSize_g_VETBNB = Decimal('1.0') 


def on_message_VETBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VETBNB = 'VETBNB' 
	price_bids_c_l_VETBNB = data['b'] 
	qty_bids_c_l_VETBNB = data['B'] 
	price_asks_c_l_VETBNB = data['a'] 
	qty_asks_c_l_VETBNB = data['A'] 

	global symbol_g_VETBNB 
	global price_bids_g_VETBNB 
	global qty_bids_g_VETBNB 
	global price_asks_g_VETBNB 
	global qty_asks_g_VETBNB 

	symbol_g_VETBNB = symbol_c_l_VETBNB 
	price_bids_g_VETBNB = Decimal(price_bids_c_l_VETBNB) 
	qty_bids_g_VETBNB = Decimal(qty_bids_c_l_VETBNB) 
	price_asks_g_VETBNB = Decimal(price_asks_c_l_VETBNB) 
	qty_asks_g_VETBNB = Decimal(qty_asks_c_l_VETBNB) 


def loop_VETBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/vetbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VETBNB) 
	ws.run_forever() 


Thread(target=loop_VETBNB).start() 
symbol_g_FETBNB = 'FETBNB' 
price_bids_g_FETBNB = Decimal('0.0') 
qty_bids_g_FETBNB = Decimal('0.0') 
price_asks_g_FETBNB = Decimal('0.0') 
qty_asks_g_FETBNB = Decimal('0.0') 
stepSize_g_FETBNB = Decimal('1.0') 


def on_message_FETBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FETBNB = 'FETBNB' 
	price_bids_c_l_FETBNB = data['b'] 
	qty_bids_c_l_FETBNB = data['B'] 
	price_asks_c_l_FETBNB = data['a'] 
	qty_asks_c_l_FETBNB = data['A'] 

	global symbol_g_FETBNB 
	global price_bids_g_FETBNB 
	global qty_bids_g_FETBNB 
	global price_asks_g_FETBNB 
	global qty_asks_g_FETBNB 

	symbol_g_FETBNB = symbol_c_l_FETBNB 
	price_bids_g_FETBNB = Decimal(price_bids_c_l_FETBNB) 
	qty_bids_g_FETBNB = Decimal(qty_bids_c_l_FETBNB) 
	price_asks_g_FETBNB = Decimal(price_asks_c_l_FETBNB) 
	qty_asks_g_FETBNB = Decimal(qty_asks_c_l_FETBNB) 


def loop_FETBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fetbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FETBNB) 
	ws.run_forever() 


Thread(target=loop_FETBNB).start() 
symbol_g_XMRBNB = 'XMRBNB' 
price_bids_g_XMRBNB = Decimal('0.0') 
qty_bids_g_XMRBNB = Decimal('0.0') 
price_asks_g_XMRBNB = Decimal('0.0') 
qty_asks_g_XMRBNB = Decimal('0.0') 
stepSize_g_XMRBNB = Decimal('0.001') 


def on_message_XMRBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XMRBNB = 'XMRBNB' 
	price_bids_c_l_XMRBNB = data['b'] 
	qty_bids_c_l_XMRBNB = data['B'] 
	price_asks_c_l_XMRBNB = data['a'] 
	qty_asks_c_l_XMRBNB = data['A'] 

	global symbol_g_XMRBNB 
	global price_bids_g_XMRBNB 
	global qty_bids_g_XMRBNB 
	global price_asks_g_XMRBNB 
	global qty_asks_g_XMRBNB 

	symbol_g_XMRBNB = symbol_c_l_XMRBNB 
	price_bids_g_XMRBNB = Decimal(price_bids_c_l_XMRBNB) 
	qty_bids_g_XMRBNB = Decimal(qty_bids_c_l_XMRBNB) 
	price_asks_g_XMRBNB = Decimal(price_asks_c_l_XMRBNB) 
	qty_asks_g_XMRBNB = Decimal(qty_asks_c_l_XMRBNB) 


def loop_XMRBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xmrbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XMRBNB) 
	ws.run_forever() 


Thread(target=loop_XMRBNB).start() 
symbol_g_ZECBNB = 'ZECBNB' 
price_bids_g_ZECBNB = Decimal('0.0') 
qty_bids_g_ZECBNB = Decimal('0.0') 
price_asks_g_ZECBNB = Decimal('0.0') 
qty_asks_g_ZECBNB = Decimal('0.0') 
stepSize_g_ZECBNB = Decimal('0.001') 


def on_message_ZECBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZECBNB = 'ZECBNB' 
	price_bids_c_l_ZECBNB = data['b'] 
	qty_bids_c_l_ZECBNB = data['B'] 
	price_asks_c_l_ZECBNB = data['a'] 
	qty_asks_c_l_ZECBNB = data['A'] 

	global symbol_g_ZECBNB 
	global price_bids_g_ZECBNB 
	global qty_bids_g_ZECBNB 
	global price_asks_g_ZECBNB 
	global qty_asks_g_ZECBNB 

	symbol_g_ZECBNB = symbol_c_l_ZECBNB 
	price_bids_g_ZECBNB = Decimal(price_bids_c_l_ZECBNB) 
	qty_bids_g_ZECBNB = Decimal(qty_bids_c_l_ZECBNB) 
	price_asks_g_ZECBNB = Decimal(price_asks_c_l_ZECBNB) 
	qty_asks_g_ZECBNB = Decimal(qty_asks_c_l_ZECBNB) 


def loop_ZECBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zecbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZECBNB) 
	ws.run_forever() 


Thread(target=loop_ZECBNB).start() 
symbol_g_CELRBNB = 'CELRBNB' 
price_bids_g_CELRBNB = Decimal('0.0') 
qty_bids_g_CELRBNB = Decimal('0.0') 
price_asks_g_CELRBNB = Decimal('0.0') 
qty_asks_g_CELRBNB = Decimal('0.0') 
stepSize_g_CELRBNB = Decimal('1.0') 


def on_message_CELRBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CELRBNB = 'CELRBNB' 
	price_bids_c_l_CELRBNB = data['b'] 
	qty_bids_c_l_CELRBNB = data['B'] 
	price_asks_c_l_CELRBNB = data['a'] 
	qty_asks_c_l_CELRBNB = data['A'] 

	global symbol_g_CELRBNB 
	global price_bids_g_CELRBNB 
	global qty_bids_g_CELRBNB 
	global price_asks_g_CELRBNB 
	global qty_asks_g_CELRBNB 

	symbol_g_CELRBNB = symbol_c_l_CELRBNB 
	price_bids_g_CELRBNB = Decimal(price_bids_c_l_CELRBNB) 
	qty_bids_g_CELRBNB = Decimal(qty_bids_c_l_CELRBNB) 
	price_asks_g_CELRBNB = Decimal(price_asks_c_l_CELRBNB) 
	qty_asks_g_CELRBNB = Decimal(qty_asks_c_l_CELRBNB) 


def loop_CELRBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/celrbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CELRBNB) 
	ws.run_forever() 


Thread(target=loop_CELRBNB).start() 
symbol_g_DASHBNB = 'DASHBNB' 
price_bids_g_DASHBNB = Decimal('0.0') 
qty_bids_g_DASHBNB = Decimal('0.0') 
price_asks_g_DASHBNB = Decimal('0.0') 
qty_asks_g_DASHBNB = Decimal('0.0') 
stepSize_g_DASHBNB = Decimal('0.001') 


def on_message_DASHBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DASHBNB = 'DASHBNB' 
	price_bids_c_l_DASHBNB = data['b'] 
	qty_bids_c_l_DASHBNB = data['B'] 
	price_asks_c_l_DASHBNB = data['a'] 
	qty_asks_c_l_DASHBNB = data['A'] 

	global symbol_g_DASHBNB 
	global price_bids_g_DASHBNB 
	global qty_bids_g_DASHBNB 
	global price_asks_g_DASHBNB 
	global qty_asks_g_DASHBNB 

	symbol_g_DASHBNB = symbol_c_l_DASHBNB 
	price_bids_g_DASHBNB = Decimal(price_bids_c_l_DASHBNB) 
	qty_bids_g_DASHBNB = Decimal(qty_bids_c_l_DASHBNB) 
	price_asks_g_DASHBNB = Decimal(price_asks_c_l_DASHBNB) 
	qty_asks_g_DASHBNB = Decimal(qty_asks_c_l_DASHBNB) 


def loop_DASHBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dashbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DASHBNB) 
	ws.run_forever() 


Thread(target=loop_DASHBNB).start() 
symbol_g_MATICBNB = 'MATICBNB' 
price_bids_g_MATICBNB = Decimal('0.0') 
qty_bids_g_MATICBNB = Decimal('0.0') 
price_asks_g_MATICBNB = Decimal('0.0') 
qty_asks_g_MATICBNB = Decimal('0.0') 
stepSize_g_MATICBNB = Decimal('0.1') 


def on_message_MATICBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MATICBNB = 'MATICBNB' 
	price_bids_c_l_MATICBNB = data['b'] 
	qty_bids_c_l_MATICBNB = data['B'] 
	price_asks_c_l_MATICBNB = data['a'] 
	qty_asks_c_l_MATICBNB = data['A'] 

	global symbol_g_MATICBNB 
	global price_bids_g_MATICBNB 
	global qty_bids_g_MATICBNB 
	global price_asks_g_MATICBNB 
	global qty_asks_g_MATICBNB 

	symbol_g_MATICBNB = symbol_c_l_MATICBNB 
	price_bids_g_MATICBNB = Decimal(price_bids_c_l_MATICBNB) 
	qty_bids_g_MATICBNB = Decimal(qty_bids_c_l_MATICBNB) 
	price_asks_g_MATICBNB = Decimal(price_asks_c_l_MATICBNB) 
	qty_asks_g_MATICBNB = Decimal(qty_asks_c_l_MATICBNB) 


def loop_MATICBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maticbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MATICBNB) 
	ws.run_forever() 


Thread(target=loop_MATICBNB).start() 
symbol_g_ATOMBNB = 'ATOMBNB' 
price_bids_g_ATOMBNB = Decimal('0.0') 
qty_bids_g_ATOMBNB = Decimal('0.0') 
price_asks_g_ATOMBNB = Decimal('0.0') 
qty_asks_g_ATOMBNB = Decimal('0.0') 
stepSize_g_ATOMBNB = Decimal('0.01') 


def on_message_ATOMBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATOMBNB = 'ATOMBNB' 
	price_bids_c_l_ATOMBNB = data['b'] 
	qty_bids_c_l_ATOMBNB = data['B'] 
	price_asks_c_l_ATOMBNB = data['a'] 
	qty_asks_c_l_ATOMBNB = data['A'] 

	global symbol_g_ATOMBNB 
	global price_bids_g_ATOMBNB 
	global qty_bids_g_ATOMBNB 
	global price_asks_g_ATOMBNB 
	global qty_asks_g_ATOMBNB 

	symbol_g_ATOMBNB = symbol_c_l_ATOMBNB 
	price_bids_g_ATOMBNB = Decimal(price_bids_c_l_ATOMBNB) 
	qty_bids_g_ATOMBNB = Decimal(qty_bids_c_l_ATOMBNB) 
	price_asks_g_ATOMBNB = Decimal(price_asks_c_l_ATOMBNB) 
	qty_asks_g_ATOMBNB = Decimal(qty_asks_c_l_ATOMBNB) 


def loop_ATOMBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atombnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATOMBNB) 
	ws.run_forever() 


Thread(target=loop_ATOMBNB).start() 
symbol_g_ONEBNB = 'ONEBNB' 
price_bids_g_ONEBNB = Decimal('0.0') 
qty_bids_g_ONEBNB = Decimal('0.0') 
price_asks_g_ONEBNB = Decimal('0.0') 
qty_asks_g_ONEBNB = Decimal('0.0') 
stepSize_g_ONEBNB = Decimal('1.0') 


def on_message_ONEBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ONEBNB = 'ONEBNB' 
	price_bids_c_l_ONEBNB = data['b'] 
	qty_bids_c_l_ONEBNB = data['B'] 
	price_asks_c_l_ONEBNB = data['a'] 
	qty_asks_c_l_ONEBNB = data['A'] 

	global symbol_g_ONEBNB 
	global price_bids_g_ONEBNB 
	global qty_bids_g_ONEBNB 
	global price_asks_g_ONEBNB 
	global qty_asks_g_ONEBNB 

	symbol_g_ONEBNB = symbol_c_l_ONEBNB 
	price_bids_g_ONEBNB = Decimal(price_bids_c_l_ONEBNB) 
	qty_bids_g_ONEBNB = Decimal(qty_bids_c_l_ONEBNB) 
	price_asks_g_ONEBNB = Decimal(price_asks_c_l_ONEBNB) 
	qty_asks_g_ONEBNB = Decimal(qty_asks_c_l_ONEBNB) 


def loop_ONEBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/onebnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ONEBNB) 
	ws.run_forever() 


Thread(target=loop_ONEBNB).start() 
symbol_g_FTMBNB = 'FTMBNB' 
price_bids_g_FTMBNB = Decimal('0.0') 
qty_bids_g_FTMBNB = Decimal('0.0') 
price_asks_g_FTMBNB = Decimal('0.0') 
qty_asks_g_FTMBNB = Decimal('0.0') 
stepSize_g_FTMBNB = Decimal('1.0') 


def on_message_FTMBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FTMBNB = 'FTMBNB' 
	price_bids_c_l_FTMBNB = data['b'] 
	qty_bids_c_l_FTMBNB = data['B'] 
	price_asks_c_l_FTMBNB = data['a'] 
	qty_asks_c_l_FTMBNB = data['A'] 

	global symbol_g_FTMBNB 
	global price_bids_g_FTMBNB 
	global qty_bids_g_FTMBNB 
	global price_asks_g_FTMBNB 
	global qty_asks_g_FTMBNB 

	symbol_g_FTMBNB = symbol_c_l_FTMBNB 
	price_bids_g_FTMBNB = Decimal(price_bids_c_l_FTMBNB) 
	qty_bids_g_FTMBNB = Decimal(qty_bids_c_l_FTMBNB) 
	price_asks_g_FTMBNB = Decimal(price_asks_c_l_FTMBNB) 
	qty_asks_g_FTMBNB = Decimal(qty_asks_c_l_FTMBNB) 


def loop_FTMBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ftmbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FTMBNB) 
	ws.run_forever() 


Thread(target=loop_FTMBNB).start() 
symbol_g_ALGOBNB = 'ALGOBNB' 
price_bids_g_ALGOBNB = Decimal('0.0') 
qty_bids_g_ALGOBNB = Decimal('0.0') 
price_asks_g_ALGOBNB = Decimal('0.0') 
qty_asks_g_ALGOBNB = Decimal('0.0') 
stepSize_g_ALGOBNB = Decimal('1.0') 


def on_message_ALGOBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALGOBNB = 'ALGOBNB' 
	price_bids_c_l_ALGOBNB = data['b'] 
	qty_bids_c_l_ALGOBNB = data['B'] 
	price_asks_c_l_ALGOBNB = data['a'] 
	qty_asks_c_l_ALGOBNB = data['A'] 

	global symbol_g_ALGOBNB 
	global price_bids_g_ALGOBNB 
	global qty_bids_g_ALGOBNB 
	global price_asks_g_ALGOBNB 
	global qty_asks_g_ALGOBNB 

	symbol_g_ALGOBNB = symbol_c_l_ALGOBNB 
	price_bids_g_ALGOBNB = Decimal(price_bids_c_l_ALGOBNB) 
	qty_bids_g_ALGOBNB = Decimal(qty_bids_c_l_ALGOBNB) 
	price_asks_g_ALGOBNB = Decimal(price_asks_c_l_ALGOBNB) 
	qty_asks_g_ALGOBNB = Decimal(qty_asks_c_l_ALGOBNB) 


def loop_ALGOBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/algobnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALGOBNB) 
	ws.run_forever() 


Thread(target=loop_ALGOBNB).start() 
symbol_g_ANKRBNB = 'ANKRBNB' 
price_bids_g_ANKRBNB = Decimal('0.0') 
qty_bids_g_ANKRBNB = Decimal('0.0') 
price_asks_g_ANKRBNB = Decimal('0.0') 
qty_asks_g_ANKRBNB = Decimal('0.0') 
stepSize_g_ANKRBNB = Decimal('1.0') 


def on_message_ANKRBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ANKRBNB = 'ANKRBNB' 
	price_bids_c_l_ANKRBNB = data['b'] 
	qty_bids_c_l_ANKRBNB = data['B'] 
	price_asks_c_l_ANKRBNB = data['a'] 
	qty_asks_c_l_ANKRBNB = data['A'] 

	global symbol_g_ANKRBNB 
	global price_bids_g_ANKRBNB 
	global qty_bids_g_ANKRBNB 
	global price_asks_g_ANKRBNB 
	global qty_asks_g_ANKRBNB 

	symbol_g_ANKRBNB = symbol_c_l_ANKRBNB 
	price_bids_g_ANKRBNB = Decimal(price_bids_c_l_ANKRBNB) 
	qty_bids_g_ANKRBNB = Decimal(qty_bids_c_l_ANKRBNB) 
	price_asks_g_ANKRBNB = Decimal(price_asks_c_l_ANKRBNB) 
	qty_asks_g_ANKRBNB = Decimal(qty_asks_c_l_ANKRBNB) 


def loop_ANKRBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ankrbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ANKRBNB) 
	ws.run_forever() 


Thread(target=loop_ANKRBNB).start() 
symbol_g_WINBNB = 'WINBNB' 
price_bids_g_WINBNB = Decimal('0.0') 
qty_bids_g_WINBNB = Decimal('0.0') 
price_asks_g_WINBNB = Decimal('0.0') 
qty_asks_g_WINBNB = Decimal('0.0') 
stepSize_g_WINBNB = Decimal('1.0') 


def on_message_WINBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WINBNB = 'WINBNB' 
	price_bids_c_l_WINBNB = data['b'] 
	qty_bids_c_l_WINBNB = data['B'] 
	price_asks_c_l_WINBNB = data['a'] 
	qty_asks_c_l_WINBNB = data['A'] 

	global symbol_g_WINBNB 
	global price_bids_g_WINBNB 
	global qty_bids_g_WINBNB 
	global price_asks_g_WINBNB 
	global qty_asks_g_WINBNB 

	symbol_g_WINBNB = symbol_c_l_WINBNB 
	price_bids_g_WINBNB = Decimal(price_bids_c_l_WINBNB) 
	qty_bids_g_WINBNB = Decimal(qty_bids_c_l_WINBNB) 
	price_asks_g_WINBNB = Decimal(price_asks_c_l_WINBNB) 
	qty_asks_g_WINBNB = Decimal(qty_asks_c_l_WINBNB) 


def loop_WINBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/winbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WINBNB) 
	ws.run_forever() 


Thread(target=loop_WINBNB).start() 
symbol_g_COSBNB = 'COSBNB' 
price_bids_g_COSBNB = Decimal('0.0') 
qty_bids_g_COSBNB = Decimal('0.0') 
price_asks_g_COSBNB = Decimal('0.0') 
qty_asks_g_COSBNB = Decimal('0.0') 
stepSize_g_COSBNB = Decimal('1.0') 


def on_message_COSBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COSBNB = 'COSBNB' 
	price_bids_c_l_COSBNB = data['b'] 
	qty_bids_c_l_COSBNB = data['B'] 
	price_asks_c_l_COSBNB = data['a'] 
	qty_asks_c_l_COSBNB = data['A'] 

	global symbol_g_COSBNB 
	global price_bids_g_COSBNB 
	global qty_bids_g_COSBNB 
	global price_asks_g_COSBNB 
	global qty_asks_g_COSBNB 

	symbol_g_COSBNB = symbol_c_l_COSBNB 
	price_bids_g_COSBNB = Decimal(price_bids_c_l_COSBNB) 
	qty_bids_g_COSBNB = Decimal(qty_bids_c_l_COSBNB) 
	price_asks_g_COSBNB = Decimal(price_asks_c_l_COSBNB) 
	qty_asks_g_COSBNB = Decimal(qty_asks_c_l_COSBNB) 


def loop_COSBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cosbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COSBNB) 
	ws.run_forever() 


Thread(target=loop_COSBNB).start() 
symbol_g_COCOSBNB = 'COCOSBNB' 
price_bids_g_COCOSBNB = Decimal('0.0') 
qty_bids_g_COCOSBNB = Decimal('0.0') 
price_asks_g_COCOSBNB = Decimal('0.0') 
qty_asks_g_COCOSBNB = Decimal('0.0') 
stepSize_g_COCOSBNB = Decimal('1.0') 


def on_message_COCOSBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COCOSBNB = 'COCOSBNB' 
	price_bids_c_l_COCOSBNB = data['b'] 
	qty_bids_c_l_COCOSBNB = data['B'] 
	price_asks_c_l_COCOSBNB = data['a'] 
	qty_asks_c_l_COCOSBNB = data['A'] 

	global symbol_g_COCOSBNB 
	global price_bids_g_COCOSBNB 
	global qty_bids_g_COCOSBNB 
	global price_asks_g_COCOSBNB 
	global qty_asks_g_COCOSBNB 

	symbol_g_COCOSBNB = symbol_c_l_COCOSBNB 
	price_bids_g_COCOSBNB = Decimal(price_bids_c_l_COCOSBNB) 
	qty_bids_g_COCOSBNB = Decimal(qty_bids_c_l_COCOSBNB) 
	price_asks_g_COCOSBNB = Decimal(price_asks_c_l_COCOSBNB) 
	qty_asks_g_COCOSBNB = Decimal(qty_asks_c_l_COCOSBNB) 


def loop_COCOSBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cocosbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COCOSBNB) 
	ws.run_forever() 


Thread(target=loop_COCOSBNB).start() 
symbol_g_CHZBNB = 'CHZBNB' 
price_bids_g_CHZBNB = Decimal('0.0') 
qty_bids_g_CHZBNB = Decimal('0.0') 
price_asks_g_CHZBNB = Decimal('0.0') 
qty_asks_g_CHZBNB = Decimal('0.0') 
stepSize_g_CHZBNB = Decimal('1.0') 


def on_message_CHZBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHZBNB = 'CHZBNB' 
	price_bids_c_l_CHZBNB = data['b'] 
	qty_bids_c_l_CHZBNB = data['B'] 
	price_asks_c_l_CHZBNB = data['a'] 
	qty_asks_c_l_CHZBNB = data['A'] 

	global symbol_g_CHZBNB 
	global price_bids_g_CHZBNB 
	global qty_bids_g_CHZBNB 
	global price_asks_g_CHZBNB 
	global qty_asks_g_CHZBNB 

	symbol_g_CHZBNB = symbol_c_l_CHZBNB 
	price_bids_g_CHZBNB = Decimal(price_bids_c_l_CHZBNB) 
	qty_bids_g_CHZBNB = Decimal(qty_bids_c_l_CHZBNB) 
	price_asks_g_CHZBNB = Decimal(price_asks_c_l_CHZBNB) 
	qty_asks_g_CHZBNB = Decimal(qty_asks_c_l_CHZBNB) 


def loop_CHZBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chzbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHZBNB) 
	ws.run_forever() 


Thread(target=loop_CHZBNB).start() 
symbol_g_BNBBUSD = 'BNBBUSD' 
price_bids_g_BNBBUSD = Decimal('0.0') 
qty_bids_g_BNBBUSD = Decimal('0.0') 
price_asks_g_BNBBUSD = Decimal('0.0') 
qty_asks_g_BNBBUSD = Decimal('0.0') 
stepSize_g_BNBBUSD = Decimal('0.001') 


def on_message_BNBBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNBBUSD = 'BNBBUSD' 
	price_bids_c_l_BNBBUSD = data['b'] 
	qty_bids_c_l_BNBBUSD = data['B'] 
	price_asks_c_l_BNBBUSD = data['a'] 
	qty_asks_c_l_BNBBUSD = data['A'] 

	global symbol_g_BNBBUSD 
	global price_bids_g_BNBBUSD 
	global qty_bids_g_BNBBUSD 
	global price_asks_g_BNBBUSD 
	global qty_asks_g_BNBBUSD 

	symbol_g_BNBBUSD = symbol_c_l_BNBBUSD 
	price_bids_g_BNBBUSD = Decimal(price_bids_c_l_BNBBUSD) 
	qty_bids_g_BNBBUSD = Decimal(qty_bids_c_l_BNBBUSD) 
	price_asks_g_BNBBUSD = Decimal(price_asks_c_l_BNBBUSD) 
	qty_asks_g_BNBBUSD = Decimal(qty_asks_c_l_BNBBUSD) 


def loop_BNBBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnbbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNBBUSD) 
	ws.run_forever() 


Thread(target=loop_BNBBUSD).start() 
symbol_g_XTZBNB = 'XTZBNB' 
price_bids_g_XTZBNB = Decimal('0.0') 
qty_bids_g_XTZBNB = Decimal('0.0') 
price_asks_g_XTZBNB = Decimal('0.0') 
qty_asks_g_XTZBNB = Decimal('0.0') 
stepSize_g_XTZBNB = Decimal('0.1') 


def on_message_XTZBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XTZBNB = 'XTZBNB' 
	price_bids_c_l_XTZBNB = data['b'] 
	qty_bids_c_l_XTZBNB = data['B'] 
	price_asks_c_l_XTZBNB = data['a'] 
	qty_asks_c_l_XTZBNB = data['A'] 

	global symbol_g_XTZBNB 
	global price_bids_g_XTZBNB 
	global qty_bids_g_XTZBNB 
	global price_asks_g_XTZBNB 
	global qty_asks_g_XTZBNB 

	symbol_g_XTZBNB = symbol_c_l_XTZBNB 
	price_bids_g_XTZBNB = Decimal(price_bids_c_l_XTZBNB) 
	qty_bids_g_XTZBNB = Decimal(qty_bids_c_l_XTZBNB) 
	price_asks_g_XTZBNB = Decimal(price_asks_c_l_XTZBNB) 
	qty_asks_g_XTZBNB = Decimal(qty_asks_c_l_XTZBNB) 


def loop_XTZBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xtzbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XTZBNB) 
	ws.run_forever() 


Thread(target=loop_XTZBNB).start() 
symbol_g_HBARBNB = 'HBARBNB' 
price_bids_g_HBARBNB = Decimal('0.0') 
qty_bids_g_HBARBNB = Decimal('0.0') 
price_asks_g_HBARBNB = Decimal('0.0') 
qty_asks_g_HBARBNB = Decimal('0.0') 
stepSize_g_HBARBNB = Decimal('1.0') 


def on_message_HBARBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HBARBNB = 'HBARBNB' 
	price_bids_c_l_HBARBNB = data['b'] 
	qty_bids_c_l_HBARBNB = data['B'] 
	price_asks_c_l_HBARBNB = data['a'] 
	qty_asks_c_l_HBARBNB = data['A'] 

	global symbol_g_HBARBNB 
	global price_bids_g_HBARBNB 
	global qty_bids_g_HBARBNB 
	global price_asks_g_HBARBNB 
	global qty_asks_g_HBARBNB 

	symbol_g_HBARBNB = symbol_c_l_HBARBNB 
	price_bids_g_HBARBNB = Decimal(price_bids_c_l_HBARBNB) 
	qty_bids_g_HBARBNB = Decimal(qty_bids_c_l_HBARBNB) 
	price_asks_g_HBARBNB = Decimal(price_asks_c_l_HBARBNB) 
	qty_asks_g_HBARBNB = Decimal(qty_asks_c_l_HBARBNB) 


def loop_HBARBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hbarbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HBARBNB) 
	ws.run_forever() 


Thread(target=loop_HBARBNB).start() 
symbol_g_STXBNB = 'STXBNB' 
price_bids_g_STXBNB = Decimal('0.0') 
qty_bids_g_STXBNB = Decimal('0.0') 
price_asks_g_STXBNB = Decimal('0.0') 
qty_asks_g_STXBNB = Decimal('0.0') 
stepSize_g_STXBNB = Decimal('0.1') 


def on_message_STXBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STXBNB = 'STXBNB' 
	price_bids_c_l_STXBNB = data['b'] 
	qty_bids_c_l_STXBNB = data['B'] 
	price_asks_c_l_STXBNB = data['a'] 
	qty_asks_c_l_STXBNB = data['A'] 

	global symbol_g_STXBNB 
	global price_bids_g_STXBNB 
	global qty_bids_g_STXBNB 
	global price_asks_g_STXBNB 
	global qty_asks_g_STXBNB 

	symbol_g_STXBNB = symbol_c_l_STXBNB 
	price_bids_g_STXBNB = Decimal(price_bids_c_l_STXBNB) 
	qty_bids_g_STXBNB = Decimal(qty_bids_c_l_STXBNB) 
	price_asks_g_STXBNB = Decimal(price_asks_c_l_STXBNB) 
	qty_asks_g_STXBNB = Decimal(qty_asks_c_l_STXBNB) 


def loop_STXBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/stxbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STXBNB) 
	ws.run_forever() 


Thread(target=loop_STXBNB).start() 
symbol_g_KAVABNB = 'KAVABNB' 
price_bids_g_KAVABNB = Decimal('0.0') 
qty_bids_g_KAVABNB = Decimal('0.0') 
price_asks_g_KAVABNB = Decimal('0.0') 
qty_asks_g_KAVABNB = Decimal('0.0') 
stepSize_g_KAVABNB = Decimal('0.1') 


def on_message_KAVABNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KAVABNB = 'KAVABNB' 
	price_bids_c_l_KAVABNB = data['b'] 
	qty_bids_c_l_KAVABNB = data['B'] 
	price_asks_c_l_KAVABNB = data['a'] 
	qty_asks_c_l_KAVABNB = data['A'] 

	global symbol_g_KAVABNB 
	global price_bids_g_KAVABNB 
	global qty_bids_g_KAVABNB 
	global price_asks_g_KAVABNB 
	global qty_asks_g_KAVABNB 

	symbol_g_KAVABNB = symbol_c_l_KAVABNB 
	price_bids_g_KAVABNB = Decimal(price_bids_c_l_KAVABNB) 
	qty_bids_g_KAVABNB = Decimal(qty_bids_c_l_KAVABNB) 
	price_asks_g_KAVABNB = Decimal(price_asks_c_l_KAVABNB) 
	qty_asks_g_KAVABNB = Decimal(qty_asks_c_l_KAVABNB) 


def loop_KAVABNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kavabnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KAVABNB) 
	ws.run_forever() 


Thread(target=loop_KAVABNB).start() 
symbol_g_ARPABNB = 'ARPABNB' 
price_bids_g_ARPABNB = Decimal('0.0') 
qty_bids_g_ARPABNB = Decimal('0.0') 
price_asks_g_ARPABNB = Decimal('0.0') 
qty_asks_g_ARPABNB = Decimal('0.0') 
stepSize_g_ARPABNB = Decimal('1.0') 


def on_message_ARPABNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ARPABNB = 'ARPABNB' 
	price_bids_c_l_ARPABNB = data['b'] 
	qty_bids_c_l_ARPABNB = data['B'] 
	price_asks_c_l_ARPABNB = data['a'] 
	qty_asks_c_l_ARPABNB = data['A'] 

	global symbol_g_ARPABNB 
	global price_bids_g_ARPABNB 
	global qty_bids_g_ARPABNB 
	global price_asks_g_ARPABNB 
	global qty_asks_g_ARPABNB 

	symbol_g_ARPABNB = symbol_c_l_ARPABNB 
	price_bids_g_ARPABNB = Decimal(price_bids_c_l_ARPABNB) 
	qty_bids_g_ARPABNB = Decimal(qty_bids_c_l_ARPABNB) 
	price_asks_g_ARPABNB = Decimal(price_asks_c_l_ARPABNB) 
	qty_asks_g_ARPABNB = Decimal(qty_asks_c_l_ARPABNB) 


def loop_ARPABNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/arpabnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ARPABNB) 
	ws.run_forever() 


Thread(target=loop_ARPABNB).start() 
symbol_g_BCHBNB = 'BCHBNB' 
price_bids_g_BCHBNB = Decimal('0.0') 
qty_bids_g_BCHBNB = Decimal('0.0') 
price_asks_g_BCHBNB = Decimal('0.0') 
qty_asks_g_BCHBNB = Decimal('0.0') 
stepSize_g_BCHBNB = Decimal('0.001') 


def on_message_BCHBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BCHBNB = 'BCHBNB' 
	price_bids_c_l_BCHBNB = data['b'] 
	qty_bids_c_l_BCHBNB = data['B'] 
	price_asks_c_l_BCHBNB = data['a'] 
	qty_asks_c_l_BCHBNB = data['A'] 

	global symbol_g_BCHBNB 
	global price_bids_g_BCHBNB 
	global qty_bids_g_BCHBNB 
	global price_asks_g_BCHBNB 
	global qty_asks_g_BCHBNB 

	symbol_g_BCHBNB = symbol_c_l_BCHBNB 
	price_bids_g_BCHBNB = Decimal(price_bids_c_l_BCHBNB) 
	qty_bids_g_BCHBNB = Decimal(qty_bids_c_l_BCHBNB) 
	price_asks_g_BCHBNB = Decimal(price_asks_c_l_BCHBNB) 
	qty_asks_g_BCHBNB = Decimal(qty_asks_c_l_BCHBNB) 


def loop_BCHBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bchbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BCHBNB) 
	ws.run_forever() 


Thread(target=loop_BCHBNB).start() 
symbol_g_BNBEUR = 'BNBEUR' 
price_bids_g_BNBEUR = Decimal('0.0') 
qty_bids_g_BNBEUR = Decimal('0.0') 
price_asks_g_BNBEUR = Decimal('0.0') 
qty_asks_g_BNBEUR = Decimal('0.0') 
stepSize_g_BNBEUR = Decimal('0.001') 


def on_message_BNBEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNBEUR = 'BNBEUR' 
	price_bids_c_l_BNBEUR = data['b'] 
	qty_bids_c_l_BNBEUR = data['B'] 
	price_asks_c_l_BNBEUR = data['a'] 
	qty_asks_c_l_BNBEUR = data['A'] 

	global symbol_g_BNBEUR 
	global price_bids_g_BNBEUR 
	global qty_bids_g_BNBEUR 
	global price_asks_g_BNBEUR 
	global qty_asks_g_BNBEUR 

	symbol_g_BNBEUR = symbol_c_l_BNBEUR 
	price_bids_g_BNBEUR = Decimal(price_bids_c_l_BNBEUR) 
	qty_bids_g_BNBEUR = Decimal(qty_bids_c_l_BNBEUR) 
	price_asks_g_BNBEUR = Decimal(price_asks_c_l_BNBEUR) 
	qty_asks_g_BNBEUR = Decimal(qty_asks_c_l_BNBEUR) 


def loop_BNBEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnbeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNBEUR) 
	ws.run_forever() 


Thread(target=loop_BNBEUR).start() 
symbol_g_WRXBNB = 'WRXBNB' 
price_bids_g_WRXBNB = Decimal('0.0') 
qty_bids_g_WRXBNB = Decimal('0.0') 
price_asks_g_WRXBNB = Decimal('0.0') 
qty_asks_g_WRXBNB = Decimal('0.0') 
stepSize_g_WRXBNB = Decimal('0.1') 


def on_message_WRXBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WRXBNB = 'WRXBNB' 
	price_bids_c_l_WRXBNB = data['b'] 
	qty_bids_c_l_WRXBNB = data['B'] 
	price_asks_c_l_WRXBNB = data['a'] 
	qty_asks_c_l_WRXBNB = data['A'] 

	global symbol_g_WRXBNB 
	global price_bids_g_WRXBNB 
	global qty_bids_g_WRXBNB 
	global price_asks_g_WRXBNB 
	global qty_asks_g_WRXBNB 

	symbol_g_WRXBNB = symbol_c_l_WRXBNB 
	price_bids_g_WRXBNB = Decimal(price_bids_c_l_WRXBNB) 
	qty_bids_g_WRXBNB = Decimal(qty_bids_c_l_WRXBNB) 
	price_asks_g_WRXBNB = Decimal(price_asks_c_l_WRXBNB) 
	qty_asks_g_WRXBNB = Decimal(qty_asks_c_l_WRXBNB) 


def loop_WRXBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wrxbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WRXBNB) 
	ws.run_forever() 


Thread(target=loop_WRXBNB).start() 
symbol_g_COTIBNB = 'COTIBNB' 
price_bids_g_COTIBNB = Decimal('0.0') 
qty_bids_g_COTIBNB = Decimal('0.0') 
price_asks_g_COTIBNB = Decimal('0.0') 
qty_asks_g_COTIBNB = Decimal('0.0') 
stepSize_g_COTIBNB = Decimal('1.0') 


def on_message_COTIBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COTIBNB = 'COTIBNB' 
	price_bids_c_l_COTIBNB = data['b'] 
	qty_bids_c_l_COTIBNB = data['B'] 
	price_asks_c_l_COTIBNB = data['a'] 
	qty_asks_c_l_COTIBNB = data['A'] 

	global symbol_g_COTIBNB 
	global price_bids_g_COTIBNB 
	global qty_bids_g_COTIBNB 
	global price_asks_g_COTIBNB 
	global qty_asks_g_COTIBNB 

	symbol_g_COTIBNB = symbol_c_l_COTIBNB 
	price_bids_g_COTIBNB = Decimal(price_bids_c_l_COTIBNB) 
	qty_bids_g_COTIBNB = Decimal(qty_bids_c_l_COTIBNB) 
	price_asks_g_COTIBNB = Decimal(price_asks_c_l_COTIBNB) 
	qty_asks_g_COTIBNB = Decimal(qty_asks_c_l_COTIBNB) 


def loop_COTIBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cotibnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COTIBNB) 
	ws.run_forever() 


Thread(target=loop_COTIBNB).start() 
symbol_g_SOLBNB = 'SOLBNB' 
price_bids_g_SOLBNB = Decimal('0.0') 
qty_bids_g_SOLBNB = Decimal('0.0') 
price_asks_g_SOLBNB = Decimal('0.0') 
qty_asks_g_SOLBNB = Decimal('0.0') 
stepSize_g_SOLBNB = Decimal('0.01') 


def on_message_SOLBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SOLBNB = 'SOLBNB' 
	price_bids_c_l_SOLBNB = data['b'] 
	qty_bids_c_l_SOLBNB = data['B'] 
	price_asks_c_l_SOLBNB = data['a'] 
	qty_asks_c_l_SOLBNB = data['A'] 

	global symbol_g_SOLBNB 
	global price_bids_g_SOLBNB 
	global qty_bids_g_SOLBNB 
	global price_asks_g_SOLBNB 
	global qty_asks_g_SOLBNB 

	symbol_g_SOLBNB = symbol_c_l_SOLBNB 
	price_bids_g_SOLBNB = Decimal(price_bids_c_l_SOLBNB) 
	qty_bids_g_SOLBNB = Decimal(qty_bids_c_l_SOLBNB) 
	price_asks_g_SOLBNB = Decimal(price_asks_c_l_SOLBNB) 
	qty_asks_g_SOLBNB = Decimal(qty_asks_c_l_SOLBNB) 


def loop_SOLBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/solbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SOLBNB) 
	ws.run_forever() 


Thread(target=loop_SOLBNB).start() 
symbol_g_CTSIBNB = 'CTSIBNB' 
price_bids_g_CTSIBNB = Decimal('0.0') 
qty_bids_g_CTSIBNB = Decimal('0.0') 
price_asks_g_CTSIBNB = Decimal('0.0') 
qty_asks_g_CTSIBNB = Decimal('0.0') 
stepSize_g_CTSIBNB = Decimal('1.0') 


def on_message_CTSIBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CTSIBNB = 'CTSIBNB' 
	price_bids_c_l_CTSIBNB = data['b'] 
	qty_bids_c_l_CTSIBNB = data['B'] 
	price_asks_c_l_CTSIBNB = data['a'] 
	qty_asks_c_l_CTSIBNB = data['A'] 

	global symbol_g_CTSIBNB 
	global price_bids_g_CTSIBNB 
	global qty_bids_g_CTSIBNB 
	global price_asks_g_CTSIBNB 
	global qty_asks_g_CTSIBNB 

	symbol_g_CTSIBNB = symbol_c_l_CTSIBNB 
	price_bids_g_CTSIBNB = Decimal(price_bids_c_l_CTSIBNB) 
	qty_bids_g_CTSIBNB = Decimal(qty_bids_c_l_CTSIBNB) 
	price_asks_g_CTSIBNB = Decimal(price_asks_c_l_CTSIBNB) 
	qty_asks_g_CTSIBNB = Decimal(qty_asks_c_l_CTSIBNB) 


def loop_CTSIBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ctsibnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CTSIBNB) 
	ws.run_forever() 


Thread(target=loop_CTSIBNB).start() 
symbol_g_CHRBNB = 'CHRBNB' 
price_bids_g_CHRBNB = Decimal('0.0') 
qty_bids_g_CHRBNB = Decimal('0.0') 
price_asks_g_CHRBNB = Decimal('0.0') 
qty_asks_g_CHRBNB = Decimal('0.0') 
stepSize_g_CHRBNB = Decimal('1.0') 


def on_message_CHRBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHRBNB = 'CHRBNB' 
	price_bids_c_l_CHRBNB = data['b'] 
	qty_bids_c_l_CHRBNB = data['B'] 
	price_asks_c_l_CHRBNB = data['a'] 
	qty_asks_c_l_CHRBNB = data['A'] 

	global symbol_g_CHRBNB 
	global price_bids_g_CHRBNB 
	global qty_bids_g_CHRBNB 
	global price_asks_g_CHRBNB 
	global qty_asks_g_CHRBNB 

	symbol_g_CHRBNB = symbol_c_l_CHRBNB 
	price_bids_g_CHRBNB = Decimal(price_bids_c_l_CHRBNB) 
	qty_bids_g_CHRBNB = Decimal(qty_bids_c_l_CHRBNB) 
	price_asks_g_CHRBNB = Decimal(price_asks_c_l_CHRBNB) 
	qty_asks_g_CHRBNB = Decimal(qty_asks_c_l_CHRBNB) 


def loop_CHRBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chrbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHRBNB) 
	ws.run_forever() 


Thread(target=loop_CHRBNB).start() 
symbol_g_BNBGBP = 'BNBGBP' 
price_bids_g_BNBGBP = Decimal('0.0') 
qty_bids_g_BNBGBP = Decimal('0.0') 
price_asks_g_BNBGBP = Decimal('0.0') 
qty_asks_g_BNBGBP = Decimal('0.0') 
stepSize_g_BNBGBP = Decimal('0.001') 


def on_message_BNBGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNBGBP = 'BNBGBP' 
	price_bids_c_l_BNBGBP = data['b'] 
	qty_bids_c_l_BNBGBP = data['B'] 
	price_asks_c_l_BNBGBP = data['a'] 
	qty_asks_c_l_BNBGBP = data['A'] 

	global symbol_g_BNBGBP 
	global price_bids_g_BNBGBP 
	global qty_bids_g_BNBGBP 
	global price_asks_g_BNBGBP 
	global qty_asks_g_BNBGBP 

	symbol_g_BNBGBP = symbol_c_l_BNBGBP 
	price_bids_g_BNBGBP = Decimal(price_bids_c_l_BNBGBP) 
	qty_bids_g_BNBGBP = Decimal(qty_bids_c_l_BNBGBP) 
	price_asks_g_BNBGBP = Decimal(price_asks_c_l_BNBGBP) 
	qty_asks_g_BNBGBP = Decimal(qty_asks_c_l_BNBGBP) 


def loop_BNBGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnbgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNBGBP) 
	ws.run_forever() 


Thread(target=loop_BNBGBP).start() 
symbol_g_SXPBNB = 'SXPBNB' 
price_bids_g_SXPBNB = Decimal('0.0') 
qty_bids_g_SXPBNB = Decimal('0.0') 
price_asks_g_SXPBNB = Decimal('0.0') 
qty_asks_g_SXPBNB = Decimal('0.0') 
stepSize_g_SXPBNB = Decimal('0.1') 


def on_message_SXPBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SXPBNB = 'SXPBNB' 
	price_bids_c_l_SXPBNB = data['b'] 
	qty_bids_c_l_SXPBNB = data['B'] 
	price_asks_c_l_SXPBNB = data['a'] 
	qty_asks_c_l_SXPBNB = data['A'] 

	global symbol_g_SXPBNB 
	global price_bids_g_SXPBNB 
	global qty_bids_g_SXPBNB 
	global price_asks_g_SXPBNB 
	global qty_asks_g_SXPBNB 

	symbol_g_SXPBNB = symbol_c_l_SXPBNB 
	price_bids_g_SXPBNB = Decimal(price_bids_c_l_SXPBNB) 
	qty_bids_g_SXPBNB = Decimal(qty_bids_c_l_SXPBNB) 
	price_asks_g_SXPBNB = Decimal(price_asks_c_l_SXPBNB) 
	qty_asks_g_SXPBNB = Decimal(qty_asks_c_l_SXPBNB) 


def loop_SXPBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sxpbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SXPBNB) 
	ws.run_forever() 


Thread(target=loop_SXPBNB).start() 
symbol_g_SNXBNB = 'SNXBNB' 
price_bids_g_SNXBNB = Decimal('0.0') 
qty_bids_g_SNXBNB = Decimal('0.0') 
price_asks_g_SNXBNB = Decimal('0.0') 
qty_asks_g_SNXBNB = Decimal('0.0') 
stepSize_g_SNXBNB = Decimal('0.1') 


def on_message_SNXBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SNXBNB = 'SNXBNB' 
	price_bids_c_l_SNXBNB = data['b'] 
	qty_bids_c_l_SNXBNB = data['B'] 
	price_asks_c_l_SNXBNB = data['a'] 
	qty_asks_c_l_SNXBNB = data['A'] 

	global symbol_g_SNXBNB 
	global price_bids_g_SNXBNB 
	global qty_bids_g_SNXBNB 
	global price_asks_g_SNXBNB 
	global qty_asks_g_SNXBNB 

	symbol_g_SNXBNB = symbol_c_l_SNXBNB 
	price_bids_g_SNXBNB = Decimal(price_bids_c_l_SNXBNB) 
	qty_bids_g_SNXBNB = Decimal(qty_bids_c_l_SNXBNB) 
	price_asks_g_SNXBNB = Decimal(price_asks_c_l_SNXBNB) 
	qty_asks_g_SNXBNB = Decimal(qty_asks_c_l_SNXBNB) 


def loop_SNXBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/snxbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SNXBNB) 
	ws.run_forever() 


Thread(target=loop_SNXBNB).start() 
symbol_g_RUNEBNB = 'RUNEBNB' 
price_bids_g_RUNEBNB = Decimal('0.0') 
qty_bids_g_RUNEBNB = Decimal('0.0') 
price_asks_g_RUNEBNB = Decimal('0.0') 
qty_asks_g_RUNEBNB = Decimal('0.0') 
stepSize_g_RUNEBNB = Decimal('0.1') 


def on_message_RUNEBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RUNEBNB = 'RUNEBNB' 
	price_bids_c_l_RUNEBNB = data['b'] 
	qty_bids_c_l_RUNEBNB = data['B'] 
	price_asks_c_l_RUNEBNB = data['a'] 
	qty_asks_c_l_RUNEBNB = data['A'] 

	global symbol_g_RUNEBNB 
	global price_bids_g_RUNEBNB 
	global qty_bids_g_RUNEBNB 
	global price_asks_g_RUNEBNB 
	global qty_asks_g_RUNEBNB 

	symbol_g_RUNEBNB = symbol_c_l_RUNEBNB 
	price_bids_g_RUNEBNB = Decimal(price_bids_c_l_RUNEBNB) 
	qty_bids_g_RUNEBNB = Decimal(qty_bids_c_l_RUNEBNB) 
	price_asks_g_RUNEBNB = Decimal(price_asks_c_l_RUNEBNB) 
	qty_asks_g_RUNEBNB = Decimal(qty_asks_c_l_RUNEBNB) 


def loop_RUNEBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/runebnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RUNEBNB) 
	ws.run_forever() 


Thread(target=loop_RUNEBNB).start() 
symbol_g_BNBAUD = 'BNBAUD' 
price_bids_g_BNBAUD = Decimal('0.0') 
qty_bids_g_BNBAUD = Decimal('0.0') 
price_asks_g_BNBAUD = Decimal('0.0') 
qty_asks_g_BNBAUD = Decimal('0.0') 
stepSize_g_BNBAUD = Decimal('0.001') 


def on_message_BNBAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNBAUD = 'BNBAUD' 
	price_bids_c_l_BNBAUD = data['b'] 
	qty_bids_c_l_BNBAUD = data['B'] 
	price_asks_c_l_BNBAUD = data['a'] 
	qty_asks_c_l_BNBAUD = data['A'] 

	global symbol_g_BNBAUD 
	global price_bids_g_BNBAUD 
	global qty_bids_g_BNBAUD 
	global price_asks_g_BNBAUD 
	global qty_asks_g_BNBAUD 

	symbol_g_BNBAUD = symbol_c_l_BNBAUD 
	price_bids_g_BNBAUD = Decimal(price_bids_c_l_BNBAUD) 
	qty_bids_g_BNBAUD = Decimal(qty_bids_c_l_BNBAUD) 
	price_asks_g_BNBAUD = Decimal(price_asks_c_l_BNBAUD) 
	qty_asks_g_BNBAUD = Decimal(qty_asks_c_l_BNBAUD) 


def loop_BNBAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnbaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNBAUD) 
	ws.run_forever() 


Thread(target=loop_BNBAUD).start() 
symbol_g_ANTBNB = 'ANTBNB' 
price_bids_g_ANTBNB = Decimal('0.0') 
qty_bids_g_ANTBNB = Decimal('0.0') 
price_asks_g_ANTBNB = Decimal('0.0') 
qty_asks_g_ANTBNB = Decimal('0.0') 
stepSize_g_ANTBNB = Decimal('0.1') 


def on_message_ANTBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ANTBNB = 'ANTBNB' 
	price_bids_c_l_ANTBNB = data['b'] 
	qty_bids_c_l_ANTBNB = data['B'] 
	price_asks_c_l_ANTBNB = data['a'] 
	qty_asks_c_l_ANTBNB = data['A'] 

	global symbol_g_ANTBNB 
	global price_bids_g_ANTBNB 
	global qty_bids_g_ANTBNB 
	global price_asks_g_ANTBNB 
	global qty_asks_g_ANTBNB 

	symbol_g_ANTBNB = symbol_c_l_ANTBNB 
	price_bids_g_ANTBNB = Decimal(price_bids_c_l_ANTBNB) 
	qty_bids_g_ANTBNB = Decimal(qty_bids_c_l_ANTBNB) 
	price_asks_g_ANTBNB = Decimal(price_asks_c_l_ANTBNB) 
	qty_asks_g_ANTBNB = Decimal(qty_asks_c_l_ANTBNB) 


def loop_ANTBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/antbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ANTBNB) 
	ws.run_forever() 


Thread(target=loop_ANTBNB).start() 
symbol_g_SANDBNB = 'SANDBNB' 
price_bids_g_SANDBNB = Decimal('0.0') 
qty_bids_g_SANDBNB = Decimal('0.0') 
price_asks_g_SANDBNB = Decimal('0.0') 
qty_asks_g_SANDBNB = Decimal('0.0') 
stepSize_g_SANDBNB = Decimal('1.0') 


def on_message_SANDBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SANDBNB = 'SANDBNB' 
	price_bids_c_l_SANDBNB = data['b'] 
	qty_bids_c_l_SANDBNB = data['B'] 
	price_asks_c_l_SANDBNB = data['a'] 
	qty_asks_c_l_SANDBNB = data['A'] 

	global symbol_g_SANDBNB 
	global price_bids_g_SANDBNB 
	global qty_bids_g_SANDBNB 
	global price_asks_g_SANDBNB 
	global qty_asks_g_SANDBNB 

	symbol_g_SANDBNB = symbol_c_l_SANDBNB 
	price_bids_g_SANDBNB = Decimal(price_bids_c_l_SANDBNB) 
	qty_bids_g_SANDBNB = Decimal(qty_bids_c_l_SANDBNB) 
	price_asks_g_SANDBNB = Decimal(price_asks_c_l_SANDBNB) 
	qty_asks_g_SANDBNB = Decimal(qty_asks_c_l_SANDBNB) 


def loop_SANDBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sandbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SANDBNB) 
	ws.run_forever() 


Thread(target=loop_SANDBNB).start() 
symbol_g_OCEANBNB = 'OCEANBNB' 
price_bids_g_OCEANBNB = Decimal('0.0') 
qty_bids_g_OCEANBNB = Decimal('0.0') 
price_asks_g_OCEANBNB = Decimal('0.0') 
qty_asks_g_OCEANBNB = Decimal('0.0') 
stepSize_g_OCEANBNB = Decimal('1.0') 


def on_message_OCEANBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OCEANBNB = 'OCEANBNB' 
	price_bids_c_l_OCEANBNB = data['b'] 
	qty_bids_c_l_OCEANBNB = data['B'] 
	price_asks_c_l_OCEANBNB = data['a'] 
	qty_asks_c_l_OCEANBNB = data['A'] 

	global symbol_g_OCEANBNB 
	global price_bids_g_OCEANBNB 
	global qty_bids_g_OCEANBNB 
	global price_asks_g_OCEANBNB 
	global qty_asks_g_OCEANBNB 

	symbol_g_OCEANBNB = symbol_c_l_OCEANBNB 
	price_bids_g_OCEANBNB = Decimal(price_bids_c_l_OCEANBNB) 
	qty_bids_g_OCEANBNB = Decimal(qty_bids_c_l_OCEANBNB) 
	price_asks_g_OCEANBNB = Decimal(price_asks_c_l_OCEANBNB) 
	qty_asks_g_OCEANBNB = Decimal(qty_asks_c_l_OCEANBNB) 


def loop_OCEANBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/oceanbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OCEANBNB) 
	ws.run_forever() 


Thread(target=loop_OCEANBNB).start() 
symbol_g_DOTBNB = 'DOTBNB' 
price_bids_g_DOTBNB = Decimal('0.0') 
qty_bids_g_DOTBNB = Decimal('0.0') 
price_asks_g_DOTBNB = Decimal('0.0') 
qty_asks_g_DOTBNB = Decimal('0.0') 
stepSize_g_DOTBNB = Decimal('0.01') 


def on_message_DOTBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOTBNB = 'DOTBNB' 
	price_bids_c_l_DOTBNB = data['b'] 
	qty_bids_c_l_DOTBNB = data['B'] 
	price_asks_c_l_DOTBNB = data['a'] 
	qty_asks_c_l_DOTBNB = data['A'] 

	global symbol_g_DOTBNB 
	global price_bids_g_DOTBNB 
	global qty_bids_g_DOTBNB 
	global price_asks_g_DOTBNB 
	global qty_asks_g_DOTBNB 

	symbol_g_DOTBNB = symbol_c_l_DOTBNB 
	price_bids_g_DOTBNB = Decimal(price_bids_c_l_DOTBNB) 
	qty_bids_g_DOTBNB = Decimal(qty_bids_c_l_DOTBNB) 
	price_asks_g_DOTBNB = Decimal(price_asks_c_l_DOTBNB) 
	qty_asks_g_DOTBNB = Decimal(qty_asks_c_l_DOTBNB) 


def loop_DOTBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dotbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOTBNB) 
	ws.run_forever() 


Thread(target=loop_DOTBNB).start() 
symbol_g_RSRBNB = 'RSRBNB' 
price_bids_g_RSRBNB = Decimal('0.0') 
qty_bids_g_RSRBNB = Decimal('0.0') 
price_asks_g_RSRBNB = Decimal('0.0') 
qty_asks_g_RSRBNB = Decimal('0.0') 
stepSize_g_RSRBNB = Decimal('1.0') 


def on_message_RSRBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RSRBNB = 'RSRBNB' 
	price_bids_c_l_RSRBNB = data['b'] 
	qty_bids_c_l_RSRBNB = data['B'] 
	price_asks_c_l_RSRBNB = data['a'] 
	qty_asks_c_l_RSRBNB = data['A'] 

	global symbol_g_RSRBNB 
	global price_bids_g_RSRBNB 
	global qty_bids_g_RSRBNB 
	global price_asks_g_RSRBNB 
	global qty_asks_g_RSRBNB 

	symbol_g_RSRBNB = symbol_c_l_RSRBNB 
	price_bids_g_RSRBNB = Decimal(price_bids_c_l_RSRBNB) 
	qty_bids_g_RSRBNB = Decimal(qty_bids_c_l_RSRBNB) 
	price_asks_g_RSRBNB = Decimal(price_asks_c_l_RSRBNB) 
	qty_asks_g_RSRBNB = Decimal(qty_asks_c_l_RSRBNB) 


def loop_RSRBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rsrbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RSRBNB) 
	ws.run_forever() 


Thread(target=loop_RSRBNB).start() 
symbol_g_PAXGBNB = 'PAXGBNB' 
price_bids_g_PAXGBNB = Decimal('0.0') 
qty_bids_g_PAXGBNB = Decimal('0.0') 
price_asks_g_PAXGBNB = Decimal('0.0') 
qty_asks_g_PAXGBNB = Decimal('0.0') 
stepSize_g_PAXGBNB = Decimal('0.0001') 


def on_message_PAXGBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PAXGBNB = 'PAXGBNB' 
	price_bids_c_l_PAXGBNB = data['b'] 
	qty_bids_c_l_PAXGBNB = data['B'] 
	price_asks_c_l_PAXGBNB = data['a'] 
	qty_asks_c_l_PAXGBNB = data['A'] 

	global symbol_g_PAXGBNB 
	global price_bids_g_PAXGBNB 
	global qty_bids_g_PAXGBNB 
	global price_asks_g_PAXGBNB 
	global qty_asks_g_PAXGBNB 

	symbol_g_PAXGBNB = symbol_c_l_PAXGBNB 
	price_bids_g_PAXGBNB = Decimal(price_bids_c_l_PAXGBNB) 
	qty_bids_g_PAXGBNB = Decimal(qty_bids_c_l_PAXGBNB) 
	price_asks_g_PAXGBNB = Decimal(price_asks_c_l_PAXGBNB) 
	qty_asks_g_PAXGBNB = Decimal(qty_asks_c_l_PAXGBNB) 


def loop_PAXGBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/paxgbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PAXGBNB) 
	ws.run_forever() 


Thread(target=loop_PAXGBNB).start() 
symbol_g_SUSHIBNB = 'SUSHIBNB' 
price_bids_g_SUSHIBNB = Decimal('0.0') 
qty_bids_g_SUSHIBNB = Decimal('0.0') 
price_asks_g_SUSHIBNB = Decimal('0.0') 
qty_asks_g_SUSHIBNB = Decimal('0.0') 
stepSize_g_SUSHIBNB = Decimal('0.1') 


def on_message_SUSHIBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SUSHIBNB = 'SUSHIBNB' 
	price_bids_c_l_SUSHIBNB = data['b'] 
	qty_bids_c_l_SUSHIBNB = data['B'] 
	price_asks_c_l_SUSHIBNB = data['a'] 
	qty_asks_c_l_SUSHIBNB = data['A'] 

	global symbol_g_SUSHIBNB 
	global price_bids_g_SUSHIBNB 
	global qty_bids_g_SUSHIBNB 
	global price_asks_g_SUSHIBNB 
	global qty_asks_g_SUSHIBNB 

	symbol_g_SUSHIBNB = symbol_c_l_SUSHIBNB 
	price_bids_g_SUSHIBNB = Decimal(price_bids_c_l_SUSHIBNB) 
	qty_bids_g_SUSHIBNB = Decimal(qty_bids_c_l_SUSHIBNB) 
	price_asks_g_SUSHIBNB = Decimal(price_asks_c_l_SUSHIBNB) 
	qty_asks_g_SUSHIBNB = Decimal(qty_asks_c_l_SUSHIBNB) 


def loop_SUSHIBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sushibnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SUSHIBNB) 
	ws.run_forever() 


Thread(target=loop_SUSHIBNB).start() 
symbol_g_EGLDBNB = 'EGLDBNB' 
price_bids_g_EGLDBNB = Decimal('0.0') 
qty_bids_g_EGLDBNB = Decimal('0.0') 
price_asks_g_EGLDBNB = Decimal('0.0') 
qty_asks_g_EGLDBNB = Decimal('0.0') 
stepSize_g_EGLDBNB = Decimal('0.01') 


def on_message_EGLDBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EGLDBNB = 'EGLDBNB' 
	price_bids_c_l_EGLDBNB = data['b'] 
	qty_bids_c_l_EGLDBNB = data['B'] 
	price_asks_c_l_EGLDBNB = data['a'] 
	qty_asks_c_l_EGLDBNB = data['A'] 

	global symbol_g_EGLDBNB 
	global price_bids_g_EGLDBNB 
	global qty_bids_g_EGLDBNB 
	global price_asks_g_EGLDBNB 
	global qty_asks_g_EGLDBNB 

	symbol_g_EGLDBNB = symbol_c_l_EGLDBNB 
	price_bids_g_EGLDBNB = Decimal(price_bids_c_l_EGLDBNB) 
	qty_bids_g_EGLDBNB = Decimal(qty_bids_c_l_EGLDBNB) 
	price_asks_g_EGLDBNB = Decimal(price_asks_c_l_EGLDBNB) 
	qty_asks_g_EGLDBNB = Decimal(qty_asks_c_l_EGLDBNB) 


def loop_EGLDBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/egldbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EGLDBNB) 
	ws.run_forever() 


Thread(target=loop_EGLDBNB).start() 
symbol_g_BELBNB = 'BELBNB' 
price_bids_g_BELBNB = Decimal('0.0') 
qty_bids_g_BELBNB = Decimal('0.0') 
price_asks_g_BELBNB = Decimal('0.0') 
qty_asks_g_BELBNB = Decimal('0.0') 
stepSize_g_BELBNB = Decimal('0.1') 


def on_message_BELBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BELBNB = 'BELBNB' 
	price_bids_c_l_BELBNB = data['b'] 
	qty_bids_c_l_BELBNB = data['B'] 
	price_asks_c_l_BELBNB = data['a'] 
	qty_asks_c_l_BELBNB = data['A'] 

	global symbol_g_BELBNB 
	global price_bids_g_BELBNB 
	global qty_bids_g_BELBNB 
	global price_asks_g_BELBNB 
	global qty_asks_g_BELBNB 

	symbol_g_BELBNB = symbol_c_l_BELBNB 
	price_bids_g_BELBNB = Decimal(price_bids_c_l_BELBNB) 
	qty_bids_g_BELBNB = Decimal(qty_bids_c_l_BELBNB) 
	price_asks_g_BELBNB = Decimal(price_asks_c_l_BELBNB) 
	qty_asks_g_BELBNB = Decimal(qty_asks_c_l_BELBNB) 


def loop_BELBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/belbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BELBNB) 
	ws.run_forever() 


Thread(target=loop_BELBNB).start() 
symbol_g_UNIBNB = 'UNIBNB' 
price_bids_g_UNIBNB = Decimal('0.0') 
qty_bids_g_UNIBNB = Decimal('0.0') 
price_asks_g_UNIBNB = Decimal('0.0') 
qty_asks_g_UNIBNB = Decimal('0.0') 
stepSize_g_UNIBNB = Decimal('0.01') 


def on_message_UNIBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UNIBNB = 'UNIBNB' 
	price_bids_c_l_UNIBNB = data['b'] 
	qty_bids_c_l_UNIBNB = data['B'] 
	price_asks_c_l_UNIBNB = data['a'] 
	qty_asks_c_l_UNIBNB = data['A'] 

	global symbol_g_UNIBNB 
	global price_bids_g_UNIBNB 
	global qty_bids_g_UNIBNB 
	global price_asks_g_UNIBNB 
	global qty_asks_g_UNIBNB 

	symbol_g_UNIBNB = symbol_c_l_UNIBNB 
	price_bids_g_UNIBNB = Decimal(price_bids_c_l_UNIBNB) 
	qty_bids_g_UNIBNB = Decimal(qty_bids_c_l_UNIBNB) 
	price_asks_g_UNIBNB = Decimal(price_asks_c_l_UNIBNB) 
	qty_asks_g_UNIBNB = Decimal(qty_asks_c_l_UNIBNB) 


def loop_UNIBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/unibnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UNIBNB) 
	ws.run_forever() 


Thread(target=loop_UNIBNB).start() 
symbol_g_AVAXBNB = 'AVAXBNB' 
price_bids_g_AVAXBNB = Decimal('0.0') 
qty_bids_g_AVAXBNB = Decimal('0.0') 
price_asks_g_AVAXBNB = Decimal('0.0') 
qty_asks_g_AVAXBNB = Decimal('0.0') 
stepSize_g_AVAXBNB = Decimal('0.01') 


def on_message_AVAXBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AVAXBNB = 'AVAXBNB' 
	price_bids_c_l_AVAXBNB = data['b'] 
	qty_bids_c_l_AVAXBNB = data['B'] 
	price_asks_c_l_AVAXBNB = data['a'] 
	qty_asks_c_l_AVAXBNB = data['A'] 

	global symbol_g_AVAXBNB 
	global price_bids_g_AVAXBNB 
	global qty_bids_g_AVAXBNB 
	global price_asks_g_AVAXBNB 
	global qty_asks_g_AVAXBNB 

	symbol_g_AVAXBNB = symbol_c_l_AVAXBNB 
	price_bids_g_AVAXBNB = Decimal(price_bids_c_l_AVAXBNB) 
	qty_bids_g_AVAXBNB = Decimal(qty_bids_c_l_AVAXBNB) 
	price_asks_g_AVAXBNB = Decimal(price_asks_c_l_AVAXBNB) 
	qty_asks_g_AVAXBNB = Decimal(qty_asks_c_l_AVAXBNB) 


def loop_AVAXBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/avaxbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AVAXBNB) 
	ws.run_forever() 


Thread(target=loop_AVAXBNB).start() 
symbol_g_BAKEBNB = 'BAKEBNB' 
price_bids_g_BAKEBNB = Decimal('0.0') 
qty_bids_g_BAKEBNB = Decimal('0.0') 
price_asks_g_BAKEBNB = Decimal('0.0') 
qty_asks_g_BAKEBNB = Decimal('0.0') 
stepSize_g_BAKEBNB = Decimal('0.1') 


def on_message_BAKEBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BAKEBNB = 'BAKEBNB' 
	price_bids_c_l_BAKEBNB = data['b'] 
	qty_bids_c_l_BAKEBNB = data['B'] 
	price_asks_c_l_BAKEBNB = data['a'] 
	qty_asks_c_l_BAKEBNB = data['A'] 

	global symbol_g_BAKEBNB 
	global price_bids_g_BAKEBNB 
	global qty_bids_g_BAKEBNB 
	global price_asks_g_BAKEBNB 
	global qty_asks_g_BAKEBNB 

	symbol_g_BAKEBNB = symbol_c_l_BAKEBNB 
	price_bids_g_BAKEBNB = Decimal(price_bids_c_l_BAKEBNB) 
	qty_bids_g_BAKEBNB = Decimal(qty_bids_c_l_BAKEBNB) 
	price_asks_g_BAKEBNB = Decimal(price_asks_c_l_BAKEBNB) 
	qty_asks_g_BAKEBNB = Decimal(qty_asks_c_l_BAKEBNB) 


def loop_BAKEBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bakebnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BAKEBNB) 
	ws.run_forever() 


Thread(target=loop_BAKEBNB).start() 
symbol_g_BURGERBNB = 'BURGERBNB' 
price_bids_g_BURGERBNB = Decimal('0.0') 
qty_bids_g_BURGERBNB = Decimal('0.0') 
price_asks_g_BURGERBNB = Decimal('0.0') 
qty_asks_g_BURGERBNB = Decimal('0.0') 
stepSize_g_BURGERBNB = Decimal('0.1') 


def on_message_BURGERBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BURGERBNB = 'BURGERBNB' 
	price_bids_c_l_BURGERBNB = data['b'] 
	qty_bids_c_l_BURGERBNB = data['B'] 
	price_asks_c_l_BURGERBNB = data['a'] 
	qty_asks_c_l_BURGERBNB = data['A'] 

	global symbol_g_BURGERBNB 
	global price_bids_g_BURGERBNB 
	global qty_bids_g_BURGERBNB 
	global price_asks_g_BURGERBNB 
	global qty_asks_g_BURGERBNB 

	symbol_g_BURGERBNB = symbol_c_l_BURGERBNB 
	price_bids_g_BURGERBNB = Decimal(price_bids_c_l_BURGERBNB) 
	qty_bids_g_BURGERBNB = Decimal(qty_bids_c_l_BURGERBNB) 
	price_asks_g_BURGERBNB = Decimal(price_asks_c_l_BURGERBNB) 
	qty_asks_g_BURGERBNB = Decimal(qty_asks_c_l_BURGERBNB) 


def loop_BURGERBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/burgerbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BURGERBNB) 
	ws.run_forever() 


Thread(target=loop_BURGERBNB).start() 
symbol_g_CAKEBNB = 'CAKEBNB' 
price_bids_g_CAKEBNB = Decimal('0.0') 
qty_bids_g_CAKEBNB = Decimal('0.0') 
price_asks_g_CAKEBNB = Decimal('0.0') 
qty_asks_g_CAKEBNB = Decimal('0.0') 
stepSize_g_CAKEBNB = Decimal('0.01') 


def on_message_CAKEBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CAKEBNB = 'CAKEBNB' 
	price_bids_c_l_CAKEBNB = data['b'] 
	qty_bids_c_l_CAKEBNB = data['B'] 
	price_asks_c_l_CAKEBNB = data['a'] 
	qty_asks_c_l_CAKEBNB = data['A'] 

	global symbol_g_CAKEBNB 
	global price_bids_g_CAKEBNB 
	global qty_bids_g_CAKEBNB 
	global price_asks_g_CAKEBNB 
	global qty_asks_g_CAKEBNB 

	symbol_g_CAKEBNB = symbol_c_l_CAKEBNB 
	price_bids_g_CAKEBNB = Decimal(price_bids_c_l_CAKEBNB) 
	qty_bids_g_CAKEBNB = Decimal(qty_bids_c_l_CAKEBNB) 
	price_asks_g_CAKEBNB = Decimal(price_asks_c_l_CAKEBNB) 
	qty_asks_g_CAKEBNB = Decimal(qty_asks_c_l_CAKEBNB) 


def loop_CAKEBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cakebnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CAKEBNB) 
	ws.run_forever() 


Thread(target=loop_CAKEBNB).start() 
symbol_g_XVSBNB = 'XVSBNB' 
price_bids_g_XVSBNB = Decimal('0.0') 
qty_bids_g_XVSBNB = Decimal('0.0') 
price_asks_g_XVSBNB = Decimal('0.0') 
qty_asks_g_XVSBNB = Decimal('0.0') 
stepSize_g_XVSBNB = Decimal('0.01') 


def on_message_XVSBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XVSBNB = 'XVSBNB' 
	price_bids_c_l_XVSBNB = data['b'] 
	qty_bids_c_l_XVSBNB = data['B'] 
	price_asks_c_l_XVSBNB = data['a'] 
	qty_asks_c_l_XVSBNB = data['A'] 

	global symbol_g_XVSBNB 
	global price_bids_g_XVSBNB 
	global qty_bids_g_XVSBNB 
	global price_asks_g_XVSBNB 
	global qty_asks_g_XVSBNB 

	symbol_g_XVSBNB = symbol_c_l_XVSBNB 
	price_bids_g_XVSBNB = Decimal(price_bids_c_l_XVSBNB) 
	qty_bids_g_XVSBNB = Decimal(qty_bids_c_l_XVSBNB) 
	price_asks_g_XVSBNB = Decimal(price_asks_c_l_XVSBNB) 
	qty_asks_g_XVSBNB = Decimal(qty_asks_c_l_XVSBNB) 


def loop_XVSBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xvsbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XVSBNB) 
	ws.run_forever() 


Thread(target=loop_XVSBNB).start() 
symbol_g_AAVEBNB = 'AAVEBNB' 
price_bids_g_AAVEBNB = Decimal('0.0') 
qty_bids_g_AAVEBNB = Decimal('0.0') 
price_asks_g_AAVEBNB = Decimal('0.0') 
qty_asks_g_AAVEBNB = Decimal('0.0') 
stepSize_g_AAVEBNB = Decimal('0.001') 


def on_message_AAVEBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AAVEBNB = 'AAVEBNB' 
	price_bids_c_l_AAVEBNB = data['b'] 
	qty_bids_c_l_AAVEBNB = data['B'] 
	price_asks_c_l_AAVEBNB = data['a'] 
	qty_asks_c_l_AAVEBNB = data['A'] 

	global symbol_g_AAVEBNB 
	global price_bids_g_AAVEBNB 
	global qty_bids_g_AAVEBNB 
	global price_asks_g_AAVEBNB 
	global qty_asks_g_AAVEBNB 

	symbol_g_AAVEBNB = symbol_c_l_AAVEBNB 
	price_bids_g_AAVEBNB = Decimal(price_bids_c_l_AAVEBNB) 
	qty_bids_g_AAVEBNB = Decimal(qty_bids_c_l_AAVEBNB) 
	price_asks_g_AAVEBNB = Decimal(price_asks_c_l_AAVEBNB) 
	qty_asks_g_AAVEBNB = Decimal(qty_asks_c_l_AAVEBNB) 


def loop_AAVEBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/aavebnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AAVEBNB) 
	ws.run_forever() 


Thread(target=loop_AAVEBNB).start() 
symbol_g_NEARBNB = 'NEARBNB' 
price_bids_g_NEARBNB = Decimal('0.0') 
qty_bids_g_NEARBNB = Decimal('0.0') 
price_asks_g_NEARBNB = Decimal('0.0') 
qty_asks_g_NEARBNB = Decimal('0.0') 
stepSize_g_NEARBNB = Decimal('0.1') 


def on_message_NEARBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEARBNB = 'NEARBNB' 
	price_bids_c_l_NEARBNB = data['b'] 
	qty_bids_c_l_NEARBNB = data['B'] 
	price_asks_c_l_NEARBNB = data['a'] 
	qty_asks_c_l_NEARBNB = data['A'] 

	global symbol_g_NEARBNB 
	global price_bids_g_NEARBNB 
	global qty_bids_g_NEARBNB 
	global price_asks_g_NEARBNB 
	global qty_asks_g_NEARBNB 

	symbol_g_NEARBNB = symbol_c_l_NEARBNB 
	price_bids_g_NEARBNB = Decimal(price_bids_c_l_NEARBNB) 
	qty_bids_g_NEARBNB = Decimal(qty_bids_c_l_NEARBNB) 
	price_asks_g_NEARBNB = Decimal(price_asks_c_l_NEARBNB) 
	qty_asks_g_NEARBNB = Decimal(qty_asks_c_l_NEARBNB) 


def loop_NEARBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nearbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEARBNB) 
	ws.run_forever() 


Thread(target=loop_NEARBNB).start() 
symbol_g_FILBNB = 'FILBNB' 
price_bids_g_FILBNB = Decimal('0.0') 
qty_bids_g_FILBNB = Decimal('0.0') 
price_asks_g_FILBNB = Decimal('0.0') 
qty_asks_g_FILBNB = Decimal('0.0') 
stepSize_g_FILBNB = Decimal('0.01') 


def on_message_FILBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FILBNB = 'FILBNB' 
	price_bids_c_l_FILBNB = data['b'] 
	qty_bids_c_l_FILBNB = data['B'] 
	price_asks_c_l_FILBNB = data['a'] 
	qty_asks_c_l_FILBNB = data['A'] 

	global symbol_g_FILBNB 
	global price_bids_g_FILBNB 
	global qty_bids_g_FILBNB 
	global price_asks_g_FILBNB 
	global qty_asks_g_FILBNB 

	symbol_g_FILBNB = symbol_c_l_FILBNB 
	price_bids_g_FILBNB = Decimal(price_bids_c_l_FILBNB) 
	qty_bids_g_FILBNB = Decimal(qty_bids_c_l_FILBNB) 
	price_asks_g_FILBNB = Decimal(price_asks_c_l_FILBNB) 
	qty_asks_g_FILBNB = Decimal(qty_asks_c_l_FILBNB) 


def loop_FILBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/filbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FILBNB) 
	ws.run_forever() 


Thread(target=loop_FILBNB).start() 
symbol_g_INJBNB = 'INJBNB' 
price_bids_g_INJBNB = Decimal('0.0') 
qty_bids_g_INJBNB = Decimal('0.0') 
price_asks_g_INJBNB = Decimal('0.0') 
qty_asks_g_INJBNB = Decimal('0.0') 
stepSize_g_INJBNB = Decimal('0.1') 


def on_message_INJBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_INJBNB = 'INJBNB' 
	price_bids_c_l_INJBNB = data['b'] 
	qty_bids_c_l_INJBNB = data['B'] 
	price_asks_c_l_INJBNB = data['a'] 
	qty_asks_c_l_INJBNB = data['A'] 

	global symbol_g_INJBNB 
	global price_bids_g_INJBNB 
	global qty_bids_g_INJBNB 
	global price_asks_g_INJBNB 
	global qty_asks_g_INJBNB 

	symbol_g_INJBNB = symbol_c_l_INJBNB 
	price_bids_g_INJBNB = Decimal(price_bids_c_l_INJBNB) 
	qty_bids_g_INJBNB = Decimal(qty_bids_c_l_INJBNB) 
	price_asks_g_INJBNB = Decimal(price_asks_c_l_INJBNB) 
	qty_asks_g_INJBNB = Decimal(qty_asks_c_l_INJBNB) 


def loop_INJBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/injbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_INJBNB) 
	ws.run_forever() 


Thread(target=loop_INJBNB).start() 
symbol_g_CTKBNB = 'CTKBNB' 
price_bids_g_CTKBNB = Decimal('0.0') 
qty_bids_g_CTKBNB = Decimal('0.0') 
price_asks_g_CTKBNB = Decimal('0.0') 
qty_asks_g_CTKBNB = Decimal('0.0') 
stepSize_g_CTKBNB = Decimal('0.1') 


def on_message_CTKBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CTKBNB = 'CTKBNB' 
	price_bids_c_l_CTKBNB = data['b'] 
	qty_bids_c_l_CTKBNB = data['B'] 
	price_asks_c_l_CTKBNB = data['a'] 
	qty_asks_c_l_CTKBNB = data['A'] 

	global symbol_g_CTKBNB 
	global price_bids_g_CTKBNB 
	global qty_bids_g_CTKBNB 
	global price_asks_g_CTKBNB 
	global qty_asks_g_CTKBNB 

	symbol_g_CTKBNB = symbol_c_l_CTKBNB 
	price_bids_g_CTKBNB = Decimal(price_bids_c_l_CTKBNB) 
	qty_bids_g_CTKBNB = Decimal(qty_bids_c_l_CTKBNB) 
	price_asks_g_CTKBNB = Decimal(price_asks_c_l_CTKBNB) 
	qty_asks_g_CTKBNB = Decimal(qty_asks_c_l_CTKBNB) 


def loop_CTKBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ctkbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CTKBNB) 
	ws.run_forever() 


Thread(target=loop_CTKBNB).start() 
symbol_g_KP3RBNB = 'KP3RBNB' 
price_bids_g_KP3RBNB = Decimal('0.0') 
qty_bids_g_KP3RBNB = Decimal('0.0') 
price_asks_g_KP3RBNB = Decimal('0.0') 
qty_asks_g_KP3RBNB = Decimal('0.0') 
stepSize_g_KP3RBNB = Decimal('0.01') 


def on_message_KP3RBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KP3RBNB = 'KP3RBNB' 
	price_bids_c_l_KP3RBNB = data['b'] 
	qty_bids_c_l_KP3RBNB = data['B'] 
	price_asks_c_l_KP3RBNB = data['a'] 
	qty_asks_c_l_KP3RBNB = data['A'] 

	global symbol_g_KP3RBNB 
	global price_bids_g_KP3RBNB 
	global qty_bids_g_KP3RBNB 
	global price_asks_g_KP3RBNB 
	global qty_asks_g_KP3RBNB 

	symbol_g_KP3RBNB = symbol_c_l_KP3RBNB 
	price_bids_g_KP3RBNB = Decimal(price_bids_c_l_KP3RBNB) 
	qty_bids_g_KP3RBNB = Decimal(qty_bids_c_l_KP3RBNB) 
	price_asks_g_KP3RBNB = Decimal(price_asks_c_l_KP3RBNB) 
	qty_asks_g_KP3RBNB = Decimal(qty_asks_c_l_KP3RBNB) 


def loop_KP3RBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kp3rbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KP3RBNB) 
	ws.run_forever() 


Thread(target=loop_KP3RBNB).start() 
symbol_g_AXSBNB = 'AXSBNB' 
price_bids_g_AXSBNB = Decimal('0.0') 
qty_bids_g_AXSBNB = Decimal('0.0') 
price_asks_g_AXSBNB = Decimal('0.0') 
qty_asks_g_AXSBNB = Decimal('0.0') 
stepSize_g_AXSBNB = Decimal('0.01') 


def on_message_AXSBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AXSBNB = 'AXSBNB' 
	price_bids_c_l_AXSBNB = data['b'] 
	qty_bids_c_l_AXSBNB = data['B'] 
	price_asks_c_l_AXSBNB = data['a'] 
	qty_asks_c_l_AXSBNB = data['A'] 

	global symbol_g_AXSBNB 
	global price_bids_g_AXSBNB 
	global qty_bids_g_AXSBNB 
	global price_asks_g_AXSBNB 
	global qty_asks_g_AXSBNB 

	symbol_g_AXSBNB = symbol_c_l_AXSBNB 
	price_bids_g_AXSBNB = Decimal(price_bids_c_l_AXSBNB) 
	qty_bids_g_AXSBNB = Decimal(qty_bids_c_l_AXSBNB) 
	price_asks_g_AXSBNB = Decimal(price_asks_c_l_AXSBNB) 
	qty_asks_g_AXSBNB = Decimal(qty_asks_c_l_AXSBNB) 


def loop_AXSBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/axsbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AXSBNB) 
	ws.run_forever() 


Thread(target=loop_AXSBNB).start() 
symbol_g_HARDBNB = 'HARDBNB' 
price_bids_g_HARDBNB = Decimal('0.0') 
qty_bids_g_HARDBNB = Decimal('0.0') 
price_asks_g_HARDBNB = Decimal('0.0') 
qty_asks_g_HARDBNB = Decimal('0.0') 
stepSize_g_HARDBNB = Decimal('1.0') 


def on_message_HARDBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HARDBNB = 'HARDBNB' 
	price_bids_c_l_HARDBNB = data['b'] 
	qty_bids_c_l_HARDBNB = data['B'] 
	price_asks_c_l_HARDBNB = data['a'] 
	qty_asks_c_l_HARDBNB = data['A'] 

	global symbol_g_HARDBNB 
	global price_bids_g_HARDBNB 
	global qty_bids_g_HARDBNB 
	global price_asks_g_HARDBNB 
	global qty_asks_g_HARDBNB 

	symbol_g_HARDBNB = symbol_c_l_HARDBNB 
	price_bids_g_HARDBNB = Decimal(price_bids_c_l_HARDBNB) 
	qty_bids_g_HARDBNB = Decimal(qty_bids_c_l_HARDBNB) 
	price_asks_g_HARDBNB = Decimal(price_asks_c_l_HARDBNB) 
	qty_asks_g_HARDBNB = Decimal(qty_asks_c_l_HARDBNB) 


def loop_HARDBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hardbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HARDBNB) 
	ws.run_forever() 


Thread(target=loop_HARDBNB).start() 
symbol_g_ICPBNB = 'ICPBNB' 
price_bids_g_ICPBNB = Decimal('0.0') 
qty_bids_g_ICPBNB = Decimal('0.0') 
price_asks_g_ICPBNB = Decimal('0.0') 
qty_asks_g_ICPBNB = Decimal('0.0') 
stepSize_g_ICPBNB = Decimal('0.01') 


def on_message_ICPBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ICPBNB = 'ICPBNB' 
	price_bids_c_l_ICPBNB = data['b'] 
	qty_bids_c_l_ICPBNB = data['B'] 
	price_asks_c_l_ICPBNB = data['a'] 
	qty_asks_c_l_ICPBNB = data['A'] 

	global symbol_g_ICPBNB 
	global price_bids_g_ICPBNB 
	global qty_bids_g_ICPBNB 
	global price_asks_g_ICPBNB 
	global qty_asks_g_ICPBNB 

	symbol_g_ICPBNB = symbol_c_l_ICPBNB 
	price_bids_g_ICPBNB = Decimal(price_bids_c_l_ICPBNB) 
	qty_bids_g_ICPBNB = Decimal(qty_bids_c_l_ICPBNB) 
	price_asks_g_ICPBNB = Decimal(price_asks_c_l_ICPBNB) 
	qty_asks_g_ICPBNB = Decimal(qty_asks_c_l_ICPBNB) 


def loop_ICPBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/icpbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ICPBNB) 
	ws.run_forever() 


Thread(target=loop_ICPBNB).start() 
symbol_g_ARBNB = 'ARBNB' 
price_bids_g_ARBNB = Decimal('0.0') 
qty_bids_g_ARBNB = Decimal('0.0') 
price_asks_g_ARBNB = Decimal('0.0') 
qty_asks_g_ARBNB = Decimal('0.0') 
stepSize_g_ARBNB = Decimal('0.01') 


def on_message_ARBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ARBNB = 'ARBNB' 
	price_bids_c_l_ARBNB = data['b'] 
	qty_bids_c_l_ARBNB = data['B'] 
	price_asks_c_l_ARBNB = data['a'] 
	qty_asks_c_l_ARBNB = data['A'] 

	global symbol_g_ARBNB 
	global price_bids_g_ARBNB 
	global qty_bids_g_ARBNB 
	global price_asks_g_ARBNB 
	global qty_asks_g_ARBNB 

	symbol_g_ARBNB = symbol_c_l_ARBNB 
	price_bids_g_ARBNB = Decimal(price_bids_c_l_ARBNB) 
	qty_bids_g_ARBNB = Decimal(qty_bids_c_l_ARBNB) 
	price_asks_g_ARBNB = Decimal(price_asks_c_l_ARBNB) 
	qty_asks_g_ARBNB = Decimal(qty_asks_c_l_ARBNB) 


def loop_ARBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/arbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ARBNB) 
	ws.run_forever() 


Thread(target=loop_ARBNB).start() 
symbol_g_POLSBNB = 'POLSBNB' 
price_bids_g_POLSBNB = Decimal('0.0') 
qty_bids_g_POLSBNB = Decimal('0.0') 
price_asks_g_POLSBNB = Decimal('0.0') 
qty_asks_g_POLSBNB = Decimal('0.0') 
stepSize_g_POLSBNB = Decimal('0.1') 


def on_message_POLSBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_POLSBNB = 'POLSBNB' 
	price_bids_c_l_POLSBNB = data['b'] 
	qty_bids_c_l_POLSBNB = data['B'] 
	price_asks_c_l_POLSBNB = data['a'] 
	qty_asks_c_l_POLSBNB = data['A'] 

	global symbol_g_POLSBNB 
	global price_bids_g_POLSBNB 
	global qty_bids_g_POLSBNB 
	global price_asks_g_POLSBNB 
	global qty_asks_g_POLSBNB 

	symbol_g_POLSBNB = symbol_c_l_POLSBNB 
	price_bids_g_POLSBNB = Decimal(price_bids_c_l_POLSBNB) 
	qty_bids_g_POLSBNB = Decimal(qty_bids_c_l_POLSBNB) 
	price_asks_g_POLSBNB = Decimal(price_asks_c_l_POLSBNB) 
	qty_asks_g_POLSBNB = Decimal(qty_asks_c_l_POLSBNB) 


def loop_POLSBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/polsbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_POLSBNB) 
	ws.run_forever() 


Thread(target=loop_POLSBNB).start() 
symbol_g_MASKBNB = 'MASKBNB' 
price_bids_g_MASKBNB = Decimal('0.0') 
qty_bids_g_MASKBNB = Decimal('0.0') 
price_asks_g_MASKBNB = Decimal('0.0') 
qty_asks_g_MASKBNB = Decimal('0.0') 
stepSize_g_MASKBNB = Decimal('0.1') 


def on_message_MASKBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MASKBNB = 'MASKBNB' 
	price_bids_c_l_MASKBNB = data['b'] 
	qty_bids_c_l_MASKBNB = data['B'] 
	price_asks_c_l_MASKBNB = data['a'] 
	qty_asks_c_l_MASKBNB = data['A'] 

	global symbol_g_MASKBNB 
	global price_bids_g_MASKBNB 
	global qty_bids_g_MASKBNB 
	global price_asks_g_MASKBNB 
	global qty_asks_g_MASKBNB 

	symbol_g_MASKBNB = symbol_c_l_MASKBNB 
	price_bids_g_MASKBNB = Decimal(price_bids_c_l_MASKBNB) 
	qty_bids_g_MASKBNB = Decimal(qty_bids_c_l_MASKBNB) 
	price_asks_g_MASKBNB = Decimal(price_asks_c_l_MASKBNB) 
	qty_asks_g_MASKBNB = Decimal(qty_asks_c_l_MASKBNB) 


def loop_MASKBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maskbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MASKBNB) 
	ws.run_forever() 


Thread(target=loop_MASKBNB).start() 
symbol_g_LPTBNB = 'LPTBNB' 
price_bids_g_LPTBNB = Decimal('0.0') 
qty_bids_g_LPTBNB = Decimal('0.0') 
price_asks_g_LPTBNB = Decimal('0.0') 
qty_asks_g_LPTBNB = Decimal('0.0') 
stepSize_g_LPTBNB = Decimal('0.01') 


def on_message_LPTBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LPTBNB = 'LPTBNB' 
	price_bids_c_l_LPTBNB = data['b'] 
	qty_bids_c_l_LPTBNB = data['B'] 
	price_asks_c_l_LPTBNB = data['a'] 
	qty_asks_c_l_LPTBNB = data['A'] 

	global symbol_g_LPTBNB 
	global price_bids_g_LPTBNB 
	global qty_bids_g_LPTBNB 
	global price_asks_g_LPTBNB 
	global qty_asks_g_LPTBNB 

	symbol_g_LPTBNB = symbol_c_l_LPTBNB 
	price_bids_g_LPTBNB = Decimal(price_bids_c_l_LPTBNB) 
	qty_bids_g_LPTBNB = Decimal(qty_bids_c_l_LPTBNB) 
	price_asks_g_LPTBNB = Decimal(price_asks_c_l_LPTBNB) 
	qty_asks_g_LPTBNB = Decimal(qty_asks_c_l_LPTBNB) 


def loop_LPTBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lptbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LPTBNB) 
	ws.run_forever() 


Thread(target=loop_LPTBNB).start() 
symbol_g_ERNBNB = 'ERNBNB' 
price_bids_g_ERNBNB = Decimal('0.0') 
qty_bids_g_ERNBNB = Decimal('0.0') 
price_asks_g_ERNBNB = Decimal('0.0') 
qty_asks_g_ERNBNB = Decimal('0.0') 
stepSize_g_ERNBNB = Decimal('0.1') 


def on_message_ERNBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ERNBNB = 'ERNBNB' 
	price_bids_c_l_ERNBNB = data['b'] 
	qty_bids_c_l_ERNBNB = data['B'] 
	price_asks_c_l_ERNBNB = data['a'] 
	qty_asks_c_l_ERNBNB = data['A'] 

	global symbol_g_ERNBNB 
	global price_bids_g_ERNBNB 
	global qty_bids_g_ERNBNB 
	global price_asks_g_ERNBNB 
	global qty_asks_g_ERNBNB 

	symbol_g_ERNBNB = symbol_c_l_ERNBNB 
	price_bids_g_ERNBNB = Decimal(price_bids_c_l_ERNBNB) 
	qty_bids_g_ERNBNB = Decimal(qty_bids_c_l_ERNBNB) 
	price_asks_g_ERNBNB = Decimal(price_asks_c_l_ERNBNB) 
	qty_asks_g_ERNBNB = Decimal(qty_asks_c_l_ERNBNB) 


def loop_ERNBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ernbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ERNBNB) 
	ws.run_forever() 


Thread(target=loop_ERNBNB).start() 
symbol_g_KLAYBNB = 'KLAYBNB' 
price_bids_g_KLAYBNB = Decimal('0.0') 
qty_bids_g_KLAYBNB = Decimal('0.0') 
price_asks_g_KLAYBNB = Decimal('0.0') 
qty_asks_g_KLAYBNB = Decimal('0.0') 
stepSize_g_KLAYBNB = Decimal('1.0') 


def on_message_KLAYBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KLAYBNB = 'KLAYBNB' 
	price_bids_c_l_KLAYBNB = data['b'] 
	qty_bids_c_l_KLAYBNB = data['B'] 
	price_asks_c_l_KLAYBNB = data['a'] 
	qty_asks_c_l_KLAYBNB = data['A'] 

	global symbol_g_KLAYBNB 
	global price_bids_g_KLAYBNB 
	global qty_bids_g_KLAYBNB 
	global price_asks_g_KLAYBNB 
	global qty_asks_g_KLAYBNB 

	symbol_g_KLAYBNB = symbol_c_l_KLAYBNB 
	price_bids_g_KLAYBNB = Decimal(price_bids_c_l_KLAYBNB) 
	qty_bids_g_KLAYBNB = Decimal(qty_bids_c_l_KLAYBNB) 
	price_asks_g_KLAYBNB = Decimal(price_asks_c_l_KLAYBNB) 
	qty_asks_g_KLAYBNB = Decimal(qty_asks_c_l_KLAYBNB) 


def loop_KLAYBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/klaybnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KLAYBNB) 
	ws.run_forever() 


Thread(target=loop_KLAYBNB).start() 
symbol_g_C98BNB = 'C98BNB' 
price_bids_g_C98BNB = Decimal('0.0') 
qty_bids_g_C98BNB = Decimal('0.0') 
price_asks_g_C98BNB = Decimal('0.0') 
qty_asks_g_C98BNB = Decimal('0.0') 
stepSize_g_C98BNB = Decimal('0.1') 


def on_message_C98BNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_C98BNB = 'C98BNB' 
	price_bids_c_l_C98BNB = data['b'] 
	qty_bids_c_l_C98BNB = data['B'] 
	price_asks_c_l_C98BNB = data['a'] 
	qty_asks_c_l_C98BNB = data['A'] 

	global symbol_g_C98BNB 
	global price_bids_g_C98BNB 
	global qty_bids_g_C98BNB 
	global price_asks_g_C98BNB 
	global qty_asks_g_C98BNB 

	symbol_g_C98BNB = symbol_c_l_C98BNB 
	price_bids_g_C98BNB = Decimal(price_bids_c_l_C98BNB) 
	qty_bids_g_C98BNB = Decimal(qty_bids_c_l_C98BNB) 
	price_asks_g_C98BNB = Decimal(price_asks_c_l_C98BNB) 
	qty_asks_g_C98BNB = Decimal(qty_asks_c_l_C98BNB) 


def loop_C98BNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/c98bnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_C98BNB) 
	ws.run_forever() 


Thread(target=loop_C98BNB).start() 
symbol_g_CLVBNB = 'CLVBNB' 
price_bids_g_CLVBNB = Decimal('0.0') 
qty_bids_g_CLVBNB = Decimal('0.0') 
price_asks_g_CLVBNB = Decimal('0.0') 
qty_asks_g_CLVBNB = Decimal('0.0') 
stepSize_g_CLVBNB = Decimal('0.1') 


def on_message_CLVBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CLVBNB = 'CLVBNB' 
	price_bids_c_l_CLVBNB = data['b'] 
	qty_bids_c_l_CLVBNB = data['B'] 
	price_asks_c_l_CLVBNB = data['a'] 
	qty_asks_c_l_CLVBNB = data['A'] 

	global symbol_g_CLVBNB 
	global price_bids_g_CLVBNB 
	global qty_bids_g_CLVBNB 
	global price_asks_g_CLVBNB 
	global qty_asks_g_CLVBNB 

	symbol_g_CLVBNB = symbol_c_l_CLVBNB 
	price_bids_g_CLVBNB = Decimal(price_bids_c_l_CLVBNB) 
	qty_bids_g_CLVBNB = Decimal(qty_bids_c_l_CLVBNB) 
	price_asks_g_CLVBNB = Decimal(price_asks_c_l_CLVBNB) 
	qty_asks_g_CLVBNB = Decimal(qty_asks_c_l_CLVBNB) 


def loop_CLVBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/clvbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CLVBNB) 
	ws.run_forever() 


Thread(target=loop_CLVBNB).start() 
symbol_g_QNTBNB = 'QNTBNB' 
price_bids_g_QNTBNB = Decimal('0.0') 
qty_bids_g_QNTBNB = Decimal('0.0') 
price_asks_g_QNTBNB = Decimal('0.0') 
qty_asks_g_QNTBNB = Decimal('0.0') 
stepSize_g_QNTBNB = Decimal('0.001') 


def on_message_QNTBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QNTBNB = 'QNTBNB' 
	price_bids_c_l_QNTBNB = data['b'] 
	qty_bids_c_l_QNTBNB = data['B'] 
	price_asks_c_l_QNTBNB = data['a'] 
	qty_asks_c_l_QNTBNB = data['A'] 

	global symbol_g_QNTBNB 
	global price_bids_g_QNTBNB 
	global qty_bids_g_QNTBNB 
	global price_asks_g_QNTBNB 
	global qty_asks_g_QNTBNB 

	symbol_g_QNTBNB = symbol_c_l_QNTBNB 
	price_bids_g_QNTBNB = Decimal(price_bids_c_l_QNTBNB) 
	qty_bids_g_QNTBNB = Decimal(qty_bids_c_l_QNTBNB) 
	price_asks_g_QNTBNB = Decimal(price_asks_c_l_QNTBNB) 
	qty_asks_g_QNTBNB = Decimal(qty_asks_c_l_QNTBNB) 


def loop_QNTBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/qntbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QNTBNB) 
	ws.run_forever() 


Thread(target=loop_QNTBNB).start() 
symbol_g_FLOWBNB = 'FLOWBNB' 
price_bids_g_FLOWBNB = Decimal('0.0') 
qty_bids_g_FLOWBNB = Decimal('0.0') 
price_asks_g_FLOWBNB = Decimal('0.0') 
qty_asks_g_FLOWBNB = Decimal('0.0') 
stepSize_g_FLOWBNB = Decimal('0.01') 


def on_message_FLOWBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FLOWBNB = 'FLOWBNB' 
	price_bids_c_l_FLOWBNB = data['b'] 
	qty_bids_c_l_FLOWBNB = data['B'] 
	price_asks_c_l_FLOWBNB = data['a'] 
	qty_asks_c_l_FLOWBNB = data['A'] 

	global symbol_g_FLOWBNB 
	global price_bids_g_FLOWBNB 
	global qty_bids_g_FLOWBNB 
	global price_asks_g_FLOWBNB 
	global qty_asks_g_FLOWBNB 

	symbol_g_FLOWBNB = symbol_c_l_FLOWBNB 
	price_bids_g_FLOWBNB = Decimal(price_bids_c_l_FLOWBNB) 
	qty_bids_g_FLOWBNB = Decimal(qty_bids_c_l_FLOWBNB) 
	price_asks_g_FLOWBNB = Decimal(price_asks_c_l_FLOWBNB) 
	qty_asks_g_FLOWBNB = Decimal(qty_asks_c_l_FLOWBNB) 


def loop_FLOWBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/flowbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FLOWBNB) 
	ws.run_forever() 


Thread(target=loop_FLOWBNB).start() 
symbol_g_MINABNB = 'MINABNB' 
price_bids_g_MINABNB = Decimal('0.0') 
qty_bids_g_MINABNB = Decimal('0.0') 
price_asks_g_MINABNB = Decimal('0.0') 
qty_asks_g_MINABNB = Decimal('0.0') 
stepSize_g_MINABNB = Decimal('0.1') 


def on_message_MINABNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MINABNB = 'MINABNB' 
	price_bids_c_l_MINABNB = data['b'] 
	qty_bids_c_l_MINABNB = data['B'] 
	price_asks_c_l_MINABNB = data['a'] 
	qty_asks_c_l_MINABNB = data['A'] 

	global symbol_g_MINABNB 
	global price_bids_g_MINABNB 
	global qty_bids_g_MINABNB 
	global price_asks_g_MINABNB 
	global qty_asks_g_MINABNB 

	symbol_g_MINABNB = symbol_c_l_MINABNB 
	price_bids_g_MINABNB = Decimal(price_bids_c_l_MINABNB) 
	qty_bids_g_MINABNB = Decimal(qty_bids_c_l_MINABNB) 
	price_asks_g_MINABNB = Decimal(price_asks_c_l_MINABNB) 
	qty_asks_g_MINABNB = Decimal(qty_asks_c_l_MINABNB) 


def loop_MINABNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/minabnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MINABNB) 
	ws.run_forever() 


Thread(target=loop_MINABNB).start() 
symbol_g_RAYBNB = 'RAYBNB' 
price_bids_g_RAYBNB = Decimal('0.0') 
qty_bids_g_RAYBNB = Decimal('0.0') 
price_asks_g_RAYBNB = Decimal('0.0') 
qty_asks_g_RAYBNB = Decimal('0.0') 
stepSize_g_RAYBNB = Decimal('0.1') 


def on_message_RAYBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RAYBNB = 'RAYBNB' 
	price_bids_c_l_RAYBNB = data['b'] 
	qty_bids_c_l_RAYBNB = data['B'] 
	price_asks_c_l_RAYBNB = data['a'] 
	qty_asks_c_l_RAYBNB = data['A'] 

	global symbol_g_RAYBNB 
	global price_bids_g_RAYBNB 
	global qty_bids_g_RAYBNB 
	global price_asks_g_RAYBNB 
	global qty_asks_g_RAYBNB 

	symbol_g_RAYBNB = symbol_c_l_RAYBNB 
	price_bids_g_RAYBNB = Decimal(price_bids_c_l_RAYBNB) 
	qty_bids_g_RAYBNB = Decimal(qty_bids_c_l_RAYBNB) 
	price_asks_g_RAYBNB = Decimal(price_asks_c_l_RAYBNB) 
	qty_asks_g_RAYBNB = Decimal(qty_asks_c_l_RAYBNB) 


def loop_RAYBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/raybnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RAYBNB) 
	ws.run_forever() 


Thread(target=loop_RAYBNB).start() 
symbol_g_MBOXBNB = 'MBOXBNB' 
price_bids_g_MBOXBNB = Decimal('0.0') 
qty_bids_g_MBOXBNB = Decimal('0.0') 
price_asks_g_MBOXBNB = Decimal('0.0') 
qty_asks_g_MBOXBNB = Decimal('0.0') 
stepSize_g_MBOXBNB = Decimal('0.1') 


def on_message_MBOXBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MBOXBNB = 'MBOXBNB' 
	price_bids_c_l_MBOXBNB = data['b'] 
	qty_bids_c_l_MBOXBNB = data['B'] 
	price_asks_c_l_MBOXBNB = data['a'] 
	qty_asks_c_l_MBOXBNB = data['A'] 

	global symbol_g_MBOXBNB 
	global price_bids_g_MBOXBNB 
	global qty_bids_g_MBOXBNB 
	global price_asks_g_MBOXBNB 
	global qty_asks_g_MBOXBNB 

	symbol_g_MBOXBNB = symbol_c_l_MBOXBNB 
	price_bids_g_MBOXBNB = Decimal(price_bids_c_l_MBOXBNB) 
	qty_bids_g_MBOXBNB = Decimal(qty_bids_c_l_MBOXBNB) 
	price_asks_g_MBOXBNB = Decimal(price_asks_c_l_MBOXBNB) 
	qty_asks_g_MBOXBNB = Decimal(qty_asks_c_l_MBOXBNB) 


def loop_MBOXBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mboxbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MBOXBNB) 
	ws.run_forever() 


Thread(target=loop_MBOXBNB).start() 
symbol_g_WAXPBNB = 'WAXPBNB' 
price_bids_g_WAXPBNB = Decimal('0.0') 
qty_bids_g_WAXPBNB = Decimal('0.0') 
price_asks_g_WAXPBNB = Decimal('0.0') 
qty_asks_g_WAXPBNB = Decimal('0.0') 
stepSize_g_WAXPBNB = Decimal('1.0') 


def on_message_WAXPBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WAXPBNB = 'WAXPBNB' 
	price_bids_c_l_WAXPBNB = data['b'] 
	qty_bids_c_l_WAXPBNB = data['B'] 
	price_asks_c_l_WAXPBNB = data['a'] 
	qty_asks_c_l_WAXPBNB = data['A'] 

	global symbol_g_WAXPBNB 
	global price_bids_g_WAXPBNB 
	global qty_bids_g_WAXPBNB 
	global price_asks_g_WAXPBNB 
	global qty_asks_g_WAXPBNB 

	symbol_g_WAXPBNB = symbol_c_l_WAXPBNB 
	price_bids_g_WAXPBNB = Decimal(price_bids_c_l_WAXPBNB) 
	qty_bids_g_WAXPBNB = Decimal(qty_bids_c_l_WAXPBNB) 
	price_asks_g_WAXPBNB = Decimal(price_asks_c_l_WAXPBNB) 
	qty_asks_g_WAXPBNB = Decimal(qty_asks_c_l_WAXPBNB) 


def loop_WAXPBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/waxpbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WAXPBNB) 
	ws.run_forever() 


Thread(target=loop_WAXPBNB).start() 
symbol_g_DYDXBNB = 'DYDXBNB' 
price_bids_g_DYDXBNB = Decimal('0.0') 
qty_bids_g_DYDXBNB = Decimal('0.0') 
price_asks_g_DYDXBNB = Decimal('0.0') 
qty_asks_g_DYDXBNB = Decimal('0.0') 
stepSize_g_DYDXBNB = Decimal('0.01') 


def on_message_DYDXBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DYDXBNB = 'DYDXBNB' 
	price_bids_c_l_DYDXBNB = data['b'] 
	qty_bids_c_l_DYDXBNB = data['B'] 
	price_asks_c_l_DYDXBNB = data['a'] 
	qty_asks_c_l_DYDXBNB = data['A'] 

	global symbol_g_DYDXBNB 
	global price_bids_g_DYDXBNB 
	global qty_bids_g_DYDXBNB 
	global price_asks_g_DYDXBNB 
	global qty_asks_g_DYDXBNB 

	symbol_g_DYDXBNB = symbol_c_l_DYDXBNB 
	price_bids_g_DYDXBNB = Decimal(price_bids_c_l_DYDXBNB) 
	qty_bids_g_DYDXBNB = Decimal(qty_bids_c_l_DYDXBNB) 
	price_asks_g_DYDXBNB = Decimal(price_asks_c_l_DYDXBNB) 
	qty_asks_g_DYDXBNB = Decimal(qty_asks_c_l_DYDXBNB) 


def loop_DYDXBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dydxbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DYDXBNB) 
	ws.run_forever() 


Thread(target=loop_DYDXBNB).start() 
symbol_g_GALABNB = 'GALABNB' 
price_bids_g_GALABNB = Decimal('0.0') 
qty_bids_g_GALABNB = Decimal('0.0') 
price_asks_g_GALABNB = Decimal('0.0') 
qty_asks_g_GALABNB = Decimal('0.0') 
stepSize_g_GALABNB = Decimal('1.0') 


def on_message_GALABNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALABNB = 'GALABNB' 
	price_bids_c_l_GALABNB = data['b'] 
	qty_bids_c_l_GALABNB = data['B'] 
	price_asks_c_l_GALABNB = data['a'] 
	qty_asks_c_l_GALABNB = data['A'] 

	global symbol_g_GALABNB 
	global price_bids_g_GALABNB 
	global qty_bids_g_GALABNB 
	global price_asks_g_GALABNB 
	global qty_asks_g_GALABNB 

	symbol_g_GALABNB = symbol_c_l_GALABNB 
	price_bids_g_GALABNB = Decimal(price_bids_c_l_GALABNB) 
	qty_bids_g_GALABNB = Decimal(qty_bids_c_l_GALABNB) 
	price_asks_g_GALABNB = Decimal(price_asks_c_l_GALABNB) 
	qty_asks_g_GALABNB = Decimal(qty_asks_c_l_GALABNB) 


def loop_GALABNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galabnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALABNB) 
	ws.run_forever() 


Thread(target=loop_GALABNB).start() 
symbol_g_ILVBNB = 'ILVBNB' 
price_bids_g_ILVBNB = Decimal('0.0') 
qty_bids_g_ILVBNB = Decimal('0.0') 
price_asks_g_ILVBNB = Decimal('0.0') 
qty_asks_g_ILVBNB = Decimal('0.0') 
stepSize_g_ILVBNB = Decimal('0.001') 


def on_message_ILVBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ILVBNB = 'ILVBNB' 
	price_bids_c_l_ILVBNB = data['b'] 
	qty_bids_c_l_ILVBNB = data['B'] 
	price_asks_c_l_ILVBNB = data['a'] 
	qty_asks_c_l_ILVBNB = data['A'] 

	global symbol_g_ILVBNB 
	global price_bids_g_ILVBNB 
	global qty_bids_g_ILVBNB 
	global price_asks_g_ILVBNB 
	global qty_asks_g_ILVBNB 

	symbol_g_ILVBNB = symbol_c_l_ILVBNB 
	price_bids_g_ILVBNB = Decimal(price_bids_c_l_ILVBNB) 
	qty_bids_g_ILVBNB = Decimal(qty_bids_c_l_ILVBNB) 
	price_asks_g_ILVBNB = Decimal(price_asks_c_l_ILVBNB) 
	qty_asks_g_ILVBNB = Decimal(qty_asks_c_l_ILVBNB) 


def loop_ILVBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ilvbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ILVBNB) 
	ws.run_forever() 


Thread(target=loop_ILVBNB).start() 
symbol_g_YGGBNB = 'YGGBNB' 
price_bids_g_YGGBNB = Decimal('0.0') 
qty_bids_g_YGGBNB = Decimal('0.0') 
price_asks_g_YGGBNB = Decimal('0.0') 
qty_asks_g_YGGBNB = Decimal('0.0') 
stepSize_g_YGGBNB = Decimal('0.1') 


def on_message_YGGBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_YGGBNB = 'YGGBNB' 
	price_bids_c_l_YGGBNB = data['b'] 
	qty_bids_c_l_YGGBNB = data['B'] 
	price_asks_c_l_YGGBNB = data['a'] 
	qty_asks_c_l_YGGBNB = data['A'] 

	global symbol_g_YGGBNB 
	global price_bids_g_YGGBNB 
	global qty_bids_g_YGGBNB 
	global price_asks_g_YGGBNB 
	global qty_asks_g_YGGBNB 

	symbol_g_YGGBNB = symbol_c_l_YGGBNB 
	price_bids_g_YGGBNB = Decimal(price_bids_c_l_YGGBNB) 
	qty_bids_g_YGGBNB = Decimal(qty_bids_c_l_YGGBNB) 
	price_asks_g_YGGBNB = Decimal(price_asks_c_l_YGGBNB) 
	qty_asks_g_YGGBNB = Decimal(qty_asks_c_l_YGGBNB) 


def loop_YGGBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/yggbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_YGGBNB) 
	ws.run_forever() 


Thread(target=loop_YGGBNB).start() 
symbol_g_RADBNB = 'RADBNB' 
price_bids_g_RADBNB = Decimal('0.0') 
qty_bids_g_RADBNB = Decimal('0.0') 
price_asks_g_RADBNB = Decimal('0.0') 
qty_asks_g_RADBNB = Decimal('0.0') 
stepSize_g_RADBNB = Decimal('0.1') 


def on_message_RADBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RADBNB = 'RADBNB' 
	price_bids_c_l_RADBNB = data['b'] 
	qty_bids_c_l_RADBNB = data['B'] 
	price_asks_c_l_RADBNB = data['a'] 
	qty_asks_c_l_RADBNB = data['A'] 

	global symbol_g_RADBNB 
	global price_bids_g_RADBNB 
	global qty_bids_g_RADBNB 
	global price_asks_g_RADBNB 
	global qty_asks_g_RADBNB 

	symbol_g_RADBNB = symbol_c_l_RADBNB 
	price_bids_g_RADBNB = Decimal(price_bids_c_l_RADBNB) 
	qty_bids_g_RADBNB = Decimal(qty_bids_c_l_RADBNB) 
	price_asks_g_RADBNB = Decimal(price_asks_c_l_RADBNB) 
	qty_asks_g_RADBNB = Decimal(qty_asks_c_l_RADBNB) 


def loop_RADBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/radbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RADBNB) 
	ws.run_forever() 


Thread(target=loop_RADBNB).start() 
symbol_g_BETABNB = 'BETABNB' 
price_bids_g_BETABNB = Decimal('0.0') 
qty_bids_g_BETABNB = Decimal('0.0') 
price_asks_g_BETABNB = Decimal('0.0') 
qty_asks_g_BETABNB = Decimal('0.0') 
stepSize_g_BETABNB = Decimal('1.0') 


def on_message_BETABNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BETABNB = 'BETABNB' 
	price_bids_c_l_BETABNB = data['b'] 
	qty_bids_c_l_BETABNB = data['B'] 
	price_asks_c_l_BETABNB = data['a'] 
	qty_asks_c_l_BETABNB = data['A'] 

	global symbol_g_BETABNB 
	global price_bids_g_BETABNB 
	global qty_bids_g_BETABNB 
	global price_asks_g_BETABNB 
	global qty_asks_g_BETABNB 

	symbol_g_BETABNB = symbol_c_l_BETABNB 
	price_bids_g_BETABNB = Decimal(price_bids_c_l_BETABNB) 
	qty_bids_g_BETABNB = Decimal(qty_bids_c_l_BETABNB) 
	price_asks_g_BETABNB = Decimal(price_asks_c_l_BETABNB) 
	qty_asks_g_BETABNB = Decimal(qty_asks_c_l_BETABNB) 


def loop_BETABNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/betabnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BETABNB) 
	ws.run_forever() 


Thread(target=loop_BETABNB).start() 
symbol_g_DARBNB = 'DARBNB' 
price_bids_g_DARBNB = Decimal('0.0') 
qty_bids_g_DARBNB = Decimal('0.0') 
price_asks_g_DARBNB = Decimal('0.0') 
qty_asks_g_DARBNB = Decimal('0.0') 
stepSize_g_DARBNB = Decimal('1.0') 


def on_message_DARBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DARBNB = 'DARBNB' 
	price_bids_c_l_DARBNB = data['b'] 
	qty_bids_c_l_DARBNB = data['B'] 
	price_asks_c_l_DARBNB = data['a'] 
	qty_asks_c_l_DARBNB = data['A'] 

	global symbol_g_DARBNB 
	global price_bids_g_DARBNB 
	global qty_bids_g_DARBNB 
	global price_asks_g_DARBNB 
	global qty_asks_g_DARBNB 

	symbol_g_DARBNB = symbol_c_l_DARBNB 
	price_bids_g_DARBNB = Decimal(price_bids_c_l_DARBNB) 
	qty_bids_g_DARBNB = Decimal(qty_bids_c_l_DARBNB) 
	price_asks_g_DARBNB = Decimal(price_asks_c_l_DARBNB) 
	qty_asks_g_DARBNB = Decimal(qty_asks_c_l_DARBNB) 


def loop_DARBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/darbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DARBNB) 
	ws.run_forever() 


Thread(target=loop_DARBNB).start() 
symbol_g_BNXBNB = 'BNXBNB' 
price_bids_g_BNXBNB = Decimal('0.0') 
qty_bids_g_BNXBNB = Decimal('0.0') 
price_asks_g_BNXBNB = Decimal('0.0') 
qty_asks_g_BNXBNB = Decimal('0.0') 
stepSize_g_BNXBNB = Decimal('0.001') 


def on_message_BNXBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNXBNB = 'BNXBNB' 
	price_bids_c_l_BNXBNB = data['b'] 
	qty_bids_c_l_BNXBNB = data['B'] 
	price_asks_c_l_BNXBNB = data['a'] 
	qty_asks_c_l_BNXBNB = data['A'] 

	global symbol_g_BNXBNB 
	global price_bids_g_BNXBNB 
	global qty_bids_g_BNXBNB 
	global price_asks_g_BNXBNB 
	global qty_asks_g_BNXBNB 

	symbol_g_BNXBNB = symbol_c_l_BNXBNB 
	price_bids_g_BNXBNB = Decimal(price_bids_c_l_BNXBNB) 
	qty_bids_g_BNXBNB = Decimal(qty_bids_c_l_BNXBNB) 
	price_asks_g_BNXBNB = Decimal(price_asks_c_l_BNXBNB) 
	qty_asks_g_BNXBNB = Decimal(qty_asks_c_l_BNXBNB) 


def loop_BNXBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnxbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNXBNB) 
	ws.run_forever() 


Thread(target=loop_BNXBNB).start() 
symbol_g_CITYBNB = 'CITYBNB' 
price_bids_g_CITYBNB = Decimal('0.0') 
qty_bids_g_CITYBNB = Decimal('0.0') 
price_asks_g_CITYBNB = Decimal('0.0') 
qty_asks_g_CITYBNB = Decimal('0.0') 
stepSize_g_CITYBNB = Decimal('0.01') 


def on_message_CITYBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CITYBNB = 'CITYBNB' 
	price_bids_c_l_CITYBNB = data['b'] 
	qty_bids_c_l_CITYBNB = data['B'] 
	price_asks_c_l_CITYBNB = data['a'] 
	qty_asks_c_l_CITYBNB = data['A'] 

	global symbol_g_CITYBNB 
	global price_bids_g_CITYBNB 
	global qty_bids_g_CITYBNB 
	global price_asks_g_CITYBNB 
	global qty_asks_g_CITYBNB 

	symbol_g_CITYBNB = symbol_c_l_CITYBNB 
	price_bids_g_CITYBNB = Decimal(price_bids_c_l_CITYBNB) 
	qty_bids_g_CITYBNB = Decimal(qty_bids_c_l_CITYBNB) 
	price_asks_g_CITYBNB = Decimal(price_asks_c_l_CITYBNB) 
	qty_asks_g_CITYBNB = Decimal(qty_asks_c_l_CITYBNB) 


def loop_CITYBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/citybnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CITYBNB) 
	ws.run_forever() 


Thread(target=loop_CITYBNB).start() 
symbol_g_ENSBNB = 'ENSBNB' 
price_bids_g_ENSBNB = Decimal('0.0') 
qty_bids_g_ENSBNB = Decimal('0.0') 
price_asks_g_ENSBNB = Decimal('0.0') 
qty_asks_g_ENSBNB = Decimal('0.0') 
stepSize_g_ENSBNB = Decimal('0.01') 


def on_message_ENSBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENSBNB = 'ENSBNB' 
	price_bids_c_l_ENSBNB = data['b'] 
	qty_bids_c_l_ENSBNB = data['B'] 
	price_asks_c_l_ENSBNB = data['a'] 
	qty_asks_c_l_ENSBNB = data['A'] 

	global symbol_g_ENSBNB 
	global price_bids_g_ENSBNB 
	global qty_bids_g_ENSBNB 
	global price_asks_g_ENSBNB 
	global qty_asks_g_ENSBNB 

	symbol_g_ENSBNB = symbol_c_l_ENSBNB 
	price_bids_g_ENSBNB = Decimal(price_bids_c_l_ENSBNB) 
	qty_bids_g_ENSBNB = Decimal(qty_bids_c_l_ENSBNB) 
	price_asks_g_ENSBNB = Decimal(price_asks_c_l_ENSBNB) 
	qty_asks_g_ENSBNB = Decimal(qty_asks_c_l_ENSBNB) 


def loop_ENSBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ensbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENSBNB) 
	ws.run_forever() 


Thread(target=loop_ENSBNB).start() 
symbol_g_JASMYBNB = 'JASMYBNB' 
price_bids_g_JASMYBNB = Decimal('0.0') 
qty_bids_g_JASMYBNB = Decimal('0.0') 
price_asks_g_JASMYBNB = Decimal('0.0') 
qty_asks_g_JASMYBNB = Decimal('0.0') 
stepSize_g_JASMYBNB = Decimal('0.1') 


def on_message_JASMYBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JASMYBNB = 'JASMYBNB' 
	price_bids_c_l_JASMYBNB = data['b'] 
	qty_bids_c_l_JASMYBNB = data['B'] 
	price_asks_c_l_JASMYBNB = data['a'] 
	qty_asks_c_l_JASMYBNB = data['A'] 

	global symbol_g_JASMYBNB 
	global price_bids_g_JASMYBNB 
	global qty_bids_g_JASMYBNB 
	global price_asks_g_JASMYBNB 
	global qty_asks_g_JASMYBNB 

	symbol_g_JASMYBNB = symbol_c_l_JASMYBNB 
	price_bids_g_JASMYBNB = Decimal(price_bids_c_l_JASMYBNB) 
	qty_bids_g_JASMYBNB = Decimal(qty_bids_c_l_JASMYBNB) 
	price_asks_g_JASMYBNB = Decimal(price_asks_c_l_JASMYBNB) 
	qty_asks_g_JASMYBNB = Decimal(qty_asks_c_l_JASMYBNB) 


def loop_JASMYBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/jasmybnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JASMYBNB) 
	ws.run_forever() 


Thread(target=loop_JASMYBNB).start() 
symbol_g_PLABNB = 'PLABNB' 
price_bids_g_PLABNB = Decimal('0.0') 
qty_bids_g_PLABNB = Decimal('0.0') 
price_asks_g_PLABNB = Decimal('0.0') 
qty_asks_g_PLABNB = Decimal('0.0') 
stepSize_g_PLABNB = Decimal('0.01') 


def on_message_PLABNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PLABNB = 'PLABNB' 
	price_bids_c_l_PLABNB = data['b'] 
	qty_bids_c_l_PLABNB = data['B'] 
	price_asks_c_l_PLABNB = data['a'] 
	qty_asks_c_l_PLABNB = data['A'] 

	global symbol_g_PLABNB 
	global price_bids_g_PLABNB 
	global qty_bids_g_PLABNB 
	global price_asks_g_PLABNB 
	global qty_asks_g_PLABNB 

	symbol_g_PLABNB = symbol_c_l_PLABNB 
	price_bids_g_PLABNB = Decimal(price_bids_c_l_PLABNB) 
	qty_bids_g_PLABNB = Decimal(qty_bids_c_l_PLABNB) 
	price_asks_g_PLABNB = Decimal(price_asks_c_l_PLABNB) 
	qty_asks_g_PLABNB = Decimal(qty_asks_c_l_PLABNB) 


def loop_PLABNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/plabnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PLABNB) 
	ws.run_forever() 


Thread(target=loop_PLABNB).start() 
symbol_g_VOXELBNB = 'VOXELBNB' 
price_bids_g_VOXELBNB = Decimal('0.0') 
qty_bids_g_VOXELBNB = Decimal('0.0') 
price_asks_g_VOXELBNB = Decimal('0.0') 
qty_asks_g_VOXELBNB = Decimal('0.0') 
stepSize_g_VOXELBNB = Decimal('0.1') 


def on_message_VOXELBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VOXELBNB = 'VOXELBNB' 
	price_bids_c_l_VOXELBNB = data['b'] 
	qty_bids_c_l_VOXELBNB = data['B'] 
	price_asks_c_l_VOXELBNB = data['a'] 
	qty_asks_c_l_VOXELBNB = data['A'] 

	global symbol_g_VOXELBNB 
	global price_bids_g_VOXELBNB 
	global qty_bids_g_VOXELBNB 
	global price_asks_g_VOXELBNB 
	global qty_asks_g_VOXELBNB 

	symbol_g_VOXELBNB = symbol_c_l_VOXELBNB 
	price_bids_g_VOXELBNB = Decimal(price_bids_c_l_VOXELBNB) 
	qty_bids_g_VOXELBNB = Decimal(qty_bids_c_l_VOXELBNB) 
	price_asks_g_VOXELBNB = Decimal(price_asks_c_l_VOXELBNB) 
	qty_asks_g_VOXELBNB = Decimal(qty_asks_c_l_VOXELBNB) 


def loop_VOXELBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/voxelbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VOXELBNB) 
	ws.run_forever() 


Thread(target=loop_VOXELBNB).start() 
symbol_g_LINKBNB = 'LINKBNB' 
price_bids_g_LINKBNB = Decimal('0.0') 
qty_bids_g_LINKBNB = Decimal('0.0') 
price_asks_g_LINKBNB = Decimal('0.0') 
qty_asks_g_LINKBNB = Decimal('0.0') 
stepSize_g_LINKBNB = Decimal('0.001') 


def on_message_LINKBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LINKBNB = 'LINKBNB' 
	price_bids_c_l_LINKBNB = data['b'] 
	qty_bids_c_l_LINKBNB = data['B'] 
	price_asks_c_l_LINKBNB = data['a'] 
	qty_asks_c_l_LINKBNB = data['A'] 

	global symbol_g_LINKBNB 
	global price_bids_g_LINKBNB 
	global qty_bids_g_LINKBNB 
	global price_asks_g_LINKBNB 
	global qty_asks_g_LINKBNB 

	symbol_g_LINKBNB = symbol_c_l_LINKBNB 
	price_bids_g_LINKBNB = Decimal(price_bids_c_l_LINKBNB) 
	qty_bids_g_LINKBNB = Decimal(qty_bids_c_l_LINKBNB) 
	price_asks_g_LINKBNB = Decimal(price_asks_c_l_LINKBNB) 
	qty_asks_g_LINKBNB = Decimal(qty_asks_c_l_LINKBNB) 


def loop_LINKBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/linkbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LINKBNB) 
	ws.run_forever() 


Thread(target=loop_LINKBNB).start() 
symbol_g_ALICEBNB = 'ALICEBNB' 
price_bids_g_ALICEBNB = Decimal('0.0') 
qty_bids_g_ALICEBNB = Decimal('0.0') 
price_asks_g_ALICEBNB = Decimal('0.0') 
qty_asks_g_ALICEBNB = Decimal('0.0') 
stepSize_g_ALICEBNB = Decimal('0.001') 


def on_message_ALICEBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALICEBNB = 'ALICEBNB' 
	price_bids_c_l_ALICEBNB = data['b'] 
	qty_bids_c_l_ALICEBNB = data['B'] 
	price_asks_c_l_ALICEBNB = data['a'] 
	qty_asks_c_l_ALICEBNB = data['A'] 

	global symbol_g_ALICEBNB 
	global price_bids_g_ALICEBNB 
	global qty_bids_g_ALICEBNB 
	global price_asks_g_ALICEBNB 
	global qty_asks_g_ALICEBNB 

	symbol_g_ALICEBNB = symbol_c_l_ALICEBNB 
	price_bids_g_ALICEBNB = Decimal(price_bids_c_l_ALICEBNB) 
	qty_bids_g_ALICEBNB = Decimal(qty_bids_c_l_ALICEBNB) 
	price_asks_g_ALICEBNB = Decimal(price_asks_c_l_ALICEBNB) 
	qty_asks_g_ALICEBNB = Decimal(qty_asks_c_l_ALICEBNB) 


def loop_ALICEBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alicebnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALICEBNB) 
	ws.run_forever() 


Thread(target=loop_ALICEBNB).start() 
symbol_g_LRCBNB = 'LRCBNB' 
price_bids_g_LRCBNB = Decimal('0.0') 
qty_bids_g_LRCBNB = Decimal('0.0') 
price_asks_g_LRCBNB = Decimal('0.0') 
qty_asks_g_LRCBNB = Decimal('0.0') 
stepSize_g_LRCBNB = Decimal('0.01') 


def on_message_LRCBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LRCBNB = 'LRCBNB' 
	price_bids_c_l_LRCBNB = data['b'] 
	qty_bids_c_l_LRCBNB = data['B'] 
	price_asks_c_l_LRCBNB = data['a'] 
	qty_asks_c_l_LRCBNB = data['A'] 

	global symbol_g_LRCBNB 
	global price_bids_g_LRCBNB 
	global qty_bids_g_LRCBNB 
	global price_asks_g_LRCBNB 
	global qty_asks_g_LRCBNB 

	symbol_g_LRCBNB = symbol_c_l_LRCBNB 
	price_bids_g_LRCBNB = Decimal(price_bids_c_l_LRCBNB) 
	qty_bids_g_LRCBNB = Decimal(qty_bids_c_l_LRCBNB) 
	price_asks_g_LRCBNB = Decimal(price_asks_c_l_LRCBNB) 
	qty_asks_g_LRCBNB = Decimal(qty_asks_c_l_LRCBNB) 


def loop_LRCBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lrcbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LRCBNB) 
	ws.run_forever() 


Thread(target=loop_LRCBNB).start() 
symbol_g_LOKABNB = 'LOKABNB' 
price_bids_g_LOKABNB = Decimal('0.0') 
qty_bids_g_LOKABNB = Decimal('0.0') 
price_asks_g_LOKABNB = Decimal('0.0') 
qty_asks_g_LOKABNB = Decimal('0.0') 
stepSize_g_LOKABNB = Decimal('0.1') 


def on_message_LOKABNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LOKABNB = 'LOKABNB' 
	price_bids_c_l_LOKABNB = data['b'] 
	qty_bids_c_l_LOKABNB = data['B'] 
	price_asks_c_l_LOKABNB = data['a'] 
	qty_asks_c_l_LOKABNB = data['A'] 

	global symbol_g_LOKABNB 
	global price_bids_g_LOKABNB 
	global qty_bids_g_LOKABNB 
	global price_asks_g_LOKABNB 
	global qty_asks_g_LOKABNB 

	symbol_g_LOKABNB = symbol_c_l_LOKABNB 
	price_bids_g_LOKABNB = Decimal(price_bids_c_l_LOKABNB) 
	qty_bids_g_LOKABNB = Decimal(qty_bids_c_l_LOKABNB) 
	price_asks_g_LOKABNB = Decimal(price_asks_c_l_LOKABNB) 
	qty_asks_g_LOKABNB = Decimal(qty_asks_c_l_LOKABNB) 


def loop_LOKABNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lokabnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LOKABNB) 
	ws.run_forever() 


Thread(target=loop_LOKABNB).start() 
symbol_g_HIGHBNB = 'HIGHBNB' 
price_bids_g_HIGHBNB = Decimal('0.0') 
qty_bids_g_HIGHBNB = Decimal('0.0') 
price_asks_g_HIGHBNB = Decimal('0.0') 
qty_asks_g_HIGHBNB = Decimal('0.0') 
stepSize_g_HIGHBNB = Decimal('0.01') 


def on_message_HIGHBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HIGHBNB = 'HIGHBNB' 
	price_bids_c_l_HIGHBNB = data['b'] 
	qty_bids_c_l_HIGHBNB = data['B'] 
	price_asks_c_l_HIGHBNB = data['a'] 
	qty_asks_c_l_HIGHBNB = data['A'] 

	global symbol_g_HIGHBNB 
	global price_bids_g_HIGHBNB 
	global qty_bids_g_HIGHBNB 
	global price_asks_g_HIGHBNB 
	global qty_asks_g_HIGHBNB 

	symbol_g_HIGHBNB = symbol_c_l_HIGHBNB 
	price_bids_g_HIGHBNB = Decimal(price_bids_c_l_HIGHBNB) 
	qty_bids_g_HIGHBNB = Decimal(qty_bids_c_l_HIGHBNB) 
	price_asks_g_HIGHBNB = Decimal(price_asks_c_l_HIGHBNB) 
	qty_asks_g_HIGHBNB = Decimal(qty_asks_c_l_HIGHBNB) 


def loop_HIGHBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/highbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HIGHBNB) 
	ws.run_forever() 


Thread(target=loop_HIGHBNB).start() 
symbol_g_MCBNB = 'MCBNB' 
price_bids_g_MCBNB = Decimal('0.0') 
qty_bids_g_MCBNB = Decimal('0.0') 
price_asks_g_MCBNB = Decimal('0.0') 
qty_asks_g_MCBNB = Decimal('0.0') 
stepSize_g_MCBNB = Decimal('0.01') 


def on_message_MCBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MCBNB = 'MCBNB' 
	price_bids_c_l_MCBNB = data['b'] 
	qty_bids_c_l_MCBNB = data['B'] 
	price_asks_c_l_MCBNB = data['a'] 
	qty_asks_c_l_MCBNB = data['A'] 

	global symbol_g_MCBNB 
	global price_bids_g_MCBNB 
	global qty_bids_g_MCBNB 
	global price_asks_g_MCBNB 
	global qty_asks_g_MCBNB 

	symbol_g_MCBNB = symbol_c_l_MCBNB 
	price_bids_g_MCBNB = Decimal(price_bids_c_l_MCBNB) 
	qty_bids_g_MCBNB = Decimal(qty_bids_c_l_MCBNB) 
	price_asks_g_MCBNB = Decimal(price_asks_c_l_MCBNB) 
	qty_asks_g_MCBNB = Decimal(qty_asks_c_l_MCBNB) 


def loop_MCBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mcbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MCBNB) 
	ws.run_forever() 


Thread(target=loop_MCBNB).start() 
symbol_g_WOOBNB = 'WOOBNB' 
price_bids_g_WOOBNB = Decimal('0.0') 
qty_bids_g_WOOBNB = Decimal('0.0') 
price_asks_g_WOOBNB = Decimal('0.0') 
qty_asks_g_WOOBNB = Decimal('0.0') 
stepSize_g_WOOBNB = Decimal('0.1') 


def on_message_WOOBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WOOBNB = 'WOOBNB' 
	price_bids_c_l_WOOBNB = data['b'] 
	qty_bids_c_l_WOOBNB = data['B'] 
	price_asks_c_l_WOOBNB = data['a'] 
	qty_asks_c_l_WOOBNB = data['A'] 

	global symbol_g_WOOBNB 
	global price_bids_g_WOOBNB 
	global qty_bids_g_WOOBNB 
	global price_asks_g_WOOBNB 
	global qty_asks_g_WOOBNB 

	symbol_g_WOOBNB = symbol_c_l_WOOBNB 
	price_bids_g_WOOBNB = Decimal(price_bids_c_l_WOOBNB) 
	qty_bids_g_WOOBNB = Decimal(qty_bids_c_l_WOOBNB) 
	price_asks_g_WOOBNB = Decimal(price_asks_c_l_WOOBNB) 
	qty_asks_g_WOOBNB = Decimal(qty_asks_c_l_WOOBNB) 


def loop_WOOBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/woobnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WOOBNB) 
	ws.run_forever() 


Thread(target=loop_WOOBNB).start() 
symbol_g_PEOPLEBNB = 'PEOPLEBNB' 
price_bids_g_PEOPLEBNB = Decimal('0.0') 
qty_bids_g_PEOPLEBNB = Decimal('0.0') 
price_asks_g_PEOPLEBNB = Decimal('0.0') 
qty_asks_g_PEOPLEBNB = Decimal('0.0') 
stepSize_g_PEOPLEBNB = Decimal('1.0') 


def on_message_PEOPLEBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PEOPLEBNB = 'PEOPLEBNB' 
	price_bids_c_l_PEOPLEBNB = data['b'] 
	qty_bids_c_l_PEOPLEBNB = data['B'] 
	price_asks_c_l_PEOPLEBNB = data['a'] 
	qty_asks_c_l_PEOPLEBNB = data['A'] 

	global symbol_g_PEOPLEBNB 
	global price_bids_g_PEOPLEBNB 
	global qty_bids_g_PEOPLEBNB 
	global price_asks_g_PEOPLEBNB 
	global qty_asks_g_PEOPLEBNB 

	symbol_g_PEOPLEBNB = symbol_c_l_PEOPLEBNB 
	price_bids_g_PEOPLEBNB = Decimal(price_bids_c_l_PEOPLEBNB) 
	qty_bids_g_PEOPLEBNB = Decimal(qty_bids_c_l_PEOPLEBNB) 
	price_asks_g_PEOPLEBNB = Decimal(price_asks_c_l_PEOPLEBNB) 
	qty_asks_g_PEOPLEBNB = Decimal(qty_asks_c_l_PEOPLEBNB) 


def loop_PEOPLEBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/peoplebnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PEOPLEBNB) 
	ws.run_forever() 


Thread(target=loop_PEOPLEBNB).start() 
symbol_g_IDEXBNB = 'IDEXBNB' 
price_bids_g_IDEXBNB = Decimal('0.0') 
qty_bids_g_IDEXBNB = Decimal('0.0') 
price_asks_g_IDEXBNB = Decimal('0.0') 
qty_asks_g_IDEXBNB = Decimal('0.0') 
stepSize_g_IDEXBNB = Decimal('0.1') 


def on_message_IDEXBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IDEXBNB = 'IDEXBNB' 
	price_bids_c_l_IDEXBNB = data['b'] 
	qty_bids_c_l_IDEXBNB = data['B'] 
	price_asks_c_l_IDEXBNB = data['a'] 
	qty_asks_c_l_IDEXBNB = data['A'] 

	global symbol_g_IDEXBNB 
	global price_bids_g_IDEXBNB 
	global qty_bids_g_IDEXBNB 
	global price_asks_g_IDEXBNB 
	global qty_asks_g_IDEXBNB 

	symbol_g_IDEXBNB = symbol_c_l_IDEXBNB 
	price_bids_g_IDEXBNB = Decimal(price_bids_c_l_IDEXBNB) 
	qty_bids_g_IDEXBNB = Decimal(qty_bids_c_l_IDEXBNB) 
	price_asks_g_IDEXBNB = Decimal(price_asks_c_l_IDEXBNB) 
	qty_asks_g_IDEXBNB = Decimal(qty_asks_c_l_IDEXBNB) 


def loop_IDEXBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/idexbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IDEXBNB) 
	ws.run_forever() 


Thread(target=loop_IDEXBNB).start() 
symbol_g_GLMRBNB = 'GLMRBNB' 
price_bids_g_GLMRBNB = Decimal('0.0') 
qty_bids_g_GLMRBNB = Decimal('0.0') 
price_asks_g_GLMRBNB = Decimal('0.0') 
qty_asks_g_GLMRBNB = Decimal('0.0') 
stepSize_g_GLMRBNB = Decimal('0.01') 


def on_message_GLMRBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GLMRBNB = 'GLMRBNB' 
	price_bids_c_l_GLMRBNB = data['b'] 
	qty_bids_c_l_GLMRBNB = data['B'] 
	price_asks_c_l_GLMRBNB = data['a'] 
	qty_asks_c_l_GLMRBNB = data['A'] 

	global symbol_g_GLMRBNB 
	global price_bids_g_GLMRBNB 
	global qty_bids_g_GLMRBNB 
	global price_asks_g_GLMRBNB 
	global qty_asks_g_GLMRBNB 

	symbol_g_GLMRBNB = symbol_c_l_GLMRBNB 
	price_bids_g_GLMRBNB = Decimal(price_bids_c_l_GLMRBNB) 
	qty_bids_g_GLMRBNB = Decimal(qty_bids_c_l_GLMRBNB) 
	price_asks_g_GLMRBNB = Decimal(price_asks_c_l_GLMRBNB) 
	qty_asks_g_GLMRBNB = Decimal(qty_asks_c_l_GLMRBNB) 


def loop_GLMRBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/glmrbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GLMRBNB) 
	ws.run_forever() 


Thread(target=loop_GLMRBNB).start() 
symbol_g_GMTBNB = 'GMTBNB' 
price_bids_g_GMTBNB = Decimal('0.0') 
qty_bids_g_GMTBNB = Decimal('0.0') 
price_asks_g_GMTBNB = Decimal('0.0') 
qty_asks_g_GMTBNB = Decimal('0.0') 
stepSize_g_GMTBNB = Decimal('0.1') 


def on_message_GMTBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GMTBNB = 'GMTBNB' 
	price_bids_c_l_GMTBNB = data['b'] 
	qty_bids_c_l_GMTBNB = data['B'] 
	price_asks_c_l_GMTBNB = data['a'] 
	qty_asks_c_l_GMTBNB = data['A'] 

	global symbol_g_GMTBNB 
	global price_bids_g_GMTBNB 
	global qty_bids_g_GMTBNB 
	global price_asks_g_GMTBNB 
	global qty_asks_g_GMTBNB 

	symbol_g_GMTBNB = symbol_c_l_GMTBNB 
	price_bids_g_GMTBNB = Decimal(price_bids_c_l_GMTBNB) 
	qty_bids_g_GMTBNB = Decimal(qty_bids_c_l_GMTBNB) 
	price_asks_g_GMTBNB = Decimal(price_asks_c_l_GMTBNB) 
	qty_asks_g_GMTBNB = Decimal(qty_asks_c_l_GMTBNB) 


def loop_GMTBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gmtbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GMTBNB) 
	ws.run_forever() 


Thread(target=loop_GMTBNB).start() 
symbol_g_BSWBNB = 'BSWBNB' 
price_bids_g_BSWBNB = Decimal('0.0') 
qty_bids_g_BSWBNB = Decimal('0.0') 
price_asks_g_BSWBNB = Decimal('0.0') 
qty_asks_g_BSWBNB = Decimal('0.0') 
stepSize_g_BSWBNB = Decimal('0.1') 


def on_message_BSWBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BSWBNB = 'BSWBNB' 
	price_bids_c_l_BSWBNB = data['b'] 
	qty_bids_c_l_BSWBNB = data['B'] 
	price_asks_c_l_BSWBNB = data['a'] 
	qty_asks_c_l_BSWBNB = data['A'] 

	global symbol_g_BSWBNB 
	global price_bids_g_BSWBNB 
	global qty_bids_g_BSWBNB 
	global price_asks_g_BSWBNB 
	global qty_asks_g_BSWBNB 

	symbol_g_BSWBNB = symbol_c_l_BSWBNB 
	price_bids_g_BSWBNB = Decimal(price_bids_c_l_BSWBNB) 
	qty_bids_g_BSWBNB = Decimal(qty_bids_c_l_BSWBNB) 
	price_asks_g_BSWBNB = Decimal(price_asks_c_l_BSWBNB) 
	qty_asks_g_BSWBNB = Decimal(qty_asks_c_l_BSWBNB) 


def loop_BSWBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bswbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BSWBNB) 
	ws.run_forever() 


Thread(target=loop_BSWBNB).start() 
symbol_g_APEBNB = 'APEBNB' 
price_bids_g_APEBNB = Decimal('0.0') 
qty_bids_g_APEBNB = Decimal('0.0') 
price_asks_g_APEBNB = Decimal('0.0') 
qty_asks_g_APEBNB = Decimal('0.0') 
stepSize_g_APEBNB = Decimal('0.001') 


def on_message_APEBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APEBNB = 'APEBNB' 
	price_bids_c_l_APEBNB = data['b'] 
	qty_bids_c_l_APEBNB = data['B'] 
	price_asks_c_l_APEBNB = data['a'] 
	qty_asks_c_l_APEBNB = data['A'] 

	global symbol_g_APEBNB 
	global price_bids_g_APEBNB 
	global qty_bids_g_APEBNB 
	global price_asks_g_APEBNB 
	global qty_asks_g_APEBNB 

	symbol_g_APEBNB = symbol_c_l_APEBNB 
	price_bids_g_APEBNB = Decimal(price_bids_c_l_APEBNB) 
	qty_bids_g_APEBNB = Decimal(qty_bids_c_l_APEBNB) 
	price_asks_g_APEBNB = Decimal(price_asks_c_l_APEBNB) 
	qty_asks_g_APEBNB = Decimal(qty_asks_c_l_APEBNB) 


def loop_APEBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/apebnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APEBNB) 
	ws.run_forever() 


Thread(target=loop_APEBNB).start() 
symbol_g_IMXBNB = 'IMXBNB' 
price_bids_g_IMXBNB = Decimal('0.0') 
qty_bids_g_IMXBNB = Decimal('0.0') 
price_asks_g_IMXBNB = Decimal('0.0') 
qty_asks_g_IMXBNB = Decimal('0.0') 
stepSize_g_IMXBNB = Decimal('0.01') 


def on_message_IMXBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IMXBNB = 'IMXBNB' 
	price_bids_c_l_IMXBNB = data['b'] 
	qty_bids_c_l_IMXBNB = data['B'] 
	price_asks_c_l_IMXBNB = data['a'] 
	qty_asks_c_l_IMXBNB = data['A'] 

	global symbol_g_IMXBNB 
	global price_bids_g_IMXBNB 
	global qty_bids_g_IMXBNB 
	global price_asks_g_IMXBNB 
	global qty_asks_g_IMXBNB 

	symbol_g_IMXBNB = symbol_c_l_IMXBNB 
	price_bids_g_IMXBNB = Decimal(price_bids_c_l_IMXBNB) 
	qty_bids_g_IMXBNB = Decimal(qty_bids_c_l_IMXBNB) 
	price_asks_g_IMXBNB = Decimal(price_asks_c_l_IMXBNB) 
	qty_asks_g_IMXBNB = Decimal(qty_asks_c_l_IMXBNB) 


def loop_IMXBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/imxbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IMXBNB) 
	ws.run_forever() 


Thread(target=loop_IMXBNB).start() 
symbol_g_FUNBNB = 'FUNBNB' 
price_bids_g_FUNBNB = Decimal('0.0') 
qty_bids_g_FUNBNB = Decimal('0.0') 
price_asks_g_FUNBNB = Decimal('0.0') 
qty_asks_g_FUNBNB = Decimal('0.0') 
stepSize_g_FUNBNB = Decimal('1.0') 


def on_message_FUNBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FUNBNB = 'FUNBNB' 
	price_bids_c_l_FUNBNB = data['b'] 
	qty_bids_c_l_FUNBNB = data['B'] 
	price_asks_c_l_FUNBNB = data['a'] 
	qty_asks_c_l_FUNBNB = data['A'] 

	global symbol_g_FUNBNB 
	global price_bids_g_FUNBNB 
	global qty_bids_g_FUNBNB 
	global price_asks_g_FUNBNB 
	global qty_asks_g_FUNBNB 

	symbol_g_FUNBNB = symbol_c_l_FUNBNB 
	price_bids_g_FUNBNB = Decimal(price_bids_c_l_FUNBNB) 
	qty_bids_g_FUNBNB = Decimal(qty_bids_c_l_FUNBNB) 
	price_asks_g_FUNBNB = Decimal(price_asks_c_l_FUNBNB) 
	qty_asks_g_FUNBNB = Decimal(qty_asks_c_l_FUNBNB) 


def loop_FUNBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/funbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FUNBNB) 
	ws.run_forever() 


Thread(target=loop_FUNBNB).start() 
symbol_g_REIBNB = 'REIBNB' 
price_bids_g_REIBNB = Decimal('0.0') 
qty_bids_g_REIBNB = Decimal('0.0') 
price_asks_g_REIBNB = Decimal('0.0') 
qty_asks_g_REIBNB = Decimal('0.0') 
stepSize_g_REIBNB = Decimal('0.1') 


def on_message_REIBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_REIBNB = 'REIBNB' 
	price_bids_c_l_REIBNB = data['b'] 
	qty_bids_c_l_REIBNB = data['B'] 
	price_asks_c_l_REIBNB = data['a'] 
	qty_asks_c_l_REIBNB = data['A'] 

	global symbol_g_REIBNB 
	global price_bids_g_REIBNB 
	global qty_bids_g_REIBNB 
	global price_asks_g_REIBNB 
	global qty_asks_g_REIBNB 

	symbol_g_REIBNB = symbol_c_l_REIBNB 
	price_bids_g_REIBNB = Decimal(price_bids_c_l_REIBNB) 
	qty_bids_g_REIBNB = Decimal(qty_bids_c_l_REIBNB) 
	price_asks_g_REIBNB = Decimal(price_asks_c_l_REIBNB) 
	qty_asks_g_REIBNB = Decimal(qty_asks_c_l_REIBNB) 


def loop_REIBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/reibnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_REIBNB) 
	ws.run_forever() 


Thread(target=loop_REIBNB).start() 
symbol_g_GALBNB = 'GALBNB' 
price_bids_g_GALBNB = Decimal('0.0') 
qty_bids_g_GALBNB = Decimal('0.0') 
price_asks_g_GALBNB = Decimal('0.0') 
qty_asks_g_GALBNB = Decimal('0.0') 
stepSize_g_GALBNB = Decimal('0.001') 


def on_message_GALBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALBNB = 'GALBNB' 
	price_bids_c_l_GALBNB = data['b'] 
	qty_bids_c_l_GALBNB = data['B'] 
	price_asks_c_l_GALBNB = data['a'] 
	qty_asks_c_l_GALBNB = data['A'] 

	global symbol_g_GALBNB 
	global price_bids_g_GALBNB 
	global qty_bids_g_GALBNB 
	global price_asks_g_GALBNB 
	global qty_asks_g_GALBNB 

	symbol_g_GALBNB = symbol_c_l_GALBNB 
	price_bids_g_GALBNB = Decimal(price_bids_c_l_GALBNB) 
	qty_bids_g_GALBNB = Decimal(qty_bids_c_l_GALBNB) 
	price_asks_g_GALBNB = Decimal(price_asks_c_l_GALBNB) 
	qty_asks_g_GALBNB = Decimal(qty_asks_c_l_GALBNB) 


def loop_GALBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALBNB) 
	ws.run_forever() 


Thread(target=loop_GALBNB).start() 
symbol_g_KNCBNB = 'KNCBNB' 
price_bids_g_KNCBNB = Decimal('0.0') 
qty_bids_g_KNCBNB = Decimal('0.0') 
price_asks_g_KNCBNB = Decimal('0.0') 
qty_asks_g_KNCBNB = Decimal('0.0') 
stepSize_g_KNCBNB = Decimal('0.01') 


def on_message_KNCBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KNCBNB = 'KNCBNB' 
	price_bids_c_l_KNCBNB = data['b'] 
	qty_bids_c_l_KNCBNB = data['B'] 
	price_asks_c_l_KNCBNB = data['a'] 
	qty_asks_c_l_KNCBNB = data['A'] 

	global symbol_g_KNCBNB 
	global price_bids_g_KNCBNB 
	global qty_bids_g_KNCBNB 
	global price_asks_g_KNCBNB 
	global qty_asks_g_KNCBNB 

	symbol_g_KNCBNB = symbol_c_l_KNCBNB 
	price_bids_g_KNCBNB = Decimal(price_bids_c_l_KNCBNB) 
	qty_bids_g_KNCBNB = Decimal(qty_bids_c_l_KNCBNB) 
	price_asks_g_KNCBNB = Decimal(price_asks_c_l_KNCBNB) 
	qty_asks_g_KNCBNB = Decimal(qty_asks_c_l_KNCBNB) 


def loop_KNCBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kncbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KNCBNB) 
	ws.run_forever() 


Thread(target=loop_KNCBNB).start() 
symbol_g_OPBNB = 'OPBNB' 
price_bids_g_OPBNB = Decimal('0.0') 
qty_bids_g_OPBNB = Decimal('0.0') 
price_asks_g_OPBNB = Decimal('0.0') 
qty_asks_g_OPBNB = Decimal('0.0') 
stepSize_g_OPBNB = Decimal('0.1') 


def on_message_OPBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OPBNB = 'OPBNB' 
	price_bids_c_l_OPBNB = data['b'] 
	qty_bids_c_l_OPBNB = data['B'] 
	price_asks_c_l_OPBNB = data['a'] 
	qty_asks_c_l_OPBNB = data['A'] 

	global symbol_g_OPBNB 
	global price_bids_g_OPBNB 
	global qty_bids_g_OPBNB 
	global price_asks_g_OPBNB 
	global qty_asks_g_OPBNB 

	symbol_g_OPBNB = symbol_c_l_OPBNB 
	price_bids_g_OPBNB = Decimal(price_bids_c_l_OPBNB) 
	qty_bids_g_OPBNB = Decimal(qty_bids_c_l_OPBNB) 
	price_asks_g_OPBNB = Decimal(price_asks_c_l_OPBNB) 
	qty_asks_g_OPBNB = Decimal(qty_asks_c_l_OPBNB) 


def loop_OPBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/opbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OPBNB) 
	ws.run_forever() 


Thread(target=loop_OPBNB).start() 
symbol_g_HOOKBNB = 'HOOKBNB' 
price_bids_g_HOOKBNB = Decimal('0.0') 
qty_bids_g_HOOKBNB = Decimal('0.0') 
price_asks_g_HOOKBNB = Decimal('0.0') 
qty_asks_g_HOOKBNB = Decimal('0.0') 
stepSize_g_HOOKBNB = Decimal('0.1') 


def on_message_HOOKBNB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HOOKBNB = 'HOOKBNB' 
	price_bids_c_l_HOOKBNB = data['b'] 
	qty_bids_c_l_HOOKBNB = data['B'] 
	price_asks_c_l_HOOKBNB = data['a'] 
	qty_asks_c_l_HOOKBNB = data['A'] 

	global symbol_g_HOOKBNB 
	global price_bids_g_HOOKBNB 
	global qty_bids_g_HOOKBNB 
	global price_asks_g_HOOKBNB 
	global qty_asks_g_HOOKBNB 

	symbol_g_HOOKBNB = symbol_c_l_HOOKBNB 
	price_bids_g_HOOKBNB = Decimal(price_bids_c_l_HOOKBNB) 
	qty_bids_g_HOOKBNB = Decimal(qty_bids_c_l_HOOKBNB) 
	price_asks_g_HOOKBNB = Decimal(price_asks_c_l_HOOKBNB) 
	qty_asks_g_HOOKBNB = Decimal(qty_asks_c_l_HOOKBNB) 


def loop_HOOKBNB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hookbnb@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HOOKBNB) 
	ws.run_forever() 


Thread(target=loop_HOOKBNB).start() 
symbol_g_NEOBUSD = 'NEOBUSD' 
price_bids_g_NEOBUSD = Decimal('0.0') 
qty_bids_g_NEOBUSD = Decimal('0.0') 
price_asks_g_NEOBUSD = Decimal('0.0') 
qty_asks_g_NEOBUSD = Decimal('0.0') 
stepSize_g_NEOBUSD = Decimal('0.01') 


def on_message_NEOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEOBUSD = 'NEOBUSD' 
	price_bids_c_l_NEOBUSD = data['b'] 
	qty_bids_c_l_NEOBUSD = data['B'] 
	price_asks_c_l_NEOBUSD = data['a'] 
	qty_asks_c_l_NEOBUSD = data['A'] 

	global symbol_g_NEOBUSD 
	global price_bids_g_NEOBUSD 
	global qty_bids_g_NEOBUSD 
	global price_asks_g_NEOBUSD 
	global qty_asks_g_NEOBUSD 

	symbol_g_NEOBUSD = symbol_c_l_NEOBUSD 
	price_bids_g_NEOBUSD = Decimal(price_bids_c_l_NEOBUSD) 
	qty_bids_g_NEOBUSD = Decimal(qty_bids_c_l_NEOBUSD) 
	price_asks_g_NEOBUSD = Decimal(price_asks_c_l_NEOBUSD) 
	qty_asks_g_NEOBUSD = Decimal(qty_asks_c_l_NEOBUSD) 


def loop_NEOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/neobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEOBUSD) 
	ws.run_forever() 


Thread(target=loop_NEOBUSD).start() 
symbol_g_LTCBUSD = 'LTCBUSD' 
price_bids_g_LTCBUSD = Decimal('0.0') 
qty_bids_g_LTCBUSD = Decimal('0.0') 
price_asks_g_LTCBUSD = Decimal('0.0') 
qty_asks_g_LTCBUSD = Decimal('0.0') 
stepSize_g_LTCBUSD = Decimal('0.001') 


def on_message_LTCBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LTCBUSD = 'LTCBUSD' 
	price_bids_c_l_LTCBUSD = data['b'] 
	qty_bids_c_l_LTCBUSD = data['B'] 
	price_asks_c_l_LTCBUSD = data['a'] 
	qty_asks_c_l_LTCBUSD = data['A'] 

	global symbol_g_LTCBUSD 
	global price_bids_g_LTCBUSD 
	global qty_bids_g_LTCBUSD 
	global price_asks_g_LTCBUSD 
	global qty_asks_g_LTCBUSD 

	symbol_g_LTCBUSD = symbol_c_l_LTCBUSD 
	price_bids_g_LTCBUSD = Decimal(price_bids_c_l_LTCBUSD) 
	qty_bids_g_LTCBUSD = Decimal(qty_bids_c_l_LTCBUSD) 
	price_asks_g_LTCBUSD = Decimal(price_asks_c_l_LTCBUSD) 
	qty_asks_g_LTCBUSD = Decimal(qty_asks_c_l_LTCBUSD) 


def loop_LTCBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ltcbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LTCBUSD) 
	ws.run_forever() 


Thread(target=loop_LTCBUSD).start() 
symbol_g_LTCEUR = 'LTCEUR' 
price_bids_g_LTCEUR = Decimal('0.0') 
qty_bids_g_LTCEUR = Decimal('0.0') 
price_asks_g_LTCEUR = Decimal('0.0') 
qty_asks_g_LTCEUR = Decimal('0.0') 
stepSize_g_LTCEUR = Decimal('0.001') 


def on_message_LTCEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LTCEUR = 'LTCEUR' 
	price_bids_c_l_LTCEUR = data['b'] 
	qty_bids_c_l_LTCEUR = data['B'] 
	price_asks_c_l_LTCEUR = data['a'] 
	qty_asks_c_l_LTCEUR = data['A'] 

	global symbol_g_LTCEUR 
	global price_bids_g_LTCEUR 
	global qty_bids_g_LTCEUR 
	global price_asks_g_LTCEUR 
	global qty_asks_g_LTCEUR 

	symbol_g_LTCEUR = symbol_c_l_LTCEUR 
	price_bids_g_LTCEUR = Decimal(price_bids_c_l_LTCEUR) 
	qty_bids_g_LTCEUR = Decimal(qty_bids_c_l_LTCEUR) 
	price_asks_g_LTCEUR = Decimal(price_asks_c_l_LTCEUR) 
	qty_asks_g_LTCEUR = Decimal(qty_asks_c_l_LTCEUR) 


def loop_LTCEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ltceur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LTCEUR) 
	ws.run_forever() 


Thread(target=loop_LTCEUR).start() 
symbol_g_LTCGBP = 'LTCGBP' 
price_bids_g_LTCGBP = Decimal('0.0') 
qty_bids_g_LTCGBP = Decimal('0.0') 
price_asks_g_LTCGBP = Decimal('0.0') 
qty_asks_g_LTCGBP = Decimal('0.0') 
stepSize_g_LTCGBP = Decimal('0.001') 


def on_message_LTCGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LTCGBP = 'LTCGBP' 
	price_bids_c_l_LTCGBP = data['b'] 
	qty_bids_c_l_LTCGBP = data['B'] 
	price_asks_c_l_LTCGBP = data['a'] 
	qty_asks_c_l_LTCGBP = data['A'] 

	global symbol_g_LTCGBP 
	global price_bids_g_LTCGBP 
	global qty_bids_g_LTCGBP 
	global price_asks_g_LTCGBP 
	global qty_asks_g_LTCGBP 

	symbol_g_LTCGBP = symbol_c_l_LTCGBP 
	price_bids_g_LTCGBP = Decimal(price_bids_c_l_LTCGBP) 
	qty_bids_g_LTCGBP = Decimal(qty_bids_c_l_LTCGBP) 
	price_asks_g_LTCGBP = Decimal(price_asks_c_l_LTCGBP) 
	qty_asks_g_LTCGBP = Decimal(qty_asks_c_l_LTCGBP) 


def loop_LTCGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ltcgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LTCGBP) 
	ws.run_forever() 


Thread(target=loop_LTCGBP).start() 
symbol_g_QTUMBUSD = 'QTUMBUSD' 
price_bids_g_QTUMBUSD = Decimal('0.0') 
qty_bids_g_QTUMBUSD = Decimal('0.0') 
price_asks_g_QTUMBUSD = Decimal('0.0') 
qty_asks_g_QTUMBUSD = Decimal('0.0') 
stepSize_g_QTUMBUSD = Decimal('0.1') 


def on_message_QTUMBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QTUMBUSD = 'QTUMBUSD' 
	price_bids_c_l_QTUMBUSD = data['b'] 
	qty_bids_c_l_QTUMBUSD = data['B'] 
	price_asks_c_l_QTUMBUSD = data['a'] 
	qty_asks_c_l_QTUMBUSD = data['A'] 

	global symbol_g_QTUMBUSD 
	global price_bids_g_QTUMBUSD 
	global qty_bids_g_QTUMBUSD 
	global price_asks_g_QTUMBUSD 
	global qty_asks_g_QTUMBUSD 

	symbol_g_QTUMBUSD = symbol_c_l_QTUMBUSD 
	price_bids_g_QTUMBUSD = Decimal(price_bids_c_l_QTUMBUSD) 
	qty_bids_g_QTUMBUSD = Decimal(qty_bids_c_l_QTUMBUSD) 
	price_asks_g_QTUMBUSD = Decimal(price_asks_c_l_QTUMBUSD) 
	qty_asks_g_QTUMBUSD = Decimal(qty_asks_c_l_QTUMBUSD) 


def loop_QTUMBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/qtumbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QTUMBUSD) 
	ws.run_forever() 


Thread(target=loop_QTUMBUSD).start() 
symbol_g_ADABUSD = 'ADABUSD' 
price_bids_g_ADABUSD = Decimal('0.0') 
qty_bids_g_ADABUSD = Decimal('0.0') 
price_asks_g_ADABUSD = Decimal('0.0') 
qty_asks_g_ADABUSD = Decimal('0.0') 
stepSize_g_ADABUSD = Decimal('0.1') 


def on_message_ADABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADABUSD = 'ADABUSD' 
	price_bids_c_l_ADABUSD = data['b'] 
	qty_bids_c_l_ADABUSD = data['B'] 
	price_asks_c_l_ADABUSD = data['a'] 
	qty_asks_c_l_ADABUSD = data['A'] 

	global symbol_g_ADABUSD 
	global price_bids_g_ADABUSD 
	global qty_bids_g_ADABUSD 
	global price_asks_g_ADABUSD 
	global qty_asks_g_ADABUSD 

	symbol_g_ADABUSD = symbol_c_l_ADABUSD 
	price_bids_g_ADABUSD = Decimal(price_bids_c_l_ADABUSD) 
	qty_bids_g_ADABUSD = Decimal(qty_bids_c_l_ADABUSD) 
	price_asks_g_ADABUSD = Decimal(price_asks_c_l_ADABUSD) 
	qty_asks_g_ADABUSD = Decimal(qty_asks_c_l_ADABUSD) 


def loop_ADABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADABUSD) 
	ws.run_forever() 


Thread(target=loop_ADABUSD).start() 
symbol_g_ADAEUR = 'ADAEUR' 
price_bids_g_ADAEUR = Decimal('0.0') 
qty_bids_g_ADAEUR = Decimal('0.0') 
price_asks_g_ADAEUR = Decimal('0.0') 
qty_asks_g_ADAEUR = Decimal('0.0') 
stepSize_g_ADAEUR = Decimal('0.1') 


def on_message_ADAEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADAEUR = 'ADAEUR' 
	price_bids_c_l_ADAEUR = data['b'] 
	qty_bids_c_l_ADAEUR = data['B'] 
	price_asks_c_l_ADAEUR = data['a'] 
	qty_asks_c_l_ADAEUR = data['A'] 

	global symbol_g_ADAEUR 
	global price_bids_g_ADAEUR 
	global qty_bids_g_ADAEUR 
	global price_asks_g_ADAEUR 
	global qty_asks_g_ADAEUR 

	symbol_g_ADAEUR = symbol_c_l_ADAEUR 
	price_bids_g_ADAEUR = Decimal(price_bids_c_l_ADAEUR) 
	qty_bids_g_ADAEUR = Decimal(qty_bids_c_l_ADAEUR) 
	price_asks_g_ADAEUR = Decimal(price_asks_c_l_ADAEUR) 
	qty_asks_g_ADAEUR = Decimal(qty_asks_c_l_ADAEUR) 


def loop_ADAEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adaeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADAEUR) 
	ws.run_forever() 


Thread(target=loop_ADAEUR).start() 
symbol_g_ADAGBP = 'ADAGBP' 
price_bids_g_ADAGBP = Decimal('0.0') 
qty_bids_g_ADAGBP = Decimal('0.0') 
price_asks_g_ADAGBP = Decimal('0.0') 
qty_asks_g_ADAGBP = Decimal('0.0') 
stepSize_g_ADAGBP = Decimal('0.1') 


def on_message_ADAGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADAGBP = 'ADAGBP' 
	price_bids_c_l_ADAGBP = data['b'] 
	qty_bids_c_l_ADAGBP = data['B'] 
	price_asks_c_l_ADAGBP = data['a'] 
	qty_asks_c_l_ADAGBP = data['A'] 

	global symbol_g_ADAGBP 
	global price_bids_g_ADAGBP 
	global qty_bids_g_ADAGBP 
	global price_asks_g_ADAGBP 
	global qty_asks_g_ADAGBP 

	symbol_g_ADAGBP = symbol_c_l_ADAGBP 
	price_bids_g_ADAGBP = Decimal(price_bids_c_l_ADAGBP) 
	qty_bids_g_ADAGBP = Decimal(qty_bids_c_l_ADAGBP) 
	price_asks_g_ADAGBP = Decimal(price_asks_c_l_ADAGBP) 
	qty_asks_g_ADAGBP = Decimal(qty_asks_c_l_ADAGBP) 


def loop_ADAGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adagbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADAGBP) 
	ws.run_forever() 


Thread(target=loop_ADAGBP).start() 
symbol_g_ADAAUD = 'ADAAUD' 
price_bids_g_ADAAUD = Decimal('0.0') 
qty_bids_g_ADAAUD = Decimal('0.0') 
price_asks_g_ADAAUD = Decimal('0.0') 
qty_asks_g_ADAAUD = Decimal('0.0') 
stepSize_g_ADAAUD = Decimal('0.1') 


def on_message_ADAAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADAAUD = 'ADAAUD' 
	price_bids_c_l_ADAAUD = data['b'] 
	qty_bids_c_l_ADAAUD = data['B'] 
	price_asks_c_l_ADAAUD = data['a'] 
	qty_asks_c_l_ADAAUD = data['A'] 

	global symbol_g_ADAAUD 
	global price_bids_g_ADAAUD 
	global qty_bids_g_ADAAUD 
	global price_asks_g_ADAAUD 
	global qty_asks_g_ADAAUD 

	symbol_g_ADAAUD = symbol_c_l_ADAAUD 
	price_bids_g_ADAAUD = Decimal(price_bids_c_l_ADAAUD) 
	qty_bids_g_ADAAUD = Decimal(qty_bids_c_l_ADAAUD) 
	price_asks_g_ADAAUD = Decimal(price_asks_c_l_ADAAUD) 
	qty_asks_g_ADAAUD = Decimal(qty_asks_c_l_ADAAUD) 


def loop_ADAAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adaaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADAAUD) 
	ws.run_forever() 


Thread(target=loop_ADAAUD).start() 
symbol_g_TRXXRP = 'TRXXRP' 
price_bids_g_TRXXRP = Decimal('0.0') 
qty_bids_g_TRXXRP = Decimal('0.0') 
price_asks_g_TRXXRP = Decimal('0.0') 
qty_asks_g_TRXXRP = Decimal('0.0') 
stepSize_g_TRXXRP = Decimal('0.1') 


def on_message_TRXXRP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRXXRP = 'TRXXRP' 
	price_bids_c_l_TRXXRP = data['b'] 
	qty_bids_c_l_TRXXRP = data['B'] 
	price_asks_c_l_TRXXRP = data['a'] 
	qty_asks_c_l_TRXXRP = data['A'] 

	global symbol_g_TRXXRP 
	global price_bids_g_TRXXRP 
	global qty_bids_g_TRXXRP 
	global price_asks_g_TRXXRP 
	global qty_asks_g_TRXXRP 

	symbol_g_TRXXRP = symbol_c_l_TRXXRP 
	price_bids_g_TRXXRP = Decimal(price_bids_c_l_TRXXRP) 
	qty_bids_g_TRXXRP = Decimal(qty_bids_c_l_TRXXRP) 
	price_asks_g_TRXXRP = Decimal(price_asks_c_l_TRXXRP) 
	qty_asks_g_TRXXRP = Decimal(qty_asks_c_l_TRXXRP) 


def loop_TRXXRP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/trxxrp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRXXRP) 
	ws.run_forever() 


Thread(target=loop_TRXXRP).start() 
symbol_g_XRPBUSD = 'XRPBUSD' 
price_bids_g_XRPBUSD = Decimal('0.0') 
qty_bids_g_XRPBUSD = Decimal('0.0') 
price_asks_g_XRPBUSD = Decimal('0.0') 
qty_asks_g_XRPBUSD = Decimal('0.0') 
stepSize_g_XRPBUSD = Decimal('1.0') 


def on_message_XRPBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XRPBUSD = 'XRPBUSD' 
	price_bids_c_l_XRPBUSD = data['b'] 
	qty_bids_c_l_XRPBUSD = data['B'] 
	price_asks_c_l_XRPBUSD = data['a'] 
	qty_asks_c_l_XRPBUSD = data['A'] 

	global symbol_g_XRPBUSD 
	global price_bids_g_XRPBUSD 
	global qty_bids_g_XRPBUSD 
	global price_asks_g_XRPBUSD 
	global qty_asks_g_XRPBUSD 

	symbol_g_XRPBUSD = symbol_c_l_XRPBUSD 
	price_bids_g_XRPBUSD = Decimal(price_bids_c_l_XRPBUSD) 
	qty_bids_g_XRPBUSD = Decimal(qty_bids_c_l_XRPBUSD) 
	price_asks_g_XRPBUSD = Decimal(price_asks_c_l_XRPBUSD) 
	qty_asks_g_XRPBUSD = Decimal(qty_asks_c_l_XRPBUSD) 


def loop_XRPBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xrpbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XRPBUSD) 
	ws.run_forever() 


Thread(target=loop_XRPBUSD).start() 
symbol_g_XRPEUR = 'XRPEUR' 
price_bids_g_XRPEUR = Decimal('0.0') 
qty_bids_g_XRPEUR = Decimal('0.0') 
price_asks_g_XRPEUR = Decimal('0.0') 
qty_asks_g_XRPEUR = Decimal('0.0') 
stepSize_g_XRPEUR = Decimal('1.0') 


def on_message_XRPEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XRPEUR = 'XRPEUR' 
	price_bids_c_l_XRPEUR = data['b'] 
	qty_bids_c_l_XRPEUR = data['B'] 
	price_asks_c_l_XRPEUR = data['a'] 
	qty_asks_c_l_XRPEUR = data['A'] 

	global symbol_g_XRPEUR 
	global price_bids_g_XRPEUR 
	global qty_bids_g_XRPEUR 
	global price_asks_g_XRPEUR 
	global qty_asks_g_XRPEUR 

	symbol_g_XRPEUR = symbol_c_l_XRPEUR 
	price_bids_g_XRPEUR = Decimal(price_bids_c_l_XRPEUR) 
	qty_bids_g_XRPEUR = Decimal(qty_bids_c_l_XRPEUR) 
	price_asks_g_XRPEUR = Decimal(price_asks_c_l_XRPEUR) 
	qty_asks_g_XRPEUR = Decimal(qty_asks_c_l_XRPEUR) 


def loop_XRPEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xrpeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XRPEUR) 
	ws.run_forever() 


Thread(target=loop_XRPEUR).start() 
symbol_g_XRPGBP = 'XRPGBP' 
price_bids_g_XRPGBP = Decimal('0.0') 
qty_bids_g_XRPGBP = Decimal('0.0') 
price_asks_g_XRPGBP = Decimal('0.0') 
qty_asks_g_XRPGBP = Decimal('0.0') 
stepSize_g_XRPGBP = Decimal('1.0') 


def on_message_XRPGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XRPGBP = 'XRPGBP' 
	price_bids_c_l_XRPGBP = data['b'] 
	qty_bids_c_l_XRPGBP = data['B'] 
	price_asks_c_l_XRPGBP = data['a'] 
	qty_asks_c_l_XRPGBP = data['A'] 

	global symbol_g_XRPGBP 
	global price_bids_g_XRPGBP 
	global qty_bids_g_XRPGBP 
	global price_asks_g_XRPGBP 
	global qty_asks_g_XRPGBP 

	symbol_g_XRPGBP = symbol_c_l_XRPGBP 
	price_bids_g_XRPGBP = Decimal(price_bids_c_l_XRPGBP) 
	qty_bids_g_XRPGBP = Decimal(qty_bids_c_l_XRPGBP) 
	price_asks_g_XRPGBP = Decimal(price_asks_c_l_XRPGBP) 
	qty_asks_g_XRPGBP = Decimal(qty_asks_c_l_XRPGBP) 


def loop_XRPGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xrpgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XRPGBP) 
	ws.run_forever() 


Thread(target=loop_XRPGBP).start() 
symbol_g_XRPAUD = 'XRPAUD' 
price_bids_g_XRPAUD = Decimal('0.0') 
qty_bids_g_XRPAUD = Decimal('0.0') 
price_asks_g_XRPAUD = Decimal('0.0') 
qty_asks_g_XRPAUD = Decimal('0.0') 
stepSize_g_XRPAUD = Decimal('1.0') 


def on_message_XRPAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XRPAUD = 'XRPAUD' 
	price_bids_c_l_XRPAUD = data['b'] 
	qty_bids_c_l_XRPAUD = data['B'] 
	price_asks_c_l_XRPAUD = data['a'] 
	qty_asks_c_l_XRPAUD = data['A'] 

	global symbol_g_XRPAUD 
	global price_bids_g_XRPAUD 
	global qty_bids_g_XRPAUD 
	global price_asks_g_XRPAUD 
	global qty_asks_g_XRPAUD 

	symbol_g_XRPAUD = symbol_c_l_XRPAUD 
	price_bids_g_XRPAUD = Decimal(price_bids_c_l_XRPAUD) 
	qty_bids_g_XRPAUD = Decimal(qty_bids_c_l_XRPAUD) 
	price_asks_g_XRPAUD = Decimal(price_asks_c_l_XRPAUD) 
	qty_asks_g_XRPAUD = Decimal(qty_asks_c_l_XRPAUD) 


def loop_XRPAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xrpaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XRPAUD) 
	ws.run_forever() 


Thread(target=loop_XRPAUD).start() 
symbol_g_EOSBUSD = 'EOSBUSD' 
price_bids_g_EOSBUSD = Decimal('0.0') 
qty_bids_g_EOSBUSD = Decimal('0.0') 
price_asks_g_EOSBUSD = Decimal('0.0') 
qty_asks_g_EOSBUSD = Decimal('0.0') 
stepSize_g_EOSBUSD = Decimal('0.1') 


def on_message_EOSBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EOSBUSD = 'EOSBUSD' 
	price_bids_c_l_EOSBUSD = data['b'] 
	qty_bids_c_l_EOSBUSD = data['B'] 
	price_asks_c_l_EOSBUSD = data['a'] 
	qty_asks_c_l_EOSBUSD = data['A'] 

	global symbol_g_EOSBUSD 
	global price_bids_g_EOSBUSD 
	global qty_bids_g_EOSBUSD 
	global price_asks_g_EOSBUSD 
	global qty_asks_g_EOSBUSD 

	symbol_g_EOSBUSD = symbol_c_l_EOSBUSD 
	price_bids_g_EOSBUSD = Decimal(price_bids_c_l_EOSBUSD) 
	qty_bids_g_EOSBUSD = Decimal(qty_bids_c_l_EOSBUSD) 
	price_asks_g_EOSBUSD = Decimal(price_asks_c_l_EOSBUSD) 
	qty_asks_g_EOSBUSD = Decimal(qty_asks_c_l_EOSBUSD) 


def loop_EOSBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/eosbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EOSBUSD) 
	ws.run_forever() 


Thread(target=loop_EOSBUSD).start() 
symbol_g_EOSEUR = 'EOSEUR' 
price_bids_g_EOSEUR = Decimal('0.0') 
qty_bids_g_EOSEUR = Decimal('0.0') 
price_asks_g_EOSEUR = Decimal('0.0') 
qty_asks_g_EOSEUR = Decimal('0.0') 
stepSize_g_EOSEUR = Decimal('0.1') 


def on_message_EOSEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EOSEUR = 'EOSEUR' 
	price_bids_c_l_EOSEUR = data['b'] 
	qty_bids_c_l_EOSEUR = data['B'] 
	price_asks_c_l_EOSEUR = data['a'] 
	qty_asks_c_l_EOSEUR = data['A'] 

	global symbol_g_EOSEUR 
	global price_bids_g_EOSEUR 
	global qty_bids_g_EOSEUR 
	global price_asks_g_EOSEUR 
	global qty_asks_g_EOSEUR 

	symbol_g_EOSEUR = symbol_c_l_EOSEUR 
	price_bids_g_EOSEUR = Decimal(price_bids_c_l_EOSEUR) 
	qty_bids_g_EOSEUR = Decimal(qty_bids_c_l_EOSEUR) 
	price_asks_g_EOSEUR = Decimal(price_asks_c_l_EOSEUR) 
	qty_asks_g_EOSEUR = Decimal(qty_asks_c_l_EOSEUR) 


def loop_EOSEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/eoseur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EOSEUR) 
	ws.run_forever() 


Thread(target=loop_EOSEUR).start() 
symbol_g_IOTABUSD = 'IOTABUSD' 
price_bids_g_IOTABUSD = Decimal('0.0') 
qty_bids_g_IOTABUSD = Decimal('0.0') 
price_asks_g_IOTABUSD = Decimal('0.0') 
qty_asks_g_IOTABUSD = Decimal('0.0') 
stepSize_g_IOTABUSD = Decimal('1.0') 


def on_message_IOTABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IOTABUSD = 'IOTABUSD' 
	price_bids_c_l_IOTABUSD = data['b'] 
	qty_bids_c_l_IOTABUSD = data['B'] 
	price_asks_c_l_IOTABUSD = data['a'] 
	qty_asks_c_l_IOTABUSD = data['A'] 

	global symbol_g_IOTABUSD 
	global price_bids_g_IOTABUSD 
	global qty_bids_g_IOTABUSD 
	global price_asks_g_IOTABUSD 
	global qty_asks_g_IOTABUSD 

	symbol_g_IOTABUSD = symbol_c_l_IOTABUSD 
	price_bids_g_IOTABUSD = Decimal(price_bids_c_l_IOTABUSD) 
	qty_bids_g_IOTABUSD = Decimal(qty_bids_c_l_IOTABUSD) 
	price_asks_g_IOTABUSD = Decimal(price_asks_c_l_IOTABUSD) 
	qty_asks_g_IOTABUSD = Decimal(qty_asks_c_l_IOTABUSD) 


def loop_IOTABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/iotabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IOTABUSD) 
	ws.run_forever() 


Thread(target=loop_IOTABUSD).start() 
symbol_g_XLMBUSD = 'XLMBUSD' 
price_bids_g_XLMBUSD = Decimal('0.0') 
qty_bids_g_XLMBUSD = Decimal('0.0') 
price_asks_g_XLMBUSD = Decimal('0.0') 
qty_asks_g_XLMBUSD = Decimal('0.0') 
stepSize_g_XLMBUSD = Decimal('1.0') 


def on_message_XLMBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XLMBUSD = 'XLMBUSD' 
	price_bids_c_l_XLMBUSD = data['b'] 
	qty_bids_c_l_XLMBUSD = data['B'] 
	price_asks_c_l_XLMBUSD = data['a'] 
	qty_asks_c_l_XLMBUSD = data['A'] 

	global symbol_g_XLMBUSD 
	global price_bids_g_XLMBUSD 
	global qty_bids_g_XLMBUSD 
	global price_asks_g_XLMBUSD 
	global qty_asks_g_XLMBUSD 

	symbol_g_XLMBUSD = symbol_c_l_XLMBUSD 
	price_bids_g_XLMBUSD = Decimal(price_bids_c_l_XLMBUSD) 
	qty_bids_g_XLMBUSD = Decimal(qty_bids_c_l_XLMBUSD) 
	price_asks_g_XLMBUSD = Decimal(price_asks_c_l_XLMBUSD) 
	qty_asks_g_XLMBUSD = Decimal(qty_asks_c_l_XLMBUSD) 


def loop_XLMBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xlmbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XLMBUSD) 
	ws.run_forever() 


Thread(target=loop_XLMBUSD).start() 
symbol_g_XLMEUR = 'XLMEUR' 
price_bids_g_XLMEUR = Decimal('0.0') 
qty_bids_g_XLMEUR = Decimal('0.0') 
price_asks_g_XLMEUR = Decimal('0.0') 
qty_asks_g_XLMEUR = Decimal('0.0') 
stepSize_g_XLMEUR = Decimal('1.0') 


def on_message_XLMEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XLMEUR = 'XLMEUR' 
	price_bids_c_l_XLMEUR = data['b'] 
	qty_bids_c_l_XLMEUR = data['B'] 
	price_asks_c_l_XLMEUR = data['a'] 
	qty_asks_c_l_XLMEUR = data['A'] 

	global symbol_g_XLMEUR 
	global price_bids_g_XLMEUR 
	global qty_bids_g_XLMEUR 
	global price_asks_g_XLMEUR 
	global qty_asks_g_XLMEUR 

	symbol_g_XLMEUR = symbol_c_l_XLMEUR 
	price_bids_g_XLMEUR = Decimal(price_bids_c_l_XLMEUR) 
	qty_bids_g_XLMEUR = Decimal(qty_bids_c_l_XLMEUR) 
	price_asks_g_XLMEUR = Decimal(price_asks_c_l_XLMEUR) 
	qty_asks_g_XLMEUR = Decimal(qty_asks_c_l_XLMEUR) 


def loop_XLMEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xlmeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XLMEUR) 
	ws.run_forever() 


Thread(target=loop_XLMEUR).start() 
symbol_g_ONTBUSD = 'ONTBUSD' 
price_bids_g_ONTBUSD = Decimal('0.0') 
qty_bids_g_ONTBUSD = Decimal('0.0') 
price_asks_g_ONTBUSD = Decimal('0.0') 
qty_asks_g_ONTBUSD = Decimal('0.0') 
stepSize_g_ONTBUSD = Decimal('1.0') 


def on_message_ONTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ONTBUSD = 'ONTBUSD' 
	price_bids_c_l_ONTBUSD = data['b'] 
	qty_bids_c_l_ONTBUSD = data['B'] 
	price_asks_c_l_ONTBUSD = data['a'] 
	qty_asks_c_l_ONTBUSD = data['A'] 

	global symbol_g_ONTBUSD 
	global price_bids_g_ONTBUSD 
	global qty_bids_g_ONTBUSD 
	global price_asks_g_ONTBUSD 
	global qty_asks_g_ONTBUSD 

	symbol_g_ONTBUSD = symbol_c_l_ONTBUSD 
	price_bids_g_ONTBUSD = Decimal(price_bids_c_l_ONTBUSD) 
	qty_bids_g_ONTBUSD = Decimal(qty_bids_c_l_ONTBUSD) 
	price_asks_g_ONTBUSD = Decimal(price_asks_c_l_ONTBUSD) 
	qty_asks_g_ONTBUSD = Decimal(qty_asks_c_l_ONTBUSD) 


def loop_ONTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ontbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ONTBUSD) 
	ws.run_forever() 


Thread(target=loop_ONTBUSD).start() 
symbol_g_WINTRX = 'WINTRX' 
price_bids_g_WINTRX = Decimal('0.0') 
qty_bids_g_WINTRX = Decimal('0.0') 
price_asks_g_WINTRX = Decimal('0.0') 
qty_asks_g_WINTRX = Decimal('0.0') 
stepSize_g_WINTRX = Decimal('0.1') 


def on_message_WINTRX(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WINTRX = 'WINTRX' 
	price_bids_c_l_WINTRX = data['b'] 
	qty_bids_c_l_WINTRX = data['B'] 
	price_asks_c_l_WINTRX = data['a'] 
	qty_asks_c_l_WINTRX = data['A'] 

	global symbol_g_WINTRX 
	global price_bids_g_WINTRX 
	global qty_bids_g_WINTRX 
	global price_asks_g_WINTRX 
	global qty_asks_g_WINTRX 

	symbol_g_WINTRX = symbol_c_l_WINTRX 
	price_bids_g_WINTRX = Decimal(price_bids_c_l_WINTRX) 
	qty_bids_g_WINTRX = Decimal(qty_bids_c_l_WINTRX) 
	price_asks_g_WINTRX = Decimal(price_asks_c_l_WINTRX) 
	qty_asks_g_WINTRX = Decimal(qty_asks_c_l_WINTRX) 


def loop_WINTRX(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wintrx@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WINTRX) 
	ws.run_forever() 


Thread(target=loop_WINTRX).start() 
symbol_g_TRXBUSD = 'TRXBUSD' 
price_bids_g_TRXBUSD = Decimal('0.0') 
qty_bids_g_TRXBUSD = Decimal('0.0') 
price_asks_g_TRXBUSD = Decimal('0.0') 
qty_asks_g_TRXBUSD = Decimal('0.0') 
stepSize_g_TRXBUSD = Decimal('0.1') 


def on_message_TRXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRXBUSD = 'TRXBUSD' 
	price_bids_c_l_TRXBUSD = data['b'] 
	qty_bids_c_l_TRXBUSD = data['B'] 
	price_asks_c_l_TRXBUSD = data['a'] 
	qty_asks_c_l_TRXBUSD = data['A'] 

	global symbol_g_TRXBUSD 
	global price_bids_g_TRXBUSD 
	global qty_bids_g_TRXBUSD 
	global price_asks_g_TRXBUSD 
	global qty_asks_g_TRXBUSD 

	symbol_g_TRXBUSD = symbol_c_l_TRXBUSD 
	price_bids_g_TRXBUSD = Decimal(price_bids_c_l_TRXBUSD) 
	qty_bids_g_TRXBUSD = Decimal(qty_bids_c_l_TRXBUSD) 
	price_asks_g_TRXBUSD = Decimal(price_asks_c_l_TRXBUSD) 
	qty_asks_g_TRXBUSD = Decimal(qty_asks_c_l_TRXBUSD) 


def loop_TRXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/trxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRXBUSD) 
	ws.run_forever() 


Thread(target=loop_TRXBUSD).start() 
symbol_g_TRXEUR = 'TRXEUR' 
price_bids_g_TRXEUR = Decimal('0.0') 
qty_bids_g_TRXEUR = Decimal('0.0') 
price_asks_g_TRXEUR = Decimal('0.0') 
qty_asks_g_TRXEUR = Decimal('0.0') 
stepSize_g_TRXEUR = Decimal('1.0') 


def on_message_TRXEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRXEUR = 'TRXEUR' 
	price_bids_c_l_TRXEUR = data['b'] 
	qty_bids_c_l_TRXEUR = data['B'] 
	price_asks_c_l_TRXEUR = data['a'] 
	qty_asks_c_l_TRXEUR = data['A'] 

	global symbol_g_TRXEUR 
	global price_bids_g_TRXEUR 
	global qty_bids_g_TRXEUR 
	global price_asks_g_TRXEUR 
	global qty_asks_g_TRXEUR 

	symbol_g_TRXEUR = symbol_c_l_TRXEUR 
	price_bids_g_TRXEUR = Decimal(price_bids_c_l_TRXEUR) 
	qty_bids_g_TRXEUR = Decimal(qty_bids_c_l_TRXEUR) 
	price_asks_g_TRXEUR = Decimal(price_asks_c_l_TRXEUR) 
	qty_asks_g_TRXEUR = Decimal(qty_asks_c_l_TRXEUR) 


def loop_TRXEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/trxeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRXEUR) 
	ws.run_forever() 


Thread(target=loop_TRXEUR).start() 
symbol_g_ETCBUSD = 'ETCBUSD' 
price_bids_g_ETCBUSD = Decimal('0.0') 
qty_bids_g_ETCBUSD = Decimal('0.0') 
price_asks_g_ETCBUSD = Decimal('0.0') 
qty_asks_g_ETCBUSD = Decimal('0.0') 
stepSize_g_ETCBUSD = Decimal('0.01') 


def on_message_ETCBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETCBUSD = 'ETCBUSD' 
	price_bids_c_l_ETCBUSD = data['b'] 
	qty_bids_c_l_ETCBUSD = data['B'] 
	price_asks_c_l_ETCBUSD = data['a'] 
	qty_asks_c_l_ETCBUSD = data['A'] 

	global symbol_g_ETCBUSD 
	global price_bids_g_ETCBUSD 
	global qty_bids_g_ETCBUSD 
	global price_asks_g_ETCBUSD 
	global qty_asks_g_ETCBUSD 

	symbol_g_ETCBUSD = symbol_c_l_ETCBUSD 
	price_bids_g_ETCBUSD = Decimal(price_bids_c_l_ETCBUSD) 
	qty_bids_g_ETCBUSD = Decimal(qty_bids_c_l_ETCBUSD) 
	price_asks_g_ETCBUSD = Decimal(price_asks_c_l_ETCBUSD) 
	qty_asks_g_ETCBUSD = Decimal(qty_asks_c_l_ETCBUSD) 


def loop_ETCBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/etcbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETCBUSD) 
	ws.run_forever() 


Thread(target=loop_ETCBUSD).start() 
symbol_g_ETCEUR = 'ETCEUR' 
price_bids_g_ETCEUR = Decimal('0.0') 
qty_bids_g_ETCEUR = Decimal('0.0') 
price_asks_g_ETCEUR = Decimal('0.0') 
qty_asks_g_ETCEUR = Decimal('0.0') 
stepSize_g_ETCEUR = Decimal('0.01') 


def on_message_ETCEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ETCEUR = 'ETCEUR' 
	price_bids_c_l_ETCEUR = data['b'] 
	qty_bids_c_l_ETCEUR = data['B'] 
	price_asks_c_l_ETCEUR = data['a'] 
	qty_asks_c_l_ETCEUR = data['A'] 

	global symbol_g_ETCEUR 
	global price_bids_g_ETCEUR 
	global qty_bids_g_ETCEUR 
	global price_asks_g_ETCEUR 
	global qty_asks_g_ETCEUR 

	symbol_g_ETCEUR = symbol_c_l_ETCEUR 
	price_bids_g_ETCEUR = Decimal(price_bids_c_l_ETCEUR) 
	qty_bids_g_ETCEUR = Decimal(qty_bids_c_l_ETCEUR) 
	price_asks_g_ETCEUR = Decimal(price_asks_c_l_ETCEUR) 
	qty_asks_g_ETCEUR = Decimal(qty_asks_c_l_ETCEUR) 


def loop_ETCEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/etceur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ETCEUR) 
	ws.run_forever() 


Thread(target=loop_ETCEUR).start() 
symbol_g_ICXBUSD = 'ICXBUSD' 
price_bids_g_ICXBUSD = Decimal('0.0') 
qty_bids_g_ICXBUSD = Decimal('0.0') 
price_asks_g_ICXBUSD = Decimal('0.0') 
qty_asks_g_ICXBUSD = Decimal('0.0') 
stepSize_g_ICXBUSD = Decimal('0.1') 


def on_message_ICXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ICXBUSD = 'ICXBUSD' 
	price_bids_c_l_ICXBUSD = data['b'] 
	qty_bids_c_l_ICXBUSD = data['B'] 
	price_asks_c_l_ICXBUSD = data['a'] 
	qty_asks_c_l_ICXBUSD = data['A'] 

	global symbol_g_ICXBUSD 
	global price_bids_g_ICXBUSD 
	global qty_bids_g_ICXBUSD 
	global price_asks_g_ICXBUSD 
	global qty_asks_g_ICXBUSD 

	symbol_g_ICXBUSD = symbol_c_l_ICXBUSD 
	price_bids_g_ICXBUSD = Decimal(price_bids_c_l_ICXBUSD) 
	qty_bids_g_ICXBUSD = Decimal(qty_bids_c_l_ICXBUSD) 
	price_asks_g_ICXBUSD = Decimal(price_asks_c_l_ICXBUSD) 
	qty_asks_g_ICXBUSD = Decimal(qty_asks_c_l_ICXBUSD) 


def loop_ICXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/icxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ICXBUSD) 
	ws.run_forever() 


Thread(target=loop_ICXBUSD).start() 
symbol_g_NULSBUSD = 'NULSBUSD' 
price_bids_g_NULSBUSD = Decimal('0.0') 
qty_bids_g_NULSBUSD = Decimal('0.0') 
price_asks_g_NULSBUSD = Decimal('0.0') 
qty_asks_g_NULSBUSD = Decimal('0.0') 
stepSize_g_NULSBUSD = Decimal('1.0') 


def on_message_NULSBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NULSBUSD = 'NULSBUSD' 
	price_bids_c_l_NULSBUSD = data['b'] 
	qty_bids_c_l_NULSBUSD = data['B'] 
	price_asks_c_l_NULSBUSD = data['a'] 
	qty_asks_c_l_NULSBUSD = data['A'] 

	global symbol_g_NULSBUSD 
	global price_bids_g_NULSBUSD 
	global qty_bids_g_NULSBUSD 
	global price_asks_g_NULSBUSD 
	global qty_asks_g_NULSBUSD 

	symbol_g_NULSBUSD = symbol_c_l_NULSBUSD 
	price_bids_g_NULSBUSD = Decimal(price_bids_c_l_NULSBUSD) 
	qty_bids_g_NULSBUSD = Decimal(qty_bids_c_l_NULSBUSD) 
	price_asks_g_NULSBUSD = Decimal(price_asks_c_l_NULSBUSD) 
	qty_asks_g_NULSBUSD = Decimal(qty_asks_c_l_NULSBUSD) 


def loop_NULSBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nulsbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NULSBUSD) 
	ws.run_forever() 


Thread(target=loop_NULSBUSD).start() 
symbol_g_VETBUSD = 'VETBUSD' 
price_bids_g_VETBUSD = Decimal('0.0') 
qty_bids_g_VETBUSD = Decimal('0.0') 
price_asks_g_VETBUSD = Decimal('0.0') 
qty_asks_g_VETBUSD = Decimal('0.0') 
stepSize_g_VETBUSD = Decimal('0.1') 


def on_message_VETBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VETBUSD = 'VETBUSD' 
	price_bids_c_l_VETBUSD = data['b'] 
	qty_bids_c_l_VETBUSD = data['B'] 
	price_asks_c_l_VETBUSD = data['a'] 
	qty_asks_c_l_VETBUSD = data['A'] 

	global symbol_g_VETBUSD 
	global price_bids_g_VETBUSD 
	global qty_bids_g_VETBUSD 
	global price_asks_g_VETBUSD 
	global qty_asks_g_VETBUSD 

	symbol_g_VETBUSD = symbol_c_l_VETBUSD 
	price_bids_g_VETBUSD = Decimal(price_bids_c_l_VETBUSD) 
	qty_bids_g_VETBUSD = Decimal(qty_bids_c_l_VETBUSD) 
	price_asks_g_VETBUSD = Decimal(price_asks_c_l_VETBUSD) 
	qty_asks_g_VETBUSD = Decimal(qty_asks_c_l_VETBUSD) 


def loop_VETBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/vetbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VETBUSD) 
	ws.run_forever() 


Thread(target=loop_VETBUSD).start() 
symbol_g_VETEUR = 'VETEUR' 
price_bids_g_VETEUR = Decimal('0.0') 
qty_bids_g_VETEUR = Decimal('0.0') 
price_asks_g_VETEUR = Decimal('0.0') 
qty_asks_g_VETEUR = Decimal('0.0') 
stepSize_g_VETEUR = Decimal('0.01') 


def on_message_VETEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VETEUR = 'VETEUR' 
	price_bids_c_l_VETEUR = data['b'] 
	qty_bids_c_l_VETEUR = data['B'] 
	price_asks_c_l_VETEUR = data['a'] 
	qty_asks_c_l_VETEUR = data['A'] 

	global symbol_g_VETEUR 
	global price_bids_g_VETEUR 
	global qty_bids_g_VETEUR 
	global price_asks_g_VETEUR 
	global qty_asks_g_VETEUR 

	symbol_g_VETEUR = symbol_c_l_VETEUR 
	price_bids_g_VETEUR = Decimal(price_bids_c_l_VETEUR) 
	qty_bids_g_VETEUR = Decimal(qty_bids_c_l_VETEUR) 
	price_asks_g_VETEUR = Decimal(price_asks_c_l_VETEUR) 
	qty_asks_g_VETEUR = Decimal(qty_asks_c_l_VETEUR) 


def loop_VETEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/veteur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VETEUR) 
	ws.run_forever() 


Thread(target=loop_VETEUR).start() 
symbol_g_VETGBP = 'VETGBP' 
price_bids_g_VETGBP = Decimal('0.0') 
qty_bids_g_VETGBP = Decimal('0.0') 
price_asks_g_VETGBP = Decimal('0.0') 
qty_asks_g_VETGBP = Decimal('0.0') 
stepSize_g_VETGBP = Decimal('0.01') 


def on_message_VETGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VETGBP = 'VETGBP' 
	price_bids_c_l_VETGBP = data['b'] 
	qty_bids_c_l_VETGBP = data['B'] 
	price_asks_c_l_VETGBP = data['a'] 
	qty_asks_c_l_VETGBP = data['A'] 

	global symbol_g_VETGBP 
	global price_bids_g_VETGBP 
	global qty_bids_g_VETGBP 
	global price_asks_g_VETGBP 
	global qty_asks_g_VETGBP 

	symbol_g_VETGBP = symbol_c_l_VETGBP 
	price_bids_g_VETGBP = Decimal(price_bids_c_l_VETGBP) 
	qty_bids_g_VETGBP = Decimal(qty_bids_c_l_VETGBP) 
	price_asks_g_VETGBP = Decimal(price_asks_c_l_VETGBP) 
	qty_asks_g_VETGBP = Decimal(qty_asks_c_l_VETGBP) 


def loop_VETGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/vetgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VETGBP) 
	ws.run_forever() 


Thread(target=loop_VETGBP).start() 
symbol_g_LINKBUSD = 'LINKBUSD' 
price_bids_g_LINKBUSD = Decimal('0.0') 
qty_bids_g_LINKBUSD = Decimal('0.0') 
price_asks_g_LINKBUSD = Decimal('0.0') 
qty_asks_g_LINKBUSD = Decimal('0.0') 
stepSize_g_LINKBUSD = Decimal('0.01') 


def on_message_LINKBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LINKBUSD = 'LINKBUSD' 
	price_bids_c_l_LINKBUSD = data['b'] 
	qty_bids_c_l_LINKBUSD = data['B'] 
	price_asks_c_l_LINKBUSD = data['a'] 
	qty_asks_c_l_LINKBUSD = data['A'] 

	global symbol_g_LINKBUSD 
	global price_bids_g_LINKBUSD 
	global qty_bids_g_LINKBUSD 
	global price_asks_g_LINKBUSD 
	global qty_asks_g_LINKBUSD 

	symbol_g_LINKBUSD = symbol_c_l_LINKBUSD 
	price_bids_g_LINKBUSD = Decimal(price_bids_c_l_LINKBUSD) 
	qty_bids_g_LINKBUSD = Decimal(qty_bids_c_l_LINKBUSD) 
	price_asks_g_LINKBUSD = Decimal(price_asks_c_l_LINKBUSD) 
	qty_asks_g_LINKBUSD = Decimal(qty_asks_c_l_LINKBUSD) 


def loop_LINKBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/linkbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LINKBUSD) 
	ws.run_forever() 


Thread(target=loop_LINKBUSD).start() 
symbol_g_LINKAUD = 'LINKAUD' 
price_bids_g_LINKAUD = Decimal('0.0') 
qty_bids_g_LINKAUD = Decimal('0.0') 
price_asks_g_LINKAUD = Decimal('0.0') 
qty_asks_g_LINKAUD = Decimal('0.0') 
stepSize_g_LINKAUD = Decimal('0.01') 


def on_message_LINKAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LINKAUD = 'LINKAUD' 
	price_bids_c_l_LINKAUD = data['b'] 
	qty_bids_c_l_LINKAUD = data['B'] 
	price_asks_c_l_LINKAUD = data['a'] 
	qty_asks_c_l_LINKAUD = data['A'] 

	global symbol_g_LINKAUD 
	global price_bids_g_LINKAUD 
	global qty_bids_g_LINKAUD 
	global price_asks_g_LINKAUD 
	global qty_asks_g_LINKAUD 

	symbol_g_LINKAUD = symbol_c_l_LINKAUD 
	price_bids_g_LINKAUD = Decimal(price_bids_c_l_LINKAUD) 
	qty_bids_g_LINKAUD = Decimal(qty_bids_c_l_LINKAUD) 
	price_asks_g_LINKAUD = Decimal(price_asks_c_l_LINKAUD) 
	qty_asks_g_LINKAUD = Decimal(qty_asks_c_l_LINKAUD) 


def loop_LINKAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/linkaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LINKAUD) 
	ws.run_forever() 


Thread(target=loop_LINKAUD).start() 
symbol_g_LINKEUR = 'LINKEUR' 
price_bids_g_LINKEUR = Decimal('0.0') 
qty_bids_g_LINKEUR = Decimal('0.0') 
price_asks_g_LINKEUR = Decimal('0.0') 
qty_asks_g_LINKEUR = Decimal('0.0') 
stepSize_g_LINKEUR = Decimal('0.01') 


def on_message_LINKEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LINKEUR = 'LINKEUR' 
	price_bids_c_l_LINKEUR = data['b'] 
	qty_bids_c_l_LINKEUR = data['B'] 
	price_asks_c_l_LINKEUR = data['a'] 
	qty_asks_c_l_LINKEUR = data['A'] 

	global symbol_g_LINKEUR 
	global price_bids_g_LINKEUR 
	global qty_bids_g_LINKEUR 
	global price_asks_g_LINKEUR 
	global qty_asks_g_LINKEUR 

	symbol_g_LINKEUR = symbol_c_l_LINKEUR 
	price_bids_g_LINKEUR = Decimal(price_bids_c_l_LINKEUR) 
	qty_bids_g_LINKEUR = Decimal(qty_bids_c_l_LINKEUR) 
	price_asks_g_LINKEUR = Decimal(price_asks_c_l_LINKEUR) 
	qty_asks_g_LINKEUR = Decimal(qty_asks_c_l_LINKEUR) 


def loop_LINKEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/linkeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LINKEUR) 
	ws.run_forever() 


Thread(target=loop_LINKEUR).start() 
symbol_g_LINKGBP = 'LINKGBP' 
price_bids_g_LINKGBP = Decimal('0.0') 
qty_bids_g_LINKGBP = Decimal('0.0') 
price_asks_g_LINKGBP = Decimal('0.0') 
qty_asks_g_LINKGBP = Decimal('0.0') 
stepSize_g_LINKGBP = Decimal('0.01') 


def on_message_LINKGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LINKGBP = 'LINKGBP' 
	price_bids_c_l_LINKGBP = data['b'] 
	qty_bids_c_l_LINKGBP = data['B'] 
	price_asks_c_l_LINKGBP = data['a'] 
	qty_asks_c_l_LINKGBP = data['A'] 

	global symbol_g_LINKGBP 
	global price_bids_g_LINKGBP 
	global qty_bids_g_LINKGBP 
	global price_asks_g_LINKGBP 
	global qty_asks_g_LINKGBP 

	symbol_g_LINKGBP = symbol_c_l_LINKGBP 
	price_bids_g_LINKGBP = Decimal(price_bids_c_l_LINKGBP) 
	qty_bids_g_LINKGBP = Decimal(qty_bids_c_l_LINKGBP) 
	price_asks_g_LINKGBP = Decimal(price_asks_c_l_LINKGBP) 
	qty_asks_g_LINKGBP = Decimal(qty_asks_c_l_LINKGBP) 


def loop_LINKGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/linkgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LINKGBP) 
	ws.run_forever() 


Thread(target=loop_LINKGBP).start() 
symbol_g_WAVESBUSD = 'WAVESBUSD' 
price_bids_g_WAVESBUSD = Decimal('0.0') 
qty_bids_g_WAVESBUSD = Decimal('0.0') 
price_asks_g_WAVESBUSD = Decimal('0.0') 
qty_asks_g_WAVESBUSD = Decimal('0.0') 
stepSize_g_WAVESBUSD = Decimal('0.01') 


def on_message_WAVESBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WAVESBUSD = 'WAVESBUSD' 
	price_bids_c_l_WAVESBUSD = data['b'] 
	qty_bids_c_l_WAVESBUSD = data['B'] 
	price_asks_c_l_WAVESBUSD = data['a'] 
	qty_asks_c_l_WAVESBUSD = data['A'] 

	global symbol_g_WAVESBUSD 
	global price_bids_g_WAVESBUSD 
	global qty_bids_g_WAVESBUSD 
	global price_asks_g_WAVESBUSD 
	global qty_asks_g_WAVESBUSD 

	symbol_g_WAVESBUSD = symbol_c_l_WAVESBUSD 
	price_bids_g_WAVESBUSD = Decimal(price_bids_c_l_WAVESBUSD) 
	qty_bids_g_WAVESBUSD = Decimal(qty_bids_c_l_WAVESBUSD) 
	price_asks_g_WAVESBUSD = Decimal(price_asks_c_l_WAVESBUSD) 
	qty_asks_g_WAVESBUSD = Decimal(qty_asks_c_l_WAVESBUSD) 


def loop_WAVESBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wavesbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WAVESBUSD) 
	ws.run_forever() 


Thread(target=loop_WAVESBUSD).start() 
symbol_g_WAVESEUR = 'WAVESEUR' 
price_bids_g_WAVESEUR = Decimal('0.0') 
qty_bids_g_WAVESEUR = Decimal('0.0') 
price_asks_g_WAVESEUR = Decimal('0.0') 
qty_asks_g_WAVESEUR = Decimal('0.0') 
stepSize_g_WAVESEUR = Decimal('0.01') 


def on_message_WAVESEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WAVESEUR = 'WAVESEUR' 
	price_bids_c_l_WAVESEUR = data['b'] 
	qty_bids_c_l_WAVESEUR = data['B'] 
	price_asks_c_l_WAVESEUR = data['a'] 
	qty_asks_c_l_WAVESEUR = data['A'] 

	global symbol_g_WAVESEUR 
	global price_bids_g_WAVESEUR 
	global qty_bids_g_WAVESEUR 
	global price_asks_g_WAVESEUR 
	global qty_asks_g_WAVESEUR 

	symbol_g_WAVESEUR = symbol_c_l_WAVESEUR 
	price_bids_g_WAVESEUR = Decimal(price_bids_c_l_WAVESEUR) 
	qty_bids_g_WAVESEUR = Decimal(qty_bids_c_l_WAVESEUR) 
	price_asks_g_WAVESEUR = Decimal(price_asks_c_l_WAVESEUR) 
	qty_asks_g_WAVESEUR = Decimal(qty_asks_c_l_WAVESEUR) 


def loop_WAVESEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/waveseur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WAVESEUR) 
	ws.run_forever() 


Thread(target=loop_WAVESEUR).start() 
symbol_g_HOTEUR = 'HOTEUR' 
price_bids_g_HOTEUR = Decimal('0.0') 
qty_bids_g_HOTEUR = Decimal('0.0') 
price_asks_g_HOTEUR = Decimal('0.0') 
qty_asks_g_HOTEUR = Decimal('0.0') 
stepSize_g_HOTEUR = Decimal('0.1') 


def on_message_HOTEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HOTEUR = 'HOTEUR' 
	price_bids_c_l_HOTEUR = data['b'] 
	qty_bids_c_l_HOTEUR = data['B'] 
	price_asks_c_l_HOTEUR = data['a'] 
	qty_asks_c_l_HOTEUR = data['A'] 

	global symbol_g_HOTEUR 
	global price_bids_g_HOTEUR 
	global qty_bids_g_HOTEUR 
	global price_asks_g_HOTEUR 
	global qty_asks_g_HOTEUR 

	symbol_g_HOTEUR = symbol_c_l_HOTEUR 
	price_bids_g_HOTEUR = Decimal(price_bids_c_l_HOTEUR) 
	qty_bids_g_HOTEUR = Decimal(qty_bids_c_l_HOTEUR) 
	price_asks_g_HOTEUR = Decimal(price_asks_c_l_HOTEUR) 
	qty_asks_g_HOTEUR = Decimal(qty_asks_c_l_HOTEUR) 


def loop_HOTEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hoteur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HOTEUR) 
	ws.run_forever() 


Thread(target=loop_HOTEUR).start() 
symbol_g_HOTBUSD = 'HOTBUSD' 
price_bids_g_HOTBUSD = Decimal('0.0') 
qty_bids_g_HOTBUSD = Decimal('0.0') 
price_asks_g_HOTBUSD = Decimal('0.0') 
qty_asks_g_HOTBUSD = Decimal('0.0') 
stepSize_g_HOTBUSD = Decimal('0.1') 


def on_message_HOTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HOTBUSD = 'HOTBUSD' 
	price_bids_c_l_HOTBUSD = data['b'] 
	qty_bids_c_l_HOTBUSD = data['B'] 
	price_asks_c_l_HOTBUSD = data['a'] 
	qty_asks_c_l_HOTBUSD = data['A'] 

	global symbol_g_HOTBUSD 
	global price_bids_g_HOTBUSD 
	global qty_bids_g_HOTBUSD 
	global price_asks_g_HOTBUSD 
	global qty_asks_g_HOTBUSD 

	symbol_g_HOTBUSD = symbol_c_l_HOTBUSD 
	price_bids_g_HOTBUSD = Decimal(price_bids_c_l_HOTBUSD) 
	qty_bids_g_HOTBUSD = Decimal(qty_bids_c_l_HOTBUSD) 
	price_asks_g_HOTBUSD = Decimal(price_asks_c_l_HOTBUSD) 
	qty_asks_g_HOTBUSD = Decimal(qty_asks_c_l_HOTBUSD) 


def loop_HOTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hotbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HOTBUSD) 
	ws.run_forever() 


Thread(target=loop_HOTBUSD).start() 
symbol_g_ZILBUSD = 'ZILBUSD' 
price_bids_g_ZILBUSD = Decimal('0.0') 
qty_bids_g_ZILBUSD = Decimal('0.0') 
price_asks_g_ZILBUSD = Decimal('0.0') 
qty_asks_g_ZILBUSD = Decimal('0.0') 
stepSize_g_ZILBUSD = Decimal('0.1') 


def on_message_ZILBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZILBUSD = 'ZILBUSD' 
	price_bids_c_l_ZILBUSD = data['b'] 
	qty_bids_c_l_ZILBUSD = data['B'] 
	price_asks_c_l_ZILBUSD = data['a'] 
	qty_asks_c_l_ZILBUSD = data['A'] 

	global symbol_g_ZILBUSD 
	global price_bids_g_ZILBUSD 
	global qty_bids_g_ZILBUSD 
	global price_asks_g_ZILBUSD 
	global qty_asks_g_ZILBUSD 

	symbol_g_ZILBUSD = symbol_c_l_ZILBUSD 
	price_bids_g_ZILBUSD = Decimal(price_bids_c_l_ZILBUSD) 
	qty_bids_g_ZILBUSD = Decimal(qty_bids_c_l_ZILBUSD) 
	price_asks_g_ZILBUSD = Decimal(price_asks_c_l_ZILBUSD) 
	qty_asks_g_ZILBUSD = Decimal(qty_asks_c_l_ZILBUSD) 


def loop_ZILBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zilbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZILBUSD) 
	ws.run_forever() 


Thread(target=loop_ZILBUSD).start() 
symbol_g_ZRXBUSD = 'ZRXBUSD' 
price_bids_g_ZRXBUSD = Decimal('0.0') 
qty_bids_g_ZRXBUSD = Decimal('0.0') 
price_asks_g_ZRXBUSD = Decimal('0.0') 
qty_asks_g_ZRXBUSD = Decimal('0.0') 
stepSize_g_ZRXBUSD = Decimal('1.0') 


def on_message_ZRXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZRXBUSD = 'ZRXBUSD' 
	price_bids_c_l_ZRXBUSD = data['b'] 
	qty_bids_c_l_ZRXBUSD = data['B'] 
	price_asks_c_l_ZRXBUSD = data['a'] 
	qty_asks_c_l_ZRXBUSD = data['A'] 

	global symbol_g_ZRXBUSD 
	global price_bids_g_ZRXBUSD 
	global qty_bids_g_ZRXBUSD 
	global price_asks_g_ZRXBUSD 
	global qty_asks_g_ZRXBUSD 

	symbol_g_ZRXBUSD = symbol_c_l_ZRXBUSD 
	price_bids_g_ZRXBUSD = Decimal(price_bids_c_l_ZRXBUSD) 
	qty_bids_g_ZRXBUSD = Decimal(qty_bids_c_l_ZRXBUSD) 
	price_asks_g_ZRXBUSD = Decimal(price_asks_c_l_ZRXBUSD) 
	qty_asks_g_ZRXBUSD = Decimal(qty_asks_c_l_ZRXBUSD) 


def loop_ZRXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zrxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZRXBUSD) 
	ws.run_forever() 


Thread(target=loop_ZRXBUSD).start() 
symbol_g_FETBUSD = 'FETBUSD' 
price_bids_g_FETBUSD = Decimal('0.0') 
qty_bids_g_FETBUSD = Decimal('0.0') 
price_asks_g_FETBUSD = Decimal('0.0') 
qty_asks_g_FETBUSD = Decimal('0.0') 
stepSize_g_FETBUSD = Decimal('1.0') 


def on_message_FETBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FETBUSD = 'FETBUSD' 
	price_bids_c_l_FETBUSD = data['b'] 
	qty_bids_c_l_FETBUSD = data['B'] 
	price_asks_c_l_FETBUSD = data['a'] 
	qty_asks_c_l_FETBUSD = data['A'] 

	global symbol_g_FETBUSD 
	global price_bids_g_FETBUSD 
	global qty_bids_g_FETBUSD 
	global price_asks_g_FETBUSD 
	global qty_asks_g_FETBUSD 

	symbol_g_FETBUSD = symbol_c_l_FETBUSD 
	price_bids_g_FETBUSD = Decimal(price_bids_c_l_FETBUSD) 
	qty_bids_g_FETBUSD = Decimal(qty_bids_c_l_FETBUSD) 
	price_asks_g_FETBUSD = Decimal(price_asks_c_l_FETBUSD) 
	qty_asks_g_FETBUSD = Decimal(qty_asks_c_l_FETBUSD) 


def loop_FETBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fetbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FETBUSD) 
	ws.run_forever() 


Thread(target=loop_FETBUSD).start() 
symbol_g_BATBUSD = 'BATBUSD' 
price_bids_g_BATBUSD = Decimal('0.0') 
qty_bids_g_BATBUSD = Decimal('0.0') 
price_asks_g_BATBUSD = Decimal('0.0') 
qty_asks_g_BATBUSD = Decimal('0.0') 
stepSize_g_BATBUSD = Decimal('1.0') 


def on_message_BATBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BATBUSD = 'BATBUSD' 
	price_bids_c_l_BATBUSD = data['b'] 
	qty_bids_c_l_BATBUSD = data['B'] 
	price_asks_c_l_BATBUSD = data['a'] 
	qty_asks_c_l_BATBUSD = data['A'] 

	global symbol_g_BATBUSD 
	global price_bids_g_BATBUSD 
	global qty_bids_g_BATBUSD 
	global price_asks_g_BATBUSD 
	global qty_asks_g_BATBUSD 

	symbol_g_BATBUSD = symbol_c_l_BATBUSD 
	price_bids_g_BATBUSD = Decimal(price_bids_c_l_BATBUSD) 
	qty_bids_g_BATBUSD = Decimal(qty_bids_c_l_BATBUSD) 
	price_asks_g_BATBUSD = Decimal(price_asks_c_l_BATBUSD) 
	qty_asks_g_BATBUSD = Decimal(qty_asks_c_l_BATBUSD) 


def loop_BATBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/batbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BATBUSD) 
	ws.run_forever() 


Thread(target=loop_BATBUSD).start() 
symbol_g_XMRBUSD = 'XMRBUSD' 
price_bids_g_XMRBUSD = Decimal('0.0') 
qty_bids_g_XMRBUSD = Decimal('0.0') 
price_asks_g_XMRBUSD = Decimal('0.0') 
qty_asks_g_XMRBUSD = Decimal('0.0') 
stepSize_g_XMRBUSD = Decimal('0.001') 


def on_message_XMRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XMRBUSD = 'XMRBUSD' 
	price_bids_c_l_XMRBUSD = data['b'] 
	qty_bids_c_l_XMRBUSD = data['B'] 
	price_asks_c_l_XMRBUSD = data['a'] 
	qty_asks_c_l_XMRBUSD = data['A'] 

	global symbol_g_XMRBUSD 
	global price_bids_g_XMRBUSD 
	global qty_bids_g_XMRBUSD 
	global price_asks_g_XMRBUSD 
	global qty_asks_g_XMRBUSD 

	symbol_g_XMRBUSD = symbol_c_l_XMRBUSD 
	price_bids_g_XMRBUSD = Decimal(price_bids_c_l_XMRBUSD) 
	qty_bids_g_XMRBUSD = Decimal(qty_bids_c_l_XMRBUSD) 
	price_asks_g_XMRBUSD = Decimal(price_asks_c_l_XMRBUSD) 
	qty_asks_g_XMRBUSD = Decimal(qty_asks_c_l_XMRBUSD) 


def loop_XMRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xmrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XMRBUSD) 
	ws.run_forever() 


Thread(target=loop_XMRBUSD).start() 
symbol_g_ZECBUSD = 'ZECBUSD' 
price_bids_g_ZECBUSD = Decimal('0.0') 
qty_bids_g_ZECBUSD = Decimal('0.0') 
price_asks_g_ZECBUSD = Decimal('0.0') 
qty_asks_g_ZECBUSD = Decimal('0.0') 
stepSize_g_ZECBUSD = Decimal('0.001') 


def on_message_ZECBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZECBUSD = 'ZECBUSD' 
	price_bids_c_l_ZECBUSD = data['b'] 
	qty_bids_c_l_ZECBUSD = data['B'] 
	price_asks_c_l_ZECBUSD = data['a'] 
	qty_asks_c_l_ZECBUSD = data['A'] 

	global symbol_g_ZECBUSD 
	global price_bids_g_ZECBUSD 
	global qty_bids_g_ZECBUSD 
	global price_asks_g_ZECBUSD 
	global qty_asks_g_ZECBUSD 

	symbol_g_ZECBUSD = symbol_c_l_ZECBUSD 
	price_bids_g_ZECBUSD = Decimal(price_bids_c_l_ZECBUSD) 
	qty_bids_g_ZECBUSD = Decimal(qty_bids_c_l_ZECBUSD) 
	price_asks_g_ZECBUSD = Decimal(price_asks_c_l_ZECBUSD) 
	qty_asks_g_ZECBUSD = Decimal(qty_asks_c_l_ZECBUSD) 


def loop_ZECBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zecbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZECBUSD) 
	ws.run_forever() 


Thread(target=loop_ZECBUSD).start() 
symbol_g_IOSTBUSD = 'IOSTBUSD' 
price_bids_g_IOSTBUSD = Decimal('0.0') 
qty_bids_g_IOSTBUSD = Decimal('0.0') 
price_asks_g_IOSTBUSD = Decimal('0.0') 
qty_asks_g_IOSTBUSD = Decimal('0.0') 
stepSize_g_IOSTBUSD = Decimal('0.1') 


def on_message_IOSTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IOSTBUSD = 'IOSTBUSD' 
	price_bids_c_l_IOSTBUSD = data['b'] 
	qty_bids_c_l_IOSTBUSD = data['B'] 
	price_asks_c_l_IOSTBUSD = data['a'] 
	qty_asks_c_l_IOSTBUSD = data['A'] 

	global symbol_g_IOSTBUSD 
	global price_bids_g_IOSTBUSD 
	global qty_bids_g_IOSTBUSD 
	global price_asks_g_IOSTBUSD 
	global qty_asks_g_IOSTBUSD 

	symbol_g_IOSTBUSD = symbol_c_l_IOSTBUSD 
	price_bids_g_IOSTBUSD = Decimal(price_bids_c_l_IOSTBUSD) 
	qty_bids_g_IOSTBUSD = Decimal(qty_bids_c_l_IOSTBUSD) 
	price_asks_g_IOSTBUSD = Decimal(price_asks_c_l_IOSTBUSD) 
	qty_asks_g_IOSTBUSD = Decimal(qty_asks_c_l_IOSTBUSD) 


def loop_IOSTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/iostbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IOSTBUSD) 
	ws.run_forever() 


Thread(target=loop_IOSTBUSD).start() 
symbol_g_CELRBUSD = 'CELRBUSD' 
price_bids_g_CELRBUSD = Decimal('0.0') 
qty_bids_g_CELRBUSD = Decimal('0.0') 
price_asks_g_CELRBUSD = Decimal('0.0') 
qty_asks_g_CELRBUSD = Decimal('0.0') 
stepSize_g_CELRBUSD = Decimal('1.0') 


def on_message_CELRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CELRBUSD = 'CELRBUSD' 
	price_bids_c_l_CELRBUSD = data['b'] 
	qty_bids_c_l_CELRBUSD = data['B'] 
	price_asks_c_l_CELRBUSD = data['a'] 
	qty_asks_c_l_CELRBUSD = data['A'] 

	global symbol_g_CELRBUSD 
	global price_bids_g_CELRBUSD 
	global qty_bids_g_CELRBUSD 
	global price_asks_g_CELRBUSD 
	global qty_asks_g_CELRBUSD 

	symbol_g_CELRBUSD = symbol_c_l_CELRBUSD 
	price_bids_g_CELRBUSD = Decimal(price_bids_c_l_CELRBUSD) 
	qty_bids_g_CELRBUSD = Decimal(qty_bids_c_l_CELRBUSD) 
	price_asks_g_CELRBUSD = Decimal(price_asks_c_l_CELRBUSD) 
	qty_asks_g_CELRBUSD = Decimal(qty_asks_c_l_CELRBUSD) 


def loop_CELRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/celrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CELRBUSD) 
	ws.run_forever() 


Thread(target=loop_CELRBUSD).start() 
symbol_g_DASHBUSD = 'DASHBUSD' 
price_bids_g_DASHBUSD = Decimal('0.0') 
qty_bids_g_DASHBUSD = Decimal('0.0') 
price_asks_g_DASHBUSD = Decimal('0.0') 
qty_asks_g_DASHBUSD = Decimal('0.0') 
stepSize_g_DASHBUSD = Decimal('0.001') 


def on_message_DASHBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DASHBUSD = 'DASHBUSD' 
	price_bids_c_l_DASHBUSD = data['b'] 
	qty_bids_c_l_DASHBUSD = data['B'] 
	price_asks_c_l_DASHBUSD = data['a'] 
	qty_asks_c_l_DASHBUSD = data['A'] 

	global symbol_g_DASHBUSD 
	global price_bids_g_DASHBUSD 
	global qty_bids_g_DASHBUSD 
	global price_asks_g_DASHBUSD 
	global qty_asks_g_DASHBUSD 

	symbol_g_DASHBUSD = symbol_c_l_DASHBUSD 
	price_bids_g_DASHBUSD = Decimal(price_bids_c_l_DASHBUSD) 
	qty_bids_g_DASHBUSD = Decimal(qty_bids_c_l_DASHBUSD) 
	price_asks_g_DASHBUSD = Decimal(price_asks_c_l_DASHBUSD) 
	qty_asks_g_DASHBUSD = Decimal(qty_asks_c_l_DASHBUSD) 


def loop_DASHBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dashbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DASHBUSD) 
	ws.run_forever() 


Thread(target=loop_DASHBUSD).start() 
symbol_g_OMGBUSD = 'OMGBUSD' 
price_bids_g_OMGBUSD = Decimal('0.0') 
qty_bids_g_OMGBUSD = Decimal('0.0') 
price_asks_g_OMGBUSD = Decimal('0.0') 
qty_asks_g_OMGBUSD = Decimal('0.0') 
stepSize_g_OMGBUSD = Decimal('0.1') 


def on_message_OMGBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OMGBUSD = 'OMGBUSD' 
	price_bids_c_l_OMGBUSD = data['b'] 
	qty_bids_c_l_OMGBUSD = data['B'] 
	price_asks_c_l_OMGBUSD = data['a'] 
	qty_asks_c_l_OMGBUSD = data['A'] 

	global symbol_g_OMGBUSD 
	global price_bids_g_OMGBUSD 
	global qty_bids_g_OMGBUSD 
	global price_asks_g_OMGBUSD 
	global qty_asks_g_OMGBUSD 

	symbol_g_OMGBUSD = symbol_c_l_OMGBUSD 
	price_bids_g_OMGBUSD = Decimal(price_bids_c_l_OMGBUSD) 
	qty_bids_g_OMGBUSD = Decimal(qty_bids_c_l_OMGBUSD) 
	price_asks_g_OMGBUSD = Decimal(price_asks_c_l_OMGBUSD) 
	qty_asks_g_OMGBUSD = Decimal(qty_asks_c_l_OMGBUSD) 


def loop_OMGBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/omgbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OMGBUSD) 
	ws.run_forever() 


Thread(target=loop_OMGBUSD).start() 
symbol_g_THETAEUR = 'THETAEUR' 
price_bids_g_THETAEUR = Decimal('0.0') 
qty_bids_g_THETAEUR = Decimal('0.0') 
price_asks_g_THETAEUR = Decimal('0.0') 
qty_asks_g_THETAEUR = Decimal('0.0') 
stepSize_g_THETAEUR = Decimal('0.1') 


def on_message_THETAEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_THETAEUR = 'THETAEUR' 
	price_bids_c_l_THETAEUR = data['b'] 
	qty_bids_c_l_THETAEUR = data['B'] 
	price_asks_c_l_THETAEUR = data['a'] 
	qty_asks_c_l_THETAEUR = data['A'] 

	global symbol_g_THETAEUR 
	global price_bids_g_THETAEUR 
	global qty_bids_g_THETAEUR 
	global price_asks_g_THETAEUR 
	global qty_asks_g_THETAEUR 

	symbol_g_THETAEUR = symbol_c_l_THETAEUR 
	price_bids_g_THETAEUR = Decimal(price_bids_c_l_THETAEUR) 
	qty_bids_g_THETAEUR = Decimal(qty_bids_c_l_THETAEUR) 
	price_asks_g_THETAEUR = Decimal(price_asks_c_l_THETAEUR) 
	qty_asks_g_THETAEUR = Decimal(qty_asks_c_l_THETAEUR) 


def loop_THETAEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/thetaeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_THETAEUR) 
	ws.run_forever() 


Thread(target=loop_THETAEUR).start() 
symbol_g_THETABUSD = 'THETABUSD' 
price_bids_g_THETABUSD = Decimal('0.0') 
qty_bids_g_THETABUSD = Decimal('0.0') 
price_asks_g_THETABUSD = Decimal('0.0') 
qty_asks_g_THETABUSD = Decimal('0.0') 
stepSize_g_THETABUSD = Decimal('0.1') 


def on_message_THETABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_THETABUSD = 'THETABUSD' 
	price_bids_c_l_THETABUSD = data['b'] 
	qty_bids_c_l_THETABUSD = data['B'] 
	price_asks_c_l_THETABUSD = data['a'] 
	qty_asks_c_l_THETABUSD = data['A'] 

	global symbol_g_THETABUSD 
	global price_bids_g_THETABUSD 
	global qty_bids_g_THETABUSD 
	global price_asks_g_THETABUSD 
	global qty_asks_g_THETABUSD 

	symbol_g_THETABUSD = symbol_c_l_THETABUSD 
	price_bids_g_THETABUSD = Decimal(price_bids_c_l_THETABUSD) 
	qty_bids_g_THETABUSD = Decimal(qty_bids_c_l_THETABUSD) 
	price_asks_g_THETABUSD = Decimal(price_asks_c_l_THETABUSD) 
	qty_asks_g_THETABUSD = Decimal(qty_asks_c_l_THETABUSD) 


def loop_THETABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/thetabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_THETABUSD) 
	ws.run_forever() 


Thread(target=loop_THETABUSD).start() 
symbol_g_ENJBUSD = 'ENJBUSD' 
price_bids_g_ENJBUSD = Decimal('0.0') 
qty_bids_g_ENJBUSD = Decimal('0.0') 
price_asks_g_ENJBUSD = Decimal('0.0') 
qty_asks_g_ENJBUSD = Decimal('0.0') 
stepSize_g_ENJBUSD = Decimal('0.1') 


def on_message_ENJBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENJBUSD = 'ENJBUSD' 
	price_bids_c_l_ENJBUSD = data['b'] 
	qty_bids_c_l_ENJBUSD = data['B'] 
	price_asks_c_l_ENJBUSD = data['a'] 
	qty_asks_c_l_ENJBUSD = data['A'] 

	global symbol_g_ENJBUSD 
	global price_bids_g_ENJBUSD 
	global qty_bids_g_ENJBUSD 
	global price_asks_g_ENJBUSD 
	global qty_asks_g_ENJBUSD 

	symbol_g_ENJBUSD = symbol_c_l_ENJBUSD 
	price_bids_g_ENJBUSD = Decimal(price_bids_c_l_ENJBUSD) 
	qty_bids_g_ENJBUSD = Decimal(qty_bids_c_l_ENJBUSD) 
	price_asks_g_ENJBUSD = Decimal(price_asks_c_l_ENJBUSD) 
	qty_asks_g_ENJBUSD = Decimal(qty_asks_c_l_ENJBUSD) 


def loop_ENJBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/enjbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENJBUSD) 
	ws.run_forever() 


Thread(target=loop_ENJBUSD).start() 
symbol_g_ENJEUR = 'ENJEUR' 
price_bids_g_ENJEUR = Decimal('0.0') 
qty_bids_g_ENJEUR = Decimal('0.0') 
price_asks_g_ENJEUR = Decimal('0.0') 
qty_asks_g_ENJEUR = Decimal('0.0') 
stepSize_g_ENJEUR = Decimal('0.1') 


def on_message_ENJEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENJEUR = 'ENJEUR' 
	price_bids_c_l_ENJEUR = data['b'] 
	qty_bids_c_l_ENJEUR = data['B'] 
	price_asks_c_l_ENJEUR = data['a'] 
	qty_asks_c_l_ENJEUR = data['A'] 

	global symbol_g_ENJEUR 
	global price_bids_g_ENJEUR 
	global qty_bids_g_ENJEUR 
	global price_asks_g_ENJEUR 
	global qty_asks_g_ENJEUR 

	symbol_g_ENJEUR = symbol_c_l_ENJEUR 
	price_bids_g_ENJEUR = Decimal(price_bids_c_l_ENJEUR) 
	qty_bids_g_ENJEUR = Decimal(qty_bids_c_l_ENJEUR) 
	price_asks_g_ENJEUR = Decimal(price_asks_c_l_ENJEUR) 
	qty_asks_g_ENJEUR = Decimal(qty_asks_c_l_ENJEUR) 


def loop_ENJEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/enjeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENJEUR) 
	ws.run_forever() 


Thread(target=loop_ENJEUR).start() 
symbol_g_ENJGBP = 'ENJGBP' 
price_bids_g_ENJGBP = Decimal('0.0') 
qty_bids_g_ENJGBP = Decimal('0.0') 
price_asks_g_ENJGBP = Decimal('0.0') 
qty_asks_g_ENJGBP = Decimal('0.0') 
stepSize_g_ENJGBP = Decimal('0.1') 


def on_message_ENJGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENJGBP = 'ENJGBP' 
	price_bids_c_l_ENJGBP = data['b'] 
	qty_bids_c_l_ENJGBP = data['B'] 
	price_asks_c_l_ENJGBP = data['a'] 
	qty_asks_c_l_ENJGBP = data['A'] 

	global symbol_g_ENJGBP 
	global price_bids_g_ENJGBP 
	global qty_bids_g_ENJGBP 
	global price_asks_g_ENJGBP 
	global qty_asks_g_ENJGBP 

	symbol_g_ENJGBP = symbol_c_l_ENJGBP 
	price_bids_g_ENJGBP = Decimal(price_bids_c_l_ENJGBP) 
	qty_bids_g_ENJGBP = Decimal(qty_bids_c_l_ENJGBP) 
	price_asks_g_ENJGBP = Decimal(price_asks_c_l_ENJGBP) 
	qty_asks_g_ENJGBP = Decimal(qty_asks_c_l_ENJGBP) 


def loop_ENJGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/enjgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENJGBP) 
	ws.run_forever() 


Thread(target=loop_ENJGBP).start() 
symbol_g_MATICBUSD = 'MATICBUSD' 
price_bids_g_MATICBUSD = Decimal('0.0') 
qty_bids_g_MATICBUSD = Decimal('0.0') 
price_asks_g_MATICBUSD = Decimal('0.0') 
qty_asks_g_MATICBUSD = Decimal('0.0') 
stepSize_g_MATICBUSD = Decimal('0.1') 


def on_message_MATICBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MATICBUSD = 'MATICBUSD' 
	price_bids_c_l_MATICBUSD = data['b'] 
	qty_bids_c_l_MATICBUSD = data['B'] 
	price_asks_c_l_MATICBUSD = data['a'] 
	qty_asks_c_l_MATICBUSD = data['A'] 

	global symbol_g_MATICBUSD 
	global price_bids_g_MATICBUSD 
	global qty_bids_g_MATICBUSD 
	global price_asks_g_MATICBUSD 
	global qty_asks_g_MATICBUSD 

	symbol_g_MATICBUSD = symbol_c_l_MATICBUSD 
	price_bids_g_MATICBUSD = Decimal(price_bids_c_l_MATICBUSD) 
	qty_bids_g_MATICBUSD = Decimal(qty_bids_c_l_MATICBUSD) 
	price_asks_g_MATICBUSD = Decimal(price_asks_c_l_MATICBUSD) 
	qty_asks_g_MATICBUSD = Decimal(qty_asks_c_l_MATICBUSD) 


def loop_MATICBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maticbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MATICBUSD) 
	ws.run_forever() 


Thread(target=loop_MATICBUSD).start() 
symbol_g_MATICEUR = 'MATICEUR' 
price_bids_g_MATICEUR = Decimal('0.0') 
qty_bids_g_MATICEUR = Decimal('0.0') 
price_asks_g_MATICEUR = Decimal('0.0') 
qty_asks_g_MATICEUR = Decimal('0.0') 
stepSize_g_MATICEUR = Decimal('0.1') 


def on_message_MATICEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MATICEUR = 'MATICEUR' 
	price_bids_c_l_MATICEUR = data['b'] 
	qty_bids_c_l_MATICEUR = data['B'] 
	price_asks_c_l_MATICEUR = data['a'] 
	qty_asks_c_l_MATICEUR = data['A'] 

	global symbol_g_MATICEUR 
	global price_bids_g_MATICEUR 
	global qty_bids_g_MATICEUR 
	global price_asks_g_MATICEUR 
	global qty_asks_g_MATICEUR 

	symbol_g_MATICEUR = symbol_c_l_MATICEUR 
	price_bids_g_MATICEUR = Decimal(price_bids_c_l_MATICEUR) 
	qty_bids_g_MATICEUR = Decimal(qty_bids_c_l_MATICEUR) 
	price_asks_g_MATICEUR = Decimal(price_asks_c_l_MATICEUR) 
	qty_asks_g_MATICEUR = Decimal(qty_asks_c_l_MATICEUR) 


def loop_MATICEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maticeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MATICEUR) 
	ws.run_forever() 


Thread(target=loop_MATICEUR).start() 
symbol_g_MATICGBP = 'MATICGBP' 
price_bids_g_MATICGBP = Decimal('0.0') 
qty_bids_g_MATICGBP = Decimal('0.0') 
price_asks_g_MATICGBP = Decimal('0.0') 
qty_asks_g_MATICGBP = Decimal('0.0') 
stepSize_g_MATICGBP = Decimal('0.1') 


def on_message_MATICGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MATICGBP = 'MATICGBP' 
	price_bids_c_l_MATICGBP = data['b'] 
	qty_bids_c_l_MATICGBP = data['B'] 
	price_asks_c_l_MATICGBP = data['a'] 
	qty_asks_c_l_MATICGBP = data['A'] 

	global symbol_g_MATICGBP 
	global price_bids_g_MATICGBP 
	global qty_bids_g_MATICGBP 
	global price_asks_g_MATICGBP 
	global qty_asks_g_MATICGBP 

	symbol_g_MATICGBP = symbol_c_l_MATICGBP 
	price_bids_g_MATICGBP = Decimal(price_bids_c_l_MATICGBP) 
	qty_bids_g_MATICGBP = Decimal(qty_bids_c_l_MATICGBP) 
	price_asks_g_MATICGBP = Decimal(price_asks_c_l_MATICGBP) 
	qty_asks_g_MATICGBP = Decimal(qty_asks_c_l_MATICGBP) 


def loop_MATICGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maticgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MATICGBP) 
	ws.run_forever() 


Thread(target=loop_MATICGBP).start() 
symbol_g_MATICAUD = 'MATICAUD' 
price_bids_g_MATICAUD = Decimal('0.0') 
qty_bids_g_MATICAUD = Decimal('0.0') 
price_asks_g_MATICAUD = Decimal('0.0') 
qty_asks_g_MATICAUD = Decimal('0.0') 
stepSize_g_MATICAUD = Decimal('0.1') 


def on_message_MATICAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MATICAUD = 'MATICAUD' 
	price_bids_c_l_MATICAUD = data['b'] 
	qty_bids_c_l_MATICAUD = data['B'] 
	price_asks_c_l_MATICAUD = data['a'] 
	qty_asks_c_l_MATICAUD = data['A'] 

	global symbol_g_MATICAUD 
	global price_bids_g_MATICAUD 
	global qty_bids_g_MATICAUD 
	global price_asks_g_MATICAUD 
	global qty_asks_g_MATICAUD 

	symbol_g_MATICAUD = symbol_c_l_MATICAUD 
	price_bids_g_MATICAUD = Decimal(price_bids_c_l_MATICAUD) 
	qty_bids_g_MATICAUD = Decimal(qty_bids_c_l_MATICAUD) 
	price_asks_g_MATICAUD = Decimal(price_asks_c_l_MATICAUD) 
	qty_asks_g_MATICAUD = Decimal(qty_asks_c_l_MATICAUD) 


def loop_MATICAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maticaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MATICAUD) 
	ws.run_forever() 


Thread(target=loop_MATICAUD).start() 
symbol_g_ATOMBUSD = 'ATOMBUSD' 
price_bids_g_ATOMBUSD = Decimal('0.0') 
qty_bids_g_ATOMBUSD = Decimal('0.0') 
price_asks_g_ATOMBUSD = Decimal('0.0') 
qty_asks_g_ATOMBUSD = Decimal('0.0') 
stepSize_g_ATOMBUSD = Decimal('0.01') 


def on_message_ATOMBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATOMBUSD = 'ATOMBUSD' 
	price_bids_c_l_ATOMBUSD = data['b'] 
	qty_bids_c_l_ATOMBUSD = data['B'] 
	price_asks_c_l_ATOMBUSD = data['a'] 
	qty_asks_c_l_ATOMBUSD = data['A'] 

	global symbol_g_ATOMBUSD 
	global price_bids_g_ATOMBUSD 
	global qty_bids_g_ATOMBUSD 
	global price_asks_g_ATOMBUSD 
	global qty_asks_g_ATOMBUSD 

	symbol_g_ATOMBUSD = symbol_c_l_ATOMBUSD 
	price_bids_g_ATOMBUSD = Decimal(price_bids_c_l_ATOMBUSD) 
	qty_bids_g_ATOMBUSD = Decimal(qty_bids_c_l_ATOMBUSD) 
	price_asks_g_ATOMBUSD = Decimal(price_asks_c_l_ATOMBUSD) 
	qty_asks_g_ATOMBUSD = Decimal(qty_asks_c_l_ATOMBUSD) 


def loop_ATOMBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atombusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATOMBUSD) 
	ws.run_forever() 


Thread(target=loop_ATOMBUSD).start() 
symbol_g_ATOMEUR = 'ATOMEUR' 
price_bids_g_ATOMEUR = Decimal('0.0') 
qty_bids_g_ATOMEUR = Decimal('0.0') 
price_asks_g_ATOMEUR = Decimal('0.0') 
qty_asks_g_ATOMEUR = Decimal('0.0') 
stepSize_g_ATOMEUR = Decimal('0.01') 


def on_message_ATOMEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATOMEUR = 'ATOMEUR' 
	price_bids_c_l_ATOMEUR = data['b'] 
	qty_bids_c_l_ATOMEUR = data['B'] 
	price_asks_c_l_ATOMEUR = data['a'] 
	qty_asks_c_l_ATOMEUR = data['A'] 

	global symbol_g_ATOMEUR 
	global price_bids_g_ATOMEUR 
	global qty_bids_g_ATOMEUR 
	global price_asks_g_ATOMEUR 
	global qty_asks_g_ATOMEUR 

	symbol_g_ATOMEUR = symbol_c_l_ATOMEUR 
	price_bids_g_ATOMEUR = Decimal(price_bids_c_l_ATOMEUR) 
	qty_bids_g_ATOMEUR = Decimal(qty_bids_c_l_ATOMEUR) 
	price_asks_g_ATOMEUR = Decimal(price_asks_c_l_ATOMEUR) 
	qty_asks_g_ATOMEUR = Decimal(qty_asks_c_l_ATOMEUR) 


def loop_ATOMEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atomeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATOMEUR) 
	ws.run_forever() 


Thread(target=loop_ATOMEUR).start() 
symbol_g_TFUELBUSD = 'TFUELBUSD' 
price_bids_g_TFUELBUSD = Decimal('0.0') 
qty_bids_g_TFUELBUSD = Decimal('0.0') 
price_asks_g_TFUELBUSD = Decimal('0.0') 
qty_asks_g_TFUELBUSD = Decimal('0.0') 
stepSize_g_TFUELBUSD = Decimal('1.0') 


def on_message_TFUELBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TFUELBUSD = 'TFUELBUSD' 
	price_bids_c_l_TFUELBUSD = data['b'] 
	qty_bids_c_l_TFUELBUSD = data['B'] 
	price_asks_c_l_TFUELBUSD = data['a'] 
	qty_asks_c_l_TFUELBUSD = data['A'] 

	global symbol_g_TFUELBUSD 
	global price_bids_g_TFUELBUSD 
	global qty_bids_g_TFUELBUSD 
	global price_asks_g_TFUELBUSD 
	global qty_asks_g_TFUELBUSD 

	symbol_g_TFUELBUSD = symbol_c_l_TFUELBUSD 
	price_bids_g_TFUELBUSD = Decimal(price_bids_c_l_TFUELBUSD) 
	qty_bids_g_TFUELBUSD = Decimal(qty_bids_c_l_TFUELBUSD) 
	price_asks_g_TFUELBUSD = Decimal(price_asks_c_l_TFUELBUSD) 
	qty_asks_g_TFUELBUSD = Decimal(qty_asks_c_l_TFUELBUSD) 


def loop_TFUELBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tfuelbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TFUELBUSD) 
	ws.run_forever() 


Thread(target=loop_TFUELBUSD).start() 
symbol_g_ONEBUSD = 'ONEBUSD' 
price_bids_g_ONEBUSD = Decimal('0.0') 
qty_bids_g_ONEBUSD = Decimal('0.0') 
price_asks_g_ONEBUSD = Decimal('0.0') 
qty_asks_g_ONEBUSD = Decimal('0.0') 
stepSize_g_ONEBUSD = Decimal('0.1') 


def on_message_ONEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ONEBUSD = 'ONEBUSD' 
	price_bids_c_l_ONEBUSD = data['b'] 
	qty_bids_c_l_ONEBUSD = data['B'] 
	price_asks_c_l_ONEBUSD = data['a'] 
	qty_asks_c_l_ONEBUSD = data['A'] 

	global symbol_g_ONEBUSD 
	global price_bids_g_ONEBUSD 
	global qty_bids_g_ONEBUSD 
	global price_asks_g_ONEBUSD 
	global qty_asks_g_ONEBUSD 

	symbol_g_ONEBUSD = symbol_c_l_ONEBUSD 
	price_bids_g_ONEBUSD = Decimal(price_bids_c_l_ONEBUSD) 
	qty_bids_g_ONEBUSD = Decimal(qty_bids_c_l_ONEBUSD) 
	price_asks_g_ONEBUSD = Decimal(price_asks_c_l_ONEBUSD) 
	qty_asks_g_ONEBUSD = Decimal(qty_asks_c_l_ONEBUSD) 


def loop_ONEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/onebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ONEBUSD) 
	ws.run_forever() 


Thread(target=loop_ONEBUSD).start() 
symbol_g_FTMBUSD = 'FTMBUSD' 
price_bids_g_FTMBUSD = Decimal('0.0') 
qty_bids_g_FTMBUSD = Decimal('0.0') 
price_asks_g_FTMBUSD = Decimal('0.0') 
qty_asks_g_FTMBUSD = Decimal('0.0') 
stepSize_g_FTMBUSD = Decimal('1.0') 


def on_message_FTMBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FTMBUSD = 'FTMBUSD' 
	price_bids_c_l_FTMBUSD = data['b'] 
	qty_bids_c_l_FTMBUSD = data['B'] 
	price_asks_c_l_FTMBUSD = data['a'] 
	qty_asks_c_l_FTMBUSD = data['A'] 

	global symbol_g_FTMBUSD 
	global price_bids_g_FTMBUSD 
	global qty_bids_g_FTMBUSD 
	global price_asks_g_FTMBUSD 
	global qty_asks_g_FTMBUSD 

	symbol_g_FTMBUSD = symbol_c_l_FTMBUSD 
	price_bids_g_FTMBUSD = Decimal(price_bids_c_l_FTMBUSD) 
	qty_bids_g_FTMBUSD = Decimal(qty_bids_c_l_FTMBUSD) 
	price_asks_g_FTMBUSD = Decimal(price_asks_c_l_FTMBUSD) 
	qty_asks_g_FTMBUSD = Decimal(qty_asks_c_l_FTMBUSD) 


def loop_FTMBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ftmbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FTMBUSD) 
	ws.run_forever() 


Thread(target=loop_FTMBUSD).start() 
symbol_g_FTMAUD = 'FTMAUD' 
price_bids_g_FTMAUD = Decimal('0.0') 
qty_bids_g_FTMAUD = Decimal('0.0') 
price_asks_g_FTMAUD = Decimal('0.0') 
qty_asks_g_FTMAUD = Decimal('0.0') 
stepSize_g_FTMAUD = Decimal('1.0') 


def on_message_FTMAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FTMAUD = 'FTMAUD' 
	price_bids_c_l_FTMAUD = data['b'] 
	qty_bids_c_l_FTMAUD = data['B'] 
	price_asks_c_l_FTMAUD = data['a'] 
	qty_asks_c_l_FTMAUD = data['A'] 

	global symbol_g_FTMAUD 
	global price_bids_g_FTMAUD 
	global qty_bids_g_FTMAUD 
	global price_asks_g_FTMAUD 
	global qty_asks_g_FTMAUD 

	symbol_g_FTMAUD = symbol_c_l_FTMAUD 
	price_bids_g_FTMAUD = Decimal(price_bids_c_l_FTMAUD) 
	qty_bids_g_FTMAUD = Decimal(qty_bids_c_l_FTMAUD) 
	price_asks_g_FTMAUD = Decimal(price_asks_c_l_FTMAUD) 
	qty_asks_g_FTMAUD = Decimal(qty_asks_c_l_FTMAUD) 


def loop_FTMAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ftmaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FTMAUD) 
	ws.run_forever() 


Thread(target=loop_FTMAUD).start() 
symbol_g_FTMEUR = 'FTMEUR' 
price_bids_g_FTMEUR = Decimal('0.0') 
qty_bids_g_FTMEUR = Decimal('0.0') 
price_asks_g_FTMEUR = Decimal('0.0') 
qty_asks_g_FTMEUR = Decimal('0.0') 
stepSize_g_FTMEUR = Decimal('1.0') 


def on_message_FTMEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FTMEUR = 'FTMEUR' 
	price_bids_c_l_FTMEUR = data['b'] 
	qty_bids_c_l_FTMEUR = data['B'] 
	price_asks_c_l_FTMEUR = data['a'] 
	qty_asks_c_l_FTMEUR = data['A'] 

	global symbol_g_FTMEUR 
	global price_bids_g_FTMEUR 
	global qty_bids_g_FTMEUR 
	global price_asks_g_FTMEUR 
	global qty_asks_g_FTMEUR 

	symbol_g_FTMEUR = symbol_c_l_FTMEUR 
	price_bids_g_FTMEUR = Decimal(price_bids_c_l_FTMEUR) 
	qty_bids_g_FTMEUR = Decimal(qty_bids_c_l_FTMEUR) 
	price_asks_g_FTMEUR = Decimal(price_asks_c_l_FTMEUR) 
	qty_asks_g_FTMEUR = Decimal(qty_asks_c_l_FTMEUR) 


def loop_FTMEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ftmeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FTMEUR) 
	ws.run_forever() 


Thread(target=loop_FTMEUR).start() 
symbol_g_ALGOBUSD = 'ALGOBUSD' 
price_bids_g_ALGOBUSD = Decimal('0.0') 
qty_bids_g_ALGOBUSD = Decimal('0.0') 
price_asks_g_ALGOBUSD = Decimal('0.0') 
qty_asks_g_ALGOBUSD = Decimal('0.0') 
stepSize_g_ALGOBUSD = Decimal('1.0') 


def on_message_ALGOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALGOBUSD = 'ALGOBUSD' 
	price_bids_c_l_ALGOBUSD = data['b'] 
	qty_bids_c_l_ALGOBUSD = data['B'] 
	price_asks_c_l_ALGOBUSD = data['a'] 
	qty_asks_c_l_ALGOBUSD = data['A'] 

	global symbol_g_ALGOBUSD 
	global price_bids_g_ALGOBUSD 
	global qty_bids_g_ALGOBUSD 
	global price_asks_g_ALGOBUSD 
	global qty_asks_g_ALGOBUSD 

	symbol_g_ALGOBUSD = symbol_c_l_ALGOBUSD 
	price_bids_g_ALGOBUSD = Decimal(price_bids_c_l_ALGOBUSD) 
	qty_bids_g_ALGOBUSD = Decimal(qty_bids_c_l_ALGOBUSD) 
	price_asks_g_ALGOBUSD = Decimal(price_asks_c_l_ALGOBUSD) 
	qty_asks_g_ALGOBUSD = Decimal(qty_asks_c_l_ALGOBUSD) 


def loop_ALGOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/algobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALGOBUSD) 
	ws.run_forever() 


Thread(target=loop_ALGOBUSD).start() 
symbol_g_DOGEBUSD = 'DOGEBUSD' 
price_bids_g_DOGEBUSD = Decimal('0.0') 
qty_bids_g_DOGEBUSD = Decimal('0.0') 
price_asks_g_DOGEBUSD = Decimal('0.0') 
qty_asks_g_DOGEBUSD = Decimal('0.0') 
stepSize_g_DOGEBUSD = Decimal('1.0') 


def on_message_DOGEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOGEBUSD = 'DOGEBUSD' 
	price_bids_c_l_DOGEBUSD = data['b'] 
	qty_bids_c_l_DOGEBUSD = data['B'] 
	price_asks_c_l_DOGEBUSD = data['a'] 
	qty_asks_c_l_DOGEBUSD = data['A'] 

	global symbol_g_DOGEBUSD 
	global price_bids_g_DOGEBUSD 
	global qty_bids_g_DOGEBUSD 
	global price_asks_g_DOGEBUSD 
	global qty_asks_g_DOGEBUSD 

	symbol_g_DOGEBUSD = symbol_c_l_DOGEBUSD 
	price_bids_g_DOGEBUSD = Decimal(price_bids_c_l_DOGEBUSD) 
	qty_bids_g_DOGEBUSD = Decimal(qty_bids_c_l_DOGEBUSD) 
	price_asks_g_DOGEBUSD = Decimal(price_asks_c_l_DOGEBUSD) 
	qty_asks_g_DOGEBUSD = Decimal(qty_asks_c_l_DOGEBUSD) 


def loop_DOGEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dogebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOGEBUSD) 
	ws.run_forever() 


Thread(target=loop_DOGEBUSD).start() 
symbol_g_DOGEEUR = 'DOGEEUR' 
price_bids_g_DOGEEUR = Decimal('0.0') 
qty_bids_g_DOGEEUR = Decimal('0.0') 
price_asks_g_DOGEEUR = Decimal('0.0') 
qty_asks_g_DOGEEUR = Decimal('0.0') 
stepSize_g_DOGEEUR = Decimal('1.0') 


def on_message_DOGEEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOGEEUR = 'DOGEEUR' 
	price_bids_c_l_DOGEEUR = data['b'] 
	qty_bids_c_l_DOGEEUR = data['B'] 
	price_asks_c_l_DOGEEUR = data['a'] 
	qty_asks_c_l_DOGEEUR = data['A'] 

	global symbol_g_DOGEEUR 
	global price_bids_g_DOGEEUR 
	global qty_bids_g_DOGEEUR 
	global price_asks_g_DOGEEUR 
	global qty_asks_g_DOGEEUR 

	symbol_g_DOGEEUR = symbol_c_l_DOGEEUR 
	price_bids_g_DOGEEUR = Decimal(price_bids_c_l_DOGEEUR) 
	qty_bids_g_DOGEEUR = Decimal(qty_bids_c_l_DOGEEUR) 
	price_asks_g_DOGEEUR = Decimal(price_asks_c_l_DOGEEUR) 
	qty_asks_g_DOGEEUR = Decimal(qty_asks_c_l_DOGEEUR) 


def loop_DOGEEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dogeeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOGEEUR) 
	ws.run_forever() 


Thread(target=loop_DOGEEUR).start() 
symbol_g_DOGEAUD = 'DOGEAUD' 
price_bids_g_DOGEAUD = Decimal('0.0') 
qty_bids_g_DOGEAUD = Decimal('0.0') 
price_asks_g_DOGEAUD = Decimal('0.0') 
qty_asks_g_DOGEAUD = Decimal('0.0') 
stepSize_g_DOGEAUD = Decimal('1.0') 


def on_message_DOGEAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOGEAUD = 'DOGEAUD' 
	price_bids_c_l_DOGEAUD = data['b'] 
	qty_bids_c_l_DOGEAUD = data['B'] 
	price_asks_c_l_DOGEAUD = data['a'] 
	qty_asks_c_l_DOGEAUD = data['A'] 

	global symbol_g_DOGEAUD 
	global price_bids_g_DOGEAUD 
	global qty_bids_g_DOGEAUD 
	global price_asks_g_DOGEAUD 
	global qty_asks_g_DOGEAUD 

	symbol_g_DOGEAUD = symbol_c_l_DOGEAUD 
	price_bids_g_DOGEAUD = Decimal(price_bids_c_l_DOGEAUD) 
	qty_bids_g_DOGEAUD = Decimal(qty_bids_c_l_DOGEAUD) 
	price_asks_g_DOGEAUD = Decimal(price_asks_c_l_DOGEAUD) 
	qty_asks_g_DOGEAUD = Decimal(qty_asks_c_l_DOGEAUD) 


def loop_DOGEAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dogeaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOGEAUD) 
	ws.run_forever() 


Thread(target=loop_DOGEAUD).start() 
symbol_g_DOGEGBP = 'DOGEGBP' 
price_bids_g_DOGEGBP = Decimal('0.0') 
qty_bids_g_DOGEGBP = Decimal('0.0') 
price_asks_g_DOGEGBP = Decimal('0.0') 
qty_asks_g_DOGEGBP = Decimal('0.0') 
stepSize_g_DOGEGBP = Decimal('1.0') 


def on_message_DOGEGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOGEGBP = 'DOGEGBP' 
	price_bids_c_l_DOGEGBP = data['b'] 
	qty_bids_c_l_DOGEGBP = data['B'] 
	price_asks_c_l_DOGEGBP = data['a'] 
	qty_asks_c_l_DOGEGBP = data['A'] 

	global symbol_g_DOGEGBP 
	global price_bids_g_DOGEGBP 
	global qty_bids_g_DOGEGBP 
	global price_asks_g_DOGEGBP 
	global qty_asks_g_DOGEGBP 

	symbol_g_DOGEGBP = symbol_c_l_DOGEGBP 
	price_bids_g_DOGEGBP = Decimal(price_bids_c_l_DOGEGBP) 
	qty_bids_g_DOGEGBP = Decimal(qty_bids_c_l_DOGEGBP) 
	price_asks_g_DOGEGBP = Decimal(price_asks_c_l_DOGEGBP) 
	qty_asks_g_DOGEGBP = Decimal(qty_asks_c_l_DOGEGBP) 


def loop_DOGEGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dogegbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOGEGBP) 
	ws.run_forever() 


Thread(target=loop_DOGEGBP).start() 
symbol_g_SHIBDOGE = 'SHIBDOGE' 
price_bids_g_SHIBDOGE = Decimal('0.0') 
qty_bids_g_SHIBDOGE = Decimal('0.0') 
price_asks_g_SHIBDOGE = Decimal('0.0') 
qty_asks_g_SHIBDOGE = Decimal('0.0') 
stepSize_g_SHIBDOGE = Decimal('1.0') 


def on_message_SHIBDOGE(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SHIBDOGE = 'SHIBDOGE' 
	price_bids_c_l_SHIBDOGE = data['b'] 
	qty_bids_c_l_SHIBDOGE = data['B'] 
	price_asks_c_l_SHIBDOGE = data['a'] 
	qty_asks_c_l_SHIBDOGE = data['A'] 

	global symbol_g_SHIBDOGE 
	global price_bids_g_SHIBDOGE 
	global qty_bids_g_SHIBDOGE 
	global price_asks_g_SHIBDOGE 
	global qty_asks_g_SHIBDOGE 

	symbol_g_SHIBDOGE = symbol_c_l_SHIBDOGE 
	price_bids_g_SHIBDOGE = Decimal(price_bids_c_l_SHIBDOGE) 
	qty_bids_g_SHIBDOGE = Decimal(qty_bids_c_l_SHIBDOGE) 
	price_asks_g_SHIBDOGE = Decimal(price_asks_c_l_SHIBDOGE) 
	qty_asks_g_SHIBDOGE = Decimal(qty_asks_c_l_SHIBDOGE) 


def loop_SHIBDOGE(): 

	socket1 = f'wss://stream.binance.com:9443/ws/shibdoge@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SHIBDOGE) 
	ws.run_forever() 


Thread(target=loop_SHIBDOGE).start() 
symbol_g_DUSKBUSD = 'DUSKBUSD' 
price_bids_g_DUSKBUSD = Decimal('0.0') 
qty_bids_g_DUSKBUSD = Decimal('0.0') 
price_asks_g_DUSKBUSD = Decimal('0.0') 
qty_asks_g_DUSKBUSD = Decimal('0.0') 
stepSize_g_DUSKBUSD = Decimal('1.0') 


def on_message_DUSKBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DUSKBUSD = 'DUSKBUSD' 
	price_bids_c_l_DUSKBUSD = data['b'] 
	qty_bids_c_l_DUSKBUSD = data['B'] 
	price_asks_c_l_DUSKBUSD = data['a'] 
	qty_asks_c_l_DUSKBUSD = data['A'] 

	global symbol_g_DUSKBUSD 
	global price_bids_g_DUSKBUSD 
	global qty_bids_g_DUSKBUSD 
	global price_asks_g_DUSKBUSD 
	global qty_asks_g_DUSKBUSD 

	symbol_g_DUSKBUSD = symbol_c_l_DUSKBUSD 
	price_bids_g_DUSKBUSD = Decimal(price_bids_c_l_DUSKBUSD) 
	qty_bids_g_DUSKBUSD = Decimal(qty_bids_c_l_DUSKBUSD) 
	price_asks_g_DUSKBUSD = Decimal(price_asks_c_l_DUSKBUSD) 
	qty_asks_g_DUSKBUSD = Decimal(qty_asks_c_l_DUSKBUSD) 


def loop_DUSKBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/duskbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DUSKBUSD) 
	ws.run_forever() 


Thread(target=loop_DUSKBUSD).start() 
symbol_g_ANKRBUSD = 'ANKRBUSD' 
price_bids_g_ANKRBUSD = Decimal('0.0') 
qty_bids_g_ANKRBUSD = Decimal('0.0') 
price_asks_g_ANKRBUSD = Decimal('0.0') 
qty_asks_g_ANKRBUSD = Decimal('0.0') 
stepSize_g_ANKRBUSD = Decimal('0.1') 


def on_message_ANKRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ANKRBUSD = 'ANKRBUSD' 
	price_bids_c_l_ANKRBUSD = data['b'] 
	qty_bids_c_l_ANKRBUSD = data['B'] 
	price_asks_c_l_ANKRBUSD = data['a'] 
	qty_asks_c_l_ANKRBUSD = data['A'] 

	global symbol_g_ANKRBUSD 
	global price_bids_g_ANKRBUSD 
	global qty_bids_g_ANKRBUSD 
	global price_asks_g_ANKRBUSD 
	global qty_asks_g_ANKRBUSD 

	symbol_g_ANKRBUSD = symbol_c_l_ANKRBUSD 
	price_bids_g_ANKRBUSD = Decimal(price_bids_c_l_ANKRBUSD) 
	qty_bids_g_ANKRBUSD = Decimal(qty_bids_c_l_ANKRBUSD) 
	price_asks_g_ANKRBUSD = Decimal(price_asks_c_l_ANKRBUSD) 
	qty_asks_g_ANKRBUSD = Decimal(qty_asks_c_l_ANKRBUSD) 


def loop_ANKRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ankrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ANKRBUSD) 
	ws.run_forever() 


Thread(target=loop_ANKRBUSD).start() 
symbol_g_WINEUR = 'WINEUR' 
price_bids_g_WINEUR = Decimal('0.0') 
qty_bids_g_WINEUR = Decimal('0.0') 
price_asks_g_WINEUR = Decimal('0.0') 
qty_asks_g_WINEUR = Decimal('0.0') 
stepSize_g_WINEUR = Decimal('1.0') 


def on_message_WINEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WINEUR = 'WINEUR' 
	price_bids_c_l_WINEUR = data['b'] 
	qty_bids_c_l_WINEUR = data['B'] 
	price_asks_c_l_WINEUR = data['a'] 
	qty_asks_c_l_WINEUR = data['A'] 

	global symbol_g_WINEUR 
	global price_bids_g_WINEUR 
	global qty_bids_g_WINEUR 
	global price_asks_g_WINEUR 
	global qty_asks_g_WINEUR 

	symbol_g_WINEUR = symbol_c_l_WINEUR 
	price_bids_g_WINEUR = Decimal(price_bids_c_l_WINEUR) 
	qty_bids_g_WINEUR = Decimal(qty_bids_c_l_WINEUR) 
	price_asks_g_WINEUR = Decimal(price_asks_c_l_WINEUR) 
	qty_asks_g_WINEUR = Decimal(qty_asks_c_l_WINEUR) 


def loop_WINEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wineur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WINEUR) 
	ws.run_forever() 


Thread(target=loop_WINEUR).start() 
symbol_g_WINBUSD = 'WINBUSD' 
price_bids_g_WINBUSD = Decimal('0.0') 
qty_bids_g_WINBUSD = Decimal('0.0') 
price_asks_g_WINBUSD = Decimal('0.0') 
qty_asks_g_WINBUSD = Decimal('0.0') 
stepSize_g_WINBUSD = Decimal('1.0') 


def on_message_WINBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WINBUSD = 'WINBUSD' 
	price_bids_c_l_WINBUSD = data['b'] 
	qty_bids_c_l_WINBUSD = data['B'] 
	price_asks_c_l_WINBUSD = data['a'] 
	qty_asks_c_l_WINBUSD = data['A'] 

	global symbol_g_WINBUSD 
	global price_bids_g_WINBUSD 
	global qty_bids_g_WINBUSD 
	global price_asks_g_WINBUSD 
	global qty_asks_g_WINBUSD 

	symbol_g_WINBUSD = symbol_c_l_WINBUSD 
	price_bids_g_WINBUSD = Decimal(price_bids_c_l_WINBUSD) 
	qty_bids_g_WINBUSD = Decimal(qty_bids_c_l_WINBUSD) 
	price_asks_g_WINBUSD = Decimal(price_asks_c_l_WINBUSD) 
	qty_asks_g_WINBUSD = Decimal(qty_asks_c_l_WINBUSD) 


def loop_WINBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/winbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WINBUSD) 
	ws.run_forever() 


Thread(target=loop_WINBUSD).start() 
symbol_g_COSBUSD = 'COSBUSD' 
price_bids_g_COSBUSD = Decimal('0.0') 
qty_bids_g_COSBUSD = Decimal('0.0') 
price_asks_g_COSBUSD = Decimal('0.0') 
qty_asks_g_COSBUSD = Decimal('0.0') 
stepSize_g_COSBUSD = Decimal('0.1') 


def on_message_COSBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COSBUSD = 'COSBUSD' 
	price_bids_c_l_COSBUSD = data['b'] 
	qty_bids_c_l_COSBUSD = data['B'] 
	price_asks_c_l_COSBUSD = data['a'] 
	qty_asks_c_l_COSBUSD = data['A'] 

	global symbol_g_COSBUSD 
	global price_bids_g_COSBUSD 
	global qty_bids_g_COSBUSD 
	global price_asks_g_COSBUSD 
	global qty_asks_g_COSBUSD 

	symbol_g_COSBUSD = symbol_c_l_COSBUSD 
	price_bids_g_COSBUSD = Decimal(price_bids_c_l_COSBUSD) 
	qty_bids_g_COSBUSD = Decimal(qty_bids_c_l_COSBUSD) 
	price_asks_g_COSBUSD = Decimal(price_asks_c_l_COSBUSD) 
	qty_asks_g_COSBUSD = Decimal(qty_asks_c_l_COSBUSD) 


def loop_COSBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cosbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COSBUSD) 
	ws.run_forever() 


Thread(target=loop_COSBUSD).start() 
symbol_g_COCOSBUSD = 'COCOSBUSD' 
price_bids_g_COCOSBUSD = Decimal('0.0') 
qty_bids_g_COCOSBUSD = Decimal('0.0') 
price_asks_g_COCOSBUSD = Decimal('0.0') 
qty_asks_g_COCOSBUSD = Decimal('0.0') 
stepSize_g_COCOSBUSD = Decimal('1.0') 


def on_message_COCOSBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COCOSBUSD = 'COCOSBUSD' 
	price_bids_c_l_COCOSBUSD = data['b'] 
	qty_bids_c_l_COCOSBUSD = data['B'] 
	price_asks_c_l_COCOSBUSD = data['a'] 
	qty_asks_c_l_COCOSBUSD = data['A'] 

	global symbol_g_COCOSBUSD 
	global price_bids_g_COCOSBUSD 
	global qty_bids_g_COCOSBUSD 
	global price_asks_g_COCOSBUSD 
	global qty_asks_g_COCOSBUSD 

	symbol_g_COCOSBUSD = symbol_c_l_COCOSBUSD 
	price_bids_g_COCOSBUSD = Decimal(price_bids_c_l_COCOSBUSD) 
	qty_bids_g_COCOSBUSD = Decimal(qty_bids_c_l_COCOSBUSD) 
	price_asks_g_COCOSBUSD = Decimal(price_asks_c_l_COCOSBUSD) 
	qty_asks_g_COCOSBUSD = Decimal(qty_asks_c_l_COCOSBUSD) 


def loop_COCOSBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cocosbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COCOSBUSD) 
	ws.run_forever() 


Thread(target=loop_COCOSBUSD).start() 
symbol_g_MTLBUSD = 'MTLBUSD' 
price_bids_g_MTLBUSD = Decimal('0.0') 
qty_bids_g_MTLBUSD = Decimal('0.0') 
price_asks_g_MTLBUSD = Decimal('0.0') 
qty_asks_g_MTLBUSD = Decimal('0.0') 
stepSize_g_MTLBUSD = Decimal('0.1') 


def on_message_MTLBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MTLBUSD = 'MTLBUSD' 
	price_bids_c_l_MTLBUSD = data['b'] 
	qty_bids_c_l_MTLBUSD = data['B'] 
	price_asks_c_l_MTLBUSD = data['a'] 
	qty_asks_c_l_MTLBUSD = data['A'] 

	global symbol_g_MTLBUSD 
	global price_bids_g_MTLBUSD 
	global qty_bids_g_MTLBUSD 
	global price_asks_g_MTLBUSD 
	global qty_asks_g_MTLBUSD 

	symbol_g_MTLBUSD = symbol_c_l_MTLBUSD 
	price_bids_g_MTLBUSD = Decimal(price_bids_c_l_MTLBUSD) 
	qty_bids_g_MTLBUSD = Decimal(qty_bids_c_l_MTLBUSD) 
	price_asks_g_MTLBUSD = Decimal(price_asks_c_l_MTLBUSD) 
	qty_asks_g_MTLBUSD = Decimal(qty_asks_c_l_MTLBUSD) 


def loop_MTLBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mtlbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MTLBUSD) 
	ws.run_forever() 


Thread(target=loop_MTLBUSD).start() 
symbol_g_TOMOBUSD = 'TOMOBUSD' 
price_bids_g_TOMOBUSD = Decimal('0.0') 
qty_bids_g_TOMOBUSD = Decimal('0.0') 
price_asks_g_TOMOBUSD = Decimal('0.0') 
qty_asks_g_TOMOBUSD = Decimal('0.0') 
stepSize_g_TOMOBUSD = Decimal('0.1') 


def on_message_TOMOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TOMOBUSD = 'TOMOBUSD' 
	price_bids_c_l_TOMOBUSD = data['b'] 
	qty_bids_c_l_TOMOBUSD = data['B'] 
	price_asks_c_l_TOMOBUSD = data['a'] 
	qty_asks_c_l_TOMOBUSD = data['A'] 

	global symbol_g_TOMOBUSD 
	global price_bids_g_TOMOBUSD 
	global qty_bids_g_TOMOBUSD 
	global price_asks_g_TOMOBUSD 
	global qty_asks_g_TOMOBUSD 

	symbol_g_TOMOBUSD = symbol_c_l_TOMOBUSD 
	price_bids_g_TOMOBUSD = Decimal(price_bids_c_l_TOMOBUSD) 
	qty_bids_g_TOMOBUSD = Decimal(qty_bids_c_l_TOMOBUSD) 
	price_asks_g_TOMOBUSD = Decimal(price_asks_c_l_TOMOBUSD) 
	qty_asks_g_TOMOBUSD = Decimal(qty_asks_c_l_TOMOBUSD) 


def loop_TOMOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tomobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TOMOBUSD) 
	ws.run_forever() 


Thread(target=loop_TOMOBUSD).start() 
symbol_g_DENTBUSD = 'DENTBUSD' 
price_bids_g_DENTBUSD = Decimal('0.0') 
qty_bids_g_DENTBUSD = Decimal('0.0') 
price_asks_g_DENTBUSD = Decimal('0.0') 
qty_asks_g_DENTBUSD = Decimal('0.0') 
stepSize_g_DENTBUSD = Decimal('1.0') 


def on_message_DENTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DENTBUSD = 'DENTBUSD' 
	price_bids_c_l_DENTBUSD = data['b'] 
	qty_bids_c_l_DENTBUSD = data['B'] 
	price_asks_c_l_DENTBUSD = data['a'] 
	qty_asks_c_l_DENTBUSD = data['A'] 

	global symbol_g_DENTBUSD 
	global price_bids_g_DENTBUSD 
	global qty_bids_g_DENTBUSD 
	global price_asks_g_DENTBUSD 
	global qty_asks_g_DENTBUSD 

	symbol_g_DENTBUSD = symbol_c_l_DENTBUSD 
	price_bids_g_DENTBUSD = Decimal(price_bids_c_l_DENTBUSD) 
	qty_bids_g_DENTBUSD = Decimal(qty_bids_c_l_DENTBUSD) 
	price_asks_g_DENTBUSD = Decimal(price_asks_c_l_DENTBUSD) 
	qty_asks_g_DENTBUSD = Decimal(qty_asks_c_l_DENTBUSD) 


def loop_DENTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dentbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DENTBUSD) 
	ws.run_forever() 


Thread(target=loop_DENTBUSD).start() 
symbol_g_KEYBUSD = 'KEYBUSD' 
price_bids_g_KEYBUSD = Decimal('0.0') 
qty_bids_g_KEYBUSD = Decimal('0.0') 
price_asks_g_KEYBUSD = Decimal('0.0') 
qty_asks_g_KEYBUSD = Decimal('0.0') 
stepSize_g_KEYBUSD = Decimal('1.0') 


def on_message_KEYBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KEYBUSD = 'KEYBUSD' 
	price_bids_c_l_KEYBUSD = data['b'] 
	qty_bids_c_l_KEYBUSD = data['B'] 
	price_asks_c_l_KEYBUSD = data['a'] 
	qty_asks_c_l_KEYBUSD = data['A'] 

	global symbol_g_KEYBUSD 
	global price_bids_g_KEYBUSD 
	global qty_bids_g_KEYBUSD 
	global price_asks_g_KEYBUSD 
	global qty_asks_g_KEYBUSD 

	symbol_g_KEYBUSD = symbol_c_l_KEYBUSD 
	price_bids_g_KEYBUSD = Decimal(price_bids_c_l_KEYBUSD) 
	qty_bids_g_KEYBUSD = Decimal(qty_bids_c_l_KEYBUSD) 
	price_asks_g_KEYBUSD = Decimal(price_asks_c_l_KEYBUSD) 
	qty_asks_g_KEYBUSD = Decimal(qty_asks_c_l_KEYBUSD) 


def loop_KEYBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/keybusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KEYBUSD) 
	ws.run_forever() 


Thread(target=loop_KEYBUSD).start() 
symbol_g_DOCKBUSD = 'DOCKBUSD' 
price_bids_g_DOCKBUSD = Decimal('0.0') 
qty_bids_g_DOCKBUSD = Decimal('0.0') 
price_asks_g_DOCKBUSD = Decimal('0.0') 
qty_asks_g_DOCKBUSD = Decimal('0.0') 
stepSize_g_DOCKBUSD = Decimal('1.0') 


def on_message_DOCKBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOCKBUSD = 'DOCKBUSD' 
	price_bids_c_l_DOCKBUSD = data['b'] 
	qty_bids_c_l_DOCKBUSD = data['B'] 
	price_asks_c_l_DOCKBUSD = data['a'] 
	qty_asks_c_l_DOCKBUSD = data['A'] 

	global symbol_g_DOCKBUSD 
	global price_bids_g_DOCKBUSD 
	global qty_bids_g_DOCKBUSD 
	global price_asks_g_DOCKBUSD 
	global qty_asks_g_DOCKBUSD 

	symbol_g_DOCKBUSD = symbol_c_l_DOCKBUSD 
	price_bids_g_DOCKBUSD = Decimal(price_bids_c_l_DOCKBUSD) 
	qty_bids_g_DOCKBUSD = Decimal(qty_bids_c_l_DOCKBUSD) 
	price_asks_g_DOCKBUSD = Decimal(price_asks_c_l_DOCKBUSD) 
	qty_asks_g_DOCKBUSD = Decimal(qty_asks_c_l_DOCKBUSD) 


def loop_DOCKBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dockbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOCKBUSD) 
	ws.run_forever() 


Thread(target=loop_DOCKBUSD).start() 
symbol_g_CHZBUSD = 'CHZBUSD' 
price_bids_g_CHZBUSD = Decimal('0.0') 
qty_bids_g_CHZBUSD = Decimal('0.0') 
price_asks_g_CHZBUSD = Decimal('0.0') 
qty_asks_g_CHZBUSD = Decimal('0.0') 
stepSize_g_CHZBUSD = Decimal('1.0') 


def on_message_CHZBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHZBUSD = 'CHZBUSD' 
	price_bids_c_l_CHZBUSD = data['b'] 
	qty_bids_c_l_CHZBUSD = data['B'] 
	price_asks_c_l_CHZBUSD = data['a'] 
	qty_asks_c_l_CHZBUSD = data['A'] 

	global symbol_g_CHZBUSD 
	global price_bids_g_CHZBUSD 
	global qty_bids_g_CHZBUSD 
	global price_asks_g_CHZBUSD 
	global qty_asks_g_CHZBUSD 

	symbol_g_CHZBUSD = symbol_c_l_CHZBUSD 
	price_bids_g_CHZBUSD = Decimal(price_bids_c_l_CHZBUSD) 
	qty_bids_g_CHZBUSD = Decimal(qty_bids_c_l_CHZBUSD) 
	price_asks_g_CHZBUSD = Decimal(price_asks_c_l_CHZBUSD) 
	qty_asks_g_CHZBUSD = Decimal(qty_asks_c_l_CHZBUSD) 


def loop_CHZBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chzbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHZBUSD) 
	ws.run_forever() 


Thread(target=loop_CHZBUSD).start() 
symbol_g_CHZEUR = 'CHZEUR' 
price_bids_g_CHZEUR = Decimal('0.0') 
qty_bids_g_CHZEUR = Decimal('0.0') 
price_asks_g_CHZEUR = Decimal('0.0') 
qty_asks_g_CHZEUR = Decimal('0.0') 
stepSize_g_CHZEUR = Decimal('1.0') 


def on_message_CHZEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHZEUR = 'CHZEUR' 
	price_bids_c_l_CHZEUR = data['b'] 
	qty_bids_c_l_CHZEUR = data['B'] 
	price_asks_c_l_CHZEUR = data['a'] 
	qty_asks_c_l_CHZEUR = data['A'] 

	global symbol_g_CHZEUR 
	global price_bids_g_CHZEUR 
	global qty_bids_g_CHZEUR 
	global price_asks_g_CHZEUR 
	global qty_asks_g_CHZEUR 

	symbol_g_CHZEUR = symbol_c_l_CHZEUR 
	price_bids_g_CHZEUR = Decimal(price_bids_c_l_CHZEUR) 
	qty_bids_g_CHZEUR = Decimal(qty_bids_c_l_CHZEUR) 
	price_asks_g_CHZEUR = Decimal(price_asks_c_l_CHZEUR) 
	qty_asks_g_CHZEUR = Decimal(qty_asks_c_l_CHZEUR) 


def loop_CHZEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chzeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHZEUR) 
	ws.run_forever() 


Thread(target=loop_CHZEUR).start() 
symbol_g_CHZGBP = 'CHZGBP' 
price_bids_g_CHZGBP = Decimal('0.0') 
qty_bids_g_CHZGBP = Decimal('0.0') 
price_asks_g_CHZGBP = Decimal('0.0') 
qty_asks_g_CHZGBP = Decimal('0.0') 
stepSize_g_CHZGBP = Decimal('1.0') 


def on_message_CHZGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHZGBP = 'CHZGBP' 
	price_bids_c_l_CHZGBP = data['b'] 
	qty_bids_c_l_CHZGBP = data['B'] 
	price_asks_c_l_CHZGBP = data['a'] 
	qty_asks_c_l_CHZGBP = data['A'] 

	global symbol_g_CHZGBP 
	global price_bids_g_CHZGBP 
	global qty_bids_g_CHZGBP 
	global price_asks_g_CHZGBP 
	global qty_asks_g_CHZGBP 

	symbol_g_CHZGBP = symbol_c_l_CHZGBP 
	price_bids_g_CHZGBP = Decimal(price_bids_c_l_CHZGBP) 
	qty_bids_g_CHZGBP = Decimal(qty_bids_c_l_CHZGBP) 
	price_asks_g_CHZGBP = Decimal(price_asks_c_l_CHZGBP) 
	qty_asks_g_CHZGBP = Decimal(qty_asks_c_l_CHZGBP) 


def loop_CHZGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chzgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHZGBP) 
	ws.run_forever() 


Thread(target=loop_CHZGBP).start() 
symbol_g_BANDBUSD = 'BANDBUSD' 
price_bids_g_BANDBUSD = Decimal('0.0') 
qty_bids_g_BANDBUSD = Decimal('0.0') 
price_asks_g_BANDBUSD = Decimal('0.0') 
qty_asks_g_BANDBUSD = Decimal('0.0') 
stepSize_g_BANDBUSD = Decimal('0.1') 


def on_message_BANDBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BANDBUSD = 'BANDBUSD' 
	price_bids_c_l_BANDBUSD = data['b'] 
	qty_bids_c_l_BANDBUSD = data['B'] 
	price_asks_c_l_BANDBUSD = data['a'] 
	qty_asks_c_l_BANDBUSD = data['A'] 

	global symbol_g_BANDBUSD 
	global price_bids_g_BANDBUSD 
	global qty_bids_g_BANDBUSD 
	global price_asks_g_BANDBUSD 
	global qty_asks_g_BANDBUSD 

	symbol_g_BANDBUSD = symbol_c_l_BANDBUSD 
	price_bids_g_BANDBUSD = Decimal(price_bids_c_l_BANDBUSD) 
	qty_bids_g_BANDBUSD = Decimal(qty_bids_c_l_BANDBUSD) 
	price_asks_g_BANDBUSD = Decimal(price_asks_c_l_BANDBUSD) 
	qty_asks_g_BANDBUSD = Decimal(qty_asks_c_l_BANDBUSD) 


def loop_BANDBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bandbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BANDBUSD) 
	ws.run_forever() 


Thread(target=loop_BANDBUSD).start() 
symbol_g_BCHBUSD = 'BCHBUSD' 
price_bids_g_BCHBUSD = Decimal('0.0') 
qty_bids_g_BCHBUSD = Decimal('0.0') 
price_asks_g_BCHBUSD = Decimal('0.0') 
qty_asks_g_BCHBUSD = Decimal('0.0') 
stepSize_g_BCHBUSD = Decimal('0.001') 


def on_message_BCHBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BCHBUSD = 'BCHBUSD' 
	price_bids_c_l_BCHBUSD = data['b'] 
	qty_bids_c_l_BCHBUSD = data['B'] 
	price_asks_c_l_BCHBUSD = data['a'] 
	qty_asks_c_l_BCHBUSD = data['A'] 

	global symbol_g_BCHBUSD 
	global price_bids_g_BCHBUSD 
	global qty_bids_g_BCHBUSD 
	global price_asks_g_BCHBUSD 
	global qty_asks_g_BCHBUSD 

	symbol_g_BCHBUSD = symbol_c_l_BCHBUSD 
	price_bids_g_BCHBUSD = Decimal(price_bids_c_l_BCHBUSD) 
	qty_bids_g_BCHBUSD = Decimal(qty_bids_c_l_BCHBUSD) 
	price_asks_g_BCHBUSD = Decimal(price_asks_c_l_BCHBUSD) 
	qty_asks_g_BCHBUSD = Decimal(qty_asks_c_l_BCHBUSD) 


def loop_BCHBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bchbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BCHBUSD) 
	ws.run_forever() 


Thread(target=loop_BCHBUSD).start() 
symbol_g_EURBUSD = 'EURBUSD' 
price_bids_g_EURBUSD = Decimal('0.0') 
qty_bids_g_EURBUSD = Decimal('0.0') 
price_asks_g_EURBUSD = Decimal('0.0') 
qty_asks_g_EURBUSD = Decimal('0.0') 
stepSize_g_EURBUSD = Decimal('0.1') 


def on_message_EURBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EURBUSD = 'EURBUSD' 
	price_bids_c_l_EURBUSD = data['b'] 
	qty_bids_c_l_EURBUSD = data['B'] 
	price_asks_c_l_EURBUSD = data['a'] 
	qty_asks_c_l_EURBUSD = data['A'] 

	global symbol_g_EURBUSD 
	global price_bids_g_EURBUSD 
	global qty_bids_g_EURBUSD 
	global price_asks_g_EURBUSD 
	global qty_asks_g_EURBUSD 

	symbol_g_EURBUSD = symbol_c_l_EURBUSD 
	price_bids_g_EURBUSD = Decimal(price_bids_c_l_EURBUSD) 
	qty_bids_g_EURBUSD = Decimal(qty_bids_c_l_EURBUSD) 
	price_asks_g_EURBUSD = Decimal(price_asks_c_l_EURBUSD) 
	qty_asks_g_EURBUSD = Decimal(qty_asks_c_l_EURBUSD) 


def loop_EURBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/eurbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EURBUSD) 
	ws.run_forever() 


Thread(target=loop_EURBUSD).start() 
symbol_g_BNTBUSD = 'BNTBUSD' 
price_bids_g_BNTBUSD = Decimal('0.0') 
qty_bids_g_BNTBUSD = Decimal('0.0') 
price_asks_g_BNTBUSD = Decimal('0.0') 
qty_asks_g_BNTBUSD = Decimal('0.0') 
stepSize_g_BNTBUSD = Decimal('0.1') 


def on_message_BNTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNTBUSD = 'BNTBUSD' 
	price_bids_c_l_BNTBUSD = data['b'] 
	qty_bids_c_l_BNTBUSD = data['B'] 
	price_asks_c_l_BNTBUSD = data['a'] 
	qty_asks_c_l_BNTBUSD = data['A'] 

	global symbol_g_BNTBUSD 
	global price_bids_g_BNTBUSD 
	global qty_bids_g_BNTBUSD 
	global price_asks_g_BNTBUSD 
	global qty_asks_g_BNTBUSD 

	symbol_g_BNTBUSD = symbol_c_l_BNTBUSD 
	price_bids_g_BNTBUSD = Decimal(price_bids_c_l_BNTBUSD) 
	qty_bids_g_BNTBUSD = Decimal(qty_bids_c_l_BNTBUSD) 
	price_asks_g_BNTBUSD = Decimal(price_asks_c_l_BNTBUSD) 
	qty_asks_g_BNTBUSD = Decimal(qty_asks_c_l_BNTBUSD) 


def loop_BNTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bntbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNTBUSD) 
	ws.run_forever() 


Thread(target=loop_BNTBUSD).start() 
symbol_g_XTZBUSD = 'XTZBUSD' 
price_bids_g_XTZBUSD = Decimal('0.0') 
qty_bids_g_XTZBUSD = Decimal('0.0') 
price_asks_g_XTZBUSD = Decimal('0.0') 
qty_asks_g_XTZBUSD = Decimal('0.0') 
stepSize_g_XTZBUSD = Decimal('0.1') 


def on_message_XTZBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XTZBUSD = 'XTZBUSD' 
	price_bids_c_l_XTZBUSD = data['b'] 
	qty_bids_c_l_XTZBUSD = data['B'] 
	price_asks_c_l_XTZBUSD = data['a'] 
	qty_asks_c_l_XTZBUSD = data['A'] 

	global symbol_g_XTZBUSD 
	global price_bids_g_XTZBUSD 
	global qty_bids_g_XTZBUSD 
	global price_asks_g_XTZBUSD 
	global qty_asks_g_XTZBUSD 

	symbol_g_XTZBUSD = symbol_c_l_XTZBUSD 
	price_bids_g_XTZBUSD = Decimal(price_bids_c_l_XTZBUSD) 
	qty_bids_g_XTZBUSD = Decimal(qty_bids_c_l_XTZBUSD) 
	price_asks_g_XTZBUSD = Decimal(price_asks_c_l_XTZBUSD) 
	qty_asks_g_XTZBUSD = Decimal(qty_asks_c_l_XTZBUSD) 


def loop_XTZBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xtzbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XTZBUSD) 
	ws.run_forever() 


Thread(target=loop_XTZBUSD).start() 
symbol_g_RVNBUSD = 'RVNBUSD' 
price_bids_g_RVNBUSD = Decimal('0.0') 
qty_bids_g_RVNBUSD = Decimal('0.0') 
price_asks_g_RVNBUSD = Decimal('0.0') 
qty_asks_g_RVNBUSD = Decimal('0.0') 
stepSize_g_RVNBUSD = Decimal('0.1') 


def on_message_RVNBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RVNBUSD = 'RVNBUSD' 
	price_bids_c_l_RVNBUSD = data['b'] 
	qty_bids_c_l_RVNBUSD = data['B'] 
	price_asks_c_l_RVNBUSD = data['a'] 
	qty_asks_c_l_RVNBUSD = data['A'] 

	global symbol_g_RVNBUSD 
	global price_bids_g_RVNBUSD 
	global qty_bids_g_RVNBUSD 
	global price_asks_g_RVNBUSD 
	global qty_asks_g_RVNBUSD 

	symbol_g_RVNBUSD = symbol_c_l_RVNBUSD 
	price_bids_g_RVNBUSD = Decimal(price_bids_c_l_RVNBUSD) 
	qty_bids_g_RVNBUSD = Decimal(qty_bids_c_l_RVNBUSD) 
	price_asks_g_RVNBUSD = Decimal(price_asks_c_l_RVNBUSD) 
	qty_asks_g_RVNBUSD = Decimal(qty_asks_c_l_RVNBUSD) 


def loop_RVNBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rvnbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RVNBUSD) 
	ws.run_forever() 


Thread(target=loop_RVNBUSD).start() 
symbol_g_DATABUSD = 'DATABUSD' 
price_bids_g_DATABUSD = Decimal('0.0') 
qty_bids_g_DATABUSD = Decimal('0.0') 
price_asks_g_DATABUSD = Decimal('0.0') 
qty_asks_g_DATABUSD = Decimal('0.0') 
stepSize_g_DATABUSD = Decimal('0.1') 


def on_message_DATABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DATABUSD = 'DATABUSD' 
	price_bids_c_l_DATABUSD = data['b'] 
	qty_bids_c_l_DATABUSD = data['B'] 
	price_asks_c_l_DATABUSD = data['a'] 
	qty_asks_c_l_DATABUSD = data['A'] 

	global symbol_g_DATABUSD 
	global price_bids_g_DATABUSD 
	global qty_bids_g_DATABUSD 
	global price_asks_g_DATABUSD 
	global qty_asks_g_DATABUSD 

	symbol_g_DATABUSD = symbol_c_l_DATABUSD 
	price_bids_g_DATABUSD = Decimal(price_bids_c_l_DATABUSD) 
	qty_bids_g_DATABUSD = Decimal(qty_bids_c_l_DATABUSD) 
	price_asks_g_DATABUSD = Decimal(price_asks_c_l_DATABUSD) 
	qty_asks_g_DATABUSD = Decimal(qty_asks_c_l_DATABUSD) 


def loop_DATABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/databusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DATABUSD) 
	ws.run_forever() 


Thread(target=loop_DATABUSD).start() 
symbol_g_SOLBUSD = 'SOLBUSD' 
price_bids_g_SOLBUSD = Decimal('0.0') 
qty_bids_g_SOLBUSD = Decimal('0.0') 
price_asks_g_SOLBUSD = Decimal('0.0') 
qty_asks_g_SOLBUSD = Decimal('0.0') 
stepSize_g_SOLBUSD = Decimal('0.01') 


def on_message_SOLBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SOLBUSD = 'SOLBUSD' 
	price_bids_c_l_SOLBUSD = data['b'] 
	qty_bids_c_l_SOLBUSD = data['B'] 
	price_asks_c_l_SOLBUSD = data['a'] 
	qty_asks_c_l_SOLBUSD = data['A'] 

	global symbol_g_SOLBUSD 
	global price_bids_g_SOLBUSD 
	global qty_bids_g_SOLBUSD 
	global price_asks_g_SOLBUSD 
	global qty_asks_g_SOLBUSD 

	symbol_g_SOLBUSD = symbol_c_l_SOLBUSD 
	price_bids_g_SOLBUSD = Decimal(price_bids_c_l_SOLBUSD) 
	qty_bids_g_SOLBUSD = Decimal(qty_bids_c_l_SOLBUSD) 
	price_asks_g_SOLBUSD = Decimal(price_asks_c_l_SOLBUSD) 
	qty_asks_g_SOLBUSD = Decimal(qty_asks_c_l_SOLBUSD) 


def loop_SOLBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/solbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SOLBUSD) 
	ws.run_forever() 


Thread(target=loop_SOLBUSD).start() 
symbol_g_CTSIBUSD = 'CTSIBUSD' 
price_bids_g_CTSIBUSD = Decimal('0.0') 
qty_bids_g_CTSIBUSD = Decimal('0.0') 
price_asks_g_CTSIBUSD = Decimal('0.0') 
qty_asks_g_CTSIBUSD = Decimal('0.0') 
stepSize_g_CTSIBUSD = Decimal('1.0') 


def on_message_CTSIBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CTSIBUSD = 'CTSIBUSD' 
	price_bids_c_l_CTSIBUSD = data['b'] 
	qty_bids_c_l_CTSIBUSD = data['B'] 
	price_asks_c_l_CTSIBUSD = data['a'] 
	qty_asks_c_l_CTSIBUSD = data['A'] 

	global symbol_g_CTSIBUSD 
	global price_bids_g_CTSIBUSD 
	global qty_bids_g_CTSIBUSD 
	global price_asks_g_CTSIBUSD 
	global qty_asks_g_CTSIBUSD 

	symbol_g_CTSIBUSD = symbol_c_l_CTSIBUSD 
	price_bids_g_CTSIBUSD = Decimal(price_bids_c_l_CTSIBUSD) 
	qty_bids_g_CTSIBUSD = Decimal(qty_bids_c_l_CTSIBUSD) 
	price_asks_g_CTSIBUSD = Decimal(price_asks_c_l_CTSIBUSD) 
	qty_asks_g_CTSIBUSD = Decimal(qty_asks_c_l_CTSIBUSD) 


def loop_CTSIBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ctsibusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CTSIBUSD) 
	ws.run_forever() 


Thread(target=loop_CTSIBUSD).start() 
symbol_g_HBARBUSD = 'HBARBUSD' 
price_bids_g_HBARBUSD = Decimal('0.0') 
qty_bids_g_HBARBUSD = Decimal('0.0') 
price_asks_g_HBARBUSD = Decimal('0.0') 
qty_asks_g_HBARBUSD = Decimal('0.0') 
stepSize_g_HBARBUSD = Decimal('1.0') 


def on_message_HBARBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HBARBUSD = 'HBARBUSD' 
	price_bids_c_l_HBARBUSD = data['b'] 
	qty_bids_c_l_HBARBUSD = data['B'] 
	price_asks_c_l_HBARBUSD = data['a'] 
	qty_asks_c_l_HBARBUSD = data['A'] 

	global symbol_g_HBARBUSD 
	global price_bids_g_HBARBUSD 
	global qty_bids_g_HBARBUSD 
	global price_asks_g_HBARBUSD 
	global qty_asks_g_HBARBUSD 

	symbol_g_HBARBUSD = symbol_c_l_HBARBUSD 
	price_bids_g_HBARBUSD = Decimal(price_bids_c_l_HBARBUSD) 
	qty_bids_g_HBARBUSD = Decimal(qty_bids_c_l_HBARBUSD) 
	price_asks_g_HBARBUSD = Decimal(price_asks_c_l_HBARBUSD) 
	qty_asks_g_HBARBUSD = Decimal(qty_asks_c_l_HBARBUSD) 


def loop_HBARBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hbarbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HBARBUSD) 
	ws.run_forever() 


Thread(target=loop_HBARBUSD).start() 
symbol_g_WRXBUSD = 'WRXBUSD' 
price_bids_g_WRXBUSD = Decimal('0.0') 
qty_bids_g_WRXBUSD = Decimal('0.0') 
price_asks_g_WRXBUSD = Decimal('0.0') 
qty_asks_g_WRXBUSD = Decimal('0.0') 
stepSize_g_WRXBUSD = Decimal('0.1') 


def on_message_WRXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WRXBUSD = 'WRXBUSD' 
	price_bids_c_l_WRXBUSD = data['b'] 
	qty_bids_c_l_WRXBUSD = data['B'] 
	price_asks_c_l_WRXBUSD = data['a'] 
	qty_asks_c_l_WRXBUSD = data['A'] 

	global symbol_g_WRXBUSD 
	global price_bids_g_WRXBUSD 
	global qty_bids_g_WRXBUSD 
	global price_asks_g_WRXBUSD 
	global qty_asks_g_WRXBUSD 

	symbol_g_WRXBUSD = symbol_c_l_WRXBUSD 
	price_bids_g_WRXBUSD = Decimal(price_bids_c_l_WRXBUSD) 
	qty_bids_g_WRXBUSD = Decimal(qty_bids_c_l_WRXBUSD) 
	price_asks_g_WRXBUSD = Decimal(price_asks_c_l_WRXBUSD) 
	qty_asks_g_WRXBUSD = Decimal(qty_asks_c_l_WRXBUSD) 


def loop_WRXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wrxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WRXBUSD) 
	ws.run_forever() 


Thread(target=loop_WRXBUSD).start() 
symbol_g_KNCBUSD = 'KNCBUSD' 
price_bids_g_KNCBUSD = Decimal('0.0') 
qty_bids_g_KNCBUSD = Decimal('0.0') 
price_asks_g_KNCBUSD = Decimal('0.0') 
qty_asks_g_KNCBUSD = Decimal('0.0') 
stepSize_g_KNCBUSD = Decimal('0.1') 


def on_message_KNCBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KNCBUSD = 'KNCBUSD' 
	price_bids_c_l_KNCBUSD = data['b'] 
	qty_bids_c_l_KNCBUSD = data['B'] 
	price_asks_c_l_KNCBUSD = data['a'] 
	qty_asks_c_l_KNCBUSD = data['A'] 

	global symbol_g_KNCBUSD 
	global price_bids_g_KNCBUSD 
	global qty_bids_g_KNCBUSD 
	global price_asks_g_KNCBUSD 
	global qty_asks_g_KNCBUSD 

	symbol_g_KNCBUSD = symbol_c_l_KNCBUSD 
	price_bids_g_KNCBUSD = Decimal(price_bids_c_l_KNCBUSD) 
	qty_bids_g_KNCBUSD = Decimal(qty_bids_c_l_KNCBUSD) 
	price_asks_g_KNCBUSD = Decimal(price_asks_c_l_KNCBUSD) 
	qty_asks_g_KNCBUSD = Decimal(qty_asks_c_l_KNCBUSD) 


def loop_KNCBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kncbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KNCBUSD) 
	ws.run_forever() 


Thread(target=loop_KNCBUSD).start() 
symbol_g_LRCBUSD = 'LRCBUSD' 
price_bids_g_LRCBUSD = Decimal('0.0') 
qty_bids_g_LRCBUSD = Decimal('0.0') 
price_asks_g_LRCBUSD = Decimal('0.0') 
qty_asks_g_LRCBUSD = Decimal('0.0') 
stepSize_g_LRCBUSD = Decimal('1.0') 


def on_message_LRCBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LRCBUSD = 'LRCBUSD' 
	price_bids_c_l_LRCBUSD = data['b'] 
	qty_bids_c_l_LRCBUSD = data['B'] 
	price_asks_c_l_LRCBUSD = data['a'] 
	qty_asks_c_l_LRCBUSD = data['A'] 

	global symbol_g_LRCBUSD 
	global price_bids_g_LRCBUSD 
	global qty_bids_g_LRCBUSD 
	global price_asks_g_LRCBUSD 
	global qty_asks_g_LRCBUSD 

	symbol_g_LRCBUSD = symbol_c_l_LRCBUSD 
	price_bids_g_LRCBUSD = Decimal(price_bids_c_l_LRCBUSD) 
	qty_bids_g_LRCBUSD = Decimal(qty_bids_c_l_LRCBUSD) 
	price_asks_g_LRCBUSD = Decimal(price_asks_c_l_LRCBUSD) 
	qty_asks_g_LRCBUSD = Decimal(qty_asks_c_l_LRCBUSD) 


def loop_LRCBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lrcbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LRCBUSD) 
	ws.run_forever() 


Thread(target=loop_LRCBUSD).start() 
symbol_g_GBPBUSD = 'GBPBUSD' 
price_bids_g_GBPBUSD = Decimal('0.0') 
qty_bids_g_GBPBUSD = Decimal('0.0') 
price_asks_g_GBPBUSD = Decimal('0.0') 
qty_asks_g_GBPBUSD = Decimal('0.0') 
stepSize_g_GBPBUSD = Decimal('0.1') 


def on_message_GBPBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GBPBUSD = 'GBPBUSD' 
	price_bids_c_l_GBPBUSD = data['b'] 
	qty_bids_c_l_GBPBUSD = data['B'] 
	price_asks_c_l_GBPBUSD = data['a'] 
	qty_asks_c_l_GBPBUSD = data['A'] 

	global symbol_g_GBPBUSD 
	global price_bids_g_GBPBUSD 
	global qty_bids_g_GBPBUSD 
	global price_asks_g_GBPBUSD 
	global qty_asks_g_GBPBUSD 

	symbol_g_GBPBUSD = symbol_c_l_GBPBUSD 
	price_bids_g_GBPBUSD = Decimal(price_bids_c_l_GBPBUSD) 
	qty_bids_g_GBPBUSD = Decimal(qty_bids_c_l_GBPBUSD) 
	price_asks_g_GBPBUSD = Decimal(price_asks_c_l_GBPBUSD) 
	qty_asks_g_GBPBUSD = Decimal(qty_asks_c_l_GBPBUSD) 


def loop_GBPBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gbpbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GBPBUSD) 
	ws.run_forever() 


Thread(target=loop_GBPBUSD).start() 
symbol_g_DGBBUSD = 'DGBBUSD' 
price_bids_g_DGBBUSD = Decimal('0.0') 
qty_bids_g_DGBBUSD = Decimal('0.0') 
price_asks_g_DGBBUSD = Decimal('0.0') 
qty_asks_g_DGBBUSD = Decimal('0.0') 
stepSize_g_DGBBUSD = Decimal('0.1') 


def on_message_DGBBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DGBBUSD = 'DGBBUSD' 
	price_bids_c_l_DGBBUSD = data['b'] 
	qty_bids_c_l_DGBBUSD = data['B'] 
	price_asks_c_l_DGBBUSD = data['a'] 
	qty_asks_c_l_DGBBUSD = data['A'] 

	global symbol_g_DGBBUSD 
	global price_bids_g_DGBBUSD 
	global qty_bids_g_DGBBUSD 
	global price_asks_g_DGBBUSD 
	global qty_asks_g_DGBBUSD 

	symbol_g_DGBBUSD = symbol_c_l_DGBBUSD 
	price_bids_g_DGBBUSD = Decimal(price_bids_c_l_DGBBUSD) 
	qty_bids_g_DGBBUSD = Decimal(qty_bids_c_l_DGBBUSD) 
	price_asks_g_DGBBUSD = Decimal(price_asks_c_l_DGBBUSD) 
	qty_asks_g_DGBBUSD = Decimal(qty_asks_c_l_DGBBUSD) 


def loop_DGBBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dgbbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DGBBUSD) 
	ws.run_forever() 


Thread(target=loop_DGBBUSD).start() 
symbol_g_COMPBUSD = 'COMPBUSD' 
price_bids_g_COMPBUSD = Decimal('0.0') 
qty_bids_g_COMPBUSD = Decimal('0.0') 
price_asks_g_COMPBUSD = Decimal('0.0') 
qty_asks_g_COMPBUSD = Decimal('0.0') 
stepSize_g_COMPBUSD = Decimal('0.001') 


def on_message_COMPBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COMPBUSD = 'COMPBUSD' 
	price_bids_c_l_COMPBUSD = data['b'] 
	qty_bids_c_l_COMPBUSD = data['B'] 
	price_asks_c_l_COMPBUSD = data['a'] 
	qty_asks_c_l_COMPBUSD = data['A'] 

	global symbol_g_COMPBUSD 
	global price_bids_g_COMPBUSD 
	global qty_bids_g_COMPBUSD 
	global price_asks_g_COMPBUSD 
	global qty_asks_g_COMPBUSD 

	symbol_g_COMPBUSD = symbol_c_l_COMPBUSD 
	price_bids_g_COMPBUSD = Decimal(price_bids_c_l_COMPBUSD) 
	qty_bids_g_COMPBUSD = Decimal(qty_bids_c_l_COMPBUSD) 
	price_asks_g_COMPBUSD = Decimal(price_asks_c_l_COMPBUSD) 
	qty_asks_g_COMPBUSD = Decimal(qty_asks_c_l_COMPBUSD) 


def loop_COMPBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/compbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COMPBUSD) 
	ws.run_forever() 


Thread(target=loop_COMPBUSD).start() 
symbol_g_SXPBUSD = 'SXPBUSD' 
price_bids_g_SXPBUSD = Decimal('0.0') 
qty_bids_g_SXPBUSD = Decimal('0.0') 
price_asks_g_SXPBUSD = Decimal('0.0') 
qty_asks_g_SXPBUSD = Decimal('0.0') 
stepSize_g_SXPBUSD = Decimal('0.1') 


def on_message_SXPBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SXPBUSD = 'SXPBUSD' 
	price_bids_c_l_SXPBUSD = data['b'] 
	qty_bids_c_l_SXPBUSD = data['B'] 
	price_asks_c_l_SXPBUSD = data['a'] 
	qty_asks_c_l_SXPBUSD = data['A'] 

	global symbol_g_SXPBUSD 
	global price_bids_g_SXPBUSD 
	global qty_bids_g_SXPBUSD 
	global price_asks_g_SXPBUSD 
	global qty_asks_g_SXPBUSD 

	symbol_g_SXPBUSD = symbol_c_l_SXPBUSD 
	price_bids_g_SXPBUSD = Decimal(price_bids_c_l_SXPBUSD) 
	qty_bids_g_SXPBUSD = Decimal(qty_bids_c_l_SXPBUSD) 
	price_asks_g_SXPBUSD = Decimal(price_asks_c_l_SXPBUSD) 
	qty_asks_g_SXPBUSD = Decimal(qty_asks_c_l_SXPBUSD) 


def loop_SXPBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sxpbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SXPBUSD) 
	ws.run_forever() 


Thread(target=loop_SXPBUSD).start() 
symbol_g_SNXBUSD = 'SNXBUSD' 
price_bids_g_SNXBUSD = Decimal('0.0') 
qty_bids_g_SNXBUSD = Decimal('0.0') 
price_asks_g_SNXBUSD = Decimal('0.0') 
qty_asks_g_SNXBUSD = Decimal('0.0') 
stepSize_g_SNXBUSD = Decimal('0.1') 


def on_message_SNXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SNXBUSD = 'SNXBUSD' 
	price_bids_c_l_SNXBUSD = data['b'] 
	qty_bids_c_l_SNXBUSD = data['B'] 
	price_asks_c_l_SNXBUSD = data['a'] 
	qty_asks_c_l_SNXBUSD = data['A'] 

	global symbol_g_SNXBUSD 
	global price_bids_g_SNXBUSD 
	global qty_bids_g_SNXBUSD 
	global price_asks_g_SNXBUSD 
	global qty_asks_g_SNXBUSD 

	symbol_g_SNXBUSD = symbol_c_l_SNXBUSD 
	price_bids_g_SNXBUSD = Decimal(price_bids_c_l_SNXBUSD) 
	qty_bids_g_SNXBUSD = Decimal(qty_bids_c_l_SNXBUSD) 
	price_asks_g_SNXBUSD = Decimal(price_asks_c_l_SNXBUSD) 
	qty_asks_g_SNXBUSD = Decimal(qty_asks_c_l_SNXBUSD) 


def loop_SNXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/snxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SNXBUSD) 
	ws.run_forever() 


Thread(target=loop_SNXBUSD).start() 
symbol_g_STORJBUSD = 'STORJBUSD' 
price_bids_g_STORJBUSD = Decimal('0.0') 
qty_bids_g_STORJBUSD = Decimal('0.0') 
price_asks_g_STORJBUSD = Decimal('0.0') 
qty_asks_g_STORJBUSD = Decimal('0.0') 
stepSize_g_STORJBUSD = Decimal('1.0') 


def on_message_STORJBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STORJBUSD = 'STORJBUSD' 
	price_bids_c_l_STORJBUSD = data['b'] 
	qty_bids_c_l_STORJBUSD = data['B'] 
	price_asks_c_l_STORJBUSD = data['a'] 
	qty_asks_c_l_STORJBUSD = data['A'] 

	global symbol_g_STORJBUSD 
	global price_bids_g_STORJBUSD 
	global qty_bids_g_STORJBUSD 
	global price_asks_g_STORJBUSD 
	global qty_asks_g_STORJBUSD 

	symbol_g_STORJBUSD = symbol_c_l_STORJBUSD 
	price_bids_g_STORJBUSD = Decimal(price_bids_c_l_STORJBUSD) 
	qty_bids_g_STORJBUSD = Decimal(qty_bids_c_l_STORJBUSD) 
	price_asks_g_STORJBUSD = Decimal(price_asks_c_l_STORJBUSD) 
	qty_asks_g_STORJBUSD = Decimal(qty_asks_c_l_STORJBUSD) 


def loop_STORJBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/storjbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STORJBUSD) 
	ws.run_forever() 


Thread(target=loop_STORJBUSD).start() 
symbol_g_MKRBUSD = 'MKRBUSD' 
price_bids_g_MKRBUSD = Decimal('0.0') 
qty_bids_g_MKRBUSD = Decimal('0.0') 
price_asks_g_MKRBUSD = Decimal('0.0') 
qty_asks_g_MKRBUSD = Decimal('0.0') 
stepSize_g_MKRBUSD = Decimal('0.0001') 


def on_message_MKRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MKRBUSD = 'MKRBUSD' 
	price_bids_c_l_MKRBUSD = data['b'] 
	qty_bids_c_l_MKRBUSD = data['B'] 
	price_asks_c_l_MKRBUSD = data['a'] 
	qty_asks_c_l_MKRBUSD = data['A'] 

	global symbol_g_MKRBUSD 
	global price_bids_g_MKRBUSD 
	global qty_bids_g_MKRBUSD 
	global price_asks_g_MKRBUSD 
	global qty_asks_g_MKRBUSD 

	symbol_g_MKRBUSD = symbol_c_l_MKRBUSD 
	price_bids_g_MKRBUSD = Decimal(price_bids_c_l_MKRBUSD) 
	qty_bids_g_MKRBUSD = Decimal(qty_bids_c_l_MKRBUSD) 
	price_asks_g_MKRBUSD = Decimal(price_asks_c_l_MKRBUSD) 
	qty_asks_g_MKRBUSD = Decimal(qty_asks_c_l_MKRBUSD) 


def loop_MKRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mkrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MKRBUSD) 
	ws.run_forever() 


Thread(target=loop_MKRBUSD).start() 
symbol_g_RUNEBUSD = 'RUNEBUSD' 
price_bids_g_RUNEBUSD = Decimal('0.0') 
qty_bids_g_RUNEBUSD = Decimal('0.0') 
price_asks_g_RUNEBUSD = Decimal('0.0') 
qty_asks_g_RUNEBUSD = Decimal('0.0') 
stepSize_g_RUNEBUSD = Decimal('0.1') 


def on_message_RUNEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RUNEBUSD = 'RUNEBUSD' 
	price_bids_c_l_RUNEBUSD = data['b'] 
	qty_bids_c_l_RUNEBUSD = data['B'] 
	price_asks_c_l_RUNEBUSD = data['a'] 
	qty_asks_c_l_RUNEBUSD = data['A'] 

	global symbol_g_RUNEBUSD 
	global price_bids_g_RUNEBUSD 
	global qty_bids_g_RUNEBUSD 
	global price_asks_g_RUNEBUSD 
	global qty_asks_g_RUNEBUSD 

	symbol_g_RUNEBUSD = symbol_c_l_RUNEBUSD 
	price_bids_g_RUNEBUSD = Decimal(price_bids_c_l_RUNEBUSD) 
	qty_bids_g_RUNEBUSD = Decimal(qty_bids_c_l_RUNEBUSD) 
	price_asks_g_RUNEBUSD = Decimal(price_asks_c_l_RUNEBUSD) 
	qty_asks_g_RUNEBUSD = Decimal(qty_asks_c_l_RUNEBUSD) 


def loop_RUNEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/runebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RUNEBUSD) 
	ws.run_forever() 


Thread(target=loop_RUNEBUSD).start() 
symbol_g_MANABUSD = 'MANABUSD' 
price_bids_g_MANABUSD = Decimal('0.0') 
qty_bids_g_MANABUSD = Decimal('0.0') 
price_asks_g_MANABUSD = Decimal('0.0') 
qty_asks_g_MANABUSD = Decimal('0.0') 
stepSize_g_MANABUSD = Decimal('1.0') 


def on_message_MANABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MANABUSD = 'MANABUSD' 
	price_bids_c_l_MANABUSD = data['b'] 
	qty_bids_c_l_MANABUSD = data['B'] 
	price_asks_c_l_MANABUSD = data['a'] 
	qty_asks_c_l_MANABUSD = data['A'] 

	global symbol_g_MANABUSD 
	global price_bids_g_MANABUSD 
	global qty_bids_g_MANABUSD 
	global price_asks_g_MANABUSD 
	global qty_asks_g_MANABUSD 

	symbol_g_MANABUSD = symbol_c_l_MANABUSD 
	price_bids_g_MANABUSD = Decimal(price_bids_c_l_MANABUSD) 
	qty_bids_g_MANABUSD = Decimal(qty_bids_c_l_MANABUSD) 
	price_asks_g_MANABUSD = Decimal(price_asks_c_l_MANABUSD) 
	qty_asks_g_MANABUSD = Decimal(qty_asks_c_l_MANABUSD) 


def loop_MANABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/manabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MANABUSD) 
	ws.run_forever() 


Thread(target=loop_MANABUSD).start() 
symbol_g_AUDBUSD = 'AUDBUSD' 
price_bids_g_AUDBUSD = Decimal('0.0') 
qty_bids_g_AUDBUSD = Decimal('0.0') 
price_asks_g_AUDBUSD = Decimal('0.0') 
qty_asks_g_AUDBUSD = Decimal('0.0') 
stepSize_g_AUDBUSD = Decimal('1.0') 


def on_message_AUDBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AUDBUSD = 'AUDBUSD' 
	price_bids_c_l_AUDBUSD = data['b'] 
	qty_bids_c_l_AUDBUSD = data['B'] 
	price_asks_c_l_AUDBUSD = data['a'] 
	qty_asks_c_l_AUDBUSD = data['A'] 

	global symbol_g_AUDBUSD 
	global price_bids_g_AUDBUSD 
	global qty_bids_g_AUDBUSD 
	global price_asks_g_AUDBUSD 
	global qty_asks_g_AUDBUSD 

	symbol_g_AUDBUSD = symbol_c_l_AUDBUSD 
	price_bids_g_AUDBUSD = Decimal(price_bids_c_l_AUDBUSD) 
	qty_bids_g_AUDBUSD = Decimal(qty_bids_c_l_AUDBUSD) 
	price_asks_g_AUDBUSD = Decimal(price_asks_c_l_AUDBUSD) 
	qty_asks_g_AUDBUSD = Decimal(qty_asks_c_l_AUDBUSD) 


def loop_AUDBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/audbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AUDBUSD) 
	ws.run_forever() 


Thread(target=loop_AUDBUSD).start() 
symbol_g_FIOBUSD = 'FIOBUSD' 
price_bids_g_FIOBUSD = Decimal('0.0') 
qty_bids_g_FIOBUSD = Decimal('0.0') 
price_asks_g_FIOBUSD = Decimal('0.0') 
qty_asks_g_FIOBUSD = Decimal('0.0') 
stepSize_g_FIOBUSD = Decimal('1.0') 


def on_message_FIOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FIOBUSD = 'FIOBUSD' 
	price_bids_c_l_FIOBUSD = data['b'] 
	qty_bids_c_l_FIOBUSD = data['B'] 
	price_asks_c_l_FIOBUSD = data['a'] 
	qty_asks_c_l_FIOBUSD = data['A'] 

	global symbol_g_FIOBUSD 
	global price_bids_g_FIOBUSD 
	global qty_bids_g_FIOBUSD 
	global price_asks_g_FIOBUSD 
	global qty_asks_g_FIOBUSD 

	symbol_g_FIOBUSD = symbol_c_l_FIOBUSD 
	price_bids_g_FIOBUSD = Decimal(price_bids_c_l_FIOBUSD) 
	qty_bids_g_FIOBUSD = Decimal(qty_bids_c_l_FIOBUSD) 
	price_asks_g_FIOBUSD = Decimal(price_asks_c_l_FIOBUSD) 
	qty_asks_g_FIOBUSD = Decimal(qty_asks_c_l_FIOBUSD) 


def loop_FIOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fiobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FIOBUSD) 
	ws.run_forever() 


Thread(target=loop_FIOBUSD).start() 
symbol_g_AVABUSD = 'AVABUSD' 
price_bids_g_AVABUSD = Decimal('0.0') 
qty_bids_g_AVABUSD = Decimal('0.0') 
price_asks_g_AVABUSD = Decimal('0.0') 
qty_asks_g_AVABUSD = Decimal('0.0') 
stepSize_g_AVABUSD = Decimal('0.1') 


def on_message_AVABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AVABUSD = 'AVABUSD' 
	price_bids_c_l_AVABUSD = data['b'] 
	qty_bids_c_l_AVABUSD = data['B'] 
	price_asks_c_l_AVABUSD = data['a'] 
	qty_asks_c_l_AVABUSD = data['A'] 

	global symbol_g_AVABUSD 
	global price_bids_g_AVABUSD 
	global qty_bids_g_AVABUSD 
	global price_asks_g_AVABUSD 
	global qty_asks_g_AVABUSD 

	symbol_g_AVABUSD = symbol_c_l_AVABUSD 
	price_bids_g_AVABUSD = Decimal(price_bids_c_l_AVABUSD) 
	qty_bids_g_AVABUSD = Decimal(qty_bids_c_l_AVABUSD) 
	price_asks_g_AVABUSD = Decimal(price_asks_c_l_AVABUSD) 
	qty_asks_g_AVABUSD = Decimal(qty_asks_c_l_AVABUSD) 


def loop_AVABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/avabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AVABUSD) 
	ws.run_forever() 


Thread(target=loop_AVABUSD).start() 
symbol_g_BALBUSD = 'BALBUSD' 
price_bids_g_BALBUSD = Decimal('0.0') 
qty_bids_g_BALBUSD = Decimal('0.0') 
price_asks_g_BALBUSD = Decimal('0.0') 
qty_asks_g_BALBUSD = Decimal('0.0') 
stepSize_g_BALBUSD = Decimal('0.01') 


def on_message_BALBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BALBUSD = 'BALBUSD' 
	price_bids_c_l_BALBUSD = data['b'] 
	qty_bids_c_l_BALBUSD = data['B'] 
	price_asks_c_l_BALBUSD = data['a'] 
	qty_asks_c_l_BALBUSD = data['A'] 

	global symbol_g_BALBUSD 
	global price_bids_g_BALBUSD 
	global qty_bids_g_BALBUSD 
	global price_asks_g_BALBUSD 
	global qty_asks_g_BALBUSD 

	symbol_g_BALBUSD = symbol_c_l_BALBUSD 
	price_bids_g_BALBUSD = Decimal(price_bids_c_l_BALBUSD) 
	qty_bids_g_BALBUSD = Decimal(qty_bids_c_l_BALBUSD) 
	price_asks_g_BALBUSD = Decimal(price_asks_c_l_BALBUSD) 
	qty_asks_g_BALBUSD = Decimal(qty_asks_c_l_BALBUSD) 


def loop_BALBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/balbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BALBUSD) 
	ws.run_forever() 


Thread(target=loop_BALBUSD).start() 
symbol_g_YFIBUSD = 'YFIBUSD' 
price_bids_g_YFIBUSD = Decimal('0.0') 
qty_bids_g_YFIBUSD = Decimal('0.0') 
price_asks_g_YFIBUSD = Decimal('0.0') 
qty_asks_g_YFIBUSD = Decimal('0.0') 
stepSize_g_YFIBUSD = Decimal('0.00001') 


def on_message_YFIBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_YFIBUSD = 'YFIBUSD' 
	price_bids_c_l_YFIBUSD = data['b'] 
	qty_bids_c_l_YFIBUSD = data['B'] 
	price_asks_c_l_YFIBUSD = data['a'] 
	qty_asks_c_l_YFIBUSD = data['A'] 

	global symbol_g_YFIBUSD 
	global price_bids_g_YFIBUSD 
	global qty_bids_g_YFIBUSD 
	global price_asks_g_YFIBUSD 
	global qty_asks_g_YFIBUSD 

	symbol_g_YFIBUSD = symbol_c_l_YFIBUSD 
	price_bids_g_YFIBUSD = Decimal(price_bids_c_l_YFIBUSD) 
	qty_bids_g_YFIBUSD = Decimal(qty_bids_c_l_YFIBUSD) 
	price_asks_g_YFIBUSD = Decimal(price_asks_c_l_YFIBUSD) 
	qty_asks_g_YFIBUSD = Decimal(qty_asks_c_l_YFIBUSD) 


def loop_YFIBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/yfibusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_YFIBUSD) 
	ws.run_forever() 


Thread(target=loop_YFIBUSD).start() 
symbol_g_BLZBUSD = 'BLZBUSD' 
price_bids_g_BLZBUSD = Decimal('0.0') 
qty_bids_g_BLZBUSD = Decimal('0.0') 
price_asks_g_BLZBUSD = Decimal('0.0') 
qty_asks_g_BLZBUSD = Decimal('0.0') 
stepSize_g_BLZBUSD = Decimal('1.0') 


def on_message_BLZBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BLZBUSD = 'BLZBUSD' 
	price_bids_c_l_BLZBUSD = data['b'] 
	qty_bids_c_l_BLZBUSD = data['B'] 
	price_asks_c_l_BLZBUSD = data['a'] 
	qty_asks_c_l_BLZBUSD = data['A'] 

	global symbol_g_BLZBUSD 
	global price_bids_g_BLZBUSD 
	global qty_bids_g_BLZBUSD 
	global price_asks_g_BLZBUSD 
	global qty_asks_g_BLZBUSD 

	symbol_g_BLZBUSD = symbol_c_l_BLZBUSD 
	price_bids_g_BLZBUSD = Decimal(price_bids_c_l_BLZBUSD) 
	qty_bids_g_BLZBUSD = Decimal(qty_bids_c_l_BLZBUSD) 
	price_asks_g_BLZBUSD = Decimal(price_asks_c_l_BLZBUSD) 
	qty_asks_g_BLZBUSD = Decimal(qty_asks_c_l_BLZBUSD) 


def loop_BLZBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/blzbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BLZBUSD) 
	ws.run_forever() 


Thread(target=loop_BLZBUSD).start() 
symbol_g_JSTBUSD = 'JSTBUSD' 
price_bids_g_JSTBUSD = Decimal('0.0') 
qty_bids_g_JSTBUSD = Decimal('0.0') 
price_asks_g_JSTBUSD = Decimal('0.0') 
qty_asks_g_JSTBUSD = Decimal('0.0') 
stepSize_g_JSTBUSD = Decimal('0.1') 


def on_message_JSTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JSTBUSD = 'JSTBUSD' 
	price_bids_c_l_JSTBUSD = data['b'] 
	qty_bids_c_l_JSTBUSD = data['B'] 
	price_asks_c_l_JSTBUSD = data['a'] 
	qty_asks_c_l_JSTBUSD = data['A'] 

	global symbol_g_JSTBUSD 
	global price_bids_g_JSTBUSD 
	global qty_bids_g_JSTBUSD 
	global price_asks_g_JSTBUSD 
	global qty_asks_g_JSTBUSD 

	symbol_g_JSTBUSD = symbol_c_l_JSTBUSD 
	price_bids_g_JSTBUSD = Decimal(price_bids_c_l_JSTBUSD) 
	qty_bids_g_JSTBUSD = Decimal(qty_bids_c_l_JSTBUSD) 
	price_asks_g_JSTBUSD = Decimal(price_asks_c_l_JSTBUSD) 
	qty_asks_g_JSTBUSD = Decimal(qty_asks_c_l_JSTBUSD) 


def loop_JSTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/jstbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JSTBUSD) 
	ws.run_forever() 


Thread(target=loop_JSTBUSD).start() 
symbol_g_ANTBUSD = 'ANTBUSD' 
price_bids_g_ANTBUSD = Decimal('0.0') 
qty_bids_g_ANTBUSD = Decimal('0.0') 
price_asks_g_ANTBUSD = Decimal('0.0') 
qty_asks_g_ANTBUSD = Decimal('0.0') 
stepSize_g_ANTBUSD = Decimal('0.1') 


def on_message_ANTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ANTBUSD = 'ANTBUSD' 
	price_bids_c_l_ANTBUSD = data['b'] 
	qty_bids_c_l_ANTBUSD = data['B'] 
	price_asks_c_l_ANTBUSD = data['a'] 
	qty_asks_c_l_ANTBUSD = data['A'] 

	global symbol_g_ANTBUSD 
	global price_bids_g_ANTBUSD 
	global qty_bids_g_ANTBUSD 
	global price_asks_g_ANTBUSD 
	global qty_asks_g_ANTBUSD 

	symbol_g_ANTBUSD = symbol_c_l_ANTBUSD 
	price_bids_g_ANTBUSD = Decimal(price_bids_c_l_ANTBUSD) 
	qty_bids_g_ANTBUSD = Decimal(qty_bids_c_l_ANTBUSD) 
	price_asks_g_ANTBUSD = Decimal(price_asks_c_l_ANTBUSD) 
	qty_asks_g_ANTBUSD = Decimal(qty_asks_c_l_ANTBUSD) 


def loop_ANTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/antbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ANTBUSD) 
	ws.run_forever() 


Thread(target=loop_ANTBUSD).start() 
symbol_g_CRVBUSD = 'CRVBUSD' 
price_bids_g_CRVBUSD = Decimal('0.0') 
qty_bids_g_CRVBUSD = Decimal('0.0') 
price_asks_g_CRVBUSD = Decimal('0.0') 
qty_asks_g_CRVBUSD = Decimal('0.0') 
stepSize_g_CRVBUSD = Decimal('0.1') 


def on_message_CRVBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CRVBUSD = 'CRVBUSD' 
	price_bids_c_l_CRVBUSD = data['b'] 
	qty_bids_c_l_CRVBUSD = data['B'] 
	price_asks_c_l_CRVBUSD = data['a'] 
	qty_asks_c_l_CRVBUSD = data['A'] 

	global symbol_g_CRVBUSD 
	global price_bids_g_CRVBUSD 
	global qty_bids_g_CRVBUSD 
	global price_asks_g_CRVBUSD 
	global qty_asks_g_CRVBUSD 

	symbol_g_CRVBUSD = symbol_c_l_CRVBUSD 
	price_bids_g_CRVBUSD = Decimal(price_bids_c_l_CRVBUSD) 
	qty_bids_g_CRVBUSD = Decimal(qty_bids_c_l_CRVBUSD) 
	price_asks_g_CRVBUSD = Decimal(price_asks_c_l_CRVBUSD) 
	qty_asks_g_CRVBUSD = Decimal(qty_asks_c_l_CRVBUSD) 


def loop_CRVBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/crvbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CRVBUSD) 
	ws.run_forever() 


Thread(target=loop_CRVBUSD).start() 
symbol_g_SANDBUSD = 'SANDBUSD' 
price_bids_g_SANDBUSD = Decimal('0.0') 
qty_bids_g_SANDBUSD = Decimal('0.0') 
price_asks_g_SANDBUSD = Decimal('0.0') 
qty_asks_g_SANDBUSD = Decimal('0.0') 
stepSize_g_SANDBUSD = Decimal('1.0') 


def on_message_SANDBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SANDBUSD = 'SANDBUSD' 
	price_bids_c_l_SANDBUSD = data['b'] 
	qty_bids_c_l_SANDBUSD = data['B'] 
	price_asks_c_l_SANDBUSD = data['a'] 
	qty_asks_c_l_SANDBUSD = data['A'] 

	global symbol_g_SANDBUSD 
	global price_bids_g_SANDBUSD 
	global qty_bids_g_SANDBUSD 
	global price_asks_g_SANDBUSD 
	global qty_asks_g_SANDBUSD 

	symbol_g_SANDBUSD = symbol_c_l_SANDBUSD 
	price_bids_g_SANDBUSD = Decimal(price_bids_c_l_SANDBUSD) 
	qty_bids_g_SANDBUSD = Decimal(qty_bids_c_l_SANDBUSD) 
	price_asks_g_SANDBUSD = Decimal(price_asks_c_l_SANDBUSD) 
	qty_asks_g_SANDBUSD = Decimal(qty_asks_c_l_SANDBUSD) 


def loop_SANDBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sandbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SANDBUSD) 
	ws.run_forever() 


Thread(target=loop_SANDBUSD).start() 
symbol_g_OCEANBUSD = 'OCEANBUSD' 
price_bids_g_OCEANBUSD = Decimal('0.0') 
qty_bids_g_OCEANBUSD = Decimal('0.0') 
price_asks_g_OCEANBUSD = Decimal('0.0') 
qty_asks_g_OCEANBUSD = Decimal('0.0') 
stepSize_g_OCEANBUSD = Decimal('1.0') 


def on_message_OCEANBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OCEANBUSD = 'OCEANBUSD' 
	price_bids_c_l_OCEANBUSD = data['b'] 
	qty_bids_c_l_OCEANBUSD = data['B'] 
	price_asks_c_l_OCEANBUSD = data['a'] 
	qty_asks_c_l_OCEANBUSD = data['A'] 

	global symbol_g_OCEANBUSD 
	global price_bids_g_OCEANBUSD 
	global qty_bids_g_OCEANBUSD 
	global price_asks_g_OCEANBUSD 
	global qty_asks_g_OCEANBUSD 

	symbol_g_OCEANBUSD = symbol_c_l_OCEANBUSD 
	price_bids_g_OCEANBUSD = Decimal(price_bids_c_l_OCEANBUSD) 
	qty_bids_g_OCEANBUSD = Decimal(qty_bids_c_l_OCEANBUSD) 
	price_asks_g_OCEANBUSD = Decimal(price_asks_c_l_OCEANBUSD) 
	qty_asks_g_OCEANBUSD = Decimal(qty_asks_c_l_OCEANBUSD) 


def loop_OCEANBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/oceanbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OCEANBUSD) 
	ws.run_forever() 


Thread(target=loop_OCEANBUSD).start() 
symbol_g_NMRBUSD = 'NMRBUSD' 
price_bids_g_NMRBUSD = Decimal('0.0') 
qty_bids_g_NMRBUSD = Decimal('0.0') 
price_asks_g_NMRBUSD = Decimal('0.0') 
qty_asks_g_NMRBUSD = Decimal('0.0') 
stepSize_g_NMRBUSD = Decimal('0.01') 


def on_message_NMRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NMRBUSD = 'NMRBUSD' 
	price_bids_c_l_NMRBUSD = data['b'] 
	qty_bids_c_l_NMRBUSD = data['B'] 
	price_asks_c_l_NMRBUSD = data['a'] 
	qty_asks_c_l_NMRBUSD = data['A'] 

	global symbol_g_NMRBUSD 
	global price_bids_g_NMRBUSD 
	global qty_bids_g_NMRBUSD 
	global price_asks_g_NMRBUSD 
	global qty_asks_g_NMRBUSD 

	symbol_g_NMRBUSD = symbol_c_l_NMRBUSD 
	price_bids_g_NMRBUSD = Decimal(price_bids_c_l_NMRBUSD) 
	qty_bids_g_NMRBUSD = Decimal(qty_bids_c_l_NMRBUSD) 
	price_asks_g_NMRBUSD = Decimal(price_asks_c_l_NMRBUSD) 
	qty_asks_g_NMRBUSD = Decimal(qty_asks_c_l_NMRBUSD) 


def loop_NMRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nmrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NMRBUSD) 
	ws.run_forever() 


Thread(target=loop_NMRBUSD).start() 
symbol_g_DOTBUSD = 'DOTBUSD' 
price_bids_g_DOTBUSD = Decimal('0.0') 
qty_bids_g_DOTBUSD = Decimal('0.0') 
price_asks_g_DOTBUSD = Decimal('0.0') 
qty_asks_g_DOTBUSD = Decimal('0.0') 
stepSize_g_DOTBUSD = Decimal('0.01') 


def on_message_DOTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOTBUSD = 'DOTBUSD' 
	price_bids_c_l_DOTBUSD = data['b'] 
	qty_bids_c_l_DOTBUSD = data['B'] 
	price_asks_c_l_DOTBUSD = data['a'] 
	qty_asks_c_l_DOTBUSD = data['A'] 

	global symbol_g_DOTBUSD 
	global price_bids_g_DOTBUSD 
	global qty_bids_g_DOTBUSD 
	global price_asks_g_DOTBUSD 
	global qty_asks_g_DOTBUSD 

	symbol_g_DOTBUSD = symbol_c_l_DOTBUSD 
	price_bids_g_DOTBUSD = Decimal(price_bids_c_l_DOTBUSD) 
	qty_bids_g_DOTBUSD = Decimal(qty_bids_c_l_DOTBUSD) 
	price_asks_g_DOTBUSD = Decimal(price_asks_c_l_DOTBUSD) 
	qty_asks_g_DOTBUSD = Decimal(qty_asks_c_l_DOTBUSD) 


def loop_DOTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dotbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOTBUSD) 
	ws.run_forever() 


Thread(target=loop_DOTBUSD).start() 
symbol_g_LUNABUSD = 'LUNABUSD' 
price_bids_g_LUNABUSD = Decimal('0.0') 
qty_bids_g_LUNABUSD = Decimal('0.0') 
price_asks_g_LUNABUSD = Decimal('0.0') 
qty_asks_g_LUNABUSD = Decimal('0.0') 
stepSize_g_LUNABUSD = Decimal('0.01') 


def on_message_LUNABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LUNABUSD = 'LUNABUSD' 
	price_bids_c_l_LUNABUSD = data['b'] 
	qty_bids_c_l_LUNABUSD = data['B'] 
	price_asks_c_l_LUNABUSD = data['a'] 
	qty_asks_c_l_LUNABUSD = data['A'] 

	global symbol_g_LUNABUSD 
	global price_bids_g_LUNABUSD 
	global qty_bids_g_LUNABUSD 
	global price_asks_g_LUNABUSD 
	global qty_asks_g_LUNABUSD 

	symbol_g_LUNABUSD = symbol_c_l_LUNABUSD 
	price_bids_g_LUNABUSD = Decimal(price_bids_c_l_LUNABUSD) 
	qty_bids_g_LUNABUSD = Decimal(qty_bids_c_l_LUNABUSD) 
	price_asks_g_LUNABUSD = Decimal(price_asks_c_l_LUNABUSD) 
	qty_asks_g_LUNABUSD = Decimal(qty_asks_c_l_LUNABUSD) 


def loop_LUNABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lunabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LUNABUSD) 
	ws.run_forever() 


Thread(target=loop_LUNABUSD).start() 
symbol_g_IDEXBUSD = 'IDEXBUSD' 
price_bids_g_IDEXBUSD = Decimal('0.0') 
qty_bids_g_IDEXBUSD = Decimal('0.0') 
price_asks_g_IDEXBUSD = Decimal('0.0') 
qty_asks_g_IDEXBUSD = Decimal('0.0') 
stepSize_g_IDEXBUSD = Decimal('0.1') 


def on_message_IDEXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IDEXBUSD = 'IDEXBUSD' 
	price_bids_c_l_IDEXBUSD = data['b'] 
	qty_bids_c_l_IDEXBUSD = data['B'] 
	price_asks_c_l_IDEXBUSD = data['a'] 
	qty_asks_c_l_IDEXBUSD = data['A'] 

	global symbol_g_IDEXBUSD 
	global price_bids_g_IDEXBUSD 
	global qty_bids_g_IDEXBUSD 
	global price_asks_g_IDEXBUSD 
	global qty_asks_g_IDEXBUSD 

	symbol_g_IDEXBUSD = symbol_c_l_IDEXBUSD 
	price_bids_g_IDEXBUSD = Decimal(price_bids_c_l_IDEXBUSD) 
	qty_bids_g_IDEXBUSD = Decimal(qty_bids_c_l_IDEXBUSD) 
	price_asks_g_IDEXBUSD = Decimal(price_asks_c_l_IDEXBUSD) 
	qty_asks_g_IDEXBUSD = Decimal(qty_asks_c_l_IDEXBUSD) 


def loop_IDEXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/idexbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IDEXBUSD) 
	ws.run_forever() 


Thread(target=loop_IDEXBUSD).start() 
symbol_g_RSRBUSD = 'RSRBUSD' 
price_bids_g_RSRBUSD = Decimal('0.0') 
qty_bids_g_RSRBUSD = Decimal('0.0') 
price_asks_g_RSRBUSD = Decimal('0.0') 
qty_asks_g_RSRBUSD = Decimal('0.0') 
stepSize_g_RSRBUSD = Decimal('0.1') 


def on_message_RSRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RSRBUSD = 'RSRBUSD' 
	price_bids_c_l_RSRBUSD = data['b'] 
	qty_bids_c_l_RSRBUSD = data['B'] 
	price_asks_c_l_RSRBUSD = data['a'] 
	qty_asks_c_l_RSRBUSD = data['A'] 

	global symbol_g_RSRBUSD 
	global price_bids_g_RSRBUSD 
	global qty_bids_g_RSRBUSD 
	global price_asks_g_RSRBUSD 
	global qty_asks_g_RSRBUSD 

	symbol_g_RSRBUSD = symbol_c_l_RSRBUSD 
	price_bids_g_RSRBUSD = Decimal(price_bids_c_l_RSRBUSD) 
	qty_bids_g_RSRBUSD = Decimal(qty_bids_c_l_RSRBUSD) 
	price_asks_g_RSRBUSD = Decimal(price_asks_c_l_RSRBUSD) 
	qty_asks_g_RSRBUSD = Decimal(qty_asks_c_l_RSRBUSD) 


def loop_RSRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rsrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RSRBUSD) 
	ws.run_forever() 


Thread(target=loop_RSRBUSD).start() 
symbol_g_PAXGBUSD = 'PAXGBUSD' 
price_bids_g_PAXGBUSD = Decimal('0.0') 
qty_bids_g_PAXGBUSD = Decimal('0.0') 
price_asks_g_PAXGBUSD = Decimal('0.0') 
qty_asks_g_PAXGBUSD = Decimal('0.0') 
stepSize_g_PAXGBUSD = Decimal('0.0001') 


def on_message_PAXGBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PAXGBUSD = 'PAXGBUSD' 
	price_bids_c_l_PAXGBUSD = data['b'] 
	qty_bids_c_l_PAXGBUSD = data['B'] 
	price_asks_c_l_PAXGBUSD = data['a'] 
	qty_asks_c_l_PAXGBUSD = data['A'] 

	global symbol_g_PAXGBUSD 
	global price_bids_g_PAXGBUSD 
	global qty_bids_g_PAXGBUSD 
	global price_asks_g_PAXGBUSD 
	global qty_asks_g_PAXGBUSD 

	symbol_g_PAXGBUSD = symbol_c_l_PAXGBUSD 
	price_bids_g_PAXGBUSD = Decimal(price_bids_c_l_PAXGBUSD) 
	qty_bids_g_PAXGBUSD = Decimal(qty_bids_c_l_PAXGBUSD) 
	price_asks_g_PAXGBUSD = Decimal(price_asks_c_l_PAXGBUSD) 
	qty_asks_g_PAXGBUSD = Decimal(qty_asks_c_l_PAXGBUSD) 


def loop_PAXGBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/paxgbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PAXGBUSD) 
	ws.run_forever() 


Thread(target=loop_PAXGBUSD).start() 
symbol_g_TRBBUSD = 'TRBBUSD' 
price_bids_g_TRBBUSD = Decimal('0.0') 
qty_bids_g_TRBBUSD = Decimal('0.0') 
price_asks_g_TRBBUSD = Decimal('0.0') 
qty_asks_g_TRBBUSD = Decimal('0.0') 
stepSize_g_TRBBUSD = Decimal('0.01') 


def on_message_TRBBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TRBBUSD = 'TRBBUSD' 
	price_bids_c_l_TRBBUSD = data['b'] 
	qty_bids_c_l_TRBBUSD = data['B'] 
	price_asks_c_l_TRBBUSD = data['a'] 
	qty_asks_c_l_TRBBUSD = data['A'] 

	global symbol_g_TRBBUSD 
	global price_bids_g_TRBBUSD 
	global qty_bids_g_TRBBUSD 
	global price_asks_g_TRBBUSD 
	global qty_asks_g_TRBBUSD 

	symbol_g_TRBBUSD = symbol_c_l_TRBBUSD 
	price_bids_g_TRBBUSD = Decimal(price_bids_c_l_TRBBUSD) 
	qty_bids_g_TRBBUSD = Decimal(qty_bids_c_l_TRBBUSD) 
	price_asks_g_TRBBUSD = Decimal(price_asks_c_l_TRBBUSD) 
	qty_asks_g_TRBBUSD = Decimal(qty_asks_c_l_TRBBUSD) 


def loop_TRBBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/trbbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TRBBUSD) 
	ws.run_forever() 


Thread(target=loop_TRBBUSD).start() 
symbol_g_SUSHIBUSD = 'SUSHIBUSD' 
price_bids_g_SUSHIBUSD = Decimal('0.0') 
qty_bids_g_SUSHIBUSD = Decimal('0.0') 
price_asks_g_SUSHIBUSD = Decimal('0.0') 
qty_asks_g_SUSHIBUSD = Decimal('0.0') 
stepSize_g_SUSHIBUSD = Decimal('0.1') 


def on_message_SUSHIBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SUSHIBUSD = 'SUSHIBUSD' 
	price_bids_c_l_SUSHIBUSD = data['b'] 
	qty_bids_c_l_SUSHIBUSD = data['B'] 
	price_asks_c_l_SUSHIBUSD = data['a'] 
	qty_asks_c_l_SUSHIBUSD = data['A'] 

	global symbol_g_SUSHIBUSD 
	global price_bids_g_SUSHIBUSD 
	global qty_bids_g_SUSHIBUSD 
	global price_asks_g_SUSHIBUSD 
	global qty_asks_g_SUSHIBUSD 

	symbol_g_SUSHIBUSD = symbol_c_l_SUSHIBUSD 
	price_bids_g_SUSHIBUSD = Decimal(price_bids_c_l_SUSHIBUSD) 
	qty_bids_g_SUSHIBUSD = Decimal(qty_bids_c_l_SUSHIBUSD) 
	price_asks_g_SUSHIBUSD = Decimal(price_asks_c_l_SUSHIBUSD) 
	qty_asks_g_SUSHIBUSD = Decimal(qty_asks_c_l_SUSHIBUSD) 


def loop_SUSHIBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sushibusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SUSHIBUSD) 
	ws.run_forever() 


Thread(target=loop_SUSHIBUSD).start() 
symbol_g_KSMBUSD = 'KSMBUSD' 
price_bids_g_KSMBUSD = Decimal('0.0') 
qty_bids_g_KSMBUSD = Decimal('0.0') 
price_asks_g_KSMBUSD = Decimal('0.0') 
qty_asks_g_KSMBUSD = Decimal('0.0') 
stepSize_g_KSMBUSD = Decimal('0.001') 


def on_message_KSMBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KSMBUSD = 'KSMBUSD' 
	price_bids_c_l_KSMBUSD = data['b'] 
	qty_bids_c_l_KSMBUSD = data['B'] 
	price_asks_c_l_KSMBUSD = data['a'] 
	qty_asks_c_l_KSMBUSD = data['A'] 

	global symbol_g_KSMBUSD 
	global price_bids_g_KSMBUSD 
	global qty_bids_g_KSMBUSD 
	global price_asks_g_KSMBUSD 
	global qty_asks_g_KSMBUSD 

	symbol_g_KSMBUSD = symbol_c_l_KSMBUSD 
	price_bids_g_KSMBUSD = Decimal(price_bids_c_l_KSMBUSD) 
	qty_bids_g_KSMBUSD = Decimal(qty_bids_c_l_KSMBUSD) 
	price_asks_g_KSMBUSD = Decimal(price_asks_c_l_KSMBUSD) 
	qty_asks_g_KSMBUSD = Decimal(qty_asks_c_l_KSMBUSD) 


def loop_KSMBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ksmbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KSMBUSD) 
	ws.run_forever() 


Thread(target=loop_KSMBUSD).start() 
symbol_g_EGLDBUSD = 'EGLDBUSD' 
price_bids_g_EGLDBUSD = Decimal('0.0') 
qty_bids_g_EGLDBUSD = Decimal('0.0') 
price_asks_g_EGLDBUSD = Decimal('0.0') 
qty_asks_g_EGLDBUSD = Decimal('0.0') 
stepSize_g_EGLDBUSD = Decimal('0.01') 


def on_message_EGLDBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EGLDBUSD = 'EGLDBUSD' 
	price_bids_c_l_EGLDBUSD = data['b'] 
	qty_bids_c_l_EGLDBUSD = data['B'] 
	price_asks_c_l_EGLDBUSD = data['a'] 
	qty_asks_c_l_EGLDBUSD = data['A'] 

	global symbol_g_EGLDBUSD 
	global price_bids_g_EGLDBUSD 
	global qty_bids_g_EGLDBUSD 
	global price_asks_g_EGLDBUSD 
	global qty_asks_g_EGLDBUSD 

	symbol_g_EGLDBUSD = symbol_c_l_EGLDBUSD 
	price_bids_g_EGLDBUSD = Decimal(price_bids_c_l_EGLDBUSD) 
	qty_bids_g_EGLDBUSD = Decimal(qty_bids_c_l_EGLDBUSD) 
	price_asks_g_EGLDBUSD = Decimal(price_asks_c_l_EGLDBUSD) 
	qty_asks_g_EGLDBUSD = Decimal(qty_asks_c_l_EGLDBUSD) 


def loop_EGLDBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/egldbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EGLDBUSD) 
	ws.run_forever() 


Thread(target=loop_EGLDBUSD).start() 
symbol_g_DIABUSD = 'DIABUSD' 
price_bids_g_DIABUSD = Decimal('0.0') 
qty_bids_g_DIABUSD = Decimal('0.0') 
price_asks_g_DIABUSD = Decimal('0.0') 
qty_asks_g_DIABUSD = Decimal('0.0') 
stepSize_g_DIABUSD = Decimal('0.1') 


def on_message_DIABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DIABUSD = 'DIABUSD' 
	price_bids_c_l_DIABUSD = data['b'] 
	qty_bids_c_l_DIABUSD = data['B'] 
	price_asks_c_l_DIABUSD = data['a'] 
	qty_asks_c_l_DIABUSD = data['A'] 

	global symbol_g_DIABUSD 
	global price_bids_g_DIABUSD 
	global qty_bids_g_DIABUSD 
	global price_asks_g_DIABUSD 
	global qty_asks_g_DIABUSD 

	symbol_g_DIABUSD = symbol_c_l_DIABUSD 
	price_bids_g_DIABUSD = Decimal(price_bids_c_l_DIABUSD) 
	qty_bids_g_DIABUSD = Decimal(qty_bids_c_l_DIABUSD) 
	price_asks_g_DIABUSD = Decimal(price_asks_c_l_DIABUSD) 
	qty_asks_g_DIABUSD = Decimal(qty_asks_c_l_DIABUSD) 


def loop_DIABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/diabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DIABUSD) 
	ws.run_forever() 


Thread(target=loop_DIABUSD).start() 
symbol_g_BELBUSD = 'BELBUSD' 
price_bids_g_BELBUSD = Decimal('0.0') 
qty_bids_g_BELBUSD = Decimal('0.0') 
price_asks_g_BELBUSD = Decimal('0.0') 
qty_asks_g_BELBUSD = Decimal('0.0') 
stepSize_g_BELBUSD = Decimal('0.1') 


def on_message_BELBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BELBUSD = 'BELBUSD' 
	price_bids_c_l_BELBUSD = data['b'] 
	qty_bids_c_l_BELBUSD = data['B'] 
	price_asks_c_l_BELBUSD = data['a'] 
	qty_asks_c_l_BELBUSD = data['A'] 

	global symbol_g_BELBUSD 
	global price_bids_g_BELBUSD 
	global qty_bids_g_BELBUSD 
	global price_asks_g_BELBUSD 
	global qty_asks_g_BELBUSD 

	symbol_g_BELBUSD = symbol_c_l_BELBUSD 
	price_bids_g_BELBUSD = Decimal(price_bids_c_l_BELBUSD) 
	qty_bids_g_BELBUSD = Decimal(qty_bids_c_l_BELBUSD) 
	price_asks_g_BELBUSD = Decimal(price_asks_c_l_BELBUSD) 
	qty_asks_g_BELBUSD = Decimal(qty_asks_c_l_BELBUSD) 


def loop_BELBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/belbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BELBUSD) 
	ws.run_forever() 


Thread(target=loop_BELBUSD).start() 
symbol_g_WINGBUSD = 'WINGBUSD' 
price_bids_g_WINGBUSD = Decimal('0.0') 
qty_bids_g_WINGBUSD = Decimal('0.0') 
price_asks_g_WINGBUSD = Decimal('0.0') 
qty_asks_g_WINGBUSD = Decimal('0.0') 
stepSize_g_WINGBUSD = Decimal('0.01') 


def on_message_WINGBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WINGBUSD = 'WINGBUSD' 
	price_bids_c_l_WINGBUSD = data['b'] 
	qty_bids_c_l_WINGBUSD = data['B'] 
	price_asks_c_l_WINGBUSD = data['a'] 
	qty_asks_c_l_WINGBUSD = data['A'] 

	global symbol_g_WINGBUSD 
	global price_bids_g_WINGBUSD 
	global qty_bids_g_WINGBUSD 
	global price_asks_g_WINGBUSD 
	global qty_asks_g_WINGBUSD 

	symbol_g_WINGBUSD = symbol_c_l_WINGBUSD 
	price_bids_g_WINGBUSD = Decimal(price_bids_c_l_WINGBUSD) 
	qty_bids_g_WINGBUSD = Decimal(qty_bids_c_l_WINGBUSD) 
	price_asks_g_WINGBUSD = Decimal(price_asks_c_l_WINGBUSD) 
	qty_asks_g_WINGBUSD = Decimal(qty_asks_c_l_WINGBUSD) 


def loop_WINGBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/wingbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WINGBUSD) 
	ws.run_forever() 


Thread(target=loop_WINGBUSD).start() 
symbol_g_UNIBUSD = 'UNIBUSD' 
price_bids_g_UNIBUSD = Decimal('0.0') 
qty_bids_g_UNIBUSD = Decimal('0.0') 
price_asks_g_UNIBUSD = Decimal('0.0') 
qty_asks_g_UNIBUSD = Decimal('0.0') 
stepSize_g_UNIBUSD = Decimal('0.01') 


def on_message_UNIBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UNIBUSD = 'UNIBUSD' 
	price_bids_c_l_UNIBUSD = data['b'] 
	qty_bids_c_l_UNIBUSD = data['B'] 
	price_asks_c_l_UNIBUSD = data['a'] 
	qty_asks_c_l_UNIBUSD = data['A'] 

	global symbol_g_UNIBUSD 
	global price_bids_g_UNIBUSD 
	global qty_bids_g_UNIBUSD 
	global price_asks_g_UNIBUSD 
	global qty_asks_g_UNIBUSD 

	symbol_g_UNIBUSD = symbol_c_l_UNIBUSD 
	price_bids_g_UNIBUSD = Decimal(price_bids_c_l_UNIBUSD) 
	qty_bids_g_UNIBUSD = Decimal(qty_bids_c_l_UNIBUSD) 
	price_asks_g_UNIBUSD = Decimal(price_asks_c_l_UNIBUSD) 
	qty_asks_g_UNIBUSD = Decimal(qty_asks_c_l_UNIBUSD) 


def loop_UNIBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/unibusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UNIBUSD) 
	ws.run_forever() 


Thread(target=loop_UNIBUSD).start() 
symbol_g_AVAXBUSD = 'AVAXBUSD' 
price_bids_g_AVAXBUSD = Decimal('0.0') 
qty_bids_g_AVAXBUSD = Decimal('0.0') 
price_asks_g_AVAXBUSD = Decimal('0.0') 
qty_asks_g_AVAXBUSD = Decimal('0.0') 
stepSize_g_AVAXBUSD = Decimal('0.01') 


def on_message_AVAXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AVAXBUSD = 'AVAXBUSD' 
	price_bids_c_l_AVAXBUSD = data['b'] 
	qty_bids_c_l_AVAXBUSD = data['B'] 
	price_asks_c_l_AVAXBUSD = data['a'] 
	qty_asks_c_l_AVAXBUSD = data['A'] 

	global symbol_g_AVAXBUSD 
	global price_bids_g_AVAXBUSD 
	global qty_bids_g_AVAXBUSD 
	global price_asks_g_AVAXBUSD 
	global qty_asks_g_AVAXBUSD 

	symbol_g_AVAXBUSD = symbol_c_l_AVAXBUSD 
	price_bids_g_AVAXBUSD = Decimal(price_bids_c_l_AVAXBUSD) 
	qty_bids_g_AVAXBUSD = Decimal(qty_bids_c_l_AVAXBUSD) 
	price_asks_g_AVAXBUSD = Decimal(price_asks_c_l_AVAXBUSD) 
	qty_asks_g_AVAXBUSD = Decimal(qty_asks_c_l_AVAXBUSD) 


def loop_AVAXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/avaxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AVAXBUSD) 
	ws.run_forever() 


Thread(target=loop_AVAXBUSD).start() 
symbol_g_CAKEBUSD = 'CAKEBUSD' 
price_bids_g_CAKEBUSD = Decimal('0.0') 
qty_bids_g_CAKEBUSD = Decimal('0.0') 
price_asks_g_CAKEBUSD = Decimal('0.0') 
qty_asks_g_CAKEBUSD = Decimal('0.0') 
stepSize_g_CAKEBUSD = Decimal('0.01') 


def on_message_CAKEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CAKEBUSD = 'CAKEBUSD' 
	price_bids_c_l_CAKEBUSD = data['b'] 
	qty_bids_c_l_CAKEBUSD = data['B'] 
	price_asks_c_l_CAKEBUSD = data['a'] 
	qty_asks_c_l_CAKEBUSD = data['A'] 

	global symbol_g_CAKEBUSD 
	global price_bids_g_CAKEBUSD 
	global qty_bids_g_CAKEBUSD 
	global price_asks_g_CAKEBUSD 
	global qty_asks_g_CAKEBUSD 

	symbol_g_CAKEBUSD = symbol_c_l_CAKEBUSD 
	price_bids_g_CAKEBUSD = Decimal(price_bids_c_l_CAKEBUSD) 
	qty_bids_g_CAKEBUSD = Decimal(qty_bids_c_l_CAKEBUSD) 
	price_asks_g_CAKEBUSD = Decimal(price_asks_c_l_CAKEBUSD) 
	qty_asks_g_CAKEBUSD = Decimal(qty_asks_c_l_CAKEBUSD) 


def loop_CAKEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cakebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CAKEBUSD) 
	ws.run_forever() 


Thread(target=loop_CAKEBUSD).start() 
symbol_g_XVSBUSD = 'XVSBUSD' 
price_bids_g_XVSBUSD = Decimal('0.0') 
qty_bids_g_XVSBUSD = Decimal('0.0') 
price_asks_g_XVSBUSD = Decimal('0.0') 
qty_asks_g_XVSBUSD = Decimal('0.0') 
stepSize_g_XVSBUSD = Decimal('0.01') 


def on_message_XVSBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XVSBUSD = 'XVSBUSD' 
	price_bids_c_l_XVSBUSD = data['b'] 
	qty_bids_c_l_XVSBUSD = data['B'] 
	price_asks_c_l_XVSBUSD = data['a'] 
	qty_asks_c_l_XVSBUSD = data['A'] 

	global symbol_g_XVSBUSD 
	global price_bids_g_XVSBUSD 
	global qty_bids_g_XVSBUSD 
	global price_asks_g_XVSBUSD 
	global qty_asks_g_XVSBUSD 

	symbol_g_XVSBUSD = symbol_c_l_XVSBUSD 
	price_bids_g_XVSBUSD = Decimal(price_bids_c_l_XVSBUSD) 
	qty_bids_g_XVSBUSD = Decimal(qty_bids_c_l_XVSBUSD) 
	price_asks_g_XVSBUSD = Decimal(price_asks_c_l_XVSBUSD) 
	qty_asks_g_XVSBUSD = Decimal(qty_asks_c_l_XVSBUSD) 


def loop_XVSBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xvsbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XVSBUSD) 
	ws.run_forever() 


Thread(target=loop_XVSBUSD).start() 
symbol_g_ALPHABUSD = 'ALPHABUSD' 
price_bids_g_ALPHABUSD = Decimal('0.0') 
qty_bids_g_ALPHABUSD = Decimal('0.0') 
price_asks_g_ALPHABUSD = Decimal('0.0') 
qty_asks_g_ALPHABUSD = Decimal('0.0') 
stepSize_g_ALPHABUSD = Decimal('1.0') 


def on_message_ALPHABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALPHABUSD = 'ALPHABUSD' 
	price_bids_c_l_ALPHABUSD = data['b'] 
	qty_bids_c_l_ALPHABUSD = data['B'] 
	price_asks_c_l_ALPHABUSD = data['a'] 
	qty_asks_c_l_ALPHABUSD = data['A'] 

	global symbol_g_ALPHABUSD 
	global price_bids_g_ALPHABUSD 
	global qty_bids_g_ALPHABUSD 
	global price_asks_g_ALPHABUSD 
	global qty_asks_g_ALPHABUSD 

	symbol_g_ALPHABUSD = symbol_c_l_ALPHABUSD 
	price_bids_g_ALPHABUSD = Decimal(price_bids_c_l_ALPHABUSD) 
	qty_bids_g_ALPHABUSD = Decimal(qty_bids_c_l_ALPHABUSD) 
	price_asks_g_ALPHABUSD = Decimal(price_asks_c_l_ALPHABUSD) 
	qty_asks_g_ALPHABUSD = Decimal(qty_asks_c_l_ALPHABUSD) 


def loop_ALPHABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alphabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALPHABUSD) 
	ws.run_forever() 


Thread(target=loop_ALPHABUSD).start() 
symbol_g_VIDTBUSD = 'VIDTBUSD' 
price_bids_g_VIDTBUSD = Decimal('0.0') 
qty_bids_g_VIDTBUSD = Decimal('0.0') 
price_asks_g_VIDTBUSD = Decimal('0.0') 
qty_asks_g_VIDTBUSD = Decimal('0.0') 
stepSize_g_VIDTBUSD = Decimal('1.0') 


def on_message_VIDTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VIDTBUSD = 'VIDTBUSD' 
	price_bids_c_l_VIDTBUSD = data['b'] 
	qty_bids_c_l_VIDTBUSD = data['B'] 
	price_asks_c_l_VIDTBUSD = data['a'] 
	qty_asks_c_l_VIDTBUSD = data['A'] 

	global symbol_g_VIDTBUSD 
	global price_bids_g_VIDTBUSD 
	global qty_bids_g_VIDTBUSD 
	global price_asks_g_VIDTBUSD 
	global qty_asks_g_VIDTBUSD 

	symbol_g_VIDTBUSD = symbol_c_l_VIDTBUSD 
	price_bids_g_VIDTBUSD = Decimal(price_bids_c_l_VIDTBUSD) 
	qty_bids_g_VIDTBUSD = Decimal(qty_bids_c_l_VIDTBUSD) 
	price_asks_g_VIDTBUSD = Decimal(price_asks_c_l_VIDTBUSD) 
	qty_asks_g_VIDTBUSD = Decimal(qty_asks_c_l_VIDTBUSD) 


def loop_VIDTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/vidtbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VIDTBUSD) 
	ws.run_forever() 


Thread(target=loop_VIDTBUSD).start() 
symbol_g_AAVEBUSD = 'AAVEBUSD' 
price_bids_g_AAVEBUSD = Decimal('0.0') 
qty_bids_g_AAVEBUSD = Decimal('0.0') 
price_asks_g_AAVEBUSD = Decimal('0.0') 
qty_asks_g_AAVEBUSD = Decimal('0.0') 
stepSize_g_AAVEBUSD = Decimal('0.001') 


def on_message_AAVEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AAVEBUSD = 'AAVEBUSD' 
	price_bids_c_l_AAVEBUSD = data['b'] 
	qty_bids_c_l_AAVEBUSD = data['B'] 
	price_asks_c_l_AAVEBUSD = data['a'] 
	qty_asks_c_l_AAVEBUSD = data['A'] 

	global symbol_g_AAVEBUSD 
	global price_bids_g_AAVEBUSD 
	global qty_bids_g_AAVEBUSD 
	global price_asks_g_AAVEBUSD 
	global qty_asks_g_AAVEBUSD 

	symbol_g_AAVEBUSD = symbol_c_l_AAVEBUSD 
	price_bids_g_AAVEBUSD = Decimal(price_bids_c_l_AAVEBUSD) 
	qty_bids_g_AAVEBUSD = Decimal(qty_bids_c_l_AAVEBUSD) 
	price_asks_g_AAVEBUSD = Decimal(price_asks_c_l_AAVEBUSD) 
	qty_asks_g_AAVEBUSD = Decimal(qty_asks_c_l_AAVEBUSD) 


def loop_AAVEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/aavebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AAVEBUSD) 
	ws.run_forever() 


Thread(target=loop_AAVEBUSD).start() 
symbol_g_NEARBUSD = 'NEARBUSD' 
price_bids_g_NEARBUSD = Decimal('0.0') 
qty_bids_g_NEARBUSD = Decimal('0.0') 
price_asks_g_NEARBUSD = Decimal('0.0') 
qty_asks_g_NEARBUSD = Decimal('0.0') 
stepSize_g_NEARBUSD = Decimal('0.1') 


def on_message_NEARBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEARBUSD = 'NEARBUSD' 
	price_bids_c_l_NEARBUSD = data['b'] 
	qty_bids_c_l_NEARBUSD = data['B'] 
	price_asks_c_l_NEARBUSD = data['a'] 
	qty_asks_c_l_NEARBUSD = data['A'] 

	global symbol_g_NEARBUSD 
	global price_bids_g_NEARBUSD 
	global qty_bids_g_NEARBUSD 
	global price_asks_g_NEARBUSD 
	global qty_asks_g_NEARBUSD 

	symbol_g_NEARBUSD = symbol_c_l_NEARBUSD 
	price_bids_g_NEARBUSD = Decimal(price_bids_c_l_NEARBUSD) 
	qty_bids_g_NEARBUSD = Decimal(qty_bids_c_l_NEARBUSD) 
	price_asks_g_NEARBUSD = Decimal(price_asks_c_l_NEARBUSD) 
	qty_asks_g_NEARBUSD = Decimal(qty_asks_c_l_NEARBUSD) 


def loop_NEARBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nearbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEARBUSD) 
	ws.run_forever() 


Thread(target=loop_NEARBUSD).start() 
symbol_g_FILBUSD = 'FILBUSD' 
price_bids_g_FILBUSD = Decimal('0.0') 
qty_bids_g_FILBUSD = Decimal('0.0') 
price_asks_g_FILBUSD = Decimal('0.0') 
qty_asks_g_FILBUSD = Decimal('0.0') 
stepSize_g_FILBUSD = Decimal('0.01') 


def on_message_FILBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FILBUSD = 'FILBUSD' 
	price_bids_c_l_FILBUSD = data['b'] 
	qty_bids_c_l_FILBUSD = data['B'] 
	price_asks_c_l_FILBUSD = data['a'] 
	qty_asks_c_l_FILBUSD = data['A'] 

	global symbol_g_FILBUSD 
	global price_bids_g_FILBUSD 
	global qty_bids_g_FILBUSD 
	global price_asks_g_FILBUSD 
	global qty_asks_g_FILBUSD 

	symbol_g_FILBUSD = symbol_c_l_FILBUSD 
	price_bids_g_FILBUSD = Decimal(price_bids_c_l_FILBUSD) 
	qty_bids_g_FILBUSD = Decimal(qty_bids_c_l_FILBUSD) 
	price_asks_g_FILBUSD = Decimal(price_asks_c_l_FILBUSD) 
	qty_asks_g_FILBUSD = Decimal(qty_asks_c_l_FILBUSD) 


def loop_FILBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/filbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FILBUSD) 
	ws.run_forever() 


Thread(target=loop_FILBUSD).start() 
symbol_g_INJBUSD = 'INJBUSD' 
price_bids_g_INJBUSD = Decimal('0.0') 
qty_bids_g_INJBUSD = Decimal('0.0') 
price_asks_g_INJBUSD = Decimal('0.0') 
qty_asks_g_INJBUSD = Decimal('0.0') 
stepSize_g_INJBUSD = Decimal('0.1') 


def on_message_INJBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_INJBUSD = 'INJBUSD' 
	price_bids_c_l_INJBUSD = data['b'] 
	qty_bids_c_l_INJBUSD = data['B'] 
	price_asks_c_l_INJBUSD = data['a'] 
	qty_asks_c_l_INJBUSD = data['A'] 

	global symbol_g_INJBUSD 
	global price_bids_g_INJBUSD 
	global qty_bids_g_INJBUSD 
	global price_asks_g_INJBUSD 
	global qty_asks_g_INJBUSD 

	symbol_g_INJBUSD = symbol_c_l_INJBUSD 
	price_bids_g_INJBUSD = Decimal(price_bids_c_l_INJBUSD) 
	qty_bids_g_INJBUSD = Decimal(qty_bids_c_l_INJBUSD) 
	price_asks_g_INJBUSD = Decimal(price_asks_c_l_INJBUSD) 
	qty_asks_g_INJBUSD = Decimal(qty_asks_c_l_INJBUSD) 


def loop_INJBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/injbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_INJBUSD) 
	ws.run_forever() 


Thread(target=loop_INJBUSD).start() 
symbol_g_AUDIOBUSD = 'AUDIOBUSD' 
price_bids_g_AUDIOBUSD = Decimal('0.0') 
qty_bids_g_AUDIOBUSD = Decimal('0.0') 
price_asks_g_AUDIOBUSD = Decimal('0.0') 
qty_asks_g_AUDIOBUSD = Decimal('0.0') 
stepSize_g_AUDIOBUSD = Decimal('0.1') 


def on_message_AUDIOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AUDIOBUSD = 'AUDIOBUSD' 
	price_bids_c_l_AUDIOBUSD = data['b'] 
	qty_bids_c_l_AUDIOBUSD = data['B'] 
	price_asks_c_l_AUDIOBUSD = data['a'] 
	qty_asks_c_l_AUDIOBUSD = data['A'] 

	global symbol_g_AUDIOBUSD 
	global price_bids_g_AUDIOBUSD 
	global qty_bids_g_AUDIOBUSD 
	global price_asks_g_AUDIOBUSD 
	global qty_asks_g_AUDIOBUSD 

	symbol_g_AUDIOBUSD = symbol_c_l_AUDIOBUSD 
	price_bids_g_AUDIOBUSD = Decimal(price_bids_c_l_AUDIOBUSD) 
	qty_bids_g_AUDIOBUSD = Decimal(qty_bids_c_l_AUDIOBUSD) 
	price_asks_g_AUDIOBUSD = Decimal(price_asks_c_l_AUDIOBUSD) 
	qty_asks_g_AUDIOBUSD = Decimal(qty_asks_c_l_AUDIOBUSD) 


def loop_AUDIOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/audiobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AUDIOBUSD) 
	ws.run_forever() 


Thread(target=loop_AUDIOBUSD).start() 
symbol_g_CTKBUSD = 'CTKBUSD' 
price_bids_g_CTKBUSD = Decimal('0.0') 
qty_bids_g_CTKBUSD = Decimal('0.0') 
price_asks_g_CTKBUSD = Decimal('0.0') 
qty_asks_g_CTKBUSD = Decimal('0.0') 
stepSize_g_CTKBUSD = Decimal('0.1') 


def on_message_CTKBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CTKBUSD = 'CTKBUSD' 
	price_bids_c_l_CTKBUSD = data['b'] 
	qty_bids_c_l_CTKBUSD = data['B'] 
	price_asks_c_l_CTKBUSD = data['a'] 
	qty_asks_c_l_CTKBUSD = data['A'] 

	global symbol_g_CTKBUSD 
	global price_bids_g_CTKBUSD 
	global qty_bids_g_CTKBUSD 
	global price_asks_g_CTKBUSD 
	global qty_asks_g_CTKBUSD 

	symbol_g_CTKBUSD = symbol_c_l_CTKBUSD 
	price_bids_g_CTKBUSD = Decimal(price_bids_c_l_CTKBUSD) 
	qty_bids_g_CTKBUSD = Decimal(qty_bids_c_l_CTKBUSD) 
	price_asks_g_CTKBUSD = Decimal(price_asks_c_l_CTKBUSD) 
	qty_asks_g_CTKBUSD = Decimal(qty_asks_c_l_CTKBUSD) 


def loop_CTKBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ctkbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CTKBUSD) 
	ws.run_forever() 


Thread(target=loop_CTKBUSD).start() 
symbol_g_KP3RBUSD = 'KP3RBUSD' 
price_bids_g_KP3RBUSD = Decimal('0.0') 
qty_bids_g_KP3RBUSD = Decimal('0.0') 
price_asks_g_KP3RBUSD = Decimal('0.0') 
qty_asks_g_KP3RBUSD = Decimal('0.0') 
stepSize_g_KP3RBUSD = Decimal('0.01') 


def on_message_KP3RBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KP3RBUSD = 'KP3RBUSD' 
	price_bids_c_l_KP3RBUSD = data['b'] 
	qty_bids_c_l_KP3RBUSD = data['B'] 
	price_asks_c_l_KP3RBUSD = data['a'] 
	qty_asks_c_l_KP3RBUSD = data['A'] 

	global symbol_g_KP3RBUSD 
	global price_bids_g_KP3RBUSD 
	global qty_bids_g_KP3RBUSD 
	global price_asks_g_KP3RBUSD 
	global qty_asks_g_KP3RBUSD 

	symbol_g_KP3RBUSD = symbol_c_l_KP3RBUSD 
	price_bids_g_KP3RBUSD = Decimal(price_bids_c_l_KP3RBUSD) 
	qty_bids_g_KP3RBUSD = Decimal(qty_bids_c_l_KP3RBUSD) 
	price_asks_g_KP3RBUSD = Decimal(price_asks_c_l_KP3RBUSD) 
	qty_asks_g_KP3RBUSD = Decimal(qty_asks_c_l_KP3RBUSD) 


def loop_KP3RBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kp3rbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KP3RBUSD) 
	ws.run_forever() 


Thread(target=loop_KP3RBUSD).start() 
symbol_g_AXSBUSD = 'AXSBUSD' 
price_bids_g_AXSBUSD = Decimal('0.0') 
qty_bids_g_AXSBUSD = Decimal('0.0') 
price_asks_g_AXSBUSD = Decimal('0.0') 
qty_asks_g_AXSBUSD = Decimal('0.0') 
stepSize_g_AXSBUSD = Decimal('0.01') 


def on_message_AXSBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AXSBUSD = 'AXSBUSD' 
	price_bids_c_l_AXSBUSD = data['b'] 
	qty_bids_c_l_AXSBUSD = data['B'] 
	price_asks_c_l_AXSBUSD = data['a'] 
	qty_asks_c_l_AXSBUSD = data['A'] 

	global symbol_g_AXSBUSD 
	global price_bids_g_AXSBUSD 
	global qty_bids_g_AXSBUSD 
	global price_asks_g_AXSBUSD 
	global qty_asks_g_AXSBUSD 

	symbol_g_AXSBUSD = symbol_c_l_AXSBUSD 
	price_bids_g_AXSBUSD = Decimal(price_bids_c_l_AXSBUSD) 
	qty_bids_g_AXSBUSD = Decimal(qty_bids_c_l_AXSBUSD) 
	price_asks_g_AXSBUSD = Decimal(price_asks_c_l_AXSBUSD) 
	qty_asks_g_AXSBUSD = Decimal(qty_asks_c_l_AXSBUSD) 


def loop_AXSBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/axsbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AXSBUSD) 
	ws.run_forever() 


Thread(target=loop_AXSBUSD).start() 
symbol_g_HARDBUSD = 'HARDBUSD' 
price_bids_g_HARDBUSD = Decimal('0.0') 
qty_bids_g_HARDBUSD = Decimal('0.0') 
price_asks_g_HARDBUSD = Decimal('0.0') 
qty_asks_g_HARDBUSD = Decimal('0.0') 
stepSize_g_HARDBUSD = Decimal('1.0') 


def on_message_HARDBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HARDBUSD = 'HARDBUSD' 
	price_bids_c_l_HARDBUSD = data['b'] 
	qty_bids_c_l_HARDBUSD = data['B'] 
	price_asks_c_l_HARDBUSD = data['a'] 
	qty_asks_c_l_HARDBUSD = data['A'] 

	global symbol_g_HARDBUSD 
	global price_bids_g_HARDBUSD 
	global qty_bids_g_HARDBUSD 
	global price_asks_g_HARDBUSD 
	global qty_asks_g_HARDBUSD 

	symbol_g_HARDBUSD = symbol_c_l_HARDBUSD 
	price_bids_g_HARDBUSD = Decimal(price_bids_c_l_HARDBUSD) 
	qty_bids_g_HARDBUSD = Decimal(qty_bids_c_l_HARDBUSD) 
	price_asks_g_HARDBUSD = Decimal(price_asks_c_l_HARDBUSD) 
	qty_asks_g_HARDBUSD = Decimal(qty_asks_c_l_HARDBUSD) 


def loop_HARDBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hardbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HARDBUSD) 
	ws.run_forever() 


Thread(target=loop_HARDBUSD).start() 
symbol_g_CVPBUSD = 'CVPBUSD' 
price_bids_g_CVPBUSD = Decimal('0.0') 
qty_bids_g_CVPBUSD = Decimal('0.0') 
price_asks_g_CVPBUSD = Decimal('0.0') 
qty_asks_g_CVPBUSD = Decimal('0.0') 
stepSize_g_CVPBUSD = Decimal('0.1') 


def on_message_CVPBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CVPBUSD = 'CVPBUSD' 
	price_bids_c_l_CVPBUSD = data['b'] 
	qty_bids_c_l_CVPBUSD = data['B'] 
	price_asks_c_l_CVPBUSD = data['a'] 
	qty_asks_c_l_CVPBUSD = data['A'] 

	global symbol_g_CVPBUSD 
	global price_bids_g_CVPBUSD 
	global qty_bids_g_CVPBUSD 
	global price_asks_g_CVPBUSD 
	global qty_asks_g_CVPBUSD 

	symbol_g_CVPBUSD = symbol_c_l_CVPBUSD 
	price_bids_g_CVPBUSD = Decimal(price_bids_c_l_CVPBUSD) 
	qty_bids_g_CVPBUSD = Decimal(qty_bids_c_l_CVPBUSD) 
	price_asks_g_CVPBUSD = Decimal(price_asks_c_l_CVPBUSD) 
	qty_asks_g_CVPBUSD = Decimal(qty_asks_c_l_CVPBUSD) 


def loop_CVPBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cvpbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CVPBUSD) 
	ws.run_forever() 


Thread(target=loop_CVPBUSD).start() 
symbol_g_STRAXBUSD = 'STRAXBUSD' 
price_bids_g_STRAXBUSD = Decimal('0.0') 
qty_bids_g_STRAXBUSD = Decimal('0.0') 
price_asks_g_STRAXBUSD = Decimal('0.0') 
qty_asks_g_STRAXBUSD = Decimal('0.0') 
stepSize_g_STRAXBUSD = Decimal('0.1') 


def on_message_STRAXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STRAXBUSD = 'STRAXBUSD' 
	price_bids_c_l_STRAXBUSD = data['b'] 
	qty_bids_c_l_STRAXBUSD = data['B'] 
	price_asks_c_l_STRAXBUSD = data['a'] 
	qty_asks_c_l_STRAXBUSD = data['A'] 

	global symbol_g_STRAXBUSD 
	global price_bids_g_STRAXBUSD 
	global qty_bids_g_STRAXBUSD 
	global price_asks_g_STRAXBUSD 
	global qty_asks_g_STRAXBUSD 

	symbol_g_STRAXBUSD = symbol_c_l_STRAXBUSD 
	price_bids_g_STRAXBUSD = Decimal(price_bids_c_l_STRAXBUSD) 
	qty_bids_g_STRAXBUSD = Decimal(qty_bids_c_l_STRAXBUSD) 
	price_asks_g_STRAXBUSD = Decimal(price_asks_c_l_STRAXBUSD) 
	qty_asks_g_STRAXBUSD = Decimal(qty_asks_c_l_STRAXBUSD) 


def loop_STRAXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/straxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STRAXBUSD) 
	ws.run_forever() 


Thread(target=loop_STRAXBUSD).start() 
symbol_g_FORBUSD = 'FORBUSD' 
price_bids_g_FORBUSD = Decimal('0.0') 
qty_bids_g_FORBUSD = Decimal('0.0') 
price_asks_g_FORBUSD = Decimal('0.0') 
qty_asks_g_FORBUSD = Decimal('0.0') 
stepSize_g_FORBUSD = Decimal('0.1') 


def on_message_FORBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FORBUSD = 'FORBUSD' 
	price_bids_c_l_FORBUSD = data['b'] 
	qty_bids_c_l_FORBUSD = data['B'] 
	price_asks_c_l_FORBUSD = data['a'] 
	qty_asks_c_l_FORBUSD = data['A'] 

	global symbol_g_FORBUSD 
	global price_bids_g_FORBUSD 
	global qty_bids_g_FORBUSD 
	global price_asks_g_FORBUSD 
	global qty_asks_g_FORBUSD 

	symbol_g_FORBUSD = symbol_c_l_FORBUSD 
	price_bids_g_FORBUSD = Decimal(price_bids_c_l_FORBUSD) 
	qty_bids_g_FORBUSD = Decimal(qty_bids_c_l_FORBUSD) 
	price_asks_g_FORBUSD = Decimal(price_asks_c_l_FORBUSD) 
	qty_asks_g_FORBUSD = Decimal(qty_asks_c_l_FORBUSD) 


def loop_FORBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/forbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FORBUSD) 
	ws.run_forever() 


Thread(target=loop_FORBUSD).start() 
symbol_g_UNFIBUSD = 'UNFIBUSD' 
price_bids_g_UNFIBUSD = Decimal('0.0') 
qty_bids_g_UNFIBUSD = Decimal('0.0') 
price_asks_g_UNFIBUSD = Decimal('0.0') 
qty_asks_g_UNFIBUSD = Decimal('0.0') 
stepSize_g_UNFIBUSD = Decimal('0.1') 


def on_message_UNFIBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UNFIBUSD = 'UNFIBUSD' 
	price_bids_c_l_UNFIBUSD = data['b'] 
	qty_bids_c_l_UNFIBUSD = data['B'] 
	price_asks_c_l_UNFIBUSD = data['a'] 
	qty_asks_c_l_UNFIBUSD = data['A'] 

	global symbol_g_UNFIBUSD 
	global price_bids_g_UNFIBUSD 
	global qty_bids_g_UNFIBUSD 
	global price_asks_g_UNFIBUSD 
	global qty_asks_g_UNFIBUSD 

	symbol_g_UNFIBUSD = symbol_c_l_UNFIBUSD 
	price_bids_g_UNFIBUSD = Decimal(price_bids_c_l_UNFIBUSD) 
	qty_bids_g_UNFIBUSD = Decimal(qty_bids_c_l_UNFIBUSD) 
	price_asks_g_UNFIBUSD = Decimal(price_asks_c_l_UNFIBUSD) 
	qty_asks_g_UNFIBUSD = Decimal(qty_asks_c_l_UNFIBUSD) 


def loop_UNFIBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/unfibusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UNFIBUSD) 
	ws.run_forever() 


Thread(target=loop_UNFIBUSD).start() 
symbol_g_FRONTBUSD = 'FRONTBUSD' 
price_bids_g_FRONTBUSD = Decimal('0.0') 
qty_bids_g_FRONTBUSD = Decimal('0.0') 
price_asks_g_FRONTBUSD = Decimal('0.0') 
qty_asks_g_FRONTBUSD = Decimal('0.0') 
stepSize_g_FRONTBUSD = Decimal('1.0') 


def on_message_FRONTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FRONTBUSD = 'FRONTBUSD' 
	price_bids_c_l_FRONTBUSD = data['b'] 
	qty_bids_c_l_FRONTBUSD = data['B'] 
	price_asks_c_l_FRONTBUSD = data['a'] 
	qty_asks_c_l_FRONTBUSD = data['A'] 

	global symbol_g_FRONTBUSD 
	global price_bids_g_FRONTBUSD 
	global qty_bids_g_FRONTBUSD 
	global price_asks_g_FRONTBUSD 
	global qty_asks_g_FRONTBUSD 

	symbol_g_FRONTBUSD = symbol_c_l_FRONTBUSD 
	price_bids_g_FRONTBUSD = Decimal(price_bids_c_l_FRONTBUSD) 
	qty_bids_g_FRONTBUSD = Decimal(qty_bids_c_l_FRONTBUSD) 
	price_asks_g_FRONTBUSD = Decimal(price_asks_c_l_FRONTBUSD) 
	qty_asks_g_FRONTBUSD = Decimal(qty_asks_c_l_FRONTBUSD) 


def loop_FRONTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/frontbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FRONTBUSD) 
	ws.run_forever() 


Thread(target=loop_FRONTBUSD).start() 
symbol_g_ROSEBUSD = 'ROSEBUSD' 
price_bids_g_ROSEBUSD = Decimal('0.0') 
qty_bids_g_ROSEBUSD = Decimal('0.0') 
price_asks_g_ROSEBUSD = Decimal('0.0') 
qty_asks_g_ROSEBUSD = Decimal('0.0') 
stepSize_g_ROSEBUSD = Decimal('0.1') 


def on_message_ROSEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ROSEBUSD = 'ROSEBUSD' 
	price_bids_c_l_ROSEBUSD = data['b'] 
	qty_bids_c_l_ROSEBUSD = data['B'] 
	price_asks_c_l_ROSEBUSD = data['a'] 
	qty_asks_c_l_ROSEBUSD = data['A'] 

	global symbol_g_ROSEBUSD 
	global price_bids_g_ROSEBUSD 
	global qty_bids_g_ROSEBUSD 
	global price_asks_g_ROSEBUSD 
	global qty_asks_g_ROSEBUSD 

	symbol_g_ROSEBUSD = symbol_c_l_ROSEBUSD 
	price_bids_g_ROSEBUSD = Decimal(price_bids_c_l_ROSEBUSD) 
	qty_bids_g_ROSEBUSD = Decimal(qty_bids_c_l_ROSEBUSD) 
	price_asks_g_ROSEBUSD = Decimal(price_asks_c_l_ROSEBUSD) 
	qty_asks_g_ROSEBUSD = Decimal(qty_asks_c_l_ROSEBUSD) 


def loop_ROSEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rosebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ROSEBUSD) 
	ws.run_forever() 


Thread(target=loop_ROSEBUSD).start() 
symbol_g_SYSBUSD = 'SYSBUSD' 
price_bids_g_SYSBUSD = Decimal('0.0') 
qty_bids_g_SYSBUSD = Decimal('0.0') 
price_asks_g_SYSBUSD = Decimal('0.0') 
qty_asks_g_SYSBUSD = Decimal('0.0') 
stepSize_g_SYSBUSD = Decimal('1.0') 


def on_message_SYSBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SYSBUSD = 'SYSBUSD' 
	price_bids_c_l_SYSBUSD = data['b'] 
	qty_bids_c_l_SYSBUSD = data['B'] 
	price_asks_c_l_SYSBUSD = data['a'] 
	qty_asks_c_l_SYSBUSD = data['A'] 

	global symbol_g_SYSBUSD 
	global price_bids_g_SYSBUSD 
	global qty_bids_g_SYSBUSD 
	global price_asks_g_SYSBUSD 
	global qty_asks_g_SYSBUSD 

	symbol_g_SYSBUSD = symbol_c_l_SYSBUSD 
	price_bids_g_SYSBUSD = Decimal(price_bids_c_l_SYSBUSD) 
	qty_bids_g_SYSBUSD = Decimal(qty_bids_c_l_SYSBUSD) 
	price_asks_g_SYSBUSD = Decimal(price_asks_c_l_SYSBUSD) 
	qty_asks_g_SYSBUSD = Decimal(qty_asks_c_l_SYSBUSD) 


def loop_SYSBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sysbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SYSBUSD) 
	ws.run_forever() 


Thread(target=loop_SYSBUSD).start() 
symbol_g_SKLBUSD = 'SKLBUSD' 
price_bids_g_SKLBUSD = Decimal('0.0') 
qty_bids_g_SKLBUSD = Decimal('0.0') 
price_asks_g_SKLBUSD = Decimal('0.0') 
qty_asks_g_SKLBUSD = Decimal('0.0') 
stepSize_g_SKLBUSD = Decimal('1.0') 


def on_message_SKLBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SKLBUSD = 'SKLBUSD' 
	price_bids_c_l_SKLBUSD = data['b'] 
	qty_bids_c_l_SKLBUSD = data['B'] 
	price_asks_c_l_SKLBUSD = data['a'] 
	qty_asks_c_l_SKLBUSD = data['A'] 

	global symbol_g_SKLBUSD 
	global price_bids_g_SKLBUSD 
	global qty_bids_g_SKLBUSD 
	global price_asks_g_SKLBUSD 
	global qty_asks_g_SKLBUSD 

	symbol_g_SKLBUSD = symbol_c_l_SKLBUSD 
	price_bids_g_SKLBUSD = Decimal(price_bids_c_l_SKLBUSD) 
	qty_bids_g_SKLBUSD = Decimal(qty_bids_c_l_SKLBUSD) 
	price_asks_g_SKLBUSD = Decimal(price_asks_c_l_SKLBUSD) 
	qty_asks_g_SKLBUSD = Decimal(qty_asks_c_l_SKLBUSD) 


def loop_SKLBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sklbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SKLBUSD) 
	ws.run_forever() 


Thread(target=loop_SKLBUSD).start() 
symbol_g_GHSTBUSD = 'GHSTBUSD' 
price_bids_g_GHSTBUSD = Decimal('0.0') 
qty_bids_g_GHSTBUSD = Decimal('0.0') 
price_asks_g_GHSTBUSD = Decimal('0.0') 
qty_asks_g_GHSTBUSD = Decimal('0.0') 
stepSize_g_GHSTBUSD = Decimal('0.1') 


def on_message_GHSTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GHSTBUSD = 'GHSTBUSD' 
	price_bids_c_l_GHSTBUSD = data['b'] 
	qty_bids_c_l_GHSTBUSD = data['B'] 
	price_asks_c_l_GHSTBUSD = data['a'] 
	qty_asks_c_l_GHSTBUSD = data['A'] 

	global symbol_g_GHSTBUSD 
	global price_bids_g_GHSTBUSD 
	global qty_bids_g_GHSTBUSD 
	global price_asks_g_GHSTBUSD 
	global qty_asks_g_GHSTBUSD 

	symbol_g_GHSTBUSD = symbol_c_l_GHSTBUSD 
	price_bids_g_GHSTBUSD = Decimal(price_bids_c_l_GHSTBUSD) 
	qty_bids_g_GHSTBUSD = Decimal(qty_bids_c_l_GHSTBUSD) 
	price_asks_g_GHSTBUSD = Decimal(price_asks_c_l_GHSTBUSD) 
	qty_asks_g_GHSTBUSD = Decimal(qty_asks_c_l_GHSTBUSD) 


def loop_GHSTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ghstbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GHSTBUSD) 
	ws.run_forever() 


Thread(target=loop_GHSTBUSD).start() 
symbol_g_DFBUSD = 'DFBUSD' 
price_bids_g_DFBUSD = Decimal('0.0') 
qty_bids_g_DFBUSD = Decimal('0.0') 
price_asks_g_DFBUSD = Decimal('0.0') 
qty_asks_g_DFBUSD = Decimal('0.0') 
stepSize_g_DFBUSD = Decimal('1.0') 


def on_message_DFBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DFBUSD = 'DFBUSD' 
	price_bids_c_l_DFBUSD = data['b'] 
	qty_bids_c_l_DFBUSD = data['B'] 
	price_asks_c_l_DFBUSD = data['a'] 
	qty_asks_c_l_DFBUSD = data['A'] 

	global symbol_g_DFBUSD 
	global price_bids_g_DFBUSD 
	global qty_bids_g_DFBUSD 
	global price_asks_g_DFBUSD 
	global qty_asks_g_DFBUSD 

	symbol_g_DFBUSD = symbol_c_l_DFBUSD 
	price_bids_g_DFBUSD = Decimal(price_bids_c_l_DFBUSD) 
	qty_bids_g_DFBUSD = Decimal(qty_bids_c_l_DFBUSD) 
	price_asks_g_DFBUSD = Decimal(price_asks_c_l_DFBUSD) 
	qty_asks_g_DFBUSD = Decimal(qty_asks_c_l_DFBUSD) 


def loop_DFBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dfbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DFBUSD) 
	ws.run_forever() 


Thread(target=loop_DFBUSD).start() 
symbol_g_JUVBUSD = 'JUVBUSD' 
price_bids_g_JUVBUSD = Decimal('0.0') 
qty_bids_g_JUVBUSD = Decimal('0.0') 
price_asks_g_JUVBUSD = Decimal('0.0') 
qty_asks_g_JUVBUSD = Decimal('0.0') 
stepSize_g_JUVBUSD = Decimal('0.01') 


def on_message_JUVBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JUVBUSD = 'JUVBUSD' 
	price_bids_c_l_JUVBUSD = data['b'] 
	qty_bids_c_l_JUVBUSD = data['B'] 
	price_asks_c_l_JUVBUSD = data['a'] 
	qty_asks_c_l_JUVBUSD = data['A'] 

	global symbol_g_JUVBUSD 
	global price_bids_g_JUVBUSD 
	global qty_bids_g_JUVBUSD 
	global price_asks_g_JUVBUSD 
	global qty_asks_g_JUVBUSD 

	symbol_g_JUVBUSD = symbol_c_l_JUVBUSD 
	price_bids_g_JUVBUSD = Decimal(price_bids_c_l_JUVBUSD) 
	qty_bids_g_JUVBUSD = Decimal(qty_bids_c_l_JUVBUSD) 
	price_asks_g_JUVBUSD = Decimal(price_asks_c_l_JUVBUSD) 
	qty_asks_g_JUVBUSD = Decimal(qty_asks_c_l_JUVBUSD) 


def loop_JUVBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/juvbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JUVBUSD) 
	ws.run_forever() 


Thread(target=loop_JUVBUSD).start() 
symbol_g_PSGBUSD = 'PSGBUSD' 
price_bids_g_PSGBUSD = Decimal('0.0') 
qty_bids_g_PSGBUSD = Decimal('0.0') 
price_asks_g_PSGBUSD = Decimal('0.0') 
qty_asks_g_PSGBUSD = Decimal('0.0') 
stepSize_g_PSGBUSD = Decimal('0.01') 


def on_message_PSGBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PSGBUSD = 'PSGBUSD' 
	price_bids_c_l_PSGBUSD = data['b'] 
	qty_bids_c_l_PSGBUSD = data['B'] 
	price_asks_c_l_PSGBUSD = data['a'] 
	qty_asks_c_l_PSGBUSD = data['A'] 

	global symbol_g_PSGBUSD 
	global price_bids_g_PSGBUSD 
	global qty_bids_g_PSGBUSD 
	global price_asks_g_PSGBUSD 
	global qty_asks_g_PSGBUSD 

	symbol_g_PSGBUSD = symbol_c_l_PSGBUSD 
	price_bids_g_PSGBUSD = Decimal(price_bids_c_l_PSGBUSD) 
	qty_bids_g_PSGBUSD = Decimal(qty_bids_c_l_PSGBUSD) 
	price_asks_g_PSGBUSD = Decimal(price_asks_c_l_PSGBUSD) 
	qty_asks_g_PSGBUSD = Decimal(qty_asks_c_l_PSGBUSD) 


def loop_PSGBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/psgbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PSGBUSD) 
	ws.run_forever() 


Thread(target=loop_PSGBUSD).start() 
symbol_g_DEXEBUSD = 'DEXEBUSD' 
price_bids_g_DEXEBUSD = Decimal('0.0') 
qty_bids_g_DEXEBUSD = Decimal('0.0') 
price_asks_g_DEXEBUSD = Decimal('0.0') 
qty_asks_g_DEXEBUSD = Decimal('0.0') 
stepSize_g_DEXEBUSD = Decimal('0.01') 


def on_message_DEXEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DEXEBUSD = 'DEXEBUSD' 
	price_bids_c_l_DEXEBUSD = data['b'] 
	qty_bids_c_l_DEXEBUSD = data['B'] 
	price_asks_c_l_DEXEBUSD = data['a'] 
	qty_asks_c_l_DEXEBUSD = data['A'] 

	global symbol_g_DEXEBUSD 
	global price_bids_g_DEXEBUSD 
	global qty_bids_g_DEXEBUSD 
	global price_asks_g_DEXEBUSD 
	global qty_asks_g_DEXEBUSD 

	symbol_g_DEXEBUSD = symbol_c_l_DEXEBUSD 
	price_bids_g_DEXEBUSD = Decimal(price_bids_c_l_DEXEBUSD) 
	qty_bids_g_DEXEBUSD = Decimal(qty_bids_c_l_DEXEBUSD) 
	price_asks_g_DEXEBUSD = Decimal(price_asks_c_l_DEXEBUSD) 
	qty_asks_g_DEXEBUSD = Decimal(qty_asks_c_l_DEXEBUSD) 


def loop_DEXEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dexebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DEXEBUSD) 
	ws.run_forever() 


Thread(target=loop_DEXEBUSD).start() 
symbol_g_CKBBUSD = 'CKBBUSD' 
price_bids_g_CKBBUSD = Decimal('0.0') 
qty_bids_g_CKBBUSD = Decimal('0.0') 
price_asks_g_CKBBUSD = Decimal('0.0') 
qty_asks_g_CKBBUSD = Decimal('0.0') 
stepSize_g_CKBBUSD = Decimal('1.0') 


def on_message_CKBBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CKBBUSD = 'CKBBUSD' 
	price_bids_c_l_CKBBUSD = data['b'] 
	qty_bids_c_l_CKBBUSD = data['B'] 
	price_asks_c_l_CKBBUSD = data['a'] 
	qty_asks_c_l_CKBBUSD = data['A'] 

	global symbol_g_CKBBUSD 
	global price_bids_g_CKBBUSD 
	global qty_bids_g_CKBBUSD 
	global price_asks_g_CKBBUSD 
	global qty_asks_g_CKBBUSD 

	symbol_g_CKBBUSD = symbol_c_l_CKBBUSD 
	price_bids_g_CKBBUSD = Decimal(price_bids_c_l_CKBBUSD) 
	qty_bids_g_CKBBUSD = Decimal(qty_bids_c_l_CKBBUSD) 
	price_asks_g_CKBBUSD = Decimal(price_asks_c_l_CKBBUSD) 
	qty_asks_g_CKBBUSD = Decimal(qty_asks_c_l_CKBBUSD) 


def loop_CKBBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ckbbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CKBBUSD) 
	ws.run_forever() 


Thread(target=loop_CKBBUSD).start() 
symbol_g_TWTBUSD = 'TWTBUSD' 
price_bids_g_TWTBUSD = Decimal('0.0') 
qty_bids_g_TWTBUSD = Decimal('0.0') 
price_asks_g_TWTBUSD = Decimal('0.0') 
qty_asks_g_TWTBUSD = Decimal('0.0') 
stepSize_g_TWTBUSD = Decimal('1.0') 


def on_message_TWTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TWTBUSD = 'TWTBUSD' 
	price_bids_c_l_TWTBUSD = data['b'] 
	qty_bids_c_l_TWTBUSD = data['B'] 
	price_asks_c_l_TWTBUSD = data['a'] 
	qty_asks_c_l_TWTBUSD = data['A'] 

	global symbol_g_TWTBUSD 
	global price_bids_g_TWTBUSD 
	global qty_bids_g_TWTBUSD 
	global price_asks_g_TWTBUSD 
	global qty_asks_g_TWTBUSD 

	symbol_g_TWTBUSD = symbol_c_l_TWTBUSD 
	price_bids_g_TWTBUSD = Decimal(price_bids_c_l_TWTBUSD) 
	qty_bids_g_TWTBUSD = Decimal(qty_bids_c_l_TWTBUSD) 
	price_asks_g_TWTBUSD = Decimal(price_asks_c_l_TWTBUSD) 
	qty_asks_g_TWTBUSD = Decimal(qty_asks_c_l_TWTBUSD) 


def loop_TWTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/twtbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TWTBUSD) 
	ws.run_forever() 


Thread(target=loop_TWTBUSD).start() 
symbol_g_LITBUSD = 'LITBUSD' 
price_bids_g_LITBUSD = Decimal('0.0') 
qty_bids_g_LITBUSD = Decimal('0.0') 
price_asks_g_LITBUSD = Decimal('0.0') 
qty_asks_g_LITBUSD = Decimal('0.0') 
stepSize_g_LITBUSD = Decimal('0.1') 


def on_message_LITBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LITBUSD = 'LITBUSD' 
	price_bids_c_l_LITBUSD = data['b'] 
	qty_bids_c_l_LITBUSD = data['B'] 
	price_asks_c_l_LITBUSD = data['a'] 
	qty_asks_c_l_LITBUSD = data['A'] 

	global symbol_g_LITBUSD 
	global price_bids_g_LITBUSD 
	global qty_bids_g_LITBUSD 
	global price_asks_g_LITBUSD 
	global qty_asks_g_LITBUSD 

	symbol_g_LITBUSD = symbol_c_l_LITBUSD 
	price_bids_g_LITBUSD = Decimal(price_bids_c_l_LITBUSD) 
	qty_bids_g_LITBUSD = Decimal(qty_bids_c_l_LITBUSD) 
	price_asks_g_LITBUSD = Decimal(price_asks_c_l_LITBUSD) 
	qty_asks_g_LITBUSD = Decimal(qty_asks_c_l_LITBUSD) 


def loop_LITBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/litbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LITBUSD) 
	ws.run_forever() 


Thread(target=loop_LITBUSD).start() 
symbol_g_SFPBUSD = 'SFPBUSD' 
price_bids_g_SFPBUSD = Decimal('0.0') 
qty_bids_g_SFPBUSD = Decimal('0.0') 
price_asks_g_SFPBUSD = Decimal('0.0') 
qty_asks_g_SFPBUSD = Decimal('0.0') 
stepSize_g_SFPBUSD = Decimal('1.0') 


def on_message_SFPBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SFPBUSD = 'SFPBUSD' 
	price_bids_c_l_SFPBUSD = data['b'] 
	qty_bids_c_l_SFPBUSD = data['B'] 
	price_asks_c_l_SFPBUSD = data['a'] 
	qty_asks_c_l_SFPBUSD = data['A'] 

	global symbol_g_SFPBUSD 
	global price_bids_g_SFPBUSD 
	global qty_bids_g_SFPBUSD 
	global price_asks_g_SFPBUSD 
	global qty_asks_g_SFPBUSD 

	symbol_g_SFPBUSD = symbol_c_l_SFPBUSD 
	price_bids_g_SFPBUSD = Decimal(price_bids_c_l_SFPBUSD) 
	qty_bids_g_SFPBUSD = Decimal(qty_bids_c_l_SFPBUSD) 
	price_asks_g_SFPBUSD = Decimal(price_asks_c_l_SFPBUSD) 
	qty_asks_g_SFPBUSD = Decimal(qty_asks_c_l_SFPBUSD) 


def loop_SFPBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sfpbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SFPBUSD) 
	ws.run_forever() 


Thread(target=loop_SFPBUSD).start() 
symbol_g_FXSBUSD = 'FXSBUSD' 
price_bids_g_FXSBUSD = Decimal('0.0') 
qty_bids_g_FXSBUSD = Decimal('0.0') 
price_asks_g_FXSBUSD = Decimal('0.0') 
qty_asks_g_FXSBUSD = Decimal('0.0') 
stepSize_g_FXSBUSD = Decimal('0.1') 


def on_message_FXSBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FXSBUSD = 'FXSBUSD' 
	price_bids_c_l_FXSBUSD = data['b'] 
	qty_bids_c_l_FXSBUSD = data['B'] 
	price_asks_c_l_FXSBUSD = data['a'] 
	qty_asks_c_l_FXSBUSD = data['A'] 

	global symbol_g_FXSBUSD 
	global price_bids_g_FXSBUSD 
	global qty_bids_g_FXSBUSD 
	global price_asks_g_FXSBUSD 
	global qty_asks_g_FXSBUSD 

	symbol_g_FXSBUSD = symbol_c_l_FXSBUSD 
	price_bids_g_FXSBUSD = Decimal(price_bids_c_l_FXSBUSD) 
	qty_bids_g_FXSBUSD = Decimal(qty_bids_c_l_FXSBUSD) 
	price_asks_g_FXSBUSD = Decimal(price_asks_c_l_FXSBUSD) 
	qty_asks_g_FXSBUSD = Decimal(qty_asks_c_l_FXSBUSD) 


def loop_FXSBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fxsbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FXSBUSD) 
	ws.run_forever() 


Thread(target=loop_FXSBUSD).start() 
symbol_g_DODOBUSD = 'DODOBUSD' 
price_bids_g_DODOBUSD = Decimal('0.0') 
qty_bids_g_DODOBUSD = Decimal('0.0') 
price_asks_g_DODOBUSD = Decimal('0.0') 
qty_asks_g_DODOBUSD = Decimal('0.0') 
stepSize_g_DODOBUSD = Decimal('0.1') 


def on_message_DODOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DODOBUSD = 'DODOBUSD' 
	price_bids_c_l_DODOBUSD = data['b'] 
	qty_bids_c_l_DODOBUSD = data['B'] 
	price_asks_c_l_DODOBUSD = data['a'] 
	qty_asks_c_l_DODOBUSD = data['A'] 

	global symbol_g_DODOBUSD 
	global price_bids_g_DODOBUSD 
	global qty_bids_g_DODOBUSD 
	global price_asks_g_DODOBUSD 
	global qty_asks_g_DODOBUSD 

	symbol_g_DODOBUSD = symbol_c_l_DODOBUSD 
	price_bids_g_DODOBUSD = Decimal(price_bids_c_l_DODOBUSD) 
	qty_bids_g_DODOBUSD = Decimal(qty_bids_c_l_DODOBUSD) 
	price_asks_g_DODOBUSD = Decimal(price_asks_c_l_DODOBUSD) 
	qty_asks_g_DODOBUSD = Decimal(qty_asks_c_l_DODOBUSD) 


def loop_DODOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dodobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DODOBUSD) 
	ws.run_forever() 


Thread(target=loop_DODOBUSD).start() 
symbol_g_BAKEBUSD = 'BAKEBUSD' 
price_bids_g_BAKEBUSD = Decimal('0.0') 
qty_bids_g_BAKEBUSD = Decimal('0.0') 
price_asks_g_BAKEBUSD = Decimal('0.0') 
qty_asks_g_BAKEBUSD = Decimal('0.0') 
stepSize_g_BAKEBUSD = Decimal('0.1') 


def on_message_BAKEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BAKEBUSD = 'BAKEBUSD' 
	price_bids_c_l_BAKEBUSD = data['b'] 
	qty_bids_c_l_BAKEBUSD = data['B'] 
	price_asks_c_l_BAKEBUSD = data['a'] 
	qty_asks_c_l_BAKEBUSD = data['A'] 

	global symbol_g_BAKEBUSD 
	global price_bids_g_BAKEBUSD 
	global qty_bids_g_BAKEBUSD 
	global price_asks_g_BAKEBUSD 
	global qty_asks_g_BAKEBUSD 

	symbol_g_BAKEBUSD = symbol_c_l_BAKEBUSD 
	price_bids_g_BAKEBUSD = Decimal(price_bids_c_l_BAKEBUSD) 
	qty_bids_g_BAKEBUSD = Decimal(qty_bids_c_l_BAKEBUSD) 
	price_asks_g_BAKEBUSD = Decimal(price_asks_c_l_BAKEBUSD) 
	qty_asks_g_BAKEBUSD = Decimal(qty_asks_c_l_BAKEBUSD) 


def loop_BAKEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bakebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BAKEBUSD) 
	ws.run_forever() 


Thread(target=loop_BAKEBUSD).start() 
symbol_g_1INCHBUSD = '1INCHBUSD' 
price_bids_g_1INCHBUSD = Decimal('0.0') 
qty_bids_g_1INCHBUSD = Decimal('0.0') 
price_asks_g_1INCHBUSD = Decimal('0.0') 
qty_asks_g_1INCHBUSD = Decimal('0.0') 
stepSize_g_1INCHBUSD = Decimal('0.1') 


def on_message_1INCHBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_1INCHBUSD = '1INCHBUSD' 
	price_bids_c_l_1INCHBUSD = data['b'] 
	qty_bids_c_l_1INCHBUSD = data['B'] 
	price_asks_c_l_1INCHBUSD = data['a'] 
	qty_asks_c_l_1INCHBUSD = data['A'] 

	global symbol_g_1INCHBUSD 
	global price_bids_g_1INCHBUSD 
	global qty_bids_g_1INCHBUSD 
	global price_asks_g_1INCHBUSD 
	global qty_asks_g_1INCHBUSD 

	symbol_g_1INCHBUSD = symbol_c_l_1INCHBUSD 
	price_bids_g_1INCHBUSD = Decimal(price_bids_c_l_1INCHBUSD) 
	qty_bids_g_1INCHBUSD = Decimal(qty_bids_c_l_1INCHBUSD) 
	price_asks_g_1INCHBUSD = Decimal(price_asks_c_l_1INCHBUSD) 
	qty_asks_g_1INCHBUSD = Decimal(qty_asks_c_l_1INCHBUSD) 


def loop_1INCHBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/1inchbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_1INCHBUSD) 
	ws.run_forever() 


Thread(target=loop_1INCHBUSD).start() 
symbol_g_GRTBUSD = 'GRTBUSD' 
price_bids_g_GRTBUSD = Decimal('0.0') 
qty_bids_g_GRTBUSD = Decimal('0.0') 
price_asks_g_GRTBUSD = Decimal('0.0') 
qty_asks_g_GRTBUSD = Decimal('0.0') 
stepSize_g_GRTBUSD = Decimal('1.0') 


def on_message_GRTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GRTBUSD = 'GRTBUSD' 
	price_bids_c_l_GRTBUSD = data['b'] 
	qty_bids_c_l_GRTBUSD = data['B'] 
	price_asks_c_l_GRTBUSD = data['a'] 
	qty_asks_c_l_GRTBUSD = data['A'] 

	global symbol_g_GRTBUSD 
	global price_bids_g_GRTBUSD 
	global qty_bids_g_GRTBUSD 
	global price_asks_g_GRTBUSD 
	global qty_asks_g_GRTBUSD 

	symbol_g_GRTBUSD = symbol_c_l_GRTBUSD 
	price_bids_g_GRTBUSD = Decimal(price_bids_c_l_GRTBUSD) 
	qty_bids_g_GRTBUSD = Decimal(qty_bids_c_l_GRTBUSD) 
	price_asks_g_GRTBUSD = Decimal(price_asks_c_l_GRTBUSD) 
	qty_asks_g_GRTBUSD = Decimal(qty_asks_c_l_GRTBUSD) 


def loop_GRTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/grtbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GRTBUSD) 
	ws.run_forever() 


Thread(target=loop_GRTBUSD).start() 
symbol_g_REEFBUSD = 'REEFBUSD' 
price_bids_g_REEFBUSD = Decimal('0.0') 
qty_bids_g_REEFBUSD = Decimal('0.0') 
price_asks_g_REEFBUSD = Decimal('0.0') 
qty_asks_g_REEFBUSD = Decimal('0.0') 
stepSize_g_REEFBUSD = Decimal('0.1') 


def on_message_REEFBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_REEFBUSD = 'REEFBUSD' 
	price_bids_c_l_REEFBUSD = data['b'] 
	qty_bids_c_l_REEFBUSD = data['B'] 
	price_asks_c_l_REEFBUSD = data['a'] 
	qty_asks_c_l_REEFBUSD = data['A'] 

	global symbol_g_REEFBUSD 
	global price_bids_g_REEFBUSD 
	global qty_bids_g_REEFBUSD 
	global price_asks_g_REEFBUSD 
	global qty_asks_g_REEFBUSD 

	symbol_g_REEFBUSD = symbol_c_l_REEFBUSD 
	price_bids_g_REEFBUSD = Decimal(price_bids_c_l_REEFBUSD) 
	qty_bids_g_REEFBUSD = Decimal(qty_bids_c_l_REEFBUSD) 
	price_asks_g_REEFBUSD = Decimal(price_asks_c_l_REEFBUSD) 
	qty_asks_g_REEFBUSD = Decimal(qty_asks_c_l_REEFBUSD) 


def loop_REEFBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/reefbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_REEFBUSD) 
	ws.run_forever() 


Thread(target=loop_REEFBUSD).start() 
symbol_g_ACMBUSD = 'ACMBUSD' 
price_bids_g_ACMBUSD = Decimal('0.0') 
qty_bids_g_ACMBUSD = Decimal('0.0') 
price_asks_g_ACMBUSD = Decimal('0.0') 
qty_asks_g_ACMBUSD = Decimal('0.0') 
stepSize_g_ACMBUSD = Decimal('0.1') 


def on_message_ACMBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ACMBUSD = 'ACMBUSD' 
	price_bids_c_l_ACMBUSD = data['b'] 
	qty_bids_c_l_ACMBUSD = data['B'] 
	price_asks_c_l_ACMBUSD = data['a'] 
	qty_asks_c_l_ACMBUSD = data['A'] 

	global symbol_g_ACMBUSD 
	global price_bids_g_ACMBUSD 
	global qty_bids_g_ACMBUSD 
	global price_asks_g_ACMBUSD 
	global qty_asks_g_ACMBUSD 

	symbol_g_ACMBUSD = symbol_c_l_ACMBUSD 
	price_bids_g_ACMBUSD = Decimal(price_bids_c_l_ACMBUSD) 
	qty_bids_g_ACMBUSD = Decimal(qty_bids_c_l_ACMBUSD) 
	price_asks_g_ACMBUSD = Decimal(price_asks_c_l_ACMBUSD) 
	qty_asks_g_ACMBUSD = Decimal(qty_asks_c_l_ACMBUSD) 


def loop_ACMBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/acmbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ACMBUSD) 
	ws.run_forever() 


Thread(target=loop_ACMBUSD).start() 
symbol_g_AUCTIONBUSD = 'AUCTIONBUSD' 
price_bids_g_AUCTIONBUSD = Decimal('0.0') 
qty_bids_g_AUCTIONBUSD = Decimal('0.0') 
price_asks_g_AUCTIONBUSD = Decimal('0.0') 
qty_asks_g_AUCTIONBUSD = Decimal('0.0') 
stepSize_g_AUCTIONBUSD = Decimal('0.01') 


def on_message_AUCTIONBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AUCTIONBUSD = 'AUCTIONBUSD' 
	price_bids_c_l_AUCTIONBUSD = data['b'] 
	qty_bids_c_l_AUCTIONBUSD = data['B'] 
	price_asks_c_l_AUCTIONBUSD = data['a'] 
	qty_asks_c_l_AUCTIONBUSD = data['A'] 

	global symbol_g_AUCTIONBUSD 
	global price_bids_g_AUCTIONBUSD 
	global qty_bids_g_AUCTIONBUSD 
	global price_asks_g_AUCTIONBUSD 
	global qty_asks_g_AUCTIONBUSD 

	symbol_g_AUCTIONBUSD = symbol_c_l_AUCTIONBUSD 
	price_bids_g_AUCTIONBUSD = Decimal(price_bids_c_l_AUCTIONBUSD) 
	qty_bids_g_AUCTIONBUSD = Decimal(qty_bids_c_l_AUCTIONBUSD) 
	price_asks_g_AUCTIONBUSD = Decimal(price_asks_c_l_AUCTIONBUSD) 
	qty_asks_g_AUCTIONBUSD = Decimal(qty_asks_c_l_AUCTIONBUSD) 


def loop_AUCTIONBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/auctionbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AUCTIONBUSD) 
	ws.run_forever() 


Thread(target=loop_AUCTIONBUSD).start() 
symbol_g_PHABUSD = 'PHABUSD' 
price_bids_g_PHABUSD = Decimal('0.0') 
qty_bids_g_PHABUSD = Decimal('0.0') 
price_asks_g_PHABUSD = Decimal('0.0') 
qty_asks_g_PHABUSD = Decimal('0.0') 
stepSize_g_PHABUSD = Decimal('1.0') 


def on_message_PHABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PHABUSD = 'PHABUSD' 
	price_bids_c_l_PHABUSD = data['b'] 
	qty_bids_c_l_PHABUSD = data['B'] 
	price_asks_c_l_PHABUSD = data['a'] 
	qty_asks_c_l_PHABUSD = data['A'] 

	global symbol_g_PHABUSD 
	global price_bids_g_PHABUSD 
	global qty_bids_g_PHABUSD 
	global price_asks_g_PHABUSD 
	global qty_asks_g_PHABUSD 

	symbol_g_PHABUSD = symbol_c_l_PHABUSD 
	price_bids_g_PHABUSD = Decimal(price_bids_c_l_PHABUSD) 
	qty_bids_g_PHABUSD = Decimal(qty_bids_c_l_PHABUSD) 
	price_asks_g_PHABUSD = Decimal(price_asks_c_l_PHABUSD) 
	qty_asks_g_PHABUSD = Decimal(qty_asks_c_l_PHABUSD) 


def loop_PHABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/phabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PHABUSD) 
	ws.run_forever() 


Thread(target=loop_PHABUSD).start() 
symbol_g_TVKBUSD = 'TVKBUSD' 
price_bids_g_TVKBUSD = Decimal('0.0') 
qty_bids_g_TVKBUSD = Decimal('0.0') 
price_asks_g_TVKBUSD = Decimal('0.0') 
qty_asks_g_TVKBUSD = Decimal('0.0') 
stepSize_g_TVKBUSD = Decimal('1.0') 


def on_message_TVKBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TVKBUSD = 'TVKBUSD' 
	price_bids_c_l_TVKBUSD = data['b'] 
	qty_bids_c_l_TVKBUSD = data['B'] 
	price_asks_c_l_TVKBUSD = data['a'] 
	qty_asks_c_l_TVKBUSD = data['A'] 

	global symbol_g_TVKBUSD 
	global price_bids_g_TVKBUSD 
	global qty_bids_g_TVKBUSD 
	global price_asks_g_TVKBUSD 
	global qty_asks_g_TVKBUSD 

	symbol_g_TVKBUSD = symbol_c_l_TVKBUSD 
	price_bids_g_TVKBUSD = Decimal(price_bids_c_l_TVKBUSD) 
	qty_bids_g_TVKBUSD = Decimal(qty_bids_c_l_TVKBUSD) 
	price_asks_g_TVKBUSD = Decimal(price_asks_c_l_TVKBUSD) 
	qty_asks_g_TVKBUSD = Decimal(qty_asks_c_l_TVKBUSD) 


def loop_TVKBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tvkbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TVKBUSD) 
	ws.run_forever() 


Thread(target=loop_TVKBUSD).start() 
symbol_g_BADGERBUSD = 'BADGERBUSD' 
price_bids_g_BADGERBUSD = Decimal('0.0') 
qty_bids_g_BADGERBUSD = Decimal('0.0') 
price_asks_g_BADGERBUSD = Decimal('0.0') 
qty_asks_g_BADGERBUSD = Decimal('0.0') 
stepSize_g_BADGERBUSD = Decimal('0.01') 


def on_message_BADGERBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BADGERBUSD = 'BADGERBUSD' 
	price_bids_c_l_BADGERBUSD = data['b'] 
	qty_bids_c_l_BADGERBUSD = data['B'] 
	price_asks_c_l_BADGERBUSD = data['a'] 
	qty_asks_c_l_BADGERBUSD = data['A'] 

	global symbol_g_BADGERBUSD 
	global price_bids_g_BADGERBUSD 
	global qty_bids_g_BADGERBUSD 
	global price_asks_g_BADGERBUSD 
	global qty_asks_g_BADGERBUSD 

	symbol_g_BADGERBUSD = symbol_c_l_BADGERBUSD 
	price_bids_g_BADGERBUSD = Decimal(price_bids_c_l_BADGERBUSD) 
	qty_bids_g_BADGERBUSD = Decimal(qty_bids_c_l_BADGERBUSD) 
	price_asks_g_BADGERBUSD = Decimal(price_asks_c_l_BADGERBUSD) 
	qty_asks_g_BADGERBUSD = Decimal(qty_asks_c_l_BADGERBUSD) 


def loop_BADGERBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/badgerbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BADGERBUSD) 
	ws.run_forever() 


Thread(target=loop_BADGERBUSD).start() 
symbol_g_FISBUSD = 'FISBUSD' 
price_bids_g_FISBUSD = Decimal('0.0') 
qty_bids_g_FISBUSD = Decimal('0.0') 
price_asks_g_FISBUSD = Decimal('0.0') 
qty_asks_g_FISBUSD = Decimal('0.0') 
stepSize_g_FISBUSD = Decimal('1.0') 


def on_message_FISBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FISBUSD = 'FISBUSD' 
	price_bids_c_l_FISBUSD = data['b'] 
	qty_bids_c_l_FISBUSD = data['B'] 
	price_asks_c_l_FISBUSD = data['a'] 
	qty_asks_c_l_FISBUSD = data['A'] 

	global symbol_g_FISBUSD 
	global price_bids_g_FISBUSD 
	global qty_bids_g_FISBUSD 
	global price_asks_g_FISBUSD 
	global qty_asks_g_FISBUSD 

	symbol_g_FISBUSD = symbol_c_l_FISBUSD 
	price_bids_g_FISBUSD = Decimal(price_bids_c_l_FISBUSD) 
	qty_bids_g_FISBUSD = Decimal(qty_bids_c_l_FISBUSD) 
	price_asks_g_FISBUSD = Decimal(price_asks_c_l_FISBUSD) 
	qty_asks_g_FISBUSD = Decimal(qty_asks_c_l_FISBUSD) 


def loop_FISBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fisbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FISBUSD) 
	ws.run_forever() 


Thread(target=loop_FISBUSD).start() 
symbol_g_OMBUSD = 'OMBUSD' 
price_bids_g_OMBUSD = Decimal('0.0') 
qty_bids_g_OMBUSD = Decimal('0.0') 
price_asks_g_OMBUSD = Decimal('0.0') 
qty_asks_g_OMBUSD = Decimal('0.0') 
stepSize_g_OMBUSD = Decimal('1.0') 


def on_message_OMBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OMBUSD = 'OMBUSD' 
	price_bids_c_l_OMBUSD = data['b'] 
	qty_bids_c_l_OMBUSD = data['B'] 
	price_asks_c_l_OMBUSD = data['a'] 
	qty_asks_c_l_OMBUSD = data['A'] 

	global symbol_g_OMBUSD 
	global price_bids_g_OMBUSD 
	global qty_bids_g_OMBUSD 
	global price_asks_g_OMBUSD 
	global qty_asks_g_OMBUSD 

	symbol_g_OMBUSD = symbol_c_l_OMBUSD 
	price_bids_g_OMBUSD = Decimal(price_bids_c_l_OMBUSD) 
	qty_bids_g_OMBUSD = Decimal(qty_bids_c_l_OMBUSD) 
	price_asks_g_OMBUSD = Decimal(price_asks_c_l_OMBUSD) 
	qty_asks_g_OMBUSD = Decimal(qty_asks_c_l_OMBUSD) 


def loop_OMBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ombusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OMBUSD) 
	ws.run_forever() 


Thread(target=loop_OMBUSD).start() 
symbol_g_PONDBUSD = 'PONDBUSD' 
price_bids_g_PONDBUSD = Decimal('0.0') 
qty_bids_g_PONDBUSD = Decimal('0.0') 
price_asks_g_PONDBUSD = Decimal('0.0') 
qty_asks_g_PONDBUSD = Decimal('0.0') 
stepSize_g_PONDBUSD = Decimal('0.01') 


def on_message_PONDBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PONDBUSD = 'PONDBUSD' 
	price_bids_c_l_PONDBUSD = data['b'] 
	qty_bids_c_l_PONDBUSD = data['B'] 
	price_asks_c_l_PONDBUSD = data['a'] 
	qty_asks_c_l_PONDBUSD = data['A'] 

	global symbol_g_PONDBUSD 
	global price_bids_g_PONDBUSD 
	global qty_bids_g_PONDBUSD 
	global price_asks_g_PONDBUSD 
	global qty_asks_g_PONDBUSD 

	symbol_g_PONDBUSD = symbol_c_l_PONDBUSD 
	price_bids_g_PONDBUSD = Decimal(price_bids_c_l_PONDBUSD) 
	qty_bids_g_PONDBUSD = Decimal(qty_bids_c_l_PONDBUSD) 
	price_asks_g_PONDBUSD = Decimal(price_asks_c_l_PONDBUSD) 
	qty_asks_g_PONDBUSD = Decimal(qty_asks_c_l_PONDBUSD) 


def loop_PONDBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/pondbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PONDBUSD) 
	ws.run_forever() 


Thread(target=loop_PONDBUSD).start() 
symbol_g_DEGOBUSD = 'DEGOBUSD' 
price_bids_g_DEGOBUSD = Decimal('0.0') 
qty_bids_g_DEGOBUSD = Decimal('0.0') 
price_asks_g_DEGOBUSD = Decimal('0.0') 
qty_asks_g_DEGOBUSD = Decimal('0.0') 
stepSize_g_DEGOBUSD = Decimal('0.01') 


def on_message_DEGOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DEGOBUSD = 'DEGOBUSD' 
	price_bids_c_l_DEGOBUSD = data['b'] 
	qty_bids_c_l_DEGOBUSD = data['B'] 
	price_asks_c_l_DEGOBUSD = data['a'] 
	qty_asks_c_l_DEGOBUSD = data['A'] 

	global symbol_g_DEGOBUSD 
	global price_bids_g_DEGOBUSD 
	global qty_bids_g_DEGOBUSD 
	global price_asks_g_DEGOBUSD 
	global qty_asks_g_DEGOBUSD 

	symbol_g_DEGOBUSD = symbol_c_l_DEGOBUSD 
	price_bids_g_DEGOBUSD = Decimal(price_bids_c_l_DEGOBUSD) 
	qty_bids_g_DEGOBUSD = Decimal(qty_bids_c_l_DEGOBUSD) 
	price_asks_g_DEGOBUSD = Decimal(price_asks_c_l_DEGOBUSD) 
	qty_asks_g_DEGOBUSD = Decimal(qty_asks_c_l_DEGOBUSD) 


def loop_DEGOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/degobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DEGOBUSD) 
	ws.run_forever() 


Thread(target=loop_DEGOBUSD).start() 
symbol_g_ALICEBUSD = 'ALICEBUSD' 
price_bids_g_ALICEBUSD = Decimal('0.0') 
qty_bids_g_ALICEBUSD = Decimal('0.0') 
price_asks_g_ALICEBUSD = Decimal('0.0') 
qty_asks_g_ALICEBUSD = Decimal('0.0') 
stepSize_g_ALICEBUSD = Decimal('0.01') 


def on_message_ALICEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALICEBUSD = 'ALICEBUSD' 
	price_bids_c_l_ALICEBUSD = data['b'] 
	qty_bids_c_l_ALICEBUSD = data['B'] 
	price_asks_c_l_ALICEBUSD = data['a'] 
	qty_asks_c_l_ALICEBUSD = data['A'] 

	global symbol_g_ALICEBUSD 
	global price_bids_g_ALICEBUSD 
	global qty_bids_g_ALICEBUSD 
	global price_asks_g_ALICEBUSD 
	global qty_asks_g_ALICEBUSD 

	symbol_g_ALICEBUSD = symbol_c_l_ALICEBUSD 
	price_bids_g_ALICEBUSD = Decimal(price_bids_c_l_ALICEBUSD) 
	qty_bids_g_ALICEBUSD = Decimal(qty_bids_c_l_ALICEBUSD) 
	price_asks_g_ALICEBUSD = Decimal(price_asks_c_l_ALICEBUSD) 
	qty_asks_g_ALICEBUSD = Decimal(qty_asks_c_l_ALICEBUSD) 


def loop_ALICEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alicebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALICEBUSD) 
	ws.run_forever() 


Thread(target=loop_ALICEBUSD).start() 
symbol_g_BIFIBUSD = 'BIFIBUSD' 
price_bids_g_BIFIBUSD = Decimal('0.0') 
qty_bids_g_BIFIBUSD = Decimal('0.0') 
price_asks_g_BIFIBUSD = Decimal('0.0') 
qty_asks_g_BIFIBUSD = Decimal('0.0') 
stepSize_g_BIFIBUSD = Decimal('0.001') 


def on_message_BIFIBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BIFIBUSD = 'BIFIBUSD' 
	price_bids_c_l_BIFIBUSD = data['b'] 
	qty_bids_c_l_BIFIBUSD = data['B'] 
	price_asks_c_l_BIFIBUSD = data['a'] 
	qty_asks_c_l_BIFIBUSD = data['A'] 

	global symbol_g_BIFIBUSD 
	global price_bids_g_BIFIBUSD 
	global qty_bids_g_BIFIBUSD 
	global price_asks_g_BIFIBUSD 
	global qty_asks_g_BIFIBUSD 

	symbol_g_BIFIBUSD = symbol_c_l_BIFIBUSD 
	price_bids_g_BIFIBUSD = Decimal(price_bids_c_l_BIFIBUSD) 
	qty_bids_g_BIFIBUSD = Decimal(qty_bids_c_l_BIFIBUSD) 
	price_asks_g_BIFIBUSD = Decimal(price_asks_c_l_BIFIBUSD) 
	qty_asks_g_BIFIBUSD = Decimal(qty_asks_c_l_BIFIBUSD) 


def loop_BIFIBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bifibusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BIFIBUSD) 
	ws.run_forever() 


Thread(target=loop_BIFIBUSD).start() 
symbol_g_LINABUSD = 'LINABUSD' 
price_bids_g_LINABUSD = Decimal('0.0') 
qty_bids_g_LINABUSD = Decimal('0.0') 
price_asks_g_LINABUSD = Decimal('0.0') 
qty_asks_g_LINABUSD = Decimal('0.0') 
stepSize_g_LINABUSD = Decimal('0.01') 


def on_message_LINABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LINABUSD = 'LINABUSD' 
	price_bids_c_l_LINABUSD = data['b'] 
	qty_bids_c_l_LINABUSD = data['B'] 
	price_asks_c_l_LINABUSD = data['a'] 
	qty_asks_c_l_LINABUSD = data['A'] 

	global symbol_g_LINABUSD 
	global price_bids_g_LINABUSD 
	global qty_bids_g_LINABUSD 
	global price_asks_g_LINABUSD 
	global qty_asks_g_LINABUSD 

	symbol_g_LINABUSD = symbol_c_l_LINABUSD 
	price_bids_g_LINABUSD = Decimal(price_bids_c_l_LINABUSD) 
	qty_bids_g_LINABUSD = Decimal(qty_bids_c_l_LINABUSD) 
	price_asks_g_LINABUSD = Decimal(price_asks_c_l_LINABUSD) 
	qty_asks_g_LINABUSD = Decimal(qty_asks_c_l_LINABUSD) 


def loop_LINABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/linabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LINABUSD) 
	ws.run_forever() 


Thread(target=loop_LINABUSD).start() 
symbol_g_PERPBUSD = 'PERPBUSD' 
price_bids_g_PERPBUSD = Decimal('0.0') 
qty_bids_g_PERPBUSD = Decimal('0.0') 
price_asks_g_PERPBUSD = Decimal('0.0') 
qty_asks_g_PERPBUSD = Decimal('0.0') 
stepSize_g_PERPBUSD = Decimal('0.01') 


def on_message_PERPBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PERPBUSD = 'PERPBUSD' 
	price_bids_c_l_PERPBUSD = data['b'] 
	qty_bids_c_l_PERPBUSD = data['B'] 
	price_asks_c_l_PERPBUSD = data['a'] 
	qty_asks_c_l_PERPBUSD = data['A'] 

	global symbol_g_PERPBUSD 
	global price_bids_g_PERPBUSD 
	global qty_bids_g_PERPBUSD 
	global price_asks_g_PERPBUSD 
	global qty_asks_g_PERPBUSD 

	symbol_g_PERPBUSD = symbol_c_l_PERPBUSD 
	price_bids_g_PERPBUSD = Decimal(price_bids_c_l_PERPBUSD) 
	qty_bids_g_PERPBUSD = Decimal(qty_bids_c_l_PERPBUSD) 
	price_asks_g_PERPBUSD = Decimal(price_asks_c_l_PERPBUSD) 
	qty_asks_g_PERPBUSD = Decimal(qty_asks_c_l_PERPBUSD) 


def loop_PERPBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/perpbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PERPBUSD) 
	ws.run_forever() 


Thread(target=loop_PERPBUSD).start() 
symbol_g_SUPERBUSD = 'SUPERBUSD' 
price_bids_g_SUPERBUSD = Decimal('0.0') 
qty_bids_g_SUPERBUSD = Decimal('0.0') 
price_asks_g_SUPERBUSD = Decimal('0.0') 
qty_asks_g_SUPERBUSD = Decimal('0.0') 
stepSize_g_SUPERBUSD = Decimal('1.0') 


def on_message_SUPERBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SUPERBUSD = 'SUPERBUSD' 
	price_bids_c_l_SUPERBUSD = data['b'] 
	qty_bids_c_l_SUPERBUSD = data['B'] 
	price_asks_c_l_SUPERBUSD = data['a'] 
	qty_asks_c_l_SUPERBUSD = data['A'] 

	global symbol_g_SUPERBUSD 
	global price_bids_g_SUPERBUSD 
	global qty_bids_g_SUPERBUSD 
	global price_asks_g_SUPERBUSD 
	global qty_asks_g_SUPERBUSD 

	symbol_g_SUPERBUSD = symbol_c_l_SUPERBUSD 
	price_bids_g_SUPERBUSD = Decimal(price_bids_c_l_SUPERBUSD) 
	qty_bids_g_SUPERBUSD = Decimal(qty_bids_c_l_SUPERBUSD) 
	price_asks_g_SUPERBUSD = Decimal(price_asks_c_l_SUPERBUSD) 
	qty_asks_g_SUPERBUSD = Decimal(qty_asks_c_l_SUPERBUSD) 


def loop_SUPERBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/superbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SUPERBUSD) 
	ws.run_forever() 


Thread(target=loop_SUPERBUSD).start() 
symbol_g_CFXBUSD = 'CFXBUSD' 
price_bids_g_CFXBUSD = Decimal('0.0') 
qty_bids_g_CFXBUSD = Decimal('0.0') 
price_asks_g_CFXBUSD = Decimal('0.0') 
qty_asks_g_CFXBUSD = Decimal('0.0') 
stepSize_g_CFXBUSD = Decimal('1.0') 


def on_message_CFXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CFXBUSD = 'CFXBUSD' 
	price_bids_c_l_CFXBUSD = data['b'] 
	qty_bids_c_l_CFXBUSD = data['B'] 
	price_asks_c_l_CFXBUSD = data['a'] 
	qty_asks_c_l_CFXBUSD = data['A'] 

	global symbol_g_CFXBUSD 
	global price_bids_g_CFXBUSD 
	global qty_bids_g_CFXBUSD 
	global price_asks_g_CFXBUSD 
	global qty_asks_g_CFXBUSD 

	symbol_g_CFXBUSD = symbol_c_l_CFXBUSD 
	price_bids_g_CFXBUSD = Decimal(price_bids_c_l_CFXBUSD) 
	qty_bids_g_CFXBUSD = Decimal(qty_bids_c_l_CFXBUSD) 
	price_asks_g_CFXBUSD = Decimal(price_asks_c_l_CFXBUSD) 
	qty_asks_g_CFXBUSD = Decimal(qty_asks_c_l_CFXBUSD) 


def loop_CFXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cfxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CFXBUSD) 
	ws.run_forever() 


Thread(target=loop_CFXBUSD).start() 
symbol_g_XVGBUSD = 'XVGBUSD' 
price_bids_g_XVGBUSD = Decimal('0.0') 
qty_bids_g_XVGBUSD = Decimal('0.0') 
price_asks_g_XVGBUSD = Decimal('0.0') 
qty_asks_g_XVGBUSD = Decimal('0.0') 
stepSize_g_XVGBUSD = Decimal('0.1') 


def on_message_XVGBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XVGBUSD = 'XVGBUSD' 
	price_bids_c_l_XVGBUSD = data['b'] 
	qty_bids_c_l_XVGBUSD = data['B'] 
	price_asks_c_l_XVGBUSD = data['a'] 
	qty_asks_c_l_XVGBUSD = data['A'] 

	global symbol_g_XVGBUSD 
	global price_bids_g_XVGBUSD 
	global qty_bids_g_XVGBUSD 
	global price_asks_g_XVGBUSD 
	global qty_asks_g_XVGBUSD 

	symbol_g_XVGBUSD = symbol_c_l_XVGBUSD 
	price_bids_g_XVGBUSD = Decimal(price_bids_c_l_XVGBUSD) 
	qty_bids_g_XVGBUSD = Decimal(qty_bids_c_l_XVGBUSD) 
	price_asks_g_XVGBUSD = Decimal(price_asks_c_l_XVGBUSD) 
	qty_asks_g_XVGBUSD = Decimal(qty_asks_c_l_XVGBUSD) 


def loop_XVGBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xvgbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XVGBUSD) 
	ws.run_forever() 


Thread(target=loop_XVGBUSD).start() 
symbol_g_AUTOBUSD = 'AUTOBUSD' 
price_bids_g_AUTOBUSD = Decimal('0.0') 
qty_bids_g_AUTOBUSD = Decimal('0.0') 
price_asks_g_AUTOBUSD = Decimal('0.0') 
qty_asks_g_AUTOBUSD = Decimal('0.0') 
stepSize_g_AUTOBUSD = Decimal('0.001') 


def on_message_AUTOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AUTOBUSD = 'AUTOBUSD' 
	price_bids_c_l_AUTOBUSD = data['b'] 
	qty_bids_c_l_AUTOBUSD = data['B'] 
	price_asks_c_l_AUTOBUSD = data['a'] 
	qty_asks_c_l_AUTOBUSD = data['A'] 

	global symbol_g_AUTOBUSD 
	global price_bids_g_AUTOBUSD 
	global qty_bids_g_AUTOBUSD 
	global price_asks_g_AUTOBUSD 
	global qty_asks_g_AUTOBUSD 

	symbol_g_AUTOBUSD = symbol_c_l_AUTOBUSD 
	price_bids_g_AUTOBUSD = Decimal(price_bids_c_l_AUTOBUSD) 
	qty_bids_g_AUTOBUSD = Decimal(qty_bids_c_l_AUTOBUSD) 
	price_asks_g_AUTOBUSD = Decimal(price_asks_c_l_AUTOBUSD) 
	qty_asks_g_AUTOBUSD = Decimal(qty_asks_c_l_AUTOBUSD) 


def loop_AUTOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/autobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AUTOBUSD) 
	ws.run_forever() 


Thread(target=loop_AUTOBUSD).start() 
symbol_g_TKOBUSD = 'TKOBUSD' 
price_bids_g_TKOBUSD = Decimal('0.0') 
qty_bids_g_TKOBUSD = Decimal('0.0') 
price_asks_g_TKOBUSD = Decimal('0.0') 
qty_asks_g_TKOBUSD = Decimal('0.0') 
stepSize_g_TKOBUSD = Decimal('0.1') 


def on_message_TKOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TKOBUSD = 'TKOBUSD' 
	price_bids_c_l_TKOBUSD = data['b'] 
	qty_bids_c_l_TKOBUSD = data['B'] 
	price_asks_c_l_TKOBUSD = data['a'] 
	qty_asks_c_l_TKOBUSD = data['A'] 

	global symbol_g_TKOBUSD 
	global price_bids_g_TKOBUSD 
	global qty_bids_g_TKOBUSD 
	global price_asks_g_TKOBUSD 
	global qty_asks_g_TKOBUSD 

	symbol_g_TKOBUSD = symbol_c_l_TKOBUSD 
	price_bids_g_TKOBUSD = Decimal(price_bids_c_l_TKOBUSD) 
	qty_bids_g_TKOBUSD = Decimal(qty_bids_c_l_TKOBUSD) 
	price_asks_g_TKOBUSD = Decimal(price_asks_c_l_TKOBUSD) 
	qty_asks_g_TKOBUSD = Decimal(qty_asks_c_l_TKOBUSD) 


def loop_TKOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tkobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TKOBUSD) 
	ws.run_forever() 


Thread(target=loop_TKOBUSD).start() 
symbol_g_TLMBUSD = 'TLMBUSD' 
price_bids_g_TLMBUSD = Decimal('0.0') 
qty_bids_g_TLMBUSD = Decimal('0.0') 
price_asks_g_TLMBUSD = Decimal('0.0') 
qty_asks_g_TLMBUSD = Decimal('0.0') 
stepSize_g_TLMBUSD = Decimal('1.0') 


def on_message_TLMBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TLMBUSD = 'TLMBUSD' 
	price_bids_c_l_TLMBUSD = data['b'] 
	qty_bids_c_l_TLMBUSD = data['B'] 
	price_asks_c_l_TLMBUSD = data['a'] 
	qty_asks_c_l_TLMBUSD = data['A'] 

	global symbol_g_TLMBUSD 
	global price_bids_g_TLMBUSD 
	global qty_bids_g_TLMBUSD 
	global price_asks_g_TLMBUSD 
	global qty_asks_g_TLMBUSD 

	symbol_g_TLMBUSD = symbol_c_l_TLMBUSD 
	price_bids_g_TLMBUSD = Decimal(price_bids_c_l_TLMBUSD) 
	qty_bids_g_TLMBUSD = Decimal(qty_bids_c_l_TLMBUSD) 
	price_asks_g_TLMBUSD = Decimal(price_asks_c_l_TLMBUSD) 
	qty_asks_g_TLMBUSD = Decimal(qty_asks_c_l_TLMBUSD) 


def loop_TLMBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tlmbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TLMBUSD) 
	ws.run_forever() 


Thread(target=loop_TLMBUSD).start() 
symbol_g_BARBUSD = 'BARBUSD' 
price_bids_g_BARBUSD = Decimal('0.0') 
qty_bids_g_BARBUSD = Decimal('0.0') 
price_asks_g_BARBUSD = Decimal('0.0') 
qty_asks_g_BARBUSD = Decimal('0.0') 
stepSize_g_BARBUSD = Decimal('0.01') 


def on_message_BARBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BARBUSD = 'BARBUSD' 
	price_bids_c_l_BARBUSD = data['b'] 
	qty_bids_c_l_BARBUSD = data['B'] 
	price_asks_c_l_BARBUSD = data['a'] 
	qty_asks_c_l_BARBUSD = data['A'] 

	global symbol_g_BARBUSD 
	global price_bids_g_BARBUSD 
	global qty_bids_g_BARBUSD 
	global price_asks_g_BARBUSD 
	global qty_asks_g_BARBUSD 

	symbol_g_BARBUSD = symbol_c_l_BARBUSD 
	price_bids_g_BARBUSD = Decimal(price_bids_c_l_BARBUSD) 
	qty_bids_g_BARBUSD = Decimal(qty_bids_c_l_BARBUSD) 
	price_asks_g_BARBUSD = Decimal(price_asks_c_l_BARBUSD) 
	qty_asks_g_BARBUSD = Decimal(qty_asks_c_l_BARBUSD) 


def loop_BARBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/barbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BARBUSD) 
	ws.run_forever() 


Thread(target=loop_BARBUSD).start() 
symbol_g_FORTHBUSD = 'FORTHBUSD' 
price_bids_g_FORTHBUSD = Decimal('0.0') 
qty_bids_g_FORTHBUSD = Decimal('0.0') 
price_asks_g_FORTHBUSD = Decimal('0.0') 
qty_asks_g_FORTHBUSD = Decimal('0.0') 
stepSize_g_FORTHBUSD = Decimal('0.01') 


def on_message_FORTHBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FORTHBUSD = 'FORTHBUSD' 
	price_bids_c_l_FORTHBUSD = data['b'] 
	qty_bids_c_l_FORTHBUSD = data['B'] 
	price_asks_c_l_FORTHBUSD = data['a'] 
	qty_asks_c_l_FORTHBUSD = data['A'] 

	global symbol_g_FORTHBUSD 
	global price_bids_g_FORTHBUSD 
	global qty_bids_g_FORTHBUSD 
	global price_asks_g_FORTHBUSD 
	global qty_asks_g_FORTHBUSD 

	symbol_g_FORTHBUSD = symbol_c_l_FORTHBUSD 
	price_bids_g_FORTHBUSD = Decimal(price_bids_c_l_FORTHBUSD) 
	qty_bids_g_FORTHBUSD = Decimal(qty_bids_c_l_FORTHBUSD) 
	price_asks_g_FORTHBUSD = Decimal(price_asks_c_l_FORTHBUSD) 
	qty_asks_g_FORTHBUSD = Decimal(qty_asks_c_l_FORTHBUSD) 


def loop_FORTHBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/forthbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FORTHBUSD) 
	ws.run_forever() 


Thread(target=loop_FORTHBUSD).start() 
symbol_g_BURGERBUSD = 'BURGERBUSD' 
price_bids_g_BURGERBUSD = Decimal('0.0') 
qty_bids_g_BURGERBUSD = Decimal('0.0') 
price_asks_g_BURGERBUSD = Decimal('0.0') 
qty_asks_g_BURGERBUSD = Decimal('0.0') 
stepSize_g_BURGERBUSD = Decimal('0.1') 


def on_message_BURGERBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BURGERBUSD = 'BURGERBUSD' 
	price_bids_c_l_BURGERBUSD = data['b'] 
	qty_bids_c_l_BURGERBUSD = data['B'] 
	price_asks_c_l_BURGERBUSD = data['a'] 
	qty_asks_c_l_BURGERBUSD = data['A'] 

	global symbol_g_BURGERBUSD 
	global price_bids_g_BURGERBUSD 
	global qty_bids_g_BURGERBUSD 
	global price_asks_g_BURGERBUSD 
	global qty_asks_g_BURGERBUSD 

	symbol_g_BURGERBUSD = symbol_c_l_BURGERBUSD 
	price_bids_g_BURGERBUSD = Decimal(price_bids_c_l_BURGERBUSD) 
	qty_bids_g_BURGERBUSD = Decimal(qty_bids_c_l_BURGERBUSD) 
	price_asks_g_BURGERBUSD = Decimal(price_asks_c_l_BURGERBUSD) 
	qty_asks_g_BURGERBUSD = Decimal(qty_asks_c_l_BURGERBUSD) 


def loop_BURGERBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/burgerbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BURGERBUSD) 
	ws.run_forever() 


Thread(target=loop_BURGERBUSD).start() 
symbol_g_SLPBUSD = 'SLPBUSD' 
price_bids_g_SLPBUSD = Decimal('0.0') 
qty_bids_g_SLPBUSD = Decimal('0.0') 
price_asks_g_SLPBUSD = Decimal('0.0') 
qty_asks_g_SLPBUSD = Decimal('0.0') 
stepSize_g_SLPBUSD = Decimal('1.0') 


def on_message_SLPBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SLPBUSD = 'SLPBUSD' 
	price_bids_c_l_SLPBUSD = data['b'] 
	qty_bids_c_l_SLPBUSD = data['B'] 
	price_asks_c_l_SLPBUSD = data['a'] 
	qty_asks_c_l_SLPBUSD = data['A'] 

	global symbol_g_SLPBUSD 
	global price_bids_g_SLPBUSD 
	global qty_bids_g_SLPBUSD 
	global price_asks_g_SLPBUSD 
	global qty_asks_g_SLPBUSD 

	symbol_g_SLPBUSD = symbol_c_l_SLPBUSD 
	price_bids_g_SLPBUSD = Decimal(price_bids_c_l_SLPBUSD) 
	qty_bids_g_SLPBUSD = Decimal(qty_bids_c_l_SLPBUSD) 
	price_asks_g_SLPBUSD = Decimal(price_asks_c_l_SLPBUSD) 
	qty_asks_g_SLPBUSD = Decimal(qty_asks_c_l_SLPBUSD) 


def loop_SLPBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/slpbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SLPBUSD) 
	ws.run_forever() 


Thread(target=loop_SLPBUSD).start() 
symbol_g_SHIBBUSD = 'SHIBBUSD' 
price_bids_g_SHIBBUSD = Decimal('0.0') 
qty_bids_g_SHIBBUSD = Decimal('0.0') 
price_asks_g_SHIBBUSD = Decimal('0.0') 
qty_asks_g_SHIBBUSD = Decimal('0.0') 
stepSize_g_SHIBBUSD = Decimal('1.0') 


def on_message_SHIBBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SHIBBUSD = 'SHIBBUSD' 
	price_bids_c_l_SHIBBUSD = data['b'] 
	qty_bids_c_l_SHIBBUSD = data['B'] 
	price_asks_c_l_SHIBBUSD = data['a'] 
	qty_asks_c_l_SHIBBUSD = data['A'] 

	global symbol_g_SHIBBUSD 
	global price_bids_g_SHIBBUSD 
	global qty_bids_g_SHIBBUSD 
	global price_asks_g_SHIBBUSD 
	global qty_asks_g_SHIBBUSD 

	symbol_g_SHIBBUSD = symbol_c_l_SHIBBUSD 
	price_bids_g_SHIBBUSD = Decimal(price_bids_c_l_SHIBBUSD) 
	qty_bids_g_SHIBBUSD = Decimal(qty_bids_c_l_SHIBBUSD) 
	price_asks_g_SHIBBUSD = Decimal(price_asks_c_l_SHIBBUSD) 
	qty_asks_g_SHIBBUSD = Decimal(qty_asks_c_l_SHIBBUSD) 


def loop_SHIBBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/shibbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SHIBBUSD) 
	ws.run_forever() 


Thread(target=loop_SHIBBUSD).start() 
symbol_g_ICPBUSD = 'ICPBUSD' 
price_bids_g_ICPBUSD = Decimal('0.0') 
qty_bids_g_ICPBUSD = Decimal('0.0') 
price_asks_g_ICPBUSD = Decimal('0.0') 
qty_asks_g_ICPBUSD = Decimal('0.0') 
stepSize_g_ICPBUSD = Decimal('0.01') 


def on_message_ICPBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ICPBUSD = 'ICPBUSD' 
	price_bids_c_l_ICPBUSD = data['b'] 
	qty_bids_c_l_ICPBUSD = data['B'] 
	price_asks_c_l_ICPBUSD = data['a'] 
	qty_asks_c_l_ICPBUSD = data['A'] 

	global symbol_g_ICPBUSD 
	global price_bids_g_ICPBUSD 
	global qty_bids_g_ICPBUSD 
	global price_asks_g_ICPBUSD 
	global qty_asks_g_ICPBUSD 

	symbol_g_ICPBUSD = symbol_c_l_ICPBUSD 
	price_bids_g_ICPBUSD = Decimal(price_bids_c_l_ICPBUSD) 
	qty_bids_g_ICPBUSD = Decimal(qty_bids_c_l_ICPBUSD) 
	price_asks_g_ICPBUSD = Decimal(price_asks_c_l_ICPBUSD) 
	qty_asks_g_ICPBUSD = Decimal(qty_asks_c_l_ICPBUSD) 


def loop_ICPBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/icpbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ICPBUSD) 
	ws.run_forever() 


Thread(target=loop_ICPBUSD).start() 
symbol_g_ARBUSD = 'ARBUSD' 
price_bids_g_ARBUSD = Decimal('0.0') 
qty_bids_g_ARBUSD = Decimal('0.0') 
price_asks_g_ARBUSD = Decimal('0.0') 
qty_asks_g_ARBUSD = Decimal('0.0') 
stepSize_g_ARBUSD = Decimal('0.01') 


def on_message_ARBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ARBUSD = 'ARBUSD' 
	price_bids_c_l_ARBUSD = data['b'] 
	qty_bids_c_l_ARBUSD = data['B'] 
	price_asks_c_l_ARBUSD = data['a'] 
	qty_asks_c_l_ARBUSD = data['A'] 

	global symbol_g_ARBUSD 
	global price_bids_g_ARBUSD 
	global qty_bids_g_ARBUSD 
	global price_asks_g_ARBUSD 
	global qty_asks_g_ARBUSD 

	symbol_g_ARBUSD = symbol_c_l_ARBUSD 
	price_bids_g_ARBUSD = Decimal(price_bids_c_l_ARBUSD) 
	qty_bids_g_ARBUSD = Decimal(qty_bids_c_l_ARBUSD) 
	price_asks_g_ARBUSD = Decimal(price_asks_c_l_ARBUSD) 
	qty_asks_g_ARBUSD = Decimal(qty_asks_c_l_ARBUSD) 


def loop_ARBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/arbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ARBUSD) 
	ws.run_forever() 


Thread(target=loop_ARBUSD).start() 
symbol_g_POLSBUSD = 'POLSBUSD' 
price_bids_g_POLSBUSD = Decimal('0.0') 
qty_bids_g_POLSBUSD = Decimal('0.0') 
price_asks_g_POLSBUSD = Decimal('0.0') 
qty_asks_g_POLSBUSD = Decimal('0.0') 
stepSize_g_POLSBUSD = Decimal('0.1') 


def on_message_POLSBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_POLSBUSD = 'POLSBUSD' 
	price_bids_c_l_POLSBUSD = data['b'] 
	qty_bids_c_l_POLSBUSD = data['B'] 
	price_asks_c_l_POLSBUSD = data['a'] 
	qty_asks_c_l_POLSBUSD = data['A'] 

	global symbol_g_POLSBUSD 
	global price_bids_g_POLSBUSD 
	global qty_bids_g_POLSBUSD 
	global price_asks_g_POLSBUSD 
	global qty_asks_g_POLSBUSD 

	symbol_g_POLSBUSD = symbol_c_l_POLSBUSD 
	price_bids_g_POLSBUSD = Decimal(price_bids_c_l_POLSBUSD) 
	qty_bids_g_POLSBUSD = Decimal(qty_bids_c_l_POLSBUSD) 
	price_asks_g_POLSBUSD = Decimal(price_asks_c_l_POLSBUSD) 
	qty_asks_g_POLSBUSD = Decimal(qty_asks_c_l_POLSBUSD) 


def loop_POLSBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/polsbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_POLSBUSD) 
	ws.run_forever() 


Thread(target=loop_POLSBUSD).start() 
symbol_g_MDXBUSD = 'MDXBUSD' 
price_bids_g_MDXBUSD = Decimal('0.0') 
qty_bids_g_MDXBUSD = Decimal('0.0') 
price_asks_g_MDXBUSD = Decimal('0.0') 
qty_asks_g_MDXBUSD = Decimal('0.0') 
stepSize_g_MDXBUSD = Decimal('0.1') 


def on_message_MDXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MDXBUSD = 'MDXBUSD' 
	price_bids_c_l_MDXBUSD = data['b'] 
	qty_bids_c_l_MDXBUSD = data['B'] 
	price_asks_c_l_MDXBUSD = data['a'] 
	qty_asks_c_l_MDXBUSD = data['A'] 

	global symbol_g_MDXBUSD 
	global price_bids_g_MDXBUSD 
	global qty_bids_g_MDXBUSD 
	global price_asks_g_MDXBUSD 
	global qty_asks_g_MDXBUSD 

	symbol_g_MDXBUSD = symbol_c_l_MDXBUSD 
	price_bids_g_MDXBUSD = Decimal(price_bids_c_l_MDXBUSD) 
	qty_bids_g_MDXBUSD = Decimal(qty_bids_c_l_MDXBUSD) 
	price_asks_g_MDXBUSD = Decimal(price_asks_c_l_MDXBUSD) 
	qty_asks_g_MDXBUSD = Decimal(qty_asks_c_l_MDXBUSD) 


def loop_MDXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mdxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MDXBUSD) 
	ws.run_forever() 


Thread(target=loop_MDXBUSD).start() 
symbol_g_MASKBUSD = 'MASKBUSD' 
price_bids_g_MASKBUSD = Decimal('0.0') 
qty_bids_g_MASKBUSD = Decimal('0.0') 
price_asks_g_MASKBUSD = Decimal('0.0') 
qty_asks_g_MASKBUSD = Decimal('0.0') 
stepSize_g_MASKBUSD = Decimal('0.1') 


def on_message_MASKBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MASKBUSD = 'MASKBUSD' 
	price_bids_c_l_MASKBUSD = data['b'] 
	qty_bids_c_l_MASKBUSD = data['B'] 
	price_asks_c_l_MASKBUSD = data['a'] 
	qty_asks_c_l_MASKBUSD = data['A'] 

	global symbol_g_MASKBUSD 
	global price_bids_g_MASKBUSD 
	global qty_bids_g_MASKBUSD 
	global price_asks_g_MASKBUSD 
	global qty_asks_g_MASKBUSD 

	symbol_g_MASKBUSD = symbol_c_l_MASKBUSD 
	price_bids_g_MASKBUSD = Decimal(price_bids_c_l_MASKBUSD) 
	qty_bids_g_MASKBUSD = Decimal(qty_bids_c_l_MASKBUSD) 
	price_asks_g_MASKBUSD = Decimal(price_asks_c_l_MASKBUSD) 
	qty_asks_g_MASKBUSD = Decimal(qty_asks_c_l_MASKBUSD) 


def loop_MASKBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/maskbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MASKBUSD) 
	ws.run_forever() 


Thread(target=loop_MASKBUSD).start() 
symbol_g_LPTBUSD = 'LPTBUSD' 
price_bids_g_LPTBUSD = Decimal('0.0') 
qty_bids_g_LPTBUSD = Decimal('0.0') 
price_asks_g_LPTBUSD = Decimal('0.0') 
qty_asks_g_LPTBUSD = Decimal('0.0') 
stepSize_g_LPTBUSD = Decimal('0.01') 


def on_message_LPTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LPTBUSD = 'LPTBUSD' 
	price_bids_c_l_LPTBUSD = data['b'] 
	qty_bids_c_l_LPTBUSD = data['B'] 
	price_asks_c_l_LPTBUSD = data['a'] 
	qty_asks_c_l_LPTBUSD = data['A'] 

	global symbol_g_LPTBUSD 
	global price_bids_g_LPTBUSD 
	global qty_bids_g_LPTBUSD 
	global price_asks_g_LPTBUSD 
	global qty_asks_g_LPTBUSD 

	symbol_g_LPTBUSD = symbol_c_l_LPTBUSD 
	price_bids_g_LPTBUSD = Decimal(price_bids_c_l_LPTBUSD) 
	qty_bids_g_LPTBUSD = Decimal(qty_bids_c_l_LPTBUSD) 
	price_asks_g_LPTBUSD = Decimal(price_asks_c_l_LPTBUSD) 
	qty_asks_g_LPTBUSD = Decimal(qty_asks_c_l_LPTBUSD) 


def loop_LPTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lptbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LPTBUSD) 
	ws.run_forever() 


Thread(target=loop_LPTBUSD).start() 
symbol_g_ATMBUSD = 'ATMBUSD' 
price_bids_g_ATMBUSD = Decimal('0.0') 
qty_bids_g_ATMBUSD = Decimal('0.0') 
price_asks_g_ATMBUSD = Decimal('0.0') 
qty_asks_g_ATMBUSD = Decimal('0.0') 
stepSize_g_ATMBUSD = Decimal('0.01') 


def on_message_ATMBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATMBUSD = 'ATMBUSD' 
	price_bids_c_l_ATMBUSD = data['b'] 
	qty_bids_c_l_ATMBUSD = data['B'] 
	price_asks_c_l_ATMBUSD = data['a'] 
	qty_asks_c_l_ATMBUSD = data['A'] 

	global symbol_g_ATMBUSD 
	global price_bids_g_ATMBUSD 
	global qty_bids_g_ATMBUSD 
	global price_asks_g_ATMBUSD 
	global qty_asks_g_ATMBUSD 

	symbol_g_ATMBUSD = symbol_c_l_ATMBUSD 
	price_bids_g_ATMBUSD = Decimal(price_bids_c_l_ATMBUSD) 
	qty_bids_g_ATMBUSD = Decimal(qty_bids_c_l_ATMBUSD) 
	price_asks_g_ATMBUSD = Decimal(price_asks_c_l_ATMBUSD) 
	qty_asks_g_ATMBUSD = Decimal(qty_asks_c_l_ATMBUSD) 


def loop_ATMBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atmbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATMBUSD) 
	ws.run_forever() 


Thread(target=loop_ATMBUSD).start() 
symbol_g_ZENBUSD = 'ZENBUSD' 
price_bids_g_ZENBUSD = Decimal('0.0') 
qty_bids_g_ZENBUSD = Decimal('0.0') 
price_asks_g_ZENBUSD = Decimal('0.0') 
qty_asks_g_ZENBUSD = Decimal('0.0') 
stepSize_g_ZENBUSD = Decimal('0.01') 


def on_message_ZENBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ZENBUSD = 'ZENBUSD' 
	price_bids_c_l_ZENBUSD = data['b'] 
	qty_bids_c_l_ZENBUSD = data['B'] 
	price_asks_c_l_ZENBUSD = data['a'] 
	qty_asks_c_l_ZENBUSD = data['A'] 

	global symbol_g_ZENBUSD 
	global price_bids_g_ZENBUSD 
	global qty_bids_g_ZENBUSD 
	global price_asks_g_ZENBUSD 
	global qty_asks_g_ZENBUSD 

	symbol_g_ZENBUSD = symbol_c_l_ZENBUSD 
	price_bids_g_ZENBUSD = Decimal(price_bids_c_l_ZENBUSD) 
	qty_bids_g_ZENBUSD = Decimal(qty_bids_c_l_ZENBUSD) 
	price_asks_g_ZENBUSD = Decimal(price_asks_c_l_ZENBUSD) 
	qty_asks_g_ZENBUSD = Decimal(qty_asks_c_l_ZENBUSD) 


def loop_ZENBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/zenbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ZENBUSD) 
	ws.run_forever() 


Thread(target=loop_ZENBUSD).start() 
symbol_g_KAVABUSD = 'KAVABUSD' 
price_bids_g_KAVABUSD = Decimal('0.0') 
qty_bids_g_KAVABUSD = Decimal('0.0') 
price_asks_g_KAVABUSD = Decimal('0.0') 
qty_asks_g_KAVABUSD = Decimal('0.0') 
stepSize_g_KAVABUSD = Decimal('0.1') 


def on_message_KAVABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KAVABUSD = 'KAVABUSD' 
	price_bids_c_l_KAVABUSD = data['b'] 
	qty_bids_c_l_KAVABUSD = data['B'] 
	price_asks_c_l_KAVABUSD = data['a'] 
	qty_asks_c_l_KAVABUSD = data['A'] 

	global symbol_g_KAVABUSD 
	global price_bids_g_KAVABUSD 
	global qty_bids_g_KAVABUSD 
	global price_asks_g_KAVABUSD 
	global qty_asks_g_KAVABUSD 

	symbol_g_KAVABUSD = symbol_c_l_KAVABUSD 
	price_bids_g_KAVABUSD = Decimal(price_bids_c_l_KAVABUSD) 
	qty_bids_g_KAVABUSD = Decimal(qty_bids_c_l_KAVABUSD) 
	price_asks_g_KAVABUSD = Decimal(price_asks_c_l_KAVABUSD) 
	qty_asks_g_KAVABUSD = Decimal(qty_asks_c_l_KAVABUSD) 


def loop_KAVABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kavabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KAVABUSD) 
	ws.run_forever() 


Thread(target=loop_KAVABUSD).start() 
symbol_g_ATABUSD = 'ATABUSD' 
price_bids_g_ATABUSD = Decimal('0.0') 
qty_bids_g_ATABUSD = Decimal('0.0') 
price_asks_g_ATABUSD = Decimal('0.0') 
qty_asks_g_ATABUSD = Decimal('0.0') 
stepSize_g_ATABUSD = Decimal('1.0') 


def on_message_ATABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ATABUSD = 'ATABUSD' 
	price_bids_c_l_ATABUSD = data['b'] 
	qty_bids_c_l_ATABUSD = data['B'] 
	price_asks_c_l_ATABUSD = data['a'] 
	qty_asks_c_l_ATABUSD = data['A'] 

	global symbol_g_ATABUSD 
	global price_bids_g_ATABUSD 
	global qty_bids_g_ATABUSD 
	global price_asks_g_ATABUSD 
	global qty_asks_g_ATABUSD 

	symbol_g_ATABUSD = symbol_c_l_ATABUSD 
	price_bids_g_ATABUSD = Decimal(price_bids_c_l_ATABUSD) 
	qty_bids_g_ATABUSD = Decimal(qty_bids_c_l_ATABUSD) 
	price_asks_g_ATABUSD = Decimal(price_asks_c_l_ATABUSD) 
	qty_asks_g_ATABUSD = Decimal(qty_asks_c_l_ATABUSD) 


def loop_ATABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/atabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ATABUSD) 
	ws.run_forever() 


Thread(target=loop_ATABUSD).start() 
symbol_g_GTCBUSD = 'GTCBUSD' 
price_bids_g_GTCBUSD = Decimal('0.0') 
qty_bids_g_GTCBUSD = Decimal('0.0') 
price_asks_g_GTCBUSD = Decimal('0.0') 
qty_asks_g_GTCBUSD = Decimal('0.0') 
stepSize_g_GTCBUSD = Decimal('0.1') 


def on_message_GTCBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GTCBUSD = 'GTCBUSD' 
	price_bids_c_l_GTCBUSD = data['b'] 
	qty_bids_c_l_GTCBUSD = data['B'] 
	price_asks_c_l_GTCBUSD = data['a'] 
	qty_asks_c_l_GTCBUSD = data['A'] 

	global symbol_g_GTCBUSD 
	global price_bids_g_GTCBUSD 
	global qty_bids_g_GTCBUSD 
	global price_asks_g_GTCBUSD 
	global qty_asks_g_GTCBUSD 

	symbol_g_GTCBUSD = symbol_c_l_GTCBUSD 
	price_bids_g_GTCBUSD = Decimal(price_bids_c_l_GTCBUSD) 
	qty_bids_g_GTCBUSD = Decimal(qty_bids_c_l_GTCBUSD) 
	price_asks_g_GTCBUSD = Decimal(price_asks_c_l_GTCBUSD) 
	qty_asks_g_GTCBUSD = Decimal(qty_asks_c_l_GTCBUSD) 


def loop_GTCBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gtcbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GTCBUSD) 
	ws.run_forever() 


Thread(target=loop_GTCBUSD).start() 
symbol_g_COTIBUSD = 'COTIBUSD' 
price_bids_g_COTIBUSD = Decimal('0.0') 
qty_bids_g_COTIBUSD = Decimal('0.0') 
price_asks_g_COTIBUSD = Decimal('0.0') 
qty_asks_g_COTIBUSD = Decimal('0.0') 
stepSize_g_COTIBUSD = Decimal('1.0') 


def on_message_COTIBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_COTIBUSD = 'COTIBUSD' 
	price_bids_c_l_COTIBUSD = data['b'] 
	qty_bids_c_l_COTIBUSD = data['B'] 
	price_asks_c_l_COTIBUSD = data['a'] 
	qty_asks_c_l_COTIBUSD = data['A'] 

	global symbol_g_COTIBUSD 
	global price_bids_g_COTIBUSD 
	global qty_bids_g_COTIBUSD 
	global price_asks_g_COTIBUSD 
	global qty_asks_g_COTIBUSD 

	symbol_g_COTIBUSD = symbol_c_l_COTIBUSD 
	price_bids_g_COTIBUSD = Decimal(price_bids_c_l_COTIBUSD) 
	qty_bids_g_COTIBUSD = Decimal(qty_bids_c_l_COTIBUSD) 
	price_asks_g_COTIBUSD = Decimal(price_asks_c_l_COTIBUSD) 
	qty_asks_g_COTIBUSD = Decimal(qty_asks_c_l_COTIBUSD) 


def loop_COTIBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cotibusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_COTIBUSD) 
	ws.run_forever() 


Thread(target=loop_COTIBUSD).start() 
symbol_g_SCBUSD = 'SCBUSD' 
price_bids_g_SCBUSD = Decimal('0.0') 
qty_bids_g_SCBUSD = Decimal('0.0') 
price_asks_g_SCBUSD = Decimal('0.0') 
qty_asks_g_SCBUSD = Decimal('0.0') 
stepSize_g_SCBUSD = Decimal('1.0') 


def on_message_SCBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SCBUSD = 'SCBUSD' 
	price_bids_c_l_SCBUSD = data['b'] 
	qty_bids_c_l_SCBUSD = data['B'] 
	price_asks_c_l_SCBUSD = data['a'] 
	qty_asks_c_l_SCBUSD = data['A'] 

	global symbol_g_SCBUSD 
	global price_bids_g_SCBUSD 
	global qty_bids_g_SCBUSD 
	global price_asks_g_SCBUSD 
	global qty_asks_g_SCBUSD 

	symbol_g_SCBUSD = symbol_c_l_SCBUSD 
	price_bids_g_SCBUSD = Decimal(price_bids_c_l_SCBUSD) 
	qty_bids_g_SCBUSD = Decimal(qty_bids_c_l_SCBUSD) 
	price_asks_g_SCBUSD = Decimal(price_asks_c_l_SCBUSD) 
	qty_asks_g_SCBUSD = Decimal(qty_asks_c_l_SCBUSD) 


def loop_SCBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/scbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SCBUSD) 
	ws.run_forever() 


Thread(target=loop_SCBUSD).start() 
symbol_g_CHRBUSD = 'CHRBUSD' 
price_bids_g_CHRBUSD = Decimal('0.0') 
qty_bids_g_CHRBUSD = Decimal('0.0') 
price_asks_g_CHRBUSD = Decimal('0.0') 
qty_asks_g_CHRBUSD = Decimal('0.0') 
stepSize_g_CHRBUSD = Decimal('1.0') 


def on_message_CHRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHRBUSD = 'CHRBUSD' 
	price_bids_c_l_CHRBUSD = data['b'] 
	qty_bids_c_l_CHRBUSD = data['B'] 
	price_asks_c_l_CHRBUSD = data['a'] 
	qty_asks_c_l_CHRBUSD = data['A'] 

	global symbol_g_CHRBUSD 
	global price_bids_g_CHRBUSD 
	global qty_bids_g_CHRBUSD 
	global price_asks_g_CHRBUSD 
	global qty_asks_g_CHRBUSD 

	symbol_g_CHRBUSD = symbol_c_l_CHRBUSD 
	price_bids_g_CHRBUSD = Decimal(price_bids_c_l_CHRBUSD) 
	qty_bids_g_CHRBUSD = Decimal(qty_bids_c_l_CHRBUSD) 
	price_asks_g_CHRBUSD = Decimal(price_asks_c_l_CHRBUSD) 
	qty_asks_g_CHRBUSD = Decimal(qty_asks_c_l_CHRBUSD) 


def loop_CHRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHRBUSD) 
	ws.run_forever() 


Thread(target=loop_CHRBUSD).start() 
symbol_g_STMXBUSD = 'STMXBUSD' 
price_bids_g_STMXBUSD = Decimal('0.0') 
qty_bids_g_STMXBUSD = Decimal('0.0') 
price_asks_g_STMXBUSD = Decimal('0.0') 
qty_asks_g_STMXBUSD = Decimal('0.0') 
stepSize_g_STMXBUSD = Decimal('1.0') 


def on_message_STMXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STMXBUSD = 'STMXBUSD' 
	price_bids_c_l_STMXBUSD = data['b'] 
	qty_bids_c_l_STMXBUSD = data['B'] 
	price_asks_c_l_STMXBUSD = data['a'] 
	qty_asks_c_l_STMXBUSD = data['A'] 

	global symbol_g_STMXBUSD 
	global price_bids_g_STMXBUSD 
	global qty_bids_g_STMXBUSD 
	global price_asks_g_STMXBUSD 
	global qty_asks_g_STMXBUSD 

	symbol_g_STMXBUSD = symbol_c_l_STMXBUSD 
	price_bids_g_STMXBUSD = Decimal(price_bids_c_l_STMXBUSD) 
	qty_bids_g_STMXBUSD = Decimal(qty_bids_c_l_STMXBUSD) 
	price_asks_g_STMXBUSD = Decimal(price_asks_c_l_STMXBUSD) 
	qty_asks_g_STMXBUSD = Decimal(qty_asks_c_l_STMXBUSD) 


def loop_STMXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/stmxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STMXBUSD) 
	ws.run_forever() 


Thread(target=loop_STMXBUSD).start() 
symbol_g_ERNBUSD = 'ERNBUSD' 
price_bids_g_ERNBUSD = Decimal('0.0') 
qty_bids_g_ERNBUSD = Decimal('0.0') 
price_asks_g_ERNBUSD = Decimal('0.0') 
qty_asks_g_ERNBUSD = Decimal('0.0') 
stepSize_g_ERNBUSD = Decimal('0.1') 


def on_message_ERNBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ERNBUSD = 'ERNBUSD' 
	price_bids_c_l_ERNBUSD = data['b'] 
	qty_bids_c_l_ERNBUSD = data['B'] 
	price_asks_c_l_ERNBUSD = data['a'] 
	qty_asks_c_l_ERNBUSD = data['A'] 

	global symbol_g_ERNBUSD 
	global price_bids_g_ERNBUSD 
	global qty_bids_g_ERNBUSD 
	global price_asks_g_ERNBUSD 
	global qty_asks_g_ERNBUSD 

	symbol_g_ERNBUSD = symbol_c_l_ERNBUSD 
	price_bids_g_ERNBUSD = Decimal(price_bids_c_l_ERNBUSD) 
	qty_bids_g_ERNBUSD = Decimal(qty_bids_c_l_ERNBUSD) 
	price_asks_g_ERNBUSD = Decimal(price_asks_c_l_ERNBUSD) 
	qty_asks_g_ERNBUSD = Decimal(qty_asks_c_l_ERNBUSD) 


def loop_ERNBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ernbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ERNBUSD) 
	ws.run_forever() 


Thread(target=loop_ERNBUSD).start() 
symbol_g_KLAYBUSD = 'KLAYBUSD' 
price_bids_g_KLAYBUSD = Decimal('0.0') 
qty_bids_g_KLAYBUSD = Decimal('0.0') 
price_asks_g_KLAYBUSD = Decimal('0.0') 
qty_asks_g_KLAYBUSD = Decimal('0.0') 
stepSize_g_KLAYBUSD = Decimal('0.1') 


def on_message_KLAYBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KLAYBUSD = 'KLAYBUSD' 
	price_bids_c_l_KLAYBUSD = data['b'] 
	qty_bids_c_l_KLAYBUSD = data['B'] 
	price_asks_c_l_KLAYBUSD = data['a'] 
	qty_asks_c_l_KLAYBUSD = data['A'] 

	global symbol_g_KLAYBUSD 
	global price_bids_g_KLAYBUSD 
	global qty_bids_g_KLAYBUSD 
	global price_asks_g_KLAYBUSD 
	global qty_asks_g_KLAYBUSD 

	symbol_g_KLAYBUSD = symbol_c_l_KLAYBUSD 
	price_bids_g_KLAYBUSD = Decimal(price_bids_c_l_KLAYBUSD) 
	qty_bids_g_KLAYBUSD = Decimal(qty_bids_c_l_KLAYBUSD) 
	price_asks_g_KLAYBUSD = Decimal(price_asks_c_l_KLAYBUSD) 
	qty_asks_g_KLAYBUSD = Decimal(qty_asks_c_l_KLAYBUSD) 


def loop_KLAYBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/klaybusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KLAYBUSD) 
	ws.run_forever() 


Thread(target=loop_KLAYBUSD).start() 
symbol_g_UTKBUSD = 'UTKBUSD' 
price_bids_g_UTKBUSD = Decimal('0.0') 
qty_bids_g_UTKBUSD = Decimal('0.0') 
price_asks_g_UTKBUSD = Decimal('0.0') 
qty_asks_g_UTKBUSD = Decimal('0.0') 
stepSize_g_UTKBUSD = Decimal('1.0') 


def on_message_UTKBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UTKBUSD = 'UTKBUSD' 
	price_bids_c_l_UTKBUSD = data['b'] 
	qty_bids_c_l_UTKBUSD = data['B'] 
	price_asks_c_l_UTKBUSD = data['a'] 
	qty_asks_c_l_UTKBUSD = data['A'] 

	global symbol_g_UTKBUSD 
	global price_bids_g_UTKBUSD 
	global qty_bids_g_UTKBUSD 
	global price_asks_g_UTKBUSD 
	global qty_asks_g_UTKBUSD 

	symbol_g_UTKBUSD = symbol_c_l_UTKBUSD 
	price_bids_g_UTKBUSD = Decimal(price_bids_c_l_UTKBUSD) 
	qty_bids_g_UTKBUSD = Decimal(qty_bids_c_l_UTKBUSD) 
	price_asks_g_UTKBUSD = Decimal(price_asks_c_l_UTKBUSD) 
	qty_asks_g_UTKBUSD = Decimal(qty_asks_c_l_UTKBUSD) 


def loop_UTKBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/utkbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UTKBUSD) 
	ws.run_forever() 


Thread(target=loop_UTKBUSD).start() 
symbol_g_IOTXBUSD = 'IOTXBUSD' 
price_bids_g_IOTXBUSD = Decimal('0.0') 
qty_bids_g_IOTXBUSD = Decimal('0.0') 
price_asks_g_IOTXBUSD = Decimal('0.0') 
qty_asks_g_IOTXBUSD = Decimal('0.0') 
stepSize_g_IOTXBUSD = Decimal('1.0') 


def on_message_IOTXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IOTXBUSD = 'IOTXBUSD' 
	price_bids_c_l_IOTXBUSD = data['b'] 
	qty_bids_c_l_IOTXBUSD = data['B'] 
	price_asks_c_l_IOTXBUSD = data['a'] 
	qty_asks_c_l_IOTXBUSD = data['A'] 

	global symbol_g_IOTXBUSD 
	global price_bids_g_IOTXBUSD 
	global qty_bids_g_IOTXBUSD 
	global price_asks_g_IOTXBUSD 
	global qty_asks_g_IOTXBUSD 

	symbol_g_IOTXBUSD = symbol_c_l_IOTXBUSD 
	price_bids_g_IOTXBUSD = Decimal(price_bids_c_l_IOTXBUSD) 
	qty_bids_g_IOTXBUSD = Decimal(qty_bids_c_l_IOTXBUSD) 
	price_asks_g_IOTXBUSD = Decimal(price_asks_c_l_IOTXBUSD) 
	qty_asks_g_IOTXBUSD = Decimal(qty_asks_c_l_IOTXBUSD) 


def loop_IOTXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/iotxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IOTXBUSD) 
	ws.run_forever() 


Thread(target=loop_IOTXBUSD).start() 
symbol_g_BONDBUSD = 'BONDBUSD' 
price_bids_g_BONDBUSD = Decimal('0.0') 
qty_bids_g_BONDBUSD = Decimal('0.0') 
price_asks_g_BONDBUSD = Decimal('0.0') 
qty_asks_g_BONDBUSD = Decimal('0.0') 
stepSize_g_BONDBUSD = Decimal('0.01') 


def on_message_BONDBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BONDBUSD = 'BONDBUSD' 
	price_bids_c_l_BONDBUSD = data['b'] 
	qty_bids_c_l_BONDBUSD = data['B'] 
	price_asks_c_l_BONDBUSD = data['a'] 
	qty_asks_c_l_BONDBUSD = data['A'] 

	global symbol_g_BONDBUSD 
	global price_bids_g_BONDBUSD 
	global qty_bids_g_BONDBUSD 
	global price_asks_g_BONDBUSD 
	global qty_asks_g_BONDBUSD 

	symbol_g_BONDBUSD = symbol_c_l_BONDBUSD 
	price_bids_g_BONDBUSD = Decimal(price_bids_c_l_BONDBUSD) 
	qty_bids_g_BONDBUSD = Decimal(qty_bids_c_l_BONDBUSD) 
	price_asks_g_BONDBUSD = Decimal(price_asks_c_l_BONDBUSD) 
	qty_asks_g_BONDBUSD = Decimal(qty_asks_c_l_BONDBUSD) 


def loop_BONDBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bondbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BONDBUSD) 
	ws.run_forever() 


Thread(target=loop_BONDBUSD).start() 
symbol_g_MLNBUSD = 'MLNBUSD' 
price_bids_g_MLNBUSD = Decimal('0.0') 
qty_bids_g_MLNBUSD = Decimal('0.0') 
price_asks_g_MLNBUSD = Decimal('0.0') 
qty_asks_g_MLNBUSD = Decimal('0.0') 
stepSize_g_MLNBUSD = Decimal('0.001') 


def on_message_MLNBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MLNBUSD = 'MLNBUSD' 
	price_bids_c_l_MLNBUSD = data['b'] 
	qty_bids_c_l_MLNBUSD = data['B'] 
	price_asks_c_l_MLNBUSD = data['a'] 
	qty_asks_c_l_MLNBUSD = data['A'] 

	global symbol_g_MLNBUSD 
	global price_bids_g_MLNBUSD 
	global qty_bids_g_MLNBUSD 
	global price_asks_g_MLNBUSD 
	global qty_asks_g_MLNBUSD 

	symbol_g_MLNBUSD = symbol_c_l_MLNBUSD 
	price_bids_g_MLNBUSD = Decimal(price_bids_c_l_MLNBUSD) 
	qty_bids_g_MLNBUSD = Decimal(qty_bids_c_l_MLNBUSD) 
	price_asks_g_MLNBUSD = Decimal(price_asks_c_l_MLNBUSD) 
	qty_asks_g_MLNBUSD = Decimal(qty_asks_c_l_MLNBUSD) 


def loop_MLNBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mlnbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MLNBUSD) 
	ws.run_forever() 


Thread(target=loop_MLNBUSD).start() 
symbol_g_LTOBUSD = 'LTOBUSD' 
price_bids_g_LTOBUSD = Decimal('0.0') 
qty_bids_g_LTOBUSD = Decimal('0.0') 
price_asks_g_LTOBUSD = Decimal('0.0') 
qty_asks_g_LTOBUSD = Decimal('0.0') 
stepSize_g_LTOBUSD = Decimal('1.0') 


def on_message_LTOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LTOBUSD = 'LTOBUSD' 
	price_bids_c_l_LTOBUSD = data['b'] 
	qty_bids_c_l_LTOBUSD = data['B'] 
	price_asks_c_l_LTOBUSD = data['a'] 
	qty_asks_c_l_LTOBUSD = data['A'] 

	global symbol_g_LTOBUSD 
	global price_bids_g_LTOBUSD 
	global qty_bids_g_LTOBUSD 
	global price_asks_g_LTOBUSD 
	global qty_asks_g_LTOBUSD 

	symbol_g_LTOBUSD = symbol_c_l_LTOBUSD 
	price_bids_g_LTOBUSD = Decimal(price_bids_c_l_LTOBUSD) 
	qty_bids_g_LTOBUSD = Decimal(qty_bids_c_l_LTOBUSD) 
	price_asks_g_LTOBUSD = Decimal(price_asks_c_l_LTOBUSD) 
	qty_asks_g_LTOBUSD = Decimal(qty_asks_c_l_LTOBUSD) 


def loop_LTOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ltobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LTOBUSD) 
	ws.run_forever() 


Thread(target=loop_LTOBUSD).start() 
symbol_g_ADXBUSD = 'ADXBUSD' 
price_bids_g_ADXBUSD = Decimal('0.0') 
qty_bids_g_ADXBUSD = Decimal('0.0') 
price_asks_g_ADXBUSD = Decimal('0.0') 
qty_asks_g_ADXBUSD = Decimal('0.0') 
stepSize_g_ADXBUSD = Decimal('1.0') 


def on_message_ADXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ADXBUSD = 'ADXBUSD' 
	price_bids_c_l_ADXBUSD = data['b'] 
	qty_bids_c_l_ADXBUSD = data['B'] 
	price_asks_c_l_ADXBUSD = data['a'] 
	qty_asks_c_l_ADXBUSD = data['A'] 

	global symbol_g_ADXBUSD 
	global price_bids_g_ADXBUSD 
	global qty_bids_g_ADXBUSD 
	global price_asks_g_ADXBUSD 
	global qty_asks_g_ADXBUSD 

	symbol_g_ADXBUSD = symbol_c_l_ADXBUSD 
	price_bids_g_ADXBUSD = Decimal(price_bids_c_l_ADXBUSD) 
	qty_bids_g_ADXBUSD = Decimal(qty_bids_c_l_ADXBUSD) 
	price_asks_g_ADXBUSD = Decimal(price_asks_c_l_ADXBUSD) 
	qty_asks_g_ADXBUSD = Decimal(qty_asks_c_l_ADXBUSD) 


def loop_ADXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/adxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ADXBUSD) 
	ws.run_forever() 


Thread(target=loop_ADXBUSD).start() 
symbol_g_QUICKBUSD = 'QUICKBUSD' 
price_bids_g_QUICKBUSD = Decimal('0.0') 
qty_bids_g_QUICKBUSD = Decimal('0.0') 
price_asks_g_QUICKBUSD = Decimal('0.0') 
qty_asks_g_QUICKBUSD = Decimal('0.0') 
stepSize_g_QUICKBUSD = Decimal('0.001') 


def on_message_QUICKBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QUICKBUSD = 'QUICKBUSD' 
	price_bids_c_l_QUICKBUSD = data['b'] 
	qty_bids_c_l_QUICKBUSD = data['B'] 
	price_asks_c_l_QUICKBUSD = data['a'] 
	qty_asks_c_l_QUICKBUSD = data['A'] 

	global symbol_g_QUICKBUSD 
	global price_bids_g_QUICKBUSD 
	global qty_bids_g_QUICKBUSD 
	global price_asks_g_QUICKBUSD 
	global qty_asks_g_QUICKBUSD 

	symbol_g_QUICKBUSD = symbol_c_l_QUICKBUSD 
	price_bids_g_QUICKBUSD = Decimal(price_bids_c_l_QUICKBUSD) 
	qty_bids_g_QUICKBUSD = Decimal(qty_bids_c_l_QUICKBUSD) 
	price_asks_g_QUICKBUSD = Decimal(price_asks_c_l_QUICKBUSD) 
	qty_asks_g_QUICKBUSD = Decimal(qty_asks_c_l_QUICKBUSD) 


def loop_QUICKBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/quickbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QUICKBUSD) 
	ws.run_forever() 


Thread(target=loop_QUICKBUSD).start() 
symbol_g_C98BUSD = 'C98BUSD' 
price_bids_g_C98BUSD = Decimal('0.0') 
qty_bids_g_C98BUSD = Decimal('0.0') 
price_asks_g_C98BUSD = Decimal('0.0') 
qty_asks_g_C98BUSD = Decimal('0.0') 
stepSize_g_C98BUSD = Decimal('0.1') 


def on_message_C98BUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_C98BUSD = 'C98BUSD' 
	price_bids_c_l_C98BUSD = data['b'] 
	qty_bids_c_l_C98BUSD = data['B'] 
	price_asks_c_l_C98BUSD = data['a'] 
	qty_asks_c_l_C98BUSD = data['A'] 

	global symbol_g_C98BUSD 
	global price_bids_g_C98BUSD 
	global qty_bids_g_C98BUSD 
	global price_asks_g_C98BUSD 
	global qty_asks_g_C98BUSD 

	symbol_g_C98BUSD = symbol_c_l_C98BUSD 
	price_bids_g_C98BUSD = Decimal(price_bids_c_l_C98BUSD) 
	qty_bids_g_C98BUSD = Decimal(qty_bids_c_l_C98BUSD) 
	price_asks_g_C98BUSD = Decimal(price_asks_c_l_C98BUSD) 
	qty_asks_g_C98BUSD = Decimal(qty_asks_c_l_C98BUSD) 


def loop_C98BUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/c98busd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_C98BUSD) 
	ws.run_forever() 


Thread(target=loop_C98BUSD).start() 
symbol_g_CLVBUSD = 'CLVBUSD' 
price_bids_g_CLVBUSD = Decimal('0.0') 
qty_bids_g_CLVBUSD = Decimal('0.0') 
price_asks_g_CLVBUSD = Decimal('0.0') 
qty_asks_g_CLVBUSD = Decimal('0.0') 
stepSize_g_CLVBUSD = Decimal('0.1') 


def on_message_CLVBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CLVBUSD = 'CLVBUSD' 
	price_bids_c_l_CLVBUSD = data['b'] 
	qty_bids_c_l_CLVBUSD = data['B'] 
	price_asks_c_l_CLVBUSD = data['a'] 
	qty_asks_c_l_CLVBUSD = data['A'] 

	global symbol_g_CLVBUSD 
	global price_bids_g_CLVBUSD 
	global qty_bids_g_CLVBUSD 
	global price_asks_g_CLVBUSD 
	global qty_asks_g_CLVBUSD 

	symbol_g_CLVBUSD = symbol_c_l_CLVBUSD 
	price_bids_g_CLVBUSD = Decimal(price_bids_c_l_CLVBUSD) 
	qty_bids_g_CLVBUSD = Decimal(qty_bids_c_l_CLVBUSD) 
	price_asks_g_CLVBUSD = Decimal(price_asks_c_l_CLVBUSD) 
	qty_asks_g_CLVBUSD = Decimal(qty_asks_c_l_CLVBUSD) 


def loop_CLVBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/clvbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CLVBUSD) 
	ws.run_forever() 


Thread(target=loop_CLVBUSD).start() 
symbol_g_QNTBUSD = 'QNTBUSD' 
price_bids_g_QNTBUSD = Decimal('0.0') 
qty_bids_g_QNTBUSD = Decimal('0.0') 
price_asks_g_QNTBUSD = Decimal('0.0') 
qty_asks_g_QNTBUSD = Decimal('0.0') 
stepSize_g_QNTBUSD = Decimal('0.001') 


def on_message_QNTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QNTBUSD = 'QNTBUSD' 
	price_bids_c_l_QNTBUSD = data['b'] 
	qty_bids_c_l_QNTBUSD = data['B'] 
	price_asks_c_l_QNTBUSD = data['a'] 
	qty_asks_c_l_QNTBUSD = data['A'] 

	global symbol_g_QNTBUSD 
	global price_bids_g_QNTBUSD 
	global qty_bids_g_QNTBUSD 
	global price_asks_g_QNTBUSD 
	global qty_asks_g_QNTBUSD 

	symbol_g_QNTBUSD = symbol_c_l_QNTBUSD 
	price_bids_g_QNTBUSD = Decimal(price_bids_c_l_QNTBUSD) 
	qty_bids_g_QNTBUSD = Decimal(qty_bids_c_l_QNTBUSD) 
	price_asks_g_QNTBUSD = Decimal(price_asks_c_l_QNTBUSD) 
	qty_asks_g_QNTBUSD = Decimal(qty_asks_c_l_QNTBUSD) 


def loop_QNTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/qntbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QNTBUSD) 
	ws.run_forever() 


Thread(target=loop_QNTBUSD).start() 
symbol_g_FLOWBUSD = 'FLOWBUSD' 
price_bids_g_FLOWBUSD = Decimal('0.0') 
qty_bids_g_FLOWBUSD = Decimal('0.0') 
price_asks_g_FLOWBUSD = Decimal('0.0') 
qty_asks_g_FLOWBUSD = Decimal('0.0') 
stepSize_g_FLOWBUSD = Decimal('0.01') 


def on_message_FLOWBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FLOWBUSD = 'FLOWBUSD' 
	price_bids_c_l_FLOWBUSD = data['b'] 
	qty_bids_c_l_FLOWBUSD = data['B'] 
	price_asks_c_l_FLOWBUSD = data['a'] 
	qty_asks_c_l_FLOWBUSD = data['A'] 

	global symbol_g_FLOWBUSD 
	global price_bids_g_FLOWBUSD 
	global qty_bids_g_FLOWBUSD 
	global price_asks_g_FLOWBUSD 
	global qty_asks_g_FLOWBUSD 

	symbol_g_FLOWBUSD = symbol_c_l_FLOWBUSD 
	price_bids_g_FLOWBUSD = Decimal(price_bids_c_l_FLOWBUSD) 
	qty_bids_g_FLOWBUSD = Decimal(qty_bids_c_l_FLOWBUSD) 
	price_asks_g_FLOWBUSD = Decimal(price_asks_c_l_FLOWBUSD) 
	qty_asks_g_FLOWBUSD = Decimal(qty_asks_c_l_FLOWBUSD) 


def loop_FLOWBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/flowbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FLOWBUSD) 
	ws.run_forever() 


Thread(target=loop_FLOWBUSD).start() 
symbol_g_XECBUSD = 'XECBUSD' 
price_bids_g_XECBUSD = Decimal('0.0') 
qty_bids_g_XECBUSD = Decimal('0.0') 
price_asks_g_XECBUSD = Decimal('0.0') 
qty_asks_g_XECBUSD = Decimal('0.0') 
stepSize_g_XECBUSD = Decimal('1.0') 


def on_message_XECBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XECBUSD = 'XECBUSD' 
	price_bids_c_l_XECBUSD = data['b'] 
	qty_bids_c_l_XECBUSD = data['B'] 
	price_asks_c_l_XECBUSD = data['a'] 
	qty_asks_c_l_XECBUSD = data['A'] 

	global symbol_g_XECBUSD 
	global price_bids_g_XECBUSD 
	global qty_bids_g_XECBUSD 
	global price_asks_g_XECBUSD 
	global qty_asks_g_XECBUSD 

	symbol_g_XECBUSD = symbol_c_l_XECBUSD 
	price_bids_g_XECBUSD = Decimal(price_bids_c_l_XECBUSD) 
	qty_bids_g_XECBUSD = Decimal(qty_bids_c_l_XECBUSD) 
	price_asks_g_XECBUSD = Decimal(price_asks_c_l_XECBUSD) 
	qty_asks_g_XECBUSD = Decimal(qty_asks_c_l_XECBUSD) 


def loop_XECBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xecbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XECBUSD) 
	ws.run_forever() 


Thread(target=loop_XECBUSD).start() 
symbol_g_MINABUSD = 'MINABUSD' 
price_bids_g_MINABUSD = Decimal('0.0') 
qty_bids_g_MINABUSD = Decimal('0.0') 
price_asks_g_MINABUSD = Decimal('0.0') 
qty_asks_g_MINABUSD = Decimal('0.0') 
stepSize_g_MINABUSD = Decimal('0.1') 


def on_message_MINABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MINABUSD = 'MINABUSD' 
	price_bids_c_l_MINABUSD = data['b'] 
	qty_bids_c_l_MINABUSD = data['B'] 
	price_asks_c_l_MINABUSD = data['a'] 
	qty_asks_c_l_MINABUSD = data['A'] 

	global symbol_g_MINABUSD 
	global price_bids_g_MINABUSD 
	global qty_bids_g_MINABUSD 
	global price_asks_g_MINABUSD 
	global qty_asks_g_MINABUSD 

	symbol_g_MINABUSD = symbol_c_l_MINABUSD 
	price_bids_g_MINABUSD = Decimal(price_bids_c_l_MINABUSD) 
	qty_bids_g_MINABUSD = Decimal(qty_bids_c_l_MINABUSD) 
	price_asks_g_MINABUSD = Decimal(price_asks_c_l_MINABUSD) 
	qty_asks_g_MINABUSD = Decimal(qty_asks_c_l_MINABUSD) 


def loop_MINABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/minabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MINABUSD) 
	ws.run_forever() 


Thread(target=loop_MINABUSD).start() 
symbol_g_RAYBUSD = 'RAYBUSD' 
price_bids_g_RAYBUSD = Decimal('0.0') 
qty_bids_g_RAYBUSD = Decimal('0.0') 
price_asks_g_RAYBUSD = Decimal('0.0') 
qty_asks_g_RAYBUSD = Decimal('0.0') 
stepSize_g_RAYBUSD = Decimal('0.1') 


def on_message_RAYBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RAYBUSD = 'RAYBUSD' 
	price_bids_c_l_RAYBUSD = data['b'] 
	qty_bids_c_l_RAYBUSD = data['B'] 
	price_asks_c_l_RAYBUSD = data['a'] 
	qty_asks_c_l_RAYBUSD = data['A'] 

	global symbol_g_RAYBUSD 
	global price_bids_g_RAYBUSD 
	global qty_bids_g_RAYBUSD 
	global price_asks_g_RAYBUSD 
	global qty_asks_g_RAYBUSD 

	symbol_g_RAYBUSD = symbol_c_l_RAYBUSD 
	price_bids_g_RAYBUSD = Decimal(price_bids_c_l_RAYBUSD) 
	qty_bids_g_RAYBUSD = Decimal(qty_bids_c_l_RAYBUSD) 
	price_asks_g_RAYBUSD = Decimal(price_asks_c_l_RAYBUSD) 
	qty_asks_g_RAYBUSD = Decimal(qty_asks_c_l_RAYBUSD) 


def loop_RAYBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/raybusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RAYBUSD) 
	ws.run_forever() 


Thread(target=loop_RAYBUSD).start() 
symbol_g_FARMBUSD = 'FARMBUSD' 
price_bids_g_FARMBUSD = Decimal('0.0') 
qty_bids_g_FARMBUSD = Decimal('0.0') 
price_asks_g_FARMBUSD = Decimal('0.0') 
qty_asks_g_FARMBUSD = Decimal('0.0') 
stepSize_g_FARMBUSD = Decimal('0.001') 


def on_message_FARMBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FARMBUSD = 'FARMBUSD' 
	price_bids_c_l_FARMBUSD = data['b'] 
	qty_bids_c_l_FARMBUSD = data['B'] 
	price_asks_c_l_FARMBUSD = data['a'] 
	qty_asks_c_l_FARMBUSD = data['A'] 

	global symbol_g_FARMBUSD 
	global price_bids_g_FARMBUSD 
	global qty_bids_g_FARMBUSD 
	global price_asks_g_FARMBUSD 
	global qty_asks_g_FARMBUSD 

	symbol_g_FARMBUSD = symbol_c_l_FARMBUSD 
	price_bids_g_FARMBUSD = Decimal(price_bids_c_l_FARMBUSD) 
	qty_bids_g_FARMBUSD = Decimal(qty_bids_c_l_FARMBUSD) 
	price_asks_g_FARMBUSD = Decimal(price_asks_c_l_FARMBUSD) 
	qty_asks_g_FARMBUSD = Decimal(qty_asks_c_l_FARMBUSD) 


def loop_FARMBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/farmbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FARMBUSD) 
	ws.run_forever() 


Thread(target=loop_FARMBUSD).start() 
symbol_g_ALPACABUSD = 'ALPACABUSD' 
price_bids_g_ALPACABUSD = Decimal('0.0') 
qty_bids_g_ALPACABUSD = Decimal('0.0') 
price_asks_g_ALPACABUSD = Decimal('0.0') 
qty_asks_g_ALPACABUSD = Decimal('0.0') 
stepSize_g_ALPACABUSD = Decimal('0.1') 


def on_message_ALPACABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALPACABUSD = 'ALPACABUSD' 
	price_bids_c_l_ALPACABUSD = data['b'] 
	qty_bids_c_l_ALPACABUSD = data['B'] 
	price_asks_c_l_ALPACABUSD = data['a'] 
	qty_asks_c_l_ALPACABUSD = data['A'] 

	global symbol_g_ALPACABUSD 
	global price_bids_g_ALPACABUSD 
	global qty_bids_g_ALPACABUSD 
	global price_asks_g_ALPACABUSD 
	global qty_asks_g_ALPACABUSD 

	symbol_g_ALPACABUSD = symbol_c_l_ALPACABUSD 
	price_bids_g_ALPACABUSD = Decimal(price_bids_c_l_ALPACABUSD) 
	qty_bids_g_ALPACABUSD = Decimal(qty_bids_c_l_ALPACABUSD) 
	price_asks_g_ALPACABUSD = Decimal(price_asks_c_l_ALPACABUSD) 
	qty_asks_g_ALPACABUSD = Decimal(qty_asks_c_l_ALPACABUSD) 


def loop_ALPACABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alpacabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALPACABUSD) 
	ws.run_forever() 


Thread(target=loop_ALPACABUSD).start() 
symbol_g_ORNBUSD = 'ORNBUSD' 
price_bids_g_ORNBUSD = Decimal('0.0') 
qty_bids_g_ORNBUSD = Decimal('0.0') 
price_asks_g_ORNBUSD = Decimal('0.0') 
qty_asks_g_ORNBUSD = Decimal('0.0') 
stepSize_g_ORNBUSD = Decimal('0.1') 


def on_message_ORNBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ORNBUSD = 'ORNBUSD' 
	price_bids_c_l_ORNBUSD = data['b'] 
	qty_bids_c_l_ORNBUSD = data['B'] 
	price_asks_c_l_ORNBUSD = data['a'] 
	qty_asks_c_l_ORNBUSD = data['A'] 

	global symbol_g_ORNBUSD 
	global price_bids_g_ORNBUSD 
	global qty_bids_g_ORNBUSD 
	global price_asks_g_ORNBUSD 
	global qty_asks_g_ORNBUSD 

	symbol_g_ORNBUSD = symbol_c_l_ORNBUSD 
	price_bids_g_ORNBUSD = Decimal(price_bids_c_l_ORNBUSD) 
	qty_bids_g_ORNBUSD = Decimal(qty_bids_c_l_ORNBUSD) 
	price_asks_g_ORNBUSD = Decimal(price_asks_c_l_ORNBUSD) 
	qty_asks_g_ORNBUSD = Decimal(qty_asks_c_l_ORNBUSD) 


def loop_ORNBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ornbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ORNBUSD) 
	ws.run_forever() 


Thread(target=loop_ORNBUSD).start() 
symbol_g_MBOXBUSD = 'MBOXBUSD' 
price_bids_g_MBOXBUSD = Decimal('0.0') 
qty_bids_g_MBOXBUSD = Decimal('0.0') 
price_asks_g_MBOXBUSD = Decimal('0.0') 
qty_asks_g_MBOXBUSD = Decimal('0.0') 
stepSize_g_MBOXBUSD = Decimal('0.1') 


def on_message_MBOXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MBOXBUSD = 'MBOXBUSD' 
	price_bids_c_l_MBOXBUSD = data['b'] 
	qty_bids_c_l_MBOXBUSD = data['B'] 
	price_asks_c_l_MBOXBUSD = data['a'] 
	qty_asks_c_l_MBOXBUSD = data['A'] 

	global symbol_g_MBOXBUSD 
	global price_bids_g_MBOXBUSD 
	global qty_bids_g_MBOXBUSD 
	global price_asks_g_MBOXBUSD 
	global qty_asks_g_MBOXBUSD 

	symbol_g_MBOXBUSD = symbol_c_l_MBOXBUSD 
	price_bids_g_MBOXBUSD = Decimal(price_bids_c_l_MBOXBUSD) 
	qty_bids_g_MBOXBUSD = Decimal(qty_bids_c_l_MBOXBUSD) 
	price_asks_g_MBOXBUSD = Decimal(price_asks_c_l_MBOXBUSD) 
	qty_asks_g_MBOXBUSD = Decimal(qty_asks_c_l_MBOXBUSD) 


def loop_MBOXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mboxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MBOXBUSD) 
	ws.run_forever() 


Thread(target=loop_MBOXBUSD).start() 
symbol_g_WAXPBUSD = 'WAXPBUSD' 
price_bids_g_WAXPBUSD = Decimal('0.0') 
qty_bids_g_WAXPBUSD = Decimal('0.0') 
price_asks_g_WAXPBUSD = Decimal('0.0') 
qty_asks_g_WAXPBUSD = Decimal('0.0') 
stepSize_g_WAXPBUSD = Decimal('1.0') 


def on_message_WAXPBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WAXPBUSD = 'WAXPBUSD' 
	price_bids_c_l_WAXPBUSD = data['b'] 
	qty_bids_c_l_WAXPBUSD = data['B'] 
	price_asks_c_l_WAXPBUSD = data['a'] 
	qty_asks_c_l_WAXPBUSD = data['A'] 

	global symbol_g_WAXPBUSD 
	global price_bids_g_WAXPBUSD 
	global qty_bids_g_WAXPBUSD 
	global price_asks_g_WAXPBUSD 
	global qty_asks_g_WAXPBUSD 

	symbol_g_WAXPBUSD = symbol_c_l_WAXPBUSD 
	price_bids_g_WAXPBUSD = Decimal(price_bids_c_l_WAXPBUSD) 
	qty_bids_g_WAXPBUSD = Decimal(qty_bids_c_l_WAXPBUSD) 
	price_asks_g_WAXPBUSD = Decimal(price_asks_c_l_WAXPBUSD) 
	qty_asks_g_WAXPBUSD = Decimal(qty_asks_c_l_WAXPBUSD) 


def loop_WAXPBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/waxpbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WAXPBUSD) 
	ws.run_forever() 


Thread(target=loop_WAXPBUSD).start() 
symbol_g_OGNBUSD = 'OGNBUSD' 
price_bids_g_OGNBUSD = Decimal('0.0') 
qty_bids_g_OGNBUSD = Decimal('0.0') 
price_asks_g_OGNBUSD = Decimal('0.0') 
qty_asks_g_OGNBUSD = Decimal('0.0') 
stepSize_g_OGNBUSD = Decimal('0.1') 


def on_message_OGNBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OGNBUSD = 'OGNBUSD' 
	price_bids_c_l_OGNBUSD = data['b'] 
	qty_bids_c_l_OGNBUSD = data['B'] 
	price_asks_c_l_OGNBUSD = data['a'] 
	qty_asks_c_l_OGNBUSD = data['A'] 

	global symbol_g_OGNBUSD 
	global price_bids_g_OGNBUSD 
	global qty_bids_g_OGNBUSD 
	global price_asks_g_OGNBUSD 
	global qty_asks_g_OGNBUSD 

	symbol_g_OGNBUSD = symbol_c_l_OGNBUSD 
	price_bids_g_OGNBUSD = Decimal(price_bids_c_l_OGNBUSD) 
	qty_bids_g_OGNBUSD = Decimal(qty_bids_c_l_OGNBUSD) 
	price_asks_g_OGNBUSD = Decimal(price_asks_c_l_OGNBUSD) 
	qty_asks_g_OGNBUSD = Decimal(qty_asks_c_l_OGNBUSD) 


def loop_OGNBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ognbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OGNBUSD) 
	ws.run_forever() 


Thread(target=loop_OGNBUSD).start() 
symbol_g_DYDXBUSD = 'DYDXBUSD' 
price_bids_g_DYDXBUSD = Decimal('0.0') 
qty_bids_g_DYDXBUSD = Decimal('0.0') 
price_asks_g_DYDXBUSD = Decimal('0.0') 
qty_asks_g_DYDXBUSD = Decimal('0.0') 
stepSize_g_DYDXBUSD = Decimal('0.01') 


def on_message_DYDXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DYDXBUSD = 'DYDXBUSD' 
	price_bids_c_l_DYDXBUSD = data['b'] 
	qty_bids_c_l_DYDXBUSD = data['B'] 
	price_asks_c_l_DYDXBUSD = data['a'] 
	qty_asks_c_l_DYDXBUSD = data['A'] 

	global symbol_g_DYDXBUSD 
	global price_bids_g_DYDXBUSD 
	global qty_bids_g_DYDXBUSD 
	global price_asks_g_DYDXBUSD 
	global qty_asks_g_DYDXBUSD 

	symbol_g_DYDXBUSD = symbol_c_l_DYDXBUSD 
	price_bids_g_DYDXBUSD = Decimal(price_bids_c_l_DYDXBUSD) 
	qty_bids_g_DYDXBUSD = Decimal(qty_bids_c_l_DYDXBUSD) 
	price_asks_g_DYDXBUSD = Decimal(price_asks_c_l_DYDXBUSD) 
	qty_asks_g_DYDXBUSD = Decimal(qty_asks_c_l_DYDXBUSD) 


def loop_DYDXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dydxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DYDXBUSD) 
	ws.run_forever() 


Thread(target=loop_DYDXBUSD).start() 
symbol_g_ELFBUSD = 'ELFBUSD' 
price_bids_g_ELFBUSD = Decimal('0.0') 
qty_bids_g_ELFBUSD = Decimal('0.0') 
price_asks_g_ELFBUSD = Decimal('0.0') 
qty_asks_g_ELFBUSD = Decimal('0.0') 
stepSize_g_ELFBUSD = Decimal('0.1') 


def on_message_ELFBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ELFBUSD = 'ELFBUSD' 
	price_bids_c_l_ELFBUSD = data['b'] 
	qty_bids_c_l_ELFBUSD = data['B'] 
	price_asks_c_l_ELFBUSD = data['a'] 
	qty_asks_c_l_ELFBUSD = data['A'] 

	global symbol_g_ELFBUSD 
	global price_bids_g_ELFBUSD 
	global qty_bids_g_ELFBUSD 
	global price_asks_g_ELFBUSD 
	global qty_asks_g_ELFBUSD 

	symbol_g_ELFBUSD = symbol_c_l_ELFBUSD 
	price_bids_g_ELFBUSD = Decimal(price_bids_c_l_ELFBUSD) 
	qty_bids_g_ELFBUSD = Decimal(qty_bids_c_l_ELFBUSD) 
	price_asks_g_ELFBUSD = Decimal(price_asks_c_l_ELFBUSD) 
	qty_asks_g_ELFBUSD = Decimal(qty_asks_c_l_ELFBUSD) 


def loop_ELFBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/elfbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ELFBUSD) 
	ws.run_forever() 


Thread(target=loop_ELFBUSD).start() 
symbol_g_GALABUSD = 'GALABUSD' 
price_bids_g_GALABUSD = Decimal('0.0') 
qty_bids_g_GALABUSD = Decimal('0.0') 
price_asks_g_GALABUSD = Decimal('0.0') 
qty_asks_g_GALABUSD = Decimal('0.0') 
stepSize_g_GALABUSD = Decimal('1.0') 


def on_message_GALABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALABUSD = 'GALABUSD' 
	price_bids_c_l_GALABUSD = data['b'] 
	qty_bids_c_l_GALABUSD = data['B'] 
	price_asks_c_l_GALABUSD = data['a'] 
	qty_asks_c_l_GALABUSD = data['A'] 

	global symbol_g_GALABUSD 
	global price_bids_g_GALABUSD 
	global qty_bids_g_GALABUSD 
	global price_asks_g_GALABUSD 
	global qty_asks_g_GALABUSD 

	symbol_g_GALABUSD = symbol_c_l_GALABUSD 
	price_bids_g_GALABUSD = Decimal(price_bids_c_l_GALABUSD) 
	qty_bids_g_GALABUSD = Decimal(qty_bids_c_l_GALABUSD) 
	price_asks_g_GALABUSD = Decimal(price_asks_c_l_GALABUSD) 
	qty_asks_g_GALABUSD = Decimal(qty_asks_c_l_GALABUSD) 


def loop_GALABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALABUSD) 
	ws.run_forever() 


Thread(target=loop_GALABUSD).start() 
symbol_g_SUNBUSD = 'SUNBUSD' 
price_bids_g_SUNBUSD = Decimal('0.0') 
qty_bids_g_SUNBUSD = Decimal('0.0') 
price_asks_g_SUNBUSD = Decimal('0.0') 
qty_asks_g_SUNBUSD = Decimal('0.0') 
stepSize_g_SUNBUSD = Decimal('1.0') 


def on_message_SUNBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SUNBUSD = 'SUNBUSD' 
	price_bids_c_l_SUNBUSD = data['b'] 
	qty_bids_c_l_SUNBUSD = data['B'] 
	price_asks_c_l_SUNBUSD = data['a'] 
	qty_asks_c_l_SUNBUSD = data['A'] 

	global symbol_g_SUNBUSD 
	global price_bids_g_SUNBUSD 
	global qty_bids_g_SUNBUSD 
	global price_asks_g_SUNBUSD 
	global qty_asks_g_SUNBUSD 

	symbol_g_SUNBUSD = symbol_c_l_SUNBUSD 
	price_bids_g_SUNBUSD = Decimal(price_bids_c_l_SUNBUSD) 
	qty_bids_g_SUNBUSD = Decimal(qty_bids_c_l_SUNBUSD) 
	price_asks_g_SUNBUSD = Decimal(price_asks_c_l_SUNBUSD) 
	qty_asks_g_SUNBUSD = Decimal(qty_asks_c_l_SUNBUSD) 


def loop_SUNBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sunbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SUNBUSD) 
	ws.run_forever() 


Thread(target=loop_SUNBUSD).start() 
symbol_g_ILVBUSD = 'ILVBUSD' 
price_bids_g_ILVBUSD = Decimal('0.0') 
qty_bids_g_ILVBUSD = Decimal('0.0') 
price_asks_g_ILVBUSD = Decimal('0.0') 
qty_asks_g_ILVBUSD = Decimal('0.0') 
stepSize_g_ILVBUSD = Decimal('0.001') 


def on_message_ILVBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ILVBUSD = 'ILVBUSD' 
	price_bids_c_l_ILVBUSD = data['b'] 
	qty_bids_c_l_ILVBUSD = data['B'] 
	price_asks_c_l_ILVBUSD = data['a'] 
	qty_asks_c_l_ILVBUSD = data['A'] 

	global symbol_g_ILVBUSD 
	global price_bids_g_ILVBUSD 
	global qty_bids_g_ILVBUSD 
	global price_asks_g_ILVBUSD 
	global qty_asks_g_ILVBUSD 

	symbol_g_ILVBUSD = symbol_c_l_ILVBUSD 
	price_bids_g_ILVBUSD = Decimal(price_bids_c_l_ILVBUSD) 
	qty_bids_g_ILVBUSD = Decimal(qty_bids_c_l_ILVBUSD) 
	price_asks_g_ILVBUSD = Decimal(price_asks_c_l_ILVBUSD) 
	qty_asks_g_ILVBUSD = Decimal(qty_asks_c_l_ILVBUSD) 


def loop_ILVBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ilvbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ILVBUSD) 
	ws.run_forever() 


Thread(target=loop_ILVBUSD).start() 
symbol_g_RENBUSD = 'RENBUSD' 
price_bids_g_RENBUSD = Decimal('0.0') 
qty_bids_g_RENBUSD = Decimal('0.0') 
price_asks_g_RENBUSD = Decimal('0.0') 
qty_asks_g_RENBUSD = Decimal('0.0') 
stepSize_g_RENBUSD = Decimal('1.0') 


def on_message_RENBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RENBUSD = 'RENBUSD' 
	price_bids_c_l_RENBUSD = data['b'] 
	qty_bids_c_l_RENBUSD = data['B'] 
	price_asks_c_l_RENBUSD = data['a'] 
	qty_asks_c_l_RENBUSD = data['A'] 

	global symbol_g_RENBUSD 
	global price_bids_g_RENBUSD 
	global qty_bids_g_RENBUSD 
	global price_asks_g_RENBUSD 
	global qty_asks_g_RENBUSD 

	symbol_g_RENBUSD = symbol_c_l_RENBUSD 
	price_bids_g_RENBUSD = Decimal(price_bids_c_l_RENBUSD) 
	qty_bids_g_RENBUSD = Decimal(qty_bids_c_l_RENBUSD) 
	price_asks_g_RENBUSD = Decimal(price_asks_c_l_RENBUSD) 
	qty_asks_g_RENBUSD = Decimal(qty_asks_c_l_RENBUSD) 


def loop_RENBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/renbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RENBUSD) 
	ws.run_forever() 


Thread(target=loop_RENBUSD).start() 
symbol_g_YGGBUSD = 'YGGBUSD' 
price_bids_g_YGGBUSD = Decimal('0.0') 
qty_bids_g_YGGBUSD = Decimal('0.0') 
price_asks_g_YGGBUSD = Decimal('0.0') 
qty_asks_g_YGGBUSD = Decimal('0.0') 
stepSize_g_YGGBUSD = Decimal('0.1') 


def on_message_YGGBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_YGGBUSD = 'YGGBUSD' 
	price_bids_c_l_YGGBUSD = data['b'] 
	qty_bids_c_l_YGGBUSD = data['B'] 
	price_asks_c_l_YGGBUSD = data['a'] 
	qty_asks_c_l_YGGBUSD = data['A'] 

	global symbol_g_YGGBUSD 
	global price_bids_g_YGGBUSD 
	global qty_bids_g_YGGBUSD 
	global price_asks_g_YGGBUSD 
	global qty_asks_g_YGGBUSD 

	symbol_g_YGGBUSD = symbol_c_l_YGGBUSD 
	price_bids_g_YGGBUSD = Decimal(price_bids_c_l_YGGBUSD) 
	qty_bids_g_YGGBUSD = Decimal(qty_bids_c_l_YGGBUSD) 
	price_asks_g_YGGBUSD = Decimal(price_asks_c_l_YGGBUSD) 
	qty_asks_g_YGGBUSD = Decimal(qty_asks_c_l_YGGBUSD) 


def loop_YGGBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/yggbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_YGGBUSD) 
	ws.run_forever() 


Thread(target=loop_YGGBUSD).start() 
symbol_g_STXBUSD = 'STXBUSD' 
price_bids_g_STXBUSD = Decimal('0.0') 
qty_bids_g_STXBUSD = Decimal('0.0') 
price_asks_g_STXBUSD = Decimal('0.0') 
qty_asks_g_STXBUSD = Decimal('0.0') 
stepSize_g_STXBUSD = Decimal('0.1') 


def on_message_STXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STXBUSD = 'STXBUSD' 
	price_bids_c_l_STXBUSD = data['b'] 
	qty_bids_c_l_STXBUSD = data['B'] 
	price_asks_c_l_STXBUSD = data['a'] 
	qty_asks_c_l_STXBUSD = data['A'] 

	global symbol_g_STXBUSD 
	global price_bids_g_STXBUSD 
	global qty_bids_g_STXBUSD 
	global price_asks_g_STXBUSD 
	global qty_asks_g_STXBUSD 

	symbol_g_STXBUSD = symbol_c_l_STXBUSD 
	price_bids_g_STXBUSD = Decimal(price_bids_c_l_STXBUSD) 
	qty_bids_g_STXBUSD = Decimal(qty_bids_c_l_STXBUSD) 
	price_asks_g_STXBUSD = Decimal(price_asks_c_l_STXBUSD) 
	qty_asks_g_STXBUSD = Decimal(qty_asks_c_l_STXBUSD) 


def loop_STXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/stxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STXBUSD) 
	ws.run_forever() 


Thread(target=loop_STXBUSD).start() 
symbol_g_ARPABUSD = 'ARPABUSD' 
price_bids_g_ARPABUSD = Decimal('0.0') 
qty_bids_g_ARPABUSD = Decimal('0.0') 
price_asks_g_ARPABUSD = Decimal('0.0') 
qty_asks_g_ARPABUSD = Decimal('0.0') 
stepSize_g_ARPABUSD = Decimal('0.1') 


def on_message_ARPABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ARPABUSD = 'ARPABUSD' 
	price_bids_c_l_ARPABUSD = data['b'] 
	qty_bids_c_l_ARPABUSD = data['B'] 
	price_asks_c_l_ARPABUSD = data['a'] 
	qty_asks_c_l_ARPABUSD = data['A'] 

	global symbol_g_ARPABUSD 
	global price_bids_g_ARPABUSD 
	global qty_bids_g_ARPABUSD 
	global price_asks_g_ARPABUSD 
	global qty_asks_g_ARPABUSD 

	symbol_g_ARPABUSD = symbol_c_l_ARPABUSD 
	price_bids_g_ARPABUSD = Decimal(price_bids_c_l_ARPABUSD) 
	qty_bids_g_ARPABUSD = Decimal(qty_bids_c_l_ARPABUSD) 
	price_asks_g_ARPABUSD = Decimal(price_asks_c_l_ARPABUSD) 
	qty_asks_g_ARPABUSD = Decimal(qty_asks_c_l_ARPABUSD) 


def loop_ARPABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/arpabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ARPABUSD) 
	ws.run_forever() 


Thread(target=loop_ARPABUSD).start() 
symbol_g_LSKBUSD = 'LSKBUSD' 
price_bids_g_LSKBUSD = Decimal('0.0') 
qty_bids_g_LSKBUSD = Decimal('0.0') 
price_asks_g_LSKBUSD = Decimal('0.0') 
qty_asks_g_LSKBUSD = Decimal('0.0') 
stepSize_g_LSKBUSD = Decimal('0.1') 


def on_message_LSKBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LSKBUSD = 'LSKBUSD' 
	price_bids_c_l_LSKBUSD = data['b'] 
	qty_bids_c_l_LSKBUSD = data['B'] 
	price_asks_c_l_LSKBUSD = data['a'] 
	qty_asks_c_l_LSKBUSD = data['A'] 

	global symbol_g_LSKBUSD 
	global price_bids_g_LSKBUSD 
	global qty_bids_g_LSKBUSD 
	global price_asks_g_LSKBUSD 
	global qty_asks_g_LSKBUSD 

	symbol_g_LSKBUSD = symbol_c_l_LSKBUSD 
	price_bids_g_LSKBUSD = Decimal(price_bids_c_l_LSKBUSD) 
	qty_bids_g_LSKBUSD = Decimal(qty_bids_c_l_LSKBUSD) 
	price_asks_g_LSKBUSD = Decimal(price_asks_c_l_LSKBUSD) 
	qty_asks_g_LSKBUSD = Decimal(qty_asks_c_l_LSKBUSD) 


def loop_LSKBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lskbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LSKBUSD) 
	ws.run_forever() 


Thread(target=loop_LSKBUSD).start() 
symbol_g_FIDABUSD = 'FIDABUSD' 
price_bids_g_FIDABUSD = Decimal('0.0') 
qty_bids_g_FIDABUSD = Decimal('0.0') 
price_asks_g_FIDABUSD = Decimal('0.0') 
qty_asks_g_FIDABUSD = Decimal('0.0') 
stepSize_g_FIDABUSD = Decimal('0.1') 


def on_message_FIDABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FIDABUSD = 'FIDABUSD' 
	price_bids_c_l_FIDABUSD = data['b'] 
	qty_bids_c_l_FIDABUSD = data['B'] 
	price_asks_c_l_FIDABUSD = data['a'] 
	qty_asks_c_l_FIDABUSD = data['A'] 

	global symbol_g_FIDABUSD 
	global price_bids_g_FIDABUSD 
	global qty_bids_g_FIDABUSD 
	global price_asks_g_FIDABUSD 
	global qty_asks_g_FIDABUSD 

	symbol_g_FIDABUSD = symbol_c_l_FIDABUSD 
	price_bids_g_FIDABUSD = Decimal(price_bids_c_l_FIDABUSD) 
	qty_bids_g_FIDABUSD = Decimal(qty_bids_c_l_FIDABUSD) 
	price_asks_g_FIDABUSD = Decimal(price_asks_c_l_FIDABUSD) 
	qty_asks_g_FIDABUSD = Decimal(qty_asks_c_l_FIDABUSD) 


def loop_FIDABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fidabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FIDABUSD) 
	ws.run_forever() 


Thread(target=loop_FIDABUSD).start() 
symbol_g_AGLDBUSD = 'AGLDBUSD' 
price_bids_g_AGLDBUSD = Decimal('0.0') 
qty_bids_g_AGLDBUSD = Decimal('0.0') 
price_asks_g_AGLDBUSD = Decimal('0.0') 
qty_asks_g_AGLDBUSD = Decimal('0.0') 
stepSize_g_AGLDBUSD = Decimal('0.1') 


def on_message_AGLDBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AGLDBUSD = 'AGLDBUSD' 
	price_bids_c_l_AGLDBUSD = data['b'] 
	qty_bids_c_l_AGLDBUSD = data['B'] 
	price_asks_c_l_AGLDBUSD = data['a'] 
	qty_asks_c_l_AGLDBUSD = data['A'] 

	global symbol_g_AGLDBUSD 
	global price_bids_g_AGLDBUSD 
	global qty_bids_g_AGLDBUSD 
	global price_asks_g_AGLDBUSD 
	global qty_asks_g_AGLDBUSD 

	symbol_g_AGLDBUSD = symbol_c_l_AGLDBUSD 
	price_bids_g_AGLDBUSD = Decimal(price_bids_c_l_AGLDBUSD) 
	qty_bids_g_AGLDBUSD = Decimal(qty_bids_c_l_AGLDBUSD) 
	price_asks_g_AGLDBUSD = Decimal(price_asks_c_l_AGLDBUSD) 
	qty_asks_g_AGLDBUSD = Decimal(qty_asks_c_l_AGLDBUSD) 


def loop_AGLDBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/agldbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AGLDBUSD) 
	ws.run_forever() 


Thread(target=loop_AGLDBUSD).start() 
symbol_g_RADBUSD = 'RADBUSD' 
price_bids_g_RADBUSD = Decimal('0.0') 
qty_bids_g_RADBUSD = Decimal('0.0') 
price_asks_g_RADBUSD = Decimal('0.0') 
qty_asks_g_RADBUSD = Decimal('0.0') 
stepSize_g_RADBUSD = Decimal('0.1') 


def on_message_RADBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RADBUSD = 'RADBUSD' 
	price_bids_c_l_RADBUSD = data['b'] 
	qty_bids_c_l_RADBUSD = data['B'] 
	price_asks_c_l_RADBUSD = data['a'] 
	qty_asks_c_l_RADBUSD = data['A'] 

	global symbol_g_RADBUSD 
	global price_bids_g_RADBUSD 
	global qty_bids_g_RADBUSD 
	global price_asks_g_RADBUSD 
	global qty_asks_g_RADBUSD 

	symbol_g_RADBUSD = symbol_c_l_RADBUSD 
	price_bids_g_RADBUSD = Decimal(price_bids_c_l_RADBUSD) 
	qty_bids_g_RADBUSD = Decimal(qty_bids_c_l_RADBUSD) 
	price_asks_g_RADBUSD = Decimal(price_asks_c_l_RADBUSD) 
	qty_asks_g_RADBUSD = Decimal(qty_asks_c_l_RADBUSD) 


def loop_RADBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/radbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RADBUSD) 
	ws.run_forever() 


Thread(target=loop_RADBUSD).start() 
symbol_g_HIVEBUSD = 'HIVEBUSD' 
price_bids_g_HIVEBUSD = Decimal('0.0') 
qty_bids_g_HIVEBUSD = Decimal('0.0') 
price_asks_g_HIVEBUSD = Decimal('0.0') 
qty_asks_g_HIVEBUSD = Decimal('0.0') 
stepSize_g_HIVEBUSD = Decimal('1.0') 


def on_message_HIVEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HIVEBUSD = 'HIVEBUSD' 
	price_bids_c_l_HIVEBUSD = data['b'] 
	qty_bids_c_l_HIVEBUSD = data['B'] 
	price_asks_c_l_HIVEBUSD = data['a'] 
	qty_asks_c_l_HIVEBUSD = data['A'] 

	global symbol_g_HIVEBUSD 
	global price_bids_g_HIVEBUSD 
	global qty_bids_g_HIVEBUSD 
	global price_asks_g_HIVEBUSD 
	global qty_asks_g_HIVEBUSD 

	symbol_g_HIVEBUSD = symbol_c_l_HIVEBUSD 
	price_bids_g_HIVEBUSD = Decimal(price_bids_c_l_HIVEBUSD) 
	qty_bids_g_HIVEBUSD = Decimal(qty_bids_c_l_HIVEBUSD) 
	price_asks_g_HIVEBUSD = Decimal(price_asks_c_l_HIVEBUSD) 
	qty_asks_g_HIVEBUSD = Decimal(qty_asks_c_l_HIVEBUSD) 


def loop_HIVEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hivebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HIVEBUSD) 
	ws.run_forever() 


Thread(target=loop_HIVEBUSD).start() 
symbol_g_STPTBUSD = 'STPTBUSD' 
price_bids_g_STPTBUSD = Decimal('0.0') 
qty_bids_g_STPTBUSD = Decimal('0.0') 
price_asks_g_STPTBUSD = Decimal('0.0') 
qty_asks_g_STPTBUSD = Decimal('0.0') 
stepSize_g_STPTBUSD = Decimal('0.1') 


def on_message_STPTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STPTBUSD = 'STPTBUSD' 
	price_bids_c_l_STPTBUSD = data['b'] 
	qty_bids_c_l_STPTBUSD = data['B'] 
	price_asks_c_l_STPTBUSD = data['a'] 
	qty_asks_c_l_STPTBUSD = data['A'] 

	global symbol_g_STPTBUSD 
	global price_bids_g_STPTBUSD 
	global qty_bids_g_STPTBUSD 
	global price_asks_g_STPTBUSD 
	global qty_asks_g_STPTBUSD 

	symbol_g_STPTBUSD = symbol_c_l_STPTBUSD 
	price_bids_g_STPTBUSD = Decimal(price_bids_c_l_STPTBUSD) 
	qty_bids_g_STPTBUSD = Decimal(qty_bids_c_l_STPTBUSD) 
	price_asks_g_STPTBUSD = Decimal(price_asks_c_l_STPTBUSD) 
	qty_asks_g_STPTBUSD = Decimal(qty_asks_c_l_STPTBUSD) 


def loop_STPTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/stptbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STPTBUSD) 
	ws.run_forever() 


Thread(target=loop_STPTBUSD).start() 
symbol_g_BETABUSD = 'BETABUSD' 
price_bids_g_BETABUSD = Decimal('0.0') 
qty_bids_g_BETABUSD = Decimal('0.0') 
price_asks_g_BETABUSD = Decimal('0.0') 
qty_asks_g_BETABUSD = Decimal('0.0') 
stepSize_g_BETABUSD = Decimal('1.0') 


def on_message_BETABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BETABUSD = 'BETABUSD' 
	price_bids_c_l_BETABUSD = data['b'] 
	qty_bids_c_l_BETABUSD = data['B'] 
	price_asks_c_l_BETABUSD = data['a'] 
	qty_asks_c_l_BETABUSD = data['A'] 

	global symbol_g_BETABUSD 
	global price_bids_g_BETABUSD 
	global qty_bids_g_BETABUSD 
	global price_asks_g_BETABUSD 
	global qty_asks_g_BETABUSD 

	symbol_g_BETABUSD = symbol_c_l_BETABUSD 
	price_bids_g_BETABUSD = Decimal(price_bids_c_l_BETABUSD) 
	qty_bids_g_BETABUSD = Decimal(qty_bids_c_l_BETABUSD) 
	price_asks_g_BETABUSD = Decimal(price_asks_c_l_BETABUSD) 
	qty_asks_g_BETABUSD = Decimal(qty_asks_c_l_BETABUSD) 


def loop_BETABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/betabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BETABUSD) 
	ws.run_forever() 


Thread(target=loop_BETABUSD).start() 
symbol_g_RAREBUSD = 'RAREBUSD' 
price_bids_g_RAREBUSD = Decimal('0.0') 
qty_bids_g_RAREBUSD = Decimal('0.0') 
price_asks_g_RAREBUSD = Decimal('0.0') 
qty_asks_g_RAREBUSD = Decimal('0.0') 
stepSize_g_RAREBUSD = Decimal('0.1') 


def on_message_RAREBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RAREBUSD = 'RAREBUSD' 
	price_bids_c_l_RAREBUSD = data['b'] 
	qty_bids_c_l_RAREBUSD = data['B'] 
	price_asks_c_l_RAREBUSD = data['a'] 
	qty_asks_c_l_RAREBUSD = data['A'] 

	global symbol_g_RAREBUSD 
	global price_bids_g_RAREBUSD 
	global qty_bids_g_RAREBUSD 
	global price_asks_g_RAREBUSD 
	global qty_asks_g_RAREBUSD 

	symbol_g_RAREBUSD = symbol_c_l_RAREBUSD 
	price_bids_g_RAREBUSD = Decimal(price_bids_c_l_RAREBUSD) 
	qty_bids_g_RAREBUSD = Decimal(qty_bids_c_l_RAREBUSD) 
	price_asks_g_RAREBUSD = Decimal(price_asks_c_l_RAREBUSD) 
	qty_asks_g_RAREBUSD = Decimal(qty_asks_c_l_RAREBUSD) 


def loop_RAREBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rarebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RAREBUSD) 
	ws.run_forever() 


Thread(target=loop_RAREBUSD).start() 
symbol_g_TROYBUSD = 'TROYBUSD' 
price_bids_g_TROYBUSD = Decimal('0.0') 
qty_bids_g_TROYBUSD = Decimal('0.0') 
price_asks_g_TROYBUSD = Decimal('0.0') 
qty_asks_g_TROYBUSD = Decimal('0.0') 
stepSize_g_TROYBUSD = Decimal('1.0') 


def on_message_TROYBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TROYBUSD = 'TROYBUSD' 
	price_bids_c_l_TROYBUSD = data['b'] 
	qty_bids_c_l_TROYBUSD = data['B'] 
	price_asks_c_l_TROYBUSD = data['a'] 
	qty_asks_c_l_TROYBUSD = data['A'] 

	global symbol_g_TROYBUSD 
	global price_bids_g_TROYBUSD 
	global qty_bids_g_TROYBUSD 
	global price_asks_g_TROYBUSD 
	global qty_asks_g_TROYBUSD 

	symbol_g_TROYBUSD = symbol_c_l_TROYBUSD 
	price_bids_g_TROYBUSD = Decimal(price_bids_c_l_TROYBUSD) 
	qty_bids_g_TROYBUSD = Decimal(qty_bids_c_l_TROYBUSD) 
	price_asks_g_TROYBUSD = Decimal(price_asks_c_l_TROYBUSD) 
	qty_asks_g_TROYBUSD = Decimal(qty_asks_c_l_TROYBUSD) 


def loop_TROYBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/troybusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TROYBUSD) 
	ws.run_forever() 


Thread(target=loop_TROYBUSD).start() 
symbol_g_CHESSBUSD = 'CHESSBUSD' 
price_bids_g_CHESSBUSD = Decimal('0.0') 
qty_bids_g_CHESSBUSD = Decimal('0.0') 
price_asks_g_CHESSBUSD = Decimal('0.0') 
qty_asks_g_CHESSBUSD = Decimal('0.0') 
stepSize_g_CHESSBUSD = Decimal('0.1') 


def on_message_CHESSBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CHESSBUSD = 'CHESSBUSD' 
	price_bids_c_l_CHESSBUSD = data['b'] 
	qty_bids_c_l_CHESSBUSD = data['B'] 
	price_asks_c_l_CHESSBUSD = data['a'] 
	qty_asks_c_l_CHESSBUSD = data['A'] 

	global symbol_g_CHESSBUSD 
	global price_bids_g_CHESSBUSD 
	global qty_bids_g_CHESSBUSD 
	global price_asks_g_CHESSBUSD 
	global qty_asks_g_CHESSBUSD 

	symbol_g_CHESSBUSD = symbol_c_l_CHESSBUSD 
	price_bids_g_CHESSBUSD = Decimal(price_bids_c_l_CHESSBUSD) 
	qty_bids_g_CHESSBUSD = Decimal(qty_bids_c_l_CHESSBUSD) 
	price_asks_g_CHESSBUSD = Decimal(price_asks_c_l_CHESSBUSD) 
	qty_asks_g_CHESSBUSD = Decimal(qty_asks_c_l_CHESSBUSD) 


def loop_CHESSBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/chessbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CHESSBUSD) 
	ws.run_forever() 


Thread(target=loop_CHESSBUSD).start() 
symbol_g_SCRTBUSD = 'SCRTBUSD' 
price_bids_g_SCRTBUSD = Decimal('0.0') 
qty_bids_g_SCRTBUSD = Decimal('0.0') 
price_asks_g_SCRTBUSD = Decimal('0.0') 
qty_asks_g_SCRTBUSD = Decimal('0.0') 
stepSize_g_SCRTBUSD = Decimal('0.1') 


def on_message_SCRTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SCRTBUSD = 'SCRTBUSD' 
	price_bids_c_l_SCRTBUSD = data['b'] 
	qty_bids_c_l_SCRTBUSD = data['B'] 
	price_asks_c_l_SCRTBUSD = data['a'] 
	qty_asks_c_l_SCRTBUSD = data['A'] 

	global symbol_g_SCRTBUSD 
	global price_bids_g_SCRTBUSD 
	global qty_bids_g_SCRTBUSD 
	global price_asks_g_SCRTBUSD 
	global qty_asks_g_SCRTBUSD 

	symbol_g_SCRTBUSD = symbol_c_l_SCRTBUSD 
	price_bids_g_SCRTBUSD = Decimal(price_bids_c_l_SCRTBUSD) 
	qty_bids_g_SCRTBUSD = Decimal(qty_bids_c_l_SCRTBUSD) 
	price_asks_g_SCRTBUSD = Decimal(price_asks_c_l_SCRTBUSD) 
	qty_asks_g_SCRTBUSD = Decimal(qty_asks_c_l_SCRTBUSD) 


def loop_SCRTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/scrtbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SCRTBUSD) 
	ws.run_forever() 


Thread(target=loop_SCRTBUSD).start() 
symbol_g_CELOBUSD = 'CELOBUSD' 
price_bids_g_CELOBUSD = Decimal('0.0') 
qty_bids_g_CELOBUSD = Decimal('0.0') 
price_asks_g_CELOBUSD = Decimal('0.0') 
qty_asks_g_CELOBUSD = Decimal('0.0') 
stepSize_g_CELOBUSD = Decimal('0.1') 


def on_message_CELOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CELOBUSD = 'CELOBUSD' 
	price_bids_c_l_CELOBUSD = data['b'] 
	qty_bids_c_l_CELOBUSD = data['B'] 
	price_asks_c_l_CELOBUSD = data['a'] 
	qty_asks_c_l_CELOBUSD = data['A'] 

	global symbol_g_CELOBUSD 
	global price_bids_g_CELOBUSD 
	global qty_bids_g_CELOBUSD 
	global price_asks_g_CELOBUSD 
	global qty_asks_g_CELOBUSD 

	symbol_g_CELOBUSD = symbol_c_l_CELOBUSD 
	price_bids_g_CELOBUSD = Decimal(price_bids_c_l_CELOBUSD) 
	qty_bids_g_CELOBUSD = Decimal(qty_bids_c_l_CELOBUSD) 
	price_asks_g_CELOBUSD = Decimal(price_asks_c_l_CELOBUSD) 
	qty_asks_g_CELOBUSD = Decimal(qty_asks_c_l_CELOBUSD) 


def loop_CELOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/celobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CELOBUSD) 
	ws.run_forever() 


Thread(target=loop_CELOBUSD).start() 
symbol_g_DARBUSD = 'DARBUSD' 
price_bids_g_DARBUSD = Decimal('0.0') 
qty_bids_g_DARBUSD = Decimal('0.0') 
price_asks_g_DARBUSD = Decimal('0.0') 
qty_asks_g_DARBUSD = Decimal('0.0') 
stepSize_g_DARBUSD = Decimal('1.0') 


def on_message_DARBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DARBUSD = 'DARBUSD' 
	price_bids_c_l_DARBUSD = data['b'] 
	qty_bids_c_l_DARBUSD = data['B'] 
	price_asks_c_l_DARBUSD = data['a'] 
	qty_asks_c_l_DARBUSD = data['A'] 

	global symbol_g_DARBUSD 
	global price_bids_g_DARBUSD 
	global qty_bids_g_DARBUSD 
	global price_asks_g_DARBUSD 
	global qty_asks_g_DARBUSD 

	symbol_g_DARBUSD = symbol_c_l_DARBUSD 
	price_bids_g_DARBUSD = Decimal(price_bids_c_l_DARBUSD) 
	qty_bids_g_DARBUSD = Decimal(qty_bids_c_l_DARBUSD) 
	price_asks_g_DARBUSD = Decimal(price_asks_c_l_DARBUSD) 
	qty_asks_g_DARBUSD = Decimal(qty_asks_c_l_DARBUSD) 


def loop_DARBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/darbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DARBUSD) 
	ws.run_forever() 


Thread(target=loop_DARBUSD).start() 
symbol_g_BNXBUSD = 'BNXBUSD' 
price_bids_g_BNXBUSD = Decimal('0.0') 
qty_bids_g_BNXBUSD = Decimal('0.0') 
price_asks_g_BNXBUSD = Decimal('0.0') 
qty_asks_g_BNXBUSD = Decimal('0.0') 
stepSize_g_BNXBUSD = Decimal('0.001') 


def on_message_BNXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BNXBUSD = 'BNXBUSD' 
	price_bids_c_l_BNXBUSD = data['b'] 
	qty_bids_c_l_BNXBUSD = data['B'] 
	price_asks_c_l_BNXBUSD = data['a'] 
	qty_asks_c_l_BNXBUSD = data['A'] 

	global symbol_g_BNXBUSD 
	global price_bids_g_BNXBUSD 
	global qty_bids_g_BNXBUSD 
	global price_asks_g_BNXBUSD 
	global qty_asks_g_BNXBUSD 

	symbol_g_BNXBUSD = symbol_c_l_BNXBUSD 
	price_bids_g_BNXBUSD = Decimal(price_bids_c_l_BNXBUSD) 
	qty_bids_g_BNXBUSD = Decimal(qty_bids_c_l_BNXBUSD) 
	price_asks_g_BNXBUSD = Decimal(price_asks_c_l_BNXBUSD) 
	qty_asks_g_BNXBUSD = Decimal(qty_asks_c_l_BNXBUSD) 


def loop_BNXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bnxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BNXBUSD) 
	ws.run_forever() 


Thread(target=loop_BNXBUSD).start() 
symbol_g_LAZIOBUSD = 'LAZIOBUSD' 
price_bids_g_LAZIOBUSD = Decimal('0.0') 
qty_bids_g_LAZIOBUSD = Decimal('0.0') 
price_asks_g_LAZIOBUSD = Decimal('0.0') 
qty_asks_g_LAZIOBUSD = Decimal('0.0') 
stepSize_g_LAZIOBUSD = Decimal('0.01') 


def on_message_LAZIOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LAZIOBUSD = 'LAZIOBUSD' 
	price_bids_c_l_LAZIOBUSD = data['b'] 
	qty_bids_c_l_LAZIOBUSD = data['B'] 
	price_asks_c_l_LAZIOBUSD = data['a'] 
	qty_asks_c_l_LAZIOBUSD = data['A'] 

	global symbol_g_LAZIOBUSD 
	global price_bids_g_LAZIOBUSD 
	global qty_bids_g_LAZIOBUSD 
	global price_asks_g_LAZIOBUSD 
	global qty_asks_g_LAZIOBUSD 

	symbol_g_LAZIOBUSD = symbol_c_l_LAZIOBUSD 
	price_bids_g_LAZIOBUSD = Decimal(price_bids_c_l_LAZIOBUSD) 
	qty_bids_g_LAZIOBUSD = Decimal(qty_bids_c_l_LAZIOBUSD) 
	price_asks_g_LAZIOBUSD = Decimal(price_asks_c_l_LAZIOBUSD) 
	qty_asks_g_LAZIOBUSD = Decimal(qty_asks_c_l_LAZIOBUSD) 


def loop_LAZIOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/laziobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LAZIOBUSD) 
	ws.run_forever() 


Thread(target=loop_LAZIOBUSD).start() 
symbol_g_OXTBUSD = 'OXTBUSD' 
price_bids_g_OXTBUSD = Decimal('0.0') 
qty_bids_g_OXTBUSD = Decimal('0.0') 
price_asks_g_OXTBUSD = Decimal('0.0') 
qty_asks_g_OXTBUSD = Decimal('0.0') 
stepSize_g_OXTBUSD = Decimal('1.0') 


def on_message_OXTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OXTBUSD = 'OXTBUSD' 
	price_bids_c_l_OXTBUSD = data['b'] 
	qty_bids_c_l_OXTBUSD = data['B'] 
	price_asks_c_l_OXTBUSD = data['a'] 
	qty_asks_c_l_OXTBUSD = data['A'] 

	global symbol_g_OXTBUSD 
	global price_bids_g_OXTBUSD 
	global qty_bids_g_OXTBUSD 
	global price_asks_g_OXTBUSD 
	global qty_asks_g_OXTBUSD 

	symbol_g_OXTBUSD = symbol_c_l_OXTBUSD 
	price_bids_g_OXTBUSD = Decimal(price_bids_c_l_OXTBUSD) 
	qty_bids_g_OXTBUSD = Decimal(qty_bids_c_l_OXTBUSD) 
	price_asks_g_OXTBUSD = Decimal(price_asks_c_l_OXTBUSD) 
	qty_asks_g_OXTBUSD = Decimal(qty_asks_c_l_OXTBUSD) 


def loop_OXTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/oxtbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OXTBUSD) 
	ws.run_forever() 


Thread(target=loop_OXTBUSD).start() 
symbol_g_MOVRBUSD = 'MOVRBUSD' 
price_bids_g_MOVRBUSD = Decimal('0.0') 
qty_bids_g_MOVRBUSD = Decimal('0.0') 
price_asks_g_MOVRBUSD = Decimal('0.0') 
qty_asks_g_MOVRBUSD = Decimal('0.0') 
stepSize_g_MOVRBUSD = Decimal('0.001') 


def on_message_MOVRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MOVRBUSD = 'MOVRBUSD' 
	price_bids_c_l_MOVRBUSD = data['b'] 
	qty_bids_c_l_MOVRBUSD = data['B'] 
	price_asks_c_l_MOVRBUSD = data['a'] 
	qty_asks_c_l_MOVRBUSD = data['A'] 

	global symbol_g_MOVRBUSD 
	global price_bids_g_MOVRBUSD 
	global qty_bids_g_MOVRBUSD 
	global price_asks_g_MOVRBUSD 
	global qty_asks_g_MOVRBUSD 

	symbol_g_MOVRBUSD = symbol_c_l_MOVRBUSD 
	price_bids_g_MOVRBUSD = Decimal(price_bids_c_l_MOVRBUSD) 
	qty_bids_g_MOVRBUSD = Decimal(qty_bids_c_l_MOVRBUSD) 
	price_asks_g_MOVRBUSD = Decimal(price_asks_c_l_MOVRBUSD) 
	qty_asks_g_MOVRBUSD = Decimal(qty_asks_c_l_MOVRBUSD) 


def loop_MOVRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/movrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MOVRBUSD) 
	ws.run_forever() 


Thread(target=loop_MOVRBUSD).start() 
symbol_g_CITYBUSD = 'CITYBUSD' 
price_bids_g_CITYBUSD = Decimal('0.0') 
qty_bids_g_CITYBUSD = Decimal('0.0') 
price_asks_g_CITYBUSD = Decimal('0.0') 
qty_asks_g_CITYBUSD = Decimal('0.0') 
stepSize_g_CITYBUSD = Decimal('0.01') 


def on_message_CITYBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CITYBUSD = 'CITYBUSD' 
	price_bids_c_l_CITYBUSD = data['b'] 
	qty_bids_c_l_CITYBUSD = data['B'] 
	price_asks_c_l_CITYBUSD = data['a'] 
	qty_asks_c_l_CITYBUSD = data['A'] 

	global symbol_g_CITYBUSD 
	global price_bids_g_CITYBUSD 
	global qty_bids_g_CITYBUSD 
	global price_asks_g_CITYBUSD 
	global qty_asks_g_CITYBUSD 

	symbol_g_CITYBUSD = symbol_c_l_CITYBUSD 
	price_bids_g_CITYBUSD = Decimal(price_bids_c_l_CITYBUSD) 
	qty_bids_g_CITYBUSD = Decimal(qty_bids_c_l_CITYBUSD) 
	price_asks_g_CITYBUSD = Decimal(price_asks_c_l_CITYBUSD) 
	qty_asks_g_CITYBUSD = Decimal(qty_asks_c_l_CITYBUSD) 


def loop_CITYBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/citybusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CITYBUSD) 
	ws.run_forever() 


Thread(target=loop_CITYBUSD).start() 
symbol_g_ENSBUSD = 'ENSBUSD' 
price_bids_g_ENSBUSD = Decimal('0.0') 
qty_bids_g_ENSBUSD = Decimal('0.0') 
price_asks_g_ENSBUSD = Decimal('0.0') 
qty_asks_g_ENSBUSD = Decimal('0.0') 
stepSize_g_ENSBUSD = Decimal('0.01') 


def on_message_ENSBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ENSBUSD = 'ENSBUSD' 
	price_bids_c_l_ENSBUSD = data['b'] 
	qty_bids_c_l_ENSBUSD = data['B'] 
	price_asks_c_l_ENSBUSD = data['a'] 
	qty_asks_c_l_ENSBUSD = data['A'] 

	global symbol_g_ENSBUSD 
	global price_bids_g_ENSBUSD 
	global qty_bids_g_ENSBUSD 
	global price_asks_g_ENSBUSD 
	global qty_asks_g_ENSBUSD 

	symbol_g_ENSBUSD = symbol_c_l_ENSBUSD 
	price_bids_g_ENSBUSD = Decimal(price_bids_c_l_ENSBUSD) 
	qty_bids_g_ENSBUSD = Decimal(qty_bids_c_l_ENSBUSD) 
	price_asks_g_ENSBUSD = Decimal(price_asks_c_l_ENSBUSD) 
	qty_asks_g_ENSBUSD = Decimal(qty_asks_c_l_ENSBUSD) 


def loop_ENSBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ensbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ENSBUSD) 
	ws.run_forever() 


Thread(target=loop_ENSBUSD).start() 
symbol_g_QIBUSD = 'QIBUSD' 
price_bids_g_QIBUSD = Decimal('0.0') 
qty_bids_g_QIBUSD = Decimal('0.0') 
price_asks_g_QIBUSD = Decimal('0.0') 
qty_asks_g_QIBUSD = Decimal('0.0') 
stepSize_g_QIBUSD = Decimal('1.0') 


def on_message_QIBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_QIBUSD = 'QIBUSD' 
	price_bids_c_l_QIBUSD = data['b'] 
	qty_bids_c_l_QIBUSD = data['B'] 
	price_asks_c_l_QIBUSD = data['a'] 
	qty_asks_c_l_QIBUSD = data['A'] 

	global symbol_g_QIBUSD 
	global price_bids_g_QIBUSD 
	global qty_bids_g_QIBUSD 
	global price_asks_g_QIBUSD 
	global qty_asks_g_QIBUSD 

	symbol_g_QIBUSD = symbol_c_l_QIBUSD 
	price_bids_g_QIBUSD = Decimal(price_bids_c_l_QIBUSD) 
	qty_bids_g_QIBUSD = Decimal(qty_bids_c_l_QIBUSD) 
	price_asks_g_QIBUSD = Decimal(price_asks_c_l_QIBUSD) 
	qty_asks_g_QIBUSD = Decimal(qty_asks_c_l_QIBUSD) 


def loop_QIBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/qibusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_QIBUSD) 
	ws.run_forever() 


Thread(target=loop_QIBUSD).start() 
symbol_g_POWRBUSD = 'POWRBUSD' 
price_bids_g_POWRBUSD = Decimal('0.0') 
qty_bids_g_POWRBUSD = Decimal('0.0') 
price_asks_g_POWRBUSD = Decimal('0.0') 
qty_asks_g_POWRBUSD = Decimal('0.0') 
stepSize_g_POWRBUSD = Decimal('1.0') 


def on_message_POWRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_POWRBUSD = 'POWRBUSD' 
	price_bids_c_l_POWRBUSD = data['b'] 
	qty_bids_c_l_POWRBUSD = data['B'] 
	price_asks_c_l_POWRBUSD = data['a'] 
	qty_asks_c_l_POWRBUSD = data['A'] 

	global symbol_g_POWRBUSD 
	global price_bids_g_POWRBUSD 
	global qty_bids_g_POWRBUSD 
	global price_asks_g_POWRBUSD 
	global qty_asks_g_POWRBUSD 

	symbol_g_POWRBUSD = symbol_c_l_POWRBUSD 
	price_bids_g_POWRBUSD = Decimal(price_bids_c_l_POWRBUSD) 
	qty_bids_g_POWRBUSD = Decimal(qty_bids_c_l_POWRBUSD) 
	price_asks_g_POWRBUSD = Decimal(price_asks_c_l_POWRBUSD) 
	qty_asks_g_POWRBUSD = Decimal(qty_asks_c_l_POWRBUSD) 


def loop_POWRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/powrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_POWRBUSD) 
	ws.run_forever() 


Thread(target=loop_POWRBUSD).start() 
symbol_g_JASMYBUSD = 'JASMYBUSD' 
price_bids_g_JASMYBUSD = Decimal('0.0') 
qty_bids_g_JASMYBUSD = Decimal('0.0') 
price_asks_g_JASMYBUSD = Decimal('0.0') 
qty_asks_g_JASMYBUSD = Decimal('0.0') 
stepSize_g_JASMYBUSD = Decimal('0.1') 


def on_message_JASMYBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JASMYBUSD = 'JASMYBUSD' 
	price_bids_c_l_JASMYBUSD = data['b'] 
	qty_bids_c_l_JASMYBUSD = data['B'] 
	price_asks_c_l_JASMYBUSD = data['a'] 
	qty_asks_c_l_JASMYBUSD = data['A'] 

	global symbol_g_JASMYBUSD 
	global price_bids_g_JASMYBUSD 
	global qty_bids_g_JASMYBUSD 
	global price_asks_g_JASMYBUSD 
	global qty_asks_g_JASMYBUSD 

	symbol_g_JASMYBUSD = symbol_c_l_JASMYBUSD 
	price_bids_g_JASMYBUSD = Decimal(price_bids_c_l_JASMYBUSD) 
	qty_bids_g_JASMYBUSD = Decimal(qty_bids_c_l_JASMYBUSD) 
	price_asks_g_JASMYBUSD = Decimal(price_asks_c_l_JASMYBUSD) 
	qty_asks_g_JASMYBUSD = Decimal(qty_asks_c_l_JASMYBUSD) 


def loop_JASMYBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/jasmybusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JASMYBUSD) 
	ws.run_forever() 


Thread(target=loop_JASMYBUSD).start() 
symbol_g_AMPBUSD = 'AMPBUSD' 
price_bids_g_AMPBUSD = Decimal('0.0') 
qty_bids_g_AMPBUSD = Decimal('0.0') 
price_asks_g_AMPBUSD = Decimal('0.0') 
qty_asks_g_AMPBUSD = Decimal('0.0') 
stepSize_g_AMPBUSD = Decimal('1.0') 


def on_message_AMPBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AMPBUSD = 'AMPBUSD' 
	price_bids_c_l_AMPBUSD = data['b'] 
	qty_bids_c_l_AMPBUSD = data['B'] 
	price_asks_c_l_AMPBUSD = data['a'] 
	qty_asks_c_l_AMPBUSD = data['A'] 

	global symbol_g_AMPBUSD 
	global price_bids_g_AMPBUSD 
	global qty_bids_g_AMPBUSD 
	global price_asks_g_AMPBUSD 
	global qty_asks_g_AMPBUSD 

	symbol_g_AMPBUSD = symbol_c_l_AMPBUSD 
	price_bids_g_AMPBUSD = Decimal(price_bids_c_l_AMPBUSD) 
	qty_bids_g_AMPBUSD = Decimal(qty_bids_c_l_AMPBUSD) 
	price_asks_g_AMPBUSD = Decimal(price_asks_c_l_AMPBUSD) 
	qty_asks_g_AMPBUSD = Decimal(qty_asks_c_l_AMPBUSD) 


def loop_AMPBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ampbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AMPBUSD) 
	ws.run_forever() 


Thread(target=loop_AMPBUSD).start() 
symbol_g_PLABUSD = 'PLABUSD' 
price_bids_g_PLABUSD = Decimal('0.0') 
qty_bids_g_PLABUSD = Decimal('0.0') 
price_asks_g_PLABUSD = Decimal('0.0') 
qty_asks_g_PLABUSD = Decimal('0.0') 
stepSize_g_PLABUSD = Decimal('0.01') 


def on_message_PLABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PLABUSD = 'PLABUSD' 
	price_bids_c_l_PLABUSD = data['b'] 
	qty_bids_c_l_PLABUSD = data['B'] 
	price_asks_c_l_PLABUSD = data['a'] 
	qty_asks_c_l_PLABUSD = data['A'] 

	global symbol_g_PLABUSD 
	global price_bids_g_PLABUSD 
	global qty_bids_g_PLABUSD 
	global price_asks_g_PLABUSD 
	global qty_asks_g_PLABUSD 

	symbol_g_PLABUSD = symbol_c_l_PLABUSD 
	price_bids_g_PLABUSD = Decimal(price_bids_c_l_PLABUSD) 
	qty_bids_g_PLABUSD = Decimal(qty_bids_c_l_PLABUSD) 
	price_asks_g_PLABUSD = Decimal(price_asks_c_l_PLABUSD) 
	qty_asks_g_PLABUSD = Decimal(qty_asks_c_l_PLABUSD) 


def loop_PLABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/plabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PLABUSD) 
	ws.run_forever() 


Thread(target=loop_PLABUSD).start() 
symbol_g_PYRBUSD = 'PYRBUSD' 
price_bids_g_PYRBUSD = Decimal('0.0') 
qty_bids_g_PYRBUSD = Decimal('0.0') 
price_asks_g_PYRBUSD = Decimal('0.0') 
qty_asks_g_PYRBUSD = Decimal('0.0') 
stepSize_g_PYRBUSD = Decimal('0.001') 


def on_message_PYRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PYRBUSD = 'PYRBUSD' 
	price_bids_c_l_PYRBUSD = data['b'] 
	qty_bids_c_l_PYRBUSD = data['B'] 
	price_asks_c_l_PYRBUSD = data['a'] 
	qty_asks_c_l_PYRBUSD = data['A'] 

	global symbol_g_PYRBUSD 
	global price_bids_g_PYRBUSD 
	global qty_bids_g_PYRBUSD 
	global price_asks_g_PYRBUSD 
	global qty_asks_g_PYRBUSD 

	symbol_g_PYRBUSD = symbol_c_l_PYRBUSD 
	price_bids_g_PYRBUSD = Decimal(price_bids_c_l_PYRBUSD) 
	qty_bids_g_PYRBUSD = Decimal(qty_bids_c_l_PYRBUSD) 
	price_asks_g_PYRBUSD = Decimal(price_asks_c_l_PYRBUSD) 
	qty_asks_g_PYRBUSD = Decimal(qty_asks_c_l_PYRBUSD) 


def loop_PYRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/pyrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PYRBUSD) 
	ws.run_forever() 


Thread(target=loop_PYRBUSD).start() 
symbol_g_RNDRBUSD = 'RNDRBUSD' 
price_bids_g_RNDRBUSD = Decimal('0.0') 
qty_bids_g_RNDRBUSD = Decimal('0.0') 
price_asks_g_RNDRBUSD = Decimal('0.0') 
qty_asks_g_RNDRBUSD = Decimal('0.0') 
stepSize_g_RNDRBUSD = Decimal('0.01') 


def on_message_RNDRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RNDRBUSD = 'RNDRBUSD' 
	price_bids_c_l_RNDRBUSD = data['b'] 
	qty_bids_c_l_RNDRBUSD = data['B'] 
	price_asks_c_l_RNDRBUSD = data['a'] 
	qty_asks_c_l_RNDRBUSD = data['A'] 

	global symbol_g_RNDRBUSD 
	global price_bids_g_RNDRBUSD 
	global qty_bids_g_RNDRBUSD 
	global price_asks_g_RNDRBUSD 
	global qty_asks_g_RNDRBUSD 

	symbol_g_RNDRBUSD = symbol_c_l_RNDRBUSD 
	price_bids_g_RNDRBUSD = Decimal(price_bids_c_l_RNDRBUSD) 
	qty_bids_g_RNDRBUSD = Decimal(qty_bids_c_l_RNDRBUSD) 
	price_asks_g_RNDRBUSD = Decimal(price_asks_c_l_RNDRBUSD) 
	qty_asks_g_RNDRBUSD = Decimal(qty_asks_c_l_RNDRBUSD) 


def loop_RNDRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rndrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RNDRBUSD) 
	ws.run_forever() 


Thread(target=loop_RNDRBUSD).start() 
symbol_g_ALCXBUSD = 'ALCXBUSD' 
price_bids_g_ALCXBUSD = Decimal('0.0') 
qty_bids_g_ALCXBUSD = Decimal('0.0') 
price_asks_g_ALCXBUSD = Decimal('0.0') 
qty_asks_g_ALCXBUSD = Decimal('0.0') 
stepSize_g_ALCXBUSD = Decimal('0.0001') 


def on_message_ALCXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALCXBUSD = 'ALCXBUSD' 
	price_bids_c_l_ALCXBUSD = data['b'] 
	qty_bids_c_l_ALCXBUSD = data['B'] 
	price_asks_c_l_ALCXBUSD = data['a'] 
	qty_asks_c_l_ALCXBUSD = data['A'] 

	global symbol_g_ALCXBUSD 
	global price_bids_g_ALCXBUSD 
	global qty_bids_g_ALCXBUSD 
	global price_asks_g_ALCXBUSD 
	global qty_asks_g_ALCXBUSD 

	symbol_g_ALCXBUSD = symbol_c_l_ALCXBUSD 
	price_bids_g_ALCXBUSD = Decimal(price_bids_c_l_ALCXBUSD) 
	qty_bids_g_ALCXBUSD = Decimal(qty_bids_c_l_ALCXBUSD) 
	price_asks_g_ALCXBUSD = Decimal(price_asks_c_l_ALCXBUSD) 
	qty_asks_g_ALCXBUSD = Decimal(qty_asks_c_l_ALCXBUSD) 


def loop_ALCXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alcxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALCXBUSD) 
	ws.run_forever() 


Thread(target=loop_ALCXBUSD).start() 
symbol_g_MCBUSD = 'MCBUSD' 
price_bids_g_MCBUSD = Decimal('0.0') 
qty_bids_g_MCBUSD = Decimal('0.0') 
price_asks_g_MCBUSD = Decimal('0.0') 
qty_asks_g_MCBUSD = Decimal('0.0') 
stepSize_g_MCBUSD = Decimal('0.01') 


def on_message_MCBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MCBUSD = 'MCBUSD' 
	price_bids_c_l_MCBUSD = data['b'] 
	qty_bids_c_l_MCBUSD = data['B'] 
	price_asks_c_l_MCBUSD = data['a'] 
	qty_asks_c_l_MCBUSD = data['A'] 

	global symbol_g_MCBUSD 
	global price_bids_g_MCBUSD 
	global qty_bids_g_MCBUSD 
	global price_asks_g_MCBUSD 
	global qty_asks_g_MCBUSD 

	symbol_g_MCBUSD = symbol_c_l_MCBUSD 
	price_bids_g_MCBUSD = Decimal(price_bids_c_l_MCBUSD) 
	qty_bids_g_MCBUSD = Decimal(qty_bids_c_l_MCBUSD) 
	price_asks_g_MCBUSD = Decimal(price_asks_c_l_MCBUSD) 
	qty_asks_g_MCBUSD = Decimal(qty_asks_c_l_MCBUSD) 


def loop_MCBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mcbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MCBUSD) 
	ws.run_forever() 


Thread(target=loop_MCBUSD).start() 
symbol_g_BICOBUSD = 'BICOBUSD' 
price_bids_g_BICOBUSD = Decimal('0.0') 
qty_bids_g_BICOBUSD = Decimal('0.0') 
price_asks_g_BICOBUSD = Decimal('0.0') 
qty_asks_g_BICOBUSD = Decimal('0.0') 
stepSize_g_BICOBUSD = Decimal('0.01') 


def on_message_BICOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BICOBUSD = 'BICOBUSD' 
	price_bids_c_l_BICOBUSD = data['b'] 
	qty_bids_c_l_BICOBUSD = data['B'] 
	price_asks_c_l_BICOBUSD = data['a'] 
	qty_asks_c_l_BICOBUSD = data['A'] 

	global symbol_g_BICOBUSD 
	global price_bids_g_BICOBUSD 
	global qty_bids_g_BICOBUSD 
	global price_asks_g_BICOBUSD 
	global qty_asks_g_BICOBUSD 

	symbol_g_BICOBUSD = symbol_c_l_BICOBUSD 
	price_bids_g_BICOBUSD = Decimal(price_bids_c_l_BICOBUSD) 
	qty_bids_g_BICOBUSD = Decimal(qty_bids_c_l_BICOBUSD) 
	price_asks_g_BICOBUSD = Decimal(price_asks_c_l_BICOBUSD) 
	qty_asks_g_BICOBUSD = Decimal(qty_asks_c_l_BICOBUSD) 


def loop_BICOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bicobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BICOBUSD) 
	ws.run_forever() 


Thread(target=loop_BICOBUSD).start() 
symbol_g_FLUXBUSD = 'FLUXBUSD' 
price_bids_g_FLUXBUSD = Decimal('0.0') 
qty_bids_g_FLUXBUSD = Decimal('0.0') 
price_asks_g_FLUXBUSD = Decimal('0.0') 
qty_asks_g_FLUXBUSD = Decimal('0.0') 
stepSize_g_FLUXBUSD = Decimal('0.01') 


def on_message_FLUXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FLUXBUSD = 'FLUXBUSD' 
	price_bids_c_l_FLUXBUSD = data['b'] 
	qty_bids_c_l_FLUXBUSD = data['B'] 
	price_asks_c_l_FLUXBUSD = data['a'] 
	qty_asks_c_l_FLUXBUSD = data['A'] 

	global symbol_g_FLUXBUSD 
	global price_bids_g_FLUXBUSD 
	global qty_bids_g_FLUXBUSD 
	global price_asks_g_FLUXBUSD 
	global qty_asks_g_FLUXBUSD 

	symbol_g_FLUXBUSD = symbol_c_l_FLUXBUSD 
	price_bids_g_FLUXBUSD = Decimal(price_bids_c_l_FLUXBUSD) 
	qty_bids_g_FLUXBUSD = Decimal(qty_bids_c_l_FLUXBUSD) 
	price_asks_g_FLUXBUSD = Decimal(price_asks_c_l_FLUXBUSD) 
	qty_asks_g_FLUXBUSD = Decimal(qty_asks_c_l_FLUXBUSD) 


def loop_FLUXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/fluxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FLUXBUSD) 
	ws.run_forever() 


Thread(target=loop_FLUXBUSD).start() 
symbol_g_REQBUSD = 'REQBUSD' 
price_bids_g_REQBUSD = Decimal('0.0') 
qty_bids_g_REQBUSD = Decimal('0.0') 
price_asks_g_REQBUSD = Decimal('0.0') 
qty_asks_g_REQBUSD = Decimal('0.0') 
stepSize_g_REQBUSD = Decimal('1.0') 


def on_message_REQBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_REQBUSD = 'REQBUSD' 
	price_bids_c_l_REQBUSD = data['b'] 
	qty_bids_c_l_REQBUSD = data['B'] 
	price_asks_c_l_REQBUSD = data['a'] 
	qty_asks_c_l_REQBUSD = data['A'] 

	global symbol_g_REQBUSD 
	global price_bids_g_REQBUSD 
	global qty_bids_g_REQBUSD 
	global price_asks_g_REQBUSD 
	global qty_asks_g_REQBUSD 

	symbol_g_REQBUSD = symbol_c_l_REQBUSD 
	price_bids_g_REQBUSD = Decimal(price_bids_c_l_REQBUSD) 
	qty_bids_g_REQBUSD = Decimal(qty_bids_c_l_REQBUSD) 
	price_asks_g_REQBUSD = Decimal(price_asks_c_l_REQBUSD) 
	qty_asks_g_REQBUSD = Decimal(qty_asks_c_l_REQBUSD) 


def loop_REQBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/reqbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_REQBUSD) 
	ws.run_forever() 


Thread(target=loop_REQBUSD).start() 
symbol_g_VOXELBUSD = 'VOXELBUSD' 
price_bids_g_VOXELBUSD = Decimal('0.0') 
qty_bids_g_VOXELBUSD = Decimal('0.0') 
price_asks_g_VOXELBUSD = Decimal('0.0') 
qty_asks_g_VOXELBUSD = Decimal('0.0') 
stepSize_g_VOXELBUSD = Decimal('0.1') 


def on_message_VOXELBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VOXELBUSD = 'VOXELBUSD' 
	price_bids_c_l_VOXELBUSD = data['b'] 
	qty_bids_c_l_VOXELBUSD = data['B'] 
	price_asks_c_l_VOXELBUSD = data['a'] 
	qty_asks_c_l_VOXELBUSD = data['A'] 

	global symbol_g_VOXELBUSD 
	global price_bids_g_VOXELBUSD 
	global qty_bids_g_VOXELBUSD 
	global price_asks_g_VOXELBUSD 
	global qty_asks_g_VOXELBUSD 

	symbol_g_VOXELBUSD = symbol_c_l_VOXELBUSD 
	price_bids_g_VOXELBUSD = Decimal(price_bids_c_l_VOXELBUSD) 
	qty_bids_g_VOXELBUSD = Decimal(qty_bids_c_l_VOXELBUSD) 
	price_asks_g_VOXELBUSD = Decimal(price_asks_c_l_VOXELBUSD) 
	qty_asks_g_VOXELBUSD = Decimal(qty_asks_c_l_VOXELBUSD) 


def loop_VOXELBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/voxelbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VOXELBUSD) 
	ws.run_forever() 


Thread(target=loop_VOXELBUSD).start() 
symbol_g_CTXCBUSD = 'CTXCBUSD' 
price_bids_g_CTXCBUSD = Decimal('0.0') 
qty_bids_g_CTXCBUSD = Decimal('0.0') 
price_asks_g_CTXCBUSD = Decimal('0.0') 
qty_asks_g_CTXCBUSD = Decimal('0.0') 
stepSize_g_CTXCBUSD = Decimal('1.0') 


def on_message_CTXCBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CTXCBUSD = 'CTXCBUSD' 
	price_bids_c_l_CTXCBUSD = data['b'] 
	qty_bids_c_l_CTXCBUSD = data['B'] 
	price_asks_c_l_CTXCBUSD = data['a'] 
	qty_asks_c_l_CTXCBUSD = data['A'] 

	global symbol_g_CTXCBUSD 
	global price_bids_g_CTXCBUSD 
	global qty_bids_g_CTXCBUSD 
	global price_asks_g_CTXCBUSD 
	global qty_asks_g_CTXCBUSD 

	symbol_g_CTXCBUSD = symbol_c_l_CTXCBUSD 
	price_bids_g_CTXCBUSD = Decimal(price_bids_c_l_CTXCBUSD) 
	qty_bids_g_CTXCBUSD = Decimal(qty_bids_c_l_CTXCBUSD) 
	price_asks_g_CTXCBUSD = Decimal(price_asks_c_l_CTXCBUSD) 
	qty_asks_g_CTXCBUSD = Decimal(qty_asks_c_l_CTXCBUSD) 


def loop_CTXCBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ctxcbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CTXCBUSD) 
	ws.run_forever() 


Thread(target=loop_CTXCBUSD).start() 
symbol_g_HIGHBUSD = 'HIGHBUSD' 
price_bids_g_HIGHBUSD = Decimal('0.0') 
qty_bids_g_HIGHBUSD = Decimal('0.0') 
price_asks_g_HIGHBUSD = Decimal('0.0') 
qty_asks_g_HIGHBUSD = Decimal('0.0') 
stepSize_g_HIGHBUSD = Decimal('0.001') 


def on_message_HIGHBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HIGHBUSD = 'HIGHBUSD' 
	price_bids_c_l_HIGHBUSD = data['b'] 
	qty_bids_c_l_HIGHBUSD = data['B'] 
	price_asks_c_l_HIGHBUSD = data['a'] 
	qty_asks_c_l_HIGHBUSD = data['A'] 

	global symbol_g_HIGHBUSD 
	global price_bids_g_HIGHBUSD 
	global qty_bids_g_HIGHBUSD 
	global price_asks_g_HIGHBUSD 
	global qty_asks_g_HIGHBUSD 

	symbol_g_HIGHBUSD = symbol_c_l_HIGHBUSD 
	price_bids_g_HIGHBUSD = Decimal(price_bids_c_l_HIGHBUSD) 
	qty_bids_g_HIGHBUSD = Decimal(qty_bids_c_l_HIGHBUSD) 
	price_asks_g_HIGHBUSD = Decimal(price_asks_c_l_HIGHBUSD) 
	qty_asks_g_HIGHBUSD = Decimal(qty_asks_c_l_HIGHBUSD) 


def loop_HIGHBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/highbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HIGHBUSD) 
	ws.run_forever() 


Thread(target=loop_HIGHBUSD).start() 
symbol_g_CVXBUSD = 'CVXBUSD' 
price_bids_g_CVXBUSD = Decimal('0.0') 
qty_bids_g_CVXBUSD = Decimal('0.0') 
price_asks_g_CVXBUSD = Decimal('0.0') 
qty_asks_g_CVXBUSD = Decimal('0.0') 
stepSize_g_CVXBUSD = Decimal('0.001') 


def on_message_CVXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_CVXBUSD = 'CVXBUSD' 
	price_bids_c_l_CVXBUSD = data['b'] 
	qty_bids_c_l_CVXBUSD = data['B'] 
	price_asks_c_l_CVXBUSD = data['a'] 
	qty_asks_c_l_CVXBUSD = data['A'] 

	global symbol_g_CVXBUSD 
	global price_bids_g_CVXBUSD 
	global qty_bids_g_CVXBUSD 
	global price_asks_g_CVXBUSD 
	global qty_asks_g_CVXBUSD 

	symbol_g_CVXBUSD = symbol_c_l_CVXBUSD 
	price_bids_g_CVXBUSD = Decimal(price_bids_c_l_CVXBUSD) 
	qty_bids_g_CVXBUSD = Decimal(qty_bids_c_l_CVXBUSD) 
	price_asks_g_CVXBUSD = Decimal(price_asks_c_l_CVXBUSD) 
	qty_asks_g_CVXBUSD = Decimal(qty_asks_c_l_CVXBUSD) 


def loop_CVXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/cvxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_CVXBUSD) 
	ws.run_forever() 


Thread(target=loop_CVXBUSD).start() 
symbol_g_PEOPLEBUSD = 'PEOPLEBUSD' 
price_bids_g_PEOPLEBUSD = Decimal('0.0') 
qty_bids_g_PEOPLEBUSD = Decimal('0.0') 
price_asks_g_PEOPLEBUSD = Decimal('0.0') 
qty_asks_g_PEOPLEBUSD = Decimal('0.0') 
stepSize_g_PEOPLEBUSD = Decimal('0.1') 


def on_message_PEOPLEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PEOPLEBUSD = 'PEOPLEBUSD' 
	price_bids_c_l_PEOPLEBUSD = data['b'] 
	qty_bids_c_l_PEOPLEBUSD = data['B'] 
	price_asks_c_l_PEOPLEBUSD = data['a'] 
	qty_asks_c_l_PEOPLEBUSD = data['A'] 

	global symbol_g_PEOPLEBUSD 
	global price_bids_g_PEOPLEBUSD 
	global qty_bids_g_PEOPLEBUSD 
	global price_asks_g_PEOPLEBUSD 
	global qty_asks_g_PEOPLEBUSD 

	symbol_g_PEOPLEBUSD = symbol_c_l_PEOPLEBUSD 
	price_bids_g_PEOPLEBUSD = Decimal(price_bids_c_l_PEOPLEBUSD) 
	qty_bids_g_PEOPLEBUSD = Decimal(qty_bids_c_l_PEOPLEBUSD) 
	price_asks_g_PEOPLEBUSD = Decimal(price_asks_c_l_PEOPLEBUSD) 
	qty_asks_g_PEOPLEBUSD = Decimal(qty_asks_c_l_PEOPLEBUSD) 


def loop_PEOPLEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/peoplebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PEOPLEBUSD) 
	ws.run_forever() 


Thread(target=loop_PEOPLEBUSD).start() 
symbol_g_OOKIBUSD = 'OOKIBUSD' 
price_bids_g_OOKIBUSD = Decimal('0.0') 
qty_bids_g_OOKIBUSD = Decimal('0.0') 
price_asks_g_OOKIBUSD = Decimal('0.0') 
qty_asks_g_OOKIBUSD = Decimal('0.0') 
stepSize_g_OOKIBUSD = Decimal('1.0') 


def on_message_OOKIBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OOKIBUSD = 'OOKIBUSD' 
	price_bids_c_l_OOKIBUSD = data['b'] 
	qty_bids_c_l_OOKIBUSD = data['B'] 
	price_asks_c_l_OOKIBUSD = data['a'] 
	qty_asks_c_l_OOKIBUSD = data['A'] 

	global symbol_g_OOKIBUSD 
	global price_bids_g_OOKIBUSD 
	global qty_bids_g_OOKIBUSD 
	global price_asks_g_OOKIBUSD 
	global qty_asks_g_OOKIBUSD 

	symbol_g_OOKIBUSD = symbol_c_l_OOKIBUSD 
	price_bids_g_OOKIBUSD = Decimal(price_bids_c_l_OOKIBUSD) 
	qty_bids_g_OOKIBUSD = Decimal(qty_bids_c_l_OOKIBUSD) 
	price_asks_g_OOKIBUSD = Decimal(price_asks_c_l_OOKIBUSD) 
	qty_asks_g_OOKIBUSD = Decimal(qty_asks_c_l_OOKIBUSD) 


def loop_OOKIBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ookibusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OOKIBUSD) 
	ws.run_forever() 


Thread(target=loop_OOKIBUSD).start() 
symbol_g_MDTBUSD = 'MDTBUSD' 
price_bids_g_MDTBUSD = Decimal('0.0') 
qty_bids_g_MDTBUSD = Decimal('0.0') 
price_asks_g_MDTBUSD = Decimal('0.0') 
qty_asks_g_MDTBUSD = Decimal('0.0') 
stepSize_g_MDTBUSD = Decimal('0.1') 


def on_message_MDTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MDTBUSD = 'MDTBUSD' 
	price_bids_c_l_MDTBUSD = data['b'] 
	qty_bids_c_l_MDTBUSD = data['B'] 
	price_asks_c_l_MDTBUSD = data['a'] 
	qty_asks_c_l_MDTBUSD = data['A'] 

	global symbol_g_MDTBUSD 
	global price_bids_g_MDTBUSD 
	global qty_bids_g_MDTBUSD 
	global price_asks_g_MDTBUSD 
	global qty_asks_g_MDTBUSD 

	symbol_g_MDTBUSD = symbol_c_l_MDTBUSD 
	price_bids_g_MDTBUSD = Decimal(price_bids_c_l_MDTBUSD) 
	qty_bids_g_MDTBUSD = Decimal(qty_bids_c_l_MDTBUSD) 
	price_asks_g_MDTBUSD = Decimal(price_asks_c_l_MDTBUSD) 
	qty_asks_g_MDTBUSD = Decimal(qty_asks_c_l_MDTBUSD) 


def loop_MDTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mdtbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MDTBUSD) 
	ws.run_forever() 


Thread(target=loop_MDTBUSD).start() 
symbol_g_SPELLBUSD = 'SPELLBUSD' 
price_bids_g_SPELLBUSD = Decimal('0.0') 
qty_bids_g_SPELLBUSD = Decimal('0.0') 
price_asks_g_SPELLBUSD = Decimal('0.0') 
qty_asks_g_SPELLBUSD = Decimal('0.0') 
stepSize_g_SPELLBUSD = Decimal('1.0') 


def on_message_SPELLBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SPELLBUSD = 'SPELLBUSD' 
	price_bids_c_l_SPELLBUSD = data['b'] 
	qty_bids_c_l_SPELLBUSD = data['B'] 
	price_asks_c_l_SPELLBUSD = data['a'] 
	qty_asks_c_l_SPELLBUSD = data['A'] 

	global symbol_g_SPELLBUSD 
	global price_bids_g_SPELLBUSD 
	global qty_bids_g_SPELLBUSD 
	global price_asks_g_SPELLBUSD 
	global qty_asks_g_SPELLBUSD 

	symbol_g_SPELLBUSD = symbol_c_l_SPELLBUSD 
	price_bids_g_SPELLBUSD = Decimal(price_bids_c_l_SPELLBUSD) 
	qty_bids_g_SPELLBUSD = Decimal(qty_bids_c_l_SPELLBUSD) 
	price_asks_g_SPELLBUSD = Decimal(price_asks_c_l_SPELLBUSD) 
	qty_asks_g_SPELLBUSD = Decimal(qty_asks_c_l_SPELLBUSD) 


def loop_SPELLBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/spellbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SPELLBUSD) 
	ws.run_forever() 


Thread(target=loop_SPELLBUSD).start() 
symbol_g_JOEBUSD = 'JOEBUSD' 
price_bids_g_JOEBUSD = Decimal('0.0') 
qty_bids_g_JOEBUSD = Decimal('0.0') 
price_asks_g_JOEBUSD = Decimal('0.0') 
qty_asks_g_JOEBUSD = Decimal('0.0') 
stepSize_g_JOEBUSD = Decimal('0.01') 


def on_message_JOEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JOEBUSD = 'JOEBUSD' 
	price_bids_c_l_JOEBUSD = data['b'] 
	qty_bids_c_l_JOEBUSD = data['B'] 
	price_asks_c_l_JOEBUSD = data['a'] 
	qty_asks_c_l_JOEBUSD = data['A'] 

	global symbol_g_JOEBUSD 
	global price_bids_g_JOEBUSD 
	global qty_bids_g_JOEBUSD 
	global price_asks_g_JOEBUSD 
	global qty_asks_g_JOEBUSD 

	symbol_g_JOEBUSD = symbol_c_l_JOEBUSD 
	price_bids_g_JOEBUSD = Decimal(price_bids_c_l_JOEBUSD) 
	qty_bids_g_JOEBUSD = Decimal(qty_bids_c_l_JOEBUSD) 
	price_asks_g_JOEBUSD = Decimal(price_asks_c_l_JOEBUSD) 
	qty_asks_g_JOEBUSD = Decimal(qty_asks_c_l_JOEBUSD) 


def loop_JOEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/joebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JOEBUSD) 
	ws.run_forever() 


Thread(target=loop_JOEBUSD).start() 
symbol_g_ACHBUSD = 'ACHBUSD' 
price_bids_g_ACHBUSD = Decimal('0.0') 
qty_bids_g_ACHBUSD = Decimal('0.0') 
price_asks_g_ACHBUSD = Decimal('0.0') 
qty_asks_g_ACHBUSD = Decimal('0.0') 
stepSize_g_ACHBUSD = Decimal('1.0') 


def on_message_ACHBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ACHBUSD = 'ACHBUSD' 
	price_bids_c_l_ACHBUSD = data['b'] 
	qty_bids_c_l_ACHBUSD = data['B'] 
	price_asks_c_l_ACHBUSD = data['a'] 
	qty_asks_c_l_ACHBUSD = data['A'] 

	global symbol_g_ACHBUSD 
	global price_bids_g_ACHBUSD 
	global qty_bids_g_ACHBUSD 
	global price_asks_g_ACHBUSD 
	global qty_asks_g_ACHBUSD 

	symbol_g_ACHBUSD = symbol_c_l_ACHBUSD 
	price_bids_g_ACHBUSD = Decimal(price_bids_c_l_ACHBUSD) 
	qty_bids_g_ACHBUSD = Decimal(qty_bids_c_l_ACHBUSD) 
	price_asks_g_ACHBUSD = Decimal(price_asks_c_l_ACHBUSD) 
	qty_asks_g_ACHBUSD = Decimal(qty_asks_c_l_ACHBUSD) 


def loop_ACHBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/achbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ACHBUSD) 
	ws.run_forever() 


Thread(target=loop_ACHBUSD).start() 
symbol_g_IMXBUSD = 'IMXBUSD' 
price_bids_g_IMXBUSD = Decimal('0.0') 
qty_bids_g_IMXBUSD = Decimal('0.0') 
price_asks_g_IMXBUSD = Decimal('0.0') 
qty_asks_g_IMXBUSD = Decimal('0.0') 
stepSize_g_IMXBUSD = Decimal('0.01') 


def on_message_IMXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_IMXBUSD = 'IMXBUSD' 
	price_bids_c_l_IMXBUSD = data['b'] 
	qty_bids_c_l_IMXBUSD = data['B'] 
	price_asks_c_l_IMXBUSD = data['a'] 
	qty_asks_c_l_IMXBUSD = data['A'] 

	global symbol_g_IMXBUSD 
	global price_bids_g_IMXBUSD 
	global qty_bids_g_IMXBUSD 
	global price_asks_g_IMXBUSD 
	global qty_asks_g_IMXBUSD 

	symbol_g_IMXBUSD = symbol_c_l_IMXBUSD 
	price_bids_g_IMXBUSD = Decimal(price_bids_c_l_IMXBUSD) 
	qty_bids_g_IMXBUSD = Decimal(qty_bids_c_l_IMXBUSD) 
	price_asks_g_IMXBUSD = Decimal(price_asks_c_l_IMXBUSD) 
	qty_asks_g_IMXBUSD = Decimal(qty_asks_c_l_IMXBUSD) 


def loop_IMXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/imxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_IMXBUSD) 
	ws.run_forever() 


Thread(target=loop_IMXBUSD).start() 
symbol_g_GLMRBUSD = 'GLMRBUSD' 
price_bids_g_GLMRBUSD = Decimal('0.0') 
qty_bids_g_GLMRBUSD = Decimal('0.0') 
price_asks_g_GLMRBUSD = Decimal('0.0') 
qty_asks_g_GLMRBUSD = Decimal('0.0') 
stepSize_g_GLMRBUSD = Decimal('0.1') 


def on_message_GLMRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GLMRBUSD = 'GLMRBUSD' 
	price_bids_c_l_GLMRBUSD = data['b'] 
	qty_bids_c_l_GLMRBUSD = data['B'] 
	price_asks_c_l_GLMRBUSD = data['a'] 
	qty_asks_c_l_GLMRBUSD = data['A'] 

	global symbol_g_GLMRBUSD 
	global price_bids_g_GLMRBUSD 
	global qty_bids_g_GLMRBUSD 
	global price_asks_g_GLMRBUSD 
	global qty_asks_g_GLMRBUSD 

	symbol_g_GLMRBUSD = symbol_c_l_GLMRBUSD 
	price_bids_g_GLMRBUSD = Decimal(price_bids_c_l_GLMRBUSD) 
	qty_bids_g_GLMRBUSD = Decimal(qty_bids_c_l_GLMRBUSD) 
	price_asks_g_GLMRBUSD = Decimal(price_asks_c_l_GLMRBUSD) 
	qty_asks_g_GLMRBUSD = Decimal(qty_asks_c_l_GLMRBUSD) 


def loop_GLMRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/glmrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GLMRBUSD) 
	ws.run_forever() 


Thread(target=loop_GLMRBUSD).start() 
symbol_g_UMABUSD = 'UMABUSD' 
price_bids_g_UMABUSD = Decimal('0.0') 
qty_bids_g_UMABUSD = Decimal('0.0') 
price_asks_g_UMABUSD = Decimal('0.0') 
qty_asks_g_UMABUSD = Decimal('0.0') 
stepSize_g_UMABUSD = Decimal('0.1') 


def on_message_UMABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UMABUSD = 'UMABUSD' 
	price_bids_c_l_UMABUSD = data['b'] 
	qty_bids_c_l_UMABUSD = data['B'] 
	price_asks_c_l_UMABUSD = data['a'] 
	qty_asks_c_l_UMABUSD = data['A'] 

	global symbol_g_UMABUSD 
	global price_bids_g_UMABUSD 
	global qty_bids_g_UMABUSD 
	global price_asks_g_UMABUSD 
	global qty_asks_g_UMABUSD 

	symbol_g_UMABUSD = symbol_c_l_UMABUSD 
	price_bids_g_UMABUSD = Decimal(price_bids_c_l_UMABUSD) 
	qty_bids_g_UMABUSD = Decimal(qty_bids_c_l_UMABUSD) 
	price_asks_g_UMABUSD = Decimal(price_asks_c_l_UMABUSD) 
	qty_asks_g_UMABUSD = Decimal(qty_asks_c_l_UMABUSD) 


def loop_UMABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/umabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UMABUSD) 
	ws.run_forever() 


Thread(target=loop_UMABUSD).start() 
symbol_g_LOKABUSD = 'LOKABUSD' 
price_bids_g_LOKABUSD = Decimal('0.0') 
qty_bids_g_LOKABUSD = Decimal('0.0') 
price_asks_g_LOKABUSD = Decimal('0.0') 
qty_asks_g_LOKABUSD = Decimal('0.0') 
stepSize_g_LOKABUSD = Decimal('0.1') 


def on_message_LOKABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LOKABUSD = 'LOKABUSD' 
	price_bids_c_l_LOKABUSD = data['b'] 
	qty_bids_c_l_LOKABUSD = data['B'] 
	price_asks_c_l_LOKABUSD = data['a'] 
	qty_asks_c_l_LOKABUSD = data['A'] 

	global symbol_g_LOKABUSD 
	global price_bids_g_LOKABUSD 
	global qty_bids_g_LOKABUSD 
	global price_asks_g_LOKABUSD 
	global qty_asks_g_LOKABUSD 

	symbol_g_LOKABUSD = symbol_c_l_LOKABUSD 
	price_bids_g_LOKABUSD = Decimal(price_bids_c_l_LOKABUSD) 
	qty_bids_g_LOKABUSD = Decimal(qty_bids_c_l_LOKABUSD) 
	price_asks_g_LOKABUSD = Decimal(price_asks_c_l_LOKABUSD) 
	qty_asks_g_LOKABUSD = Decimal(qty_asks_c_l_LOKABUSD) 


def loop_LOKABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lokabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LOKABUSD) 
	ws.run_forever() 


Thread(target=loop_LOKABUSD).start() 
symbol_g_API3BUSD = 'API3BUSD' 
price_bids_g_API3BUSD = Decimal('0.0') 
qty_bids_g_API3BUSD = Decimal('0.0') 
price_asks_g_API3BUSD = Decimal('0.0') 
qty_asks_g_API3BUSD = Decimal('0.0') 
stepSize_g_API3BUSD = Decimal('0.01') 


def on_message_API3BUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_API3BUSD = 'API3BUSD' 
	price_bids_c_l_API3BUSD = data['b'] 
	qty_bids_c_l_API3BUSD = data['B'] 
	price_asks_c_l_API3BUSD = data['a'] 
	qty_asks_c_l_API3BUSD = data['A'] 

	global symbol_g_API3BUSD 
	global price_bids_g_API3BUSD 
	global qty_bids_g_API3BUSD 
	global price_asks_g_API3BUSD 
	global qty_asks_g_API3BUSD 

	symbol_g_API3BUSD = symbol_c_l_API3BUSD 
	price_bids_g_API3BUSD = Decimal(price_bids_c_l_API3BUSD) 
	qty_bids_g_API3BUSD = Decimal(qty_bids_c_l_API3BUSD) 
	price_asks_g_API3BUSD = Decimal(price_asks_c_l_API3BUSD) 
	qty_asks_g_API3BUSD = Decimal(qty_asks_c_l_API3BUSD) 


def loop_API3BUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/api3busd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_API3BUSD) 
	ws.run_forever() 


Thread(target=loop_API3BUSD).start() 
symbol_g_ACABUSD = 'ACABUSD' 
price_bids_g_ACABUSD = Decimal('0.0') 
qty_bids_g_ACABUSD = Decimal('0.0') 
price_asks_g_ACABUSD = Decimal('0.0') 
qty_asks_g_ACABUSD = Decimal('0.0') 
stepSize_g_ACABUSD = Decimal('0.01') 


def on_message_ACABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ACABUSD = 'ACABUSD' 
	price_bids_c_l_ACABUSD = data['b'] 
	qty_bids_c_l_ACABUSD = data['B'] 
	price_asks_c_l_ACABUSD = data['a'] 
	qty_asks_c_l_ACABUSD = data['A'] 

	global symbol_g_ACABUSD 
	global price_bids_g_ACABUSD 
	global qty_bids_g_ACABUSD 
	global price_asks_g_ACABUSD 
	global qty_asks_g_ACABUSD 

	symbol_g_ACABUSD = symbol_c_l_ACABUSD 
	price_bids_g_ACABUSD = Decimal(price_bids_c_l_ACABUSD) 
	qty_bids_g_ACABUSD = Decimal(qty_bids_c_l_ACABUSD) 
	price_asks_g_ACABUSD = Decimal(price_asks_c_l_ACABUSD) 
	qty_asks_g_ACABUSD = Decimal(qty_asks_c_l_ACABUSD) 


def loop_ACABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/acabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ACABUSD) 
	ws.run_forever() 


Thread(target=loop_ACABUSD).start() 
symbol_g_XNOBUSD = 'XNOBUSD' 
price_bids_g_XNOBUSD = Decimal('0.0') 
qty_bids_g_XNOBUSD = Decimal('0.0') 
price_asks_g_XNOBUSD = Decimal('0.0') 
qty_asks_g_XNOBUSD = Decimal('0.0') 
stepSize_g_XNOBUSD = Decimal('0.01') 


def on_message_XNOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_XNOBUSD = 'XNOBUSD' 
	price_bids_c_l_XNOBUSD = data['b'] 
	qty_bids_c_l_XNOBUSD = data['B'] 
	price_asks_c_l_XNOBUSD = data['a'] 
	qty_asks_c_l_XNOBUSD = data['A'] 

	global symbol_g_XNOBUSD 
	global price_bids_g_XNOBUSD 
	global qty_bids_g_XNOBUSD 
	global price_asks_g_XNOBUSD 
	global qty_asks_g_XNOBUSD 

	symbol_g_XNOBUSD = symbol_c_l_XNOBUSD 
	price_bids_g_XNOBUSD = Decimal(price_bids_c_l_XNOBUSD) 
	qty_bids_g_XNOBUSD = Decimal(qty_bids_c_l_XNOBUSD) 
	price_asks_g_XNOBUSD = Decimal(price_asks_c_l_XNOBUSD) 
	qty_asks_g_XNOBUSD = Decimal(qty_asks_c_l_XNOBUSD) 


def loop_XNOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/xnobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_XNOBUSD) 
	ws.run_forever() 


Thread(target=loop_XNOBUSD).start() 
symbol_g_WOOBUSD = 'WOOBUSD' 
price_bids_g_WOOBUSD = Decimal('0.0') 
qty_bids_g_WOOBUSD = Decimal('0.0') 
price_asks_g_WOOBUSD = Decimal('0.0') 
qty_asks_g_WOOBUSD = Decimal('0.0') 
stepSize_g_WOOBUSD = Decimal('0.1') 


def on_message_WOOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_WOOBUSD = 'WOOBUSD' 
	price_bids_c_l_WOOBUSD = data['b'] 
	qty_bids_c_l_WOOBUSD = data['B'] 
	price_asks_c_l_WOOBUSD = data['a'] 
	qty_asks_c_l_WOOBUSD = data['A'] 

	global symbol_g_WOOBUSD 
	global price_bids_g_WOOBUSD 
	global qty_bids_g_WOOBUSD 
	global price_asks_g_WOOBUSD 
	global qty_asks_g_WOOBUSD 

	symbol_g_WOOBUSD = symbol_c_l_WOOBUSD 
	price_bids_g_WOOBUSD = Decimal(price_bids_c_l_WOOBUSD) 
	qty_bids_g_WOOBUSD = Decimal(qty_bids_c_l_WOOBUSD) 
	price_asks_g_WOOBUSD = Decimal(price_asks_c_l_WOOBUSD) 
	qty_asks_g_WOOBUSD = Decimal(qty_asks_c_l_WOOBUSD) 


def loop_WOOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/woobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_WOOBUSD) 
	ws.run_forever() 


Thread(target=loop_WOOBUSD).start() 
symbol_g_TBUSD = 'TBUSD' 
price_bids_g_TBUSD = Decimal('0.0') 
qty_bids_g_TBUSD = Decimal('0.0') 
price_asks_g_TBUSD = Decimal('0.0') 
qty_asks_g_TBUSD = Decimal('0.0') 
stepSize_g_TBUSD = Decimal('0.1') 


def on_message_TBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_TBUSD = 'TBUSD' 
	price_bids_c_l_TBUSD = data['b'] 
	qty_bids_c_l_TBUSD = data['B'] 
	price_asks_c_l_TBUSD = data['a'] 
	qty_asks_c_l_TBUSD = data['A'] 

	global symbol_g_TBUSD 
	global price_bids_g_TBUSD 
	global qty_bids_g_TBUSD 
	global price_asks_g_TBUSD 
	global qty_asks_g_TBUSD 

	symbol_g_TBUSD = symbol_c_l_TBUSD 
	price_bids_g_TBUSD = Decimal(price_bids_c_l_TBUSD) 
	qty_bids_g_TBUSD = Decimal(qty_bids_c_l_TBUSD) 
	price_asks_g_TBUSD = Decimal(price_asks_c_l_TBUSD) 
	qty_asks_g_TBUSD = Decimal(qty_asks_c_l_TBUSD) 


def loop_TBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/tbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_TBUSD) 
	ws.run_forever() 


Thread(target=loop_TBUSD).start() 
symbol_g_ASTRBUSD = 'ASTRBUSD' 
price_bids_g_ASTRBUSD = Decimal('0.0') 
qty_bids_g_ASTRBUSD = Decimal('0.0') 
price_asks_g_ASTRBUSD = Decimal('0.0') 
qty_asks_g_ASTRBUSD = Decimal('0.0') 
stepSize_g_ASTRBUSD = Decimal('0.1') 


def on_message_ASTRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ASTRBUSD = 'ASTRBUSD' 
	price_bids_c_l_ASTRBUSD = data['b'] 
	qty_bids_c_l_ASTRBUSD = data['B'] 
	price_asks_c_l_ASTRBUSD = data['a'] 
	qty_asks_c_l_ASTRBUSD = data['A'] 

	global symbol_g_ASTRBUSD 
	global price_bids_g_ASTRBUSD 
	global qty_bids_g_ASTRBUSD 
	global price_asks_g_ASTRBUSD 
	global qty_asks_g_ASTRBUSD 

	symbol_g_ASTRBUSD = symbol_c_l_ASTRBUSD 
	price_bids_g_ASTRBUSD = Decimal(price_bids_c_l_ASTRBUSD) 
	qty_bids_g_ASTRBUSD = Decimal(qty_bids_c_l_ASTRBUSD) 
	price_asks_g_ASTRBUSD = Decimal(price_asks_c_l_ASTRBUSD) 
	qty_asks_g_ASTRBUSD = Decimal(qty_asks_c_l_ASTRBUSD) 


def loop_ASTRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/astrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ASTRBUSD) 
	ws.run_forever() 


Thread(target=loop_ASTRBUSD).start() 
symbol_g_GMTBUSD = 'GMTBUSD' 
price_bids_g_GMTBUSD = Decimal('0.0') 
qty_bids_g_GMTBUSD = Decimal('0.0') 
price_asks_g_GMTBUSD = Decimal('0.0') 
qty_asks_g_GMTBUSD = Decimal('0.0') 
stepSize_g_GMTBUSD = Decimal('0.1') 


def on_message_GMTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GMTBUSD = 'GMTBUSD' 
	price_bids_c_l_GMTBUSD = data['b'] 
	qty_bids_c_l_GMTBUSD = data['B'] 
	price_asks_c_l_GMTBUSD = data['a'] 
	qty_asks_c_l_GMTBUSD = data['A'] 

	global symbol_g_GMTBUSD 
	global price_bids_g_GMTBUSD 
	global qty_bids_g_GMTBUSD 
	global price_asks_g_GMTBUSD 
	global qty_asks_g_GMTBUSD 

	symbol_g_GMTBUSD = symbol_c_l_GMTBUSD 
	price_bids_g_GMTBUSD = Decimal(price_bids_c_l_GMTBUSD) 
	qty_bids_g_GMTBUSD = Decimal(qty_bids_c_l_GMTBUSD) 
	price_asks_g_GMTBUSD = Decimal(price_asks_c_l_GMTBUSD) 
	qty_asks_g_GMTBUSD = Decimal(qty_asks_c_l_GMTBUSD) 


def loop_GMTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gmtbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GMTBUSD) 
	ws.run_forever() 


Thread(target=loop_GMTBUSD).start() 
symbol_g_KDABUSD = 'KDABUSD' 
price_bids_g_KDABUSD = Decimal('0.0') 
qty_bids_g_KDABUSD = Decimal('0.0') 
price_asks_g_KDABUSD = Decimal('0.0') 
qty_asks_g_KDABUSD = Decimal('0.0') 
stepSize_g_KDABUSD = Decimal('0.01') 


def on_message_KDABUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_KDABUSD = 'KDABUSD' 
	price_bids_c_l_KDABUSD = data['b'] 
	qty_bids_c_l_KDABUSD = data['B'] 
	price_asks_c_l_KDABUSD = data['a'] 
	qty_asks_c_l_KDABUSD = data['A'] 

	global symbol_g_KDABUSD 
	global price_bids_g_KDABUSD 
	global qty_bids_g_KDABUSD 
	global price_asks_g_KDABUSD 
	global qty_asks_g_KDABUSD 

	symbol_g_KDABUSD = symbol_c_l_KDABUSD 
	price_bids_g_KDABUSD = Decimal(price_bids_c_l_KDABUSD) 
	qty_bids_g_KDABUSD = Decimal(qty_bids_c_l_KDABUSD) 
	price_asks_g_KDABUSD = Decimal(price_asks_c_l_KDABUSD) 
	qty_asks_g_KDABUSD = Decimal(qty_asks_c_l_KDABUSD) 


def loop_KDABUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/kdabusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_KDABUSD) 
	ws.run_forever() 


Thread(target=loop_KDABUSD).start() 
symbol_g_APEBUSD = 'APEBUSD' 
price_bids_g_APEBUSD = Decimal('0.0') 
qty_bids_g_APEBUSD = Decimal('0.0') 
price_asks_g_APEBUSD = Decimal('0.0') 
qty_asks_g_APEBUSD = Decimal('0.0') 
stepSize_g_APEBUSD = Decimal('0.01') 


def on_message_APEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APEBUSD = 'APEBUSD' 
	price_bids_c_l_APEBUSD = data['b'] 
	qty_bids_c_l_APEBUSD = data['B'] 
	price_asks_c_l_APEBUSD = data['a'] 
	qty_asks_c_l_APEBUSD = data['A'] 

	global symbol_g_APEBUSD 
	global price_bids_g_APEBUSD 
	global qty_bids_g_APEBUSD 
	global price_asks_g_APEBUSD 
	global qty_asks_g_APEBUSD 

	symbol_g_APEBUSD = symbol_c_l_APEBUSD 
	price_bids_g_APEBUSD = Decimal(price_bids_c_l_APEBUSD) 
	qty_bids_g_APEBUSD = Decimal(qty_bids_c_l_APEBUSD) 
	price_asks_g_APEBUSD = Decimal(price_asks_c_l_APEBUSD) 
	qty_asks_g_APEBUSD = Decimal(qty_asks_c_l_APEBUSD) 


def loop_APEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/apebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APEBUSD) 
	ws.run_forever() 


Thread(target=loop_APEBUSD).start() 
symbol_g_ALPINEBUSD = 'ALPINEBUSD' 
price_bids_g_ALPINEBUSD = Decimal('0.0') 
qty_bids_g_ALPINEBUSD = Decimal('0.0') 
price_asks_g_ALPINEBUSD = Decimal('0.0') 
qty_asks_g_ALPINEBUSD = Decimal('0.0') 
stepSize_g_ALPINEBUSD = Decimal('0.01') 


def on_message_ALPINEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALPINEBUSD = 'ALPINEBUSD' 
	price_bids_c_l_ALPINEBUSD = data['b'] 
	qty_bids_c_l_ALPINEBUSD = data['B'] 
	price_asks_c_l_ALPINEBUSD = data['a'] 
	qty_asks_c_l_ALPINEBUSD = data['A'] 

	global symbol_g_ALPINEBUSD 
	global price_bids_g_ALPINEBUSD 
	global qty_bids_g_ALPINEBUSD 
	global price_asks_g_ALPINEBUSD 
	global qty_asks_g_ALPINEBUSD 

	symbol_g_ALPINEBUSD = symbol_c_l_ALPINEBUSD 
	price_bids_g_ALPINEBUSD = Decimal(price_bids_c_l_ALPINEBUSD) 
	qty_bids_g_ALPINEBUSD = Decimal(qty_bids_c_l_ALPINEBUSD) 
	price_asks_g_ALPINEBUSD = Decimal(price_asks_c_l_ALPINEBUSD) 
	qty_asks_g_ALPINEBUSD = Decimal(qty_asks_c_l_ALPINEBUSD) 


def loop_ALPINEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alpinebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALPINEBUSD) 
	ws.run_forever() 


Thread(target=loop_ALPINEBUSD).start() 
symbol_g_BSWBUSD = 'BSWBUSD' 
price_bids_g_BSWBUSD = Decimal('0.0') 
qty_bids_g_BSWBUSD = Decimal('0.0') 
price_asks_g_BSWBUSD = Decimal('0.0') 
qty_asks_g_BSWBUSD = Decimal('0.0') 
stepSize_g_BSWBUSD = Decimal('0.1') 


def on_message_BSWBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BSWBUSD = 'BSWBUSD' 
	price_bids_c_l_BSWBUSD = data['b'] 
	qty_bids_c_l_BSWBUSD = data['B'] 
	price_asks_c_l_BSWBUSD = data['a'] 
	qty_asks_c_l_BSWBUSD = data['A'] 

	global symbol_g_BSWBUSD 
	global price_bids_g_BSWBUSD 
	global qty_bids_g_BSWBUSD 
	global price_asks_g_BSWBUSD 
	global qty_asks_g_BSWBUSD 

	symbol_g_BSWBUSD = symbol_c_l_BSWBUSD 
	price_bids_g_BSWBUSD = Decimal(price_bids_c_l_BSWBUSD) 
	qty_bids_g_BSWBUSD = Decimal(qty_bids_c_l_BSWBUSD) 
	price_asks_g_BSWBUSD = Decimal(price_asks_c_l_BSWBUSD) 
	qty_asks_g_BSWBUSD = Decimal(qty_asks_c_l_BSWBUSD) 


def loop_BSWBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bswbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BSWBUSD) 
	ws.run_forever() 


Thread(target=loop_BSWBUSD).start() 
symbol_g_SANTOSBUSD = 'SANTOSBUSD' 
price_bids_g_SANTOSBUSD = Decimal('0.0') 
qty_bids_g_SANTOSBUSD = Decimal('0.0') 
price_asks_g_SANTOSBUSD = Decimal('0.0') 
qty_asks_g_SANTOSBUSD = Decimal('0.0') 
stepSize_g_SANTOSBUSD = Decimal('0.01') 


def on_message_SANTOSBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SANTOSBUSD = 'SANTOSBUSD' 
	price_bids_c_l_SANTOSBUSD = data['b'] 
	qty_bids_c_l_SANTOSBUSD = data['B'] 
	price_asks_c_l_SANTOSBUSD = data['a'] 
	qty_asks_c_l_SANTOSBUSD = data['A'] 

	global symbol_g_SANTOSBUSD 
	global price_bids_g_SANTOSBUSD 
	global qty_bids_g_SANTOSBUSD 
	global price_asks_g_SANTOSBUSD 
	global qty_asks_g_SANTOSBUSD 

	symbol_g_SANTOSBUSD = symbol_c_l_SANTOSBUSD 
	price_bids_g_SANTOSBUSD = Decimal(price_bids_c_l_SANTOSBUSD) 
	qty_bids_g_SANTOSBUSD = Decimal(qty_bids_c_l_SANTOSBUSD) 
	price_asks_g_SANTOSBUSD = Decimal(price_asks_c_l_SANTOSBUSD) 
	qty_asks_g_SANTOSBUSD = Decimal(qty_asks_c_l_SANTOSBUSD) 


def loop_SANTOSBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/santosbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SANTOSBUSD) 
	ws.run_forever() 


Thread(target=loop_SANTOSBUSD).start() 
symbol_g_MULTIBUSD = 'MULTIBUSD' 
price_bids_g_MULTIBUSD = Decimal('0.0') 
qty_bids_g_MULTIBUSD = Decimal('0.0') 
price_asks_g_MULTIBUSD = Decimal('0.0') 
qty_asks_g_MULTIBUSD = Decimal('0.0') 
stepSize_g_MULTIBUSD = Decimal('0.001') 


def on_message_MULTIBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MULTIBUSD = 'MULTIBUSD' 
	price_bids_c_l_MULTIBUSD = data['b'] 
	qty_bids_c_l_MULTIBUSD = data['B'] 
	price_asks_c_l_MULTIBUSD = data['a'] 
	qty_asks_c_l_MULTIBUSD = data['A'] 

	global symbol_g_MULTIBUSD 
	global price_bids_g_MULTIBUSD 
	global qty_bids_g_MULTIBUSD 
	global price_asks_g_MULTIBUSD 
	global qty_asks_g_MULTIBUSD 

	symbol_g_MULTIBUSD = symbol_c_l_MULTIBUSD 
	price_bids_g_MULTIBUSD = Decimal(price_bids_c_l_MULTIBUSD) 
	qty_bids_g_MULTIBUSD = Decimal(qty_bids_c_l_MULTIBUSD) 
	price_asks_g_MULTIBUSD = Decimal(price_asks_c_l_MULTIBUSD) 
	qty_asks_g_MULTIBUSD = Decimal(qty_asks_c_l_MULTIBUSD) 


def loop_MULTIBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/multibusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MULTIBUSD) 
	ws.run_forever() 


Thread(target=loop_MULTIBUSD).start() 
symbol_g_PORTOBUSD = 'PORTOBUSD' 
price_bids_g_PORTOBUSD = Decimal('0.0') 
qty_bids_g_PORTOBUSD = Decimal('0.0') 
price_asks_g_PORTOBUSD = Decimal('0.0') 
qty_asks_g_PORTOBUSD = Decimal('0.0') 
stepSize_g_PORTOBUSD = Decimal('0.01') 


def on_message_PORTOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PORTOBUSD = 'PORTOBUSD' 
	price_bids_c_l_PORTOBUSD = data['b'] 
	qty_bids_c_l_PORTOBUSD = data['B'] 
	price_asks_c_l_PORTOBUSD = data['a'] 
	qty_asks_c_l_PORTOBUSD = data['A'] 

	global symbol_g_PORTOBUSD 
	global price_bids_g_PORTOBUSD 
	global qty_bids_g_PORTOBUSD 
	global price_asks_g_PORTOBUSD 
	global qty_asks_g_PORTOBUSD 

	symbol_g_PORTOBUSD = symbol_c_l_PORTOBUSD 
	price_bids_g_PORTOBUSD = Decimal(price_bids_c_l_PORTOBUSD) 
	qty_bids_g_PORTOBUSD = Decimal(qty_bids_c_l_PORTOBUSD) 
	price_asks_g_PORTOBUSD = Decimal(price_asks_c_l_PORTOBUSD) 
	qty_asks_g_PORTOBUSD = Decimal(qty_asks_c_l_PORTOBUSD) 


def loop_PORTOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/portobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PORTOBUSD) 
	ws.run_forever() 


Thread(target=loop_PORTOBUSD).start() 
symbol_g_BTTCBUSD = 'BTTCBUSD' 
price_bids_g_BTTCBUSD = Decimal('0.0') 
qty_bids_g_BTTCBUSD = Decimal('0.0') 
price_asks_g_BTTCBUSD = Decimal('0.0') 
qty_asks_g_BTTCBUSD = Decimal('0.0') 
stepSize_g_BTTCBUSD = Decimal('1.0') 


def on_message_BTTCBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BTTCBUSD = 'BTTCBUSD' 
	price_bids_c_l_BTTCBUSD = data['b'] 
	qty_bids_c_l_BTTCBUSD = data['B'] 
	price_asks_c_l_BTTCBUSD = data['a'] 
	qty_asks_c_l_BTTCBUSD = data['A'] 

	global symbol_g_BTTCBUSD 
	global price_bids_g_BTTCBUSD 
	global qty_bids_g_BTTCBUSD 
	global price_asks_g_BTTCBUSD 
	global qty_asks_g_BTTCBUSD 

	symbol_g_BTTCBUSD = symbol_c_l_BTTCBUSD 
	price_bids_g_BTTCBUSD = Decimal(price_bids_c_l_BTTCBUSD) 
	qty_bids_g_BTTCBUSD = Decimal(qty_bids_c_l_BTTCBUSD) 
	price_asks_g_BTTCBUSD = Decimal(price_asks_c_l_BTTCBUSD) 
	qty_asks_g_BTTCBUSD = Decimal(qty_asks_c_l_BTTCBUSD) 


def loop_BTTCBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bttcbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTTCBUSD) 
	ws.run_forever() 


Thread(target=loop_BTTCBUSD).start() 
symbol_g_MBLBUSD = 'MBLBUSD' 
price_bids_g_MBLBUSD = Decimal('0.0') 
qty_bids_g_MBLBUSD = Decimal('0.0') 
price_asks_g_MBLBUSD = Decimal('0.0') 
qty_asks_g_MBLBUSD = Decimal('0.0') 
stepSize_g_MBLBUSD = Decimal('1.0') 


def on_message_MBLBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MBLBUSD = 'MBLBUSD' 
	price_bids_c_l_MBLBUSD = data['b'] 
	qty_bids_c_l_MBLBUSD = data['B'] 
	price_asks_c_l_MBLBUSD = data['a'] 
	qty_asks_c_l_MBLBUSD = data['A'] 

	global symbol_g_MBLBUSD 
	global price_bids_g_MBLBUSD 
	global qty_bids_g_MBLBUSD 
	global price_asks_g_MBLBUSD 
	global qty_asks_g_MBLBUSD 

	symbol_g_MBLBUSD = symbol_c_l_MBLBUSD 
	price_bids_g_MBLBUSD = Decimal(price_bids_c_l_MBLBUSD) 
	qty_bids_g_MBLBUSD = Decimal(qty_bids_c_l_MBLBUSD) 
	price_asks_g_MBLBUSD = Decimal(price_asks_c_l_MBLBUSD) 
	qty_asks_g_MBLBUSD = Decimal(qty_asks_c_l_MBLBUSD) 


def loop_MBLBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mblbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MBLBUSD) 
	ws.run_forever() 


Thread(target=loop_MBLBUSD).start() 
symbol_g_MOBBUSD = 'MOBBUSD' 
price_bids_g_MOBBUSD = Decimal('0.0') 
qty_bids_g_MOBBUSD = Decimal('0.0') 
price_asks_g_MOBBUSD = Decimal('0.0') 
qty_asks_g_MOBBUSD = Decimal('0.0') 
stepSize_g_MOBBUSD = Decimal('0.01') 


def on_message_MOBBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MOBBUSD = 'MOBBUSD' 
	price_bids_c_l_MOBBUSD = data['b'] 
	qty_bids_c_l_MOBBUSD = data['B'] 
	price_asks_c_l_MOBBUSD = data['a'] 
	qty_asks_c_l_MOBBUSD = data['A'] 

	global symbol_g_MOBBUSD 
	global price_bids_g_MOBBUSD 
	global qty_bids_g_MOBBUSD 
	global price_asks_g_MOBBUSD 
	global qty_asks_g_MOBBUSD 

	symbol_g_MOBBUSD = symbol_c_l_MOBBUSD 
	price_bids_g_MOBBUSD = Decimal(price_bids_c_l_MOBBUSD) 
	qty_bids_g_MOBBUSD = Decimal(qty_bids_c_l_MOBBUSD) 
	price_asks_g_MOBBUSD = Decimal(price_asks_c_l_MOBBUSD) 
	qty_asks_g_MOBBUSD = Decimal(qty_asks_c_l_MOBBUSD) 


def loop_MOBBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/mobbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MOBBUSD) 
	ws.run_forever() 


Thread(target=loop_MOBBUSD).start() 
symbol_g_NEXOBUSD = 'NEXOBUSD' 
price_bids_g_NEXOBUSD = Decimal('0.0') 
qty_bids_g_NEXOBUSD = Decimal('0.0') 
price_asks_g_NEXOBUSD = Decimal('0.0') 
qty_asks_g_NEXOBUSD = Decimal('0.0') 
stepSize_g_NEXOBUSD = Decimal('0.01') 


def on_message_NEXOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEXOBUSD = 'NEXOBUSD' 
	price_bids_c_l_NEXOBUSD = data['b'] 
	qty_bids_c_l_NEXOBUSD = data['B'] 
	price_asks_c_l_NEXOBUSD = data['a'] 
	qty_asks_c_l_NEXOBUSD = data['A'] 

	global symbol_g_NEXOBUSD 
	global price_bids_g_NEXOBUSD 
	global qty_bids_g_NEXOBUSD 
	global price_asks_g_NEXOBUSD 
	global qty_asks_g_NEXOBUSD 

	symbol_g_NEXOBUSD = symbol_c_l_NEXOBUSD 
	price_bids_g_NEXOBUSD = Decimal(price_bids_c_l_NEXOBUSD) 
	qty_bids_g_NEXOBUSD = Decimal(qty_bids_c_l_NEXOBUSD) 
	price_asks_g_NEXOBUSD = Decimal(price_asks_c_l_NEXOBUSD) 
	qty_asks_g_NEXOBUSD = Decimal(qty_asks_c_l_NEXOBUSD) 


def loop_NEXOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nexobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEXOBUSD) 
	ws.run_forever() 


Thread(target=loop_NEXOBUSD).start() 
symbol_g_GALBUSD = 'GALBUSD' 
price_bids_g_GALBUSD = Decimal('0.0') 
qty_bids_g_GALBUSD = Decimal('0.0') 
price_asks_g_GALBUSD = Decimal('0.0') 
qty_asks_g_GALBUSD = Decimal('0.0') 
stepSize_g_GALBUSD = Decimal('0.001') 


def on_message_GALBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALBUSD = 'GALBUSD' 
	price_bids_c_l_GALBUSD = data['b'] 
	qty_bids_c_l_GALBUSD = data['B'] 
	price_asks_c_l_GALBUSD = data['a'] 
	qty_asks_c_l_GALBUSD = data['A'] 

	global symbol_g_GALBUSD 
	global price_bids_g_GALBUSD 
	global qty_bids_g_GALBUSD 
	global price_asks_g_GALBUSD 
	global qty_asks_g_GALBUSD 

	symbol_g_GALBUSD = symbol_c_l_GALBUSD 
	price_bids_g_GALBUSD = Decimal(price_bids_c_l_GALBUSD) 
	qty_bids_g_GALBUSD = Decimal(qty_bids_c_l_GALBUSD) 
	price_asks_g_GALBUSD = Decimal(price_asks_c_l_GALBUSD) 
	qty_asks_g_GALBUSD = Decimal(qty_asks_c_l_GALBUSD) 


def loop_GALBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALBUSD) 
	ws.run_forever() 


Thread(target=loop_GALBUSD).start() 
symbol_g_LDOBUSD = 'LDOBUSD' 
price_bids_g_LDOBUSD = Decimal('0.0') 
qty_bids_g_LDOBUSD = Decimal('0.0') 
price_asks_g_LDOBUSD = Decimal('0.0') 
qty_asks_g_LDOBUSD = Decimal('0.0') 
stepSize_g_LDOBUSD = Decimal('0.01') 


def on_message_LDOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LDOBUSD = 'LDOBUSD' 
	price_bids_c_l_LDOBUSD = data['b'] 
	qty_bids_c_l_LDOBUSD = data['B'] 
	price_asks_c_l_LDOBUSD = data['a'] 
	qty_asks_c_l_LDOBUSD = data['A'] 

	global symbol_g_LDOBUSD 
	global price_bids_g_LDOBUSD 
	global qty_bids_g_LDOBUSD 
	global price_asks_g_LDOBUSD 
	global qty_asks_g_LDOBUSD 

	symbol_g_LDOBUSD = symbol_c_l_LDOBUSD 
	price_bids_g_LDOBUSD = Decimal(price_bids_c_l_LDOBUSD) 
	qty_bids_g_LDOBUSD = Decimal(qty_bids_c_l_LDOBUSD) 
	price_asks_g_LDOBUSD = Decimal(price_asks_c_l_LDOBUSD) 
	qty_asks_g_LDOBUSD = Decimal(qty_asks_c_l_LDOBUSD) 


def loop_LDOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ldobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LDOBUSD) 
	ws.run_forever() 


Thread(target=loop_LDOBUSD).start() 
symbol_g_EPXBUSD = 'EPXBUSD' 
price_bids_g_EPXBUSD = Decimal('0.0') 
qty_bids_g_EPXBUSD = Decimal('0.0') 
price_asks_g_EPXBUSD = Decimal('0.0') 
qty_asks_g_EPXBUSD = Decimal('0.0') 
stepSize_g_EPXBUSD = Decimal('1.0') 


def on_message_EPXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EPXBUSD = 'EPXBUSD' 
	price_bids_c_l_EPXBUSD = data['b'] 
	qty_bids_c_l_EPXBUSD = data['B'] 
	price_asks_c_l_EPXBUSD = data['a'] 
	qty_asks_c_l_EPXBUSD = data['A'] 

	global symbol_g_EPXBUSD 
	global price_bids_g_EPXBUSD 
	global qty_bids_g_EPXBUSD 
	global price_asks_g_EPXBUSD 
	global qty_asks_g_EPXBUSD 

	symbol_g_EPXBUSD = symbol_c_l_EPXBUSD 
	price_bids_g_EPXBUSD = Decimal(price_bids_c_l_EPXBUSD) 
	qty_bids_g_EPXBUSD = Decimal(qty_bids_c_l_EPXBUSD) 
	price_asks_g_EPXBUSD = Decimal(price_asks_c_l_EPXBUSD) 
	qty_asks_g_EPXBUSD = Decimal(qty_asks_c_l_EPXBUSD) 


def loop_EPXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/epxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EPXBUSD) 
	ws.run_forever() 


Thread(target=loop_EPXBUSD).start() 
symbol_g_STEEMBUSD = 'STEEMBUSD' 
price_bids_g_STEEMBUSD = Decimal('0.0') 
qty_bids_g_STEEMBUSD = Decimal('0.0') 
price_asks_g_STEEMBUSD = Decimal('0.0') 
qty_asks_g_STEEMBUSD = Decimal('0.0') 
stepSize_g_STEEMBUSD = Decimal('0.1') 


def on_message_STEEMBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STEEMBUSD = 'STEEMBUSD' 
	price_bids_c_l_STEEMBUSD = data['b'] 
	qty_bids_c_l_STEEMBUSD = data['B'] 
	price_asks_c_l_STEEMBUSD = data['a'] 
	qty_asks_c_l_STEEMBUSD = data['A'] 

	global symbol_g_STEEMBUSD 
	global price_bids_g_STEEMBUSD 
	global qty_bids_g_STEEMBUSD 
	global price_asks_g_STEEMBUSD 
	global qty_asks_g_STEEMBUSD 

	symbol_g_STEEMBUSD = symbol_c_l_STEEMBUSD 
	price_bids_g_STEEMBUSD = Decimal(price_bids_c_l_STEEMBUSD) 
	qty_bids_g_STEEMBUSD = Decimal(qty_bids_c_l_STEEMBUSD) 
	price_asks_g_STEEMBUSD = Decimal(price_asks_c_l_STEEMBUSD) 
	qty_asks_g_STEEMBUSD = Decimal(qty_asks_c_l_STEEMBUSD) 


def loop_STEEMBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/steembusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STEEMBUSD) 
	ws.run_forever() 


Thread(target=loop_STEEMBUSD).start() 
symbol_g_REIBUSD = 'REIBUSD' 
price_bids_g_REIBUSD = Decimal('0.0') 
qty_bids_g_REIBUSD = Decimal('0.0') 
price_asks_g_REIBUSD = Decimal('0.0') 
qty_asks_g_REIBUSD = Decimal('0.0') 
stepSize_g_REIBUSD = Decimal('0.1') 


def on_message_REIBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_REIBUSD = 'REIBUSD' 
	price_bids_c_l_REIBUSD = data['b'] 
	qty_bids_c_l_REIBUSD = data['B'] 
	price_asks_c_l_REIBUSD = data['a'] 
	qty_asks_c_l_REIBUSD = data['A'] 

	global symbol_g_REIBUSD 
	global price_bids_g_REIBUSD 
	global qty_bids_g_REIBUSD 
	global price_asks_g_REIBUSD 
	global qty_asks_g_REIBUSD 

	symbol_g_REIBUSD = symbol_c_l_REIBUSD 
	price_bids_g_REIBUSD = Decimal(price_bids_c_l_REIBUSD) 
	qty_bids_g_REIBUSD = Decimal(qty_bids_c_l_REIBUSD) 
	price_asks_g_REIBUSD = Decimal(price_asks_c_l_REIBUSD) 
	qty_asks_g_REIBUSD = Decimal(qty_asks_c_l_REIBUSD) 


def loop_REIBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/reibusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_REIBUSD) 
	ws.run_forever() 


Thread(target=loop_REIBUSD).start() 
symbol_g_DREPBUSD = 'DREPBUSD' 
price_bids_g_DREPBUSD = Decimal('0.0') 
qty_bids_g_DREPBUSD = Decimal('0.0') 
price_asks_g_DREPBUSD = Decimal('0.0') 
qty_asks_g_DREPBUSD = Decimal('0.0') 
stepSize_g_DREPBUSD = Decimal('1.0') 


def on_message_DREPBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DREPBUSD = 'DREPBUSD' 
	price_bids_c_l_DREPBUSD = data['b'] 
	qty_bids_c_l_DREPBUSD = data['B'] 
	price_asks_c_l_DREPBUSD = data['a'] 
	qty_asks_c_l_DREPBUSD = data['A'] 

	global symbol_g_DREPBUSD 
	global price_bids_g_DREPBUSD 
	global qty_bids_g_DREPBUSD 
	global price_asks_g_DREPBUSD 
	global qty_asks_g_DREPBUSD 

	symbol_g_DREPBUSD = symbol_c_l_DREPBUSD 
	price_bids_g_DREPBUSD = Decimal(price_bids_c_l_DREPBUSD) 
	qty_bids_g_DREPBUSD = Decimal(qty_bids_c_l_DREPBUSD) 
	price_asks_g_DREPBUSD = Decimal(price_asks_c_l_DREPBUSD) 
	qty_asks_g_DREPBUSD = Decimal(qty_asks_c_l_DREPBUSD) 


def loop_DREPBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/drepbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DREPBUSD) 
	ws.run_forever() 


Thread(target=loop_DREPBUSD).start() 
symbol_g_AKROBUSD = 'AKROBUSD' 
price_bids_g_AKROBUSD = Decimal('0.0') 
qty_bids_g_AKROBUSD = Decimal('0.0') 
price_asks_g_AKROBUSD = Decimal('0.0') 
qty_asks_g_AKROBUSD = Decimal('0.0') 
stepSize_g_AKROBUSD = Decimal('1.0') 


def on_message_AKROBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AKROBUSD = 'AKROBUSD' 
	price_bids_c_l_AKROBUSD = data['b'] 
	qty_bids_c_l_AKROBUSD = data['B'] 
	price_asks_c_l_AKROBUSD = data['a'] 
	qty_asks_c_l_AKROBUSD = data['A'] 

	global symbol_g_AKROBUSD 
	global price_bids_g_AKROBUSD 
	global qty_bids_g_AKROBUSD 
	global price_asks_g_AKROBUSD 
	global qty_asks_g_AKROBUSD 

	symbol_g_AKROBUSD = symbol_c_l_AKROBUSD 
	price_bids_g_AKROBUSD = Decimal(price_bids_c_l_AKROBUSD) 
	qty_bids_g_AKROBUSD = Decimal(qty_bids_c_l_AKROBUSD) 
	price_asks_g_AKROBUSD = Decimal(price_asks_c_l_AKROBUSD) 
	qty_asks_g_AKROBUSD = Decimal(qty_asks_c_l_AKROBUSD) 


def loop_AKROBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/akrobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AKROBUSD) 
	ws.run_forever() 


Thread(target=loop_AKROBUSD).start() 
symbol_g_PUNDIXBUSD = 'PUNDIXBUSD' 
price_bids_g_PUNDIXBUSD = Decimal('0.0') 
qty_bids_g_PUNDIXBUSD = Decimal('0.0') 
price_asks_g_PUNDIXBUSD = Decimal('0.0') 
qty_asks_g_PUNDIXBUSD = Decimal('0.0') 
stepSize_g_PUNDIXBUSD = Decimal('0.1') 


def on_message_PUNDIXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PUNDIXBUSD = 'PUNDIXBUSD' 
	price_bids_c_l_PUNDIXBUSD = data['b'] 
	qty_bids_c_l_PUNDIXBUSD = data['B'] 
	price_asks_c_l_PUNDIXBUSD = data['a'] 
	qty_asks_c_l_PUNDIXBUSD = data['A'] 

	global symbol_g_PUNDIXBUSD 
	global price_bids_g_PUNDIXBUSD 
	global qty_bids_g_PUNDIXBUSD 
	global price_asks_g_PUNDIXBUSD 
	global qty_asks_g_PUNDIXBUSD 

	symbol_g_PUNDIXBUSD = symbol_c_l_PUNDIXBUSD 
	price_bids_g_PUNDIXBUSD = Decimal(price_bids_c_l_PUNDIXBUSD) 
	qty_bids_g_PUNDIXBUSD = Decimal(qty_bids_c_l_PUNDIXBUSD) 
	price_asks_g_PUNDIXBUSD = Decimal(price_asks_c_l_PUNDIXBUSD) 
	qty_asks_g_PUNDIXBUSD = Decimal(qty_asks_c_l_PUNDIXBUSD) 


def loop_PUNDIXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/pundixbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PUNDIXBUSD) 
	ws.run_forever() 


Thread(target=loop_PUNDIXBUSD).start() 
symbol_g_LUNCBUSD = 'LUNCBUSD' 
price_bids_g_LUNCBUSD = Decimal('0.0') 
qty_bids_g_LUNCBUSD = Decimal('0.0') 
price_asks_g_LUNCBUSD = Decimal('0.0') 
qty_asks_g_LUNCBUSD = Decimal('0.0') 
stepSize_g_LUNCBUSD = Decimal('0.01') 


def on_message_LUNCBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LUNCBUSD = 'LUNCBUSD' 
	price_bids_c_l_LUNCBUSD = data['b'] 
	qty_bids_c_l_LUNCBUSD = data['B'] 
	price_asks_c_l_LUNCBUSD = data['a'] 
	qty_asks_c_l_LUNCBUSD = data['A'] 

	global symbol_g_LUNCBUSD 
	global price_bids_g_LUNCBUSD 
	global qty_bids_g_LUNCBUSD 
	global price_asks_g_LUNCBUSD 
	global qty_asks_g_LUNCBUSD 

	symbol_g_LUNCBUSD = symbol_c_l_LUNCBUSD 
	price_bids_g_LUNCBUSD = Decimal(price_bids_c_l_LUNCBUSD) 
	qty_bids_g_LUNCBUSD = Decimal(qty_bids_c_l_LUNCBUSD) 
	price_asks_g_LUNCBUSD = Decimal(price_asks_c_l_LUNCBUSD) 
	qty_asks_g_LUNCBUSD = Decimal(qty_asks_c_l_LUNCBUSD) 


def loop_LUNCBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/luncbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LUNCBUSD) 
	ws.run_forever() 


Thread(target=loop_LUNCBUSD).start() 
symbol_g_OPBUSD = 'OPBUSD' 
price_bids_g_OPBUSD = Decimal('0.0') 
qty_bids_g_OPBUSD = Decimal('0.0') 
price_asks_g_OPBUSD = Decimal('0.0') 
qty_asks_g_OPBUSD = Decimal('0.0') 
stepSize_g_OPBUSD = Decimal('0.01') 


def on_message_OPBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OPBUSD = 'OPBUSD' 
	price_bids_c_l_OPBUSD = data['b'] 
	qty_bids_c_l_OPBUSD = data['B'] 
	price_asks_c_l_OPBUSD = data['a'] 
	qty_asks_c_l_OPBUSD = data['A'] 

	global symbol_g_OPBUSD 
	global price_bids_g_OPBUSD 
	global qty_bids_g_OPBUSD 
	global price_asks_g_OPBUSD 
	global qty_asks_g_OPBUSD 

	symbol_g_OPBUSD = symbol_c_l_OPBUSD 
	price_bids_g_OPBUSD = Decimal(price_bids_c_l_OPBUSD) 
	qty_bids_g_OPBUSD = Decimal(qty_bids_c_l_OPBUSD) 
	price_asks_g_OPBUSD = Decimal(price_asks_c_l_OPBUSD) 
	qty_asks_g_OPBUSD = Decimal(qty_asks_c_l_OPBUSD) 


def loop_OPBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/opbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OPBUSD) 
	ws.run_forever() 


Thread(target=loop_OPBUSD).start() 
symbol_g_OGBUSD = 'OGBUSD' 
price_bids_g_OGBUSD = Decimal('0.0') 
qty_bids_g_OGBUSD = Decimal('0.0') 
price_asks_g_OGBUSD = Decimal('0.0') 
qty_asks_g_OGBUSD = Decimal('0.0') 
stepSize_g_OGBUSD = Decimal('0.1') 


def on_message_OGBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OGBUSD = 'OGBUSD' 
	price_bids_c_l_OGBUSD = data['b'] 
	qty_bids_c_l_OGBUSD = data['B'] 
	price_asks_c_l_OGBUSD = data['a'] 
	qty_asks_c_l_OGBUSD = data['A'] 

	global symbol_g_OGBUSD 
	global price_bids_g_OGBUSD 
	global qty_bids_g_OGBUSD 
	global price_asks_g_OGBUSD 
	global qty_asks_g_OGBUSD 

	symbol_g_OGBUSD = symbol_c_l_OGBUSD 
	price_bids_g_OGBUSD = Decimal(price_bids_c_l_OGBUSD) 
	qty_bids_g_OGBUSD = Decimal(qty_bids_c_l_OGBUSD) 
	price_asks_g_OGBUSD = Decimal(price_asks_c_l_OGBUSD) 
	qty_asks_g_OGBUSD = Decimal(qty_asks_c_l_OGBUSD) 


def loop_OGBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/ogbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OGBUSD) 
	ws.run_forever() 


Thread(target=loop_OGBUSD).start() 
symbol_g_ASRBUSD = 'ASRBUSD' 
price_bids_g_ASRBUSD = Decimal('0.0') 
qty_bids_g_ASRBUSD = Decimal('0.0') 
price_asks_g_ASRBUSD = Decimal('0.0') 
qty_asks_g_ASRBUSD = Decimal('0.0') 
stepSize_g_ASRBUSD = Decimal('0.1') 


def on_message_ASRBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ASRBUSD = 'ASRBUSD' 
	price_bids_c_l_ASRBUSD = data['b'] 
	qty_bids_c_l_ASRBUSD = data['B'] 
	price_asks_c_l_ASRBUSD = data['a'] 
	qty_asks_c_l_ASRBUSD = data['A'] 

	global symbol_g_ASRBUSD 
	global price_bids_g_ASRBUSD 
	global qty_bids_g_ASRBUSD 
	global price_asks_g_ASRBUSD 
	global qty_asks_g_ASRBUSD 

	symbol_g_ASRBUSD = symbol_c_l_ASRBUSD 
	price_bids_g_ASRBUSD = Decimal(price_bids_c_l_ASRBUSD) 
	qty_bids_g_ASRBUSD = Decimal(qty_bids_c_l_ASRBUSD) 
	price_asks_g_ASRBUSD = Decimal(price_asks_c_l_ASRBUSD) 
	qty_asks_g_ASRBUSD = Decimal(qty_asks_c_l_ASRBUSD) 


def loop_ASRBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/asrbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ASRBUSD) 
	ws.run_forever() 


Thread(target=loop_ASRBUSD).start() 
symbol_g_FIROBUSD = 'FIROBUSD' 
price_bids_g_FIROBUSD = Decimal('0.0') 
qty_bids_g_FIROBUSD = Decimal('0.0') 
price_asks_g_FIROBUSD = Decimal('0.0') 
qty_asks_g_FIROBUSD = Decimal('0.0') 
stepSize_g_FIROBUSD = Decimal('0.1') 


def on_message_FIROBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_FIROBUSD = 'FIROBUSD' 
	price_bids_c_l_FIROBUSD = data['b'] 
	qty_bids_c_l_FIROBUSD = data['B'] 
	price_asks_c_l_FIROBUSD = data['a'] 
	qty_asks_c_l_FIROBUSD = data['A'] 

	global symbol_g_FIROBUSD 
	global price_bids_g_FIROBUSD 
	global qty_bids_g_FIROBUSD 
	global price_asks_g_FIROBUSD 
	global qty_asks_g_FIROBUSD 

	symbol_g_FIROBUSD = symbol_c_l_FIROBUSD 
	price_bids_g_FIROBUSD = Decimal(price_bids_c_l_FIROBUSD) 
	qty_bids_g_FIROBUSD = Decimal(qty_bids_c_l_FIROBUSD) 
	price_asks_g_FIROBUSD = Decimal(price_asks_c_l_FIROBUSD) 
	qty_asks_g_FIROBUSD = Decimal(qty_asks_c_l_FIROBUSD) 


def loop_FIROBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/firobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_FIROBUSD) 
	ws.run_forever() 


Thread(target=loop_FIROBUSD).start() 
symbol_g_NKNBUSD = 'NKNBUSD' 
price_bids_g_NKNBUSD = Decimal('0.0') 
qty_bids_g_NKNBUSD = Decimal('0.0') 
price_asks_g_NKNBUSD = Decimal('0.0') 
qty_asks_g_NKNBUSD = Decimal('0.0') 
stepSize_g_NKNBUSD = Decimal('1.0') 


def on_message_NKNBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NKNBUSD = 'NKNBUSD' 
	price_bids_c_l_NKNBUSD = data['b'] 
	qty_bids_c_l_NKNBUSD = data['B'] 
	price_asks_c_l_NKNBUSD = data['a'] 
	qty_asks_c_l_NKNBUSD = data['A'] 

	global symbol_g_NKNBUSD 
	global price_bids_g_NKNBUSD 
	global qty_bids_g_NKNBUSD 
	global price_asks_g_NKNBUSD 
	global qty_asks_g_NKNBUSD 

	symbol_g_NKNBUSD = symbol_c_l_NKNBUSD 
	price_bids_g_NKNBUSD = Decimal(price_bids_c_l_NKNBUSD) 
	qty_bids_g_NKNBUSD = Decimal(qty_bids_c_l_NKNBUSD) 
	price_asks_g_NKNBUSD = Decimal(price_asks_c_l_NKNBUSD) 
	qty_asks_g_NKNBUSD = Decimal(qty_asks_c_l_NKNBUSD) 


def loop_NKNBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/nknbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NKNBUSD) 
	ws.run_forever() 


Thread(target=loop_NKNBUSD).start() 
symbol_g_LEVERBUSD = 'LEVERBUSD' 
price_bids_g_LEVERBUSD = Decimal('0.0') 
qty_bids_g_LEVERBUSD = Decimal('0.0') 
price_asks_g_LEVERBUSD = Decimal('0.0') 
qty_asks_g_LEVERBUSD = Decimal('0.0') 
stepSize_g_LEVERBUSD = Decimal('1.0') 


def on_message_LEVERBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LEVERBUSD = 'LEVERBUSD' 
	price_bids_c_l_LEVERBUSD = data['b'] 
	qty_bids_c_l_LEVERBUSD = data['B'] 
	price_asks_c_l_LEVERBUSD = data['a'] 
	qty_asks_c_l_LEVERBUSD = data['A'] 

	global symbol_g_LEVERBUSD 
	global price_bids_g_LEVERBUSD 
	global qty_bids_g_LEVERBUSD 
	global price_asks_g_LEVERBUSD 
	global qty_asks_g_LEVERBUSD 

	symbol_g_LEVERBUSD = symbol_c_l_LEVERBUSD 
	price_bids_g_LEVERBUSD = Decimal(price_bids_c_l_LEVERBUSD) 
	qty_bids_g_LEVERBUSD = Decimal(qty_bids_c_l_LEVERBUSD) 
	price_asks_g_LEVERBUSD = Decimal(price_asks_c_l_LEVERBUSD) 
	qty_asks_g_LEVERBUSD = Decimal(qty_asks_c_l_LEVERBUSD) 


def loop_LEVERBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/leverbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LEVERBUSD) 
	ws.run_forever() 


Thread(target=loop_LEVERBUSD).start() 
symbol_g_STGBUSD = 'STGBUSD' 
price_bids_g_STGBUSD = Decimal('0.0') 
qty_bids_g_STGBUSD = Decimal('0.0') 
price_asks_g_STGBUSD = Decimal('0.0') 
qty_asks_g_STGBUSD = Decimal('0.0') 
stepSize_g_STGBUSD = Decimal('0.1') 


def on_message_STGBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_STGBUSD = 'STGBUSD' 
	price_bids_c_l_STGBUSD = data['b'] 
	qty_bids_c_l_STGBUSD = data['B'] 
	price_asks_c_l_STGBUSD = data['a'] 
	qty_asks_c_l_STGBUSD = data['A'] 

	global symbol_g_STGBUSD 
	global price_bids_g_STGBUSD 
	global qty_bids_g_STGBUSD 
	global price_asks_g_STGBUSD 
	global qty_asks_g_STGBUSD 

	symbol_g_STGBUSD = symbol_c_l_STGBUSD 
	price_bids_g_STGBUSD = Decimal(price_bids_c_l_STGBUSD) 
	qty_bids_g_STGBUSD = Decimal(qty_bids_c_l_STGBUSD) 
	price_asks_g_STGBUSD = Decimal(price_asks_c_l_STGBUSD) 
	qty_asks_g_STGBUSD = Decimal(qty_asks_c_l_STGBUSD) 


def loop_STGBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/stgbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_STGBUSD) 
	ws.run_forever() 


Thread(target=loop_STGBUSD).start() 
symbol_g_PHBBUSD = 'PHBBUSD' 
price_bids_g_PHBBUSD = Decimal('0.0') 
qty_bids_g_PHBBUSD = Decimal('0.0') 
price_asks_g_PHBBUSD = Decimal('0.0') 
qty_asks_g_PHBBUSD = Decimal('0.0') 
stepSize_g_PHBBUSD = Decimal('1.0') 


def on_message_PHBBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PHBBUSD = 'PHBBUSD' 
	price_bids_c_l_PHBBUSD = data['b'] 
	qty_bids_c_l_PHBBUSD = data['B'] 
	price_asks_c_l_PHBBUSD = data['a'] 
	qty_asks_c_l_PHBBUSD = data['A'] 

	global symbol_g_PHBBUSD 
	global price_bids_g_PHBBUSD 
	global qty_bids_g_PHBBUSD 
	global price_asks_g_PHBBUSD 
	global qty_asks_g_PHBBUSD 

	symbol_g_PHBBUSD = symbol_c_l_PHBBUSD 
	price_bids_g_PHBBUSD = Decimal(price_bids_c_l_PHBBUSD) 
	qty_bids_g_PHBBUSD = Decimal(qty_bids_c_l_PHBBUSD) 
	price_asks_g_PHBBUSD = Decimal(price_asks_c_l_PHBBUSD) 
	qty_asks_g_PHBBUSD = Decimal(qty_asks_c_l_PHBBUSD) 


def loop_PHBBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/phbbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PHBBUSD) 
	ws.run_forever() 


Thread(target=loop_PHBBUSD).start() 
symbol_g_NEBLBUSD = 'NEBLBUSD' 
price_bids_g_NEBLBUSD = Decimal('0.0') 
qty_bids_g_NEBLBUSD = Decimal('0.0') 
price_asks_g_NEBLBUSD = Decimal('0.0') 
qty_asks_g_NEBLBUSD = Decimal('0.0') 
stepSize_g_NEBLBUSD = Decimal('0.1') 


def on_message_NEBLBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEBLBUSD = 'NEBLBUSD' 
	price_bids_c_l_NEBLBUSD = data['b'] 
	qty_bids_c_l_NEBLBUSD = data['B'] 
	price_asks_c_l_NEBLBUSD = data['a'] 
	qty_asks_c_l_NEBLBUSD = data['A'] 

	global symbol_g_NEBLBUSD 
	global price_bids_g_NEBLBUSD 
	global qty_bids_g_NEBLBUSD 
	global price_asks_g_NEBLBUSD 
	global qty_asks_g_NEBLBUSD 

	symbol_g_NEBLBUSD = symbol_c_l_NEBLBUSD 
	price_bids_g_NEBLBUSD = Decimal(price_bids_c_l_NEBLBUSD) 
	qty_bids_g_NEBLBUSD = Decimal(qty_bids_c_l_NEBLBUSD) 
	price_asks_g_NEBLBUSD = Decimal(price_asks_c_l_NEBLBUSD) 
	qty_asks_g_NEBLBUSD = Decimal(qty_asks_c_l_NEBLBUSD) 


def loop_NEBLBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/neblbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEBLBUSD) 
	ws.run_forever() 


Thread(target=loop_NEBLBUSD).start() 
symbol_g_GMXBUSD = 'GMXBUSD' 
price_bids_g_GMXBUSD = Decimal('0.0') 
qty_bids_g_GMXBUSD = Decimal('0.0') 
price_asks_g_GMXBUSD = Decimal('0.0') 
qty_asks_g_GMXBUSD = Decimal('0.0') 
stepSize_g_GMXBUSD = Decimal('0.001') 


def on_message_GMXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GMXBUSD = 'GMXBUSD' 
	price_bids_c_l_GMXBUSD = data['b'] 
	qty_bids_c_l_GMXBUSD = data['B'] 
	price_asks_c_l_GMXBUSD = data['a'] 
	qty_asks_c_l_GMXBUSD = data['A'] 

	global symbol_g_GMXBUSD 
	global price_bids_g_GMXBUSD 
	global qty_bids_g_GMXBUSD 
	global price_asks_g_GMXBUSD 
	global qty_asks_g_GMXBUSD 

	symbol_g_GMXBUSD = symbol_c_l_GMXBUSD 
	price_bids_g_GMXBUSD = Decimal(price_bids_c_l_GMXBUSD) 
	qty_bids_g_GMXBUSD = Decimal(qty_bids_c_l_GMXBUSD) 
	price_asks_g_GMXBUSD = Decimal(price_asks_c_l_GMXBUSD) 
	qty_asks_g_GMXBUSD = Decimal(qty_asks_c_l_GMXBUSD) 


def loop_GMXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gmxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GMXBUSD) 
	ws.run_forever() 


Thread(target=loop_GMXBUSD).start() 
symbol_g_POLYXBUSD = 'POLYXBUSD' 
price_bids_g_POLYXBUSD = Decimal('0.0') 
qty_bids_g_POLYXBUSD = Decimal('0.0') 
price_asks_g_POLYXBUSD = Decimal('0.0') 
qty_asks_g_POLYXBUSD = Decimal('0.0') 
stepSize_g_POLYXBUSD = Decimal('0.1') 


def on_message_POLYXBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_POLYXBUSD = 'POLYXBUSD' 
	price_bids_c_l_POLYXBUSD = data['b'] 
	qty_bids_c_l_POLYXBUSD = data['B'] 
	price_asks_c_l_POLYXBUSD = data['a'] 
	qty_asks_c_l_POLYXBUSD = data['A'] 

	global symbol_g_POLYXBUSD 
	global price_bids_g_POLYXBUSD 
	global qty_bids_g_POLYXBUSD 
	global price_asks_g_POLYXBUSD 
	global qty_asks_g_POLYXBUSD 

	symbol_g_POLYXBUSD = symbol_c_l_POLYXBUSD 
	price_bids_g_POLYXBUSD = Decimal(price_bids_c_l_POLYXBUSD) 
	qty_bids_g_POLYXBUSD = Decimal(qty_bids_c_l_POLYXBUSD) 
	price_asks_g_POLYXBUSD = Decimal(price_asks_c_l_POLYXBUSD) 
	qty_asks_g_POLYXBUSD = Decimal(qty_asks_c_l_POLYXBUSD) 


def loop_POLYXBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/polyxbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_POLYXBUSD) 
	ws.run_forever() 


Thread(target=loop_POLYXBUSD).start() 
symbol_g_APTBUSD = 'APTBUSD' 
price_bids_g_APTBUSD = Decimal('0.0') 
qty_bids_g_APTBUSD = Decimal('0.0') 
price_asks_g_APTBUSD = Decimal('0.0') 
qty_asks_g_APTBUSD = Decimal('0.0') 
stepSize_g_APTBUSD = Decimal('0.01') 


def on_message_APTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APTBUSD = 'APTBUSD' 
	price_bids_c_l_APTBUSD = data['b'] 
	qty_bids_c_l_APTBUSD = data['B'] 
	price_asks_c_l_APTBUSD = data['a'] 
	qty_asks_c_l_APTBUSD = data['A'] 

	global symbol_g_APTBUSD 
	global price_bids_g_APTBUSD 
	global qty_bids_g_APTBUSD 
	global price_asks_g_APTBUSD 
	global qty_asks_g_APTBUSD 

	symbol_g_APTBUSD = symbol_c_l_APTBUSD 
	price_bids_g_APTBUSD = Decimal(price_bids_c_l_APTBUSD) 
	qty_bids_g_APTBUSD = Decimal(qty_bids_c_l_APTBUSD) 
	price_asks_g_APTBUSD = Decimal(price_asks_c_l_APTBUSD) 
	qty_asks_g_APTBUSD = Decimal(qty_asks_c_l_APTBUSD) 


def loop_APTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/aptbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APTBUSD) 
	ws.run_forever() 


Thread(target=loop_APTBUSD).start() 
symbol_g_OSMOBUSD = 'OSMOBUSD' 
price_bids_g_OSMOBUSD = Decimal('0.0') 
qty_bids_g_OSMOBUSD = Decimal('0.0') 
price_asks_g_OSMOBUSD = Decimal('0.0') 
qty_asks_g_OSMOBUSD = Decimal('0.0') 
stepSize_g_OSMOBUSD = Decimal('0.01') 


def on_message_OSMOBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OSMOBUSD = 'OSMOBUSD' 
	price_bids_c_l_OSMOBUSD = data['b'] 
	qty_bids_c_l_OSMOBUSD = data['B'] 
	price_asks_c_l_OSMOBUSD = data['a'] 
	qty_asks_c_l_OSMOBUSD = data['A'] 

	global symbol_g_OSMOBUSD 
	global price_bids_g_OSMOBUSD 
	global qty_bids_g_OSMOBUSD 
	global price_asks_g_OSMOBUSD 
	global qty_asks_g_OSMOBUSD 

	symbol_g_OSMOBUSD = symbol_c_l_OSMOBUSD 
	price_bids_g_OSMOBUSD = Decimal(price_bids_c_l_OSMOBUSD) 
	qty_bids_g_OSMOBUSD = Decimal(qty_bids_c_l_OSMOBUSD) 
	price_asks_g_OSMOBUSD = Decimal(price_asks_c_l_OSMOBUSD) 
	qty_asks_g_OSMOBUSD = Decimal(qty_asks_c_l_OSMOBUSD) 


def loop_OSMOBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/osmobusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OSMOBUSD) 
	ws.run_forever() 


Thread(target=loop_OSMOBUSD).start() 
symbol_g_HFTBUSD = 'HFTBUSD' 
price_bids_g_HFTBUSD = Decimal('0.0') 
qty_bids_g_HFTBUSD = Decimal('0.0') 
price_asks_g_HFTBUSD = Decimal('0.0') 
qty_asks_g_HFTBUSD = Decimal('0.0') 
stepSize_g_HFTBUSD = Decimal('0.1') 


def on_message_HFTBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HFTBUSD = 'HFTBUSD' 
	price_bids_c_l_HFTBUSD = data['b'] 
	qty_bids_c_l_HFTBUSD = data['B'] 
	price_asks_c_l_HFTBUSD = data['a'] 
	qty_asks_c_l_HFTBUSD = data['A'] 

	global symbol_g_HFTBUSD 
	global price_bids_g_HFTBUSD 
	global qty_bids_g_HFTBUSD 
	global price_asks_g_HFTBUSD 
	global qty_asks_g_HFTBUSD 

	symbol_g_HFTBUSD = symbol_c_l_HFTBUSD 
	price_bids_g_HFTBUSD = Decimal(price_bids_c_l_HFTBUSD) 
	qty_bids_g_HFTBUSD = Decimal(qty_bids_c_l_HFTBUSD) 
	price_asks_g_HFTBUSD = Decimal(price_asks_c_l_HFTBUSD) 
	qty_asks_g_HFTBUSD = Decimal(qty_asks_c_l_HFTBUSD) 


def loop_HFTBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hftbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HFTBUSD) 
	ws.run_forever() 


Thread(target=loop_HFTBUSD).start() 
symbol_g_VITEBUSD = 'VITEBUSD' 
price_bids_g_VITEBUSD = Decimal('0.0') 
qty_bids_g_VITEBUSD = Decimal('0.0') 
price_asks_g_VITEBUSD = Decimal('0.0') 
qty_asks_g_VITEBUSD = Decimal('0.0') 
stepSize_g_VITEBUSD = Decimal('0.1') 


def on_message_VITEBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_VITEBUSD = 'VITEBUSD' 
	price_bids_c_l_VITEBUSD = data['b'] 
	qty_bids_c_l_VITEBUSD = data['B'] 
	price_asks_c_l_VITEBUSD = data['a'] 
	qty_asks_c_l_VITEBUSD = data['A'] 

	global symbol_g_VITEBUSD 
	global price_bids_g_VITEBUSD 
	global qty_bids_g_VITEBUSD 
	global price_asks_g_VITEBUSD 
	global qty_asks_g_VITEBUSD 

	symbol_g_VITEBUSD = symbol_c_l_VITEBUSD 
	price_bids_g_VITEBUSD = Decimal(price_bids_c_l_VITEBUSD) 
	qty_bids_g_VITEBUSD = Decimal(qty_bids_c_l_VITEBUSD) 
	price_asks_g_VITEBUSD = Decimal(price_asks_c_l_VITEBUSD) 
	qty_asks_g_VITEBUSD = Decimal(qty_asks_c_l_VITEBUSD) 


def loop_VITEBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/vitebusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_VITEBUSD) 
	ws.run_forever() 


Thread(target=loop_VITEBUSD).start() 
symbol_g_HOOKBUSD = 'HOOKBUSD' 
price_bids_g_HOOKBUSD = Decimal('0.0') 
qty_bids_g_HOOKBUSD = Decimal('0.0') 
price_asks_g_HOOKBUSD = Decimal('0.0') 
qty_asks_g_HOOKBUSD = Decimal('0.0') 
stepSize_g_HOOKBUSD = Decimal('0.1') 


def on_message_HOOKBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_HOOKBUSD = 'HOOKBUSD' 
	price_bids_c_l_HOOKBUSD = data['b'] 
	qty_bids_c_l_HOOKBUSD = data['B'] 
	price_asks_c_l_HOOKBUSD = data['a'] 
	qty_asks_c_l_HOOKBUSD = data['A'] 

	global symbol_g_HOOKBUSD 
	global price_bids_g_HOOKBUSD 
	global qty_bids_g_HOOKBUSD 
	global price_asks_g_HOOKBUSD 
	global qty_asks_g_HOOKBUSD 

	symbol_g_HOOKBUSD = symbol_c_l_HOOKBUSD 
	price_bids_g_HOOKBUSD = Decimal(price_bids_c_l_HOOKBUSD) 
	qty_bids_g_HOOKBUSD = Decimal(qty_bids_c_l_HOOKBUSD) 
	price_asks_g_HOOKBUSD = Decimal(price_asks_c_l_HOOKBUSD) 
	qty_asks_g_HOOKBUSD = Decimal(qty_asks_c_l_HOOKBUSD) 


def loop_HOOKBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/hookbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_HOOKBUSD) 
	ws.run_forever() 


Thread(target=loop_HOOKBUSD).start() 
symbol_g_MAGICBUSD = 'MAGICBUSD' 
price_bids_g_MAGICBUSD = Decimal('0.0') 
qty_bids_g_MAGICBUSD = Decimal('0.0') 
price_asks_g_MAGICBUSD = Decimal('0.0') 
qty_asks_g_MAGICBUSD = Decimal('0.0') 
stepSize_g_MAGICBUSD = Decimal('0.1') 


def on_message_MAGICBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_MAGICBUSD = 'MAGICBUSD' 
	price_bids_c_l_MAGICBUSD = data['b'] 
	qty_bids_c_l_MAGICBUSD = data['B'] 
	price_asks_c_l_MAGICBUSD = data['a'] 
	qty_asks_c_l_MAGICBUSD = data['A'] 

	global symbol_g_MAGICBUSD 
	global price_bids_g_MAGICBUSD 
	global qty_bids_g_MAGICBUSD 
	global price_asks_g_MAGICBUSD 
	global qty_asks_g_MAGICBUSD 

	symbol_g_MAGICBUSD = symbol_c_l_MAGICBUSD 
	price_bids_g_MAGICBUSD = Decimal(price_bids_c_l_MAGICBUSD) 
	qty_bids_g_MAGICBUSD = Decimal(qty_bids_c_l_MAGICBUSD) 
	price_asks_g_MAGICBUSD = Decimal(price_asks_c_l_MAGICBUSD) 
	qty_asks_g_MAGICBUSD = Decimal(qty_asks_c_l_MAGICBUSD) 


def loop_MAGICBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/magicbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_MAGICBUSD) 
	ws.run_forever() 


Thread(target=loop_MAGICBUSD).start() 
symbol_g_RPLBUSD = 'RPLBUSD' 
price_bids_g_RPLBUSD = Decimal('0.0') 
qty_bids_g_RPLBUSD = Decimal('0.0') 
price_asks_g_RPLBUSD = Decimal('0.0') 
qty_asks_g_RPLBUSD = Decimal('0.0') 
stepSize_g_RPLBUSD = Decimal('0.01') 


def on_message_RPLBUSD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RPLBUSD = 'RPLBUSD' 
	price_bids_c_l_RPLBUSD = data['b'] 
	qty_bids_c_l_RPLBUSD = data['B'] 
	price_asks_c_l_RPLBUSD = data['a'] 
	qty_asks_c_l_RPLBUSD = data['A'] 

	global symbol_g_RPLBUSD 
	global price_bids_g_RPLBUSD 
	global qty_bids_g_RPLBUSD 
	global price_asks_g_RPLBUSD 
	global qty_asks_g_RPLBUSD 

	symbol_g_RPLBUSD = symbol_c_l_RPLBUSD 
	price_bids_g_RPLBUSD = Decimal(price_bids_c_l_RPLBUSD) 
	qty_bids_g_RPLBUSD = Decimal(qty_bids_c_l_RPLBUSD) 
	price_asks_g_RPLBUSD = Decimal(price_asks_c_l_RPLBUSD) 
	qty_asks_g_RPLBUSD = Decimal(qty_asks_c_l_RPLBUSD) 


def loop_RPLBUSD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/rplbusd@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RPLBUSD) 
	ws.run_forever() 


Thread(target=loop_RPLBUSD).start() 
symbol_g_BCHEUR = 'BCHEUR' 
price_bids_g_BCHEUR = Decimal('0.0') 
qty_bids_g_BCHEUR = Decimal('0.0') 
price_asks_g_BCHEUR = Decimal('0.0') 
qty_asks_g_BCHEUR = Decimal('0.0') 
stepSize_g_BCHEUR = Decimal('0.001') 


def on_message_BCHEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_BCHEUR = 'BCHEUR' 
	price_bids_c_l_BCHEUR = data['b'] 
	qty_bids_c_l_BCHEUR = data['B'] 
	price_asks_c_l_BCHEUR = data['a'] 
	qty_asks_c_l_BCHEUR = data['A'] 

	global symbol_g_BCHEUR 
	global price_bids_g_BCHEUR 
	global qty_bids_g_BCHEUR 
	global price_asks_g_BCHEUR 
	global qty_asks_g_BCHEUR 

	symbol_g_BCHEUR = symbol_c_l_BCHEUR 
	price_bids_g_BCHEUR = Decimal(price_bids_c_l_BCHEUR) 
	qty_bids_g_BCHEUR = Decimal(qty_bids_c_l_BCHEUR) 
	price_asks_g_BCHEUR = Decimal(price_asks_c_l_BCHEUR) 
	qty_asks_g_BCHEUR = Decimal(qty_asks_c_l_BCHEUR) 


def loop_BCHEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/bcheur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BCHEUR) 
	ws.run_forever() 


Thread(target=loop_BCHEUR).start() 
symbol_g_SXPEUR = 'SXPEUR' 
price_bids_g_SXPEUR = Decimal('0.0') 
qty_bids_g_SXPEUR = Decimal('0.0') 
price_asks_g_SXPEUR = Decimal('0.0') 
qty_asks_g_SXPEUR = Decimal('0.0') 
stepSize_g_SXPEUR = Decimal('0.1') 


def on_message_SXPEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SXPEUR = 'SXPEUR' 
	price_bids_c_l_SXPEUR = data['b'] 
	qty_bids_c_l_SXPEUR = data['B'] 
	price_asks_c_l_SXPEUR = data['a'] 
	qty_asks_c_l_SXPEUR = data['A'] 

	global symbol_g_SXPEUR 
	global price_bids_g_SXPEUR 
	global qty_bids_g_SXPEUR 
	global price_asks_g_SXPEUR 
	global qty_asks_g_SXPEUR 

	symbol_g_SXPEUR = symbol_c_l_SXPEUR 
	price_bids_g_SXPEUR = Decimal(price_bids_c_l_SXPEUR) 
	qty_bids_g_SXPEUR = Decimal(qty_bids_c_l_SXPEUR) 
	price_asks_g_SXPEUR = Decimal(price_asks_c_l_SXPEUR) 
	qty_asks_g_SXPEUR = Decimal(qty_asks_c_l_SXPEUR) 


def loop_SXPEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sxpeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SXPEUR) 
	ws.run_forever() 


Thread(target=loop_SXPEUR).start() 
symbol_g_DOTEUR = 'DOTEUR' 
price_bids_g_DOTEUR = Decimal('0.0') 
qty_bids_g_DOTEUR = Decimal('0.0') 
price_asks_g_DOTEUR = Decimal('0.0') 
qty_asks_g_DOTEUR = Decimal('0.0') 
stepSize_g_DOTEUR = Decimal('0.01') 


def on_message_DOTEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOTEUR = 'DOTEUR' 
	price_bids_c_l_DOTEUR = data['b'] 
	qty_bids_c_l_DOTEUR = data['B'] 
	price_asks_c_l_DOTEUR = data['a'] 
	qty_asks_c_l_DOTEUR = data['A'] 

	global symbol_g_DOTEUR 
	global price_bids_g_DOTEUR 
	global qty_bids_g_DOTEUR 
	global price_asks_g_DOTEUR 
	global qty_asks_g_DOTEUR 

	symbol_g_DOTEUR = symbol_c_l_DOTEUR 
	price_bids_g_DOTEUR = Decimal(price_bids_c_l_DOTEUR) 
	qty_bids_g_DOTEUR = Decimal(qty_bids_c_l_DOTEUR) 
	price_asks_g_DOTEUR = Decimal(price_asks_c_l_DOTEUR) 
	qty_asks_g_DOTEUR = Decimal(qty_asks_c_l_DOTEUR) 


def loop_DOTEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/doteur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOTEUR) 
	ws.run_forever() 


Thread(target=loop_DOTEUR).start() 
symbol_g_YFIEUR = 'YFIEUR' 
price_bids_g_YFIEUR = Decimal('0.0') 
qty_bids_g_YFIEUR = Decimal('0.0') 
price_asks_g_YFIEUR = Decimal('0.0') 
qty_asks_g_YFIEUR = Decimal('0.0') 
stepSize_g_YFIEUR = Decimal('0.00001') 


def on_message_YFIEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_YFIEUR = 'YFIEUR' 
	price_bids_c_l_YFIEUR = data['b'] 
	qty_bids_c_l_YFIEUR = data['B'] 
	price_asks_c_l_YFIEUR = data['a'] 
	qty_asks_c_l_YFIEUR = data['A'] 

	global symbol_g_YFIEUR 
	global price_bids_g_YFIEUR 
	global qty_bids_g_YFIEUR 
	global price_asks_g_YFIEUR 
	global qty_asks_g_YFIEUR 

	symbol_g_YFIEUR = symbol_c_l_YFIEUR 
	price_bids_g_YFIEUR = Decimal(price_bids_c_l_YFIEUR) 
	qty_bids_g_YFIEUR = Decimal(qty_bids_c_l_YFIEUR) 
	price_asks_g_YFIEUR = Decimal(price_asks_c_l_YFIEUR) 
	qty_asks_g_YFIEUR = Decimal(qty_asks_c_l_YFIEUR) 


def loop_YFIEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/yfieur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_YFIEUR) 
	ws.run_forever() 


Thread(target=loop_YFIEUR).start() 
symbol_g_GRTEUR = 'GRTEUR' 
price_bids_g_GRTEUR = Decimal('0.0') 
qty_bids_g_GRTEUR = Decimal('0.0') 
price_asks_g_GRTEUR = Decimal('0.0') 
qty_asks_g_GRTEUR = Decimal('0.0') 
stepSize_g_GRTEUR = Decimal('1.0') 


def on_message_GRTEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GRTEUR = 'GRTEUR' 
	price_bids_c_l_GRTEUR = data['b'] 
	qty_bids_c_l_GRTEUR = data['B'] 
	price_asks_c_l_GRTEUR = data['a'] 
	qty_asks_c_l_GRTEUR = data['A'] 

	global symbol_g_GRTEUR 
	global price_bids_g_GRTEUR 
	global qty_bids_g_GRTEUR 
	global price_asks_g_GRTEUR 
	global qty_asks_g_GRTEUR 

	symbol_g_GRTEUR = symbol_c_l_GRTEUR 
	price_bids_g_GRTEUR = Decimal(price_bids_c_l_GRTEUR) 
	qty_bids_g_GRTEUR = Decimal(qty_bids_c_l_GRTEUR) 
	price_asks_g_GRTEUR = Decimal(price_asks_c_l_GRTEUR) 
	qty_asks_g_GRTEUR = Decimal(qty_asks_c_l_GRTEUR) 


def loop_GRTEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/grteur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GRTEUR) 
	ws.run_forever() 


Thread(target=loop_GRTEUR).start() 
symbol_g_EGLDEUR = 'EGLDEUR' 
price_bids_g_EGLDEUR = Decimal('0.0') 
qty_bids_g_EGLDEUR = Decimal('0.0') 
price_asks_g_EGLDEUR = Decimal('0.0') 
qty_asks_g_EGLDEUR = Decimal('0.0') 
stepSize_g_EGLDEUR = Decimal('0.01') 


def on_message_EGLDEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_EGLDEUR = 'EGLDEUR' 
	price_bids_c_l_EGLDEUR = data['b'] 
	qty_bids_c_l_EGLDEUR = data['B'] 
	price_asks_c_l_EGLDEUR = data['a'] 
	qty_asks_c_l_EGLDEUR = data['A'] 

	global symbol_g_EGLDEUR 
	global price_bids_g_EGLDEUR 
	global qty_bids_g_EGLDEUR 
	global price_asks_g_EGLDEUR 
	global qty_asks_g_EGLDEUR 

	symbol_g_EGLDEUR = symbol_c_l_EGLDEUR 
	price_bids_g_EGLDEUR = Decimal(price_bids_c_l_EGLDEUR) 
	qty_bids_g_EGLDEUR = Decimal(qty_bids_c_l_EGLDEUR) 
	price_asks_g_EGLDEUR = Decimal(price_asks_c_l_EGLDEUR) 
	qty_asks_g_EGLDEUR = Decimal(qty_asks_c_l_EGLDEUR) 


def loop_EGLDEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/egldeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_EGLDEUR) 
	ws.run_forever() 


Thread(target=loop_EGLDEUR).start() 
symbol_g_AVAXEUR = 'AVAXEUR' 
price_bids_g_AVAXEUR = Decimal('0.0') 
qty_bids_g_AVAXEUR = Decimal('0.0') 
price_asks_g_AVAXEUR = Decimal('0.0') 
qty_asks_g_AVAXEUR = Decimal('0.0') 
stepSize_g_AVAXEUR = Decimal('0.01') 


def on_message_AVAXEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AVAXEUR = 'AVAXEUR' 
	price_bids_c_l_AVAXEUR = data['b'] 
	qty_bids_c_l_AVAXEUR = data['B'] 
	price_asks_c_l_AVAXEUR = data['a'] 
	qty_asks_c_l_AVAXEUR = data['A'] 

	global symbol_g_AVAXEUR 
	global price_bids_g_AVAXEUR 
	global qty_bids_g_AVAXEUR 
	global price_asks_g_AVAXEUR 
	global qty_asks_g_AVAXEUR 

	symbol_g_AVAXEUR = symbol_c_l_AVAXEUR 
	price_bids_g_AVAXEUR = Decimal(price_bids_c_l_AVAXEUR) 
	qty_bids_g_AVAXEUR = Decimal(qty_bids_c_l_AVAXEUR) 
	price_asks_g_AVAXEUR = Decimal(price_asks_c_l_AVAXEUR) 
	qty_asks_g_AVAXEUR = Decimal(qty_asks_c_l_AVAXEUR) 


def loop_AVAXEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/avaxeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AVAXEUR) 
	ws.run_forever() 


Thread(target=loop_AVAXEUR).start() 
symbol_g_UNIEUR = 'UNIEUR' 
price_bids_g_UNIEUR = Decimal('0.0') 
qty_bids_g_UNIEUR = Decimal('0.0') 
price_asks_g_UNIEUR = Decimal('0.0') 
qty_asks_g_UNIEUR = Decimal('0.0') 
stepSize_g_UNIEUR = Decimal('0.01') 


def on_message_UNIEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_UNIEUR = 'UNIEUR' 
	price_bids_c_l_UNIEUR = data['b'] 
	qty_bids_c_l_UNIEUR = data['B'] 
	price_asks_c_l_UNIEUR = data['a'] 
	qty_asks_c_l_UNIEUR = data['A'] 

	global symbol_g_UNIEUR 
	global price_bids_g_UNIEUR 
	global qty_bids_g_UNIEUR 
	global price_asks_g_UNIEUR 
	global qty_asks_g_UNIEUR 

	symbol_g_UNIEUR = symbol_c_l_UNIEUR 
	price_bids_g_UNIEUR = Decimal(price_bids_c_l_UNIEUR) 
	qty_bids_g_UNIEUR = Decimal(qty_bids_c_l_UNIEUR) 
	price_asks_g_UNIEUR = Decimal(price_asks_c_l_UNIEUR) 
	qty_asks_g_UNIEUR = Decimal(qty_asks_c_l_UNIEUR) 


def loop_UNIEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/unieur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_UNIEUR) 
	ws.run_forever() 


Thread(target=loop_UNIEUR).start() 
symbol_g_SHIBEUR = 'SHIBEUR' 
price_bids_g_SHIBEUR = Decimal('0.0') 
qty_bids_g_SHIBEUR = Decimal('0.0') 
price_asks_g_SHIBEUR = Decimal('0.0') 
qty_asks_g_SHIBEUR = Decimal('0.0') 
stepSize_g_SHIBEUR = Decimal('1.0') 


def on_message_SHIBEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SHIBEUR = 'SHIBEUR' 
	price_bids_c_l_SHIBEUR = data['b'] 
	qty_bids_c_l_SHIBEUR = data['B'] 
	price_asks_c_l_SHIBEUR = data['a'] 
	qty_asks_c_l_SHIBEUR = data['A'] 

	global symbol_g_SHIBEUR 
	global price_bids_g_SHIBEUR 
	global qty_bids_g_SHIBEUR 
	global price_asks_g_SHIBEUR 
	global qty_asks_g_SHIBEUR 

	symbol_g_SHIBEUR = symbol_c_l_SHIBEUR 
	price_bids_g_SHIBEUR = Decimal(price_bids_c_l_SHIBEUR) 
	qty_bids_g_SHIBEUR = Decimal(qty_bids_c_l_SHIBEUR) 
	price_asks_g_SHIBEUR = Decimal(price_asks_c_l_SHIBEUR) 
	qty_asks_g_SHIBEUR = Decimal(qty_asks_c_l_SHIBEUR) 


def loop_SHIBEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/shibeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SHIBEUR) 
	ws.run_forever() 


Thread(target=loop_SHIBEUR).start() 
symbol_g_SOLEUR = 'SOLEUR' 
price_bids_g_SOLEUR = Decimal('0.0') 
qty_bids_g_SOLEUR = Decimal('0.0') 
price_asks_g_SOLEUR = Decimal('0.0') 
qty_asks_g_SOLEUR = Decimal('0.0') 
stepSize_g_SOLEUR = Decimal('0.01') 


def on_message_SOLEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SOLEUR = 'SOLEUR' 
	price_bids_c_l_SOLEUR = data['b'] 
	qty_bids_c_l_SOLEUR = data['B'] 
	price_asks_c_l_SOLEUR = data['a'] 
	qty_asks_c_l_SOLEUR = data['A'] 

	global symbol_g_SOLEUR 
	global price_bids_g_SOLEUR 
	global qty_bids_g_SOLEUR 
	global price_asks_g_SOLEUR 
	global qty_asks_g_SOLEUR 

	symbol_g_SOLEUR = symbol_c_l_SOLEUR 
	price_bids_g_SOLEUR = Decimal(price_bids_c_l_SOLEUR) 
	qty_bids_g_SOLEUR = Decimal(qty_bids_c_l_SOLEUR) 
	price_asks_g_SOLEUR = Decimal(price_asks_c_l_SOLEUR) 
	qty_asks_g_SOLEUR = Decimal(qty_asks_c_l_SOLEUR) 


def loop_SOLEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/soleur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SOLEUR) 
	ws.run_forever() 


Thread(target=loop_SOLEUR).start() 
symbol_g_ICPEUR = 'ICPEUR' 
price_bids_g_ICPEUR = Decimal('0.0') 
qty_bids_g_ICPEUR = Decimal('0.0') 
price_asks_g_ICPEUR = Decimal('0.0') 
qty_asks_g_ICPEUR = Decimal('0.0') 
stepSize_g_ICPEUR = Decimal('0.01') 


def on_message_ICPEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ICPEUR = 'ICPEUR' 
	price_bids_c_l_ICPEUR = data['b'] 
	qty_bids_c_l_ICPEUR = data['B'] 
	price_asks_c_l_ICPEUR = data['a'] 
	qty_asks_c_l_ICPEUR = data['A'] 

	global symbol_g_ICPEUR 
	global price_bids_g_ICPEUR 
	global qty_bids_g_ICPEUR 
	global price_asks_g_ICPEUR 
	global qty_asks_g_ICPEUR 

	symbol_g_ICPEUR = symbol_c_l_ICPEUR 
	price_bids_g_ICPEUR = Decimal(price_bids_c_l_ICPEUR) 
	qty_bids_g_ICPEUR = Decimal(qty_bids_c_l_ICPEUR) 
	price_asks_g_ICPEUR = Decimal(price_asks_c_l_ICPEUR) 
	qty_asks_g_ICPEUR = Decimal(qty_asks_c_l_ICPEUR) 


def loop_ICPEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/icpeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ICPEUR) 
	ws.run_forever() 


Thread(target=loop_ICPEUR).start() 
symbol_g_RUNEEUR = 'RUNEEUR' 
price_bids_g_RUNEEUR = Decimal('0.0') 
qty_bids_g_RUNEEUR = Decimal('0.0') 
price_asks_g_RUNEEUR = Decimal('0.0') 
qty_asks_g_RUNEEUR = Decimal('0.0') 
stepSize_g_RUNEEUR = Decimal('0.1') 


def on_message_RUNEEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RUNEEUR = 'RUNEEUR' 
	price_bids_c_l_RUNEEUR = data['b'] 
	qty_bids_c_l_RUNEEUR = data['B'] 
	price_asks_c_l_RUNEEUR = data['a'] 
	qty_asks_c_l_RUNEEUR = data['A'] 

	global symbol_g_RUNEEUR 
	global price_bids_g_RUNEEUR 
	global qty_bids_g_RUNEEUR 
	global price_asks_g_RUNEEUR 
	global qty_asks_g_RUNEEUR 

	symbol_g_RUNEEUR = symbol_c_l_RUNEEUR 
	price_bids_g_RUNEEUR = Decimal(price_bids_c_l_RUNEEUR) 
	qty_bids_g_RUNEEUR = Decimal(qty_bids_c_l_RUNEEUR) 
	price_asks_g_RUNEEUR = Decimal(price_asks_c_l_RUNEEUR) 
	qty_asks_g_RUNEEUR = Decimal(qty_asks_c_l_RUNEEUR) 


def loop_RUNEEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/runeeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RUNEEUR) 
	ws.run_forever() 


Thread(target=loop_RUNEEUR).start() 
symbol_g_LAZIOEUR = 'LAZIOEUR' 
price_bids_g_LAZIOEUR = Decimal('0.0') 
qty_bids_g_LAZIOEUR = Decimal('0.0') 
price_asks_g_LAZIOEUR = Decimal('0.0') 
qty_asks_g_LAZIOEUR = Decimal('0.0') 
stepSize_g_LAZIOEUR = Decimal('0.01') 


def on_message_LAZIOEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_LAZIOEUR = 'LAZIOEUR' 
	price_bids_c_l_LAZIOEUR = data['b'] 
	qty_bids_c_l_LAZIOEUR = data['B'] 
	price_asks_c_l_LAZIOEUR = data['a'] 
	qty_asks_c_l_LAZIOEUR = data['A'] 

	global symbol_g_LAZIOEUR 
	global price_bids_g_LAZIOEUR 
	global qty_bids_g_LAZIOEUR 
	global price_asks_g_LAZIOEUR 
	global qty_asks_g_LAZIOEUR 

	symbol_g_LAZIOEUR = symbol_c_l_LAZIOEUR 
	price_bids_g_LAZIOEUR = Decimal(price_bids_c_l_LAZIOEUR) 
	qty_bids_g_LAZIOEUR = Decimal(qty_bids_c_l_LAZIOEUR) 
	price_asks_g_LAZIOEUR = Decimal(price_asks_c_l_LAZIOEUR) 
	qty_asks_g_LAZIOEUR = Decimal(qty_asks_c_l_LAZIOEUR) 


def loop_LAZIOEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/lazioeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_LAZIOEUR) 
	ws.run_forever() 


Thread(target=loop_LAZIOEUR).start() 
symbol_g_PORTOEUR = 'PORTOEUR' 
price_bids_g_PORTOEUR = Decimal('0.0') 
qty_bids_g_PORTOEUR = Decimal('0.0') 
price_asks_g_PORTOEUR = Decimal('0.0') 
qty_asks_g_PORTOEUR = Decimal('0.0') 
stepSize_g_PORTOEUR = Decimal('0.01') 


def on_message_PORTOEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_PORTOEUR = 'PORTOEUR' 
	price_bids_c_l_PORTOEUR = data['b'] 
	qty_bids_c_l_PORTOEUR = data['B'] 
	price_asks_c_l_PORTOEUR = data['a'] 
	qty_asks_c_l_PORTOEUR = data['A'] 

	global symbol_g_PORTOEUR 
	global price_bids_g_PORTOEUR 
	global qty_bids_g_PORTOEUR 
	global price_asks_g_PORTOEUR 
	global qty_asks_g_PORTOEUR 

	symbol_g_PORTOEUR = symbol_c_l_PORTOEUR 
	price_bids_g_PORTOEUR = Decimal(price_bids_c_l_PORTOEUR) 
	qty_bids_g_PORTOEUR = Decimal(qty_bids_c_l_PORTOEUR) 
	price_asks_g_PORTOEUR = Decimal(price_asks_c_l_PORTOEUR) 
	qty_asks_g_PORTOEUR = Decimal(qty_asks_c_l_PORTOEUR) 


def loop_PORTOEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/portoeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_PORTOEUR) 
	ws.run_forever() 


Thread(target=loop_PORTOEUR).start() 
symbol_g_ALPINEEUR = 'ALPINEEUR' 
price_bids_g_ALPINEEUR = Decimal('0.0') 
qty_bids_g_ALPINEEUR = Decimal('0.0') 
price_asks_g_ALPINEEUR = Decimal('0.0') 
qty_asks_g_ALPINEEUR = Decimal('0.0') 
stepSize_g_ALPINEEUR = Decimal('0.01') 


def on_message_ALPINEEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_ALPINEEUR = 'ALPINEEUR' 
	price_bids_c_l_ALPINEEUR = data['b'] 
	qty_bids_c_l_ALPINEEUR = data['B'] 
	price_asks_c_l_ALPINEEUR = data['a'] 
	qty_asks_c_l_ALPINEEUR = data['A'] 

	global symbol_g_ALPINEEUR 
	global price_bids_g_ALPINEEUR 
	global qty_bids_g_ALPINEEUR 
	global price_asks_g_ALPINEEUR 
	global qty_asks_g_ALPINEEUR 

	symbol_g_ALPINEEUR = symbol_c_l_ALPINEEUR 
	price_bids_g_ALPINEEUR = Decimal(price_bids_c_l_ALPINEEUR) 
	qty_bids_g_ALPINEEUR = Decimal(qty_bids_c_l_ALPINEEUR) 
	price_asks_g_ALPINEEUR = Decimal(price_asks_c_l_ALPINEEUR) 
	qty_asks_g_ALPINEEUR = Decimal(qty_asks_c_l_ALPINEEUR) 


def loop_ALPINEEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/alpineeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_ALPINEEUR) 
	ws.run_forever() 


Thread(target=loop_ALPINEEUR).start() 
symbol_g_GALAEUR = 'GALAEUR' 
price_bids_g_GALAEUR = Decimal('0.0') 
qty_bids_g_GALAEUR = Decimal('0.0') 
price_asks_g_GALAEUR = Decimal('0.0') 
qty_asks_g_GALAEUR = Decimal('0.0') 
stepSize_g_GALAEUR = Decimal('1.0') 


def on_message_GALAEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALAEUR = 'GALAEUR' 
	price_bids_c_l_GALAEUR = data['b'] 
	qty_bids_c_l_GALAEUR = data['B'] 
	price_asks_c_l_GALAEUR = data['a'] 
	qty_asks_c_l_GALAEUR = data['A'] 

	global symbol_g_GALAEUR 
	global price_bids_g_GALAEUR 
	global qty_bids_g_GALAEUR 
	global price_asks_g_GALAEUR 
	global qty_asks_g_GALAEUR 

	symbol_g_GALAEUR = symbol_c_l_GALAEUR 
	price_bids_g_GALAEUR = Decimal(price_bids_c_l_GALAEUR) 
	qty_bids_g_GALAEUR = Decimal(qty_bids_c_l_GALAEUR) 
	price_asks_g_GALAEUR = Decimal(price_asks_c_l_GALAEUR) 
	qty_asks_g_GALAEUR = Decimal(qty_asks_c_l_GALAEUR) 


def loop_GALAEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galaeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALAEUR) 
	ws.run_forever() 


Thread(target=loop_GALAEUR).start() 
symbol_g_NEAREUR = 'NEAREUR' 
price_bids_g_NEAREUR = Decimal('0.0') 
qty_bids_g_NEAREUR = Decimal('0.0') 
price_asks_g_NEAREUR = Decimal('0.0') 
qty_asks_g_NEAREUR = Decimal('0.0') 
stepSize_g_NEAREUR = Decimal('0.1') 


def on_message_NEAREUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_NEAREUR = 'NEAREUR' 
	price_bids_c_l_NEAREUR = data['b'] 
	qty_bids_c_l_NEAREUR = data['B'] 
	price_asks_c_l_NEAREUR = data['a'] 
	qty_asks_c_l_NEAREUR = data['A'] 

	global symbol_g_NEAREUR 
	global price_bids_g_NEAREUR 
	global qty_bids_g_NEAREUR 
	global price_asks_g_NEAREUR 
	global qty_asks_g_NEAREUR 

	symbol_g_NEAREUR = symbol_c_l_NEAREUR 
	price_bids_g_NEAREUR = Decimal(price_bids_c_l_NEAREUR) 
	qty_bids_g_NEAREUR = Decimal(qty_bids_c_l_NEAREUR) 
	price_asks_g_NEAREUR = Decimal(price_asks_c_l_NEAREUR) 
	qty_asks_g_NEAREUR = Decimal(qty_asks_c_l_NEAREUR) 


def loop_NEAREUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/neareur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_NEAREUR) 
	ws.run_forever() 


Thread(target=loop_NEAREUR).start() 
symbol_g_APEEUR = 'APEEUR' 
price_bids_g_APEEUR = Decimal('0.0') 
qty_bids_g_APEEUR = Decimal('0.0') 
price_asks_g_APEEUR = Decimal('0.0') 
qty_asks_g_APEEUR = Decimal('0.0') 
stepSize_g_APEEUR = Decimal('0.01') 


def on_message_APEEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APEEUR = 'APEEUR' 
	price_bids_c_l_APEEUR = data['b'] 
	qty_bids_c_l_APEEUR = data['B'] 
	price_asks_c_l_APEEUR = data['a'] 
	qty_asks_c_l_APEEUR = data['A'] 

	global symbol_g_APEEUR 
	global price_bids_g_APEEUR 
	global qty_bids_g_APEEUR 
	global price_asks_g_APEEUR 
	global qty_asks_g_APEEUR 

	symbol_g_APEEUR = symbol_c_l_APEEUR 
	price_bids_g_APEEUR = Decimal(price_bids_c_l_APEEUR) 
	qty_bids_g_APEEUR = Decimal(qty_bids_c_l_APEEUR) 
	price_asks_g_APEEUR = Decimal(price_asks_c_l_APEEUR) 
	qty_asks_g_APEEUR = Decimal(qty_asks_c_l_APEEUR) 


def loop_APEEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/apeeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APEEUR) 
	ws.run_forever() 


Thread(target=loop_APEEUR).start() 
symbol_g_GMTEUR = 'GMTEUR' 
price_bids_g_GMTEUR = Decimal('0.0') 
qty_bids_g_GMTEUR = Decimal('0.0') 
price_asks_g_GMTEUR = Decimal('0.0') 
qty_asks_g_GMTEUR = Decimal('0.0') 
stepSize_g_GMTEUR = Decimal('0.1') 


def on_message_GMTEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GMTEUR = 'GMTEUR' 
	price_bids_c_l_GMTEUR = data['b'] 
	qty_bids_c_l_GMTEUR = data['B'] 
	price_asks_c_l_GMTEUR = data['a'] 
	qty_asks_c_l_GMTEUR = data['A'] 

	global symbol_g_GMTEUR 
	global price_bids_g_GMTEUR 
	global qty_bids_g_GMTEUR 
	global price_asks_g_GMTEUR 
	global qty_asks_g_GMTEUR 

	symbol_g_GMTEUR = symbol_c_l_GMTEUR 
	price_bids_g_GMTEUR = Decimal(price_bids_c_l_GMTEUR) 
	qty_bids_g_GMTEUR = Decimal(qty_bids_c_l_GMTEUR) 
	price_asks_g_GMTEUR = Decimal(price_asks_c_l_GMTEUR) 
	qty_asks_g_GMTEUR = Decimal(qty_asks_c_l_GMTEUR) 


def loop_GMTEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gmteur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GMTEUR) 
	ws.run_forever() 


Thread(target=loop_GMTEUR).start() 
symbol_g_JASMYEUR = 'JASMYEUR' 
price_bids_g_JASMYEUR = Decimal('0.0') 
qty_bids_g_JASMYEUR = Decimal('0.0') 
price_asks_g_JASMYEUR = Decimal('0.0') 
qty_asks_g_JASMYEUR = Decimal('0.0') 
stepSize_g_JASMYEUR = Decimal('0.1') 


def on_message_JASMYEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_JASMYEUR = 'JASMYEUR' 
	price_bids_c_l_JASMYEUR = data['b'] 
	qty_bids_c_l_JASMYEUR = data['B'] 
	price_asks_c_l_JASMYEUR = data['a'] 
	qty_asks_c_l_JASMYEUR = data['A'] 

	global symbol_g_JASMYEUR 
	global price_bids_g_JASMYEUR 
	global qty_bids_g_JASMYEUR 
	global price_asks_g_JASMYEUR 
	global qty_asks_g_JASMYEUR 

	symbol_g_JASMYEUR = symbol_c_l_JASMYEUR 
	price_bids_g_JASMYEUR = Decimal(price_bids_c_l_JASMYEUR) 
	qty_bids_g_JASMYEUR = Decimal(qty_bids_c_l_JASMYEUR) 
	price_asks_g_JASMYEUR = Decimal(price_asks_c_l_JASMYEUR) 
	qty_asks_g_JASMYEUR = Decimal(qty_asks_c_l_JASMYEUR) 


def loop_JASMYEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/jasmyeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_JASMYEUR) 
	ws.run_forever() 


Thread(target=loop_JASMYEUR).start() 
symbol_g_GALEUR = 'GALEUR' 
price_bids_g_GALEUR = Decimal('0.0') 
qty_bids_g_GALEUR = Decimal('0.0') 
price_asks_g_GALEUR = Decimal('0.0') 
qty_asks_g_GALEUR = Decimal('0.0') 
stepSize_g_GALEUR = Decimal('0.001') 


def on_message_GALEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALEUR = 'GALEUR' 
	price_bids_c_l_GALEUR = data['b'] 
	qty_bids_c_l_GALEUR = data['B'] 
	price_asks_c_l_GALEUR = data['a'] 
	qty_asks_c_l_GALEUR = data['A'] 

	global symbol_g_GALEUR 
	global price_bids_g_GALEUR 
	global qty_bids_g_GALEUR 
	global price_asks_g_GALEUR 
	global qty_asks_g_GALEUR 

	symbol_g_GALEUR = symbol_c_l_GALEUR 
	price_bids_g_GALEUR = Decimal(price_bids_c_l_GALEUR) 
	qty_bids_g_GALEUR = Decimal(qty_bids_c_l_GALEUR) 
	price_asks_g_GALEUR = Decimal(price_asks_c_l_GALEUR) 
	qty_asks_g_GALEUR = Decimal(qty_asks_c_l_GALEUR) 


def loop_GALEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALEUR) 
	ws.run_forever() 


Thread(target=loop_GALEUR).start() 
symbol_g_DAREUR = 'DAREUR' 
price_bids_g_DAREUR = Decimal('0.0') 
qty_bids_g_DAREUR = Decimal('0.0') 
price_asks_g_DAREUR = Decimal('0.0') 
qty_asks_g_DAREUR = Decimal('0.0') 
stepSize_g_DAREUR = Decimal('1.0') 


def on_message_DAREUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DAREUR = 'DAREUR' 
	price_bids_c_l_DAREUR = data['b'] 
	qty_bids_c_l_DAREUR = data['B'] 
	price_asks_c_l_DAREUR = data['a'] 
	qty_asks_c_l_DAREUR = data['A'] 

	global symbol_g_DAREUR 
	global price_bids_g_DAREUR 
	global qty_bids_g_DAREUR 
	global price_asks_g_DAREUR 
	global qty_asks_g_DAREUR 

	symbol_g_DAREUR = symbol_c_l_DAREUR 
	price_bids_g_DAREUR = Decimal(price_bids_c_l_DAREUR) 
	qty_bids_g_DAREUR = Decimal(qty_bids_c_l_DAREUR) 
	price_asks_g_DAREUR = Decimal(price_asks_c_l_DAREUR) 
	qty_asks_g_DAREUR = Decimal(qty_asks_c_l_DAREUR) 


def loop_DAREUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dareur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DAREUR) 
	ws.run_forever() 


Thread(target=loop_DAREUR).start() 
symbol_g_OPEUR = 'OPEUR' 
price_bids_g_OPEUR = Decimal('0.0') 
qty_bids_g_OPEUR = Decimal('0.0') 
price_asks_g_OPEUR = Decimal('0.0') 
qty_asks_g_OPEUR = Decimal('0.0') 
stepSize_g_OPEUR = Decimal('0.01') 


def on_message_OPEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_OPEUR = 'OPEUR' 
	price_bids_c_l_OPEUR = data['b'] 
	qty_bids_c_l_OPEUR = data['B'] 
	price_asks_c_l_OPEUR = data['a'] 
	qty_asks_c_l_OPEUR = data['A'] 

	global symbol_g_OPEUR 
	global price_bids_g_OPEUR 
	global qty_bids_g_OPEUR 
	global price_asks_g_OPEUR 
	global qty_asks_g_OPEUR 

	symbol_g_OPEUR = symbol_c_l_OPEUR 
	price_bids_g_OPEUR = Decimal(price_bids_c_l_OPEUR) 
	qty_bids_g_OPEUR = Decimal(qty_bids_c_l_OPEUR) 
	price_asks_g_OPEUR = Decimal(price_asks_c_l_OPEUR) 
	qty_asks_g_OPEUR = Decimal(qty_asks_c_l_OPEUR) 


def loop_OPEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/opeur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_OPEUR) 
	ws.run_forever() 


Thread(target=loop_OPEUR).start() 
symbol_g_APTEUR = 'APTEUR' 
price_bids_g_APTEUR = Decimal('0.0') 
qty_bids_g_APTEUR = Decimal('0.0') 
price_asks_g_APTEUR = Decimal('0.0') 
qty_asks_g_APTEUR = Decimal('0.0') 
stepSize_g_APTEUR = Decimal('0.01') 


def on_message_APTEUR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APTEUR = 'APTEUR' 
	price_bids_c_l_APTEUR = data['b'] 
	qty_bids_c_l_APTEUR = data['B'] 
	price_asks_c_l_APTEUR = data['a'] 
	qty_asks_c_l_APTEUR = data['A'] 

	global symbol_g_APTEUR 
	global price_bids_g_APTEUR 
	global qty_bids_g_APTEUR 
	global price_asks_g_APTEUR 
	global qty_asks_g_APTEUR 

	symbol_g_APTEUR = symbol_c_l_APTEUR 
	price_bids_g_APTEUR = Decimal(price_bids_c_l_APTEUR) 
	qty_bids_g_APTEUR = Decimal(qty_bids_c_l_APTEUR) 
	price_asks_g_APTEUR = Decimal(price_asks_c_l_APTEUR) 
	qty_asks_g_APTEUR = Decimal(qty_asks_c_l_APTEUR) 


def loop_APTEUR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/apteur@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APTEUR) 
	ws.run_forever() 


Thread(target=loop_APTEUR).start() 
symbol_g_SOLGBP = 'SOLGBP' 
price_bids_g_SOLGBP = Decimal('0.0') 
qty_bids_g_SOLGBP = Decimal('0.0') 
price_asks_g_SOLGBP = Decimal('0.0') 
qty_asks_g_SOLGBP = Decimal('0.0') 
stepSize_g_SOLGBP = Decimal('0.01') 


def on_message_SOLGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SOLGBP = 'SOLGBP' 
	price_bids_c_l_SOLGBP = data['b'] 
	qty_bids_c_l_SOLGBP = data['B'] 
	price_asks_c_l_SOLGBP = data['a'] 
	qty_asks_c_l_SOLGBP = data['A'] 

	global symbol_g_SOLGBP 
	global price_bids_g_SOLGBP 
	global qty_bids_g_SOLGBP 
	global price_asks_g_SOLGBP 
	global qty_asks_g_SOLGBP 

	symbol_g_SOLGBP = symbol_c_l_SOLGBP 
	price_bids_g_SOLGBP = Decimal(price_bids_c_l_SOLGBP) 
	qty_bids_g_SOLGBP = Decimal(qty_bids_c_l_SOLGBP) 
	price_asks_g_SOLGBP = Decimal(price_asks_c_l_SOLGBP) 
	qty_asks_g_SOLGBP = Decimal(qty_asks_c_l_SOLGBP) 


def loop_SOLGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/solgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SOLGBP) 
	ws.run_forever() 


Thread(target=loop_SOLGBP).start() 
symbol_g_SOLAUD = 'SOLAUD' 
price_bids_g_SOLAUD = Decimal('0.0') 
qty_bids_g_SOLAUD = Decimal('0.0') 
price_asks_g_SOLAUD = Decimal('0.0') 
qty_asks_g_SOLAUD = Decimal('0.0') 
stepSize_g_SOLAUD = Decimal('0.001') 


def on_message_SOLAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SOLAUD = 'SOLAUD' 
	price_bids_c_l_SOLAUD = data['b'] 
	qty_bids_c_l_SOLAUD = data['B'] 
	price_asks_c_l_SOLAUD = data['a'] 
	qty_asks_c_l_SOLAUD = data['A'] 

	global symbol_g_SOLAUD 
	global price_bids_g_SOLAUD 
	global qty_bids_g_SOLAUD 
	global price_asks_g_SOLAUD 
	global qty_asks_g_SOLAUD 

	symbol_g_SOLAUD = symbol_c_l_SOLAUD 
	price_bids_g_SOLAUD = Decimal(price_bids_c_l_SOLAUD) 
	qty_bids_g_SOLAUD = Decimal(qty_bids_c_l_SOLAUD) 
	price_asks_g_SOLAUD = Decimal(price_asks_c_l_SOLAUD) 
	qty_asks_g_SOLAUD = Decimal(qty_asks_c_l_SOLAUD) 


def loop_SOLAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/solaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SOLAUD) 
	ws.run_forever() 


Thread(target=loop_SOLAUD).start() 
symbol_g_DOTGBP = 'DOTGBP' 
price_bids_g_DOTGBP = Decimal('0.0') 
qty_bids_g_DOTGBP = Decimal('0.0') 
price_asks_g_DOTGBP = Decimal('0.0') 
qty_asks_g_DOTGBP = Decimal('0.0') 
stepSize_g_DOTGBP = Decimal('0.01') 


def on_message_DOTGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOTGBP = 'DOTGBP' 
	price_bids_c_l_DOTGBP = data['b'] 
	qty_bids_c_l_DOTGBP = data['B'] 
	price_asks_c_l_DOTGBP = data['a'] 
	qty_asks_c_l_DOTGBP = data['A'] 

	global symbol_g_DOTGBP 
	global price_bids_g_DOTGBP 
	global qty_bids_g_DOTGBP 
	global price_asks_g_DOTGBP 
	global qty_asks_g_DOTGBP 

	symbol_g_DOTGBP = symbol_c_l_DOTGBP 
	price_bids_g_DOTGBP = Decimal(price_bids_c_l_DOTGBP) 
	qty_bids_g_DOTGBP = Decimal(qty_bids_c_l_DOTGBP) 
	price_asks_g_DOTGBP = Decimal(price_asks_c_l_DOTGBP) 
	qty_asks_g_DOTGBP = Decimal(qty_asks_c_l_DOTGBP) 


def loop_DOTGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dotgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOTGBP) 
	ws.run_forever() 


Thread(target=loop_DOTGBP).start() 
symbol_g_RUNEGBP = 'RUNEGBP' 
price_bids_g_RUNEGBP = Decimal('0.0') 
qty_bids_g_RUNEGBP = Decimal('0.0') 
price_asks_g_RUNEGBP = Decimal('0.0') 
qty_asks_g_RUNEGBP = Decimal('0.0') 
stepSize_g_RUNEGBP = Decimal('0.1') 


def on_message_RUNEGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_RUNEGBP = 'RUNEGBP' 
	price_bids_c_l_RUNEGBP = data['b'] 
	qty_bids_c_l_RUNEGBP = data['B'] 
	price_asks_c_l_RUNEGBP = data['a'] 
	qty_asks_c_l_RUNEGBP = data['A'] 

	global symbol_g_RUNEGBP 
	global price_bids_g_RUNEGBP 
	global qty_bids_g_RUNEGBP 
	global price_asks_g_RUNEGBP 
	global qty_asks_g_RUNEGBP 

	symbol_g_RUNEGBP = symbol_c_l_RUNEGBP 
	price_bids_g_RUNEGBP = Decimal(price_bids_c_l_RUNEGBP) 
	qty_bids_g_RUNEGBP = Decimal(qty_bids_c_l_RUNEGBP) 
	price_asks_g_RUNEGBP = Decimal(price_asks_c_l_RUNEGBP) 
	qty_asks_g_RUNEGBP = Decimal(qty_asks_c_l_RUNEGBP) 


def loop_RUNEGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/runegbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_RUNEGBP) 
	ws.run_forever() 


Thread(target=loop_RUNEGBP).start() 
symbol_g_AVAXGBP = 'AVAXGBP' 
price_bids_g_AVAXGBP = Decimal('0.0') 
qty_bids_g_AVAXGBP = Decimal('0.0') 
price_asks_g_AVAXGBP = Decimal('0.0') 
qty_asks_g_AVAXGBP = Decimal('0.0') 
stepSize_g_AVAXGBP = Decimal('0.01') 


def on_message_AVAXGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AVAXGBP = 'AVAXGBP' 
	price_bids_c_l_AVAXGBP = data['b'] 
	qty_bids_c_l_AVAXGBP = data['B'] 
	price_asks_c_l_AVAXGBP = data['a'] 
	qty_asks_c_l_AVAXGBP = data['A'] 

	global symbol_g_AVAXGBP 
	global price_bids_g_AVAXGBP 
	global qty_bids_g_AVAXGBP 
	global price_asks_g_AVAXGBP 
	global qty_asks_g_AVAXGBP 

	symbol_g_AVAXGBP = symbol_c_l_AVAXGBP 
	price_bids_g_AVAXGBP = Decimal(price_bids_c_l_AVAXGBP) 
	qty_bids_g_AVAXGBP = Decimal(qty_bids_c_l_AVAXGBP) 
	price_asks_g_AVAXGBP = Decimal(price_asks_c_l_AVAXGBP) 
	qty_asks_g_AVAXGBP = Decimal(qty_asks_c_l_AVAXGBP) 


def loop_AVAXGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/avaxgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AVAXGBP) 
	ws.run_forever() 


Thread(target=loop_AVAXGBP).start() 
symbol_g_GMTGBP = 'GMTGBP' 
price_bids_g_GMTGBP = Decimal('0.0') 
qty_bids_g_GMTGBP = Decimal('0.0') 
price_asks_g_GMTGBP = Decimal('0.0') 
qty_asks_g_GMTGBP = Decimal('0.0') 
stepSize_g_GMTGBP = Decimal('0.1') 


def on_message_GMTGBP(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GMTGBP = 'GMTGBP' 
	price_bids_c_l_GMTGBP = data['b'] 
	qty_bids_c_l_GMTGBP = data['B'] 
	price_asks_c_l_GMTGBP = data['a'] 
	qty_asks_c_l_GMTGBP = data['A'] 

	global symbol_g_GMTGBP 
	global price_bids_g_GMTGBP 
	global qty_bids_g_GMTGBP 
	global price_asks_g_GMTGBP 
	global qty_asks_g_GMTGBP 

	symbol_g_GMTGBP = symbol_c_l_GMTGBP 
	price_bids_g_GMTGBP = Decimal(price_bids_c_l_GMTGBP) 
	qty_bids_g_GMTGBP = Decimal(qty_bids_c_l_GMTGBP) 
	price_asks_g_GMTGBP = Decimal(price_asks_c_l_GMTGBP) 
	qty_asks_g_GMTGBP = Decimal(qty_asks_c_l_GMTGBP) 


def loop_GMTGBP(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gmtgbp@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GMTGBP) 
	ws.run_forever() 


Thread(target=loop_GMTGBP).start() 
symbol_g_DOTAUD = 'DOTAUD' 
price_bids_g_DOTAUD = Decimal('0.0') 
qty_bids_g_DOTAUD = Decimal('0.0') 
price_asks_g_DOTAUD = Decimal('0.0') 
qty_asks_g_DOTAUD = Decimal('0.0') 
stepSize_g_DOTAUD = Decimal('0.01') 


def on_message_DOTAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_DOTAUD = 'DOTAUD' 
	price_bids_c_l_DOTAUD = data['b'] 
	qty_bids_c_l_DOTAUD = data['B'] 
	price_asks_c_l_DOTAUD = data['a'] 
	qty_asks_c_l_DOTAUD = data['A'] 

	global symbol_g_DOTAUD 
	global price_bids_g_DOTAUD 
	global qty_bids_g_DOTAUD 
	global price_asks_g_DOTAUD 
	global qty_asks_g_DOTAUD 

	symbol_g_DOTAUD = symbol_c_l_DOTAUD 
	price_bids_g_DOTAUD = Decimal(price_bids_c_l_DOTAUD) 
	qty_bids_g_DOTAUD = Decimal(qty_bids_c_l_DOTAUD) 
	price_asks_g_DOTAUD = Decimal(price_asks_c_l_DOTAUD) 
	qty_asks_g_DOTAUD = Decimal(qty_asks_c_l_DOTAUD) 


def loop_DOTAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/dotaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_DOTAUD) 
	ws.run_forever() 


Thread(target=loop_DOTAUD).start() 
symbol_g_AXSAUD = 'AXSAUD' 
price_bids_g_AXSAUD = Decimal('0.0') 
qty_bids_g_AXSAUD = Decimal('0.0') 
price_asks_g_AXSAUD = Decimal('0.0') 
qty_asks_g_AXSAUD = Decimal('0.0') 
stepSize_g_AXSAUD = Decimal('0.01') 


def on_message_AXSAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AXSAUD = 'AXSAUD' 
	price_bids_c_l_AXSAUD = data['b'] 
	qty_bids_c_l_AXSAUD = data['B'] 
	price_asks_c_l_AXSAUD = data['a'] 
	qty_asks_c_l_AXSAUD = data['A'] 

	global symbol_g_AXSAUD 
	global price_bids_g_AXSAUD 
	global qty_bids_g_AXSAUD 
	global price_asks_g_AXSAUD 
	global qty_asks_g_AXSAUD 

	symbol_g_AXSAUD = symbol_c_l_AXSAUD 
	price_bids_g_AXSAUD = Decimal(price_bids_c_l_AXSAUD) 
	qty_bids_g_AXSAUD = Decimal(qty_bids_c_l_AXSAUD) 
	price_asks_g_AXSAUD = Decimal(price_asks_c_l_AXSAUD) 
	qty_asks_g_AXSAUD = Decimal(qty_asks_c_l_AXSAUD) 


def loop_AXSAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/axsaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AXSAUD) 
	ws.run_forever() 


Thread(target=loop_AXSAUD).start() 
symbol_g_SHIBAUD = 'SHIBAUD' 
price_bids_g_SHIBAUD = Decimal('0.0') 
qty_bids_g_SHIBAUD = Decimal('0.0') 
price_asks_g_SHIBAUD = Decimal('0.0') 
qty_asks_g_SHIBAUD = Decimal('0.0') 
stepSize_g_SHIBAUD = Decimal('1.0') 


def on_message_SHIBAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SHIBAUD = 'SHIBAUD' 
	price_bids_c_l_SHIBAUD = data['b'] 
	qty_bids_c_l_SHIBAUD = data['B'] 
	price_asks_c_l_SHIBAUD = data['a'] 
	qty_asks_c_l_SHIBAUD = data['A'] 

	global symbol_g_SHIBAUD 
	global price_bids_g_SHIBAUD 
	global qty_bids_g_SHIBAUD 
	global price_asks_g_SHIBAUD 
	global qty_asks_g_SHIBAUD 

	symbol_g_SHIBAUD = symbol_c_l_SHIBAUD 
	price_bids_g_SHIBAUD = Decimal(price_bids_c_l_SHIBAUD) 
	qty_bids_g_SHIBAUD = Decimal(qty_bids_c_l_SHIBAUD) 
	price_asks_g_SHIBAUD = Decimal(price_asks_c_l_SHIBAUD) 
	qty_asks_g_SHIBAUD = Decimal(qty_asks_c_l_SHIBAUD) 


def loop_SHIBAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/shibaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SHIBAUD) 
	ws.run_forever() 


Thread(target=loop_SHIBAUD).start() 
symbol_g_AVAXAUD = 'AVAXAUD' 
price_bids_g_AVAXAUD = Decimal('0.0') 
qty_bids_g_AVAXAUD = Decimal('0.0') 
price_asks_g_AVAXAUD = Decimal('0.0') 
qty_asks_g_AVAXAUD = Decimal('0.0') 
stepSize_g_AVAXAUD = Decimal('0.01') 


def on_message_AVAXAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_AVAXAUD = 'AVAXAUD' 
	price_bids_c_l_AVAXAUD = data['b'] 
	qty_bids_c_l_AVAXAUD = data['B'] 
	price_asks_c_l_AVAXAUD = data['a'] 
	qty_asks_c_l_AVAXAUD = data['A'] 

	global symbol_g_AVAXAUD 
	global price_bids_g_AVAXAUD 
	global qty_bids_g_AVAXAUD 
	global price_asks_g_AVAXAUD 
	global qty_asks_g_AVAXAUD 

	symbol_g_AVAXAUD = symbol_c_l_AVAXAUD 
	price_bids_g_AVAXAUD = Decimal(price_bids_c_l_AVAXAUD) 
	qty_bids_g_AVAXAUD = Decimal(qty_bids_c_l_AVAXAUD) 
	price_asks_g_AVAXAUD = Decimal(price_asks_c_l_AVAXAUD) 
	qty_asks_g_AVAXAUD = Decimal(qty_asks_c_l_AVAXAUD) 


def loop_AVAXAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/avaxaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_AVAXAUD) 
	ws.run_forever() 


Thread(target=loop_AVAXAUD).start() 
symbol_g_SANDAUD = 'SANDAUD' 
price_bids_g_SANDAUD = Decimal('0.0') 
qty_bids_g_SANDAUD = Decimal('0.0') 
price_asks_g_SANDAUD = Decimal('0.0') 
qty_asks_g_SANDAUD = Decimal('0.0') 
stepSize_g_SANDAUD = Decimal('1.0') 


def on_message_SANDAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_SANDAUD = 'SANDAUD' 
	price_bids_c_l_SANDAUD = data['b'] 
	qty_bids_c_l_SANDAUD = data['B'] 
	price_asks_c_l_SANDAUD = data['a'] 
	qty_asks_c_l_SANDAUD = data['A'] 

	global symbol_g_SANDAUD 
	global price_bids_g_SANDAUD 
	global qty_bids_g_SANDAUD 
	global price_asks_g_SANDAUD 
	global qty_asks_g_SANDAUD 

	symbol_g_SANDAUD = symbol_c_l_SANDAUD 
	price_bids_g_SANDAUD = Decimal(price_bids_c_l_SANDAUD) 
	qty_bids_g_SANDAUD = Decimal(qty_bids_c_l_SANDAUD) 
	price_asks_g_SANDAUD = Decimal(price_asks_c_l_SANDAUD) 
	qty_asks_g_SANDAUD = Decimal(qty_asks_c_l_SANDAUD) 


def loop_SANDAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/sandaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_SANDAUD) 
	ws.run_forever() 


Thread(target=loop_SANDAUD).start() 
symbol_g_GALAAUD = 'GALAAUD' 
price_bids_g_GALAAUD = Decimal('0.0') 
qty_bids_g_GALAAUD = Decimal('0.0') 
price_asks_g_GALAAUD = Decimal('0.0') 
qty_asks_g_GALAAUD = Decimal('0.0') 
stepSize_g_GALAAUD = Decimal('1.0') 


def on_message_GALAAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GALAAUD = 'GALAAUD' 
	price_bids_c_l_GALAAUD = data['b'] 
	qty_bids_c_l_GALAAUD = data['B'] 
	price_asks_c_l_GALAAUD = data['a'] 
	qty_asks_c_l_GALAAUD = data['A'] 

	global symbol_g_GALAAUD 
	global price_bids_g_GALAAUD 
	global qty_bids_g_GALAAUD 
	global price_asks_g_GALAAUD 
	global qty_asks_g_GALAAUD 

	symbol_g_GALAAUD = symbol_c_l_GALAAUD 
	price_bids_g_GALAAUD = Decimal(price_bids_c_l_GALAAUD) 
	qty_bids_g_GALAAUD = Decimal(qty_bids_c_l_GALAAUD) 
	price_asks_g_GALAAUD = Decimal(price_asks_c_l_GALAAUD) 
	qty_asks_g_GALAAUD = Decimal(qty_asks_c_l_GALAAUD) 


def loop_GALAAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/galaaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GALAAUD) 
	ws.run_forever() 


Thread(target=loop_GALAAUD).start() 
symbol_g_APEAUD = 'APEAUD' 
price_bids_g_APEAUD = Decimal('0.0') 
qty_bids_g_APEAUD = Decimal('0.0') 
price_asks_g_APEAUD = Decimal('0.0') 
qty_asks_g_APEAUD = Decimal('0.0') 
stepSize_g_APEAUD = Decimal('0.01') 


def on_message_APEAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_APEAUD = 'APEAUD' 
	price_bids_c_l_APEAUD = data['b'] 
	qty_bids_c_l_APEAUD = data['B'] 
	price_asks_c_l_APEAUD = data['a'] 
	qty_asks_c_l_APEAUD = data['A'] 

	global symbol_g_APEAUD 
	global price_bids_g_APEAUD 
	global qty_bids_g_APEAUD 
	global price_asks_g_APEAUD 
	global qty_asks_g_APEAUD 

	symbol_g_APEAUD = symbol_c_l_APEAUD 
	price_bids_g_APEAUD = Decimal(price_bids_c_l_APEAUD) 
	qty_bids_g_APEAUD = Decimal(qty_bids_c_l_APEAUD) 
	price_asks_g_APEAUD = Decimal(price_asks_c_l_APEAUD) 
	qty_asks_g_APEAUD = Decimal(qty_asks_c_l_APEAUD) 


def loop_APEAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/apeaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_APEAUD) 
	ws.run_forever() 


Thread(target=loop_APEAUD).start() 
symbol_g_GMTAUD = 'GMTAUD' 
price_bids_g_GMTAUD = Decimal('0.0') 
qty_bids_g_GMTAUD = Decimal('0.0') 
price_asks_g_GMTAUD = Decimal('0.0') 
qty_asks_g_GMTAUD = Decimal('0.0') 
stepSize_g_GMTAUD = Decimal('0.1') 


def on_message_GMTAUD(ws, message): 

	data = json.loads(message) 

	symbol_c_l_GMTAUD = 'GMTAUD' 
	price_bids_c_l_GMTAUD = data['b'] 
	qty_bids_c_l_GMTAUD = data['B'] 
	price_asks_c_l_GMTAUD = data['a'] 
	qty_asks_c_l_GMTAUD = data['A'] 

	global symbol_g_GMTAUD 
	global price_bids_g_GMTAUD 
	global qty_bids_g_GMTAUD 
	global price_asks_g_GMTAUD 
	global qty_asks_g_GMTAUD 

	symbol_g_GMTAUD = symbol_c_l_GMTAUD 
	price_bids_g_GMTAUD = Decimal(price_bids_c_l_GMTAUD) 
	qty_bids_g_GMTAUD = Decimal(qty_bids_c_l_GMTAUD) 
	price_asks_g_GMTAUD = Decimal(price_asks_c_l_GMTAUD) 
	qty_asks_g_GMTAUD = Decimal(qty_asks_c_l_GMTAUD) 


def loop_GMTAUD(): 

	socket1 = f'wss://stream.binance.com:9443/ws/gmtaud@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_GMTAUD) 
	ws.run_forever() 


Thread(target=loop_GMTAUD).start() 
symbol_g_USDTRUB = 'USDTRUB' 
price_bids_g_USDTRUB = Decimal('0.0') 
qty_bids_g_USDTRUB = Decimal('0.0') 
price_asks_g_USDTRUB = Decimal('0.0') 
qty_asks_g_USDTRUB = Decimal('0.0') 
stepSize_g_USDTRUB = Decimal('1.0') 


def on_message_USDTRUB(ws, message): 

	data = json.loads(message) 

	symbol_c_l_USDTRUB = 'USDTRUB' 
	price_bids_c_l_USDTRUB = data['b'] 
	qty_bids_c_l_USDTRUB = data['B'] 
	price_asks_c_l_USDTRUB = data['a'] 
	qty_asks_c_l_USDTRUB = data['A'] 

	global symbol_g_USDTRUB 
	global price_bids_g_USDTRUB 
	global qty_bids_g_USDTRUB 
	global price_asks_g_USDTRUB 
	global qty_asks_g_USDTRUB 

	symbol_g_USDTRUB = symbol_c_l_USDTRUB 
	price_bids_g_USDTRUB = Decimal(price_bids_c_l_USDTRUB) 
	qty_bids_g_USDTRUB = Decimal(qty_bids_c_l_USDTRUB) 
	price_asks_g_USDTRUB = Decimal(price_asks_c_l_USDTRUB) 
	qty_asks_g_USDTRUB = Decimal(qty_asks_c_l_USDTRUB) 


def loop_USDTRUB(): 

	socket1 = f'wss://stream.binance.com:9443/ws/usdtrub@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_USDTRUB) 
	ws.run_forever() 


Thread(target=loop_USDTRUB).start() 
symbol_g_USDTTRY = 'USDTTRY' 
price_bids_g_USDTTRY = Decimal('0.0') 
qty_bids_g_USDTTRY = Decimal('0.0') 
price_asks_g_USDTTRY = Decimal('0.0') 
qty_asks_g_USDTTRY = Decimal('0.0') 
stepSize_g_USDTTRY = Decimal('1.0') 


def on_message_USDTTRY(ws, message): 

	data = json.loads(message) 

	symbol_c_l_USDTTRY = 'USDTTRY' 
	price_bids_c_l_USDTTRY = data['b'] 
	qty_bids_c_l_USDTTRY = data['B'] 
	price_asks_c_l_USDTTRY = data['a'] 
	qty_asks_c_l_USDTTRY = data['A'] 

	global symbol_g_USDTTRY 
	global price_bids_g_USDTTRY 
	global qty_bids_g_USDTTRY 
	global price_asks_g_USDTTRY 
	global qty_asks_g_USDTTRY 

	symbol_g_USDTTRY = symbol_c_l_USDTTRY 
	price_bids_g_USDTTRY = Decimal(price_bids_c_l_USDTTRY) 
	qty_bids_g_USDTTRY = Decimal(qty_bids_c_l_USDTTRY) 
	price_asks_g_USDTTRY = Decimal(price_asks_c_l_USDTTRY) 
	qty_asks_g_USDTTRY = Decimal(qty_asks_c_l_USDTTRY) 


def loop_USDTTRY(): 

	socket1 = f'wss://stream.binance.com:9443/ws/usdttry@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_USDTTRY) 
	ws.run_forever() 


Thread(target=loop_USDTTRY).start() 
symbol_g_USDTUAH = 'USDTUAH' 
price_bids_g_USDTUAH = Decimal('0.0') 
qty_bids_g_USDTUAH = Decimal('0.0') 
price_asks_g_USDTUAH = Decimal('0.0') 
qty_asks_g_USDTUAH = Decimal('0.0') 
stepSize_g_USDTUAH = Decimal('1.0') 


def on_message_USDTUAH(ws, message): 

	data = json.loads(message) 

	symbol_c_l_USDTUAH = 'USDTUAH' 
	price_bids_c_l_USDTUAH = data['b'] 
	qty_bids_c_l_USDTUAH = data['B'] 
	price_asks_c_l_USDTUAH = data['a'] 
	qty_asks_c_l_USDTUAH = data['A'] 

	global symbol_g_USDTUAH 
	global price_bids_g_USDTUAH 
	global qty_bids_g_USDTUAH 
	global price_asks_g_USDTUAH 
	global qty_asks_g_USDTUAH 

	symbol_g_USDTUAH = symbol_c_l_USDTUAH 
	price_bids_g_USDTUAH = Decimal(price_bids_c_l_USDTUAH) 
	qty_bids_g_USDTUAH = Decimal(qty_bids_c_l_USDTUAH) 
	price_asks_g_USDTUAH = Decimal(price_asks_c_l_USDTUAH) 
	qty_asks_g_USDTUAH = Decimal(qty_asks_c_l_USDTUAH) 


def loop_USDTUAH(): 

	socket1 = f'wss://stream.binance.com:9443/ws/usdtuah@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_USDTUAH) 
	ws.run_forever() 


Thread(target=loop_USDTUAH).start() 
symbol_g_USDTBIDR = 'USDTBIDR' 
price_bids_g_USDTBIDR = Decimal('0.0') 
qty_bids_g_USDTBIDR = Decimal('0.0') 
price_asks_g_USDTBIDR = Decimal('0.0') 
qty_asks_g_USDTBIDR = Decimal('0.0') 
stepSize_g_USDTBIDR = Decimal('0.1') 


def on_message_USDTBIDR(ws, message): 

	data = json.loads(message) 

	symbol_c_l_USDTBIDR = 'USDTBIDR' 
	price_bids_c_l_USDTBIDR = data['b'] 
	qty_bids_c_l_USDTBIDR = data['B'] 
	price_asks_c_l_USDTBIDR = data['a'] 
	qty_asks_c_l_USDTBIDR = data['A'] 

	global symbol_g_USDTBIDR 
	global price_bids_g_USDTBIDR 
	global qty_bids_g_USDTBIDR 
	global price_asks_g_USDTBIDR 
	global qty_asks_g_USDTBIDR 

	symbol_g_USDTBIDR = symbol_c_l_USDTBIDR 
	price_bids_g_USDTBIDR = Decimal(price_bids_c_l_USDTBIDR) 
	qty_bids_g_USDTBIDR = Decimal(qty_bids_c_l_USDTBIDR) 
	price_asks_g_USDTBIDR = Decimal(price_asks_c_l_USDTBIDR) 
	qty_asks_g_USDTBIDR = Decimal(qty_asks_c_l_USDTBIDR) 


def loop_USDTBIDR(): 

	socket1 = f'wss://stream.binance.com:9443/ws/usdtbidr@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_USDTBIDR) 
	ws.run_forever() 


Thread(target=loop_USDTBIDR).start() 
symbol_g_USDTDAI = 'USDTDAI' 
price_bids_g_USDTDAI = Decimal('0.0') 
qty_bids_g_USDTDAI = Decimal('0.0') 
price_asks_g_USDTDAI = Decimal('0.0') 
qty_asks_g_USDTDAI = Decimal('0.0') 
stepSize_g_USDTDAI = Decimal('0.1') 


def on_message_USDTDAI(ws, message): 

	data = json.loads(message) 

	symbol_c_l_USDTDAI = 'USDTDAI' 
	price_bids_c_l_USDTDAI = data['b'] 
	qty_bids_c_l_USDTDAI = data['B'] 
	price_asks_c_l_USDTDAI = data['a'] 
	qty_asks_c_l_USDTDAI = data['A'] 

	global symbol_g_USDTDAI 
	global price_bids_g_USDTDAI 
	global qty_bids_g_USDTDAI 
	global price_asks_g_USDTDAI 
	global qty_asks_g_USDTDAI 

	symbol_g_USDTDAI = symbol_c_l_USDTDAI 
	price_bids_g_USDTDAI = Decimal(price_bids_c_l_USDTDAI) 
	qty_bids_g_USDTDAI = Decimal(qty_bids_c_l_USDTDAI) 
	price_asks_g_USDTDAI = Decimal(price_asks_c_l_USDTDAI) 
	qty_asks_g_USDTDAI = Decimal(qty_asks_c_l_USDTDAI) 


def loop_USDTDAI(): 

	socket1 = f'wss://stream.binance.com:9443/ws/usdtdai@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_USDTDAI) 
	ws.run_forever() 


Thread(target=loop_USDTDAI).start() 
symbol_g_USDTBRL = 'USDTBRL' 
price_bids_g_USDTBRL = Decimal('0.0') 
qty_bids_g_USDTBRL = Decimal('0.0') 
price_asks_g_USDTBRL = Decimal('0.0') 
qty_asks_g_USDTBRL = Decimal('0.0') 
stepSize_g_USDTBRL = Decimal('0.1') 


def on_message_USDTBRL(ws, message): 

	data = json.loads(message) 

	symbol_c_l_USDTBRL = 'USDTBRL' 
	price_bids_c_l_USDTBRL = data['b'] 
	qty_bids_c_l_USDTBRL = data['B'] 
	price_asks_c_l_USDTBRL = data['a'] 
	qty_asks_c_l_USDTBRL = data['A'] 

	global symbol_g_USDTBRL 
	global price_bids_g_USDTBRL 
	global qty_bids_g_USDTBRL 
	global price_asks_g_USDTBRL 
	global qty_asks_g_USDTBRL 

	symbol_g_USDTBRL = symbol_c_l_USDTBRL 
	price_bids_g_USDTBRL = Decimal(price_bids_c_l_USDTBRL) 
	qty_bids_g_USDTBRL = Decimal(qty_bids_c_l_USDTBRL) 
	price_asks_g_USDTBRL = Decimal(price_asks_c_l_USDTBRL) 
	qty_asks_g_USDTBRL = Decimal(qty_asks_c_l_USDTBRL) 


def loop_USDTBRL(): 

	socket1 = f'wss://stream.binance.com:9443/ws/usdtbrl@bookTicker' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_USDTBRL) 
	ws.run_forever() 


Thread(target=loop_USDTBRL).start() 


def loop_BTCUSDT_BTCBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0 and price_bids_g_BTCBUSD != 0.0 and qty_bids_g_BTCBUSD != 0.0 and price_asks_g_BTCBUSD != 0.0 and qty_asks_g_BTCBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BTCBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BTCBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BTCBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BTCBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.0') 
			commission_b = Decimal('0.0') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BTCBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BTCUSDT, '#', 'Покупаем', quantity_pair_a, 'BTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_BTCUSDT) 
				print('Пара_B:', symbol_g_BTCBUSD, '#', 'Продаем', quantity_pair_b, 'BTC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BTCBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BTCUSDT_BTCBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BTCUSDT_BTCEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0 and price_bids_g_BTCEUR != 0.0 and qty_bids_g_BTCEUR != 0.0 and price_asks_g_BTCEUR != 0.0 and qty_asks_g_BTCEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BTCEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BTCEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BTCEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BTCEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.0') 
			commission_b = Decimal('0.0') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BTCEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BTCUSDT, '#', 'Покупаем', quantity_pair_a, 'BTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_BTCUSDT) 
				print('Пара_B:', symbol_g_BTCEUR, '#', 'Продаем', quantity_pair_b, 'BTC', 'за', price_b, 'EUR', 'по цене', price_bids_g_BTCEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BTCUSDT_BTCEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_BTCUSDT_BTCGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0 and price_bids_g_BTCGBP != 0.0 and qty_bids_g_BTCGBP != 0.0 and price_asks_g_BTCGBP != 0.0 and qty_asks_g_BTCGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BTCGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BTCGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BTCGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BTCGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.0') 
			commission_b = Decimal('0.0') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BTCGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BTCUSDT, '#', 'Покупаем', quantity_pair_a, 'BTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_BTCUSDT) 
				print('Пара_B:', symbol_g_BTCGBP, '#', 'Продаем', quantity_pair_b, 'BTC', 'за', price_b, 'GBP', 'по цене', price_bids_g_BTCGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BTCUSDT_BTCGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_BTCUSDT_BTCAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0 and price_bids_g_BTCAUD != 0.0 and qty_bids_g_BTCAUD != 0.0 and price_asks_g_BTCAUD != 0.0 and qty_asks_g_BTCAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BTCAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BTCAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BTCAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BTCAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.0') 
			commission_b = Decimal('0.0') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BTCAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BTCUSDT, '#', 'Покупаем', quantity_pair_a, 'BTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_BTCUSDT) 
				print('Пара_B:', symbol_g_BTCAUD, '#', 'Продаем', quantity_pair_b, 'BTC', 'за', price_b, 'AUD', 'по цене', price_bids_g_BTCAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BTCUSDT_BTCAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_ETHUSDT_ETHBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0 and price_bids_g_ETHBTC != 0.0 and qty_bids_g_ETHBTC != 0.0 and price_asks_g_ETHBTC != 0.0 and qty_asks_g_ETHBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ETHBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ETHBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ETHBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ETHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ETHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ETHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ETHBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ETHBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ETHUSDT, '#', 'Покупаем', quantity_pair_a, 'ETH', 'за', price_a, 'USDT', 'по цене', price_asks_g_ETHUSDT) 
				print('Пара_B:', symbol_g_ETHBTC, '#', 'Продаем', quantity_pair_b, 'ETH', 'за', price_b, 'BTC', 'по цене', price_bids_g_ETHBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ETHUSDT_ETHBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ETHUSDT_ETHBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0 and price_bids_g_ETHBUSD != 0.0 and qty_bids_g_ETHBUSD != 0.0 and price_asks_g_ETHBUSD != 0.0 and qty_asks_g_ETHBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ETHBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ETHBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ETHBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ETHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ETHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ETHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ETHBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ETHBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ETHUSDT, '#', 'Покупаем', quantity_pair_a, 'ETH', 'за', price_a, 'USDT', 'по цене', price_asks_g_ETHUSDT) 
				print('Пара_B:', symbol_g_ETHBUSD, '#', 'Продаем', quantity_pair_b, 'ETH', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ETHBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ETHUSDT_ETHBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ETHUSDT_ETHEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0 and price_bids_g_ETHEUR != 0.0 and qty_bids_g_ETHEUR != 0.0 and price_asks_g_ETHEUR != 0.0 and qty_asks_g_ETHEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ETHEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ETHEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ETHEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ETHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ETHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ETHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ETHEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ETHEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ETHUSDT, '#', 'Покупаем', quantity_pair_a, 'ETH', 'за', price_a, 'USDT', 'по цене', price_asks_g_ETHUSDT) 
				print('Пара_B:', symbol_g_ETHEUR, '#', 'Продаем', quantity_pair_b, 'ETH', 'за', price_b, 'EUR', 'по цене', price_bids_g_ETHEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ETHUSDT_ETHEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_ETHUSDT_ETHGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0 and price_bids_g_ETHGBP != 0.0 and qty_bids_g_ETHGBP != 0.0 and price_asks_g_ETHGBP != 0.0 and qty_asks_g_ETHGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ETHGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ETHGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ETHGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ETHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ETHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ETHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ETHGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ETHGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ETHUSDT, '#', 'Покупаем', quantity_pair_a, 'ETH', 'за', price_a, 'USDT', 'по цене', price_asks_g_ETHUSDT) 
				print('Пара_B:', symbol_g_ETHGBP, '#', 'Продаем', quantity_pair_b, 'ETH', 'за', price_b, 'GBP', 'по цене', price_bids_g_ETHGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ETHUSDT_ETHGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_ETHUSDT_ETHAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0 and price_bids_g_ETHAUD != 0.0 and qty_bids_g_ETHAUD != 0.0 and price_asks_g_ETHAUD != 0.0 and qty_asks_g_ETHAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ETHAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ETHAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ETHAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ETHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ETHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ETHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ETHAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ETHAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ETHUSDT, '#', 'Покупаем', quantity_pair_a, 'ETH', 'за', price_a, 'USDT', 'по цене', price_asks_g_ETHUSDT) 
				print('Пара_B:', symbol_g_ETHAUD, '#', 'Продаем', quantity_pair_b, 'ETH', 'за', price_b, 'AUD', 'по цене', price_bids_g_ETHAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ETHUSDT_ETHAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_BNBUSDT_BNBBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0 and price_bids_g_BNBBTC != 0.0 and qty_bids_g_BNBBTC != 0.0 and price_asks_g_BNBBTC != 0.0 and qty_asks_g_BNBBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BNBBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BNBBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BNBBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BNBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BNBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BNBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BNBBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BNBBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BNBUSDT, '#', 'Покупаем', quantity_pair_a, 'BNB', 'за', price_a, 'USDT', 'по цене', price_asks_g_BNBUSDT) 
				print('Пара_B:', symbol_g_BNBBTC, '#', 'Продаем', quantity_pair_b, 'BNB', 'за', price_b, 'BTC', 'по цене', price_bids_g_BNBBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BNBUSDT_BNBBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BNBUSDT_BNBETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0 and price_bids_g_BNBETH != 0.0 and qty_bids_g_BNBETH != 0.0 and price_asks_g_BNBETH != 0.0 and qty_asks_g_BNBETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BNBETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BNBETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BNBETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BNBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BNBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BNBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BNBETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BNBETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BNBUSDT, '#', 'Покупаем', quantity_pair_a, 'BNB', 'за', price_a, 'USDT', 'по цене', price_asks_g_BNBUSDT) 
				print('Пара_B:', symbol_g_BNBETH, '#', 'Продаем', quantity_pair_b, 'BNB', 'за', price_b, 'ETH', 'по цене', price_bids_g_BNBETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BNBUSDT_BNBETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_BNBUSDT_BNBBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0 and price_bids_g_BNBBUSD != 0.0 and qty_bids_g_BNBBUSD != 0.0 and price_asks_g_BNBBUSD != 0.0 and qty_asks_g_BNBBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BNBBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BNBBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BNBBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BNBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BNBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BNBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BNBBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BNBBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BNBUSDT, '#', 'Покупаем', quantity_pair_a, 'BNB', 'за', price_a, 'USDT', 'по цене', price_asks_g_BNBUSDT) 
				print('Пара_B:', symbol_g_BNBBUSD, '#', 'Продаем', quantity_pair_b, 'BNB', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BNBBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BNBUSDT_BNBBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BNBUSDT_BNBEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0 and price_bids_g_BNBEUR != 0.0 and qty_bids_g_BNBEUR != 0.0 and price_asks_g_BNBEUR != 0.0 and qty_asks_g_BNBEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BNBEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BNBEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BNBEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BNBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BNBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BNBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BNBEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BNBEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BNBUSDT, '#', 'Покупаем', quantity_pair_a, 'BNB', 'за', price_a, 'USDT', 'по цене', price_asks_g_BNBUSDT) 
				print('Пара_B:', symbol_g_BNBEUR, '#', 'Продаем', quantity_pair_b, 'BNB', 'за', price_b, 'EUR', 'по цене', price_bids_g_BNBEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BNBUSDT_BNBEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_BNBUSDT_BNBGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0 and price_bids_g_BNBGBP != 0.0 and qty_bids_g_BNBGBP != 0.0 and price_asks_g_BNBGBP != 0.0 and qty_asks_g_BNBGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BNBGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BNBGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BNBGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BNBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BNBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BNBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BNBGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BNBGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BNBUSDT, '#', 'Покупаем', quantity_pair_a, 'BNB', 'за', price_a, 'USDT', 'по цене', price_asks_g_BNBUSDT) 
				print('Пара_B:', symbol_g_BNBGBP, '#', 'Продаем', quantity_pair_b, 'BNB', 'за', price_b, 'GBP', 'по цене', price_bids_g_BNBGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BNBUSDT_BNBGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_BNBUSDT_BNBAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0 and price_bids_g_BNBAUD != 0.0 and qty_bids_g_BNBAUD != 0.0 and price_asks_g_BNBAUD != 0.0 and qty_asks_g_BNBAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BNBAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BNBAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BNBAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BNBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BNBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BNBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BNBAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BNBAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BNBUSDT, '#', 'Покупаем', quantity_pair_a, 'BNB', 'за', price_a, 'USDT', 'по цене', price_asks_g_BNBUSDT) 
				print('Пара_B:', symbol_g_BNBAUD, '#', 'Продаем', quantity_pair_b, 'BNB', 'за', price_b, 'AUD', 'по цене', price_bids_g_BNBAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BNBUSDT_BNBAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_NEOUSDT_NEOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NEOUSDT != 0.0 and qty_bids_g_NEOUSDT != 0.0 and price_asks_g_NEOUSDT != 0.0 and qty_asks_g_NEOUSDT != 0.0 and price_bids_g_NEOBTC != 0.0 and qty_bids_g_NEOBTC != 0.0 and price_asks_g_NEOBTC != 0.0 and qty_asks_g_NEOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NEOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NEOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NEOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NEOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NEOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NEOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NEOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NEOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NEOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NEOUSDT, '#', 'Покупаем', quantity_pair_a, 'NEO', 'за', price_a, 'USDT', 'по цене', price_asks_g_NEOUSDT) 
				print('Пара_B:', symbol_g_NEOBTC, '#', 'Продаем', quantity_pair_b, 'NEO', 'за', price_b, 'BTC', 'по цене', price_bids_g_NEOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NEOUSDT_NEOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_NEOUSDT_NEOETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NEOUSDT != 0.0 and qty_bids_g_NEOUSDT != 0.0 and price_asks_g_NEOUSDT != 0.0 and qty_asks_g_NEOUSDT != 0.0 and price_bids_g_NEOETH != 0.0 and qty_bids_g_NEOETH != 0.0 and price_asks_g_NEOETH != 0.0 and qty_asks_g_NEOETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NEOETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NEOETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NEOETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NEOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NEOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NEOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NEOETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NEOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NEOETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NEOUSDT, '#', 'Покупаем', quantity_pair_a, 'NEO', 'за', price_a, 'USDT', 'по цене', price_asks_g_NEOUSDT) 
				print('Пара_B:', symbol_g_NEOETH, '#', 'Продаем', quantity_pair_b, 'NEO', 'за', price_b, 'ETH', 'по цене', price_bids_g_NEOETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NEOUSDT_NEOETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_NEOUSDT_NEOBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NEOUSDT != 0.0 and qty_bids_g_NEOUSDT != 0.0 and price_asks_g_NEOUSDT != 0.0 and qty_asks_g_NEOUSDT != 0.0 and price_bids_g_NEOBNB != 0.0 and qty_bids_g_NEOBNB != 0.0 and price_asks_g_NEOBNB != 0.0 and qty_asks_g_NEOBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NEOBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NEOBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NEOBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NEOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NEOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NEOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NEOBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NEOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NEOBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NEOUSDT, '#', 'Покупаем', quantity_pair_a, 'NEO', 'за', price_a, 'USDT', 'по цене', price_asks_g_NEOUSDT) 
				print('Пара_B:', symbol_g_NEOBNB, '#', 'Продаем', quantity_pair_b, 'NEO', 'за', price_b, 'BNB', 'по цене', price_bids_g_NEOBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NEOUSDT_NEOBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_NEOUSDT_NEOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NEOUSDT != 0.0 and qty_bids_g_NEOUSDT != 0.0 and price_asks_g_NEOUSDT != 0.0 and qty_asks_g_NEOUSDT != 0.0 and price_bids_g_NEOBUSD != 0.0 and qty_bids_g_NEOBUSD != 0.0 and price_asks_g_NEOBUSD != 0.0 and qty_asks_g_NEOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NEOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NEOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NEOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NEOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NEOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NEOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NEOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NEOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NEOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NEOUSDT, '#', 'Покупаем', quantity_pair_a, 'NEO', 'за', price_a, 'USDT', 'по цене', price_asks_g_NEOUSDT) 
				print('Пара_B:', symbol_g_NEOBUSD, '#', 'Продаем', quantity_pair_b, 'NEO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_NEOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NEOUSDT_NEOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_LTCUSDT_LTCBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LTCUSDT != 0.0 and qty_bids_g_LTCUSDT != 0.0 and price_asks_g_LTCUSDT != 0.0 and qty_asks_g_LTCUSDT != 0.0 and price_bids_g_LTCBTC != 0.0 and qty_bids_g_LTCBTC != 0.0 and price_asks_g_LTCBTC != 0.0 and qty_asks_g_LTCBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LTCBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LTCBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LTCBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LTCBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LTCBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LTCUSDT, '#', 'Покупаем', quantity_pair_a, 'LTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_LTCUSDT) 
				print('Пара_B:', symbol_g_LTCBTC, '#', 'Продаем', quantity_pair_b, 'LTC', 'за', price_b, 'BTC', 'по цене', price_bids_g_LTCBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LTCUSDT_LTCBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_LTCUSDT_LTCETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LTCUSDT != 0.0 and qty_bids_g_LTCUSDT != 0.0 and price_asks_g_LTCUSDT != 0.0 and qty_asks_g_LTCUSDT != 0.0 and price_bids_g_LTCETH != 0.0 and qty_bids_g_LTCETH != 0.0 and price_asks_g_LTCETH != 0.0 and qty_asks_g_LTCETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LTCETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LTCETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LTCETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LTCETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LTCETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LTCUSDT, '#', 'Покупаем', quantity_pair_a, 'LTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_LTCUSDT) 
				print('Пара_B:', symbol_g_LTCETH, '#', 'Продаем', quantity_pair_b, 'LTC', 'за', price_b, 'ETH', 'по цене', price_bids_g_LTCETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LTCUSDT_LTCETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_LTCUSDT_LTCBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LTCUSDT != 0.0 and qty_bids_g_LTCUSDT != 0.0 and price_asks_g_LTCUSDT != 0.0 and qty_asks_g_LTCUSDT != 0.0 and price_bids_g_LTCBNB != 0.0 and qty_bids_g_LTCBNB != 0.0 and price_asks_g_LTCBNB != 0.0 and qty_asks_g_LTCBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LTCBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LTCBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LTCBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LTCBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LTCBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LTCUSDT, '#', 'Покупаем', quantity_pair_a, 'LTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_LTCUSDT) 
				print('Пара_B:', symbol_g_LTCBNB, '#', 'Продаем', quantity_pair_b, 'LTC', 'за', price_b, 'BNB', 'по цене', price_bids_g_LTCBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LTCUSDT_LTCBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_LTCUSDT_LTCBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LTCUSDT != 0.0 and qty_bids_g_LTCUSDT != 0.0 and price_asks_g_LTCUSDT != 0.0 and qty_asks_g_LTCUSDT != 0.0 and price_bids_g_LTCBUSD != 0.0 and qty_bids_g_LTCBUSD != 0.0 and price_asks_g_LTCBUSD != 0.0 and qty_asks_g_LTCBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LTCBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LTCBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LTCBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LTCBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LTCBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LTCUSDT, '#', 'Покупаем', quantity_pair_a, 'LTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_LTCUSDT) 
				print('Пара_B:', symbol_g_LTCBUSD, '#', 'Продаем', quantity_pair_b, 'LTC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LTCBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LTCUSDT_LTCBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_LTCUSDT_LTCEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LTCUSDT != 0.0 and qty_bids_g_LTCUSDT != 0.0 and price_asks_g_LTCUSDT != 0.0 and qty_asks_g_LTCUSDT != 0.0 and price_bids_g_LTCEUR != 0.0 and qty_bids_g_LTCEUR != 0.0 and price_asks_g_LTCEUR != 0.0 and qty_asks_g_LTCEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LTCEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LTCEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LTCEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LTCEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LTCEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LTCUSDT, '#', 'Покупаем', quantity_pair_a, 'LTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_LTCUSDT) 
				print('Пара_B:', symbol_g_LTCEUR, '#', 'Продаем', quantity_pair_b, 'LTC', 'за', price_b, 'EUR', 'по цене', price_bids_g_LTCEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LTCUSDT_LTCEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_LTCUSDT_LTCGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LTCUSDT != 0.0 and qty_bids_g_LTCUSDT != 0.0 and price_asks_g_LTCUSDT != 0.0 and qty_asks_g_LTCUSDT != 0.0 and price_bids_g_LTCGBP != 0.0 and qty_bids_g_LTCGBP != 0.0 and price_asks_g_LTCGBP != 0.0 and qty_asks_g_LTCGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LTCGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LTCGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LTCGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LTCGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LTCGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LTCUSDT, '#', 'Покупаем', quantity_pair_a, 'LTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_LTCUSDT) 
				print('Пара_B:', symbol_g_LTCGBP, '#', 'Продаем', quantity_pair_b, 'LTC', 'за', price_b, 'GBP', 'по цене', price_bids_g_LTCGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LTCUSDT_LTCGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_QTUMUSDT_QTUMETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_QTUMUSDT != 0.0 and qty_bids_g_QTUMUSDT != 0.0 and price_asks_g_QTUMUSDT != 0.0 and qty_asks_g_QTUMUSDT != 0.0 and price_bids_g_QTUMETH != 0.0 and qty_bids_g_QTUMETH != 0.0 and price_asks_g_QTUMETH != 0.0 and qty_asks_g_QTUMETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_QTUMETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_QTUMETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_QTUMETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_QTUMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_QTUMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_QTUMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_QTUMETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='QTUMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='QTUMETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_QTUMUSDT, '#', 'Покупаем', quantity_pair_a, 'QTUM', 'за', price_a, 'USDT', 'по цене', price_asks_g_QTUMUSDT) 
				print('Пара_B:', symbol_g_QTUMETH, '#', 'Продаем', quantity_pair_b, 'QTUM', 'за', price_b, 'ETH', 'по цене', price_bids_g_QTUMETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_QTUMUSDT_QTUMETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_QTUMUSDT_QTUMBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_QTUMUSDT != 0.0 and qty_bids_g_QTUMUSDT != 0.0 and price_asks_g_QTUMUSDT != 0.0 and qty_asks_g_QTUMUSDT != 0.0 and price_bids_g_QTUMBTC != 0.0 and qty_bids_g_QTUMBTC != 0.0 and price_asks_g_QTUMBTC != 0.0 and qty_asks_g_QTUMBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_QTUMBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_QTUMBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_QTUMBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_QTUMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_QTUMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_QTUMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_QTUMBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='QTUMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='QTUMBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_QTUMUSDT, '#', 'Покупаем', quantity_pair_a, 'QTUM', 'за', price_a, 'USDT', 'по цене', price_asks_g_QTUMUSDT) 
				print('Пара_B:', symbol_g_QTUMBTC, '#', 'Продаем', quantity_pair_b, 'QTUM', 'за', price_b, 'BTC', 'по цене', price_bids_g_QTUMBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_QTUMUSDT_QTUMBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_QTUMUSDT_QTUMBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_QTUMUSDT != 0.0 and qty_bids_g_QTUMUSDT != 0.0 and price_asks_g_QTUMUSDT != 0.0 and qty_asks_g_QTUMUSDT != 0.0 and price_bids_g_QTUMBUSD != 0.0 and qty_bids_g_QTUMBUSD != 0.0 and price_asks_g_QTUMBUSD != 0.0 and qty_asks_g_QTUMBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_QTUMBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_QTUMBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_QTUMBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_QTUMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_QTUMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_QTUMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_QTUMBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='QTUMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='QTUMBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_QTUMUSDT, '#', 'Покупаем', quantity_pair_a, 'QTUM', 'за', price_a, 'USDT', 'по цене', price_asks_g_QTUMUSDT) 
				print('Пара_B:', symbol_g_QTUMBUSD, '#', 'Продаем', quantity_pair_b, 'QTUM', 'за', price_b, 'BUSD', 'по цене', price_bids_g_QTUMBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_QTUMUSDT_QTUMBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ADAUSDT_ADABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ADAUSDT != 0.0 and qty_bids_g_ADAUSDT != 0.0 and price_asks_g_ADAUSDT != 0.0 and qty_asks_g_ADAUSDT != 0.0 and price_bids_g_ADABTC != 0.0 and qty_bids_g_ADABTC != 0.0 and price_asks_g_ADABTC != 0.0 and qty_asks_g_ADABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ADABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ADABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ADABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ADAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ADAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ADAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ADABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ADAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ADABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ADAUSDT, '#', 'Покупаем', quantity_pair_a, 'ADA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ADAUSDT) 
				print('Пара_B:', symbol_g_ADABTC, '#', 'Продаем', quantity_pair_b, 'ADA', 'за', price_b, 'BTC', 'по цене', price_bids_g_ADABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ADAUSDT_ADABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ADAUSDT_ADAETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ADAUSDT != 0.0 and qty_bids_g_ADAUSDT != 0.0 and price_asks_g_ADAUSDT != 0.0 and qty_asks_g_ADAUSDT != 0.0 and price_bids_g_ADAETH != 0.0 and qty_bids_g_ADAETH != 0.0 and price_asks_g_ADAETH != 0.0 and qty_asks_g_ADAETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ADAETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ADAETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ADAETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ADAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ADAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ADAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ADAETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ADAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ADAETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ADAUSDT, '#', 'Покупаем', quantity_pair_a, 'ADA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ADAUSDT) 
				print('Пара_B:', symbol_g_ADAETH, '#', 'Продаем', quantity_pair_b, 'ADA', 'за', price_b, 'ETH', 'по цене', price_bids_g_ADAETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ADAUSDT_ADAETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ADAUSDT_ADABNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ADAUSDT != 0.0 and qty_bids_g_ADAUSDT != 0.0 and price_asks_g_ADAUSDT != 0.0 and qty_asks_g_ADAUSDT != 0.0 and price_bids_g_ADABNB != 0.0 and qty_bids_g_ADABNB != 0.0 and price_asks_g_ADABNB != 0.0 and qty_asks_g_ADABNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ADABNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ADABNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ADABNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ADAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ADAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ADAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ADABNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ADAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ADABNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ADAUSDT, '#', 'Покупаем', quantity_pair_a, 'ADA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ADAUSDT) 
				print('Пара_B:', symbol_g_ADABNB, '#', 'Продаем', quantity_pair_b, 'ADA', 'за', price_b, 'BNB', 'по цене', price_bids_g_ADABNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ADAUSDT_ADABNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ADAUSDT_ADABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ADAUSDT != 0.0 and qty_bids_g_ADAUSDT != 0.0 and price_asks_g_ADAUSDT != 0.0 and qty_asks_g_ADAUSDT != 0.0 and price_bids_g_ADABUSD != 0.0 and qty_bids_g_ADABUSD != 0.0 and price_asks_g_ADABUSD != 0.0 and qty_asks_g_ADABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ADABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ADABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ADABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ADAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ADAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ADAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ADABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ADAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ADABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ADAUSDT, '#', 'Покупаем', quantity_pair_a, 'ADA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ADAUSDT) 
				print('Пара_B:', symbol_g_ADABUSD, '#', 'Продаем', quantity_pair_b, 'ADA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ADABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ADAUSDT_ADABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ADAUSDT_ADAEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ADAUSDT != 0.0 and qty_bids_g_ADAUSDT != 0.0 and price_asks_g_ADAUSDT != 0.0 and qty_asks_g_ADAUSDT != 0.0 and price_bids_g_ADAEUR != 0.0 and qty_bids_g_ADAEUR != 0.0 and price_asks_g_ADAEUR != 0.0 and qty_asks_g_ADAEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ADAEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ADAEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ADAEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ADAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ADAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ADAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ADAEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ADAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ADAEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ADAUSDT, '#', 'Покупаем', quantity_pair_a, 'ADA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ADAUSDT) 
				print('Пара_B:', symbol_g_ADAEUR, '#', 'Продаем', quantity_pair_b, 'ADA', 'за', price_b, 'EUR', 'по цене', price_bids_g_ADAEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ADAUSDT_ADAEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_ADAUSDT_ADAGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ADAUSDT != 0.0 and qty_bids_g_ADAUSDT != 0.0 and price_asks_g_ADAUSDT != 0.0 and qty_asks_g_ADAUSDT != 0.0 and price_bids_g_ADAGBP != 0.0 and qty_bids_g_ADAGBP != 0.0 and price_asks_g_ADAGBP != 0.0 and qty_asks_g_ADAGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ADAGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ADAGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ADAGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ADAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ADAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ADAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ADAGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ADAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ADAGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ADAUSDT, '#', 'Покупаем', quantity_pair_a, 'ADA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ADAUSDT) 
				print('Пара_B:', symbol_g_ADAGBP, '#', 'Продаем', quantity_pair_b, 'ADA', 'за', price_b, 'GBP', 'по цене', price_bids_g_ADAGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ADAUSDT_ADAGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_ADAUSDT_ADAAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ADAUSDT != 0.0 and qty_bids_g_ADAUSDT != 0.0 and price_asks_g_ADAUSDT != 0.0 and qty_asks_g_ADAUSDT != 0.0 and price_bids_g_ADAAUD != 0.0 and qty_bids_g_ADAAUD != 0.0 and price_asks_g_ADAAUD != 0.0 and qty_asks_g_ADAAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ADAAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ADAAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ADAAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ADAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ADAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ADAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ADAAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ADAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ADAAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ADAUSDT, '#', 'Покупаем', quantity_pair_a, 'ADA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ADAUSDT) 
				print('Пара_B:', symbol_g_ADAAUD, '#', 'Продаем', quantity_pair_b, 'ADA', 'за', price_b, 'AUD', 'по цене', price_bids_g_ADAAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ADAUSDT_ADAAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_XRPUSDT_XRPBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XRPUSDT != 0.0 and qty_bids_g_XRPUSDT != 0.0 and price_asks_g_XRPUSDT != 0.0 and qty_asks_g_XRPUSDT != 0.0 and price_bids_g_XRPBTC != 0.0 and qty_bids_g_XRPBTC != 0.0 and price_asks_g_XRPBTC != 0.0 and qty_asks_g_XRPBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XRPBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XRPBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XRPBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XRPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XRPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XRPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XRPBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XRPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XRPBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XRPUSDT, '#', 'Покупаем', quantity_pair_a, 'XRP', 'за', price_a, 'USDT', 'по цене', price_asks_g_XRPUSDT) 
				print('Пара_B:', symbol_g_XRPBTC, '#', 'Продаем', quantity_pair_b, 'XRP', 'за', price_b, 'BTC', 'по цене', price_bids_g_XRPBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XRPUSDT_XRPBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_XRPUSDT_XRPETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XRPUSDT != 0.0 and qty_bids_g_XRPUSDT != 0.0 and price_asks_g_XRPUSDT != 0.0 and qty_asks_g_XRPUSDT != 0.0 and price_bids_g_XRPETH != 0.0 and qty_bids_g_XRPETH != 0.0 and price_asks_g_XRPETH != 0.0 and qty_asks_g_XRPETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XRPETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XRPETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XRPETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XRPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XRPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XRPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XRPETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XRPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XRPETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XRPUSDT, '#', 'Покупаем', quantity_pair_a, 'XRP', 'за', price_a, 'USDT', 'по цене', price_asks_g_XRPUSDT) 
				print('Пара_B:', symbol_g_XRPETH, '#', 'Продаем', quantity_pair_b, 'XRP', 'за', price_b, 'ETH', 'по цене', price_bids_g_XRPETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XRPUSDT_XRPETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_XRPUSDT_XRPBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XRPUSDT != 0.0 and qty_bids_g_XRPUSDT != 0.0 and price_asks_g_XRPUSDT != 0.0 and qty_asks_g_XRPUSDT != 0.0 and price_bids_g_XRPBNB != 0.0 and qty_bids_g_XRPBNB != 0.0 and price_asks_g_XRPBNB != 0.0 and qty_asks_g_XRPBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XRPBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XRPBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XRPBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XRPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XRPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XRPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XRPBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XRPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XRPBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XRPUSDT, '#', 'Покупаем', quantity_pair_a, 'XRP', 'за', price_a, 'USDT', 'по цене', price_asks_g_XRPUSDT) 
				print('Пара_B:', symbol_g_XRPBNB, '#', 'Продаем', quantity_pair_b, 'XRP', 'за', price_b, 'BNB', 'по цене', price_bids_g_XRPBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XRPUSDT_XRPBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_XRPUSDT_XRPBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XRPUSDT != 0.0 and qty_bids_g_XRPUSDT != 0.0 and price_asks_g_XRPUSDT != 0.0 and qty_asks_g_XRPUSDT != 0.0 and price_bids_g_XRPBUSD != 0.0 and qty_bids_g_XRPBUSD != 0.0 and price_asks_g_XRPBUSD != 0.0 and qty_asks_g_XRPBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XRPBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XRPBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XRPBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XRPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XRPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XRPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XRPBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XRPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XRPBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XRPUSDT, '#', 'Покупаем', quantity_pair_a, 'XRP', 'за', price_a, 'USDT', 'по цене', price_asks_g_XRPUSDT) 
				print('Пара_B:', symbol_g_XRPBUSD, '#', 'Продаем', quantity_pair_b, 'XRP', 'за', price_b, 'BUSD', 'по цене', price_bids_g_XRPBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XRPUSDT_XRPBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_XRPUSDT_XRPEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XRPUSDT != 0.0 and qty_bids_g_XRPUSDT != 0.0 and price_asks_g_XRPUSDT != 0.0 and qty_asks_g_XRPUSDT != 0.0 and price_bids_g_XRPEUR != 0.0 and qty_bids_g_XRPEUR != 0.0 and price_asks_g_XRPEUR != 0.0 and qty_asks_g_XRPEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XRPEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XRPEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XRPEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XRPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XRPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XRPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XRPEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XRPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XRPEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XRPUSDT, '#', 'Покупаем', quantity_pair_a, 'XRP', 'за', price_a, 'USDT', 'по цене', price_asks_g_XRPUSDT) 
				print('Пара_B:', symbol_g_XRPEUR, '#', 'Продаем', quantity_pair_b, 'XRP', 'за', price_b, 'EUR', 'по цене', price_bids_g_XRPEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XRPUSDT_XRPEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_XRPUSDT_XRPGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XRPUSDT != 0.0 and qty_bids_g_XRPUSDT != 0.0 and price_asks_g_XRPUSDT != 0.0 and qty_asks_g_XRPUSDT != 0.0 and price_bids_g_XRPGBP != 0.0 and qty_bids_g_XRPGBP != 0.0 and price_asks_g_XRPGBP != 0.0 and qty_asks_g_XRPGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XRPGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XRPGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XRPGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XRPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XRPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XRPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XRPGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XRPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XRPGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XRPUSDT, '#', 'Покупаем', quantity_pair_a, 'XRP', 'за', price_a, 'USDT', 'по цене', price_asks_g_XRPUSDT) 
				print('Пара_B:', symbol_g_XRPGBP, '#', 'Продаем', quantity_pair_b, 'XRP', 'за', price_b, 'GBP', 'по цене', price_bids_g_XRPGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XRPUSDT_XRPGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_XRPUSDT_XRPAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XRPUSDT != 0.0 and qty_bids_g_XRPUSDT != 0.0 and price_asks_g_XRPUSDT != 0.0 and qty_asks_g_XRPUSDT != 0.0 and price_bids_g_XRPAUD != 0.0 and qty_bids_g_XRPAUD != 0.0 and price_asks_g_XRPAUD != 0.0 and qty_asks_g_XRPAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XRPAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XRPAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XRPAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XRPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XRPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XRPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XRPAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XRPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XRPAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XRPUSDT, '#', 'Покупаем', quantity_pair_a, 'XRP', 'за', price_a, 'USDT', 'по цене', price_asks_g_XRPUSDT) 
				print('Пара_B:', symbol_g_XRPAUD, '#', 'Продаем', quantity_pair_b, 'XRP', 'за', price_b, 'AUD', 'по цене', price_bids_g_XRPAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XRPUSDT_XRPAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_EOSUSDT_EOSETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_EOSUSDT != 0.0 and qty_bids_g_EOSUSDT != 0.0 and price_asks_g_EOSUSDT != 0.0 and qty_asks_g_EOSUSDT != 0.0 and price_bids_g_EOSETH != 0.0 and qty_bids_g_EOSETH != 0.0 and price_asks_g_EOSETH != 0.0 and qty_asks_g_EOSETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_EOSETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_EOSETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_EOSETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_EOSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_EOSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_EOSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_EOSETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='EOSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='EOSETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_EOSUSDT, '#', 'Покупаем', quantity_pair_a, 'EOS', 'за', price_a, 'USDT', 'по цене', price_asks_g_EOSUSDT) 
				print('Пара_B:', symbol_g_EOSETH, '#', 'Продаем', quantity_pair_b, 'EOS', 'за', price_b, 'ETH', 'по цене', price_bids_g_EOSETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_EOSUSDT_EOSETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_EOSUSDT_EOSBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_EOSUSDT != 0.0 and qty_bids_g_EOSUSDT != 0.0 and price_asks_g_EOSUSDT != 0.0 and qty_asks_g_EOSUSDT != 0.0 and price_bids_g_EOSBTC != 0.0 and qty_bids_g_EOSBTC != 0.0 and price_asks_g_EOSBTC != 0.0 and qty_asks_g_EOSBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_EOSBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_EOSBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_EOSBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_EOSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_EOSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_EOSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_EOSBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='EOSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='EOSBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_EOSUSDT, '#', 'Покупаем', quantity_pair_a, 'EOS', 'за', price_a, 'USDT', 'по цене', price_asks_g_EOSUSDT) 
				print('Пара_B:', symbol_g_EOSBTC, '#', 'Продаем', quantity_pair_b, 'EOS', 'за', price_b, 'BTC', 'по цене', price_bids_g_EOSBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_EOSUSDT_EOSBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_EOSUSDT_EOSBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_EOSUSDT != 0.0 and qty_bids_g_EOSUSDT != 0.0 and price_asks_g_EOSUSDT != 0.0 and qty_asks_g_EOSUSDT != 0.0 and price_bids_g_EOSBNB != 0.0 and qty_bids_g_EOSBNB != 0.0 and price_asks_g_EOSBNB != 0.0 and qty_asks_g_EOSBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_EOSBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_EOSBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_EOSBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_EOSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_EOSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_EOSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_EOSBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='EOSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='EOSBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_EOSUSDT, '#', 'Покупаем', quantity_pair_a, 'EOS', 'за', price_a, 'USDT', 'по цене', price_asks_g_EOSUSDT) 
				print('Пара_B:', symbol_g_EOSBNB, '#', 'Продаем', quantity_pair_b, 'EOS', 'за', price_b, 'BNB', 'по цене', price_bids_g_EOSBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_EOSUSDT_EOSBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_EOSUSDT_EOSBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_EOSUSDT != 0.0 and qty_bids_g_EOSUSDT != 0.0 and price_asks_g_EOSUSDT != 0.0 and qty_asks_g_EOSUSDT != 0.0 and price_bids_g_EOSBUSD != 0.0 and qty_bids_g_EOSBUSD != 0.0 and price_asks_g_EOSBUSD != 0.0 and qty_asks_g_EOSBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_EOSBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_EOSBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_EOSBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_EOSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_EOSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_EOSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_EOSBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='EOSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='EOSBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_EOSUSDT, '#', 'Покупаем', quantity_pair_a, 'EOS', 'за', price_a, 'USDT', 'по цене', price_asks_g_EOSUSDT) 
				print('Пара_B:', symbol_g_EOSBUSD, '#', 'Продаем', quantity_pair_b, 'EOS', 'за', price_b, 'BUSD', 'по цене', price_bids_g_EOSBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_EOSUSDT_EOSBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_EOSUSDT_EOSEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_EOSUSDT != 0.0 and qty_bids_g_EOSUSDT != 0.0 and price_asks_g_EOSUSDT != 0.0 and qty_asks_g_EOSUSDT != 0.0 and price_bids_g_EOSEUR != 0.0 and qty_bids_g_EOSEUR != 0.0 and price_asks_g_EOSEUR != 0.0 and qty_asks_g_EOSEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_EOSEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_EOSEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_EOSEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_EOSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_EOSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_EOSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_EOSEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='EOSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='EOSEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_EOSUSDT, '#', 'Покупаем', quantity_pair_a, 'EOS', 'за', price_a, 'USDT', 'по цене', price_asks_g_EOSUSDT) 
				print('Пара_B:', symbol_g_EOSEUR, '#', 'Продаем', quantity_pair_b, 'EOS', 'за', price_b, 'EUR', 'по цене', price_bids_g_EOSEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_EOSUSDT_EOSEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_IOTAUSDT_IOTABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IOTAUSDT != 0.0 and qty_bids_g_IOTAUSDT != 0.0 and price_asks_g_IOTAUSDT != 0.0 and qty_asks_g_IOTAUSDT != 0.0 and price_bids_g_IOTABTC != 0.0 and qty_bids_g_IOTABTC != 0.0 and price_asks_g_IOTABTC != 0.0 and qty_asks_g_IOTABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IOTABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IOTABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IOTABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IOTAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IOTAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IOTAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IOTABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IOTAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IOTABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IOTAUSDT, '#', 'Покупаем', quantity_pair_a, 'IOTA', 'за', price_a, 'USDT', 'по цене', price_asks_g_IOTAUSDT) 
				print('Пара_B:', symbol_g_IOTABTC, '#', 'Продаем', quantity_pair_b, 'IOTA', 'за', price_b, 'BTC', 'по цене', price_bids_g_IOTABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IOTAUSDT_IOTABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_IOTAUSDT_IOTAETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IOTAUSDT != 0.0 and qty_bids_g_IOTAUSDT != 0.0 and price_asks_g_IOTAUSDT != 0.0 and qty_asks_g_IOTAUSDT != 0.0 and price_bids_g_IOTAETH != 0.0 and qty_bids_g_IOTAETH != 0.0 and price_asks_g_IOTAETH != 0.0 and qty_asks_g_IOTAETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IOTAETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IOTAETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IOTAETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IOTAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IOTAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IOTAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IOTAETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IOTAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IOTAETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IOTAUSDT, '#', 'Покупаем', quantity_pair_a, 'IOTA', 'за', price_a, 'USDT', 'по цене', price_asks_g_IOTAUSDT) 
				print('Пара_B:', symbol_g_IOTAETH, '#', 'Продаем', quantity_pair_b, 'IOTA', 'за', price_b, 'ETH', 'по цене', price_bids_g_IOTAETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IOTAUSDT_IOTAETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_IOTAUSDT_IOTABNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IOTAUSDT != 0.0 and qty_bids_g_IOTAUSDT != 0.0 and price_asks_g_IOTAUSDT != 0.0 and qty_asks_g_IOTAUSDT != 0.0 and price_bids_g_IOTABNB != 0.0 and qty_bids_g_IOTABNB != 0.0 and price_asks_g_IOTABNB != 0.0 and qty_asks_g_IOTABNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IOTABNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IOTABNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IOTABNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IOTAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IOTAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IOTAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IOTABNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IOTAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IOTABNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IOTAUSDT, '#', 'Покупаем', quantity_pair_a, 'IOTA', 'за', price_a, 'USDT', 'по цене', price_asks_g_IOTAUSDT) 
				print('Пара_B:', symbol_g_IOTABNB, '#', 'Продаем', quantity_pair_b, 'IOTA', 'за', price_b, 'BNB', 'по цене', price_bids_g_IOTABNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IOTAUSDT_IOTABNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_IOTAUSDT_IOTABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IOTAUSDT != 0.0 and qty_bids_g_IOTAUSDT != 0.0 and price_asks_g_IOTAUSDT != 0.0 and qty_asks_g_IOTAUSDT != 0.0 and price_bids_g_IOTABUSD != 0.0 and qty_bids_g_IOTABUSD != 0.0 and price_asks_g_IOTABUSD != 0.0 and qty_asks_g_IOTABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IOTABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IOTABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IOTABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IOTAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IOTAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IOTAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IOTABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IOTAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IOTABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IOTAUSDT, '#', 'Покупаем', quantity_pair_a, 'IOTA', 'за', price_a, 'USDT', 'по цене', price_asks_g_IOTAUSDT) 
				print('Пара_B:', symbol_g_IOTABUSD, '#', 'Продаем', quantity_pair_b, 'IOTA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_IOTABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IOTAUSDT_IOTABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_XLMUSDT_XLMBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XLMUSDT != 0.0 and qty_bids_g_XLMUSDT != 0.0 and price_asks_g_XLMUSDT != 0.0 and qty_asks_g_XLMUSDT != 0.0 and price_bids_g_XLMBTC != 0.0 and qty_bids_g_XLMBTC != 0.0 and price_asks_g_XLMBTC != 0.0 and qty_asks_g_XLMBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XLMBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XLMBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XLMBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XLMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XLMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XLMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XLMBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XLMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XLMBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XLMUSDT, '#', 'Покупаем', quantity_pair_a, 'XLM', 'за', price_a, 'USDT', 'по цене', price_asks_g_XLMUSDT) 
				print('Пара_B:', symbol_g_XLMBTC, '#', 'Продаем', quantity_pair_b, 'XLM', 'за', price_b, 'BTC', 'по цене', price_bids_g_XLMBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XLMUSDT_XLMBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_XLMUSDT_XLMETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XLMUSDT != 0.0 and qty_bids_g_XLMUSDT != 0.0 and price_asks_g_XLMUSDT != 0.0 and qty_asks_g_XLMUSDT != 0.0 and price_bids_g_XLMETH != 0.0 and qty_bids_g_XLMETH != 0.0 and price_asks_g_XLMETH != 0.0 and qty_asks_g_XLMETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XLMETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XLMETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XLMETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XLMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XLMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XLMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XLMETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XLMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XLMETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XLMUSDT, '#', 'Покупаем', quantity_pair_a, 'XLM', 'за', price_a, 'USDT', 'по цене', price_asks_g_XLMUSDT) 
				print('Пара_B:', symbol_g_XLMETH, '#', 'Продаем', quantity_pair_b, 'XLM', 'за', price_b, 'ETH', 'по цене', price_bids_g_XLMETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XLMUSDT_XLMETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_XLMUSDT_XLMBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XLMUSDT != 0.0 and qty_bids_g_XLMUSDT != 0.0 and price_asks_g_XLMUSDT != 0.0 and qty_asks_g_XLMUSDT != 0.0 and price_bids_g_XLMBNB != 0.0 and qty_bids_g_XLMBNB != 0.0 and price_asks_g_XLMBNB != 0.0 and qty_asks_g_XLMBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XLMBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XLMBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XLMBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XLMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XLMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XLMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XLMBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XLMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XLMBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XLMUSDT, '#', 'Покупаем', quantity_pair_a, 'XLM', 'за', price_a, 'USDT', 'по цене', price_asks_g_XLMUSDT) 
				print('Пара_B:', symbol_g_XLMBNB, '#', 'Продаем', quantity_pair_b, 'XLM', 'за', price_b, 'BNB', 'по цене', price_bids_g_XLMBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XLMUSDT_XLMBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_XLMUSDT_XLMBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XLMUSDT != 0.0 and qty_bids_g_XLMUSDT != 0.0 and price_asks_g_XLMUSDT != 0.0 and qty_asks_g_XLMUSDT != 0.0 and price_bids_g_XLMBUSD != 0.0 and qty_bids_g_XLMBUSD != 0.0 and price_asks_g_XLMBUSD != 0.0 and qty_asks_g_XLMBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XLMBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XLMBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XLMBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XLMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XLMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XLMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XLMBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XLMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XLMBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XLMUSDT, '#', 'Покупаем', quantity_pair_a, 'XLM', 'за', price_a, 'USDT', 'по цене', price_asks_g_XLMUSDT) 
				print('Пара_B:', symbol_g_XLMBUSD, '#', 'Продаем', quantity_pair_b, 'XLM', 'за', price_b, 'BUSD', 'по цене', price_bids_g_XLMBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XLMUSDT_XLMBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_XLMUSDT_XLMEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XLMUSDT != 0.0 and qty_bids_g_XLMUSDT != 0.0 and price_asks_g_XLMUSDT != 0.0 and qty_asks_g_XLMUSDT != 0.0 and price_bids_g_XLMEUR != 0.0 and qty_bids_g_XLMEUR != 0.0 and price_asks_g_XLMEUR != 0.0 and qty_asks_g_XLMEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XLMEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XLMEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XLMEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XLMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XLMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XLMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XLMEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XLMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XLMEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XLMUSDT, '#', 'Покупаем', quantity_pair_a, 'XLM', 'за', price_a, 'USDT', 'по цене', price_asks_g_XLMUSDT) 
				print('Пара_B:', symbol_g_XLMEUR, '#', 'Продаем', quantity_pair_b, 'XLM', 'за', price_b, 'EUR', 'по цене', price_bids_g_XLMEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XLMUSDT_XLMEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_ONTUSDT_ONTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ONTUSDT != 0.0 and qty_bids_g_ONTUSDT != 0.0 and price_asks_g_ONTUSDT != 0.0 and qty_asks_g_ONTUSDT != 0.0 and price_bids_g_ONTBTC != 0.0 and qty_bids_g_ONTBTC != 0.0 and price_asks_g_ONTBTC != 0.0 and qty_asks_g_ONTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ONTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ONTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ONTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ONTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ONTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ONTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ONTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ONTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ONTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ONTUSDT, '#', 'Покупаем', quantity_pair_a, 'ONT', 'за', price_a, 'USDT', 'по цене', price_asks_g_ONTUSDT) 
				print('Пара_B:', symbol_g_ONTBTC, '#', 'Продаем', quantity_pair_b, 'ONT', 'за', price_b, 'BTC', 'по цене', price_bids_g_ONTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ONTUSDT_ONTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ONTUSDT_ONTETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ONTUSDT != 0.0 and qty_bids_g_ONTUSDT != 0.0 and price_asks_g_ONTUSDT != 0.0 and qty_asks_g_ONTUSDT != 0.0 and price_bids_g_ONTETH != 0.0 and qty_bids_g_ONTETH != 0.0 and price_asks_g_ONTETH != 0.0 and qty_asks_g_ONTETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ONTETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ONTETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ONTETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ONTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ONTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ONTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ONTETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ONTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ONTETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ONTUSDT, '#', 'Покупаем', quantity_pair_a, 'ONT', 'за', price_a, 'USDT', 'по цене', price_asks_g_ONTUSDT) 
				print('Пара_B:', symbol_g_ONTETH, '#', 'Продаем', quantity_pair_b, 'ONT', 'за', price_b, 'ETH', 'по цене', price_bids_g_ONTETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ONTUSDT_ONTETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ONTUSDT_ONTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ONTUSDT != 0.0 and qty_bids_g_ONTUSDT != 0.0 and price_asks_g_ONTUSDT != 0.0 and qty_asks_g_ONTUSDT != 0.0 and price_bids_g_ONTBUSD != 0.0 and qty_bids_g_ONTBUSD != 0.0 and price_asks_g_ONTBUSD != 0.0 and qty_asks_g_ONTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ONTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ONTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ONTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ONTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ONTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ONTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ONTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ONTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ONTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ONTUSDT, '#', 'Покупаем', quantity_pair_a, 'ONT', 'за', price_a, 'USDT', 'по цене', price_asks_g_ONTUSDT) 
				print('Пара_B:', symbol_g_ONTBUSD, '#', 'Продаем', quantity_pair_b, 'ONT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ONTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ONTUSDT_ONTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_TRXUSDT_TRXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TRXUSDT != 0.0 and qty_bids_g_TRXUSDT != 0.0 and price_asks_g_TRXUSDT != 0.0 and qty_asks_g_TRXUSDT != 0.0 and price_bids_g_TRXBTC != 0.0 and qty_bids_g_TRXBTC != 0.0 and price_asks_g_TRXBTC != 0.0 and qty_asks_g_TRXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TRXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TRXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TRXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TRXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TRXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TRXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TRXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TRXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TRXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TRXUSDT, '#', 'Покупаем', quantity_pair_a, 'TRX', 'за', price_a, 'USDT', 'по цене', price_asks_g_TRXUSDT) 
				print('Пара_B:', symbol_g_TRXBTC, '#', 'Продаем', quantity_pair_b, 'TRX', 'за', price_b, 'BTC', 'по цене', price_bids_g_TRXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TRXUSDT_TRXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_TRXUSDT_TRXETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TRXUSDT != 0.0 and qty_bids_g_TRXUSDT != 0.0 and price_asks_g_TRXUSDT != 0.0 and qty_asks_g_TRXUSDT != 0.0 and price_bids_g_TRXETH != 0.0 and qty_bids_g_TRXETH != 0.0 and price_asks_g_TRXETH != 0.0 and qty_asks_g_TRXETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TRXETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TRXETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TRXETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TRXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TRXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TRXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TRXETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TRXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TRXETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TRXUSDT, '#', 'Покупаем', quantity_pair_a, 'TRX', 'за', price_a, 'USDT', 'по цене', price_asks_g_TRXUSDT) 
				print('Пара_B:', symbol_g_TRXETH, '#', 'Продаем', quantity_pair_b, 'TRX', 'за', price_b, 'ETH', 'по цене', price_bids_g_TRXETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TRXUSDT_TRXETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_TRXUSDT_TRXBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TRXUSDT != 0.0 and qty_bids_g_TRXUSDT != 0.0 and price_asks_g_TRXUSDT != 0.0 and qty_asks_g_TRXUSDT != 0.0 and price_bids_g_TRXBNB != 0.0 and qty_bids_g_TRXBNB != 0.0 and price_asks_g_TRXBNB != 0.0 and qty_asks_g_TRXBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TRXBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TRXBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TRXBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TRXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TRXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TRXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TRXBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TRXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TRXBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TRXUSDT, '#', 'Покупаем', quantity_pair_a, 'TRX', 'за', price_a, 'USDT', 'по цене', price_asks_g_TRXUSDT) 
				print('Пара_B:', symbol_g_TRXBNB, '#', 'Продаем', quantity_pair_b, 'TRX', 'за', price_b, 'BNB', 'по цене', price_bids_g_TRXBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TRXUSDT_TRXBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_TRXUSDT_TRXXRP_XRPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TRXUSDT != 0.0 and qty_bids_g_TRXUSDT != 0.0 and price_asks_g_TRXUSDT != 0.0 and qty_asks_g_TRXUSDT != 0.0 and price_bids_g_TRXXRP != 0.0 and qty_bids_g_TRXXRP != 0.0 and price_asks_g_TRXXRP != 0.0 and qty_asks_g_TRXXRP != 0.0 and price_bids_g_XRPUSDT != 0.0 and qty_bids_g_XRPUSDT != 0.0 and price_asks_g_XRPUSDT != 0.0 and qty_asks_g_XRPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_XRPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_XRPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TRXXRP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TRXXRP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TRXXRP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TRXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TRXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TRXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TRXXRP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_XRPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TRXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TRXXRP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='XRPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TRXUSDT, '#', 'Покупаем', quantity_pair_a, 'TRX', 'за', price_a, 'USDT', 'по цене', price_asks_g_TRXUSDT) 
				print('Пара_B:', symbol_g_TRXXRP, '#', 'Продаем', quantity_pair_b, 'TRX', 'за', price_b, 'XRP', 'по цене', price_bids_g_TRXXRP) 
				print('Пара_C:', symbol_g_XRPUSDT, '#', 'Продаем', quantity_pair_c, 'XRP', 'за', price_c, 'USDT', 'по цене', price_bids_g_XRPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TRXUSDT_TRXXRP_XRPUSDT_Trade).start() 

###################################################################### 


def loop_TRXUSDT_TRXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TRXUSDT != 0.0 and qty_bids_g_TRXUSDT != 0.0 and price_asks_g_TRXUSDT != 0.0 and qty_asks_g_TRXUSDT != 0.0 and price_bids_g_TRXBUSD != 0.0 and qty_bids_g_TRXBUSD != 0.0 and price_asks_g_TRXBUSD != 0.0 and qty_asks_g_TRXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TRXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TRXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TRXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TRXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TRXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TRXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TRXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TRXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TRXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TRXUSDT, '#', 'Покупаем', quantity_pair_a, 'TRX', 'за', price_a, 'USDT', 'по цене', price_asks_g_TRXUSDT) 
				print('Пара_B:', symbol_g_TRXBUSD, '#', 'Продаем', quantity_pair_b, 'TRX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_TRXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TRXUSDT_TRXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_TRXUSDT_TRXEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TRXUSDT != 0.0 and qty_bids_g_TRXUSDT != 0.0 and price_asks_g_TRXUSDT != 0.0 and qty_asks_g_TRXUSDT != 0.0 and price_bids_g_TRXEUR != 0.0 and qty_bids_g_TRXEUR != 0.0 and price_asks_g_TRXEUR != 0.0 and qty_asks_g_TRXEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TRXEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TRXEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TRXEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TRXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TRXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TRXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TRXEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TRXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TRXEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TRXUSDT, '#', 'Покупаем', quantity_pair_a, 'TRX', 'за', price_a, 'USDT', 'по цене', price_asks_g_TRXUSDT) 
				print('Пара_B:', symbol_g_TRXEUR, '#', 'Продаем', quantity_pair_b, 'TRX', 'за', price_b, 'EUR', 'по цене', price_bids_g_TRXEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TRXUSDT_TRXEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_ETCUSDT_ETCETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ETCUSDT != 0.0 and qty_bids_g_ETCUSDT != 0.0 and price_asks_g_ETCUSDT != 0.0 and qty_asks_g_ETCUSDT != 0.0 and price_bids_g_ETCETH != 0.0 and qty_bids_g_ETCETH != 0.0 and price_asks_g_ETCETH != 0.0 and qty_asks_g_ETCETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ETCETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ETCETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ETCETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ETCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ETCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ETCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ETCETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ETCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ETCETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ETCUSDT, '#', 'Покупаем', quantity_pair_a, 'ETC', 'за', price_a, 'USDT', 'по цене', price_asks_g_ETCUSDT) 
				print('Пара_B:', symbol_g_ETCETH, '#', 'Продаем', quantity_pair_b, 'ETC', 'за', price_b, 'ETH', 'по цене', price_bids_g_ETCETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ETCUSDT_ETCETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ETCUSDT_ETCBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ETCUSDT != 0.0 and qty_bids_g_ETCUSDT != 0.0 and price_asks_g_ETCUSDT != 0.0 and qty_asks_g_ETCUSDT != 0.0 and price_bids_g_ETCBTC != 0.0 and qty_bids_g_ETCBTC != 0.0 and price_asks_g_ETCBTC != 0.0 and qty_asks_g_ETCBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ETCBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ETCBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ETCBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ETCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ETCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ETCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ETCBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ETCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ETCBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ETCUSDT, '#', 'Покупаем', quantity_pair_a, 'ETC', 'за', price_a, 'USDT', 'по цене', price_asks_g_ETCUSDT) 
				print('Пара_B:', symbol_g_ETCBTC, '#', 'Продаем', quantity_pair_b, 'ETC', 'за', price_b, 'BTC', 'по цене', price_bids_g_ETCBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ETCUSDT_ETCBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ETCUSDT_ETCBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ETCUSDT != 0.0 and qty_bids_g_ETCUSDT != 0.0 and price_asks_g_ETCUSDT != 0.0 and qty_asks_g_ETCUSDT != 0.0 and price_bids_g_ETCBNB != 0.0 and qty_bids_g_ETCBNB != 0.0 and price_asks_g_ETCBNB != 0.0 and qty_asks_g_ETCBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ETCBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ETCBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ETCBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ETCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ETCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ETCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ETCBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ETCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ETCBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ETCUSDT, '#', 'Покупаем', quantity_pair_a, 'ETC', 'за', price_a, 'USDT', 'по цене', price_asks_g_ETCUSDT) 
				print('Пара_B:', symbol_g_ETCBNB, '#', 'Продаем', quantity_pair_b, 'ETC', 'за', price_b, 'BNB', 'по цене', price_bids_g_ETCBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ETCUSDT_ETCBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ETCUSDT_ETCBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ETCUSDT != 0.0 and qty_bids_g_ETCUSDT != 0.0 and price_asks_g_ETCUSDT != 0.0 and qty_asks_g_ETCUSDT != 0.0 and price_bids_g_ETCBUSD != 0.0 and qty_bids_g_ETCBUSD != 0.0 and price_asks_g_ETCBUSD != 0.0 and qty_asks_g_ETCBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ETCBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ETCBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ETCBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ETCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ETCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ETCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ETCBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ETCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ETCBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ETCUSDT, '#', 'Покупаем', quantity_pair_a, 'ETC', 'за', price_a, 'USDT', 'по цене', price_asks_g_ETCUSDT) 
				print('Пара_B:', symbol_g_ETCBUSD, '#', 'Продаем', quantity_pair_b, 'ETC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ETCBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ETCUSDT_ETCBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ETCUSDT_ETCEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ETCUSDT != 0.0 and qty_bids_g_ETCUSDT != 0.0 and price_asks_g_ETCUSDT != 0.0 and qty_asks_g_ETCUSDT != 0.0 and price_bids_g_ETCEUR != 0.0 and qty_bids_g_ETCEUR != 0.0 and price_asks_g_ETCEUR != 0.0 and qty_asks_g_ETCEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ETCEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ETCEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ETCEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ETCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ETCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ETCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ETCEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ETCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ETCEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ETCUSDT, '#', 'Покупаем', quantity_pair_a, 'ETC', 'за', price_a, 'USDT', 'по цене', price_asks_g_ETCUSDT) 
				print('Пара_B:', symbol_g_ETCEUR, '#', 'Продаем', quantity_pair_b, 'ETC', 'за', price_b, 'EUR', 'по цене', price_bids_g_ETCEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ETCUSDT_ETCEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_ICXUSDT_ICXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ICXUSDT != 0.0 and qty_bids_g_ICXUSDT != 0.0 and price_asks_g_ICXUSDT != 0.0 and qty_asks_g_ICXUSDT != 0.0 and price_bids_g_ICXBTC != 0.0 and qty_bids_g_ICXBTC != 0.0 and price_asks_g_ICXBTC != 0.0 and qty_asks_g_ICXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ICXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ICXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ICXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ICXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ICXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ICXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ICXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ICXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ICXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ICXUSDT, '#', 'Покупаем', quantity_pair_a, 'ICX', 'за', price_a, 'USDT', 'по цене', price_asks_g_ICXUSDT) 
				print('Пара_B:', symbol_g_ICXBTC, '#', 'Продаем', quantity_pair_b, 'ICX', 'за', price_b, 'BTC', 'по цене', price_bids_g_ICXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ICXUSDT_ICXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ICXUSDT_ICXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ICXUSDT != 0.0 and qty_bids_g_ICXUSDT != 0.0 and price_asks_g_ICXUSDT != 0.0 and qty_asks_g_ICXUSDT != 0.0 and price_bids_g_ICXBUSD != 0.0 and qty_bids_g_ICXBUSD != 0.0 and price_asks_g_ICXBUSD != 0.0 and qty_asks_g_ICXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ICXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ICXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ICXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ICXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ICXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ICXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ICXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ICXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ICXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ICXUSDT, '#', 'Покупаем', quantity_pair_a, 'ICX', 'за', price_a, 'USDT', 'по цене', price_asks_g_ICXUSDT) 
				print('Пара_B:', symbol_g_ICXBUSD, '#', 'Продаем', quantity_pair_b, 'ICX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ICXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ICXUSDT_ICXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_NULSUSDT_NULSBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NULSUSDT != 0.0 and qty_bids_g_NULSUSDT != 0.0 and price_asks_g_NULSUSDT != 0.0 and qty_asks_g_NULSUSDT != 0.0 and price_bids_g_NULSBTC != 0.0 and qty_bids_g_NULSBTC != 0.0 and price_asks_g_NULSBTC != 0.0 and qty_asks_g_NULSBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NULSBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NULSBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NULSBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NULSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NULSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NULSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NULSBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NULSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NULSBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NULSUSDT, '#', 'Покупаем', quantity_pair_a, 'NULS', 'за', price_a, 'USDT', 'по цене', price_asks_g_NULSUSDT) 
				print('Пара_B:', symbol_g_NULSBTC, '#', 'Продаем', quantity_pair_b, 'NULS', 'за', price_b, 'BTC', 'по цене', price_bids_g_NULSBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NULSUSDT_NULSBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_NULSUSDT_NULSBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NULSUSDT != 0.0 and qty_bids_g_NULSUSDT != 0.0 and price_asks_g_NULSUSDT != 0.0 and qty_asks_g_NULSUSDT != 0.0 and price_bids_g_NULSBUSD != 0.0 and qty_bids_g_NULSBUSD != 0.0 and price_asks_g_NULSBUSD != 0.0 and qty_asks_g_NULSBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NULSBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NULSBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NULSBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NULSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NULSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NULSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NULSBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NULSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NULSBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NULSUSDT, '#', 'Покупаем', quantity_pair_a, 'NULS', 'за', price_a, 'USDT', 'по цене', price_asks_g_NULSUSDT) 
				print('Пара_B:', symbol_g_NULSBUSD, '#', 'Продаем', quantity_pair_b, 'NULS', 'за', price_b, 'BUSD', 'по цене', price_bids_g_NULSBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NULSUSDT_NULSBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_VETUSDT_VETBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_VETUSDT != 0.0 and qty_bids_g_VETUSDT != 0.0 and price_asks_g_VETUSDT != 0.0 and qty_asks_g_VETUSDT != 0.0 and price_bids_g_VETBTC != 0.0 and qty_bids_g_VETBTC != 0.0 and price_asks_g_VETBTC != 0.0 and qty_asks_g_VETBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_VETBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_VETBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_VETBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_VETUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_VETUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_VETUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_VETBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='VETUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='VETBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_VETUSDT, '#', 'Покупаем', quantity_pair_a, 'VET', 'за', price_a, 'USDT', 'по цене', price_asks_g_VETUSDT) 
				print('Пара_B:', symbol_g_VETBTC, '#', 'Продаем', quantity_pair_b, 'VET', 'за', price_b, 'BTC', 'по цене', price_bids_g_VETBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_VETUSDT_VETBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_VETUSDT_VETETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_VETUSDT != 0.0 and qty_bids_g_VETUSDT != 0.0 and price_asks_g_VETUSDT != 0.0 and qty_asks_g_VETUSDT != 0.0 and price_bids_g_VETETH != 0.0 and qty_bids_g_VETETH != 0.0 and price_asks_g_VETETH != 0.0 and qty_asks_g_VETETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_VETETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_VETETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_VETETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_VETUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_VETUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_VETUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_VETETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='VETUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='VETETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_VETUSDT, '#', 'Покупаем', quantity_pair_a, 'VET', 'за', price_a, 'USDT', 'по цене', price_asks_g_VETUSDT) 
				print('Пара_B:', symbol_g_VETETH, '#', 'Продаем', quantity_pair_b, 'VET', 'за', price_b, 'ETH', 'по цене', price_bids_g_VETETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_VETUSDT_VETETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_VETUSDT_VETBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_VETUSDT != 0.0 and qty_bids_g_VETUSDT != 0.0 and price_asks_g_VETUSDT != 0.0 and qty_asks_g_VETUSDT != 0.0 and price_bids_g_VETBNB != 0.0 and qty_bids_g_VETBNB != 0.0 and price_asks_g_VETBNB != 0.0 and qty_asks_g_VETBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_VETBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_VETBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_VETBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_VETUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_VETUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_VETUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_VETBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='VETUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='VETBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_VETUSDT, '#', 'Покупаем', quantity_pair_a, 'VET', 'за', price_a, 'USDT', 'по цене', price_asks_g_VETUSDT) 
				print('Пара_B:', symbol_g_VETBNB, '#', 'Продаем', quantity_pair_b, 'VET', 'за', price_b, 'BNB', 'по цене', price_bids_g_VETBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_VETUSDT_VETBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_VETUSDT_VETBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_VETUSDT != 0.0 and qty_bids_g_VETUSDT != 0.0 and price_asks_g_VETUSDT != 0.0 and qty_asks_g_VETUSDT != 0.0 and price_bids_g_VETBUSD != 0.0 and qty_bids_g_VETBUSD != 0.0 and price_asks_g_VETBUSD != 0.0 and qty_asks_g_VETBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_VETBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_VETBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_VETBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_VETUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_VETUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_VETUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_VETBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='VETUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='VETBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_VETUSDT, '#', 'Покупаем', quantity_pair_a, 'VET', 'за', price_a, 'USDT', 'по цене', price_asks_g_VETUSDT) 
				print('Пара_B:', symbol_g_VETBUSD, '#', 'Продаем', quantity_pair_b, 'VET', 'за', price_b, 'BUSD', 'по цене', price_bids_g_VETBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_VETUSDT_VETBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_VETUSDT_VETEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_VETUSDT != 0.0 and qty_bids_g_VETUSDT != 0.0 and price_asks_g_VETUSDT != 0.0 and qty_asks_g_VETUSDT != 0.0 and price_bids_g_VETEUR != 0.0 and qty_bids_g_VETEUR != 0.0 and price_asks_g_VETEUR != 0.0 and qty_asks_g_VETEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_VETEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_VETEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_VETEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_VETUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_VETUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_VETUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_VETEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='VETUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='VETEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_VETUSDT, '#', 'Покупаем', quantity_pair_a, 'VET', 'за', price_a, 'USDT', 'по цене', price_asks_g_VETUSDT) 
				print('Пара_B:', symbol_g_VETEUR, '#', 'Продаем', quantity_pair_b, 'VET', 'за', price_b, 'EUR', 'по цене', price_bids_g_VETEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_VETUSDT_VETEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_VETUSDT_VETGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_VETUSDT != 0.0 and qty_bids_g_VETUSDT != 0.0 and price_asks_g_VETUSDT != 0.0 and qty_asks_g_VETUSDT != 0.0 and price_bids_g_VETGBP != 0.0 and qty_bids_g_VETGBP != 0.0 and price_asks_g_VETGBP != 0.0 and qty_asks_g_VETGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_VETGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_VETGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_VETGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_VETUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_VETUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_VETUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_VETGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='VETUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='VETGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_VETUSDT, '#', 'Покупаем', quantity_pair_a, 'VET', 'за', price_a, 'USDT', 'по цене', price_asks_g_VETUSDT) 
				print('Пара_B:', symbol_g_VETGBP, '#', 'Продаем', quantity_pair_b, 'VET', 'за', price_b, 'GBP', 'по цене', price_bids_g_VETGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_VETUSDT_VETGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_LINKUSDT_LINKBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LINKUSDT != 0.0 and qty_bids_g_LINKUSDT != 0.0 and price_asks_g_LINKUSDT != 0.0 and qty_asks_g_LINKUSDT != 0.0 and price_bids_g_LINKBTC != 0.0 and qty_bids_g_LINKBTC != 0.0 and price_asks_g_LINKBTC != 0.0 and qty_asks_g_LINKBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LINKBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LINKBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LINKBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LINKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LINKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LINKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LINKBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LINKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LINKBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LINKUSDT, '#', 'Покупаем', quantity_pair_a, 'LINK', 'за', price_a, 'USDT', 'по цене', price_asks_g_LINKUSDT) 
				print('Пара_B:', symbol_g_LINKBTC, '#', 'Продаем', quantity_pair_b, 'LINK', 'за', price_b, 'BTC', 'по цене', price_bids_g_LINKBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LINKUSDT_LINKBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_LINKUSDT_LINKETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LINKUSDT != 0.0 and qty_bids_g_LINKUSDT != 0.0 and price_asks_g_LINKUSDT != 0.0 and qty_asks_g_LINKUSDT != 0.0 and price_bids_g_LINKETH != 0.0 and qty_bids_g_LINKETH != 0.0 and price_asks_g_LINKETH != 0.0 and qty_asks_g_LINKETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LINKETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LINKETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LINKETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LINKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LINKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LINKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LINKETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LINKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LINKETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LINKUSDT, '#', 'Покупаем', quantity_pair_a, 'LINK', 'за', price_a, 'USDT', 'по цене', price_asks_g_LINKUSDT) 
				print('Пара_B:', symbol_g_LINKETH, '#', 'Продаем', quantity_pair_b, 'LINK', 'за', price_b, 'ETH', 'по цене', price_bids_g_LINKETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LINKUSDT_LINKETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_LINKUSDT_LINKBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LINKUSDT != 0.0 and qty_bids_g_LINKUSDT != 0.0 and price_asks_g_LINKUSDT != 0.0 and qty_asks_g_LINKUSDT != 0.0 and price_bids_g_LINKBUSD != 0.0 and qty_bids_g_LINKBUSD != 0.0 and price_asks_g_LINKBUSD != 0.0 and qty_asks_g_LINKBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LINKBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LINKBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LINKBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LINKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LINKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LINKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LINKBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LINKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LINKBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LINKUSDT, '#', 'Покупаем', quantity_pair_a, 'LINK', 'за', price_a, 'USDT', 'по цене', price_asks_g_LINKUSDT) 
				print('Пара_B:', symbol_g_LINKBUSD, '#', 'Продаем', quantity_pair_b, 'LINK', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LINKBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LINKUSDT_LINKBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_LINKUSDT_LINKAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LINKUSDT != 0.0 and qty_bids_g_LINKUSDT != 0.0 and price_asks_g_LINKUSDT != 0.0 and qty_asks_g_LINKUSDT != 0.0 and price_bids_g_LINKAUD != 0.0 and qty_bids_g_LINKAUD != 0.0 and price_asks_g_LINKAUD != 0.0 and qty_asks_g_LINKAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LINKAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LINKAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LINKAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LINKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LINKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LINKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LINKAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LINKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LINKAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LINKUSDT, '#', 'Покупаем', quantity_pair_a, 'LINK', 'за', price_a, 'USDT', 'по цене', price_asks_g_LINKUSDT) 
				print('Пара_B:', symbol_g_LINKAUD, '#', 'Продаем', quantity_pair_b, 'LINK', 'за', price_b, 'AUD', 'по цене', price_bids_g_LINKAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LINKUSDT_LINKAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_LINKUSDT_LINKEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LINKUSDT != 0.0 and qty_bids_g_LINKUSDT != 0.0 and price_asks_g_LINKUSDT != 0.0 and qty_asks_g_LINKUSDT != 0.0 and price_bids_g_LINKEUR != 0.0 and qty_bids_g_LINKEUR != 0.0 and price_asks_g_LINKEUR != 0.0 and qty_asks_g_LINKEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LINKEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LINKEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LINKEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LINKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LINKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LINKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LINKEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LINKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LINKEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LINKUSDT, '#', 'Покупаем', quantity_pair_a, 'LINK', 'за', price_a, 'USDT', 'по цене', price_asks_g_LINKUSDT) 
				print('Пара_B:', symbol_g_LINKEUR, '#', 'Продаем', quantity_pair_b, 'LINK', 'за', price_b, 'EUR', 'по цене', price_bids_g_LINKEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LINKUSDT_LINKEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_LINKUSDT_LINKGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LINKUSDT != 0.0 and qty_bids_g_LINKUSDT != 0.0 and price_asks_g_LINKUSDT != 0.0 and qty_asks_g_LINKUSDT != 0.0 and price_bids_g_LINKGBP != 0.0 and qty_bids_g_LINKGBP != 0.0 and price_asks_g_LINKGBP != 0.0 and qty_asks_g_LINKGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LINKGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LINKGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LINKGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LINKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LINKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LINKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LINKGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LINKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LINKGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LINKUSDT, '#', 'Покупаем', quantity_pair_a, 'LINK', 'за', price_a, 'USDT', 'по цене', price_asks_g_LINKUSDT) 
				print('Пара_B:', symbol_g_LINKGBP, '#', 'Продаем', quantity_pair_b, 'LINK', 'за', price_b, 'GBP', 'по цене', price_bids_g_LINKGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LINKUSDT_LINKGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_LINKUSDT_LINKBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LINKUSDT != 0.0 and qty_bids_g_LINKUSDT != 0.0 and price_asks_g_LINKUSDT != 0.0 and qty_asks_g_LINKUSDT != 0.0 and price_bids_g_LINKBNB != 0.0 and qty_bids_g_LINKBNB != 0.0 and price_asks_g_LINKBNB != 0.0 and qty_asks_g_LINKBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LINKBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LINKBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LINKBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LINKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LINKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LINKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LINKBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LINKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LINKBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LINKUSDT, '#', 'Покупаем', quantity_pair_a, 'LINK', 'за', price_a, 'USDT', 'по цене', price_asks_g_LINKUSDT) 
				print('Пара_B:', symbol_g_LINKBNB, '#', 'Продаем', quantity_pair_b, 'LINK', 'за', price_b, 'BNB', 'по цене', price_bids_g_LINKBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LINKUSDT_LINKBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_WAVESUSDT_WAVESBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WAVESUSDT != 0.0 and qty_bids_g_WAVESUSDT != 0.0 and price_asks_g_WAVESUSDT != 0.0 and qty_asks_g_WAVESUSDT != 0.0 and price_bids_g_WAVESBTC != 0.0 and qty_bids_g_WAVESBTC != 0.0 and price_asks_g_WAVESBTC != 0.0 and qty_asks_g_WAVESBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WAVESBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WAVESBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WAVESBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WAVESUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WAVESUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WAVESUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WAVESBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WAVESUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WAVESBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WAVESUSDT, '#', 'Покупаем', quantity_pair_a, 'WAVES', 'за', price_a, 'USDT', 'по цене', price_asks_g_WAVESUSDT) 
				print('Пара_B:', symbol_g_WAVESBTC, '#', 'Продаем', quantity_pair_b, 'WAVES', 'за', price_b, 'BTC', 'по цене', price_bids_g_WAVESBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WAVESUSDT_WAVESBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_WAVESUSDT_WAVESETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WAVESUSDT != 0.0 and qty_bids_g_WAVESUSDT != 0.0 and price_asks_g_WAVESUSDT != 0.0 and qty_asks_g_WAVESUSDT != 0.0 and price_bids_g_WAVESETH != 0.0 and qty_bids_g_WAVESETH != 0.0 and price_asks_g_WAVESETH != 0.0 and qty_asks_g_WAVESETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WAVESETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WAVESETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WAVESETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WAVESUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WAVESUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WAVESUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WAVESETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WAVESUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WAVESETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WAVESUSDT, '#', 'Покупаем', quantity_pair_a, 'WAVES', 'за', price_a, 'USDT', 'по цене', price_asks_g_WAVESUSDT) 
				print('Пара_B:', symbol_g_WAVESETH, '#', 'Продаем', quantity_pair_b, 'WAVES', 'за', price_b, 'ETH', 'по цене', price_bids_g_WAVESETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WAVESUSDT_WAVESETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_WAVESUSDT_WAVESBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WAVESUSDT != 0.0 and qty_bids_g_WAVESUSDT != 0.0 and price_asks_g_WAVESUSDT != 0.0 and qty_asks_g_WAVESUSDT != 0.0 and price_bids_g_WAVESBNB != 0.0 and qty_bids_g_WAVESBNB != 0.0 and price_asks_g_WAVESBNB != 0.0 and qty_asks_g_WAVESBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WAVESBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WAVESBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WAVESBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WAVESUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WAVESUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WAVESUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WAVESBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WAVESUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WAVESBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WAVESUSDT, '#', 'Покупаем', quantity_pair_a, 'WAVES', 'за', price_a, 'USDT', 'по цене', price_asks_g_WAVESUSDT) 
				print('Пара_B:', symbol_g_WAVESBNB, '#', 'Продаем', quantity_pair_b, 'WAVES', 'за', price_b, 'BNB', 'по цене', price_bids_g_WAVESBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WAVESUSDT_WAVESBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_WAVESUSDT_WAVESBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WAVESUSDT != 0.0 and qty_bids_g_WAVESUSDT != 0.0 and price_asks_g_WAVESUSDT != 0.0 and qty_asks_g_WAVESUSDT != 0.0 and price_bids_g_WAVESBUSD != 0.0 and qty_bids_g_WAVESBUSD != 0.0 and price_asks_g_WAVESBUSD != 0.0 and qty_asks_g_WAVESBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WAVESBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WAVESBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WAVESBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WAVESUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WAVESUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WAVESUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WAVESBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WAVESUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WAVESBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WAVESUSDT, '#', 'Покупаем', quantity_pair_a, 'WAVES', 'за', price_a, 'USDT', 'по цене', price_asks_g_WAVESUSDT) 
				print('Пара_B:', symbol_g_WAVESBUSD, '#', 'Продаем', quantity_pair_b, 'WAVES', 'за', price_b, 'BUSD', 'по цене', price_bids_g_WAVESBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WAVESUSDT_WAVESBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_WAVESUSDT_WAVESEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WAVESUSDT != 0.0 and qty_bids_g_WAVESUSDT != 0.0 and price_asks_g_WAVESUSDT != 0.0 and qty_asks_g_WAVESUSDT != 0.0 and price_bids_g_WAVESEUR != 0.0 and qty_bids_g_WAVESEUR != 0.0 and price_asks_g_WAVESEUR != 0.0 and qty_asks_g_WAVESEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WAVESEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WAVESEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WAVESEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WAVESUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WAVESUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WAVESUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WAVESEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WAVESUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WAVESEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WAVESUSDT, '#', 'Покупаем', quantity_pair_a, 'WAVES', 'за', price_a, 'USDT', 'по цене', price_asks_g_WAVESUSDT) 
				print('Пара_B:', symbol_g_WAVESEUR, '#', 'Продаем', quantity_pair_b, 'WAVES', 'за', price_b, 'EUR', 'по цене', price_bids_g_WAVESEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WAVESUSDT_WAVESEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_ONGUSDT_ONGBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ONGUSDT != 0.0 and qty_bids_g_ONGUSDT != 0.0 and price_asks_g_ONGUSDT != 0.0 and qty_asks_g_ONGUSDT != 0.0 and price_bids_g_ONGBTC != 0.0 and qty_bids_g_ONGBTC != 0.0 and price_asks_g_ONGBTC != 0.0 and qty_asks_g_ONGBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ONGBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ONGBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ONGBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ONGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ONGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ONGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ONGBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ONGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ONGBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ONGUSDT, '#', 'Покупаем', quantity_pair_a, 'ONG', 'за', price_a, 'USDT', 'по цене', price_asks_g_ONGUSDT) 
				print('Пара_B:', symbol_g_ONGBTC, '#', 'Продаем', quantity_pair_b, 'ONG', 'за', price_b, 'BTC', 'по цене', price_bids_g_ONGBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ONGUSDT_ONGBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_HOTUSDT_HOTETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HOTUSDT != 0.0 and qty_bids_g_HOTUSDT != 0.0 and price_asks_g_HOTUSDT != 0.0 and qty_asks_g_HOTUSDT != 0.0 and price_bids_g_HOTETH != 0.0 and qty_bids_g_HOTETH != 0.0 and price_asks_g_HOTETH != 0.0 and qty_asks_g_HOTETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HOTETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HOTETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HOTETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HOTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HOTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HOTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HOTETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HOTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HOTETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HOTUSDT, '#', 'Покупаем', quantity_pair_a, 'HOT', 'за', price_a, 'USDT', 'по цене', price_asks_g_HOTUSDT) 
				print('Пара_B:', symbol_g_HOTETH, '#', 'Продаем', quantity_pair_b, 'HOT', 'за', price_b, 'ETH', 'по цене', price_bids_g_HOTETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HOTUSDT_HOTETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_HOTUSDT_HOTEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HOTUSDT != 0.0 and qty_bids_g_HOTUSDT != 0.0 and price_asks_g_HOTUSDT != 0.0 and qty_asks_g_HOTUSDT != 0.0 and price_bids_g_HOTEUR != 0.0 and qty_bids_g_HOTEUR != 0.0 and price_asks_g_HOTEUR != 0.0 and qty_asks_g_HOTEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HOTEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HOTEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HOTEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HOTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HOTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HOTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HOTEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HOTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HOTEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HOTUSDT, '#', 'Покупаем', quantity_pair_a, 'HOT', 'за', price_a, 'USDT', 'по цене', price_asks_g_HOTUSDT) 
				print('Пара_B:', symbol_g_HOTEUR, '#', 'Продаем', quantity_pair_b, 'HOT', 'за', price_b, 'EUR', 'по цене', price_bids_g_HOTEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HOTUSDT_HOTEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_HOTUSDT_HOTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HOTUSDT != 0.0 and qty_bids_g_HOTUSDT != 0.0 and price_asks_g_HOTUSDT != 0.0 and qty_asks_g_HOTUSDT != 0.0 and price_bids_g_HOTBUSD != 0.0 and qty_bids_g_HOTBUSD != 0.0 and price_asks_g_HOTBUSD != 0.0 and qty_asks_g_HOTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HOTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HOTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HOTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HOTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HOTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HOTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HOTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HOTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HOTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HOTUSDT, '#', 'Покупаем', quantity_pair_a, 'HOT', 'за', price_a, 'USDT', 'по цене', price_asks_g_HOTUSDT) 
				print('Пара_B:', symbol_g_HOTBUSD, '#', 'Продаем', quantity_pair_b, 'HOT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_HOTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HOTUSDT_HOTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ZILUSDT_ZILBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZILUSDT != 0.0 and qty_bids_g_ZILUSDT != 0.0 and price_asks_g_ZILUSDT != 0.0 and qty_asks_g_ZILUSDT != 0.0 and price_bids_g_ZILBTC != 0.0 and qty_bids_g_ZILBTC != 0.0 and price_asks_g_ZILBTC != 0.0 and qty_asks_g_ZILBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZILBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZILBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZILBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZILUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZILUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZILUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZILBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZILUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZILBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZILUSDT, '#', 'Покупаем', quantity_pair_a, 'ZIL', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZILUSDT) 
				print('Пара_B:', symbol_g_ZILBTC, '#', 'Продаем', quantity_pair_b, 'ZIL', 'за', price_b, 'BTC', 'по цене', price_bids_g_ZILBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZILUSDT_ZILBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ZILUSDT_ZILETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZILUSDT != 0.0 and qty_bids_g_ZILUSDT != 0.0 and price_asks_g_ZILUSDT != 0.0 and qty_asks_g_ZILUSDT != 0.0 and price_bids_g_ZILETH != 0.0 and qty_bids_g_ZILETH != 0.0 and price_asks_g_ZILETH != 0.0 and qty_asks_g_ZILETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZILETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZILETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZILETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZILUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZILUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZILUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZILETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZILUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZILETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZILUSDT, '#', 'Покупаем', quantity_pair_a, 'ZIL', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZILUSDT) 
				print('Пара_B:', symbol_g_ZILETH, '#', 'Продаем', quantity_pair_b, 'ZIL', 'за', price_b, 'ETH', 'по цене', price_bids_g_ZILETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZILUSDT_ZILETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ZILUSDT_ZILBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZILUSDT != 0.0 and qty_bids_g_ZILUSDT != 0.0 and price_asks_g_ZILUSDT != 0.0 and qty_asks_g_ZILUSDT != 0.0 and price_bids_g_ZILBNB != 0.0 and qty_bids_g_ZILBNB != 0.0 and price_asks_g_ZILBNB != 0.0 and qty_asks_g_ZILBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZILBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZILBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZILBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZILUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZILUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZILUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZILBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZILUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZILBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZILUSDT, '#', 'Покупаем', quantity_pair_a, 'ZIL', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZILUSDT) 
				print('Пара_B:', symbol_g_ZILBNB, '#', 'Продаем', quantity_pair_b, 'ZIL', 'за', price_b, 'BNB', 'по цене', price_bids_g_ZILBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZILUSDT_ZILBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ZILUSDT_ZILBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZILUSDT != 0.0 and qty_bids_g_ZILUSDT != 0.0 and price_asks_g_ZILUSDT != 0.0 and qty_asks_g_ZILUSDT != 0.0 and price_bids_g_ZILBUSD != 0.0 and qty_bids_g_ZILBUSD != 0.0 and price_asks_g_ZILBUSD != 0.0 and qty_asks_g_ZILBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZILBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZILBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZILBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZILUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZILUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZILUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZILBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZILUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZILBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZILUSDT, '#', 'Покупаем', quantity_pair_a, 'ZIL', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZILUSDT) 
				print('Пара_B:', symbol_g_ZILBUSD, '#', 'Продаем', quantity_pair_b, 'ZIL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ZILBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZILUSDT_ZILBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ZRXUSDT_ZRXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZRXUSDT != 0.0 and qty_bids_g_ZRXUSDT != 0.0 and price_asks_g_ZRXUSDT != 0.0 and qty_asks_g_ZRXUSDT != 0.0 and price_bids_g_ZRXBTC != 0.0 and qty_bids_g_ZRXBTC != 0.0 and price_asks_g_ZRXBTC != 0.0 and qty_asks_g_ZRXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZRXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZRXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZRXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZRXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZRXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZRXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZRXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZRXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZRXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZRXUSDT, '#', 'Покупаем', quantity_pair_a, 'ZRX', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZRXUSDT) 
				print('Пара_B:', symbol_g_ZRXBTC, '#', 'Продаем', quantity_pair_b, 'ZRX', 'за', price_b, 'BTC', 'по цене', price_bids_g_ZRXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZRXUSDT_ZRXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ZRXUSDT_ZRXETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZRXUSDT != 0.0 and qty_bids_g_ZRXUSDT != 0.0 and price_asks_g_ZRXUSDT != 0.0 and qty_asks_g_ZRXUSDT != 0.0 and price_bids_g_ZRXETH != 0.0 and qty_bids_g_ZRXETH != 0.0 and price_asks_g_ZRXETH != 0.0 and qty_asks_g_ZRXETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZRXETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZRXETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZRXETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZRXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZRXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZRXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZRXETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZRXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZRXETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZRXUSDT, '#', 'Покупаем', quantity_pair_a, 'ZRX', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZRXUSDT) 
				print('Пара_B:', symbol_g_ZRXETH, '#', 'Продаем', quantity_pair_b, 'ZRX', 'за', price_b, 'ETH', 'по цене', price_bids_g_ZRXETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZRXUSDT_ZRXETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ZRXUSDT_ZRXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZRXUSDT != 0.0 and qty_bids_g_ZRXUSDT != 0.0 and price_asks_g_ZRXUSDT != 0.0 and qty_asks_g_ZRXUSDT != 0.0 and price_bids_g_ZRXBUSD != 0.0 and qty_bids_g_ZRXBUSD != 0.0 and price_asks_g_ZRXBUSD != 0.0 and qty_asks_g_ZRXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZRXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZRXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZRXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZRXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZRXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZRXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZRXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZRXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZRXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZRXUSDT, '#', 'Покупаем', quantity_pair_a, 'ZRX', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZRXUSDT) 
				print('Пара_B:', symbol_g_ZRXBUSD, '#', 'Продаем', quantity_pair_b, 'ZRX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ZRXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZRXUSDT_ZRXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FETUSDT_FETBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FETUSDT != 0.0 and qty_bids_g_FETUSDT != 0.0 and price_asks_g_FETUSDT != 0.0 and qty_asks_g_FETUSDT != 0.0 and price_bids_g_FETBNB != 0.0 and qty_bids_g_FETBNB != 0.0 and price_asks_g_FETBNB != 0.0 and qty_asks_g_FETBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FETBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FETBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FETBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FETUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FETUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FETUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FETBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FETUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FETBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FETUSDT, '#', 'Покупаем', quantity_pair_a, 'FET', 'за', price_a, 'USDT', 'по цене', price_asks_g_FETUSDT) 
				print('Пара_B:', symbol_g_FETBNB, '#', 'Продаем', quantity_pair_b, 'FET', 'за', price_b, 'BNB', 'по цене', price_bids_g_FETBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FETUSDT_FETBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_FETUSDT_FETBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FETUSDT != 0.0 and qty_bids_g_FETUSDT != 0.0 and price_asks_g_FETUSDT != 0.0 and qty_asks_g_FETUSDT != 0.0 and price_bids_g_FETBTC != 0.0 and qty_bids_g_FETBTC != 0.0 and price_asks_g_FETBTC != 0.0 and qty_asks_g_FETBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FETBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FETBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FETBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FETUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FETUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FETUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FETBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FETUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FETBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FETUSDT, '#', 'Покупаем', quantity_pair_a, 'FET', 'за', price_a, 'USDT', 'по цене', price_asks_g_FETUSDT) 
				print('Пара_B:', symbol_g_FETBTC, '#', 'Продаем', quantity_pair_b, 'FET', 'за', price_b, 'BTC', 'по цене', price_bids_g_FETBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FETUSDT_FETBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_FETUSDT_FETBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FETUSDT != 0.0 and qty_bids_g_FETUSDT != 0.0 and price_asks_g_FETUSDT != 0.0 and qty_asks_g_FETUSDT != 0.0 and price_bids_g_FETBUSD != 0.0 and qty_bids_g_FETBUSD != 0.0 and price_asks_g_FETBUSD != 0.0 and qty_asks_g_FETBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FETBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FETBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FETBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FETUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FETUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FETUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FETBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FETUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FETBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FETUSDT, '#', 'Покупаем', quantity_pair_a, 'FET', 'за', price_a, 'USDT', 'по цене', price_asks_g_FETUSDT) 
				print('Пара_B:', symbol_g_FETBUSD, '#', 'Продаем', quantity_pair_b, 'FET', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FETBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FETUSDT_FETBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BATUSDT_BATBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BATUSDT != 0.0 and qty_bids_g_BATUSDT != 0.0 and price_asks_g_BATUSDT != 0.0 and qty_asks_g_BATUSDT != 0.0 and price_bids_g_BATBTC != 0.0 and qty_bids_g_BATBTC != 0.0 and price_asks_g_BATBTC != 0.0 and qty_asks_g_BATBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BATBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BATBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BATBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BATUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BATUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BATUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BATBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BATUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BATBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BATUSDT, '#', 'Покупаем', quantity_pair_a, 'BAT', 'за', price_a, 'USDT', 'по цене', price_asks_g_BATUSDT) 
				print('Пара_B:', symbol_g_BATBTC, '#', 'Продаем', quantity_pair_b, 'BAT', 'за', price_b, 'BTC', 'по цене', price_bids_g_BATBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BATUSDT_BATBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BATUSDT_BATETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BATUSDT != 0.0 and qty_bids_g_BATUSDT != 0.0 and price_asks_g_BATUSDT != 0.0 and qty_asks_g_BATUSDT != 0.0 and price_bids_g_BATETH != 0.0 and qty_bids_g_BATETH != 0.0 and price_asks_g_BATETH != 0.0 and qty_asks_g_BATETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BATETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BATETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BATETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BATUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BATUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BATUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BATETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BATUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BATETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BATUSDT, '#', 'Покупаем', quantity_pair_a, 'BAT', 'за', price_a, 'USDT', 'по цене', price_asks_g_BATUSDT) 
				print('Пара_B:', symbol_g_BATETH, '#', 'Продаем', quantity_pair_b, 'BAT', 'за', price_b, 'ETH', 'по цене', price_bids_g_BATETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BATUSDT_BATETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_BATUSDT_BATBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BATUSDT != 0.0 and qty_bids_g_BATUSDT != 0.0 and price_asks_g_BATUSDT != 0.0 and qty_asks_g_BATUSDT != 0.0 and price_bids_g_BATBUSD != 0.0 and qty_bids_g_BATBUSD != 0.0 and price_asks_g_BATBUSD != 0.0 and qty_asks_g_BATBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BATBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BATBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BATBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BATUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BATUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BATUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BATBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BATUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BATBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BATUSDT, '#', 'Покупаем', quantity_pair_a, 'BAT', 'за', price_a, 'USDT', 'по цене', price_asks_g_BATUSDT) 
				print('Пара_B:', symbol_g_BATBUSD, '#', 'Продаем', quantity_pair_b, 'BAT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BATBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BATUSDT_BATBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_XMRUSDT_XMRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XMRUSDT != 0.0 and qty_bids_g_XMRUSDT != 0.0 and price_asks_g_XMRUSDT != 0.0 and qty_asks_g_XMRUSDT != 0.0 and price_bids_g_XMRBTC != 0.0 and qty_bids_g_XMRBTC != 0.0 and price_asks_g_XMRBTC != 0.0 and qty_asks_g_XMRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XMRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XMRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XMRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XMRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XMRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XMRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XMRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XMRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XMRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XMRUSDT, '#', 'Покупаем', quantity_pair_a, 'XMR', 'за', price_a, 'USDT', 'по цене', price_asks_g_XMRUSDT) 
				print('Пара_B:', symbol_g_XMRBTC, '#', 'Продаем', quantity_pair_b, 'XMR', 'за', price_b, 'BTC', 'по цене', price_bids_g_XMRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XMRUSDT_XMRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_XMRUSDT_XMRETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XMRUSDT != 0.0 and qty_bids_g_XMRUSDT != 0.0 and price_asks_g_XMRUSDT != 0.0 and qty_asks_g_XMRUSDT != 0.0 and price_bids_g_XMRETH != 0.0 and qty_bids_g_XMRETH != 0.0 and price_asks_g_XMRETH != 0.0 and qty_asks_g_XMRETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XMRETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XMRETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XMRETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XMRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XMRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XMRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XMRETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XMRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XMRETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XMRUSDT, '#', 'Покупаем', quantity_pair_a, 'XMR', 'за', price_a, 'USDT', 'по цене', price_asks_g_XMRUSDT) 
				print('Пара_B:', symbol_g_XMRETH, '#', 'Продаем', quantity_pair_b, 'XMR', 'за', price_b, 'ETH', 'по цене', price_bids_g_XMRETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XMRUSDT_XMRETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_XMRUSDT_XMRBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XMRUSDT != 0.0 and qty_bids_g_XMRUSDT != 0.0 and price_asks_g_XMRUSDT != 0.0 and qty_asks_g_XMRUSDT != 0.0 and price_bids_g_XMRBNB != 0.0 and qty_bids_g_XMRBNB != 0.0 and price_asks_g_XMRBNB != 0.0 and qty_asks_g_XMRBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XMRBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XMRBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XMRBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XMRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XMRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XMRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XMRBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XMRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XMRBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XMRUSDT, '#', 'Покупаем', quantity_pair_a, 'XMR', 'за', price_a, 'USDT', 'по цене', price_asks_g_XMRUSDT) 
				print('Пара_B:', symbol_g_XMRBNB, '#', 'Продаем', quantity_pair_b, 'XMR', 'за', price_b, 'BNB', 'по цене', price_bids_g_XMRBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XMRUSDT_XMRBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_XMRUSDT_XMRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XMRUSDT != 0.0 and qty_bids_g_XMRUSDT != 0.0 and price_asks_g_XMRUSDT != 0.0 and qty_asks_g_XMRUSDT != 0.0 and price_bids_g_XMRBUSD != 0.0 and qty_bids_g_XMRBUSD != 0.0 and price_asks_g_XMRBUSD != 0.0 and qty_asks_g_XMRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XMRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XMRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XMRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XMRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XMRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XMRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XMRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XMRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XMRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XMRUSDT, '#', 'Покупаем', quantity_pair_a, 'XMR', 'за', price_a, 'USDT', 'по цене', price_asks_g_XMRUSDT) 
				print('Пара_B:', symbol_g_XMRBUSD, '#', 'Продаем', quantity_pair_b, 'XMR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_XMRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XMRUSDT_XMRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ZECUSDT_ZECBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZECUSDT != 0.0 and qty_bids_g_ZECUSDT != 0.0 and price_asks_g_ZECUSDT != 0.0 and qty_asks_g_ZECUSDT != 0.0 and price_bids_g_ZECBTC != 0.0 and qty_bids_g_ZECBTC != 0.0 and price_asks_g_ZECBTC != 0.0 and qty_asks_g_ZECBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZECBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZECBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZECBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZECUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZECUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZECUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZECBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZECUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZECBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZECUSDT, '#', 'Покупаем', quantity_pair_a, 'ZEC', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZECUSDT) 
				print('Пара_B:', symbol_g_ZECBTC, '#', 'Продаем', quantity_pair_b, 'ZEC', 'за', price_b, 'BTC', 'по цене', price_bids_g_ZECBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZECUSDT_ZECBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ZECUSDT_ZECETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZECUSDT != 0.0 and qty_bids_g_ZECUSDT != 0.0 and price_asks_g_ZECUSDT != 0.0 and qty_asks_g_ZECUSDT != 0.0 and price_bids_g_ZECETH != 0.0 and qty_bids_g_ZECETH != 0.0 and price_asks_g_ZECETH != 0.0 and qty_asks_g_ZECETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZECETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZECETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZECETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZECUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZECUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZECUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZECETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZECUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZECETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZECUSDT, '#', 'Покупаем', quantity_pair_a, 'ZEC', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZECUSDT) 
				print('Пара_B:', symbol_g_ZECETH, '#', 'Продаем', quantity_pair_b, 'ZEC', 'за', price_b, 'ETH', 'по цене', price_bids_g_ZECETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZECUSDT_ZECETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ZECUSDT_ZECBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZECUSDT != 0.0 and qty_bids_g_ZECUSDT != 0.0 and price_asks_g_ZECUSDT != 0.0 and qty_asks_g_ZECUSDT != 0.0 and price_bids_g_ZECBNB != 0.0 and qty_bids_g_ZECBNB != 0.0 and price_asks_g_ZECBNB != 0.0 and qty_asks_g_ZECBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZECBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZECBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZECBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZECUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZECUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZECUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZECBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZECUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZECBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZECUSDT, '#', 'Покупаем', quantity_pair_a, 'ZEC', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZECUSDT) 
				print('Пара_B:', symbol_g_ZECBNB, '#', 'Продаем', quantity_pair_b, 'ZEC', 'за', price_b, 'BNB', 'по цене', price_bids_g_ZECBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZECUSDT_ZECBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ZECUSDT_ZECBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZECUSDT != 0.0 and qty_bids_g_ZECUSDT != 0.0 and price_asks_g_ZECUSDT != 0.0 and qty_asks_g_ZECUSDT != 0.0 and price_bids_g_ZECBUSD != 0.0 and qty_bids_g_ZECBUSD != 0.0 and price_asks_g_ZECBUSD != 0.0 and qty_asks_g_ZECBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZECBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZECBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZECBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZECUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZECUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZECUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZECBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZECUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZECBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZECUSDT, '#', 'Покупаем', quantity_pair_a, 'ZEC', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZECUSDT) 
				print('Пара_B:', symbol_g_ZECBUSD, '#', 'Продаем', quantity_pair_b, 'ZEC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ZECBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZECUSDT_ZECBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_IOSTUSDT_IOSTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IOSTUSDT != 0.0 and qty_bids_g_IOSTUSDT != 0.0 and price_asks_g_IOSTUSDT != 0.0 and qty_asks_g_IOSTUSDT != 0.0 and price_bids_g_IOSTBTC != 0.0 and qty_bids_g_IOSTBTC != 0.0 and price_asks_g_IOSTBTC != 0.0 and qty_asks_g_IOSTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IOSTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IOSTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IOSTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IOSTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IOSTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IOSTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IOSTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IOSTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IOSTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IOSTUSDT, '#', 'Покупаем', quantity_pair_a, 'IOST', 'за', price_a, 'USDT', 'по цене', price_asks_g_IOSTUSDT) 
				print('Пара_B:', symbol_g_IOSTBTC, '#', 'Продаем', quantity_pair_b, 'IOST', 'за', price_b, 'BTC', 'по цене', price_bids_g_IOSTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IOSTUSDT_IOSTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_IOSTUSDT_IOSTETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IOSTUSDT != 0.0 and qty_bids_g_IOSTUSDT != 0.0 and price_asks_g_IOSTUSDT != 0.0 and qty_asks_g_IOSTUSDT != 0.0 and price_bids_g_IOSTETH != 0.0 and qty_bids_g_IOSTETH != 0.0 and price_asks_g_IOSTETH != 0.0 and qty_asks_g_IOSTETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IOSTETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IOSTETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IOSTETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IOSTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IOSTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IOSTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IOSTETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IOSTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IOSTETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IOSTUSDT, '#', 'Покупаем', quantity_pair_a, 'IOST', 'за', price_a, 'USDT', 'по цене', price_asks_g_IOSTUSDT) 
				print('Пара_B:', symbol_g_IOSTETH, '#', 'Продаем', quantity_pair_b, 'IOST', 'за', price_b, 'ETH', 'по цене', price_bids_g_IOSTETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IOSTUSDT_IOSTETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_IOSTUSDT_IOSTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IOSTUSDT != 0.0 and qty_bids_g_IOSTUSDT != 0.0 and price_asks_g_IOSTUSDT != 0.0 and qty_asks_g_IOSTUSDT != 0.0 and price_bids_g_IOSTBUSD != 0.0 and qty_bids_g_IOSTBUSD != 0.0 and price_asks_g_IOSTBUSD != 0.0 and qty_asks_g_IOSTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IOSTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IOSTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IOSTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IOSTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IOSTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IOSTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IOSTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IOSTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IOSTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IOSTUSDT, '#', 'Покупаем', quantity_pair_a, 'IOST', 'за', price_a, 'USDT', 'по цене', price_asks_g_IOSTUSDT) 
				print('Пара_B:', symbol_g_IOSTBUSD, '#', 'Продаем', quantity_pair_b, 'IOST', 'за', price_b, 'BUSD', 'по цене', price_bids_g_IOSTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IOSTUSDT_IOSTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_CELRUSDT_CELRBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CELRUSDT != 0.0 and qty_bids_g_CELRUSDT != 0.0 and price_asks_g_CELRUSDT != 0.0 and qty_asks_g_CELRUSDT != 0.0 and price_bids_g_CELRBNB != 0.0 and qty_bids_g_CELRBNB != 0.0 and price_asks_g_CELRBNB != 0.0 and qty_asks_g_CELRBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CELRBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CELRBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CELRBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CELRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CELRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CELRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CELRBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CELRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CELRBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CELRUSDT, '#', 'Покупаем', quantity_pair_a, 'CELR', 'за', price_a, 'USDT', 'по цене', price_asks_g_CELRUSDT) 
				print('Пара_B:', symbol_g_CELRBNB, '#', 'Продаем', quantity_pair_b, 'CELR', 'за', price_b, 'BNB', 'по цене', price_bids_g_CELRBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CELRUSDT_CELRBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_CELRUSDT_CELRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CELRUSDT != 0.0 and qty_bids_g_CELRUSDT != 0.0 and price_asks_g_CELRUSDT != 0.0 and qty_asks_g_CELRUSDT != 0.0 and price_bids_g_CELRBTC != 0.0 and qty_bids_g_CELRBTC != 0.0 and price_asks_g_CELRBTC != 0.0 and qty_asks_g_CELRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CELRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CELRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CELRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CELRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CELRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CELRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CELRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CELRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CELRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CELRUSDT, '#', 'Покупаем', quantity_pair_a, 'CELR', 'за', price_a, 'USDT', 'по цене', price_asks_g_CELRUSDT) 
				print('Пара_B:', symbol_g_CELRBTC, '#', 'Продаем', quantity_pair_b, 'CELR', 'за', price_b, 'BTC', 'по цене', price_bids_g_CELRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CELRUSDT_CELRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CELRUSDT_CELRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CELRUSDT != 0.0 and qty_bids_g_CELRUSDT != 0.0 and price_asks_g_CELRUSDT != 0.0 and qty_asks_g_CELRUSDT != 0.0 and price_bids_g_CELRBUSD != 0.0 and qty_bids_g_CELRBUSD != 0.0 and price_asks_g_CELRBUSD != 0.0 and qty_asks_g_CELRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CELRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CELRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CELRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CELRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CELRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CELRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CELRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CELRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CELRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CELRUSDT, '#', 'Покупаем', quantity_pair_a, 'CELR', 'за', price_a, 'USDT', 'по цене', price_asks_g_CELRUSDT) 
				print('Пара_B:', symbol_g_CELRBUSD, '#', 'Продаем', quantity_pair_b, 'CELR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CELRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CELRUSDT_CELRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DASHUSDT_DASHBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DASHUSDT != 0.0 and qty_bids_g_DASHUSDT != 0.0 and price_asks_g_DASHUSDT != 0.0 and qty_asks_g_DASHUSDT != 0.0 and price_bids_g_DASHBTC != 0.0 and qty_bids_g_DASHBTC != 0.0 and price_asks_g_DASHBTC != 0.0 and qty_asks_g_DASHBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DASHBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DASHBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DASHBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DASHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DASHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DASHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DASHBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DASHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DASHBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DASHUSDT, '#', 'Покупаем', quantity_pair_a, 'DASH', 'за', price_a, 'USDT', 'по цене', price_asks_g_DASHUSDT) 
				print('Пара_B:', symbol_g_DASHBTC, '#', 'Продаем', quantity_pair_b, 'DASH', 'за', price_b, 'BTC', 'по цене', price_bids_g_DASHBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DASHUSDT_DASHBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_DASHUSDT_DASHETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DASHUSDT != 0.0 and qty_bids_g_DASHUSDT != 0.0 and price_asks_g_DASHUSDT != 0.0 and qty_asks_g_DASHUSDT != 0.0 and price_bids_g_DASHETH != 0.0 and qty_bids_g_DASHETH != 0.0 and price_asks_g_DASHETH != 0.0 and qty_asks_g_DASHETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DASHETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DASHETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DASHETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DASHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DASHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DASHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DASHETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DASHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DASHETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DASHUSDT, '#', 'Покупаем', quantity_pair_a, 'DASH', 'за', price_a, 'USDT', 'по цене', price_asks_g_DASHUSDT) 
				print('Пара_B:', symbol_g_DASHETH, '#', 'Продаем', quantity_pair_b, 'DASH', 'за', price_b, 'ETH', 'по цене', price_bids_g_DASHETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DASHUSDT_DASHETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_DASHUSDT_DASHBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DASHUSDT != 0.0 and qty_bids_g_DASHUSDT != 0.0 and price_asks_g_DASHUSDT != 0.0 and qty_asks_g_DASHUSDT != 0.0 and price_bids_g_DASHBNB != 0.0 and qty_bids_g_DASHBNB != 0.0 and price_asks_g_DASHBNB != 0.0 and qty_asks_g_DASHBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DASHBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DASHBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DASHBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DASHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DASHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DASHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DASHBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DASHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DASHBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DASHUSDT, '#', 'Покупаем', quantity_pair_a, 'DASH', 'за', price_a, 'USDT', 'по цене', price_asks_g_DASHUSDT) 
				print('Пара_B:', symbol_g_DASHBNB, '#', 'Продаем', quantity_pair_b, 'DASH', 'за', price_b, 'BNB', 'по цене', price_bids_g_DASHBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DASHUSDT_DASHBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_DASHUSDT_DASHBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DASHUSDT != 0.0 and qty_bids_g_DASHUSDT != 0.0 and price_asks_g_DASHUSDT != 0.0 and qty_asks_g_DASHUSDT != 0.0 and price_bids_g_DASHBUSD != 0.0 and qty_bids_g_DASHBUSD != 0.0 and price_asks_g_DASHBUSD != 0.0 and qty_asks_g_DASHBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DASHBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DASHBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DASHBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DASHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DASHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DASHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DASHBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DASHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DASHBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DASHUSDT, '#', 'Покупаем', quantity_pair_a, 'DASH', 'за', price_a, 'USDT', 'по цене', price_asks_g_DASHUSDT) 
				print('Пара_B:', symbol_g_DASHBUSD, '#', 'Продаем', quantity_pair_b, 'DASH', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DASHBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DASHUSDT_DASHBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_OMGUSDT_OMGBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OMGUSDT != 0.0 and qty_bids_g_OMGUSDT != 0.0 and price_asks_g_OMGUSDT != 0.0 and qty_asks_g_OMGUSDT != 0.0 and price_bids_g_OMGBTC != 0.0 and qty_bids_g_OMGBTC != 0.0 and price_asks_g_OMGBTC != 0.0 and qty_asks_g_OMGBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OMGBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OMGBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OMGBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OMGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OMGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OMGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OMGBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OMGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OMGBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OMGUSDT, '#', 'Покупаем', quantity_pair_a, 'OMG', 'за', price_a, 'USDT', 'по цене', price_asks_g_OMGUSDT) 
				print('Пара_B:', symbol_g_OMGBTC, '#', 'Продаем', quantity_pair_b, 'OMG', 'за', price_b, 'BTC', 'по цене', price_bids_g_OMGBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OMGUSDT_OMGBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_OMGUSDT_OMGETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OMGUSDT != 0.0 and qty_bids_g_OMGUSDT != 0.0 and price_asks_g_OMGUSDT != 0.0 and qty_asks_g_OMGUSDT != 0.0 and price_bids_g_OMGETH != 0.0 and qty_bids_g_OMGETH != 0.0 and price_asks_g_OMGETH != 0.0 and qty_asks_g_OMGETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OMGETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OMGETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OMGETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OMGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OMGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OMGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OMGETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OMGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OMGETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OMGUSDT, '#', 'Покупаем', quantity_pair_a, 'OMG', 'за', price_a, 'USDT', 'по цене', price_asks_g_OMGUSDT) 
				print('Пара_B:', symbol_g_OMGETH, '#', 'Продаем', quantity_pair_b, 'OMG', 'за', price_b, 'ETH', 'по цене', price_bids_g_OMGETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OMGUSDT_OMGETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_OMGUSDT_OMGBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OMGUSDT != 0.0 and qty_bids_g_OMGUSDT != 0.0 and price_asks_g_OMGUSDT != 0.0 and qty_asks_g_OMGUSDT != 0.0 and price_bids_g_OMGBUSD != 0.0 and qty_bids_g_OMGBUSD != 0.0 and price_asks_g_OMGBUSD != 0.0 and qty_asks_g_OMGBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OMGBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OMGBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OMGBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OMGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OMGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OMGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OMGBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OMGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OMGBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OMGUSDT, '#', 'Покупаем', quantity_pair_a, 'OMG', 'за', price_a, 'USDT', 'по цене', price_asks_g_OMGUSDT) 
				print('Пара_B:', symbol_g_OMGBUSD, '#', 'Продаем', quantity_pair_b, 'OMG', 'за', price_b, 'BUSD', 'по цене', price_bids_g_OMGBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OMGUSDT_OMGBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_THETAUSDT_THETABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_THETAUSDT != 0.0 and qty_bids_g_THETAUSDT != 0.0 and price_asks_g_THETAUSDT != 0.0 and qty_asks_g_THETAUSDT != 0.0 and price_bids_g_THETABTC != 0.0 and qty_bids_g_THETABTC != 0.0 and price_asks_g_THETABTC != 0.0 and qty_asks_g_THETABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_THETABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_THETABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_THETABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_THETAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_THETAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_THETAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_THETABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='THETAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='THETABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_THETAUSDT, '#', 'Покупаем', quantity_pair_a, 'THETA', 'за', price_a, 'USDT', 'по цене', price_asks_g_THETAUSDT) 
				print('Пара_B:', symbol_g_THETABTC, '#', 'Продаем', quantity_pair_b, 'THETA', 'за', price_b, 'BTC', 'по цене', price_bids_g_THETABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_THETAUSDT_THETABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_THETAUSDT_THETAETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_THETAUSDT != 0.0 and qty_bids_g_THETAUSDT != 0.0 and price_asks_g_THETAUSDT != 0.0 and qty_asks_g_THETAUSDT != 0.0 and price_bids_g_THETAETH != 0.0 and qty_bids_g_THETAETH != 0.0 and price_asks_g_THETAETH != 0.0 and qty_asks_g_THETAETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_THETAETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_THETAETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_THETAETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_THETAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_THETAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_THETAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_THETAETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='THETAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='THETAETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_THETAUSDT, '#', 'Покупаем', quantity_pair_a, 'THETA', 'за', price_a, 'USDT', 'по цене', price_asks_g_THETAUSDT) 
				print('Пара_B:', symbol_g_THETAETH, '#', 'Продаем', quantity_pair_b, 'THETA', 'за', price_b, 'ETH', 'по цене', price_bids_g_THETAETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_THETAUSDT_THETAETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_THETAUSDT_THETABNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_THETAUSDT != 0.0 and qty_bids_g_THETAUSDT != 0.0 and price_asks_g_THETAUSDT != 0.0 and qty_asks_g_THETAUSDT != 0.0 and price_bids_g_THETABNB != 0.0 and qty_bids_g_THETABNB != 0.0 and price_asks_g_THETABNB != 0.0 and qty_asks_g_THETABNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_THETABNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_THETABNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_THETABNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_THETAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_THETAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_THETAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_THETABNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='THETAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='THETABNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_THETAUSDT, '#', 'Покупаем', quantity_pair_a, 'THETA', 'за', price_a, 'USDT', 'по цене', price_asks_g_THETAUSDT) 
				print('Пара_B:', symbol_g_THETABNB, '#', 'Продаем', quantity_pair_b, 'THETA', 'за', price_b, 'BNB', 'по цене', price_bids_g_THETABNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_THETAUSDT_THETABNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_THETAUSDT_THETAEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_THETAUSDT != 0.0 and qty_bids_g_THETAUSDT != 0.0 and price_asks_g_THETAUSDT != 0.0 and qty_asks_g_THETAUSDT != 0.0 and price_bids_g_THETAEUR != 0.0 and qty_bids_g_THETAEUR != 0.0 and price_asks_g_THETAEUR != 0.0 and qty_asks_g_THETAEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_THETAEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_THETAEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_THETAEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_THETAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_THETAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_THETAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_THETAEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='THETAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='THETAEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_THETAUSDT, '#', 'Покупаем', quantity_pair_a, 'THETA', 'за', price_a, 'USDT', 'по цене', price_asks_g_THETAUSDT) 
				print('Пара_B:', symbol_g_THETAEUR, '#', 'Продаем', quantity_pair_b, 'THETA', 'за', price_b, 'EUR', 'по цене', price_bids_g_THETAEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_THETAUSDT_THETAEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_THETAUSDT_THETABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_THETAUSDT != 0.0 and qty_bids_g_THETAUSDT != 0.0 and price_asks_g_THETAUSDT != 0.0 and qty_asks_g_THETAUSDT != 0.0 and price_bids_g_THETABUSD != 0.0 and qty_bids_g_THETABUSD != 0.0 and price_asks_g_THETABUSD != 0.0 and qty_asks_g_THETABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_THETABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_THETABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_THETABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_THETAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_THETAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_THETAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_THETABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='THETAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='THETABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_THETAUSDT, '#', 'Покупаем', quantity_pair_a, 'THETA', 'за', price_a, 'USDT', 'по цене', price_asks_g_THETAUSDT) 
				print('Пара_B:', symbol_g_THETABUSD, '#', 'Продаем', quantity_pair_b, 'THETA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_THETABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_THETAUSDT_THETABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ENJUSDT_ENJBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ENJUSDT != 0.0 and qty_bids_g_ENJUSDT != 0.0 and price_asks_g_ENJUSDT != 0.0 and qty_asks_g_ENJUSDT != 0.0 and price_bids_g_ENJBTC != 0.0 and qty_bids_g_ENJBTC != 0.0 and price_asks_g_ENJBTC != 0.0 and qty_asks_g_ENJBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ENJBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ENJBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ENJBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ENJUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ENJUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ENJUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ENJBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ENJUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ENJBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ENJUSDT, '#', 'Покупаем', quantity_pair_a, 'ENJ', 'за', price_a, 'USDT', 'по цене', price_asks_g_ENJUSDT) 
				print('Пара_B:', symbol_g_ENJBTC, '#', 'Продаем', quantity_pair_b, 'ENJ', 'за', price_b, 'BTC', 'по цене', price_bids_g_ENJBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ENJUSDT_ENJBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ENJUSDT_ENJETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ENJUSDT != 0.0 and qty_bids_g_ENJUSDT != 0.0 and price_asks_g_ENJUSDT != 0.0 and qty_asks_g_ENJUSDT != 0.0 and price_bids_g_ENJETH != 0.0 and qty_bids_g_ENJETH != 0.0 and price_asks_g_ENJETH != 0.0 and qty_asks_g_ENJETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ENJETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ENJETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ENJETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ENJUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ENJUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ENJUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ENJETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ENJUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ENJETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ENJUSDT, '#', 'Покупаем', quantity_pair_a, 'ENJ', 'за', price_a, 'USDT', 'по цене', price_asks_g_ENJUSDT) 
				print('Пара_B:', symbol_g_ENJETH, '#', 'Продаем', quantity_pair_b, 'ENJ', 'за', price_b, 'ETH', 'по цене', price_bids_g_ENJETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ENJUSDT_ENJETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ENJUSDT_ENJBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ENJUSDT != 0.0 and qty_bids_g_ENJUSDT != 0.0 and price_asks_g_ENJUSDT != 0.0 and qty_asks_g_ENJUSDT != 0.0 and price_bids_g_ENJBNB != 0.0 and qty_bids_g_ENJBNB != 0.0 and price_asks_g_ENJBNB != 0.0 and qty_asks_g_ENJBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ENJBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ENJBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ENJBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ENJUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ENJUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ENJUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ENJBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ENJUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ENJBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ENJUSDT, '#', 'Покупаем', quantity_pair_a, 'ENJ', 'за', price_a, 'USDT', 'по цене', price_asks_g_ENJUSDT) 
				print('Пара_B:', symbol_g_ENJBNB, '#', 'Продаем', quantity_pair_b, 'ENJ', 'за', price_b, 'BNB', 'по цене', price_bids_g_ENJBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ENJUSDT_ENJBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ENJUSDT_ENJBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ENJUSDT != 0.0 and qty_bids_g_ENJUSDT != 0.0 and price_asks_g_ENJUSDT != 0.0 and qty_asks_g_ENJUSDT != 0.0 and price_bids_g_ENJBUSD != 0.0 and qty_bids_g_ENJBUSD != 0.0 and price_asks_g_ENJBUSD != 0.0 and qty_asks_g_ENJBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ENJBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ENJBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ENJBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ENJUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ENJUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ENJUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ENJBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ENJUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ENJBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ENJUSDT, '#', 'Покупаем', quantity_pair_a, 'ENJ', 'за', price_a, 'USDT', 'по цене', price_asks_g_ENJUSDT) 
				print('Пара_B:', symbol_g_ENJBUSD, '#', 'Продаем', quantity_pair_b, 'ENJ', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ENJBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ENJUSDT_ENJBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ENJUSDT_ENJEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ENJUSDT != 0.0 and qty_bids_g_ENJUSDT != 0.0 and price_asks_g_ENJUSDT != 0.0 and qty_asks_g_ENJUSDT != 0.0 and price_bids_g_ENJEUR != 0.0 and qty_bids_g_ENJEUR != 0.0 and price_asks_g_ENJEUR != 0.0 and qty_asks_g_ENJEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ENJEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ENJEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ENJEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ENJUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ENJUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ENJUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ENJEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ENJUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ENJEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ENJUSDT, '#', 'Покупаем', quantity_pair_a, 'ENJ', 'за', price_a, 'USDT', 'по цене', price_asks_g_ENJUSDT) 
				print('Пара_B:', symbol_g_ENJEUR, '#', 'Продаем', quantity_pair_b, 'ENJ', 'за', price_b, 'EUR', 'по цене', price_bids_g_ENJEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ENJUSDT_ENJEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_ENJUSDT_ENJGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ENJUSDT != 0.0 and qty_bids_g_ENJUSDT != 0.0 and price_asks_g_ENJUSDT != 0.0 and qty_asks_g_ENJUSDT != 0.0 and price_bids_g_ENJGBP != 0.0 and qty_bids_g_ENJGBP != 0.0 and price_asks_g_ENJGBP != 0.0 and qty_asks_g_ENJGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ENJGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ENJGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ENJGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ENJUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ENJUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ENJUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ENJGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ENJUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ENJGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ENJUSDT, '#', 'Покупаем', quantity_pair_a, 'ENJ', 'за', price_a, 'USDT', 'по цене', price_asks_g_ENJUSDT) 
				print('Пара_B:', symbol_g_ENJGBP, '#', 'Продаем', quantity_pair_b, 'ENJ', 'за', price_b, 'GBP', 'по цене', price_bids_g_ENJGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ENJUSDT_ENJGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_MATICUSDT_MATICBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MATICUSDT != 0.0 and qty_bids_g_MATICUSDT != 0.0 and price_asks_g_MATICUSDT != 0.0 and qty_asks_g_MATICUSDT != 0.0 and price_bids_g_MATICBNB != 0.0 and qty_bids_g_MATICBNB != 0.0 and price_asks_g_MATICBNB != 0.0 and qty_asks_g_MATICBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MATICBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MATICBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MATICBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MATICUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MATICUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MATICUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MATICBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MATICUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MATICBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MATICUSDT, '#', 'Покупаем', quantity_pair_a, 'MATIC', 'за', price_a, 'USDT', 'по цене', price_asks_g_MATICUSDT) 
				print('Пара_B:', symbol_g_MATICBNB, '#', 'Продаем', quantity_pair_b, 'MATIC', 'за', price_b, 'BNB', 'по цене', price_bids_g_MATICBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MATICUSDT_MATICBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_MATICUSDT_MATICBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MATICUSDT != 0.0 and qty_bids_g_MATICUSDT != 0.0 and price_asks_g_MATICUSDT != 0.0 and qty_asks_g_MATICUSDT != 0.0 and price_bids_g_MATICBTC != 0.0 and qty_bids_g_MATICBTC != 0.0 and price_asks_g_MATICBTC != 0.0 and qty_asks_g_MATICBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MATICBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MATICBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MATICBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MATICUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MATICUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MATICUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MATICBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MATICUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MATICBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MATICUSDT, '#', 'Покупаем', quantity_pair_a, 'MATIC', 'за', price_a, 'USDT', 'по цене', price_asks_g_MATICUSDT) 
				print('Пара_B:', symbol_g_MATICBTC, '#', 'Продаем', quantity_pair_b, 'MATIC', 'за', price_b, 'BTC', 'по цене', price_bids_g_MATICBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MATICUSDT_MATICBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MATICUSDT_MATICBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MATICUSDT != 0.0 and qty_bids_g_MATICUSDT != 0.0 and price_asks_g_MATICUSDT != 0.0 and qty_asks_g_MATICUSDT != 0.0 and price_bids_g_MATICBUSD != 0.0 and qty_bids_g_MATICBUSD != 0.0 and price_asks_g_MATICBUSD != 0.0 and qty_asks_g_MATICBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MATICBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MATICBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MATICBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MATICUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MATICUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MATICUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MATICBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MATICUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MATICBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MATICUSDT, '#', 'Покупаем', quantity_pair_a, 'MATIC', 'за', price_a, 'USDT', 'по цене', price_asks_g_MATICUSDT) 
				print('Пара_B:', symbol_g_MATICBUSD, '#', 'Продаем', quantity_pair_b, 'MATIC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MATICBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MATICUSDT_MATICBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_MATICUSDT_MATICEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MATICUSDT != 0.0 and qty_bids_g_MATICUSDT != 0.0 and price_asks_g_MATICUSDT != 0.0 and qty_asks_g_MATICUSDT != 0.0 and price_bids_g_MATICEUR != 0.0 and qty_bids_g_MATICEUR != 0.0 and price_asks_g_MATICEUR != 0.0 and qty_asks_g_MATICEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MATICEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MATICEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MATICEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MATICUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MATICUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MATICUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MATICEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MATICUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MATICEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MATICUSDT, '#', 'Покупаем', quantity_pair_a, 'MATIC', 'за', price_a, 'USDT', 'по цене', price_asks_g_MATICUSDT) 
				print('Пара_B:', symbol_g_MATICEUR, '#', 'Продаем', quantity_pair_b, 'MATIC', 'за', price_b, 'EUR', 'по цене', price_bids_g_MATICEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MATICUSDT_MATICEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_MATICUSDT_MATICGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MATICUSDT != 0.0 and qty_bids_g_MATICUSDT != 0.0 and price_asks_g_MATICUSDT != 0.0 and qty_asks_g_MATICUSDT != 0.0 and price_bids_g_MATICGBP != 0.0 and qty_bids_g_MATICGBP != 0.0 and price_asks_g_MATICGBP != 0.0 and qty_asks_g_MATICGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MATICGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MATICGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MATICGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MATICUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MATICUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MATICUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MATICGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MATICUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MATICGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MATICUSDT, '#', 'Покупаем', quantity_pair_a, 'MATIC', 'за', price_a, 'USDT', 'по цене', price_asks_g_MATICUSDT) 
				print('Пара_B:', symbol_g_MATICGBP, '#', 'Продаем', quantity_pair_b, 'MATIC', 'за', price_b, 'GBP', 'по цене', price_bids_g_MATICGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MATICUSDT_MATICGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_MATICUSDT_MATICAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MATICUSDT != 0.0 and qty_bids_g_MATICUSDT != 0.0 and price_asks_g_MATICUSDT != 0.0 and qty_asks_g_MATICUSDT != 0.0 and price_bids_g_MATICAUD != 0.0 and qty_bids_g_MATICAUD != 0.0 and price_asks_g_MATICAUD != 0.0 and qty_asks_g_MATICAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MATICAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MATICAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MATICAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MATICUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MATICUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MATICUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MATICAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MATICUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MATICAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MATICUSDT, '#', 'Покупаем', quantity_pair_a, 'MATIC', 'за', price_a, 'USDT', 'по цене', price_asks_g_MATICUSDT) 
				print('Пара_B:', symbol_g_MATICAUD, '#', 'Продаем', quantity_pair_b, 'MATIC', 'за', price_b, 'AUD', 'по цене', price_bids_g_MATICAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MATICUSDT_MATICAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_MATICUSDT_MATICETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MATICUSDT != 0.0 and qty_bids_g_MATICUSDT != 0.0 and price_asks_g_MATICUSDT != 0.0 and qty_asks_g_MATICUSDT != 0.0 and price_bids_g_MATICETH != 0.0 and qty_bids_g_MATICETH != 0.0 and price_asks_g_MATICETH != 0.0 and qty_asks_g_MATICETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MATICETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MATICETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MATICETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MATICUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MATICUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MATICUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MATICETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MATICUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MATICETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MATICUSDT, '#', 'Покупаем', quantity_pair_a, 'MATIC', 'за', price_a, 'USDT', 'по цене', price_asks_g_MATICUSDT) 
				print('Пара_B:', symbol_g_MATICETH, '#', 'Продаем', quantity_pair_b, 'MATIC', 'за', price_b, 'ETH', 'по цене', price_bids_g_MATICETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MATICUSDT_MATICETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ATOMUSDT_ATOMBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ATOMUSDT != 0.0 and qty_bids_g_ATOMUSDT != 0.0 and price_asks_g_ATOMUSDT != 0.0 and qty_asks_g_ATOMUSDT != 0.0 and price_bids_g_ATOMBNB != 0.0 and qty_bids_g_ATOMBNB != 0.0 and price_asks_g_ATOMBNB != 0.0 and qty_asks_g_ATOMBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ATOMBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ATOMBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ATOMBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ATOMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ATOMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ATOMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ATOMBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ATOMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ATOMBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ATOMUSDT, '#', 'Покупаем', quantity_pair_a, 'ATOM', 'за', price_a, 'USDT', 'по цене', price_asks_g_ATOMUSDT) 
				print('Пара_B:', symbol_g_ATOMBNB, '#', 'Продаем', quantity_pair_b, 'ATOM', 'за', price_b, 'BNB', 'по цене', price_bids_g_ATOMBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ATOMUSDT_ATOMBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ATOMUSDT_ATOMBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ATOMUSDT != 0.0 and qty_bids_g_ATOMUSDT != 0.0 and price_asks_g_ATOMUSDT != 0.0 and qty_asks_g_ATOMUSDT != 0.0 and price_bids_g_ATOMBTC != 0.0 and qty_bids_g_ATOMBTC != 0.0 and price_asks_g_ATOMBTC != 0.0 and qty_asks_g_ATOMBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ATOMBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ATOMBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ATOMBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ATOMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ATOMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ATOMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ATOMBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ATOMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ATOMBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ATOMUSDT, '#', 'Покупаем', quantity_pair_a, 'ATOM', 'за', price_a, 'USDT', 'по цене', price_asks_g_ATOMUSDT) 
				print('Пара_B:', symbol_g_ATOMBTC, '#', 'Продаем', quantity_pair_b, 'ATOM', 'за', price_b, 'BTC', 'по цене', price_bids_g_ATOMBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ATOMUSDT_ATOMBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ATOMUSDT_ATOMBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ATOMUSDT != 0.0 and qty_bids_g_ATOMUSDT != 0.0 and price_asks_g_ATOMUSDT != 0.0 and qty_asks_g_ATOMUSDT != 0.0 and price_bids_g_ATOMBUSD != 0.0 and qty_bids_g_ATOMBUSD != 0.0 and price_asks_g_ATOMBUSD != 0.0 and qty_asks_g_ATOMBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ATOMBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ATOMBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ATOMBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ATOMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ATOMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ATOMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ATOMBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ATOMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ATOMBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ATOMUSDT, '#', 'Покупаем', quantity_pair_a, 'ATOM', 'за', price_a, 'USDT', 'по цене', price_asks_g_ATOMUSDT) 
				print('Пара_B:', symbol_g_ATOMBUSD, '#', 'Продаем', quantity_pair_b, 'ATOM', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ATOMBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ATOMUSDT_ATOMBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ATOMUSDT_ATOMETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ATOMUSDT != 0.0 and qty_bids_g_ATOMUSDT != 0.0 and price_asks_g_ATOMUSDT != 0.0 and qty_asks_g_ATOMUSDT != 0.0 and price_bids_g_ATOMETH != 0.0 and qty_bids_g_ATOMETH != 0.0 and price_asks_g_ATOMETH != 0.0 and qty_asks_g_ATOMETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ATOMETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ATOMETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ATOMETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ATOMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ATOMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ATOMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ATOMETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ATOMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ATOMETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ATOMUSDT, '#', 'Покупаем', quantity_pair_a, 'ATOM', 'за', price_a, 'USDT', 'по цене', price_asks_g_ATOMUSDT) 
				print('Пара_B:', symbol_g_ATOMETH, '#', 'Продаем', quantity_pair_b, 'ATOM', 'за', price_b, 'ETH', 'по цене', price_bids_g_ATOMETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ATOMUSDT_ATOMETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ATOMUSDT_ATOMEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ATOMUSDT != 0.0 and qty_bids_g_ATOMUSDT != 0.0 and price_asks_g_ATOMUSDT != 0.0 and qty_asks_g_ATOMUSDT != 0.0 and price_bids_g_ATOMEUR != 0.0 and qty_bids_g_ATOMEUR != 0.0 and price_asks_g_ATOMEUR != 0.0 and qty_asks_g_ATOMEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ATOMEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ATOMEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ATOMEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ATOMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ATOMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ATOMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ATOMEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ATOMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ATOMEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ATOMUSDT, '#', 'Покупаем', quantity_pair_a, 'ATOM', 'за', price_a, 'USDT', 'по цене', price_asks_g_ATOMUSDT) 
				print('Пара_B:', symbol_g_ATOMEUR, '#', 'Продаем', quantity_pair_b, 'ATOM', 'за', price_b, 'EUR', 'по цене', price_bids_g_ATOMEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ATOMUSDT_ATOMEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_TFUELUSDT_TFUELBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TFUELUSDT != 0.0 and qty_bids_g_TFUELUSDT != 0.0 and price_asks_g_TFUELUSDT != 0.0 and qty_asks_g_TFUELUSDT != 0.0 and price_bids_g_TFUELBTC != 0.0 and qty_bids_g_TFUELBTC != 0.0 and price_asks_g_TFUELBTC != 0.0 and qty_asks_g_TFUELBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TFUELBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TFUELBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TFUELBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TFUELUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TFUELUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TFUELUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TFUELBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TFUELUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TFUELBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TFUELUSDT, '#', 'Покупаем', quantity_pair_a, 'TFUEL', 'за', price_a, 'USDT', 'по цене', price_asks_g_TFUELUSDT) 
				print('Пара_B:', symbol_g_TFUELBTC, '#', 'Продаем', quantity_pair_b, 'TFUEL', 'за', price_b, 'BTC', 'по цене', price_bids_g_TFUELBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TFUELUSDT_TFUELBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_TFUELUSDT_TFUELBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TFUELUSDT != 0.0 and qty_bids_g_TFUELUSDT != 0.0 and price_asks_g_TFUELUSDT != 0.0 and qty_asks_g_TFUELUSDT != 0.0 and price_bids_g_TFUELBUSD != 0.0 and qty_bids_g_TFUELBUSD != 0.0 and price_asks_g_TFUELBUSD != 0.0 and qty_asks_g_TFUELBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TFUELBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TFUELBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TFUELBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TFUELUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TFUELUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TFUELUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TFUELBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TFUELUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TFUELBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TFUELUSDT, '#', 'Покупаем', quantity_pair_a, 'TFUEL', 'за', price_a, 'USDT', 'по цене', price_asks_g_TFUELUSDT) 
				print('Пара_B:', symbol_g_TFUELBUSD, '#', 'Продаем', quantity_pair_b, 'TFUEL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_TFUELBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TFUELUSDT_TFUELBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ONEUSDT_ONEBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ONEUSDT != 0.0 and qty_bids_g_ONEUSDT != 0.0 and price_asks_g_ONEUSDT != 0.0 and qty_asks_g_ONEUSDT != 0.0 and price_bids_g_ONEBNB != 0.0 and qty_bids_g_ONEBNB != 0.0 and price_asks_g_ONEBNB != 0.0 and qty_asks_g_ONEBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ONEBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ONEBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ONEBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ONEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ONEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ONEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ONEBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ONEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ONEBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ONEUSDT, '#', 'Покупаем', quantity_pair_a, 'ONE', 'за', price_a, 'USDT', 'по цене', price_asks_g_ONEUSDT) 
				print('Пара_B:', symbol_g_ONEBNB, '#', 'Продаем', quantity_pair_b, 'ONE', 'за', price_b, 'BNB', 'по цене', price_bids_g_ONEBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ONEUSDT_ONEBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ONEUSDT_ONEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ONEUSDT != 0.0 and qty_bids_g_ONEUSDT != 0.0 and price_asks_g_ONEUSDT != 0.0 and qty_asks_g_ONEUSDT != 0.0 and price_bids_g_ONEBTC != 0.0 and qty_bids_g_ONEBTC != 0.0 and price_asks_g_ONEBTC != 0.0 and qty_asks_g_ONEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ONEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ONEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ONEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ONEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ONEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ONEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ONEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ONEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ONEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ONEUSDT, '#', 'Покупаем', quantity_pair_a, 'ONE', 'за', price_a, 'USDT', 'по цене', price_asks_g_ONEUSDT) 
				print('Пара_B:', symbol_g_ONEBTC, '#', 'Продаем', quantity_pair_b, 'ONE', 'за', price_b, 'BTC', 'по цене', price_bids_g_ONEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ONEUSDT_ONEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ONEUSDT_ONEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ONEUSDT != 0.0 and qty_bids_g_ONEUSDT != 0.0 and price_asks_g_ONEUSDT != 0.0 and qty_asks_g_ONEUSDT != 0.0 and price_bids_g_ONEBUSD != 0.0 and qty_bids_g_ONEBUSD != 0.0 and price_asks_g_ONEBUSD != 0.0 and qty_asks_g_ONEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ONEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ONEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ONEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ONEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ONEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ONEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ONEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ONEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ONEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ONEUSDT, '#', 'Покупаем', quantity_pair_a, 'ONE', 'за', price_a, 'USDT', 'по цене', price_asks_g_ONEUSDT) 
				print('Пара_B:', symbol_g_ONEBUSD, '#', 'Продаем', quantity_pair_b, 'ONE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ONEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ONEUSDT_ONEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ONEUSDT_ONEETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ONEUSDT != 0.0 and qty_bids_g_ONEUSDT != 0.0 and price_asks_g_ONEUSDT != 0.0 and qty_asks_g_ONEUSDT != 0.0 and price_bids_g_ONEETH != 0.0 and qty_bids_g_ONEETH != 0.0 and price_asks_g_ONEETH != 0.0 and qty_asks_g_ONEETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ONEETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ONEETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ONEETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ONEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ONEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ONEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ONEETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ONEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ONEETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ONEUSDT, '#', 'Покупаем', quantity_pair_a, 'ONE', 'за', price_a, 'USDT', 'по цене', price_asks_g_ONEUSDT) 
				print('Пара_B:', symbol_g_ONEETH, '#', 'Продаем', quantity_pair_b, 'ONE', 'за', price_b, 'ETH', 'по цене', price_bids_g_ONEETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ONEUSDT_ONEETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_FTMUSDT_FTMBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FTMUSDT != 0.0 and qty_bids_g_FTMUSDT != 0.0 and price_asks_g_FTMUSDT != 0.0 and qty_asks_g_FTMUSDT != 0.0 and price_bids_g_FTMBNB != 0.0 and qty_bids_g_FTMBNB != 0.0 and price_asks_g_FTMBNB != 0.0 and qty_asks_g_FTMBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FTMBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FTMBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FTMBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FTMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FTMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FTMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FTMBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FTMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FTMBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FTMUSDT, '#', 'Покупаем', quantity_pair_a, 'FTM', 'за', price_a, 'USDT', 'по цене', price_asks_g_FTMUSDT) 
				print('Пара_B:', symbol_g_FTMBNB, '#', 'Продаем', quantity_pair_b, 'FTM', 'за', price_b, 'BNB', 'по цене', price_bids_g_FTMBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FTMUSDT_FTMBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_FTMUSDT_FTMBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FTMUSDT != 0.0 and qty_bids_g_FTMUSDT != 0.0 and price_asks_g_FTMUSDT != 0.0 and qty_asks_g_FTMUSDT != 0.0 and price_bids_g_FTMBTC != 0.0 and qty_bids_g_FTMBTC != 0.0 and price_asks_g_FTMBTC != 0.0 and qty_asks_g_FTMBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FTMBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FTMBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FTMBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FTMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FTMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FTMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FTMBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FTMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FTMBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FTMUSDT, '#', 'Покупаем', quantity_pair_a, 'FTM', 'за', price_a, 'USDT', 'по цене', price_asks_g_FTMUSDT) 
				print('Пара_B:', symbol_g_FTMBTC, '#', 'Продаем', quantity_pair_b, 'FTM', 'за', price_b, 'BTC', 'по цене', price_bids_g_FTMBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FTMUSDT_FTMBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_FTMUSDT_FTMBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FTMUSDT != 0.0 and qty_bids_g_FTMUSDT != 0.0 and price_asks_g_FTMUSDT != 0.0 and qty_asks_g_FTMUSDT != 0.0 and price_bids_g_FTMBUSD != 0.0 and qty_bids_g_FTMBUSD != 0.0 and price_asks_g_FTMBUSD != 0.0 and qty_asks_g_FTMBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FTMBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FTMBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FTMBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FTMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FTMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FTMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FTMBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FTMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FTMBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FTMUSDT, '#', 'Покупаем', quantity_pair_a, 'FTM', 'за', price_a, 'USDT', 'по цене', price_asks_g_FTMUSDT) 
				print('Пара_B:', symbol_g_FTMBUSD, '#', 'Продаем', quantity_pair_b, 'FTM', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FTMBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FTMUSDT_FTMBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FTMUSDT_FTMETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FTMUSDT != 0.0 and qty_bids_g_FTMUSDT != 0.0 and price_asks_g_FTMUSDT != 0.0 and qty_asks_g_FTMUSDT != 0.0 and price_bids_g_FTMETH != 0.0 and qty_bids_g_FTMETH != 0.0 and price_asks_g_FTMETH != 0.0 and qty_asks_g_FTMETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FTMETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FTMETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FTMETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FTMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FTMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FTMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FTMETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FTMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FTMETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FTMUSDT, '#', 'Покупаем', quantity_pair_a, 'FTM', 'за', price_a, 'USDT', 'по цене', price_asks_g_FTMUSDT) 
				print('Пара_B:', symbol_g_FTMETH, '#', 'Продаем', quantity_pair_b, 'FTM', 'за', price_b, 'ETH', 'по цене', price_bids_g_FTMETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FTMUSDT_FTMETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_FTMUSDT_FTMAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FTMUSDT != 0.0 and qty_bids_g_FTMUSDT != 0.0 and price_asks_g_FTMUSDT != 0.0 and qty_asks_g_FTMUSDT != 0.0 and price_bids_g_FTMAUD != 0.0 and qty_bids_g_FTMAUD != 0.0 and price_asks_g_FTMAUD != 0.0 and qty_asks_g_FTMAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FTMAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FTMAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FTMAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FTMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FTMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FTMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FTMAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FTMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FTMAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FTMUSDT, '#', 'Покупаем', quantity_pair_a, 'FTM', 'за', price_a, 'USDT', 'по цене', price_asks_g_FTMUSDT) 
				print('Пара_B:', symbol_g_FTMAUD, '#', 'Продаем', quantity_pair_b, 'FTM', 'за', price_b, 'AUD', 'по цене', price_bids_g_FTMAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FTMUSDT_FTMAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_FTMUSDT_FTMEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FTMUSDT != 0.0 and qty_bids_g_FTMUSDT != 0.0 and price_asks_g_FTMUSDT != 0.0 and qty_asks_g_FTMUSDT != 0.0 and price_bids_g_FTMEUR != 0.0 and qty_bids_g_FTMEUR != 0.0 and price_asks_g_FTMEUR != 0.0 and qty_asks_g_FTMEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FTMEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FTMEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FTMEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FTMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FTMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FTMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FTMEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FTMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FTMEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FTMUSDT, '#', 'Покупаем', quantity_pair_a, 'FTM', 'за', price_a, 'USDT', 'по цене', price_asks_g_FTMUSDT) 
				print('Пара_B:', symbol_g_FTMEUR, '#', 'Продаем', quantity_pair_b, 'FTM', 'за', price_b, 'EUR', 'по цене', price_bids_g_FTMEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FTMUSDT_FTMEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_ALGOUSDT_ALGOBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALGOUSDT != 0.0 and qty_bids_g_ALGOUSDT != 0.0 and price_asks_g_ALGOUSDT != 0.0 and qty_asks_g_ALGOUSDT != 0.0 and price_bids_g_ALGOBNB != 0.0 and qty_bids_g_ALGOBNB != 0.0 and price_asks_g_ALGOBNB != 0.0 and qty_asks_g_ALGOBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALGOBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALGOBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALGOBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALGOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALGOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALGOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALGOBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALGOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALGOBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALGOUSDT, '#', 'Покупаем', quantity_pair_a, 'ALGO', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALGOUSDT) 
				print('Пара_B:', symbol_g_ALGOBNB, '#', 'Продаем', quantity_pair_b, 'ALGO', 'за', price_b, 'BNB', 'по цене', price_bids_g_ALGOBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALGOUSDT_ALGOBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ALGOUSDT_ALGOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALGOUSDT != 0.0 and qty_bids_g_ALGOUSDT != 0.0 and price_asks_g_ALGOUSDT != 0.0 and qty_asks_g_ALGOUSDT != 0.0 and price_bids_g_ALGOBTC != 0.0 and qty_bids_g_ALGOBTC != 0.0 and price_asks_g_ALGOBTC != 0.0 and qty_asks_g_ALGOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALGOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALGOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALGOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALGOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALGOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALGOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALGOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALGOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALGOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALGOUSDT, '#', 'Покупаем', quantity_pair_a, 'ALGO', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALGOUSDT) 
				print('Пара_B:', symbol_g_ALGOBTC, '#', 'Продаем', quantity_pair_b, 'ALGO', 'за', price_b, 'BTC', 'по цене', price_bids_g_ALGOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALGOUSDT_ALGOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ALGOUSDT_ALGOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALGOUSDT != 0.0 and qty_bids_g_ALGOUSDT != 0.0 and price_asks_g_ALGOUSDT != 0.0 and qty_asks_g_ALGOUSDT != 0.0 and price_bids_g_ALGOBUSD != 0.0 and qty_bids_g_ALGOBUSD != 0.0 and price_asks_g_ALGOBUSD != 0.0 and qty_asks_g_ALGOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALGOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALGOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALGOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALGOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALGOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALGOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALGOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALGOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALGOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALGOUSDT, '#', 'Покупаем', quantity_pair_a, 'ALGO', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALGOUSDT) 
				print('Пара_B:', symbol_g_ALGOBUSD, '#', 'Продаем', quantity_pair_b, 'ALGO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ALGOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALGOUSDT_ALGOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ALGOUSDT_ALGOETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALGOUSDT != 0.0 and qty_bids_g_ALGOUSDT != 0.0 and price_asks_g_ALGOUSDT != 0.0 and qty_asks_g_ALGOUSDT != 0.0 and price_bids_g_ALGOETH != 0.0 and qty_bids_g_ALGOETH != 0.0 and price_asks_g_ALGOETH != 0.0 and qty_asks_g_ALGOETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALGOETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALGOETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALGOETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALGOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALGOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALGOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALGOETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALGOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALGOETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALGOUSDT, '#', 'Покупаем', quantity_pair_a, 'ALGO', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALGOUSDT) 
				print('Пара_B:', symbol_g_ALGOETH, '#', 'Продаем', quantity_pair_b, 'ALGO', 'за', price_b, 'ETH', 'по цене', price_bids_g_ALGOETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALGOUSDT_ALGOETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_DOGEUSDT_DOGEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOGEUSDT != 0.0 and qty_bids_g_DOGEUSDT != 0.0 and price_asks_g_DOGEUSDT != 0.0 and qty_asks_g_DOGEUSDT != 0.0 and price_bids_g_DOGEBTC != 0.0 and qty_bids_g_DOGEBTC != 0.0 and price_asks_g_DOGEBTC != 0.0 and qty_asks_g_DOGEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOGEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOGEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOGEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOGEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOGEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOGEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOGEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOGEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOGEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOGEUSDT, '#', 'Покупаем', quantity_pair_a, 'DOGE', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOGEUSDT) 
				print('Пара_B:', symbol_g_DOGEBTC, '#', 'Продаем', quantity_pair_b, 'DOGE', 'за', price_b, 'BTC', 'по цене', price_bids_g_DOGEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOGEUSDT_DOGEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_DOGEUSDT_DOGEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOGEUSDT != 0.0 and qty_bids_g_DOGEUSDT != 0.0 and price_asks_g_DOGEUSDT != 0.0 and qty_asks_g_DOGEUSDT != 0.0 and price_bids_g_DOGEBUSD != 0.0 and qty_bids_g_DOGEBUSD != 0.0 and price_asks_g_DOGEBUSD != 0.0 and qty_asks_g_DOGEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOGEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOGEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOGEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOGEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOGEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOGEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOGEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOGEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOGEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOGEUSDT, '#', 'Покупаем', quantity_pair_a, 'DOGE', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOGEUSDT) 
				print('Пара_B:', symbol_g_DOGEBUSD, '#', 'Продаем', quantity_pair_b, 'DOGE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DOGEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOGEUSDT_DOGEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DOGEUSDT_DOGEEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOGEUSDT != 0.0 and qty_bids_g_DOGEUSDT != 0.0 and price_asks_g_DOGEUSDT != 0.0 and qty_asks_g_DOGEUSDT != 0.0 and price_bids_g_DOGEEUR != 0.0 and qty_bids_g_DOGEEUR != 0.0 and price_asks_g_DOGEEUR != 0.0 and qty_asks_g_DOGEEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOGEEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOGEEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOGEEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOGEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOGEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOGEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOGEEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOGEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOGEEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOGEUSDT, '#', 'Покупаем', quantity_pair_a, 'DOGE', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOGEUSDT) 
				print('Пара_B:', symbol_g_DOGEEUR, '#', 'Продаем', quantity_pair_b, 'DOGE', 'за', price_b, 'EUR', 'по цене', price_bids_g_DOGEEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOGEUSDT_DOGEEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_DOGEUSDT_DOGEAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOGEUSDT != 0.0 and qty_bids_g_DOGEUSDT != 0.0 and price_asks_g_DOGEUSDT != 0.0 and qty_asks_g_DOGEUSDT != 0.0 and price_bids_g_DOGEAUD != 0.0 and qty_bids_g_DOGEAUD != 0.0 and price_asks_g_DOGEAUD != 0.0 and qty_asks_g_DOGEAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOGEAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOGEAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOGEAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOGEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOGEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOGEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOGEAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOGEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOGEAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOGEUSDT, '#', 'Покупаем', quantity_pair_a, 'DOGE', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOGEUSDT) 
				print('Пара_B:', symbol_g_DOGEAUD, '#', 'Продаем', quantity_pair_b, 'DOGE', 'за', price_b, 'AUD', 'по цене', price_bids_g_DOGEAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOGEUSDT_DOGEAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_DOGEUSDT_DOGEGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOGEUSDT != 0.0 and qty_bids_g_DOGEUSDT != 0.0 and price_asks_g_DOGEUSDT != 0.0 and qty_asks_g_DOGEUSDT != 0.0 and price_bids_g_DOGEGBP != 0.0 and qty_bids_g_DOGEGBP != 0.0 and price_asks_g_DOGEGBP != 0.0 and qty_asks_g_DOGEGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOGEGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOGEGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOGEGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOGEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOGEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOGEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOGEGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOGEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOGEGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOGEUSDT, '#', 'Покупаем', quantity_pair_a, 'DOGE', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOGEUSDT) 
				print('Пара_B:', symbol_g_DOGEGBP, '#', 'Продаем', quantity_pair_b, 'DOGE', 'за', price_b, 'GBP', 'по цене', price_bids_g_DOGEGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOGEUSDT_DOGEGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_DUSKUSDT_DUSKBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DUSKUSDT != 0.0 and qty_bids_g_DUSKUSDT != 0.0 and price_asks_g_DUSKUSDT != 0.0 and qty_asks_g_DUSKUSDT != 0.0 and price_bids_g_DUSKBTC != 0.0 and qty_bids_g_DUSKBTC != 0.0 and price_asks_g_DUSKBTC != 0.0 and qty_asks_g_DUSKBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DUSKBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DUSKBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DUSKBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DUSKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DUSKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DUSKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DUSKBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DUSKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DUSKBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DUSKUSDT, '#', 'Покупаем', quantity_pair_a, 'DUSK', 'за', price_a, 'USDT', 'по цене', price_asks_g_DUSKUSDT) 
				print('Пара_B:', symbol_g_DUSKBTC, '#', 'Продаем', quantity_pair_b, 'DUSK', 'за', price_b, 'BTC', 'по цене', price_bids_g_DUSKBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DUSKUSDT_DUSKBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_DUSKUSDT_DUSKBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DUSKUSDT != 0.0 and qty_bids_g_DUSKUSDT != 0.0 and price_asks_g_DUSKUSDT != 0.0 and qty_asks_g_DUSKUSDT != 0.0 and price_bids_g_DUSKBUSD != 0.0 and qty_bids_g_DUSKBUSD != 0.0 and price_asks_g_DUSKBUSD != 0.0 and qty_asks_g_DUSKBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DUSKBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DUSKBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DUSKBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DUSKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DUSKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DUSKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DUSKBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DUSKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DUSKBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DUSKUSDT, '#', 'Покупаем', quantity_pair_a, 'DUSK', 'за', price_a, 'USDT', 'по цене', price_asks_g_DUSKUSDT) 
				print('Пара_B:', symbol_g_DUSKBUSD, '#', 'Продаем', quantity_pair_b, 'DUSK', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DUSKBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DUSKUSDT_DUSKBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ANKRUSDT_ANKRBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ANKRUSDT != 0.0 and qty_bids_g_ANKRUSDT != 0.0 and price_asks_g_ANKRUSDT != 0.0 and qty_asks_g_ANKRUSDT != 0.0 and price_bids_g_ANKRBNB != 0.0 and qty_bids_g_ANKRBNB != 0.0 and price_asks_g_ANKRBNB != 0.0 and qty_asks_g_ANKRBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ANKRBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ANKRBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ANKRBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ANKRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ANKRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ANKRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ANKRBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ANKRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ANKRBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ANKRUSDT, '#', 'Покупаем', quantity_pair_a, 'ANKR', 'за', price_a, 'USDT', 'по цене', price_asks_g_ANKRUSDT) 
				print('Пара_B:', symbol_g_ANKRBNB, '#', 'Продаем', quantity_pair_b, 'ANKR', 'за', price_b, 'BNB', 'по цене', price_bids_g_ANKRBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ANKRUSDT_ANKRBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ANKRUSDT_ANKRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ANKRUSDT != 0.0 and qty_bids_g_ANKRUSDT != 0.0 and price_asks_g_ANKRUSDT != 0.0 and qty_asks_g_ANKRUSDT != 0.0 and price_bids_g_ANKRBTC != 0.0 and qty_bids_g_ANKRBTC != 0.0 and price_asks_g_ANKRBTC != 0.0 and qty_asks_g_ANKRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ANKRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ANKRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ANKRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ANKRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ANKRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ANKRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ANKRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ANKRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ANKRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ANKRUSDT, '#', 'Покупаем', quantity_pair_a, 'ANKR', 'за', price_a, 'USDT', 'по цене', price_asks_g_ANKRUSDT) 
				print('Пара_B:', symbol_g_ANKRBTC, '#', 'Продаем', quantity_pair_b, 'ANKR', 'за', price_b, 'BTC', 'по цене', price_bids_g_ANKRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ANKRUSDT_ANKRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ANKRUSDT_ANKRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ANKRUSDT != 0.0 and qty_bids_g_ANKRUSDT != 0.0 and price_asks_g_ANKRUSDT != 0.0 and qty_asks_g_ANKRUSDT != 0.0 and price_bids_g_ANKRBUSD != 0.0 and qty_bids_g_ANKRBUSD != 0.0 and price_asks_g_ANKRBUSD != 0.0 and qty_asks_g_ANKRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ANKRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ANKRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ANKRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ANKRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ANKRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ANKRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ANKRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ANKRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ANKRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ANKRUSDT, '#', 'Покупаем', quantity_pair_a, 'ANKR', 'за', price_a, 'USDT', 'по цене', price_asks_g_ANKRUSDT) 
				print('Пара_B:', symbol_g_ANKRBUSD, '#', 'Продаем', quantity_pair_b, 'ANKR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ANKRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ANKRUSDT_ANKRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_WINUSDT_WINBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WINUSDT != 0.0 and qty_bids_g_WINUSDT != 0.0 and price_asks_g_WINUSDT != 0.0 and qty_asks_g_WINUSDT != 0.0 and price_bids_g_WINBNB != 0.0 and qty_bids_g_WINBNB != 0.0 and price_asks_g_WINBNB != 0.0 and qty_asks_g_WINBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WINBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WINBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WINBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WINUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WINUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WINUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WINBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WINUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WINBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WINUSDT, '#', 'Покупаем', quantity_pair_a, 'WIN', 'за', price_a, 'USDT', 'по цене', price_asks_g_WINUSDT) 
				print('Пара_B:', symbol_g_WINBNB, '#', 'Продаем', quantity_pair_b, 'WIN', 'за', price_b, 'BNB', 'по цене', price_bids_g_WINBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WINUSDT_WINBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_WINUSDT_WINTRX_TRXUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WINUSDT != 0.0 and qty_bids_g_WINUSDT != 0.0 and price_asks_g_WINUSDT != 0.0 and qty_asks_g_WINUSDT != 0.0 and price_bids_g_WINTRX != 0.0 and qty_bids_g_WINTRX != 0.0 and price_asks_g_WINTRX != 0.0 and qty_asks_g_WINTRX != 0.0 and price_bids_g_TRXUSDT != 0.0 and qty_bids_g_TRXUSDT != 0.0 and price_asks_g_TRXUSDT != 0.0 and qty_asks_g_TRXUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_TRXUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_TRXUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WINTRX) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WINTRX)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WINTRX)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WINUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WINUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WINUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WINTRX) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_TRXUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WINUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WINTRX', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='TRXUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WINUSDT, '#', 'Покупаем', quantity_pair_a, 'WIN', 'за', price_a, 'USDT', 'по цене', price_asks_g_WINUSDT) 
				print('Пара_B:', symbol_g_WINTRX, '#', 'Продаем', quantity_pair_b, 'WIN', 'за', price_b, 'TRX', 'по цене', price_bids_g_WINTRX) 
				print('Пара_C:', symbol_g_TRXUSDT, '#', 'Продаем', quantity_pair_c, 'TRX', 'за', price_c, 'USDT', 'по цене', price_bids_g_TRXUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WINUSDT_WINTRX_TRXUSDT_Trade).start() 

###################################################################### 


def loop_WINUSDT_WINEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WINUSDT != 0.0 and qty_bids_g_WINUSDT != 0.0 and price_asks_g_WINUSDT != 0.0 and qty_asks_g_WINUSDT != 0.0 and price_bids_g_WINEUR != 0.0 and qty_bids_g_WINEUR != 0.0 and price_asks_g_WINEUR != 0.0 and qty_asks_g_WINEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WINEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WINEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WINEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WINUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WINUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WINUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WINEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WINUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WINEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WINUSDT, '#', 'Покупаем', quantity_pair_a, 'WIN', 'за', price_a, 'USDT', 'по цене', price_asks_g_WINUSDT) 
				print('Пара_B:', symbol_g_WINEUR, '#', 'Продаем', quantity_pair_b, 'WIN', 'за', price_b, 'EUR', 'по цене', price_bids_g_WINEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WINUSDT_WINEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_WINUSDT_WINBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WINUSDT != 0.0 and qty_bids_g_WINUSDT != 0.0 and price_asks_g_WINUSDT != 0.0 and qty_asks_g_WINUSDT != 0.0 and price_bids_g_WINBUSD != 0.0 and qty_bids_g_WINBUSD != 0.0 and price_asks_g_WINBUSD != 0.0 and qty_asks_g_WINBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WINBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WINBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WINBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WINUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WINUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WINUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WINBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WINUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WINBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WINUSDT, '#', 'Покупаем', quantity_pair_a, 'WIN', 'за', price_a, 'USDT', 'по цене', price_asks_g_WINUSDT) 
				print('Пара_B:', symbol_g_WINBUSD, '#', 'Продаем', quantity_pair_b, 'WIN', 'за', price_b, 'BUSD', 'по цене', price_bids_g_WINBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WINUSDT_WINBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_COSUSDT_COSBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_COSUSDT != 0.0 and qty_bids_g_COSUSDT != 0.0 and price_asks_g_COSUSDT != 0.0 and qty_asks_g_COSUSDT != 0.0 and price_bids_g_COSBNB != 0.0 and qty_bids_g_COSBNB != 0.0 and price_asks_g_COSBNB != 0.0 and qty_asks_g_COSBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_COSBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_COSBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_COSBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_COSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_COSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_COSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_COSBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='COSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='COSBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_COSUSDT, '#', 'Покупаем', quantity_pair_a, 'COS', 'за', price_a, 'USDT', 'по цене', price_asks_g_COSUSDT) 
				print('Пара_B:', symbol_g_COSBNB, '#', 'Продаем', quantity_pair_b, 'COS', 'за', price_b, 'BNB', 'по цене', price_bids_g_COSBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_COSUSDT_COSBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_COSUSDT_COSBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_COSUSDT != 0.0 and qty_bids_g_COSUSDT != 0.0 and price_asks_g_COSUSDT != 0.0 and qty_asks_g_COSUSDT != 0.0 and price_bids_g_COSBTC != 0.0 and qty_bids_g_COSBTC != 0.0 and price_asks_g_COSBTC != 0.0 and qty_asks_g_COSBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_COSBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_COSBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_COSBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_COSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_COSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_COSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_COSBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='COSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='COSBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_COSUSDT, '#', 'Покупаем', quantity_pair_a, 'COS', 'за', price_a, 'USDT', 'по цене', price_asks_g_COSUSDT) 
				print('Пара_B:', symbol_g_COSBTC, '#', 'Продаем', quantity_pair_b, 'COS', 'за', price_b, 'BTC', 'по цене', price_bids_g_COSBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_COSUSDT_COSBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_COSUSDT_COSBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_COSUSDT != 0.0 and qty_bids_g_COSUSDT != 0.0 and price_asks_g_COSUSDT != 0.0 and qty_asks_g_COSUSDT != 0.0 and price_bids_g_COSBUSD != 0.0 and qty_bids_g_COSBUSD != 0.0 and price_asks_g_COSBUSD != 0.0 and qty_asks_g_COSBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_COSBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_COSBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_COSBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_COSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_COSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_COSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_COSBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='COSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='COSBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_COSUSDT, '#', 'Покупаем', quantity_pair_a, 'COS', 'за', price_a, 'USDT', 'по цене', price_asks_g_COSUSDT) 
				print('Пара_B:', symbol_g_COSBUSD, '#', 'Продаем', quantity_pair_b, 'COS', 'за', price_b, 'BUSD', 'по цене', price_bids_g_COSBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_COSUSDT_COSBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_COCOSUSDT_COCOSBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_COCOSUSDT != 0.0 and qty_bids_g_COCOSUSDT != 0.0 and price_asks_g_COCOSUSDT != 0.0 and qty_asks_g_COCOSUSDT != 0.0 and price_bids_g_COCOSBNB != 0.0 and qty_bids_g_COCOSBNB != 0.0 and price_asks_g_COCOSBNB != 0.0 and qty_asks_g_COCOSBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_COCOSBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_COCOSBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_COCOSBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_COCOSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_COCOSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_COCOSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_COCOSBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='COCOSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='COCOSBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_COCOSUSDT, '#', 'Покупаем', quantity_pair_a, 'COCOS', 'за', price_a, 'USDT', 'по цене', price_asks_g_COCOSUSDT) 
				print('Пара_B:', symbol_g_COCOSBNB, '#', 'Продаем', quantity_pair_b, 'COCOS', 'за', price_b, 'BNB', 'по цене', price_bids_g_COCOSBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_COCOSUSDT_COCOSBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_COCOSUSDT_COCOSBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_COCOSUSDT != 0.0 and qty_bids_g_COCOSUSDT != 0.0 and price_asks_g_COCOSUSDT != 0.0 and qty_asks_g_COCOSUSDT != 0.0 and price_bids_g_COCOSBUSD != 0.0 and qty_bids_g_COCOSBUSD != 0.0 and price_asks_g_COCOSBUSD != 0.0 and qty_asks_g_COCOSBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_COCOSBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_COCOSBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_COCOSBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_COCOSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_COCOSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_COCOSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_COCOSBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='COCOSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='COCOSBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_COCOSUSDT, '#', 'Покупаем', quantity_pair_a, 'COCOS', 'за', price_a, 'USDT', 'по цене', price_asks_g_COCOSUSDT) 
				print('Пара_B:', symbol_g_COCOSBUSD, '#', 'Продаем', quantity_pair_b, 'COCOS', 'за', price_b, 'BUSD', 'по цене', price_bids_g_COCOSBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_COCOSUSDT_COCOSBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_MTLUSDT_MTLBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MTLUSDT != 0.0 and qty_bids_g_MTLUSDT != 0.0 and price_asks_g_MTLUSDT != 0.0 and qty_asks_g_MTLUSDT != 0.0 and price_bids_g_MTLBTC != 0.0 and qty_bids_g_MTLBTC != 0.0 and price_asks_g_MTLBTC != 0.0 and qty_asks_g_MTLBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MTLBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MTLBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MTLBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MTLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MTLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MTLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MTLBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MTLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MTLBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MTLUSDT, '#', 'Покупаем', quantity_pair_a, 'MTL', 'за', price_a, 'USDT', 'по цене', price_asks_g_MTLUSDT) 
				print('Пара_B:', symbol_g_MTLBTC, '#', 'Продаем', quantity_pair_b, 'MTL', 'за', price_b, 'BTC', 'по цене', price_bids_g_MTLBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MTLUSDT_MTLBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MTLUSDT_MTLETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MTLUSDT != 0.0 and qty_bids_g_MTLUSDT != 0.0 and price_asks_g_MTLUSDT != 0.0 and qty_asks_g_MTLUSDT != 0.0 and price_bids_g_MTLETH != 0.0 and qty_bids_g_MTLETH != 0.0 and price_asks_g_MTLETH != 0.0 and qty_asks_g_MTLETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MTLETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MTLETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MTLETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MTLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MTLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MTLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MTLETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MTLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MTLETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MTLUSDT, '#', 'Покупаем', quantity_pair_a, 'MTL', 'за', price_a, 'USDT', 'по цене', price_asks_g_MTLUSDT) 
				print('Пара_B:', symbol_g_MTLETH, '#', 'Продаем', quantity_pair_b, 'MTL', 'за', price_b, 'ETH', 'по цене', price_bids_g_MTLETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MTLUSDT_MTLETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_MTLUSDT_MTLBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MTLUSDT != 0.0 and qty_bids_g_MTLUSDT != 0.0 and price_asks_g_MTLUSDT != 0.0 and qty_asks_g_MTLUSDT != 0.0 and price_bids_g_MTLBUSD != 0.0 and qty_bids_g_MTLBUSD != 0.0 and price_asks_g_MTLBUSD != 0.0 and qty_asks_g_MTLBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MTLBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MTLBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MTLBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MTLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MTLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MTLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MTLBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MTLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MTLBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MTLUSDT, '#', 'Покупаем', quantity_pair_a, 'MTL', 'за', price_a, 'USDT', 'по цене', price_asks_g_MTLUSDT) 
				print('Пара_B:', symbol_g_MTLBUSD, '#', 'Продаем', quantity_pair_b, 'MTL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MTLBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MTLUSDT_MTLBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_TOMOUSDT_TOMOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TOMOUSDT != 0.0 and qty_bids_g_TOMOUSDT != 0.0 and price_asks_g_TOMOUSDT != 0.0 and qty_asks_g_TOMOUSDT != 0.0 and price_bids_g_TOMOBTC != 0.0 and qty_bids_g_TOMOBTC != 0.0 and price_asks_g_TOMOBTC != 0.0 and qty_asks_g_TOMOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TOMOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TOMOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TOMOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TOMOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TOMOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TOMOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TOMOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TOMOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TOMOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TOMOUSDT, '#', 'Покупаем', quantity_pair_a, 'TOMO', 'за', price_a, 'USDT', 'по цене', price_asks_g_TOMOUSDT) 
				print('Пара_B:', symbol_g_TOMOBTC, '#', 'Продаем', quantity_pair_b, 'TOMO', 'за', price_b, 'BTC', 'по цене', price_bids_g_TOMOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TOMOUSDT_TOMOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_TOMOUSDT_TOMOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TOMOUSDT != 0.0 and qty_bids_g_TOMOUSDT != 0.0 and price_asks_g_TOMOUSDT != 0.0 and qty_asks_g_TOMOUSDT != 0.0 and price_bids_g_TOMOBUSD != 0.0 and qty_bids_g_TOMOBUSD != 0.0 and price_asks_g_TOMOBUSD != 0.0 and qty_asks_g_TOMOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TOMOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TOMOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TOMOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TOMOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TOMOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TOMOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TOMOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TOMOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TOMOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TOMOUSDT, '#', 'Покупаем', quantity_pair_a, 'TOMO', 'за', price_a, 'USDT', 'по цене', price_asks_g_TOMOUSDT) 
				print('Пара_B:', symbol_g_TOMOBUSD, '#', 'Продаем', quantity_pair_b, 'TOMO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_TOMOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TOMOUSDT_TOMOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DENTUSDT_DENTETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DENTUSDT != 0.0 and qty_bids_g_DENTUSDT != 0.0 and price_asks_g_DENTUSDT != 0.0 and qty_asks_g_DENTUSDT != 0.0 and price_bids_g_DENTETH != 0.0 and qty_bids_g_DENTETH != 0.0 and price_asks_g_DENTETH != 0.0 and qty_asks_g_DENTETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DENTETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DENTETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DENTETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DENTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DENTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DENTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DENTETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DENTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DENTETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DENTUSDT, '#', 'Покупаем', quantity_pair_a, 'DENT', 'за', price_a, 'USDT', 'по цене', price_asks_g_DENTUSDT) 
				print('Пара_B:', symbol_g_DENTETH, '#', 'Продаем', quantity_pair_b, 'DENT', 'за', price_b, 'ETH', 'по цене', price_bids_g_DENTETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DENTUSDT_DENTETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_DENTUSDT_DENTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DENTUSDT != 0.0 and qty_bids_g_DENTUSDT != 0.0 and price_asks_g_DENTUSDT != 0.0 and qty_asks_g_DENTUSDT != 0.0 and price_bids_g_DENTBUSD != 0.0 and qty_bids_g_DENTBUSD != 0.0 and price_asks_g_DENTBUSD != 0.0 and qty_asks_g_DENTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DENTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DENTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DENTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DENTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DENTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DENTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DENTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DENTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DENTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DENTUSDT, '#', 'Покупаем', quantity_pair_a, 'DENT', 'за', price_a, 'USDT', 'по цене', price_asks_g_DENTUSDT) 
				print('Пара_B:', symbol_g_DENTBUSD, '#', 'Продаем', quantity_pair_b, 'DENT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DENTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DENTUSDT_DENTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_KEYUSDT_KEYETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KEYUSDT != 0.0 and qty_bids_g_KEYUSDT != 0.0 and price_asks_g_KEYUSDT != 0.0 and qty_asks_g_KEYUSDT != 0.0 and price_bids_g_KEYETH != 0.0 and qty_bids_g_KEYETH != 0.0 and price_asks_g_KEYETH != 0.0 and qty_asks_g_KEYETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KEYETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KEYETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KEYETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KEYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KEYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KEYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KEYETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KEYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KEYETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KEYUSDT, '#', 'Покупаем', quantity_pair_a, 'KEY', 'за', price_a, 'USDT', 'по цене', price_asks_g_KEYUSDT) 
				print('Пара_B:', symbol_g_KEYETH, '#', 'Продаем', quantity_pair_b, 'KEY', 'за', price_b, 'ETH', 'по цене', price_bids_g_KEYETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KEYUSDT_KEYETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_KEYUSDT_KEYBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KEYUSDT != 0.0 and qty_bids_g_KEYUSDT != 0.0 and price_asks_g_KEYUSDT != 0.0 and qty_asks_g_KEYUSDT != 0.0 and price_bids_g_KEYBUSD != 0.0 and qty_bids_g_KEYBUSD != 0.0 and price_asks_g_KEYBUSD != 0.0 and qty_asks_g_KEYBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KEYBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KEYBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KEYBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KEYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KEYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KEYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KEYBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KEYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KEYBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KEYUSDT, '#', 'Покупаем', quantity_pair_a, 'KEY', 'за', price_a, 'USDT', 'по цене', price_asks_g_KEYUSDT) 
				print('Пара_B:', symbol_g_KEYBUSD, '#', 'Продаем', quantity_pair_b, 'KEY', 'за', price_b, 'BUSD', 'по цене', price_bids_g_KEYBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KEYUSDT_KEYBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DOCKUSDT_DOCKBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOCKUSDT != 0.0 and qty_bids_g_DOCKUSDT != 0.0 and price_asks_g_DOCKUSDT != 0.0 and qty_asks_g_DOCKUSDT != 0.0 and price_bids_g_DOCKBTC != 0.0 and qty_bids_g_DOCKBTC != 0.0 and price_asks_g_DOCKBTC != 0.0 and qty_asks_g_DOCKBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOCKBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOCKBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOCKBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOCKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOCKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOCKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOCKBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOCKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOCKBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOCKUSDT, '#', 'Покупаем', quantity_pair_a, 'DOCK', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOCKUSDT) 
				print('Пара_B:', symbol_g_DOCKBTC, '#', 'Продаем', quantity_pair_b, 'DOCK', 'за', price_b, 'BTC', 'по цене', price_bids_g_DOCKBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOCKUSDT_DOCKBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_DOCKUSDT_DOCKBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOCKUSDT != 0.0 and qty_bids_g_DOCKUSDT != 0.0 and price_asks_g_DOCKUSDT != 0.0 and qty_asks_g_DOCKUSDT != 0.0 and price_bids_g_DOCKBUSD != 0.0 and qty_bids_g_DOCKBUSD != 0.0 and price_asks_g_DOCKBUSD != 0.0 and qty_asks_g_DOCKBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOCKBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOCKBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOCKBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOCKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOCKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOCKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOCKBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOCKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOCKBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOCKUSDT, '#', 'Покупаем', quantity_pair_a, 'DOCK', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOCKUSDT) 
				print('Пара_B:', symbol_g_DOCKBUSD, '#', 'Продаем', quantity_pair_b, 'DOCK', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DOCKBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOCKUSDT_DOCKBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_WANUSDT_WANBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WANUSDT != 0.0 and qty_bids_g_WANUSDT != 0.0 and price_asks_g_WANUSDT != 0.0 and qty_asks_g_WANUSDT != 0.0 and price_bids_g_WANBTC != 0.0 and qty_bids_g_WANBTC != 0.0 and price_asks_g_WANBTC != 0.0 and qty_asks_g_WANBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WANBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WANBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WANBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WANUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WANUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WANUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WANBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WANUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WANBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WANUSDT, '#', 'Покупаем', quantity_pair_a, 'WAN', 'за', price_a, 'USDT', 'по цене', price_asks_g_WANUSDT) 
				print('Пара_B:', symbol_g_WANBTC, '#', 'Продаем', quantity_pair_b, 'WAN', 'за', price_b, 'BTC', 'по цене', price_bids_g_WANBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WANUSDT_WANBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_WANUSDT_WANETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WANUSDT != 0.0 and qty_bids_g_WANUSDT != 0.0 and price_asks_g_WANUSDT != 0.0 and qty_asks_g_WANUSDT != 0.0 and price_bids_g_WANETH != 0.0 and qty_bids_g_WANETH != 0.0 and price_asks_g_WANETH != 0.0 and qty_asks_g_WANETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WANETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WANETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WANETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WANUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WANUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WANUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WANETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WANUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WANETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WANUSDT, '#', 'Покупаем', quantity_pair_a, 'WAN', 'за', price_a, 'USDT', 'по цене', price_asks_g_WANUSDT) 
				print('Пара_B:', symbol_g_WANETH, '#', 'Продаем', quantity_pair_b, 'WAN', 'за', price_b, 'ETH', 'по цене', price_bids_g_WANETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WANUSDT_WANETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_FUNUSDT_FUNETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FUNUSDT != 0.0 and qty_bids_g_FUNUSDT != 0.0 and price_asks_g_FUNUSDT != 0.0 and qty_asks_g_FUNUSDT != 0.0 and price_bids_g_FUNETH != 0.0 and qty_bids_g_FUNETH != 0.0 and price_asks_g_FUNETH != 0.0 and qty_asks_g_FUNETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FUNETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FUNETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FUNETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FUNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FUNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FUNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FUNETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FUNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FUNETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FUNUSDT, '#', 'Покупаем', quantity_pair_a, 'FUN', 'за', price_a, 'USDT', 'по цене', price_asks_g_FUNUSDT) 
				print('Пара_B:', symbol_g_FUNETH, '#', 'Продаем', quantity_pair_b, 'FUN', 'за', price_b, 'ETH', 'по цене', price_bids_g_FUNETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FUNUSDT_FUNETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_FUNUSDT_FUNBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FUNUSDT != 0.0 and qty_bids_g_FUNUSDT != 0.0 and price_asks_g_FUNUSDT != 0.0 and qty_asks_g_FUNUSDT != 0.0 and price_bids_g_FUNBNB != 0.0 and qty_bids_g_FUNBNB != 0.0 and price_asks_g_FUNBNB != 0.0 and qty_asks_g_FUNBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FUNBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FUNBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FUNBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FUNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FUNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FUNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FUNBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FUNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FUNBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FUNUSDT, '#', 'Покупаем', quantity_pair_a, 'FUN', 'за', price_a, 'USDT', 'по цене', price_asks_g_FUNUSDT) 
				print('Пара_B:', symbol_g_FUNBNB, '#', 'Продаем', quantity_pair_b, 'FUN', 'за', price_b, 'BNB', 'по цене', price_bids_g_FUNBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FUNUSDT_FUNBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_CHZUSDT_CHZBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CHZUSDT != 0.0 and qty_bids_g_CHZUSDT != 0.0 and price_asks_g_CHZUSDT != 0.0 and qty_asks_g_CHZUSDT != 0.0 and price_bids_g_CHZBNB != 0.0 and qty_bids_g_CHZBNB != 0.0 and price_asks_g_CHZBNB != 0.0 and qty_asks_g_CHZBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CHZBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CHZBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CHZBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CHZUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CHZUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CHZUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CHZBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CHZUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CHZBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CHZUSDT, '#', 'Покупаем', quantity_pair_a, 'CHZ', 'за', price_a, 'USDT', 'по цене', price_asks_g_CHZUSDT) 
				print('Пара_B:', symbol_g_CHZBNB, '#', 'Продаем', quantity_pair_b, 'CHZ', 'за', price_b, 'BNB', 'по цене', price_bids_g_CHZBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CHZUSDT_CHZBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_CHZUSDT_CHZBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CHZUSDT != 0.0 and qty_bids_g_CHZUSDT != 0.0 and price_asks_g_CHZUSDT != 0.0 and qty_asks_g_CHZUSDT != 0.0 and price_bids_g_CHZBTC != 0.0 and qty_bids_g_CHZBTC != 0.0 and price_asks_g_CHZBTC != 0.0 and qty_asks_g_CHZBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CHZBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CHZBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CHZBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CHZUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CHZUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CHZUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CHZBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CHZUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CHZBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CHZUSDT, '#', 'Покупаем', quantity_pair_a, 'CHZ', 'за', price_a, 'USDT', 'по цене', price_asks_g_CHZUSDT) 
				print('Пара_B:', symbol_g_CHZBTC, '#', 'Продаем', quantity_pair_b, 'CHZ', 'за', price_b, 'BTC', 'по цене', price_bids_g_CHZBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CHZUSDT_CHZBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CHZUSDT_CHZBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CHZUSDT != 0.0 and qty_bids_g_CHZUSDT != 0.0 and price_asks_g_CHZUSDT != 0.0 and qty_asks_g_CHZUSDT != 0.0 and price_bids_g_CHZBUSD != 0.0 and qty_bids_g_CHZBUSD != 0.0 and price_asks_g_CHZBUSD != 0.0 and qty_asks_g_CHZBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CHZBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CHZBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CHZBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CHZUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CHZUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CHZUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CHZBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CHZUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CHZBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CHZUSDT, '#', 'Покупаем', quantity_pair_a, 'CHZ', 'за', price_a, 'USDT', 'по цене', price_asks_g_CHZUSDT) 
				print('Пара_B:', symbol_g_CHZBUSD, '#', 'Продаем', quantity_pair_b, 'CHZ', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CHZBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CHZUSDT_CHZBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_CHZUSDT_CHZEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CHZUSDT != 0.0 and qty_bids_g_CHZUSDT != 0.0 and price_asks_g_CHZUSDT != 0.0 and qty_asks_g_CHZUSDT != 0.0 and price_bids_g_CHZEUR != 0.0 and qty_bids_g_CHZEUR != 0.0 and price_asks_g_CHZEUR != 0.0 and qty_asks_g_CHZEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CHZEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CHZEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CHZEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CHZUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CHZUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CHZUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CHZEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CHZUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CHZEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CHZUSDT, '#', 'Покупаем', quantity_pair_a, 'CHZ', 'за', price_a, 'USDT', 'по цене', price_asks_g_CHZUSDT) 
				print('Пара_B:', symbol_g_CHZEUR, '#', 'Продаем', quantity_pair_b, 'CHZ', 'за', price_b, 'EUR', 'по цене', price_bids_g_CHZEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CHZUSDT_CHZEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_CHZUSDT_CHZGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CHZUSDT != 0.0 and qty_bids_g_CHZUSDT != 0.0 and price_asks_g_CHZUSDT != 0.0 and qty_asks_g_CHZUSDT != 0.0 and price_bids_g_CHZGBP != 0.0 and qty_bids_g_CHZGBP != 0.0 and price_asks_g_CHZGBP != 0.0 and qty_asks_g_CHZGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CHZGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CHZGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CHZGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CHZUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CHZUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CHZUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CHZGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CHZUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CHZGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CHZUSDT, '#', 'Покупаем', quantity_pair_a, 'CHZ', 'за', price_a, 'USDT', 'по цене', price_asks_g_CHZUSDT) 
				print('Пара_B:', symbol_g_CHZGBP, '#', 'Продаем', quantity_pair_b, 'CHZ', 'за', price_b, 'GBP', 'по цене', price_bids_g_CHZGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CHZUSDT_CHZGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_BANDUSDT_BANDBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BANDUSDT != 0.0 and qty_bids_g_BANDUSDT != 0.0 and price_asks_g_BANDUSDT != 0.0 and qty_asks_g_BANDUSDT != 0.0 and price_bids_g_BANDBTC != 0.0 and qty_bids_g_BANDBTC != 0.0 and price_asks_g_BANDBTC != 0.0 and qty_asks_g_BANDBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BANDBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BANDBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BANDBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BANDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BANDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BANDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BANDBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BANDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BANDBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BANDUSDT, '#', 'Покупаем', quantity_pair_a, 'BAND', 'за', price_a, 'USDT', 'по цене', price_asks_g_BANDUSDT) 
				print('Пара_B:', symbol_g_BANDBTC, '#', 'Продаем', quantity_pair_b, 'BAND', 'за', price_b, 'BTC', 'по цене', price_bids_g_BANDBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BANDUSDT_BANDBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BANDUSDT_BANDBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BANDUSDT != 0.0 and qty_bids_g_BANDUSDT != 0.0 and price_asks_g_BANDUSDT != 0.0 and qty_asks_g_BANDUSDT != 0.0 and price_bids_g_BANDBUSD != 0.0 and qty_bids_g_BANDBUSD != 0.0 and price_asks_g_BANDBUSD != 0.0 and qty_asks_g_BANDBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BANDBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BANDBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BANDBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BANDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BANDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BANDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BANDBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BANDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BANDBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BANDUSDT, '#', 'Покупаем', quantity_pair_a, 'BAND', 'за', price_a, 'USDT', 'по цене', price_asks_g_BANDUSDT) 
				print('Пара_B:', symbol_g_BANDBUSD, '#', 'Продаем', quantity_pair_b, 'BAND', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BANDBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BANDUSDT_BANDBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_XTZUSDT_XTZBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XTZUSDT != 0.0 and qty_bids_g_XTZUSDT != 0.0 and price_asks_g_XTZUSDT != 0.0 and qty_asks_g_XTZUSDT != 0.0 and price_bids_g_XTZBNB != 0.0 and qty_bids_g_XTZBNB != 0.0 and price_asks_g_XTZBNB != 0.0 and qty_asks_g_XTZBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XTZBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XTZBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XTZBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XTZUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XTZUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XTZUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XTZBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XTZUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XTZBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XTZUSDT, '#', 'Покупаем', quantity_pair_a, 'XTZ', 'за', price_a, 'USDT', 'по цене', price_asks_g_XTZUSDT) 
				print('Пара_B:', symbol_g_XTZBNB, '#', 'Продаем', quantity_pair_b, 'XTZ', 'за', price_b, 'BNB', 'по цене', price_bids_g_XTZBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XTZUSDT_XTZBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_XTZUSDT_XTZBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XTZUSDT != 0.0 and qty_bids_g_XTZUSDT != 0.0 and price_asks_g_XTZUSDT != 0.0 and qty_asks_g_XTZUSDT != 0.0 and price_bids_g_XTZBTC != 0.0 and qty_bids_g_XTZBTC != 0.0 and price_asks_g_XTZBTC != 0.0 and qty_asks_g_XTZBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XTZBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XTZBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XTZBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XTZUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XTZUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XTZUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XTZBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XTZUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XTZBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XTZUSDT, '#', 'Покупаем', quantity_pair_a, 'XTZ', 'за', price_a, 'USDT', 'по цене', price_asks_g_XTZUSDT) 
				print('Пара_B:', symbol_g_XTZBTC, '#', 'Продаем', quantity_pair_b, 'XTZ', 'за', price_b, 'BTC', 'по цене', price_bids_g_XTZBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XTZUSDT_XTZBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_XTZUSDT_XTZBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XTZUSDT != 0.0 and qty_bids_g_XTZUSDT != 0.0 and price_asks_g_XTZUSDT != 0.0 and qty_asks_g_XTZUSDT != 0.0 and price_bids_g_XTZBUSD != 0.0 and qty_bids_g_XTZBUSD != 0.0 and price_asks_g_XTZBUSD != 0.0 and qty_asks_g_XTZBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XTZBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XTZBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XTZBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XTZUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XTZUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XTZUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XTZBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XTZUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XTZBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XTZUSDT, '#', 'Покупаем', quantity_pair_a, 'XTZ', 'за', price_a, 'USDT', 'по цене', price_asks_g_XTZUSDT) 
				print('Пара_B:', symbol_g_XTZBUSD, '#', 'Продаем', quantity_pair_b, 'XTZ', 'за', price_b, 'BUSD', 'по цене', price_bids_g_XTZBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XTZUSDT_XTZBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_XTZUSDT_XTZETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XTZUSDT != 0.0 and qty_bids_g_XTZUSDT != 0.0 and price_asks_g_XTZUSDT != 0.0 and qty_asks_g_XTZUSDT != 0.0 and price_bids_g_XTZETH != 0.0 and qty_bids_g_XTZETH != 0.0 and price_asks_g_XTZETH != 0.0 and qty_asks_g_XTZETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XTZETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XTZETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XTZETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XTZUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XTZUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XTZUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XTZETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XTZUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XTZETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XTZUSDT, '#', 'Покупаем', quantity_pair_a, 'XTZ', 'за', price_a, 'USDT', 'по цене', price_asks_g_XTZUSDT) 
				print('Пара_B:', symbol_g_XTZETH, '#', 'Продаем', quantity_pair_b, 'XTZ', 'за', price_b, 'ETH', 'по цене', price_bids_g_XTZETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XTZUSDT_XTZETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_RENUSDT_RENBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RENUSDT != 0.0 and qty_bids_g_RENUSDT != 0.0 and price_asks_g_RENUSDT != 0.0 and qty_asks_g_RENUSDT != 0.0 and price_bids_g_RENBTC != 0.0 and qty_bids_g_RENBTC != 0.0 and price_asks_g_RENBTC != 0.0 and qty_asks_g_RENBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RENBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RENBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RENBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RENUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RENUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RENUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RENBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RENUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RENBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RENUSDT, '#', 'Покупаем', quantity_pair_a, 'REN', 'за', price_a, 'USDT', 'по цене', price_asks_g_RENUSDT) 
				print('Пара_B:', symbol_g_RENBTC, '#', 'Продаем', quantity_pair_b, 'REN', 'за', price_b, 'BTC', 'по цене', price_bids_g_RENBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RENUSDT_RENBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_RENUSDT_RENBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RENUSDT != 0.0 and qty_bids_g_RENUSDT != 0.0 and price_asks_g_RENUSDT != 0.0 and qty_asks_g_RENUSDT != 0.0 and price_bids_g_RENBUSD != 0.0 and qty_bids_g_RENBUSD != 0.0 and price_asks_g_RENBUSD != 0.0 and qty_asks_g_RENBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RENBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RENBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RENBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RENUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RENUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RENUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RENBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RENUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RENBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RENUSDT, '#', 'Покупаем', quantity_pair_a, 'REN', 'за', price_a, 'USDT', 'по цене', price_asks_g_RENUSDT) 
				print('Пара_B:', symbol_g_RENBUSD, '#', 'Продаем', quantity_pair_b, 'REN', 'за', price_b, 'BUSD', 'по цене', price_bids_g_RENBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RENUSDT_RENBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_RVNUSDT_RVNBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RVNUSDT != 0.0 and qty_bids_g_RVNUSDT != 0.0 and price_asks_g_RVNUSDT != 0.0 and qty_asks_g_RVNUSDT != 0.0 and price_bids_g_RVNBTC != 0.0 and qty_bids_g_RVNBTC != 0.0 and price_asks_g_RVNBTC != 0.0 and qty_asks_g_RVNBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RVNBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RVNBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RVNBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RVNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RVNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RVNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RVNBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RVNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RVNBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RVNUSDT, '#', 'Покупаем', quantity_pair_a, 'RVN', 'за', price_a, 'USDT', 'по цене', price_asks_g_RVNUSDT) 
				print('Пара_B:', symbol_g_RVNBTC, '#', 'Продаем', quantity_pair_b, 'RVN', 'за', price_b, 'BTC', 'по цене', price_bids_g_RVNBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RVNUSDT_RVNBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_RVNUSDT_RVNBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RVNUSDT != 0.0 and qty_bids_g_RVNUSDT != 0.0 and price_asks_g_RVNUSDT != 0.0 and qty_asks_g_RVNUSDT != 0.0 and price_bids_g_RVNBUSD != 0.0 and qty_bids_g_RVNBUSD != 0.0 and price_asks_g_RVNBUSD != 0.0 and qty_asks_g_RVNBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RVNBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RVNBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RVNBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RVNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RVNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RVNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RVNBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RVNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RVNBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RVNUSDT, '#', 'Покупаем', quantity_pair_a, 'RVN', 'за', price_a, 'USDT', 'по цене', price_asks_g_RVNUSDT) 
				print('Пара_B:', symbol_g_RVNBUSD, '#', 'Продаем', quantity_pair_b, 'RVN', 'за', price_b, 'BUSD', 'по цене', price_bids_g_RVNBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RVNUSDT_RVNBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_HBARUSDT_HBARBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HBARUSDT != 0.0 and qty_bids_g_HBARUSDT != 0.0 and price_asks_g_HBARUSDT != 0.0 and qty_asks_g_HBARUSDT != 0.0 and price_bids_g_HBARBNB != 0.0 and qty_bids_g_HBARBNB != 0.0 and price_asks_g_HBARBNB != 0.0 and qty_asks_g_HBARBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HBARBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HBARBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HBARBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HBARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HBARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HBARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HBARBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HBARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HBARBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HBARUSDT, '#', 'Покупаем', quantity_pair_a, 'HBAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_HBARUSDT) 
				print('Пара_B:', symbol_g_HBARBNB, '#', 'Продаем', quantity_pair_b, 'HBAR', 'за', price_b, 'BNB', 'по цене', price_bids_g_HBARBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HBARUSDT_HBARBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_HBARUSDT_HBARBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HBARUSDT != 0.0 and qty_bids_g_HBARUSDT != 0.0 and price_asks_g_HBARUSDT != 0.0 and qty_asks_g_HBARUSDT != 0.0 and price_bids_g_HBARBTC != 0.0 and qty_bids_g_HBARBTC != 0.0 and price_asks_g_HBARBTC != 0.0 and qty_asks_g_HBARBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HBARBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HBARBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HBARBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HBARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HBARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HBARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HBARBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HBARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HBARBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HBARUSDT, '#', 'Покупаем', quantity_pair_a, 'HBAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_HBARUSDT) 
				print('Пара_B:', symbol_g_HBARBTC, '#', 'Продаем', quantity_pair_b, 'HBAR', 'за', price_b, 'BTC', 'по цене', price_bids_g_HBARBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HBARUSDT_HBARBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_HBARUSDT_HBARBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HBARUSDT != 0.0 and qty_bids_g_HBARUSDT != 0.0 and price_asks_g_HBARUSDT != 0.0 and qty_asks_g_HBARUSDT != 0.0 and price_bids_g_HBARBUSD != 0.0 and qty_bids_g_HBARBUSD != 0.0 and price_asks_g_HBARBUSD != 0.0 and qty_asks_g_HBARBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HBARBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HBARBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HBARBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HBARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HBARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HBARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HBARBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HBARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HBARBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HBARUSDT, '#', 'Покупаем', quantity_pair_a, 'HBAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_HBARUSDT) 
				print('Пара_B:', symbol_g_HBARBUSD, '#', 'Продаем', quantity_pair_b, 'HBAR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_HBARBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HBARUSDT_HBARBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_NKNUSDT_NKNBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NKNUSDT != 0.0 and qty_bids_g_NKNUSDT != 0.0 and price_asks_g_NKNUSDT != 0.0 and qty_asks_g_NKNUSDT != 0.0 and price_bids_g_NKNBTC != 0.0 and qty_bids_g_NKNBTC != 0.0 and price_asks_g_NKNBTC != 0.0 and qty_asks_g_NKNBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NKNBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NKNBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NKNBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NKNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NKNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NKNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NKNBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NKNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NKNBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NKNUSDT, '#', 'Покупаем', quantity_pair_a, 'NKN', 'за', price_a, 'USDT', 'по цене', price_asks_g_NKNUSDT) 
				print('Пара_B:', symbol_g_NKNBTC, '#', 'Продаем', quantity_pair_b, 'NKN', 'за', price_b, 'BTC', 'по цене', price_bids_g_NKNBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NKNUSDT_NKNBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_NKNUSDT_NKNBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NKNUSDT != 0.0 and qty_bids_g_NKNUSDT != 0.0 and price_asks_g_NKNUSDT != 0.0 and qty_asks_g_NKNUSDT != 0.0 and price_bids_g_NKNBUSD != 0.0 and qty_bids_g_NKNBUSD != 0.0 and price_asks_g_NKNBUSD != 0.0 and qty_asks_g_NKNBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NKNBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NKNBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NKNBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NKNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NKNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NKNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NKNBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NKNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NKNBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NKNUSDT, '#', 'Покупаем', quantity_pair_a, 'NKN', 'за', price_a, 'USDT', 'по цене', price_asks_g_NKNUSDT) 
				print('Пара_B:', symbol_g_NKNBUSD, '#', 'Продаем', quantity_pair_b, 'NKN', 'за', price_b, 'BUSD', 'по цене', price_bids_g_NKNBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NKNUSDT_NKNBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_STXUSDT_STXBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STXUSDT != 0.0 and qty_bids_g_STXUSDT != 0.0 and price_asks_g_STXUSDT != 0.0 and qty_asks_g_STXUSDT != 0.0 and price_bids_g_STXBNB != 0.0 and qty_bids_g_STXBNB != 0.0 and price_asks_g_STXBNB != 0.0 and qty_asks_g_STXBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STXBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STXBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STXBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STXBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STXBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STXUSDT, '#', 'Покупаем', quantity_pair_a, 'STX', 'за', price_a, 'USDT', 'по цене', price_asks_g_STXUSDT) 
				print('Пара_B:', symbol_g_STXBNB, '#', 'Продаем', quantity_pair_b, 'STX', 'за', price_b, 'BNB', 'по цене', price_bids_g_STXBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STXUSDT_STXBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_STXUSDT_STXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STXUSDT != 0.0 and qty_bids_g_STXUSDT != 0.0 and price_asks_g_STXUSDT != 0.0 and qty_asks_g_STXUSDT != 0.0 and price_bids_g_STXBTC != 0.0 and qty_bids_g_STXBTC != 0.0 and price_asks_g_STXBTC != 0.0 and qty_asks_g_STXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STXUSDT, '#', 'Покупаем', quantity_pair_a, 'STX', 'за', price_a, 'USDT', 'по цене', price_asks_g_STXUSDT) 
				print('Пара_B:', symbol_g_STXBTC, '#', 'Продаем', quantity_pair_b, 'STX', 'за', price_b, 'BTC', 'по цене', price_bids_g_STXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STXUSDT_STXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_STXUSDT_STXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STXUSDT != 0.0 and qty_bids_g_STXUSDT != 0.0 and price_asks_g_STXUSDT != 0.0 and qty_asks_g_STXUSDT != 0.0 and price_bids_g_STXBUSD != 0.0 and qty_bids_g_STXBUSD != 0.0 and price_asks_g_STXBUSD != 0.0 and qty_asks_g_STXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STXUSDT, '#', 'Покупаем', quantity_pair_a, 'STX', 'за', price_a, 'USDT', 'по цене', price_asks_g_STXUSDT) 
				print('Пара_B:', symbol_g_STXBUSD, '#', 'Продаем', quantity_pair_b, 'STX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_STXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STXUSDT_STXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_KAVAUSDT_KAVABNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KAVAUSDT != 0.0 and qty_bids_g_KAVAUSDT != 0.0 and price_asks_g_KAVAUSDT != 0.0 and qty_asks_g_KAVAUSDT != 0.0 and price_bids_g_KAVABNB != 0.0 and qty_bids_g_KAVABNB != 0.0 and price_asks_g_KAVABNB != 0.0 and qty_asks_g_KAVABNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KAVABNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KAVABNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KAVABNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KAVAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KAVAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KAVAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KAVABNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KAVAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KAVABNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KAVAUSDT, '#', 'Покупаем', quantity_pair_a, 'KAVA', 'за', price_a, 'USDT', 'по цене', price_asks_g_KAVAUSDT) 
				print('Пара_B:', symbol_g_KAVABNB, '#', 'Продаем', quantity_pair_b, 'KAVA', 'за', price_b, 'BNB', 'по цене', price_bids_g_KAVABNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KAVAUSDT_KAVABNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_KAVAUSDT_KAVABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KAVAUSDT != 0.0 and qty_bids_g_KAVAUSDT != 0.0 and price_asks_g_KAVAUSDT != 0.0 and qty_asks_g_KAVAUSDT != 0.0 and price_bids_g_KAVABTC != 0.0 and qty_bids_g_KAVABTC != 0.0 and price_asks_g_KAVABTC != 0.0 and qty_asks_g_KAVABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KAVABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KAVABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KAVABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KAVAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KAVAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KAVAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KAVABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KAVAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KAVABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KAVAUSDT, '#', 'Покупаем', quantity_pair_a, 'KAVA', 'за', price_a, 'USDT', 'по цене', price_asks_g_KAVAUSDT) 
				print('Пара_B:', symbol_g_KAVABTC, '#', 'Продаем', quantity_pair_b, 'KAVA', 'за', price_b, 'BTC', 'по цене', price_bids_g_KAVABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KAVAUSDT_KAVABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_KAVAUSDT_KAVABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KAVAUSDT != 0.0 and qty_bids_g_KAVAUSDT != 0.0 and price_asks_g_KAVAUSDT != 0.0 and qty_asks_g_KAVAUSDT != 0.0 and price_bids_g_KAVABUSD != 0.0 and qty_bids_g_KAVABUSD != 0.0 and price_asks_g_KAVABUSD != 0.0 and qty_asks_g_KAVABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KAVABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KAVABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KAVABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KAVAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KAVAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KAVAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KAVABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KAVAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KAVABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KAVAUSDT, '#', 'Покупаем', quantity_pair_a, 'KAVA', 'за', price_a, 'USDT', 'по цене', price_asks_g_KAVAUSDT) 
				print('Пара_B:', symbol_g_KAVABUSD, '#', 'Продаем', quantity_pair_b, 'KAVA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_KAVABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KAVAUSDT_KAVABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_KAVAUSDT_KAVAETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KAVAUSDT != 0.0 and qty_bids_g_KAVAUSDT != 0.0 and price_asks_g_KAVAUSDT != 0.0 and qty_asks_g_KAVAUSDT != 0.0 and price_bids_g_KAVAETH != 0.0 and qty_bids_g_KAVAETH != 0.0 and price_asks_g_KAVAETH != 0.0 and qty_asks_g_KAVAETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KAVAETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KAVAETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KAVAETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KAVAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KAVAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KAVAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KAVAETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KAVAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KAVAETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KAVAUSDT, '#', 'Покупаем', quantity_pair_a, 'KAVA', 'за', price_a, 'USDT', 'по цене', price_asks_g_KAVAUSDT) 
				print('Пара_B:', symbol_g_KAVAETH, '#', 'Продаем', quantity_pair_b, 'KAVA', 'за', price_b, 'ETH', 'по цене', price_bids_g_KAVAETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KAVAUSDT_KAVAETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ARPAUSDT_ARPABNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ARPAUSDT != 0.0 and qty_bids_g_ARPAUSDT != 0.0 and price_asks_g_ARPAUSDT != 0.0 and qty_asks_g_ARPAUSDT != 0.0 and price_bids_g_ARPABNB != 0.0 and qty_bids_g_ARPABNB != 0.0 and price_asks_g_ARPABNB != 0.0 and qty_asks_g_ARPABNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ARPABNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ARPABNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ARPABNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ARPAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ARPAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ARPAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ARPABNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ARPAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ARPABNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ARPAUSDT, '#', 'Покупаем', quantity_pair_a, 'ARPA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ARPAUSDT) 
				print('Пара_B:', symbol_g_ARPABNB, '#', 'Продаем', quantity_pair_b, 'ARPA', 'за', price_b, 'BNB', 'по цене', price_bids_g_ARPABNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ARPAUSDT_ARPABNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ARPAUSDT_ARPABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ARPAUSDT != 0.0 and qty_bids_g_ARPAUSDT != 0.0 and price_asks_g_ARPAUSDT != 0.0 and qty_asks_g_ARPAUSDT != 0.0 and price_bids_g_ARPABTC != 0.0 and qty_bids_g_ARPABTC != 0.0 and price_asks_g_ARPABTC != 0.0 and qty_asks_g_ARPABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ARPABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ARPABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ARPABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ARPAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ARPAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ARPAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ARPABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ARPAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ARPABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ARPAUSDT, '#', 'Покупаем', quantity_pair_a, 'ARPA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ARPAUSDT) 
				print('Пара_B:', symbol_g_ARPABTC, '#', 'Продаем', quantity_pair_b, 'ARPA', 'за', price_b, 'BTC', 'по цене', price_bids_g_ARPABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ARPAUSDT_ARPABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ARPAUSDT_ARPABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ARPAUSDT != 0.0 and qty_bids_g_ARPAUSDT != 0.0 and price_asks_g_ARPAUSDT != 0.0 and qty_asks_g_ARPAUSDT != 0.0 and price_bids_g_ARPABUSD != 0.0 and qty_bids_g_ARPABUSD != 0.0 and price_asks_g_ARPABUSD != 0.0 and qty_asks_g_ARPABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ARPABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ARPABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ARPABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ARPAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ARPAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ARPAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ARPABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ARPAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ARPABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ARPAUSDT, '#', 'Покупаем', quantity_pair_a, 'ARPA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ARPAUSDT) 
				print('Пара_B:', symbol_g_ARPABUSD, '#', 'Продаем', quantity_pair_b, 'ARPA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ARPABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ARPAUSDT_ARPABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ARPAUSDT_ARPAETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ARPAUSDT != 0.0 and qty_bids_g_ARPAUSDT != 0.0 and price_asks_g_ARPAUSDT != 0.0 and qty_asks_g_ARPAUSDT != 0.0 and price_bids_g_ARPAETH != 0.0 and qty_bids_g_ARPAETH != 0.0 and price_asks_g_ARPAETH != 0.0 and qty_asks_g_ARPAETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ARPAETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ARPAETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ARPAETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ARPAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ARPAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ARPAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ARPAETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ARPAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ARPAETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ARPAUSDT, '#', 'Покупаем', quantity_pair_a, 'ARPA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ARPAUSDT) 
				print('Пара_B:', symbol_g_ARPAETH, '#', 'Продаем', quantity_pair_b, 'ARPA', 'за', price_b, 'ETH', 'по цене', price_bids_g_ARPAETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ARPAUSDT_ARPAETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_IOTXUSDT_IOTXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IOTXUSDT != 0.0 and qty_bids_g_IOTXUSDT != 0.0 and price_asks_g_IOTXUSDT != 0.0 and qty_asks_g_IOTXUSDT != 0.0 and price_bids_g_IOTXBTC != 0.0 and qty_bids_g_IOTXBTC != 0.0 and price_asks_g_IOTXBTC != 0.0 and qty_asks_g_IOTXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IOTXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IOTXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IOTXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IOTXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IOTXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IOTXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IOTXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IOTXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IOTXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IOTXUSDT, '#', 'Покупаем', quantity_pair_a, 'IOTX', 'за', price_a, 'USDT', 'по цене', price_asks_g_IOTXUSDT) 
				print('Пара_B:', symbol_g_IOTXBTC, '#', 'Продаем', quantity_pair_b, 'IOTX', 'за', price_b, 'BTC', 'по цене', price_bids_g_IOTXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IOTXUSDT_IOTXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_IOTXUSDT_IOTXETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IOTXUSDT != 0.0 and qty_bids_g_IOTXUSDT != 0.0 and price_asks_g_IOTXUSDT != 0.0 and qty_asks_g_IOTXUSDT != 0.0 and price_bids_g_IOTXETH != 0.0 and qty_bids_g_IOTXETH != 0.0 and price_asks_g_IOTXETH != 0.0 and qty_asks_g_IOTXETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IOTXETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IOTXETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IOTXETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IOTXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IOTXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IOTXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IOTXETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IOTXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IOTXETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IOTXUSDT, '#', 'Покупаем', quantity_pair_a, 'IOTX', 'за', price_a, 'USDT', 'по цене', price_asks_g_IOTXUSDT) 
				print('Пара_B:', symbol_g_IOTXETH, '#', 'Продаем', quantity_pair_b, 'IOTX', 'за', price_b, 'ETH', 'по цене', price_bids_g_IOTXETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IOTXUSDT_IOTXETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_IOTXUSDT_IOTXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IOTXUSDT != 0.0 and qty_bids_g_IOTXUSDT != 0.0 and price_asks_g_IOTXUSDT != 0.0 and qty_asks_g_IOTXUSDT != 0.0 and price_bids_g_IOTXBUSD != 0.0 and qty_bids_g_IOTXBUSD != 0.0 and price_asks_g_IOTXBUSD != 0.0 and qty_asks_g_IOTXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IOTXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IOTXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IOTXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IOTXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IOTXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IOTXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IOTXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IOTXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IOTXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IOTXUSDT, '#', 'Покупаем', quantity_pair_a, 'IOTX', 'за', price_a, 'USDT', 'по цене', price_asks_g_IOTXUSDT) 
				print('Пара_B:', symbol_g_IOTXBUSD, '#', 'Продаем', quantity_pair_b, 'IOTX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_IOTXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IOTXUSDT_IOTXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_RLCUSDT_RLCBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RLCUSDT != 0.0 and qty_bids_g_RLCUSDT != 0.0 and price_asks_g_RLCUSDT != 0.0 and qty_asks_g_RLCUSDT != 0.0 and price_bids_g_RLCBTC != 0.0 and qty_bids_g_RLCBTC != 0.0 and price_asks_g_RLCBTC != 0.0 and qty_asks_g_RLCBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RLCBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RLCBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RLCBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RLCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RLCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RLCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RLCBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RLCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RLCBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RLCUSDT, '#', 'Покупаем', quantity_pair_a, 'RLC', 'за', price_a, 'USDT', 'по цене', price_asks_g_RLCUSDT) 
				print('Пара_B:', symbol_g_RLCBTC, '#', 'Продаем', quantity_pair_b, 'RLC', 'за', price_b, 'BTC', 'по цене', price_bids_g_RLCBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RLCUSDT_RLCBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_RLCUSDT_RLCETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RLCUSDT != 0.0 and qty_bids_g_RLCUSDT != 0.0 and price_asks_g_RLCUSDT != 0.0 and qty_asks_g_RLCUSDT != 0.0 and price_bids_g_RLCETH != 0.0 and qty_bids_g_RLCETH != 0.0 and price_asks_g_RLCETH != 0.0 and qty_asks_g_RLCETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RLCETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RLCETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RLCETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RLCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RLCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RLCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RLCETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RLCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RLCETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RLCUSDT, '#', 'Покупаем', quantity_pair_a, 'RLC', 'за', price_a, 'USDT', 'по цене', price_asks_g_RLCUSDT) 
				print('Пара_B:', symbol_g_RLCETH, '#', 'Продаем', quantity_pair_b, 'RLC', 'за', price_b, 'ETH', 'по цене', price_bids_g_RLCETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RLCUSDT_RLCETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_CTXCUSDT_CTXCBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CTXCUSDT != 0.0 and qty_bids_g_CTXCUSDT != 0.0 and price_asks_g_CTXCUSDT != 0.0 and qty_asks_g_CTXCUSDT != 0.0 and price_bids_g_CTXCBTC != 0.0 and qty_bids_g_CTXCBTC != 0.0 and price_asks_g_CTXCBTC != 0.0 and qty_asks_g_CTXCBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CTXCBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CTXCBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CTXCBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CTXCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CTXCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CTXCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CTXCBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CTXCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CTXCBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CTXCUSDT, '#', 'Покупаем', quantity_pair_a, 'CTXC', 'за', price_a, 'USDT', 'по цене', price_asks_g_CTXCUSDT) 
				print('Пара_B:', symbol_g_CTXCBTC, '#', 'Продаем', quantity_pair_b, 'CTXC', 'за', price_b, 'BTC', 'по цене', price_bids_g_CTXCBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CTXCUSDT_CTXCBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CTXCUSDT_CTXCBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CTXCUSDT != 0.0 and qty_bids_g_CTXCUSDT != 0.0 and price_asks_g_CTXCUSDT != 0.0 and qty_asks_g_CTXCUSDT != 0.0 and price_bids_g_CTXCBUSD != 0.0 and qty_bids_g_CTXCBUSD != 0.0 and price_asks_g_CTXCBUSD != 0.0 and qty_asks_g_CTXCBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CTXCBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CTXCBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CTXCBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CTXCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CTXCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CTXCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CTXCBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CTXCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CTXCBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CTXCUSDT, '#', 'Покупаем', quantity_pair_a, 'CTXC', 'за', price_a, 'USDT', 'по цене', price_asks_g_CTXCUSDT) 
				print('Пара_B:', symbol_g_CTXCBUSD, '#', 'Продаем', quantity_pair_b, 'CTXC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CTXCBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CTXCUSDT_CTXCBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BCHUSDT_BCHBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BCHUSDT != 0.0 and qty_bids_g_BCHUSDT != 0.0 and price_asks_g_BCHUSDT != 0.0 and qty_asks_g_BCHUSDT != 0.0 and price_bids_g_BCHBNB != 0.0 and qty_bids_g_BCHBNB != 0.0 and price_asks_g_BCHBNB != 0.0 and qty_asks_g_BCHBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BCHBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BCHBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BCHBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BCHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BCHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BCHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BCHBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BCHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BCHBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BCHUSDT, '#', 'Покупаем', quantity_pair_a, 'BCH', 'за', price_a, 'USDT', 'по цене', price_asks_g_BCHUSDT) 
				print('Пара_B:', symbol_g_BCHBNB, '#', 'Продаем', quantity_pair_b, 'BCH', 'за', price_b, 'BNB', 'по цене', price_bids_g_BCHBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BCHUSDT_BCHBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_BCHUSDT_BCHBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BCHUSDT != 0.0 and qty_bids_g_BCHUSDT != 0.0 and price_asks_g_BCHUSDT != 0.0 and qty_asks_g_BCHUSDT != 0.0 and price_bids_g_BCHBTC != 0.0 and qty_bids_g_BCHBTC != 0.0 and price_asks_g_BCHBTC != 0.0 and qty_asks_g_BCHBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BCHBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BCHBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BCHBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BCHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BCHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BCHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BCHBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BCHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BCHBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BCHUSDT, '#', 'Покупаем', quantity_pair_a, 'BCH', 'за', price_a, 'USDT', 'по цене', price_asks_g_BCHUSDT) 
				print('Пара_B:', symbol_g_BCHBTC, '#', 'Продаем', quantity_pair_b, 'BCH', 'за', price_b, 'BTC', 'по цене', price_bids_g_BCHBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BCHUSDT_BCHBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BCHUSDT_BCHBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BCHUSDT != 0.0 and qty_bids_g_BCHUSDT != 0.0 and price_asks_g_BCHUSDT != 0.0 and qty_asks_g_BCHUSDT != 0.0 and price_bids_g_BCHBUSD != 0.0 and qty_bids_g_BCHBUSD != 0.0 and price_asks_g_BCHBUSD != 0.0 and qty_asks_g_BCHBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BCHBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BCHBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BCHBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BCHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BCHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BCHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BCHBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BCHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BCHBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BCHUSDT, '#', 'Покупаем', quantity_pair_a, 'BCH', 'за', price_a, 'USDT', 'по цене', price_asks_g_BCHUSDT) 
				print('Пара_B:', symbol_g_BCHBUSD, '#', 'Продаем', quantity_pair_b, 'BCH', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BCHBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BCHUSDT_BCHBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BCHUSDT_BCHEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BCHUSDT != 0.0 and qty_bids_g_BCHUSDT != 0.0 and price_asks_g_BCHUSDT != 0.0 and qty_asks_g_BCHUSDT != 0.0 and price_bids_g_BCHEUR != 0.0 and qty_bids_g_BCHEUR != 0.0 and price_asks_g_BCHEUR != 0.0 and qty_asks_g_BCHEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BCHEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BCHEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BCHEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BCHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BCHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BCHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BCHEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BCHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BCHEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BCHUSDT, '#', 'Покупаем', quantity_pair_a, 'BCH', 'за', price_a, 'USDT', 'по цене', price_asks_g_BCHUSDT) 
				print('Пара_B:', symbol_g_BCHEUR, '#', 'Продаем', quantity_pair_b, 'BCH', 'за', price_b, 'EUR', 'по цене', price_bids_g_BCHEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BCHUSDT_BCHEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_TROYUSDT_TROYBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TROYUSDT != 0.0 and qty_bids_g_TROYUSDT != 0.0 and price_asks_g_TROYUSDT != 0.0 and qty_asks_g_TROYUSDT != 0.0 and price_bids_g_TROYBUSD != 0.0 and qty_bids_g_TROYBUSD != 0.0 and price_asks_g_TROYBUSD != 0.0 and qty_asks_g_TROYBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TROYBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TROYBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TROYBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TROYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TROYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TROYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TROYBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TROYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TROYBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TROYUSDT, '#', 'Покупаем', quantity_pair_a, 'TROY', 'за', price_a, 'USDT', 'по цене', price_asks_g_TROYUSDT) 
				print('Пара_B:', symbol_g_TROYBUSD, '#', 'Продаем', quantity_pair_b, 'TROY', 'за', price_b, 'BUSD', 'по цене', price_bids_g_TROYBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TROYUSDT_TROYBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_VITEUSDT_VITEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_VITEUSDT != 0.0 and qty_bids_g_VITEUSDT != 0.0 and price_asks_g_VITEUSDT != 0.0 and qty_asks_g_VITEUSDT != 0.0 and price_bids_g_VITEBTC != 0.0 and qty_bids_g_VITEBTC != 0.0 and price_asks_g_VITEBTC != 0.0 and qty_asks_g_VITEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_VITEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_VITEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_VITEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_VITEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_VITEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_VITEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_VITEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='VITEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='VITEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_VITEUSDT, '#', 'Покупаем', quantity_pair_a, 'VITE', 'за', price_a, 'USDT', 'по цене', price_asks_g_VITEUSDT) 
				print('Пара_B:', symbol_g_VITEBTC, '#', 'Продаем', quantity_pair_b, 'VITE', 'за', price_b, 'BTC', 'по цене', price_bids_g_VITEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_VITEUSDT_VITEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_VITEUSDT_VITEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_VITEUSDT != 0.0 and qty_bids_g_VITEUSDT != 0.0 and price_asks_g_VITEUSDT != 0.0 and qty_asks_g_VITEUSDT != 0.0 and price_bids_g_VITEBUSD != 0.0 and qty_bids_g_VITEBUSD != 0.0 and price_asks_g_VITEBUSD != 0.0 and qty_asks_g_VITEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_VITEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_VITEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_VITEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_VITEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_VITEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_VITEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_VITEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='VITEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='VITEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_VITEUSDT, '#', 'Покупаем', quantity_pair_a, 'VITE', 'за', price_a, 'USDT', 'по цене', price_asks_g_VITEUSDT) 
				print('Пара_B:', symbol_g_VITEBUSD, '#', 'Продаем', quantity_pair_b, 'VITE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_VITEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_VITEUSDT_VITEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_EURUSDT_EURBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0 and price_bids_g_EURBUSD != 0.0 and qty_bids_g_EURBUSD != 0.0 and price_asks_g_EURBUSD != 0.0 and qty_asks_g_EURBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_EURBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_EURBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_EURBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_EURUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_EURUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_EURUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_EURBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='EURBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_EURUSDT, '#', 'Покупаем', quantity_pair_a, 'EUR', 'за', price_a, 'USDT', 'по цене', price_asks_g_EURUSDT) 
				print('Пара_B:', symbol_g_EURBUSD, '#', 'Продаем', quantity_pair_b, 'EUR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_EURBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_EURUSDT_EURBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_OGNUSDT_OGNBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OGNUSDT != 0.0 and qty_bids_g_OGNUSDT != 0.0 and price_asks_g_OGNUSDT != 0.0 and qty_asks_g_OGNUSDT != 0.0 and price_bids_g_OGNBTC != 0.0 and qty_bids_g_OGNBTC != 0.0 and price_asks_g_OGNBTC != 0.0 and qty_asks_g_OGNBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OGNBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OGNBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OGNBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OGNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OGNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OGNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OGNBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OGNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OGNBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OGNUSDT, '#', 'Покупаем', quantity_pair_a, 'OGN', 'за', price_a, 'USDT', 'по цене', price_asks_g_OGNUSDT) 
				print('Пара_B:', symbol_g_OGNBTC, '#', 'Продаем', quantity_pair_b, 'OGN', 'за', price_b, 'BTC', 'по цене', price_bids_g_OGNBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OGNUSDT_OGNBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_OGNUSDT_OGNBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OGNUSDT != 0.0 and qty_bids_g_OGNUSDT != 0.0 and price_asks_g_OGNUSDT != 0.0 and qty_asks_g_OGNUSDT != 0.0 and price_bids_g_OGNBUSD != 0.0 and qty_bids_g_OGNBUSD != 0.0 and price_asks_g_OGNBUSD != 0.0 and qty_asks_g_OGNBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OGNBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OGNBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OGNBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OGNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OGNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OGNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OGNBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OGNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OGNBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OGNUSDT, '#', 'Покупаем', quantity_pair_a, 'OGN', 'за', price_a, 'USDT', 'по цене', price_asks_g_OGNUSDT) 
				print('Пара_B:', symbol_g_OGNBUSD, '#', 'Продаем', quantity_pair_b, 'OGN', 'за', price_b, 'BUSD', 'по цене', price_bids_g_OGNBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OGNUSDT_OGNBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DREPUSDT_DREPBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DREPUSDT != 0.0 and qty_bids_g_DREPUSDT != 0.0 and price_asks_g_DREPUSDT != 0.0 and qty_asks_g_DREPUSDT != 0.0 and price_bids_g_DREPBTC != 0.0 and qty_bids_g_DREPBTC != 0.0 and price_asks_g_DREPBTC != 0.0 and qty_asks_g_DREPBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DREPBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DREPBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DREPBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DREPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DREPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DREPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DREPBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DREPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DREPBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DREPUSDT, '#', 'Покупаем', quantity_pair_a, 'DREP', 'за', price_a, 'USDT', 'по цене', price_asks_g_DREPUSDT) 
				print('Пара_B:', symbol_g_DREPBTC, '#', 'Продаем', quantity_pair_b, 'DREP', 'за', price_b, 'BTC', 'по цене', price_bids_g_DREPBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DREPUSDT_DREPBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_DREPUSDT_DREPBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DREPUSDT != 0.0 and qty_bids_g_DREPUSDT != 0.0 and price_asks_g_DREPUSDT != 0.0 and qty_asks_g_DREPUSDT != 0.0 and price_bids_g_DREPBUSD != 0.0 and qty_bids_g_DREPBUSD != 0.0 and price_asks_g_DREPBUSD != 0.0 and qty_asks_g_DREPBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DREPBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DREPBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DREPBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DREPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DREPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DREPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DREPBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DREPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DREPBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DREPUSDT, '#', 'Покупаем', quantity_pair_a, 'DREP', 'за', price_a, 'USDT', 'по цене', price_asks_g_DREPUSDT) 
				print('Пара_B:', symbol_g_DREPBUSD, '#', 'Продаем', quantity_pair_b, 'DREP', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DREPBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DREPUSDT_DREPBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_WRXUSDT_WRXBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WRXUSDT != 0.0 and qty_bids_g_WRXUSDT != 0.0 and price_asks_g_WRXUSDT != 0.0 and qty_asks_g_WRXUSDT != 0.0 and price_bids_g_WRXBNB != 0.0 and qty_bids_g_WRXBNB != 0.0 and price_asks_g_WRXBNB != 0.0 and qty_asks_g_WRXBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WRXBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WRXBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WRXBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WRXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WRXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WRXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WRXBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WRXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WRXBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WRXUSDT, '#', 'Покупаем', quantity_pair_a, 'WRX', 'за', price_a, 'USDT', 'по цене', price_asks_g_WRXUSDT) 
				print('Пара_B:', symbol_g_WRXBNB, '#', 'Продаем', quantity_pair_b, 'WRX', 'за', price_b, 'BNB', 'по цене', price_bids_g_WRXBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WRXUSDT_WRXBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_WRXUSDT_WRXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WRXUSDT != 0.0 and qty_bids_g_WRXUSDT != 0.0 and price_asks_g_WRXUSDT != 0.0 and qty_asks_g_WRXUSDT != 0.0 and price_bids_g_WRXBTC != 0.0 and qty_bids_g_WRXBTC != 0.0 and price_asks_g_WRXBTC != 0.0 and qty_asks_g_WRXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WRXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WRXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WRXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WRXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WRXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WRXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WRXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WRXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WRXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WRXUSDT, '#', 'Покупаем', quantity_pair_a, 'WRX', 'за', price_a, 'USDT', 'по цене', price_asks_g_WRXUSDT) 
				print('Пара_B:', symbol_g_WRXBTC, '#', 'Продаем', quantity_pair_b, 'WRX', 'за', price_b, 'BTC', 'по цене', price_bids_g_WRXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WRXUSDT_WRXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_WRXUSDT_WRXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WRXUSDT != 0.0 and qty_bids_g_WRXUSDT != 0.0 and price_asks_g_WRXUSDT != 0.0 and qty_asks_g_WRXUSDT != 0.0 and price_bids_g_WRXBUSD != 0.0 and qty_bids_g_WRXBUSD != 0.0 and price_asks_g_WRXBUSD != 0.0 and qty_asks_g_WRXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WRXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WRXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WRXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WRXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WRXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WRXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WRXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WRXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WRXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WRXUSDT, '#', 'Покупаем', quantity_pair_a, 'WRX', 'за', price_a, 'USDT', 'по цене', price_asks_g_WRXUSDT) 
				print('Пара_B:', symbol_g_WRXBUSD, '#', 'Продаем', quantity_pair_b, 'WRX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_WRXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WRXUSDT_WRXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BTSUSDT_BTSBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BTSUSDT != 0.0 and qty_bids_g_BTSUSDT != 0.0 and price_asks_g_BTSUSDT != 0.0 and qty_asks_g_BTSUSDT != 0.0 and price_bids_g_BTSBTC != 0.0 and qty_bids_g_BTSBTC != 0.0 and price_asks_g_BTSBTC != 0.0 and qty_asks_g_BTSBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BTSBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BTSBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BTSBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BTSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BTSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BTSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BTSBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BTSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BTSBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BTSUSDT, '#', 'Покупаем', quantity_pair_a, 'BTS', 'за', price_a, 'USDT', 'по цене', price_asks_g_BTSUSDT) 
				print('Пара_B:', symbol_g_BTSBTC, '#', 'Продаем', quantity_pair_b, 'BTS', 'за', price_b, 'BTC', 'по цене', price_bids_g_BTSBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BTSUSDT_BTSBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_LSKUSDT_LSKBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LSKUSDT != 0.0 and qty_bids_g_LSKUSDT != 0.0 and price_asks_g_LSKUSDT != 0.0 and qty_asks_g_LSKUSDT != 0.0 and price_bids_g_LSKBTC != 0.0 and qty_bids_g_LSKBTC != 0.0 and price_asks_g_LSKBTC != 0.0 and qty_asks_g_LSKBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LSKBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LSKBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LSKBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LSKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LSKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LSKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LSKBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LSKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LSKBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LSKUSDT, '#', 'Покупаем', quantity_pair_a, 'LSK', 'за', price_a, 'USDT', 'по цене', price_asks_g_LSKUSDT) 
				print('Пара_B:', symbol_g_LSKBTC, '#', 'Продаем', quantity_pair_b, 'LSK', 'за', price_b, 'BTC', 'по цене', price_bids_g_LSKBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LSKUSDT_LSKBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_LSKUSDT_LSKETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LSKUSDT != 0.0 and qty_bids_g_LSKUSDT != 0.0 and price_asks_g_LSKUSDT != 0.0 and qty_asks_g_LSKUSDT != 0.0 and price_bids_g_LSKETH != 0.0 and qty_bids_g_LSKETH != 0.0 and price_asks_g_LSKETH != 0.0 and qty_asks_g_LSKETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LSKETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LSKETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LSKETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LSKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LSKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LSKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LSKETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LSKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LSKETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LSKUSDT, '#', 'Покупаем', quantity_pair_a, 'LSK', 'за', price_a, 'USDT', 'по цене', price_asks_g_LSKUSDT) 
				print('Пара_B:', symbol_g_LSKETH, '#', 'Продаем', quantity_pair_b, 'LSK', 'за', price_b, 'ETH', 'по цене', price_bids_g_LSKETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LSKUSDT_LSKETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_LSKUSDT_LSKBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LSKUSDT != 0.0 and qty_bids_g_LSKUSDT != 0.0 and price_asks_g_LSKUSDT != 0.0 and qty_asks_g_LSKUSDT != 0.0 and price_bids_g_LSKBUSD != 0.0 and qty_bids_g_LSKBUSD != 0.0 and price_asks_g_LSKBUSD != 0.0 and qty_asks_g_LSKBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LSKBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LSKBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LSKBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LSKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LSKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LSKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LSKBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LSKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LSKBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LSKUSDT, '#', 'Покупаем', quantity_pair_a, 'LSK', 'за', price_a, 'USDT', 'по цене', price_asks_g_LSKUSDT) 
				print('Пара_B:', symbol_g_LSKBUSD, '#', 'Продаем', quantity_pair_b, 'LSK', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LSKBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LSKUSDT_LSKBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BNTUSDT_BNTETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BNTUSDT != 0.0 and qty_bids_g_BNTUSDT != 0.0 and price_asks_g_BNTUSDT != 0.0 and qty_asks_g_BNTUSDT != 0.0 and price_bids_g_BNTETH != 0.0 and qty_bids_g_BNTETH != 0.0 and price_asks_g_BNTETH != 0.0 and qty_asks_g_BNTETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BNTETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BNTETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BNTETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BNTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BNTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BNTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BNTETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BNTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BNTETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BNTUSDT, '#', 'Покупаем', quantity_pair_a, 'BNT', 'за', price_a, 'USDT', 'по цене', price_asks_g_BNTUSDT) 
				print('Пара_B:', symbol_g_BNTETH, '#', 'Продаем', quantity_pair_b, 'BNT', 'за', price_b, 'ETH', 'по цене', price_bids_g_BNTETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BNTUSDT_BNTETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_BNTUSDT_BNTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BNTUSDT != 0.0 and qty_bids_g_BNTUSDT != 0.0 and price_asks_g_BNTUSDT != 0.0 and qty_asks_g_BNTUSDT != 0.0 and price_bids_g_BNTBTC != 0.0 and qty_bids_g_BNTBTC != 0.0 and price_asks_g_BNTBTC != 0.0 and qty_asks_g_BNTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BNTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BNTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BNTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BNTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BNTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BNTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BNTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BNTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BNTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BNTUSDT, '#', 'Покупаем', quantity_pair_a, 'BNT', 'за', price_a, 'USDT', 'по цене', price_asks_g_BNTUSDT) 
				print('Пара_B:', symbol_g_BNTBTC, '#', 'Продаем', quantity_pair_b, 'BNT', 'за', price_b, 'BTC', 'по цене', price_bids_g_BNTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BNTUSDT_BNTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BNTUSDT_BNTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BNTUSDT != 0.0 and qty_bids_g_BNTUSDT != 0.0 and price_asks_g_BNTUSDT != 0.0 and qty_asks_g_BNTUSDT != 0.0 and price_bids_g_BNTBUSD != 0.0 and qty_bids_g_BNTBUSD != 0.0 and price_asks_g_BNTBUSD != 0.0 and qty_asks_g_BNTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BNTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BNTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BNTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BNTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BNTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BNTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BNTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BNTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BNTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BNTUSDT, '#', 'Покупаем', quantity_pair_a, 'BNT', 'за', price_a, 'USDT', 'по цене', price_asks_g_BNTUSDT) 
				print('Пара_B:', symbol_g_BNTBUSD, '#', 'Продаем', quantity_pair_b, 'BNT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BNTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BNTUSDT_BNTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_LTOUSDT_LTOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LTOUSDT != 0.0 and qty_bids_g_LTOUSDT != 0.0 and price_asks_g_LTOUSDT != 0.0 and qty_asks_g_LTOUSDT != 0.0 and price_bids_g_LTOBTC != 0.0 and qty_bids_g_LTOBTC != 0.0 and price_asks_g_LTOBTC != 0.0 and qty_asks_g_LTOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LTOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LTOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LTOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LTOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LTOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LTOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LTOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LTOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LTOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LTOUSDT, '#', 'Покупаем', quantity_pair_a, 'LTO', 'за', price_a, 'USDT', 'по цене', price_asks_g_LTOUSDT) 
				print('Пара_B:', symbol_g_LTOBTC, '#', 'Продаем', quantity_pair_b, 'LTO', 'за', price_b, 'BTC', 'по цене', price_bids_g_LTOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LTOUSDT_LTOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_LTOUSDT_LTOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LTOUSDT != 0.0 and qty_bids_g_LTOUSDT != 0.0 and price_asks_g_LTOUSDT != 0.0 and qty_asks_g_LTOUSDT != 0.0 and price_bids_g_LTOBUSD != 0.0 and qty_bids_g_LTOBUSD != 0.0 and price_asks_g_LTOBUSD != 0.0 and qty_asks_g_LTOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LTOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LTOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LTOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LTOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LTOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LTOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LTOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LTOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LTOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LTOUSDT, '#', 'Покупаем', quantity_pair_a, 'LTO', 'за', price_a, 'USDT', 'по цене', price_asks_g_LTOUSDT) 
				print('Пара_B:', symbol_g_LTOBUSD, '#', 'Продаем', quantity_pair_b, 'LTO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LTOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LTOUSDT_LTOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_AIONUSDT_AIONBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AIONUSDT != 0.0 and qty_bids_g_AIONUSDT != 0.0 and price_asks_g_AIONUSDT != 0.0 and qty_asks_g_AIONUSDT != 0.0 and price_bids_g_AIONBTC != 0.0 and qty_bids_g_AIONBTC != 0.0 and price_asks_g_AIONBTC != 0.0 and qty_asks_g_AIONBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AIONBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AIONBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AIONBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AIONUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AIONUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AIONUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AIONBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AIONUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AIONBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AIONUSDT, '#', 'Покупаем', quantity_pair_a, 'AION', 'за', price_a, 'USDT', 'по цене', price_asks_g_AIONUSDT) 
				print('Пара_B:', symbol_g_AIONBTC, '#', 'Продаем', quantity_pair_b, 'AION', 'за', price_b, 'BTC', 'по цене', price_bids_g_AIONBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AIONUSDT_AIONBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MBLUSDT_MBLBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MBLUSDT != 0.0 and qty_bids_g_MBLUSDT != 0.0 and price_asks_g_MBLUSDT != 0.0 and qty_asks_g_MBLUSDT != 0.0 and price_bids_g_MBLBUSD != 0.0 and qty_bids_g_MBLBUSD != 0.0 and price_asks_g_MBLBUSD != 0.0 and qty_asks_g_MBLBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MBLBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MBLBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MBLBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MBLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MBLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MBLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MBLBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MBLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MBLBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MBLUSDT, '#', 'Покупаем', quantity_pair_a, 'MBL', 'за', price_a, 'USDT', 'по цене', price_asks_g_MBLUSDT) 
				print('Пара_B:', symbol_g_MBLBUSD, '#', 'Продаем', quantity_pair_b, 'MBL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MBLBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MBLUSDT_MBLBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_COTIUSDT_COTIBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_COTIUSDT != 0.0 and qty_bids_g_COTIUSDT != 0.0 and price_asks_g_COTIUSDT != 0.0 and qty_asks_g_COTIUSDT != 0.0 and price_bids_g_COTIBNB != 0.0 and qty_bids_g_COTIBNB != 0.0 and price_asks_g_COTIBNB != 0.0 and qty_asks_g_COTIBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_COTIBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_COTIBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_COTIBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_COTIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_COTIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_COTIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_COTIBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='COTIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='COTIBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_COTIUSDT, '#', 'Покупаем', quantity_pair_a, 'COTI', 'за', price_a, 'USDT', 'по цене', price_asks_g_COTIUSDT) 
				print('Пара_B:', symbol_g_COTIBNB, '#', 'Продаем', quantity_pair_b, 'COTI', 'за', price_b, 'BNB', 'по цене', price_bids_g_COTIBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_COTIUSDT_COTIBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_COTIUSDT_COTIBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_COTIUSDT != 0.0 and qty_bids_g_COTIUSDT != 0.0 and price_asks_g_COTIUSDT != 0.0 and qty_asks_g_COTIUSDT != 0.0 and price_bids_g_COTIBTC != 0.0 and qty_bids_g_COTIBTC != 0.0 and price_asks_g_COTIBTC != 0.0 and qty_asks_g_COTIBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_COTIBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_COTIBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_COTIBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_COTIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_COTIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_COTIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_COTIBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='COTIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='COTIBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_COTIUSDT, '#', 'Покупаем', quantity_pair_a, 'COTI', 'за', price_a, 'USDT', 'по цене', price_asks_g_COTIUSDT) 
				print('Пара_B:', symbol_g_COTIBTC, '#', 'Продаем', quantity_pair_b, 'COTI', 'за', price_b, 'BTC', 'по цене', price_bids_g_COTIBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_COTIUSDT_COTIBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_COTIUSDT_COTIBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_COTIUSDT != 0.0 and qty_bids_g_COTIUSDT != 0.0 and price_asks_g_COTIUSDT != 0.0 and qty_asks_g_COTIUSDT != 0.0 and price_bids_g_COTIBUSD != 0.0 and qty_bids_g_COTIBUSD != 0.0 and price_asks_g_COTIBUSD != 0.0 and qty_asks_g_COTIBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_COTIBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_COTIBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_COTIBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_COTIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_COTIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_COTIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_COTIBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='COTIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='COTIBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_COTIUSDT, '#', 'Покупаем', quantity_pair_a, 'COTI', 'за', price_a, 'USDT', 'по цене', price_asks_g_COTIUSDT) 
				print('Пара_B:', symbol_g_COTIBUSD, '#', 'Продаем', quantity_pair_b, 'COTI', 'за', price_b, 'BUSD', 'по цене', price_bids_g_COTIBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_COTIUSDT_COTIBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_STPTUSDT_STPTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STPTUSDT != 0.0 and qty_bids_g_STPTUSDT != 0.0 and price_asks_g_STPTUSDT != 0.0 and qty_asks_g_STPTUSDT != 0.0 and price_bids_g_STPTBTC != 0.0 and qty_bids_g_STPTBTC != 0.0 and price_asks_g_STPTBTC != 0.0 and qty_asks_g_STPTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STPTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STPTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STPTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STPTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STPTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STPTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STPTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STPTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STPTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STPTUSDT, '#', 'Покупаем', quantity_pair_a, 'STPT', 'за', price_a, 'USDT', 'по цене', price_asks_g_STPTUSDT) 
				print('Пара_B:', symbol_g_STPTBTC, '#', 'Продаем', quantity_pair_b, 'STPT', 'за', price_b, 'BTC', 'по цене', price_bids_g_STPTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STPTUSDT_STPTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_STPTUSDT_STPTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STPTUSDT != 0.0 and qty_bids_g_STPTUSDT != 0.0 and price_asks_g_STPTUSDT != 0.0 and qty_asks_g_STPTUSDT != 0.0 and price_bids_g_STPTBUSD != 0.0 and qty_bids_g_STPTBUSD != 0.0 and price_asks_g_STPTBUSD != 0.0 and qty_asks_g_STPTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STPTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STPTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STPTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STPTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STPTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STPTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STPTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STPTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STPTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STPTUSDT, '#', 'Покупаем', quantity_pair_a, 'STPT', 'за', price_a, 'USDT', 'по цене', price_asks_g_STPTUSDT) 
				print('Пара_B:', symbol_g_STPTBUSD, '#', 'Продаем', quantity_pair_b, 'STPT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_STPTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STPTUSDT_STPTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_WTCUSDT_WTCBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WTCUSDT != 0.0 and qty_bids_g_WTCUSDT != 0.0 and price_asks_g_WTCUSDT != 0.0 and qty_asks_g_WTCUSDT != 0.0 and price_bids_g_WTCBTC != 0.0 and qty_bids_g_WTCBTC != 0.0 and price_asks_g_WTCBTC != 0.0 and qty_asks_g_WTCBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WTCBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WTCBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WTCBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WTCBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WTCBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WTCUSDT, '#', 'Покупаем', quantity_pair_a, 'WTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_WTCUSDT) 
				print('Пара_B:', symbol_g_WTCBTC, '#', 'Продаем', quantity_pair_b, 'WTC', 'за', price_b, 'BTC', 'по цене', price_bids_g_WTCBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WTCUSDT_WTCBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_DATAUSDT_DATABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DATAUSDT != 0.0 and qty_bids_g_DATAUSDT != 0.0 and price_asks_g_DATAUSDT != 0.0 and qty_asks_g_DATAUSDT != 0.0 and price_bids_g_DATABTC != 0.0 and qty_bids_g_DATABTC != 0.0 and price_asks_g_DATABTC != 0.0 and qty_asks_g_DATABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DATABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DATABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DATABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DATAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DATAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DATAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DATABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DATAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DATABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DATAUSDT, '#', 'Покупаем', quantity_pair_a, 'DATA', 'за', price_a, 'USDT', 'по цене', price_asks_g_DATAUSDT) 
				print('Пара_B:', symbol_g_DATABTC, '#', 'Продаем', quantity_pair_b, 'DATA', 'за', price_b, 'BTC', 'по цене', price_bids_g_DATABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DATAUSDT_DATABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_DATAUSDT_DATABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DATAUSDT != 0.0 and qty_bids_g_DATAUSDT != 0.0 and price_asks_g_DATAUSDT != 0.0 and qty_asks_g_DATAUSDT != 0.0 and price_bids_g_DATABUSD != 0.0 and qty_bids_g_DATABUSD != 0.0 and price_asks_g_DATABUSD != 0.0 and qty_asks_g_DATABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DATABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DATABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DATABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DATAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DATAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DATAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DATABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DATAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DATABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DATAUSDT, '#', 'Покупаем', quantity_pair_a, 'DATA', 'за', price_a, 'USDT', 'по цене', price_asks_g_DATAUSDT) 
				print('Пара_B:', symbol_g_DATABUSD, '#', 'Продаем', quantity_pair_b, 'DATA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DATABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DATAUSDT_DATABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SOLUSDT_SOLBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SOLUSDT != 0.0 and qty_bids_g_SOLUSDT != 0.0 and price_asks_g_SOLUSDT != 0.0 and qty_asks_g_SOLUSDT != 0.0 and price_bids_g_SOLBNB != 0.0 and qty_bids_g_SOLBNB != 0.0 and price_asks_g_SOLBNB != 0.0 and qty_asks_g_SOLBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SOLBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SOLBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SOLBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SOLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SOLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SOLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SOLBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SOLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SOLBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SOLUSDT, '#', 'Покупаем', quantity_pair_a, 'SOL', 'за', price_a, 'USDT', 'по цене', price_asks_g_SOLUSDT) 
				print('Пара_B:', symbol_g_SOLBNB, '#', 'Продаем', quantity_pair_b, 'SOL', 'за', price_b, 'BNB', 'по цене', price_bids_g_SOLBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SOLUSDT_SOLBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_SOLUSDT_SOLBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SOLUSDT != 0.0 and qty_bids_g_SOLUSDT != 0.0 and price_asks_g_SOLUSDT != 0.0 and qty_asks_g_SOLUSDT != 0.0 and price_bids_g_SOLBTC != 0.0 and qty_bids_g_SOLBTC != 0.0 and price_asks_g_SOLBTC != 0.0 and qty_asks_g_SOLBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SOLBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SOLBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SOLBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SOLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SOLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SOLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SOLBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SOLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SOLBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SOLUSDT, '#', 'Покупаем', quantity_pair_a, 'SOL', 'за', price_a, 'USDT', 'по цене', price_asks_g_SOLUSDT) 
				print('Пара_B:', symbol_g_SOLBTC, '#', 'Продаем', quantity_pair_b, 'SOL', 'за', price_b, 'BTC', 'по цене', price_bids_g_SOLBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SOLUSDT_SOLBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_SOLUSDT_SOLBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SOLUSDT != 0.0 and qty_bids_g_SOLUSDT != 0.0 and price_asks_g_SOLUSDT != 0.0 and qty_asks_g_SOLUSDT != 0.0 and price_bids_g_SOLBUSD != 0.0 and qty_bids_g_SOLBUSD != 0.0 and price_asks_g_SOLBUSD != 0.0 and qty_asks_g_SOLBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SOLBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SOLBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SOLBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SOLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SOLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SOLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SOLBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SOLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SOLBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SOLUSDT, '#', 'Покупаем', quantity_pair_a, 'SOL', 'за', price_a, 'USDT', 'по цене', price_asks_g_SOLUSDT) 
				print('Пара_B:', symbol_g_SOLBUSD, '#', 'Продаем', quantity_pair_b, 'SOL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SOLBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SOLUSDT_SOLBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SOLUSDT_SOLEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SOLUSDT != 0.0 and qty_bids_g_SOLUSDT != 0.0 and price_asks_g_SOLUSDT != 0.0 and qty_asks_g_SOLUSDT != 0.0 and price_bids_g_SOLEUR != 0.0 and qty_bids_g_SOLEUR != 0.0 and price_asks_g_SOLEUR != 0.0 and qty_asks_g_SOLEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SOLEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SOLEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SOLEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SOLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SOLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SOLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SOLEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SOLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SOLEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SOLUSDT, '#', 'Покупаем', quantity_pair_a, 'SOL', 'за', price_a, 'USDT', 'по цене', price_asks_g_SOLUSDT) 
				print('Пара_B:', symbol_g_SOLEUR, '#', 'Продаем', quantity_pair_b, 'SOL', 'за', price_b, 'EUR', 'по цене', price_bids_g_SOLEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SOLUSDT_SOLEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_SOLUSDT_SOLGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SOLUSDT != 0.0 and qty_bids_g_SOLUSDT != 0.0 and price_asks_g_SOLUSDT != 0.0 and qty_asks_g_SOLUSDT != 0.0 and price_bids_g_SOLGBP != 0.0 and qty_bids_g_SOLGBP != 0.0 and price_asks_g_SOLGBP != 0.0 and qty_asks_g_SOLGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SOLGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SOLGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SOLGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SOLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SOLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SOLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SOLGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SOLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SOLGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SOLUSDT, '#', 'Покупаем', quantity_pair_a, 'SOL', 'за', price_a, 'USDT', 'по цене', price_asks_g_SOLUSDT) 
				print('Пара_B:', symbol_g_SOLGBP, '#', 'Продаем', quantity_pair_b, 'SOL', 'за', price_b, 'GBP', 'по цене', price_bids_g_SOLGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SOLUSDT_SOLGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_SOLUSDT_SOLAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SOLUSDT != 0.0 and qty_bids_g_SOLUSDT != 0.0 and price_asks_g_SOLUSDT != 0.0 and qty_asks_g_SOLUSDT != 0.0 and price_bids_g_SOLAUD != 0.0 and qty_bids_g_SOLAUD != 0.0 and price_asks_g_SOLAUD != 0.0 and qty_asks_g_SOLAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SOLAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SOLAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SOLAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SOLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SOLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SOLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SOLAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SOLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SOLAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SOLUSDT, '#', 'Покупаем', quantity_pair_a, 'SOL', 'за', price_a, 'USDT', 'по цене', price_asks_g_SOLUSDT) 
				print('Пара_B:', symbol_g_SOLAUD, '#', 'Продаем', quantity_pair_b, 'SOL', 'за', price_b, 'AUD', 'по цене', price_bids_g_SOLAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SOLUSDT_SOLAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_SOLUSDT_SOLETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SOLUSDT != 0.0 and qty_bids_g_SOLUSDT != 0.0 and price_asks_g_SOLUSDT != 0.0 and qty_asks_g_SOLUSDT != 0.0 and price_bids_g_SOLETH != 0.0 and qty_bids_g_SOLETH != 0.0 and price_asks_g_SOLETH != 0.0 and qty_asks_g_SOLETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SOLETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SOLETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SOLETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SOLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SOLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SOLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SOLETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SOLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SOLETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SOLUSDT, '#', 'Покупаем', quantity_pair_a, 'SOL', 'за', price_a, 'USDT', 'по цене', price_asks_g_SOLUSDT) 
				print('Пара_B:', symbol_g_SOLETH, '#', 'Продаем', quantity_pair_b, 'SOL', 'за', price_b, 'ETH', 'по цене', price_bids_g_SOLETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SOLUSDT_SOLETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_CTSIUSDT_CTSIBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CTSIUSDT != 0.0 and qty_bids_g_CTSIUSDT != 0.0 and price_asks_g_CTSIUSDT != 0.0 and qty_asks_g_CTSIUSDT != 0.0 and price_bids_g_CTSIBTC != 0.0 and qty_bids_g_CTSIBTC != 0.0 and price_asks_g_CTSIBTC != 0.0 and qty_asks_g_CTSIBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CTSIBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CTSIBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CTSIBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CTSIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CTSIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CTSIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CTSIBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CTSIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CTSIBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CTSIUSDT, '#', 'Покупаем', quantity_pair_a, 'CTSI', 'за', price_a, 'USDT', 'по цене', price_asks_g_CTSIUSDT) 
				print('Пара_B:', symbol_g_CTSIBTC, '#', 'Продаем', quantity_pair_b, 'CTSI', 'за', price_b, 'BTC', 'по цене', price_bids_g_CTSIBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CTSIUSDT_CTSIBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CTSIUSDT_CTSIBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CTSIUSDT != 0.0 and qty_bids_g_CTSIUSDT != 0.0 and price_asks_g_CTSIUSDT != 0.0 and qty_asks_g_CTSIUSDT != 0.0 and price_bids_g_CTSIBNB != 0.0 and qty_bids_g_CTSIBNB != 0.0 and price_asks_g_CTSIBNB != 0.0 and qty_asks_g_CTSIBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CTSIBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CTSIBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CTSIBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CTSIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CTSIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CTSIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CTSIBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CTSIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CTSIBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CTSIUSDT, '#', 'Покупаем', quantity_pair_a, 'CTSI', 'за', price_a, 'USDT', 'по цене', price_asks_g_CTSIUSDT) 
				print('Пара_B:', symbol_g_CTSIBNB, '#', 'Продаем', quantity_pair_b, 'CTSI', 'за', price_b, 'BNB', 'по цене', price_bids_g_CTSIBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CTSIUSDT_CTSIBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_CTSIUSDT_CTSIBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CTSIUSDT != 0.0 and qty_bids_g_CTSIUSDT != 0.0 and price_asks_g_CTSIUSDT != 0.0 and qty_asks_g_CTSIUSDT != 0.0 and price_bids_g_CTSIBUSD != 0.0 and qty_bids_g_CTSIBUSD != 0.0 and price_asks_g_CTSIBUSD != 0.0 and qty_asks_g_CTSIBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CTSIBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CTSIBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CTSIBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CTSIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CTSIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CTSIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CTSIBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CTSIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CTSIBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CTSIUSDT, '#', 'Покупаем', quantity_pair_a, 'CTSI', 'за', price_a, 'USDT', 'по цене', price_asks_g_CTSIUSDT) 
				print('Пара_B:', symbol_g_CTSIBUSD, '#', 'Продаем', quantity_pair_b, 'CTSI', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CTSIBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CTSIUSDT_CTSIBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_HIVEUSDT_HIVEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HIVEUSDT != 0.0 and qty_bids_g_HIVEUSDT != 0.0 and price_asks_g_HIVEUSDT != 0.0 and qty_asks_g_HIVEUSDT != 0.0 and price_bids_g_HIVEBTC != 0.0 and qty_bids_g_HIVEBTC != 0.0 and price_asks_g_HIVEBTC != 0.0 and qty_asks_g_HIVEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HIVEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HIVEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HIVEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HIVEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HIVEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HIVEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HIVEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HIVEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HIVEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HIVEUSDT, '#', 'Покупаем', quantity_pair_a, 'HIVE', 'за', price_a, 'USDT', 'по цене', price_asks_g_HIVEUSDT) 
				print('Пара_B:', symbol_g_HIVEBTC, '#', 'Продаем', quantity_pair_b, 'HIVE', 'за', price_b, 'BTC', 'по цене', price_bids_g_HIVEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HIVEUSDT_HIVEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_HIVEUSDT_HIVEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HIVEUSDT != 0.0 and qty_bids_g_HIVEUSDT != 0.0 and price_asks_g_HIVEUSDT != 0.0 and qty_asks_g_HIVEUSDT != 0.0 and price_bids_g_HIVEBUSD != 0.0 and qty_bids_g_HIVEBUSD != 0.0 and price_asks_g_HIVEBUSD != 0.0 and qty_asks_g_HIVEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HIVEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HIVEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HIVEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HIVEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HIVEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HIVEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HIVEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HIVEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HIVEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HIVEUSDT, '#', 'Покупаем', quantity_pair_a, 'HIVE', 'за', price_a, 'USDT', 'по цене', price_asks_g_HIVEUSDT) 
				print('Пара_B:', symbol_g_HIVEBUSD, '#', 'Продаем', quantity_pair_b, 'HIVE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_HIVEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HIVEUSDT_HIVEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_CHRUSDT_CHRBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CHRUSDT != 0.0 and qty_bids_g_CHRUSDT != 0.0 and price_asks_g_CHRUSDT != 0.0 and qty_asks_g_CHRUSDT != 0.0 and price_bids_g_CHRBNB != 0.0 and qty_bids_g_CHRBNB != 0.0 and price_asks_g_CHRBNB != 0.0 and qty_asks_g_CHRBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CHRBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CHRBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CHRBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CHRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CHRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CHRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CHRBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CHRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CHRBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CHRUSDT, '#', 'Покупаем', quantity_pair_a, 'CHR', 'за', price_a, 'USDT', 'по цене', price_asks_g_CHRUSDT) 
				print('Пара_B:', symbol_g_CHRBNB, '#', 'Продаем', quantity_pair_b, 'CHR', 'за', price_b, 'BNB', 'по цене', price_bids_g_CHRBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CHRUSDT_CHRBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_CHRUSDT_CHRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CHRUSDT != 0.0 and qty_bids_g_CHRUSDT != 0.0 and price_asks_g_CHRUSDT != 0.0 and qty_asks_g_CHRUSDT != 0.0 and price_bids_g_CHRBTC != 0.0 and qty_bids_g_CHRBTC != 0.0 and price_asks_g_CHRBTC != 0.0 and qty_asks_g_CHRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CHRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CHRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CHRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CHRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CHRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CHRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CHRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CHRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CHRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CHRUSDT, '#', 'Покупаем', quantity_pair_a, 'CHR', 'за', price_a, 'USDT', 'по цене', price_asks_g_CHRUSDT) 
				print('Пара_B:', symbol_g_CHRBTC, '#', 'Продаем', quantity_pair_b, 'CHR', 'за', price_b, 'BTC', 'по цене', price_bids_g_CHRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CHRUSDT_CHRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CHRUSDT_CHRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CHRUSDT != 0.0 and qty_bids_g_CHRUSDT != 0.0 and price_asks_g_CHRUSDT != 0.0 and qty_asks_g_CHRUSDT != 0.0 and price_bids_g_CHRBUSD != 0.0 and qty_bids_g_CHRBUSD != 0.0 and price_asks_g_CHRBUSD != 0.0 and qty_asks_g_CHRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CHRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CHRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CHRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CHRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CHRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CHRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CHRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CHRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CHRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CHRUSDT, '#', 'Покупаем', quantity_pair_a, 'CHR', 'за', price_a, 'USDT', 'по цене', price_asks_g_CHRUSDT) 
				print('Пара_B:', symbol_g_CHRBUSD, '#', 'Продаем', quantity_pair_b, 'CHR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CHRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CHRUSDT_CHRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_CHRUSDT_CHRETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CHRUSDT != 0.0 and qty_bids_g_CHRUSDT != 0.0 and price_asks_g_CHRUSDT != 0.0 and qty_asks_g_CHRUSDT != 0.0 and price_bids_g_CHRETH != 0.0 and qty_bids_g_CHRETH != 0.0 and price_asks_g_CHRETH != 0.0 and qty_asks_g_CHRETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CHRETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CHRETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CHRETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CHRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CHRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CHRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CHRETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CHRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CHRETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CHRUSDT, '#', 'Покупаем', quantity_pair_a, 'CHR', 'за', price_a, 'USDT', 'по цене', price_asks_g_CHRUSDT) 
				print('Пара_B:', symbol_g_CHRETH, '#', 'Продаем', quantity_pair_b, 'CHR', 'за', price_b, 'ETH', 'по цене', price_bids_g_CHRETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CHRUSDT_CHRETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ARDRUSDT_ARDRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ARDRUSDT != 0.0 and qty_bids_g_ARDRUSDT != 0.0 and price_asks_g_ARDRUSDT != 0.0 and qty_asks_g_ARDRUSDT != 0.0 and price_bids_g_ARDRBTC != 0.0 and qty_bids_g_ARDRBTC != 0.0 and price_asks_g_ARDRBTC != 0.0 and qty_asks_g_ARDRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ARDRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ARDRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ARDRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ARDRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ARDRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ARDRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ARDRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ARDRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ARDRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ARDRUSDT, '#', 'Покупаем', quantity_pair_a, 'ARDR', 'за', price_a, 'USDT', 'по цене', price_asks_g_ARDRUSDT) 
				print('Пара_B:', symbol_g_ARDRBTC, '#', 'Продаем', quantity_pair_b, 'ARDR', 'за', price_b, 'BTC', 'по цене', price_bids_g_ARDRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ARDRUSDT_ARDRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MDTUSDT_MDTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MDTUSDT != 0.0 and qty_bids_g_MDTUSDT != 0.0 and price_asks_g_MDTUSDT != 0.0 and qty_asks_g_MDTUSDT != 0.0 and price_bids_g_MDTBTC != 0.0 and qty_bids_g_MDTBTC != 0.0 and price_asks_g_MDTBTC != 0.0 and qty_asks_g_MDTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MDTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MDTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MDTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MDTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MDTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MDTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MDTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MDTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MDTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MDTUSDT, '#', 'Покупаем', quantity_pair_a, 'MDT', 'за', price_a, 'USDT', 'по цене', price_asks_g_MDTUSDT) 
				print('Пара_B:', symbol_g_MDTBTC, '#', 'Продаем', quantity_pair_b, 'MDT', 'за', price_b, 'BTC', 'по цене', price_bids_g_MDTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MDTUSDT_MDTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MDTUSDT_MDTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MDTUSDT != 0.0 and qty_bids_g_MDTUSDT != 0.0 and price_asks_g_MDTUSDT != 0.0 and qty_asks_g_MDTUSDT != 0.0 and price_bids_g_MDTBUSD != 0.0 and qty_bids_g_MDTBUSD != 0.0 and price_asks_g_MDTBUSD != 0.0 and qty_asks_g_MDTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MDTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MDTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MDTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MDTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MDTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MDTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MDTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MDTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MDTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MDTUSDT, '#', 'Покупаем', quantity_pair_a, 'MDT', 'за', price_a, 'USDT', 'по цене', price_asks_g_MDTUSDT) 
				print('Пара_B:', symbol_g_MDTBUSD, '#', 'Продаем', quantity_pair_b, 'MDT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MDTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MDTUSDT_MDTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_STMXUSDT_STMXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STMXUSDT != 0.0 and qty_bids_g_STMXUSDT != 0.0 and price_asks_g_STMXUSDT != 0.0 and qty_asks_g_STMXUSDT != 0.0 and price_bids_g_STMXBTC != 0.0 and qty_bids_g_STMXBTC != 0.0 and price_asks_g_STMXBTC != 0.0 and qty_asks_g_STMXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STMXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STMXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STMXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STMXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STMXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STMXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STMXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STMXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STMXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STMXUSDT, '#', 'Покупаем', quantity_pair_a, 'STMX', 'за', price_a, 'USDT', 'по цене', price_asks_g_STMXUSDT) 
				print('Пара_B:', symbol_g_STMXBTC, '#', 'Продаем', quantity_pair_b, 'STMX', 'за', price_b, 'BTC', 'по цене', price_bids_g_STMXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STMXUSDT_STMXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_STMXUSDT_STMXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STMXUSDT != 0.0 and qty_bids_g_STMXUSDT != 0.0 and price_asks_g_STMXUSDT != 0.0 and qty_asks_g_STMXUSDT != 0.0 and price_bids_g_STMXBUSD != 0.0 and qty_bids_g_STMXBUSD != 0.0 and price_asks_g_STMXBUSD != 0.0 and qty_asks_g_STMXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STMXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STMXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STMXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STMXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STMXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STMXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STMXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STMXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STMXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STMXUSDT, '#', 'Покупаем', quantity_pair_a, 'STMX', 'за', price_a, 'USDT', 'по цене', price_asks_g_STMXUSDT) 
				print('Пара_B:', symbol_g_STMXBUSD, '#', 'Продаем', quantity_pair_b, 'STMX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_STMXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STMXUSDT_STMXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_KNCUSDT_KNCBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KNCUSDT != 0.0 and qty_bids_g_KNCUSDT != 0.0 and price_asks_g_KNCUSDT != 0.0 and qty_asks_g_KNCUSDT != 0.0 and price_bids_g_KNCBTC != 0.0 and qty_bids_g_KNCBTC != 0.0 and price_asks_g_KNCBTC != 0.0 and qty_asks_g_KNCBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KNCBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KNCBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KNCBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KNCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KNCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KNCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KNCBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KNCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KNCBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KNCUSDT, '#', 'Покупаем', quantity_pair_a, 'KNC', 'за', price_a, 'USDT', 'по цене', price_asks_g_KNCUSDT) 
				print('Пара_B:', symbol_g_KNCBTC, '#', 'Продаем', quantity_pair_b, 'KNC', 'за', price_b, 'BTC', 'по цене', price_bids_g_KNCBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KNCUSDT_KNCBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_KNCUSDT_KNCETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KNCUSDT != 0.0 and qty_bids_g_KNCUSDT != 0.0 and price_asks_g_KNCUSDT != 0.0 and qty_asks_g_KNCUSDT != 0.0 and price_bids_g_KNCETH != 0.0 and qty_bids_g_KNCETH != 0.0 and price_asks_g_KNCETH != 0.0 and qty_asks_g_KNCETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KNCETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KNCETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KNCETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KNCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KNCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KNCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KNCETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KNCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KNCETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KNCUSDT, '#', 'Покупаем', quantity_pair_a, 'KNC', 'за', price_a, 'USDT', 'по цене', price_asks_g_KNCUSDT) 
				print('Пара_B:', symbol_g_KNCETH, '#', 'Продаем', quantity_pair_b, 'KNC', 'за', price_b, 'ETH', 'по цене', price_bids_g_KNCETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KNCUSDT_KNCETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_KNCUSDT_KNCBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KNCUSDT != 0.0 and qty_bids_g_KNCUSDT != 0.0 and price_asks_g_KNCUSDT != 0.0 and qty_asks_g_KNCUSDT != 0.0 and price_bids_g_KNCBUSD != 0.0 and qty_bids_g_KNCBUSD != 0.0 and price_asks_g_KNCBUSD != 0.0 and qty_asks_g_KNCBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KNCBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KNCBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KNCBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KNCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KNCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KNCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KNCBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KNCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KNCBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KNCUSDT, '#', 'Покупаем', quantity_pair_a, 'KNC', 'за', price_a, 'USDT', 'по цене', price_asks_g_KNCUSDT) 
				print('Пара_B:', symbol_g_KNCBUSD, '#', 'Продаем', quantity_pair_b, 'KNC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_KNCBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KNCUSDT_KNCBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_KNCUSDT_KNCBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KNCUSDT != 0.0 and qty_bids_g_KNCUSDT != 0.0 and price_asks_g_KNCUSDT != 0.0 and qty_asks_g_KNCUSDT != 0.0 and price_bids_g_KNCBNB != 0.0 and qty_bids_g_KNCBNB != 0.0 and price_asks_g_KNCBNB != 0.0 and qty_asks_g_KNCBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KNCBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KNCBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KNCBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KNCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KNCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KNCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KNCBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KNCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KNCBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KNCUSDT, '#', 'Покупаем', quantity_pair_a, 'KNC', 'за', price_a, 'USDT', 'по цене', price_asks_g_KNCUSDT) 
				print('Пара_B:', symbol_g_KNCBNB, '#', 'Продаем', quantity_pair_b, 'KNC', 'за', price_b, 'BNB', 'по цене', price_bids_g_KNCBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KNCUSDT_KNCBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_LRCUSDT_LRCBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LRCUSDT != 0.0 and qty_bids_g_LRCUSDT != 0.0 and price_asks_g_LRCUSDT != 0.0 and qty_asks_g_LRCUSDT != 0.0 and price_bids_g_LRCBTC != 0.0 and qty_bids_g_LRCBTC != 0.0 and price_asks_g_LRCBTC != 0.0 and qty_asks_g_LRCBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LRCBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LRCBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LRCBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LRCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LRCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LRCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LRCBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LRCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LRCBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LRCUSDT, '#', 'Покупаем', quantity_pair_a, 'LRC', 'за', price_a, 'USDT', 'по цене', price_asks_g_LRCUSDT) 
				print('Пара_B:', symbol_g_LRCBTC, '#', 'Продаем', quantity_pair_b, 'LRC', 'за', price_b, 'BTC', 'по цене', price_bids_g_LRCBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LRCUSDT_LRCBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_LRCUSDT_LRCETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LRCUSDT != 0.0 and qty_bids_g_LRCUSDT != 0.0 and price_asks_g_LRCUSDT != 0.0 and qty_asks_g_LRCUSDT != 0.0 and price_bids_g_LRCETH != 0.0 and qty_bids_g_LRCETH != 0.0 and price_asks_g_LRCETH != 0.0 and qty_asks_g_LRCETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LRCETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LRCETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LRCETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LRCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LRCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LRCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LRCETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LRCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LRCETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LRCUSDT, '#', 'Покупаем', quantity_pair_a, 'LRC', 'за', price_a, 'USDT', 'по цене', price_asks_g_LRCUSDT) 
				print('Пара_B:', symbol_g_LRCETH, '#', 'Продаем', quantity_pair_b, 'LRC', 'за', price_b, 'ETH', 'по цене', price_bids_g_LRCETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LRCUSDT_LRCETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_LRCUSDT_LRCBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LRCUSDT != 0.0 and qty_bids_g_LRCUSDT != 0.0 and price_asks_g_LRCUSDT != 0.0 and qty_asks_g_LRCUSDT != 0.0 and price_bids_g_LRCBUSD != 0.0 and qty_bids_g_LRCBUSD != 0.0 and price_asks_g_LRCBUSD != 0.0 and qty_asks_g_LRCBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LRCBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LRCBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LRCBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LRCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LRCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LRCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LRCBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LRCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LRCBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LRCUSDT, '#', 'Покупаем', quantity_pair_a, 'LRC', 'за', price_a, 'USDT', 'по цене', price_asks_g_LRCUSDT) 
				print('Пара_B:', symbol_g_LRCBUSD, '#', 'Продаем', quantity_pair_b, 'LRC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LRCBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LRCUSDT_LRCBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_LRCUSDT_LRCBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LRCUSDT != 0.0 and qty_bids_g_LRCUSDT != 0.0 and price_asks_g_LRCUSDT != 0.0 and qty_asks_g_LRCUSDT != 0.0 and price_bids_g_LRCBNB != 0.0 and qty_bids_g_LRCBNB != 0.0 and price_asks_g_LRCBNB != 0.0 and qty_asks_g_LRCBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LRCBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LRCBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LRCBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LRCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LRCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LRCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LRCBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LRCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LRCBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LRCUSDT, '#', 'Покупаем', quantity_pair_a, 'LRC', 'за', price_a, 'USDT', 'по цене', price_asks_g_LRCUSDT) 
				print('Пара_B:', symbol_g_LRCBNB, '#', 'Продаем', quantity_pair_b, 'LRC', 'за', price_b, 'BNB', 'по цене', price_bids_g_LRCBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LRCUSDT_LRCBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_COMPUSDT_COMPBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_COMPUSDT != 0.0 and qty_bids_g_COMPUSDT != 0.0 and price_asks_g_COMPUSDT != 0.0 and qty_asks_g_COMPUSDT != 0.0 and price_bids_g_COMPBTC != 0.0 and qty_bids_g_COMPBTC != 0.0 and price_asks_g_COMPBTC != 0.0 and qty_asks_g_COMPBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_COMPBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_COMPBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_COMPBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_COMPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_COMPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_COMPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_COMPBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='COMPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='COMPBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_COMPUSDT, '#', 'Покупаем', quantity_pair_a, 'COMP', 'за', price_a, 'USDT', 'по цене', price_asks_g_COMPUSDT) 
				print('Пара_B:', symbol_g_COMPBTC, '#', 'Продаем', quantity_pair_b, 'COMP', 'за', price_b, 'BTC', 'по цене', price_bids_g_COMPBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_COMPUSDT_COMPBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_COMPUSDT_COMPBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_COMPUSDT != 0.0 and qty_bids_g_COMPUSDT != 0.0 and price_asks_g_COMPUSDT != 0.0 and qty_asks_g_COMPUSDT != 0.0 and price_bids_g_COMPBUSD != 0.0 and qty_bids_g_COMPBUSD != 0.0 and price_asks_g_COMPBUSD != 0.0 and qty_asks_g_COMPBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_COMPBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_COMPBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_COMPBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_COMPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_COMPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_COMPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_COMPBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='COMPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='COMPBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_COMPUSDT, '#', 'Покупаем', quantity_pair_a, 'COMP', 'за', price_a, 'USDT', 'по цене', price_asks_g_COMPUSDT) 
				print('Пара_B:', symbol_g_COMPBUSD, '#', 'Продаем', quantity_pair_b, 'COMP', 'за', price_b, 'BUSD', 'по цене', price_bids_g_COMPBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_COMPUSDT_COMPBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SCUSDT_SCETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SCUSDT != 0.0 and qty_bids_g_SCUSDT != 0.0 and price_asks_g_SCUSDT != 0.0 and qty_asks_g_SCUSDT != 0.0 and price_bids_g_SCETH != 0.0 and qty_bids_g_SCETH != 0.0 and price_asks_g_SCETH != 0.0 and qty_asks_g_SCETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SCETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SCETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SCETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SCETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SCETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SCUSDT, '#', 'Покупаем', quantity_pair_a, 'SC', 'за', price_a, 'USDT', 'по цене', price_asks_g_SCUSDT) 
				print('Пара_B:', symbol_g_SCETH, '#', 'Продаем', quantity_pair_b, 'SC', 'за', price_b, 'ETH', 'по цене', price_bids_g_SCETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SCUSDT_SCETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_SCUSDT_SCBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SCUSDT != 0.0 and qty_bids_g_SCUSDT != 0.0 and price_asks_g_SCUSDT != 0.0 and qty_asks_g_SCUSDT != 0.0 and price_bids_g_SCBUSD != 0.0 and qty_bids_g_SCBUSD != 0.0 and price_asks_g_SCBUSD != 0.0 and qty_asks_g_SCBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SCBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SCBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SCBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SCBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SCBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SCUSDT, '#', 'Покупаем', quantity_pair_a, 'SC', 'за', price_a, 'USDT', 'по цене', price_asks_g_SCUSDT) 
				print('Пара_B:', symbol_g_SCBUSD, '#', 'Продаем', quantity_pair_b, 'SC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SCBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SCUSDT_SCBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ZENUSDT_ZENBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZENUSDT != 0.0 and qty_bids_g_ZENUSDT != 0.0 and price_asks_g_ZENUSDT != 0.0 and qty_asks_g_ZENUSDT != 0.0 and price_bids_g_ZENBTC != 0.0 and qty_bids_g_ZENBTC != 0.0 and price_asks_g_ZENBTC != 0.0 and qty_asks_g_ZENBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZENBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZENBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZENBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZENUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZENUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZENUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZENBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZENUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZENBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZENUSDT, '#', 'Покупаем', quantity_pair_a, 'ZEN', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZENUSDT) 
				print('Пара_B:', symbol_g_ZENBTC, '#', 'Продаем', quantity_pair_b, 'ZEN', 'за', price_b, 'BTC', 'по цене', price_bids_g_ZENBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZENUSDT_ZENBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ZENUSDT_ZENETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZENUSDT != 0.0 and qty_bids_g_ZENUSDT != 0.0 and price_asks_g_ZENUSDT != 0.0 and qty_asks_g_ZENUSDT != 0.0 and price_bids_g_ZENETH != 0.0 and qty_bids_g_ZENETH != 0.0 and price_asks_g_ZENETH != 0.0 and qty_asks_g_ZENETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZENETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZENETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZENETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZENUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZENUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZENUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZENETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZENUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZENETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZENUSDT, '#', 'Покупаем', quantity_pair_a, 'ZEN', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZENUSDT) 
				print('Пара_B:', symbol_g_ZENETH, '#', 'Продаем', quantity_pair_b, 'ZEN', 'за', price_b, 'ETH', 'по цене', price_bids_g_ZENETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZENUSDT_ZENETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ZENUSDT_ZENBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ZENUSDT != 0.0 and qty_bids_g_ZENUSDT != 0.0 and price_asks_g_ZENUSDT != 0.0 and qty_asks_g_ZENUSDT != 0.0 and price_bids_g_ZENBUSD != 0.0 and qty_bids_g_ZENBUSD != 0.0 and price_asks_g_ZENBUSD != 0.0 and qty_asks_g_ZENBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ZENBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ZENBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ZENBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ZENUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ZENUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ZENUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ZENBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ZENUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ZENBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ZENUSDT, '#', 'Покупаем', quantity_pair_a, 'ZEN', 'за', price_a, 'USDT', 'по цене', price_asks_g_ZENUSDT) 
				print('Пара_B:', symbol_g_ZENBUSD, '#', 'Продаем', quantity_pair_b, 'ZEN', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ZENBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ZENUSDT_ZENBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SNXUSDT_SNXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SNXUSDT != 0.0 and qty_bids_g_SNXUSDT != 0.0 and price_asks_g_SNXUSDT != 0.0 and qty_asks_g_SNXUSDT != 0.0 and price_bids_g_SNXBTC != 0.0 and qty_bids_g_SNXBTC != 0.0 and price_asks_g_SNXBTC != 0.0 and qty_asks_g_SNXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SNXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SNXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SNXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SNXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SNXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SNXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SNXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SNXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SNXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SNXUSDT, '#', 'Покупаем', quantity_pair_a, 'SNX', 'за', price_a, 'USDT', 'по цене', price_asks_g_SNXUSDT) 
				print('Пара_B:', symbol_g_SNXBTC, '#', 'Продаем', quantity_pair_b, 'SNX', 'за', price_b, 'BTC', 'по цене', price_bids_g_SNXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SNXUSDT_SNXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_SNXUSDT_SNXBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SNXUSDT != 0.0 and qty_bids_g_SNXUSDT != 0.0 and price_asks_g_SNXUSDT != 0.0 and qty_asks_g_SNXUSDT != 0.0 and price_bids_g_SNXBNB != 0.0 and qty_bids_g_SNXBNB != 0.0 and price_asks_g_SNXBNB != 0.0 and qty_asks_g_SNXBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SNXBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SNXBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SNXBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SNXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SNXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SNXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SNXBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SNXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SNXBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SNXUSDT, '#', 'Покупаем', quantity_pair_a, 'SNX', 'за', price_a, 'USDT', 'по цене', price_asks_g_SNXUSDT) 
				print('Пара_B:', symbol_g_SNXBNB, '#', 'Продаем', quantity_pair_b, 'SNX', 'за', price_b, 'BNB', 'по цене', price_bids_g_SNXBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SNXUSDT_SNXBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_SNXUSDT_SNXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SNXUSDT != 0.0 and qty_bids_g_SNXUSDT != 0.0 and price_asks_g_SNXUSDT != 0.0 and qty_asks_g_SNXUSDT != 0.0 and price_bids_g_SNXBUSD != 0.0 and qty_bids_g_SNXBUSD != 0.0 and price_asks_g_SNXBUSD != 0.0 and qty_asks_g_SNXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SNXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SNXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SNXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SNXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SNXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SNXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SNXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SNXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SNXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SNXUSDT, '#', 'Покупаем', quantity_pair_a, 'SNX', 'за', price_a, 'USDT', 'по цене', price_asks_g_SNXUSDT) 
				print('Пара_B:', symbol_g_SNXBUSD, '#', 'Продаем', quantity_pair_b, 'SNX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SNXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SNXUSDT_SNXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SNXUSDT_SNXETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SNXUSDT != 0.0 and qty_bids_g_SNXUSDT != 0.0 and price_asks_g_SNXUSDT != 0.0 and qty_asks_g_SNXUSDT != 0.0 and price_bids_g_SNXETH != 0.0 and qty_bids_g_SNXETH != 0.0 and price_asks_g_SNXETH != 0.0 and qty_asks_g_SNXETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SNXETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SNXETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SNXETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SNXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SNXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SNXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SNXETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SNXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SNXETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SNXUSDT, '#', 'Покупаем', quantity_pair_a, 'SNX', 'за', price_a, 'USDT', 'по цене', price_asks_g_SNXUSDT) 
				print('Пара_B:', symbol_g_SNXETH, '#', 'Продаем', quantity_pair_b, 'SNX', 'за', price_b, 'ETH', 'по цене', price_bids_g_SNXETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SNXUSDT_SNXETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_DGBUSDT_DGBBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DGBUSDT != 0.0 and qty_bids_g_DGBUSDT != 0.0 and price_asks_g_DGBUSDT != 0.0 and qty_asks_g_DGBUSDT != 0.0 and price_bids_g_DGBBTC != 0.0 and qty_bids_g_DGBBTC != 0.0 and price_asks_g_DGBBTC != 0.0 and qty_asks_g_DGBBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DGBBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DGBBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DGBBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DGBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DGBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DGBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DGBBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DGBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DGBBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DGBUSDT, '#', 'Покупаем', quantity_pair_a, 'DGB', 'за', price_a, 'USDT', 'по цене', price_asks_g_DGBUSDT) 
				print('Пара_B:', symbol_g_DGBBTC, '#', 'Продаем', quantity_pair_b, 'DGB', 'за', price_b, 'BTC', 'по цене', price_bids_g_DGBBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DGBUSDT_DGBBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_DGBUSDT_DGBBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DGBUSDT != 0.0 and qty_bids_g_DGBUSDT != 0.0 and price_asks_g_DGBUSDT != 0.0 and qty_asks_g_DGBUSDT != 0.0 and price_bids_g_DGBBUSD != 0.0 and qty_bids_g_DGBBUSD != 0.0 and price_asks_g_DGBBUSD != 0.0 and qty_asks_g_DGBBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DGBBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DGBBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DGBBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DGBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DGBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DGBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DGBBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DGBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DGBBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DGBUSDT, '#', 'Покупаем', quantity_pair_a, 'DGB', 'за', price_a, 'USDT', 'по цене', price_asks_g_DGBUSDT) 
				print('Пара_B:', symbol_g_DGBBUSD, '#', 'Продаем', quantity_pair_b, 'DGB', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DGBBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DGBUSDT_DGBBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_GBPUSDT_GBPBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0 and price_bids_g_GBPBUSD != 0.0 and qty_bids_g_GBPBUSD != 0.0 and price_asks_g_GBPBUSD != 0.0 and qty_asks_g_GBPBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GBPBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GBPBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GBPBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GBPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GBPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GBPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GBPBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GBPBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GBPUSDT, '#', 'Покупаем', quantity_pair_a, 'GBP', 'за', price_a, 'USDT', 'по цене', price_asks_g_GBPUSDT) 
				print('Пара_B:', symbol_g_GBPBUSD, '#', 'Продаем', quantity_pair_b, 'GBP', 'за', price_b, 'BUSD', 'по цене', price_bids_g_GBPBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GBPUSDT_GBPBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SXPUSDT_SXPBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SXPUSDT != 0.0 and qty_bids_g_SXPUSDT != 0.0 and price_asks_g_SXPUSDT != 0.0 and qty_asks_g_SXPUSDT != 0.0 and price_bids_g_SXPBTC != 0.0 and qty_bids_g_SXPBTC != 0.0 and price_asks_g_SXPBTC != 0.0 and qty_asks_g_SXPBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SXPBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SXPBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SXPBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SXPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SXPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SXPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SXPBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SXPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SXPBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SXPUSDT, '#', 'Покупаем', quantity_pair_a, 'SXP', 'за', price_a, 'USDT', 'по цене', price_asks_g_SXPUSDT) 
				print('Пара_B:', symbol_g_SXPBTC, '#', 'Продаем', quantity_pair_b, 'SXP', 'за', price_b, 'BTC', 'по цене', price_bids_g_SXPBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SXPUSDT_SXPBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_SXPUSDT_SXPBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SXPUSDT != 0.0 and qty_bids_g_SXPUSDT != 0.0 and price_asks_g_SXPUSDT != 0.0 and qty_asks_g_SXPUSDT != 0.0 and price_bids_g_SXPBNB != 0.0 and qty_bids_g_SXPBNB != 0.0 and price_asks_g_SXPBNB != 0.0 and qty_asks_g_SXPBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SXPBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SXPBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SXPBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SXPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SXPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SXPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SXPBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SXPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SXPBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SXPUSDT, '#', 'Покупаем', quantity_pair_a, 'SXP', 'за', price_a, 'USDT', 'по цене', price_asks_g_SXPUSDT) 
				print('Пара_B:', symbol_g_SXPBNB, '#', 'Продаем', quantity_pair_b, 'SXP', 'за', price_b, 'BNB', 'по цене', price_bids_g_SXPBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SXPUSDT_SXPBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_SXPUSDT_SXPBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SXPUSDT != 0.0 and qty_bids_g_SXPUSDT != 0.0 and price_asks_g_SXPUSDT != 0.0 and qty_asks_g_SXPUSDT != 0.0 and price_bids_g_SXPBUSD != 0.0 and qty_bids_g_SXPBUSD != 0.0 and price_asks_g_SXPBUSD != 0.0 and qty_asks_g_SXPBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SXPBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SXPBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SXPBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SXPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SXPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SXPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SXPBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SXPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SXPBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SXPUSDT, '#', 'Покупаем', quantity_pair_a, 'SXP', 'за', price_a, 'USDT', 'по цене', price_asks_g_SXPUSDT) 
				print('Пара_B:', symbol_g_SXPBUSD, '#', 'Продаем', quantity_pair_b, 'SXP', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SXPBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SXPUSDT_SXPBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SXPUSDT_SXPEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SXPUSDT != 0.0 and qty_bids_g_SXPUSDT != 0.0 and price_asks_g_SXPUSDT != 0.0 and qty_asks_g_SXPUSDT != 0.0 and price_bids_g_SXPEUR != 0.0 and qty_bids_g_SXPEUR != 0.0 and price_asks_g_SXPEUR != 0.0 and qty_asks_g_SXPEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SXPEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SXPEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SXPEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SXPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SXPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SXPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SXPEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SXPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SXPEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SXPUSDT, '#', 'Покупаем', quantity_pair_a, 'SXP', 'за', price_a, 'USDT', 'по цене', price_asks_g_SXPUSDT) 
				print('Пара_B:', symbol_g_SXPEUR, '#', 'Продаем', quantity_pair_b, 'SXP', 'за', price_b, 'EUR', 'по цене', price_bids_g_SXPEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SXPUSDT_SXPEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_MKRUSDT_MKRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MKRUSDT != 0.0 and qty_bids_g_MKRUSDT != 0.0 and price_asks_g_MKRUSDT != 0.0 and qty_asks_g_MKRUSDT != 0.0 and price_bids_g_MKRBTC != 0.0 and qty_bids_g_MKRBTC != 0.0 and price_asks_g_MKRBTC != 0.0 and qty_asks_g_MKRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MKRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MKRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MKRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MKRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MKRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MKRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MKRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MKRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MKRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MKRUSDT, '#', 'Покупаем', quantity_pair_a, 'MKR', 'за', price_a, 'USDT', 'по цене', price_asks_g_MKRUSDT) 
				print('Пара_B:', symbol_g_MKRBTC, '#', 'Продаем', quantity_pair_b, 'MKR', 'за', price_b, 'BTC', 'по цене', price_bids_g_MKRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MKRUSDT_MKRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MKRUSDT_MKRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MKRUSDT != 0.0 and qty_bids_g_MKRUSDT != 0.0 and price_asks_g_MKRUSDT != 0.0 and qty_asks_g_MKRUSDT != 0.0 and price_bids_g_MKRBUSD != 0.0 and qty_bids_g_MKRBUSD != 0.0 and price_asks_g_MKRBUSD != 0.0 and qty_asks_g_MKRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MKRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MKRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MKRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MKRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MKRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MKRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MKRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MKRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MKRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MKRUSDT, '#', 'Покупаем', quantity_pair_a, 'MKR', 'за', price_a, 'USDT', 'по цене', price_asks_g_MKRUSDT) 
				print('Пара_B:', symbol_g_MKRBUSD, '#', 'Продаем', quantity_pair_b, 'MKR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MKRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MKRUSDT_MKRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DCRUSDT_DCRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DCRUSDT != 0.0 and qty_bids_g_DCRUSDT != 0.0 and price_asks_g_DCRUSDT != 0.0 and qty_asks_g_DCRUSDT != 0.0 and price_bids_g_DCRBTC != 0.0 and qty_bids_g_DCRBTC != 0.0 and price_asks_g_DCRBTC != 0.0 and qty_asks_g_DCRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DCRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DCRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DCRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DCRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DCRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DCRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DCRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DCRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DCRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DCRUSDT, '#', 'Покупаем', quantity_pair_a, 'DCR', 'за', price_a, 'USDT', 'по цене', price_asks_g_DCRUSDT) 
				print('Пара_B:', symbol_g_DCRBTC, '#', 'Продаем', quantity_pair_b, 'DCR', 'за', price_b, 'BTC', 'по цене', price_bids_g_DCRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DCRUSDT_DCRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_STORJUSDT_STORJBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STORJUSDT != 0.0 and qty_bids_g_STORJUSDT != 0.0 and price_asks_g_STORJUSDT != 0.0 and qty_asks_g_STORJUSDT != 0.0 and price_bids_g_STORJBTC != 0.0 and qty_bids_g_STORJBTC != 0.0 and price_asks_g_STORJBTC != 0.0 and qty_asks_g_STORJBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STORJBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STORJBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STORJBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STORJUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STORJUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STORJUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STORJBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STORJUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STORJBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STORJUSDT, '#', 'Покупаем', quantity_pair_a, 'STORJ', 'за', price_a, 'USDT', 'по цене', price_asks_g_STORJUSDT) 
				print('Пара_B:', symbol_g_STORJBTC, '#', 'Продаем', quantity_pair_b, 'STORJ', 'за', price_b, 'BTC', 'по цене', price_bids_g_STORJBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STORJUSDT_STORJBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_STORJUSDT_STORJBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STORJUSDT != 0.0 and qty_bids_g_STORJUSDT != 0.0 and price_asks_g_STORJUSDT != 0.0 and qty_asks_g_STORJUSDT != 0.0 and price_bids_g_STORJBUSD != 0.0 and qty_bids_g_STORJBUSD != 0.0 and price_asks_g_STORJBUSD != 0.0 and qty_asks_g_STORJBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STORJBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STORJBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STORJBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STORJUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STORJUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STORJUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STORJBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STORJUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STORJBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STORJUSDT, '#', 'Покупаем', quantity_pair_a, 'STORJ', 'за', price_a, 'USDT', 'по цене', price_asks_g_STORJUSDT) 
				print('Пара_B:', symbol_g_STORJBUSD, '#', 'Продаем', quantity_pair_b, 'STORJ', 'за', price_b, 'BUSD', 'по цене', price_bids_g_STORJBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STORJUSDT_STORJBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_MANAUSDT_MANABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MANAUSDT != 0.0 and qty_bids_g_MANAUSDT != 0.0 and price_asks_g_MANAUSDT != 0.0 and qty_asks_g_MANAUSDT != 0.0 and price_bids_g_MANABTC != 0.0 and qty_bids_g_MANABTC != 0.0 and price_asks_g_MANABTC != 0.0 and qty_asks_g_MANABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MANABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MANABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MANABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MANAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MANAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MANAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MANABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MANAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MANABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MANAUSDT, '#', 'Покупаем', quantity_pair_a, 'MANA', 'за', price_a, 'USDT', 'по цене', price_asks_g_MANAUSDT) 
				print('Пара_B:', symbol_g_MANABTC, '#', 'Продаем', quantity_pair_b, 'MANA', 'за', price_b, 'BTC', 'по цене', price_bids_g_MANABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MANAUSDT_MANABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MANAUSDT_MANAETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MANAUSDT != 0.0 and qty_bids_g_MANAUSDT != 0.0 and price_asks_g_MANAUSDT != 0.0 and qty_asks_g_MANAUSDT != 0.0 and price_bids_g_MANAETH != 0.0 and qty_bids_g_MANAETH != 0.0 and price_asks_g_MANAETH != 0.0 and qty_asks_g_MANAETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MANAETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MANAETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MANAETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MANAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MANAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MANAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MANAETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MANAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MANAETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MANAUSDT, '#', 'Покупаем', quantity_pair_a, 'MANA', 'за', price_a, 'USDT', 'по цене', price_asks_g_MANAUSDT) 
				print('Пара_B:', symbol_g_MANAETH, '#', 'Продаем', quantity_pair_b, 'MANA', 'за', price_b, 'ETH', 'по цене', price_bids_g_MANAETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MANAUSDT_MANAETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_MANAUSDT_MANABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MANAUSDT != 0.0 and qty_bids_g_MANAUSDT != 0.0 and price_asks_g_MANAUSDT != 0.0 and qty_asks_g_MANAUSDT != 0.0 and price_bids_g_MANABUSD != 0.0 and qty_bids_g_MANABUSD != 0.0 and price_asks_g_MANABUSD != 0.0 and qty_asks_g_MANABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MANABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MANABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MANABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MANAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MANAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MANAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MANABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MANAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MANABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MANAUSDT, '#', 'Покупаем', quantity_pair_a, 'MANA', 'за', price_a, 'USDT', 'по цене', price_asks_g_MANAUSDT) 
				print('Пара_B:', symbol_g_MANABUSD, '#', 'Продаем', quantity_pair_b, 'MANA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MANABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MANAUSDT_MANABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_AUDUSDT_AUDBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0 and price_bids_g_AUDBUSD != 0.0 and qty_bids_g_AUDBUSD != 0.0 and price_asks_g_AUDBUSD != 0.0 and qty_asks_g_AUDBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AUDBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AUDBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AUDBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AUDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AUDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AUDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AUDBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AUDBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AUDUSDT, '#', 'Покупаем', quantity_pair_a, 'AUD', 'за', price_a, 'USDT', 'по цене', price_asks_g_AUDUSDT) 
				print('Пара_B:', symbol_g_AUDBUSD, '#', 'Продаем', quantity_pair_b, 'AUD', 'за', price_b, 'BUSD', 'по цене', price_bids_g_AUDBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AUDUSDT_AUDBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_YFIUSDT_YFIBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_YFIUSDT != 0.0 and qty_bids_g_YFIUSDT != 0.0 and price_asks_g_YFIUSDT != 0.0 and qty_asks_g_YFIUSDT != 0.0 and price_bids_g_YFIBTC != 0.0 and qty_bids_g_YFIBTC != 0.0 and price_asks_g_YFIBTC != 0.0 and qty_asks_g_YFIBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_YFIBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_YFIBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_YFIBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_YFIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_YFIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_YFIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_YFIBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='YFIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='YFIBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_YFIUSDT, '#', 'Покупаем', quantity_pair_a, 'YFI', 'за', price_a, 'USDT', 'по цене', price_asks_g_YFIUSDT) 
				print('Пара_B:', symbol_g_YFIBTC, '#', 'Продаем', quantity_pair_b, 'YFI', 'за', price_b, 'BTC', 'по цене', price_bids_g_YFIBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_YFIUSDT_YFIBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_YFIUSDT_YFIBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_YFIUSDT != 0.0 and qty_bids_g_YFIUSDT != 0.0 and price_asks_g_YFIUSDT != 0.0 and qty_asks_g_YFIUSDT != 0.0 and price_bids_g_YFIBUSD != 0.0 and qty_bids_g_YFIBUSD != 0.0 and price_asks_g_YFIBUSD != 0.0 and qty_asks_g_YFIBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_YFIBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_YFIBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_YFIBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_YFIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_YFIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_YFIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_YFIBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='YFIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='YFIBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_YFIUSDT, '#', 'Покупаем', quantity_pair_a, 'YFI', 'за', price_a, 'USDT', 'по цене', price_asks_g_YFIUSDT) 
				print('Пара_B:', symbol_g_YFIBUSD, '#', 'Продаем', quantity_pair_b, 'YFI', 'за', price_b, 'BUSD', 'по цене', price_bids_g_YFIBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_YFIUSDT_YFIBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_YFIUSDT_YFIEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_YFIUSDT != 0.0 and qty_bids_g_YFIUSDT != 0.0 and price_asks_g_YFIUSDT != 0.0 and qty_asks_g_YFIUSDT != 0.0 and price_bids_g_YFIEUR != 0.0 and qty_bids_g_YFIEUR != 0.0 and price_asks_g_YFIEUR != 0.0 and qty_asks_g_YFIEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_YFIEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_YFIEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_YFIEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_YFIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_YFIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_YFIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_YFIEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='YFIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='YFIEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_YFIUSDT, '#', 'Покупаем', quantity_pair_a, 'YFI', 'за', price_a, 'USDT', 'по цене', price_asks_g_YFIUSDT) 
				print('Пара_B:', symbol_g_YFIEUR, '#', 'Продаем', quantity_pair_b, 'YFI', 'за', price_b, 'EUR', 'по цене', price_bids_g_YFIEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_YFIUSDT_YFIEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_BALUSDT_BALBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BALUSDT != 0.0 and qty_bids_g_BALUSDT != 0.0 and price_asks_g_BALUSDT != 0.0 and qty_asks_g_BALUSDT != 0.0 and price_bids_g_BALBTC != 0.0 and qty_bids_g_BALBTC != 0.0 and price_asks_g_BALBTC != 0.0 and qty_asks_g_BALBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BALBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BALBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BALBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BALUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BALUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BALUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BALBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BALUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BALBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BALUSDT, '#', 'Покупаем', quantity_pair_a, 'BAL', 'за', price_a, 'USDT', 'по цене', price_asks_g_BALUSDT) 
				print('Пара_B:', symbol_g_BALBTC, '#', 'Продаем', quantity_pair_b, 'BAL', 'за', price_b, 'BTC', 'по цене', price_bids_g_BALBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BALUSDT_BALBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BALUSDT_BALBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BALUSDT != 0.0 and qty_bids_g_BALUSDT != 0.0 and price_asks_g_BALUSDT != 0.0 and qty_asks_g_BALUSDT != 0.0 and price_bids_g_BALBUSD != 0.0 and qty_bids_g_BALBUSD != 0.0 and price_asks_g_BALBUSD != 0.0 and qty_asks_g_BALBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BALBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BALBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BALBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BALUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BALUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BALUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BALBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BALUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BALBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BALUSDT, '#', 'Покупаем', quantity_pair_a, 'BAL', 'за', price_a, 'USDT', 'по цене', price_asks_g_BALUSDT) 
				print('Пара_B:', symbol_g_BALBUSD, '#', 'Продаем', quantity_pair_b, 'BAL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BALBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BALUSDT_BALBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BLZUSDT_BLZBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BLZUSDT != 0.0 and qty_bids_g_BLZUSDT != 0.0 and price_asks_g_BLZUSDT != 0.0 and qty_asks_g_BLZUSDT != 0.0 and price_bids_g_BLZBTC != 0.0 and qty_bids_g_BLZBTC != 0.0 and price_asks_g_BLZBTC != 0.0 and qty_asks_g_BLZBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BLZBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BLZBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BLZBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BLZUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BLZUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BLZUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BLZBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BLZUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BLZBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BLZUSDT, '#', 'Покупаем', quantity_pair_a, 'BLZ', 'за', price_a, 'USDT', 'по цене', price_asks_g_BLZUSDT) 
				print('Пара_B:', symbol_g_BLZBTC, '#', 'Продаем', quantity_pair_b, 'BLZ', 'за', price_b, 'BTC', 'по цене', price_bids_g_BLZBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BLZUSDT_BLZBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BLZUSDT_BLZBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BLZUSDT != 0.0 and qty_bids_g_BLZUSDT != 0.0 and price_asks_g_BLZUSDT != 0.0 and qty_asks_g_BLZUSDT != 0.0 and price_bids_g_BLZBUSD != 0.0 and qty_bids_g_BLZBUSD != 0.0 and price_asks_g_BLZBUSD != 0.0 and qty_asks_g_BLZBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BLZBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BLZBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BLZBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BLZUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BLZUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BLZUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BLZBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BLZUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BLZBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BLZUSDT, '#', 'Покупаем', quantity_pair_a, 'BLZ', 'за', price_a, 'USDT', 'по цене', price_asks_g_BLZUSDT) 
				print('Пара_B:', symbol_g_BLZBUSD, '#', 'Продаем', quantity_pair_b, 'BLZ', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BLZBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BLZUSDT_BLZBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_IRISUSDT_IRISBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IRISUSDT != 0.0 and qty_bids_g_IRISUSDT != 0.0 and price_asks_g_IRISUSDT != 0.0 and qty_asks_g_IRISUSDT != 0.0 and price_bids_g_IRISBTC != 0.0 and qty_bids_g_IRISBTC != 0.0 and price_asks_g_IRISBTC != 0.0 and qty_asks_g_IRISBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IRISBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IRISBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IRISBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IRISUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IRISUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IRISUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IRISBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IRISUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IRISBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IRISUSDT, '#', 'Покупаем', quantity_pair_a, 'IRIS', 'за', price_a, 'USDT', 'по цене', price_asks_g_IRISUSDT) 
				print('Пара_B:', symbol_g_IRISBTC, '#', 'Продаем', quantity_pair_b, 'IRIS', 'за', price_b, 'BTC', 'по цене', price_bids_g_IRISBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IRISUSDT_IRISBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_KMDUSDT_KMDBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KMDUSDT != 0.0 and qty_bids_g_KMDUSDT != 0.0 and price_asks_g_KMDUSDT != 0.0 and qty_asks_g_KMDUSDT != 0.0 and price_bids_g_KMDBTC != 0.0 and qty_bids_g_KMDBTC != 0.0 and price_asks_g_KMDBTC != 0.0 and qty_asks_g_KMDBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KMDBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KMDBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KMDBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KMDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KMDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KMDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KMDBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KMDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KMDBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KMDUSDT, '#', 'Покупаем', quantity_pair_a, 'KMD', 'за', price_a, 'USDT', 'по цене', price_asks_g_KMDUSDT) 
				print('Пара_B:', symbol_g_KMDBTC, '#', 'Продаем', quantity_pair_b, 'KMD', 'за', price_b, 'BTC', 'по цене', price_bids_g_KMDBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KMDUSDT_KMDBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_JSTUSDT_JSTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_JSTUSDT != 0.0 and qty_bids_g_JSTUSDT != 0.0 and price_asks_g_JSTUSDT != 0.0 and qty_asks_g_JSTUSDT != 0.0 and price_bids_g_JSTBTC != 0.0 and qty_bids_g_JSTBTC != 0.0 and price_asks_g_JSTBTC != 0.0 and qty_asks_g_JSTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_JSTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_JSTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_JSTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_JSTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_JSTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_JSTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_JSTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='JSTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='JSTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_JSTUSDT, '#', 'Покупаем', quantity_pair_a, 'JST', 'за', price_a, 'USDT', 'по цене', price_asks_g_JSTUSDT) 
				print('Пара_B:', symbol_g_JSTBTC, '#', 'Продаем', quantity_pair_b, 'JST', 'за', price_b, 'BTC', 'по цене', price_bids_g_JSTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_JSTUSDT_JSTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_JSTUSDT_JSTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_JSTUSDT != 0.0 and qty_bids_g_JSTUSDT != 0.0 and price_asks_g_JSTUSDT != 0.0 and qty_asks_g_JSTUSDT != 0.0 and price_bids_g_JSTBUSD != 0.0 and qty_bids_g_JSTBUSD != 0.0 and price_asks_g_JSTBUSD != 0.0 and qty_asks_g_JSTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_JSTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_JSTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_JSTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_JSTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_JSTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_JSTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_JSTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='JSTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='JSTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_JSTUSDT, '#', 'Покупаем', quantity_pair_a, 'JST', 'за', price_a, 'USDT', 'по цене', price_asks_g_JSTUSDT) 
				print('Пара_B:', symbol_g_JSTBUSD, '#', 'Продаем', quantity_pair_b, 'JST', 'за', price_b, 'BUSD', 'по цене', price_bids_g_JSTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_JSTUSDT_JSTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ANTUSDT_ANTBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ANTUSDT != 0.0 and qty_bids_g_ANTUSDT != 0.0 and price_asks_g_ANTUSDT != 0.0 and qty_asks_g_ANTUSDT != 0.0 and price_bids_g_ANTBNB != 0.0 and qty_bids_g_ANTBNB != 0.0 and price_asks_g_ANTBNB != 0.0 and qty_asks_g_ANTBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ANTBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ANTBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ANTBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ANTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ANTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ANTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ANTBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ANTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ANTBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ANTUSDT, '#', 'Покупаем', quantity_pair_a, 'ANT', 'за', price_a, 'USDT', 'по цене', price_asks_g_ANTUSDT) 
				print('Пара_B:', symbol_g_ANTBNB, '#', 'Продаем', quantity_pair_b, 'ANT', 'за', price_b, 'BNB', 'по цене', price_bids_g_ANTBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ANTUSDT_ANTBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ANTUSDT_ANTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ANTUSDT != 0.0 and qty_bids_g_ANTUSDT != 0.0 and price_asks_g_ANTUSDT != 0.0 and qty_asks_g_ANTUSDT != 0.0 and price_bids_g_ANTBTC != 0.0 and qty_bids_g_ANTBTC != 0.0 and price_asks_g_ANTBTC != 0.0 and qty_asks_g_ANTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ANTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ANTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ANTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ANTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ANTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ANTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ANTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ANTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ANTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ANTUSDT, '#', 'Покупаем', quantity_pair_a, 'ANT', 'за', price_a, 'USDT', 'по цене', price_asks_g_ANTUSDT) 
				print('Пара_B:', symbol_g_ANTBTC, '#', 'Продаем', quantity_pair_b, 'ANT', 'за', price_b, 'BTC', 'по цене', price_bids_g_ANTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ANTUSDT_ANTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ANTUSDT_ANTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ANTUSDT != 0.0 and qty_bids_g_ANTUSDT != 0.0 and price_asks_g_ANTUSDT != 0.0 and qty_asks_g_ANTUSDT != 0.0 and price_bids_g_ANTBUSD != 0.0 and qty_bids_g_ANTBUSD != 0.0 and price_asks_g_ANTBUSD != 0.0 and qty_asks_g_ANTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ANTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ANTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ANTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ANTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ANTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ANTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ANTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ANTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ANTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ANTUSDT, '#', 'Покупаем', quantity_pair_a, 'ANT', 'за', price_a, 'USDT', 'по цене', price_asks_g_ANTUSDT) 
				print('Пара_B:', symbol_g_ANTBUSD, '#', 'Продаем', quantity_pair_b, 'ANT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ANTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ANTUSDT_ANTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_CRVUSDT_CRVBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CRVUSDT != 0.0 and qty_bids_g_CRVUSDT != 0.0 and price_asks_g_CRVUSDT != 0.0 and qty_asks_g_CRVUSDT != 0.0 and price_bids_g_CRVBTC != 0.0 and qty_bids_g_CRVBTC != 0.0 and price_asks_g_CRVBTC != 0.0 and qty_asks_g_CRVBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CRVBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CRVBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CRVBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CRVUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CRVUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CRVUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CRVBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CRVUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CRVBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CRVUSDT, '#', 'Покупаем', quantity_pair_a, 'CRV', 'за', price_a, 'USDT', 'по цене', price_asks_g_CRVUSDT) 
				print('Пара_B:', symbol_g_CRVBTC, '#', 'Продаем', quantity_pair_b, 'CRV', 'за', price_b, 'BTC', 'по цене', price_bids_g_CRVBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CRVUSDT_CRVBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CRVUSDT_CRVBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CRVUSDT != 0.0 and qty_bids_g_CRVUSDT != 0.0 and price_asks_g_CRVUSDT != 0.0 and qty_asks_g_CRVUSDT != 0.0 and price_bids_g_CRVBUSD != 0.0 and qty_bids_g_CRVBUSD != 0.0 and price_asks_g_CRVBUSD != 0.0 and qty_asks_g_CRVBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CRVBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CRVBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CRVBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CRVUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CRVUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CRVUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CRVBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CRVUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CRVBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CRVUSDT, '#', 'Покупаем', quantity_pair_a, 'CRV', 'за', price_a, 'USDT', 'по цене', price_asks_g_CRVUSDT) 
				print('Пара_B:', symbol_g_CRVBUSD, '#', 'Продаем', quantity_pair_b, 'CRV', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CRVBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CRVUSDT_CRVBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_CRVUSDT_CRVETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CRVUSDT != 0.0 and qty_bids_g_CRVUSDT != 0.0 and price_asks_g_CRVUSDT != 0.0 and qty_asks_g_CRVUSDT != 0.0 and price_bids_g_CRVETH != 0.0 and qty_bids_g_CRVETH != 0.0 and price_asks_g_CRVETH != 0.0 and qty_asks_g_CRVETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CRVETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CRVETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CRVETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CRVUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CRVUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CRVUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CRVETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CRVUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CRVETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CRVUSDT, '#', 'Покупаем', quantity_pair_a, 'CRV', 'за', price_a, 'USDT', 'по цене', price_asks_g_CRVUSDT) 
				print('Пара_B:', symbol_g_CRVETH, '#', 'Продаем', quantity_pair_b, 'CRV', 'за', price_b, 'ETH', 'по цене', price_bids_g_CRVETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CRVUSDT_CRVETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_SANDUSDT_SANDBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SANDUSDT != 0.0 and qty_bids_g_SANDUSDT != 0.0 and price_asks_g_SANDUSDT != 0.0 and qty_asks_g_SANDUSDT != 0.0 and price_bids_g_SANDBNB != 0.0 and qty_bids_g_SANDBNB != 0.0 and price_asks_g_SANDBNB != 0.0 and qty_asks_g_SANDBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SANDBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SANDBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SANDBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SANDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SANDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SANDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SANDBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SANDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SANDBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SANDUSDT, '#', 'Покупаем', quantity_pair_a, 'SAND', 'за', price_a, 'USDT', 'по цене', price_asks_g_SANDUSDT) 
				print('Пара_B:', symbol_g_SANDBNB, '#', 'Продаем', quantity_pair_b, 'SAND', 'за', price_b, 'BNB', 'по цене', price_bids_g_SANDBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SANDUSDT_SANDBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_SANDUSDT_SANDBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SANDUSDT != 0.0 and qty_bids_g_SANDUSDT != 0.0 and price_asks_g_SANDUSDT != 0.0 and qty_asks_g_SANDUSDT != 0.0 and price_bids_g_SANDBTC != 0.0 and qty_bids_g_SANDBTC != 0.0 and price_asks_g_SANDBTC != 0.0 and qty_asks_g_SANDBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SANDBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SANDBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SANDBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SANDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SANDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SANDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SANDBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SANDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SANDBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SANDUSDT, '#', 'Покупаем', quantity_pair_a, 'SAND', 'за', price_a, 'USDT', 'по цене', price_asks_g_SANDUSDT) 
				print('Пара_B:', symbol_g_SANDBTC, '#', 'Продаем', quantity_pair_b, 'SAND', 'за', price_b, 'BTC', 'по цене', price_bids_g_SANDBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SANDUSDT_SANDBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_SANDUSDT_SANDBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SANDUSDT != 0.0 and qty_bids_g_SANDUSDT != 0.0 and price_asks_g_SANDUSDT != 0.0 and qty_asks_g_SANDUSDT != 0.0 and price_bids_g_SANDBUSD != 0.0 and qty_bids_g_SANDBUSD != 0.0 and price_asks_g_SANDBUSD != 0.0 and qty_asks_g_SANDBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SANDBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SANDBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SANDBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SANDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SANDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SANDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SANDBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SANDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SANDBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SANDUSDT, '#', 'Покупаем', quantity_pair_a, 'SAND', 'за', price_a, 'USDT', 'по цене', price_asks_g_SANDUSDT) 
				print('Пара_B:', symbol_g_SANDBUSD, '#', 'Продаем', quantity_pair_b, 'SAND', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SANDBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SANDUSDT_SANDBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SANDUSDT_SANDETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SANDUSDT != 0.0 and qty_bids_g_SANDUSDT != 0.0 and price_asks_g_SANDUSDT != 0.0 and qty_asks_g_SANDUSDT != 0.0 and price_bids_g_SANDETH != 0.0 and qty_bids_g_SANDETH != 0.0 and price_asks_g_SANDETH != 0.0 and qty_asks_g_SANDETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SANDETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SANDETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SANDETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SANDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SANDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SANDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SANDETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SANDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SANDETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SANDUSDT, '#', 'Покупаем', quantity_pair_a, 'SAND', 'за', price_a, 'USDT', 'по цене', price_asks_g_SANDUSDT) 
				print('Пара_B:', symbol_g_SANDETH, '#', 'Продаем', quantity_pair_b, 'SAND', 'за', price_b, 'ETH', 'по цене', price_bids_g_SANDETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SANDUSDT_SANDETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_SANDUSDT_SANDAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SANDUSDT != 0.0 and qty_bids_g_SANDUSDT != 0.0 and price_asks_g_SANDUSDT != 0.0 and qty_asks_g_SANDUSDT != 0.0 and price_bids_g_SANDAUD != 0.0 and qty_bids_g_SANDAUD != 0.0 and price_asks_g_SANDAUD != 0.0 and qty_asks_g_SANDAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SANDAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SANDAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SANDAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SANDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SANDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SANDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SANDAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SANDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SANDAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SANDUSDT, '#', 'Покупаем', quantity_pair_a, 'SAND', 'за', price_a, 'USDT', 'по цене', price_asks_g_SANDUSDT) 
				print('Пара_B:', symbol_g_SANDAUD, '#', 'Продаем', quantity_pair_b, 'SAND', 'за', price_b, 'AUD', 'по цене', price_bids_g_SANDAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SANDUSDT_SANDAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_OCEANUSDT_OCEANBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OCEANUSDT != 0.0 and qty_bids_g_OCEANUSDT != 0.0 and price_asks_g_OCEANUSDT != 0.0 and qty_asks_g_OCEANUSDT != 0.0 and price_bids_g_OCEANBNB != 0.0 and qty_bids_g_OCEANBNB != 0.0 and price_asks_g_OCEANBNB != 0.0 and qty_asks_g_OCEANBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OCEANBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OCEANBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OCEANBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OCEANUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OCEANUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OCEANUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OCEANBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OCEANUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OCEANBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OCEANUSDT, '#', 'Покупаем', quantity_pair_a, 'OCEAN', 'за', price_a, 'USDT', 'по цене', price_asks_g_OCEANUSDT) 
				print('Пара_B:', symbol_g_OCEANBNB, '#', 'Продаем', quantity_pair_b, 'OCEAN', 'за', price_b, 'BNB', 'по цене', price_bids_g_OCEANBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OCEANUSDT_OCEANBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_OCEANUSDT_OCEANBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OCEANUSDT != 0.0 and qty_bids_g_OCEANUSDT != 0.0 and price_asks_g_OCEANUSDT != 0.0 and qty_asks_g_OCEANUSDT != 0.0 and price_bids_g_OCEANBTC != 0.0 and qty_bids_g_OCEANBTC != 0.0 and price_asks_g_OCEANBTC != 0.0 and qty_asks_g_OCEANBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OCEANBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OCEANBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OCEANBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OCEANUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OCEANUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OCEANUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OCEANBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OCEANUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OCEANBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OCEANUSDT, '#', 'Покупаем', quantity_pair_a, 'OCEAN', 'за', price_a, 'USDT', 'по цене', price_asks_g_OCEANUSDT) 
				print('Пара_B:', symbol_g_OCEANBTC, '#', 'Продаем', quantity_pair_b, 'OCEAN', 'за', price_b, 'BTC', 'по цене', price_bids_g_OCEANBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OCEANUSDT_OCEANBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_OCEANUSDT_OCEANBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OCEANUSDT != 0.0 and qty_bids_g_OCEANUSDT != 0.0 and price_asks_g_OCEANUSDT != 0.0 and qty_asks_g_OCEANUSDT != 0.0 and price_bids_g_OCEANBUSD != 0.0 and qty_bids_g_OCEANBUSD != 0.0 and price_asks_g_OCEANBUSD != 0.0 and qty_asks_g_OCEANBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OCEANBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OCEANBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OCEANBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OCEANUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OCEANUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OCEANUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OCEANBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OCEANUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OCEANBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OCEANUSDT, '#', 'Покупаем', quantity_pair_a, 'OCEAN', 'за', price_a, 'USDT', 'по цене', price_asks_g_OCEANUSDT) 
				print('Пара_B:', symbol_g_OCEANBUSD, '#', 'Продаем', quantity_pair_b, 'OCEAN', 'за', price_b, 'BUSD', 'по цене', price_bids_g_OCEANBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OCEANUSDT_OCEANBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_NMRUSDT_NMRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NMRUSDT != 0.0 and qty_bids_g_NMRUSDT != 0.0 and price_asks_g_NMRUSDT != 0.0 and qty_asks_g_NMRUSDT != 0.0 and price_bids_g_NMRBTC != 0.0 and qty_bids_g_NMRBTC != 0.0 and price_asks_g_NMRBTC != 0.0 and qty_asks_g_NMRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NMRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NMRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NMRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NMRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NMRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NMRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NMRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NMRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NMRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NMRUSDT, '#', 'Покупаем', quantity_pair_a, 'NMR', 'за', price_a, 'USDT', 'по цене', price_asks_g_NMRUSDT) 
				print('Пара_B:', symbol_g_NMRBTC, '#', 'Продаем', quantity_pair_b, 'NMR', 'за', price_b, 'BTC', 'по цене', price_bids_g_NMRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NMRUSDT_NMRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_NMRUSDT_NMRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NMRUSDT != 0.0 and qty_bids_g_NMRUSDT != 0.0 and price_asks_g_NMRUSDT != 0.0 and qty_asks_g_NMRUSDT != 0.0 and price_bids_g_NMRBUSD != 0.0 and qty_bids_g_NMRBUSD != 0.0 and price_asks_g_NMRBUSD != 0.0 and qty_asks_g_NMRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NMRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NMRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NMRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NMRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NMRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NMRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NMRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NMRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NMRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NMRUSDT, '#', 'Покупаем', quantity_pair_a, 'NMR', 'за', price_a, 'USDT', 'по цене', price_asks_g_NMRUSDT) 
				print('Пара_B:', symbol_g_NMRBUSD, '#', 'Продаем', quantity_pair_b, 'NMR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_NMRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NMRUSDT_NMRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DOTUSDT_DOTBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOTUSDT != 0.0 and qty_bids_g_DOTUSDT != 0.0 and price_asks_g_DOTUSDT != 0.0 and qty_asks_g_DOTUSDT != 0.0 and price_bids_g_DOTBNB != 0.0 and qty_bids_g_DOTBNB != 0.0 and price_asks_g_DOTBNB != 0.0 and qty_asks_g_DOTBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOTBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOTBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOTBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOTBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOTBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOTUSDT, '#', 'Покупаем', quantity_pair_a, 'DOT', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOTUSDT) 
				print('Пара_B:', symbol_g_DOTBNB, '#', 'Продаем', quantity_pair_b, 'DOT', 'за', price_b, 'BNB', 'по цене', price_bids_g_DOTBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOTUSDT_DOTBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_DOTUSDT_DOTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOTUSDT != 0.0 and qty_bids_g_DOTUSDT != 0.0 and price_asks_g_DOTUSDT != 0.0 and qty_asks_g_DOTUSDT != 0.0 and price_bids_g_DOTBTC != 0.0 and qty_bids_g_DOTBTC != 0.0 and price_asks_g_DOTBTC != 0.0 and qty_asks_g_DOTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOTUSDT, '#', 'Покупаем', quantity_pair_a, 'DOT', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOTUSDT) 
				print('Пара_B:', symbol_g_DOTBTC, '#', 'Продаем', quantity_pair_b, 'DOT', 'за', price_b, 'BTC', 'по цене', price_bids_g_DOTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOTUSDT_DOTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_DOTUSDT_DOTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOTUSDT != 0.0 and qty_bids_g_DOTUSDT != 0.0 and price_asks_g_DOTUSDT != 0.0 and qty_asks_g_DOTUSDT != 0.0 and price_bids_g_DOTBUSD != 0.0 and qty_bids_g_DOTBUSD != 0.0 and price_asks_g_DOTBUSD != 0.0 and qty_asks_g_DOTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOTUSDT, '#', 'Покупаем', quantity_pair_a, 'DOT', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOTUSDT) 
				print('Пара_B:', symbol_g_DOTBUSD, '#', 'Продаем', quantity_pair_b, 'DOT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DOTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOTUSDT_DOTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DOTUSDT_DOTEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOTUSDT != 0.0 and qty_bids_g_DOTUSDT != 0.0 and price_asks_g_DOTUSDT != 0.0 and qty_asks_g_DOTUSDT != 0.0 and price_bids_g_DOTEUR != 0.0 and qty_bids_g_DOTEUR != 0.0 and price_asks_g_DOTEUR != 0.0 and qty_asks_g_DOTEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOTEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOTEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOTEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOTEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOTEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOTUSDT, '#', 'Покупаем', quantity_pair_a, 'DOT', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOTUSDT) 
				print('Пара_B:', symbol_g_DOTEUR, '#', 'Продаем', quantity_pair_b, 'DOT', 'за', price_b, 'EUR', 'по цене', price_bids_g_DOTEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOTUSDT_DOTEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_DOTUSDT_DOTGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOTUSDT != 0.0 and qty_bids_g_DOTUSDT != 0.0 and price_asks_g_DOTUSDT != 0.0 and qty_asks_g_DOTUSDT != 0.0 and price_bids_g_DOTGBP != 0.0 and qty_bids_g_DOTGBP != 0.0 and price_asks_g_DOTGBP != 0.0 and qty_asks_g_DOTGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOTGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOTGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOTGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOTGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOTGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOTUSDT, '#', 'Покупаем', quantity_pair_a, 'DOT', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOTUSDT) 
				print('Пара_B:', symbol_g_DOTGBP, '#', 'Продаем', quantity_pair_b, 'DOT', 'за', price_b, 'GBP', 'по цене', price_bids_g_DOTGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOTUSDT_DOTGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_DOTUSDT_DOTAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOTUSDT != 0.0 and qty_bids_g_DOTUSDT != 0.0 and price_asks_g_DOTUSDT != 0.0 and qty_asks_g_DOTUSDT != 0.0 and price_bids_g_DOTAUD != 0.0 and qty_bids_g_DOTAUD != 0.0 and price_asks_g_DOTAUD != 0.0 and qty_asks_g_DOTAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOTAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOTAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOTAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOTAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOTAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOTUSDT, '#', 'Покупаем', quantity_pair_a, 'DOT', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOTUSDT) 
				print('Пара_B:', symbol_g_DOTAUD, '#', 'Продаем', quantity_pair_b, 'DOT', 'за', price_b, 'AUD', 'по цене', price_bids_g_DOTAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOTUSDT_DOTAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_DOTUSDT_DOTETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DOTUSDT != 0.0 and qty_bids_g_DOTUSDT != 0.0 and price_asks_g_DOTUSDT != 0.0 and qty_asks_g_DOTUSDT != 0.0 and price_bids_g_DOTETH != 0.0 and qty_bids_g_DOTETH != 0.0 and price_asks_g_DOTETH != 0.0 and qty_asks_g_DOTETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DOTETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DOTETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DOTETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DOTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DOTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DOTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DOTETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DOTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DOTETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DOTUSDT, '#', 'Покупаем', quantity_pair_a, 'DOT', 'за', price_a, 'USDT', 'по цене', price_asks_g_DOTUSDT) 
				print('Пара_B:', symbol_g_DOTETH, '#', 'Продаем', quantity_pair_b, 'DOT', 'за', price_b, 'ETH', 'по цене', price_bids_g_DOTETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DOTUSDT_DOTETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_LUNAUSDT_LUNABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LUNAUSDT != 0.0 and qty_bids_g_LUNAUSDT != 0.0 and price_asks_g_LUNAUSDT != 0.0 and qty_asks_g_LUNAUSDT != 0.0 and price_bids_g_LUNABUSD != 0.0 and qty_bids_g_LUNABUSD != 0.0 and price_asks_g_LUNABUSD != 0.0 and qty_asks_g_LUNABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LUNABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LUNABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LUNABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LUNAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LUNAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LUNAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LUNABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LUNAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LUNABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LUNAUSDT, '#', 'Покупаем', quantity_pair_a, 'LUNA', 'за', price_a, 'USDT', 'по цене', price_asks_g_LUNAUSDT) 
				print('Пара_B:', symbol_g_LUNABUSD, '#', 'Продаем', quantity_pair_b, 'LUNA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LUNABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LUNAUSDT_LUNABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_RSRUSDT_RSRBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RSRUSDT != 0.0 and qty_bids_g_RSRUSDT != 0.0 and price_asks_g_RSRUSDT != 0.0 and qty_asks_g_RSRUSDT != 0.0 and price_bids_g_RSRBNB != 0.0 and qty_bids_g_RSRBNB != 0.0 and price_asks_g_RSRBNB != 0.0 and qty_asks_g_RSRBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RSRBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RSRBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RSRBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RSRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RSRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RSRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RSRBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RSRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RSRBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RSRUSDT, '#', 'Покупаем', quantity_pair_a, 'RSR', 'за', price_a, 'USDT', 'по цене', price_asks_g_RSRUSDT) 
				print('Пара_B:', symbol_g_RSRBNB, '#', 'Продаем', quantity_pair_b, 'RSR', 'за', price_b, 'BNB', 'по цене', price_bids_g_RSRBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RSRUSDT_RSRBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_RSRUSDT_RSRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RSRUSDT != 0.0 and qty_bids_g_RSRUSDT != 0.0 and price_asks_g_RSRUSDT != 0.0 and qty_asks_g_RSRUSDT != 0.0 and price_bids_g_RSRBUSD != 0.0 and qty_bids_g_RSRBUSD != 0.0 and price_asks_g_RSRBUSD != 0.0 and qty_asks_g_RSRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RSRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RSRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RSRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RSRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RSRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RSRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RSRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RSRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RSRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RSRUSDT, '#', 'Покупаем', quantity_pair_a, 'RSR', 'за', price_a, 'USDT', 'по цене', price_asks_g_RSRUSDT) 
				print('Пара_B:', symbol_g_RSRBUSD, '#', 'Продаем', quantity_pair_b, 'RSR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_RSRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RSRUSDT_RSRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_PAXGUSDT_PAXGBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PAXGUSDT != 0.0 and qty_bids_g_PAXGUSDT != 0.0 and price_asks_g_PAXGUSDT != 0.0 and qty_asks_g_PAXGUSDT != 0.0 and price_bids_g_PAXGBNB != 0.0 and qty_bids_g_PAXGBNB != 0.0 and price_asks_g_PAXGBNB != 0.0 and qty_asks_g_PAXGBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PAXGBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PAXGBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PAXGBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PAXGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PAXGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PAXGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PAXGBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PAXGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PAXGBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PAXGUSDT, '#', 'Покупаем', quantity_pair_a, 'PAXG', 'за', price_a, 'USDT', 'по цене', price_asks_g_PAXGUSDT) 
				print('Пара_B:', symbol_g_PAXGBNB, '#', 'Продаем', quantity_pair_b, 'PAXG', 'за', price_b, 'BNB', 'по цене', price_bids_g_PAXGBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PAXGUSDT_PAXGBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_PAXGUSDT_PAXGBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PAXGUSDT != 0.0 and qty_bids_g_PAXGUSDT != 0.0 and price_asks_g_PAXGUSDT != 0.0 and qty_asks_g_PAXGUSDT != 0.0 and price_bids_g_PAXGBTC != 0.0 and qty_bids_g_PAXGBTC != 0.0 and price_asks_g_PAXGBTC != 0.0 and qty_asks_g_PAXGBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PAXGBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PAXGBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PAXGBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PAXGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PAXGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PAXGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PAXGBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PAXGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PAXGBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PAXGUSDT, '#', 'Покупаем', quantity_pair_a, 'PAXG', 'за', price_a, 'USDT', 'по цене', price_asks_g_PAXGUSDT) 
				print('Пара_B:', symbol_g_PAXGBTC, '#', 'Продаем', quantity_pair_b, 'PAXG', 'за', price_b, 'BTC', 'по цене', price_bids_g_PAXGBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PAXGUSDT_PAXGBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_PAXGUSDT_PAXGBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PAXGUSDT != 0.0 and qty_bids_g_PAXGUSDT != 0.0 and price_asks_g_PAXGUSDT != 0.0 and qty_asks_g_PAXGUSDT != 0.0 and price_bids_g_PAXGBUSD != 0.0 and qty_bids_g_PAXGBUSD != 0.0 and price_asks_g_PAXGBUSD != 0.0 and qty_asks_g_PAXGBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PAXGBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PAXGBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PAXGBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PAXGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PAXGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PAXGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PAXGBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PAXGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PAXGBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PAXGUSDT, '#', 'Покупаем', quantity_pair_a, 'PAXG', 'за', price_a, 'USDT', 'по цене', price_asks_g_PAXGUSDT) 
				print('Пара_B:', symbol_g_PAXGBUSD, '#', 'Продаем', quantity_pair_b, 'PAXG', 'за', price_b, 'BUSD', 'по цене', price_bids_g_PAXGBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PAXGUSDT_PAXGBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_TRBUSDT_TRBBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TRBUSDT != 0.0 and qty_bids_g_TRBUSDT != 0.0 and price_asks_g_TRBUSDT != 0.0 and qty_asks_g_TRBUSDT != 0.0 and price_bids_g_TRBBTC != 0.0 and qty_bids_g_TRBBTC != 0.0 and price_asks_g_TRBBTC != 0.0 and qty_asks_g_TRBBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TRBBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TRBBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TRBBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TRBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TRBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TRBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TRBBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TRBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TRBBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TRBUSDT, '#', 'Покупаем', quantity_pair_a, 'TRB', 'за', price_a, 'USDT', 'по цене', price_asks_g_TRBUSDT) 
				print('Пара_B:', symbol_g_TRBBTC, '#', 'Продаем', quantity_pair_b, 'TRB', 'за', price_b, 'BTC', 'по цене', price_bids_g_TRBBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TRBUSDT_TRBBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_TRBUSDT_TRBBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TRBUSDT != 0.0 and qty_bids_g_TRBUSDT != 0.0 and price_asks_g_TRBUSDT != 0.0 and qty_asks_g_TRBUSDT != 0.0 and price_bids_g_TRBBUSD != 0.0 and qty_bids_g_TRBBUSD != 0.0 and price_asks_g_TRBBUSD != 0.0 and qty_asks_g_TRBBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TRBBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TRBBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TRBBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TRBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TRBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TRBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TRBBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TRBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TRBBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TRBUSDT, '#', 'Покупаем', quantity_pair_a, 'TRB', 'за', price_a, 'USDT', 'по цене', price_asks_g_TRBUSDT) 
				print('Пара_B:', symbol_g_TRBBUSD, '#', 'Продаем', quantity_pair_b, 'TRB', 'за', price_b, 'BUSD', 'по цене', price_bids_g_TRBBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TRBUSDT_TRBBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SUSHIUSDT_SUSHIBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SUSHIUSDT != 0.0 and qty_bids_g_SUSHIUSDT != 0.0 and price_asks_g_SUSHIUSDT != 0.0 and qty_asks_g_SUSHIUSDT != 0.0 and price_bids_g_SUSHIBNB != 0.0 and qty_bids_g_SUSHIBNB != 0.0 and price_asks_g_SUSHIBNB != 0.0 and qty_asks_g_SUSHIBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SUSHIBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SUSHIBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SUSHIBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SUSHIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SUSHIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SUSHIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SUSHIBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SUSHIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SUSHIBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SUSHIUSDT, '#', 'Покупаем', quantity_pair_a, 'SUSHI', 'за', price_a, 'USDT', 'по цене', price_asks_g_SUSHIUSDT) 
				print('Пара_B:', symbol_g_SUSHIBNB, '#', 'Продаем', quantity_pair_b, 'SUSHI', 'за', price_b, 'BNB', 'по цене', price_bids_g_SUSHIBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SUSHIUSDT_SUSHIBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_SUSHIUSDT_SUSHIBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SUSHIUSDT != 0.0 and qty_bids_g_SUSHIUSDT != 0.0 and price_asks_g_SUSHIUSDT != 0.0 and qty_asks_g_SUSHIUSDT != 0.0 and price_bids_g_SUSHIBTC != 0.0 and qty_bids_g_SUSHIBTC != 0.0 and price_asks_g_SUSHIBTC != 0.0 and qty_asks_g_SUSHIBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SUSHIBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SUSHIBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SUSHIBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SUSHIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SUSHIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SUSHIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SUSHIBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SUSHIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SUSHIBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SUSHIUSDT, '#', 'Покупаем', quantity_pair_a, 'SUSHI', 'за', price_a, 'USDT', 'по цене', price_asks_g_SUSHIUSDT) 
				print('Пара_B:', symbol_g_SUSHIBTC, '#', 'Продаем', quantity_pair_b, 'SUSHI', 'за', price_b, 'BTC', 'по цене', price_bids_g_SUSHIBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SUSHIUSDT_SUSHIBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_SUSHIUSDT_SUSHIBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SUSHIUSDT != 0.0 and qty_bids_g_SUSHIUSDT != 0.0 and price_asks_g_SUSHIUSDT != 0.0 and qty_asks_g_SUSHIUSDT != 0.0 and price_bids_g_SUSHIBUSD != 0.0 and qty_bids_g_SUSHIBUSD != 0.0 and price_asks_g_SUSHIBUSD != 0.0 and qty_asks_g_SUSHIBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SUSHIBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SUSHIBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SUSHIBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SUSHIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SUSHIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SUSHIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SUSHIBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SUSHIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SUSHIBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SUSHIUSDT, '#', 'Покупаем', quantity_pair_a, 'SUSHI', 'за', price_a, 'USDT', 'по цене', price_asks_g_SUSHIUSDT) 
				print('Пара_B:', symbol_g_SUSHIBUSD, '#', 'Продаем', quantity_pair_b, 'SUSHI', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SUSHIBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SUSHIUSDT_SUSHIBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_KSMUSDT_KSMBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KSMUSDT != 0.0 and qty_bids_g_KSMUSDT != 0.0 and price_asks_g_KSMUSDT != 0.0 and qty_asks_g_KSMUSDT != 0.0 and price_bids_g_KSMBTC != 0.0 and qty_bids_g_KSMBTC != 0.0 and price_asks_g_KSMBTC != 0.0 and qty_asks_g_KSMBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KSMBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KSMBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KSMBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KSMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KSMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KSMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KSMBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KSMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KSMBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KSMUSDT, '#', 'Покупаем', quantity_pair_a, 'KSM', 'за', price_a, 'USDT', 'по цене', price_asks_g_KSMUSDT) 
				print('Пара_B:', symbol_g_KSMBTC, '#', 'Продаем', quantity_pair_b, 'KSM', 'за', price_b, 'BTC', 'по цене', price_bids_g_KSMBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KSMUSDT_KSMBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_KSMUSDT_KSMBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KSMUSDT != 0.0 and qty_bids_g_KSMUSDT != 0.0 and price_asks_g_KSMUSDT != 0.0 and qty_asks_g_KSMUSDT != 0.0 and price_bids_g_KSMBUSD != 0.0 and qty_bids_g_KSMBUSD != 0.0 and price_asks_g_KSMBUSD != 0.0 and qty_asks_g_KSMBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KSMBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KSMBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KSMBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KSMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KSMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KSMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KSMBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KSMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KSMBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KSMUSDT, '#', 'Покупаем', quantity_pair_a, 'KSM', 'за', price_a, 'USDT', 'по цене', price_asks_g_KSMUSDT) 
				print('Пара_B:', symbol_g_KSMBUSD, '#', 'Продаем', quantity_pair_b, 'KSM', 'за', price_b, 'BUSD', 'по цене', price_bids_g_KSMBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KSMUSDT_KSMBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_EGLDUSDT_EGLDBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_EGLDUSDT != 0.0 and qty_bids_g_EGLDUSDT != 0.0 and price_asks_g_EGLDUSDT != 0.0 and qty_asks_g_EGLDUSDT != 0.0 and price_bids_g_EGLDBNB != 0.0 and qty_bids_g_EGLDBNB != 0.0 and price_asks_g_EGLDBNB != 0.0 and qty_asks_g_EGLDBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_EGLDBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_EGLDBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_EGLDBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_EGLDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_EGLDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_EGLDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_EGLDBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='EGLDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='EGLDBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_EGLDUSDT, '#', 'Покупаем', quantity_pair_a, 'EGLD', 'за', price_a, 'USDT', 'по цене', price_asks_g_EGLDUSDT) 
				print('Пара_B:', symbol_g_EGLDBNB, '#', 'Продаем', quantity_pair_b, 'EGLD', 'за', price_b, 'BNB', 'по цене', price_bids_g_EGLDBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_EGLDUSDT_EGLDBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_EGLDUSDT_EGLDBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_EGLDUSDT != 0.0 and qty_bids_g_EGLDUSDT != 0.0 and price_asks_g_EGLDUSDT != 0.0 and qty_asks_g_EGLDUSDT != 0.0 and price_bids_g_EGLDBTC != 0.0 and qty_bids_g_EGLDBTC != 0.0 and price_asks_g_EGLDBTC != 0.0 and qty_asks_g_EGLDBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_EGLDBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_EGLDBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_EGLDBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_EGLDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_EGLDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_EGLDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_EGLDBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='EGLDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='EGLDBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_EGLDUSDT, '#', 'Покупаем', quantity_pair_a, 'EGLD', 'за', price_a, 'USDT', 'по цене', price_asks_g_EGLDUSDT) 
				print('Пара_B:', symbol_g_EGLDBTC, '#', 'Продаем', quantity_pair_b, 'EGLD', 'за', price_b, 'BTC', 'по цене', price_bids_g_EGLDBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_EGLDUSDT_EGLDBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_EGLDUSDT_EGLDBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_EGLDUSDT != 0.0 and qty_bids_g_EGLDUSDT != 0.0 and price_asks_g_EGLDUSDT != 0.0 and qty_asks_g_EGLDUSDT != 0.0 and price_bids_g_EGLDBUSD != 0.0 and qty_bids_g_EGLDBUSD != 0.0 and price_asks_g_EGLDBUSD != 0.0 and qty_asks_g_EGLDBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_EGLDBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_EGLDBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_EGLDBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_EGLDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_EGLDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_EGLDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_EGLDBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='EGLDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='EGLDBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_EGLDUSDT, '#', 'Покупаем', quantity_pair_a, 'EGLD', 'за', price_a, 'USDT', 'по цене', price_asks_g_EGLDUSDT) 
				print('Пара_B:', symbol_g_EGLDBUSD, '#', 'Продаем', quantity_pair_b, 'EGLD', 'за', price_b, 'BUSD', 'по цене', price_bids_g_EGLDBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_EGLDUSDT_EGLDBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_EGLDUSDT_EGLDEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_EGLDUSDT != 0.0 and qty_bids_g_EGLDUSDT != 0.0 and price_asks_g_EGLDUSDT != 0.0 and qty_asks_g_EGLDUSDT != 0.0 and price_bids_g_EGLDEUR != 0.0 and qty_bids_g_EGLDEUR != 0.0 and price_asks_g_EGLDEUR != 0.0 and qty_asks_g_EGLDEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_EGLDEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_EGLDEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_EGLDEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_EGLDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_EGLDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_EGLDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_EGLDEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='EGLDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='EGLDEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_EGLDUSDT, '#', 'Покупаем', quantity_pair_a, 'EGLD', 'за', price_a, 'USDT', 'по цене', price_asks_g_EGLDUSDT) 
				print('Пара_B:', symbol_g_EGLDEUR, '#', 'Продаем', quantity_pair_b, 'EGLD', 'за', price_b, 'EUR', 'по цене', price_bids_g_EGLDEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_EGLDUSDT_EGLDEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_EGLDUSDT_EGLDETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_EGLDUSDT != 0.0 and qty_bids_g_EGLDUSDT != 0.0 and price_asks_g_EGLDUSDT != 0.0 and qty_asks_g_EGLDUSDT != 0.0 and price_bids_g_EGLDETH != 0.0 and qty_bids_g_EGLDETH != 0.0 and price_asks_g_EGLDETH != 0.0 and qty_asks_g_EGLDETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_EGLDETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_EGLDETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_EGLDETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_EGLDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_EGLDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_EGLDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_EGLDETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='EGLDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='EGLDETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_EGLDUSDT, '#', 'Покупаем', quantity_pair_a, 'EGLD', 'за', price_a, 'USDT', 'по цене', price_asks_g_EGLDUSDT) 
				print('Пара_B:', symbol_g_EGLDETH, '#', 'Продаем', quantity_pair_b, 'EGLD', 'за', price_b, 'ETH', 'по цене', price_bids_g_EGLDETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_EGLDUSDT_EGLDETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_DIAUSDT_DIABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DIAUSDT != 0.0 and qty_bids_g_DIAUSDT != 0.0 and price_asks_g_DIAUSDT != 0.0 and qty_asks_g_DIAUSDT != 0.0 and price_bids_g_DIABTC != 0.0 and qty_bids_g_DIABTC != 0.0 and price_asks_g_DIABTC != 0.0 and qty_asks_g_DIABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DIABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DIABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DIABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DIAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DIAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DIAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DIABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DIAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DIABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DIAUSDT, '#', 'Покупаем', quantity_pair_a, 'DIA', 'за', price_a, 'USDT', 'по цене', price_asks_g_DIAUSDT) 
				print('Пара_B:', symbol_g_DIABTC, '#', 'Продаем', quantity_pair_b, 'DIA', 'за', price_b, 'BTC', 'по цене', price_bids_g_DIABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DIAUSDT_DIABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_DIAUSDT_DIABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DIAUSDT != 0.0 and qty_bids_g_DIAUSDT != 0.0 and price_asks_g_DIAUSDT != 0.0 and qty_asks_g_DIAUSDT != 0.0 and price_bids_g_DIABUSD != 0.0 and qty_bids_g_DIABUSD != 0.0 and price_asks_g_DIABUSD != 0.0 and qty_asks_g_DIABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DIABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DIABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DIABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DIAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DIAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DIAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DIABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DIAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DIABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DIAUSDT, '#', 'Покупаем', quantity_pair_a, 'DIA', 'за', price_a, 'USDT', 'по цене', price_asks_g_DIAUSDT) 
				print('Пара_B:', symbol_g_DIABUSD, '#', 'Продаем', quantity_pair_b, 'DIA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DIABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DIAUSDT_DIABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_RUNEUSDT_RUNEBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RUNEUSDT != 0.0 and qty_bids_g_RUNEUSDT != 0.0 and price_asks_g_RUNEUSDT != 0.0 and qty_asks_g_RUNEUSDT != 0.0 and price_bids_g_RUNEBNB != 0.0 and qty_bids_g_RUNEBNB != 0.0 and price_asks_g_RUNEBNB != 0.0 and qty_asks_g_RUNEBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RUNEBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RUNEBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RUNEBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RUNEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RUNEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RUNEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RUNEBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RUNEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RUNEBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RUNEUSDT, '#', 'Покупаем', quantity_pair_a, 'RUNE', 'за', price_a, 'USDT', 'по цене', price_asks_g_RUNEUSDT) 
				print('Пара_B:', symbol_g_RUNEBNB, '#', 'Продаем', quantity_pair_b, 'RUNE', 'за', price_b, 'BNB', 'по цене', price_bids_g_RUNEBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RUNEUSDT_RUNEBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_RUNEUSDT_RUNEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RUNEUSDT != 0.0 and qty_bids_g_RUNEUSDT != 0.0 and price_asks_g_RUNEUSDT != 0.0 and qty_asks_g_RUNEUSDT != 0.0 and price_bids_g_RUNEBTC != 0.0 and qty_bids_g_RUNEBTC != 0.0 and price_asks_g_RUNEBTC != 0.0 and qty_asks_g_RUNEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RUNEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RUNEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RUNEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RUNEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RUNEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RUNEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RUNEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RUNEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RUNEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RUNEUSDT, '#', 'Покупаем', quantity_pair_a, 'RUNE', 'за', price_a, 'USDT', 'по цене', price_asks_g_RUNEUSDT) 
				print('Пара_B:', symbol_g_RUNEBTC, '#', 'Продаем', quantity_pair_b, 'RUNE', 'за', price_b, 'BTC', 'по цене', price_bids_g_RUNEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RUNEUSDT_RUNEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_RUNEUSDT_RUNEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RUNEUSDT != 0.0 and qty_bids_g_RUNEUSDT != 0.0 and price_asks_g_RUNEUSDT != 0.0 and qty_asks_g_RUNEUSDT != 0.0 and price_bids_g_RUNEBUSD != 0.0 and qty_bids_g_RUNEBUSD != 0.0 and price_asks_g_RUNEBUSD != 0.0 and qty_asks_g_RUNEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RUNEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RUNEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RUNEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RUNEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RUNEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RUNEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RUNEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RUNEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RUNEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RUNEUSDT, '#', 'Покупаем', quantity_pair_a, 'RUNE', 'за', price_a, 'USDT', 'по цене', price_asks_g_RUNEUSDT) 
				print('Пара_B:', symbol_g_RUNEBUSD, '#', 'Продаем', quantity_pair_b, 'RUNE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_RUNEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RUNEUSDT_RUNEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_RUNEUSDT_RUNEGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RUNEUSDT != 0.0 and qty_bids_g_RUNEUSDT != 0.0 and price_asks_g_RUNEUSDT != 0.0 and qty_asks_g_RUNEUSDT != 0.0 and price_bids_g_RUNEGBP != 0.0 and qty_bids_g_RUNEGBP != 0.0 and price_asks_g_RUNEGBP != 0.0 and qty_asks_g_RUNEGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RUNEGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RUNEGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RUNEGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RUNEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RUNEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RUNEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RUNEGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RUNEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RUNEGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RUNEUSDT, '#', 'Покупаем', quantity_pair_a, 'RUNE', 'за', price_a, 'USDT', 'по цене', price_asks_g_RUNEUSDT) 
				print('Пара_B:', symbol_g_RUNEGBP, '#', 'Продаем', quantity_pair_b, 'RUNE', 'за', price_b, 'GBP', 'по цене', price_bids_g_RUNEGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RUNEUSDT_RUNEGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_RUNEUSDT_RUNEEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RUNEUSDT != 0.0 and qty_bids_g_RUNEUSDT != 0.0 and price_asks_g_RUNEUSDT != 0.0 and qty_asks_g_RUNEUSDT != 0.0 and price_bids_g_RUNEEUR != 0.0 and qty_bids_g_RUNEEUR != 0.0 and price_asks_g_RUNEEUR != 0.0 and qty_asks_g_RUNEEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RUNEEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RUNEEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RUNEEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RUNEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RUNEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RUNEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RUNEEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RUNEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RUNEEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RUNEUSDT, '#', 'Покупаем', quantity_pair_a, 'RUNE', 'за', price_a, 'USDT', 'по цене', price_asks_g_RUNEUSDT) 
				print('Пара_B:', symbol_g_RUNEEUR, '#', 'Продаем', quantity_pair_b, 'RUNE', 'за', price_b, 'EUR', 'по цене', price_bids_g_RUNEEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RUNEUSDT_RUNEEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_RUNEUSDT_RUNEETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RUNEUSDT != 0.0 and qty_bids_g_RUNEUSDT != 0.0 and price_asks_g_RUNEUSDT != 0.0 and qty_asks_g_RUNEUSDT != 0.0 and price_bids_g_RUNEETH != 0.0 and qty_bids_g_RUNEETH != 0.0 and price_asks_g_RUNEETH != 0.0 and qty_asks_g_RUNEETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RUNEETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RUNEETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RUNEETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RUNEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RUNEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RUNEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RUNEETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RUNEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RUNEETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RUNEUSDT, '#', 'Покупаем', quantity_pair_a, 'RUNE', 'за', price_a, 'USDT', 'по цене', price_asks_g_RUNEUSDT) 
				print('Пара_B:', symbol_g_RUNEETH, '#', 'Продаем', quantity_pair_b, 'RUNE', 'за', price_b, 'ETH', 'по цене', price_bids_g_RUNEETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RUNEUSDT_RUNEETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_FIOUSDT_FIOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FIOUSDT != 0.0 and qty_bids_g_FIOUSDT != 0.0 and price_asks_g_FIOUSDT != 0.0 and qty_asks_g_FIOUSDT != 0.0 and price_bids_g_FIOBTC != 0.0 and qty_bids_g_FIOBTC != 0.0 and price_asks_g_FIOBTC != 0.0 and qty_asks_g_FIOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FIOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FIOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FIOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FIOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FIOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FIOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FIOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FIOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FIOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FIOUSDT, '#', 'Покупаем', quantity_pair_a, 'FIO', 'за', price_a, 'USDT', 'по цене', price_asks_g_FIOUSDT) 
				print('Пара_B:', symbol_g_FIOBTC, '#', 'Продаем', quantity_pair_b, 'FIO', 'за', price_b, 'BTC', 'по цене', price_bids_g_FIOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FIOUSDT_FIOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_FIOUSDT_FIOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FIOUSDT != 0.0 and qty_bids_g_FIOUSDT != 0.0 and price_asks_g_FIOUSDT != 0.0 and qty_asks_g_FIOUSDT != 0.0 and price_bids_g_FIOBUSD != 0.0 and qty_bids_g_FIOBUSD != 0.0 and price_asks_g_FIOBUSD != 0.0 and qty_asks_g_FIOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FIOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FIOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FIOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FIOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FIOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FIOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FIOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FIOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FIOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FIOUSDT, '#', 'Покупаем', quantity_pair_a, 'FIO', 'за', price_a, 'USDT', 'по цене', price_asks_g_FIOUSDT) 
				print('Пара_B:', symbol_g_FIOBUSD, '#', 'Продаем', quantity_pair_b, 'FIO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FIOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FIOUSDT_FIOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_UMAUSDT_UMABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_UMAUSDT != 0.0 and qty_bids_g_UMAUSDT != 0.0 and price_asks_g_UMAUSDT != 0.0 and qty_asks_g_UMAUSDT != 0.0 and price_bids_g_UMABTC != 0.0 and qty_bids_g_UMABTC != 0.0 and price_asks_g_UMABTC != 0.0 and qty_asks_g_UMABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_UMABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_UMABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_UMABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_UMAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_UMAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_UMAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_UMABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='UMAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='UMABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_UMAUSDT, '#', 'Покупаем', quantity_pair_a, 'UMA', 'за', price_a, 'USDT', 'по цене', price_asks_g_UMAUSDT) 
				print('Пара_B:', symbol_g_UMABTC, '#', 'Продаем', quantity_pair_b, 'UMA', 'за', price_b, 'BTC', 'по цене', price_bids_g_UMABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_UMAUSDT_UMABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_UMAUSDT_UMABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_UMAUSDT != 0.0 and qty_bids_g_UMAUSDT != 0.0 and price_asks_g_UMAUSDT != 0.0 and qty_asks_g_UMAUSDT != 0.0 and price_bids_g_UMABUSD != 0.0 and qty_bids_g_UMABUSD != 0.0 and price_asks_g_UMABUSD != 0.0 and qty_asks_g_UMABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_UMABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_UMABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_UMABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_UMAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_UMAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_UMAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_UMABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='UMAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='UMABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_UMAUSDT, '#', 'Покупаем', quantity_pair_a, 'UMA', 'за', price_a, 'USDT', 'по цене', price_asks_g_UMAUSDT) 
				print('Пара_B:', symbol_g_UMABUSD, '#', 'Продаем', quantity_pair_b, 'UMA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_UMABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_UMAUSDT_UMABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BELUSDT_BELBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BELUSDT != 0.0 and qty_bids_g_BELUSDT != 0.0 and price_asks_g_BELUSDT != 0.0 and qty_asks_g_BELUSDT != 0.0 and price_bids_g_BELBNB != 0.0 and qty_bids_g_BELBNB != 0.0 and price_asks_g_BELBNB != 0.0 and qty_asks_g_BELBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BELBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BELBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BELBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BELUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BELUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BELUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BELBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BELUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BELBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BELUSDT, '#', 'Покупаем', quantity_pair_a, 'BEL', 'за', price_a, 'USDT', 'по цене', price_asks_g_BELUSDT) 
				print('Пара_B:', symbol_g_BELBNB, '#', 'Продаем', quantity_pair_b, 'BEL', 'за', price_b, 'BNB', 'по цене', price_bids_g_BELBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BELUSDT_BELBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_BELUSDT_BELBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BELUSDT != 0.0 and qty_bids_g_BELUSDT != 0.0 and price_asks_g_BELUSDT != 0.0 and qty_asks_g_BELUSDT != 0.0 and price_bids_g_BELBTC != 0.0 and qty_bids_g_BELBTC != 0.0 and price_asks_g_BELBTC != 0.0 and qty_asks_g_BELBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BELBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BELBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BELBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BELUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BELUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BELUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BELBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BELUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BELBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BELUSDT, '#', 'Покупаем', quantity_pair_a, 'BEL', 'за', price_a, 'USDT', 'по цене', price_asks_g_BELUSDT) 
				print('Пара_B:', symbol_g_BELBTC, '#', 'Продаем', quantity_pair_b, 'BEL', 'за', price_b, 'BTC', 'по цене', price_bids_g_BELBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BELUSDT_BELBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BELUSDT_BELBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BELUSDT != 0.0 and qty_bids_g_BELUSDT != 0.0 and price_asks_g_BELUSDT != 0.0 and qty_asks_g_BELUSDT != 0.0 and price_bids_g_BELBUSD != 0.0 and qty_bids_g_BELBUSD != 0.0 and price_asks_g_BELBUSD != 0.0 and qty_asks_g_BELBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BELBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BELBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BELBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BELUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BELUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BELUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BELBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BELUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BELBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BELUSDT, '#', 'Покупаем', quantity_pair_a, 'BEL', 'за', price_a, 'USDT', 'по цене', price_asks_g_BELUSDT) 
				print('Пара_B:', symbol_g_BELBUSD, '#', 'Продаем', quantity_pair_b, 'BEL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BELBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BELUSDT_BELBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BELUSDT_BELETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BELUSDT != 0.0 and qty_bids_g_BELUSDT != 0.0 and price_asks_g_BELUSDT != 0.0 and qty_asks_g_BELUSDT != 0.0 and price_bids_g_BELETH != 0.0 and qty_bids_g_BELETH != 0.0 and price_asks_g_BELETH != 0.0 and qty_asks_g_BELETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BELETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BELETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BELETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BELUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BELUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BELUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BELETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BELUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BELETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BELUSDT, '#', 'Покупаем', quantity_pair_a, 'BEL', 'за', price_a, 'USDT', 'по цене', price_asks_g_BELUSDT) 
				print('Пара_B:', symbol_g_BELETH, '#', 'Продаем', quantity_pair_b, 'BEL', 'за', price_b, 'ETH', 'по цене', price_bids_g_BELETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BELUSDT_BELETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_WINGUSDT_WINGBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WINGUSDT != 0.0 and qty_bids_g_WINGUSDT != 0.0 and price_asks_g_WINGUSDT != 0.0 and qty_asks_g_WINGUSDT != 0.0 and price_bids_g_WINGBTC != 0.0 and qty_bids_g_WINGBTC != 0.0 and price_asks_g_WINGBTC != 0.0 and qty_asks_g_WINGBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WINGBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WINGBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WINGBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WINGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WINGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WINGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WINGBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WINGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WINGBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WINGUSDT, '#', 'Покупаем', quantity_pair_a, 'WING', 'за', price_a, 'USDT', 'по цене', price_asks_g_WINGUSDT) 
				print('Пара_B:', symbol_g_WINGBTC, '#', 'Продаем', quantity_pair_b, 'WING', 'за', price_b, 'BTC', 'по цене', price_bids_g_WINGBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WINGUSDT_WINGBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_WINGUSDT_WINGBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WINGUSDT != 0.0 and qty_bids_g_WINGUSDT != 0.0 and price_asks_g_WINGUSDT != 0.0 and qty_asks_g_WINGUSDT != 0.0 and price_bids_g_WINGBUSD != 0.0 and qty_bids_g_WINGBUSD != 0.0 and price_asks_g_WINGBUSD != 0.0 and qty_asks_g_WINGBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WINGBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WINGBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WINGBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WINGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WINGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WINGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WINGBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WINGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WINGBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WINGUSDT, '#', 'Покупаем', quantity_pair_a, 'WING', 'за', price_a, 'USDT', 'по цене', price_asks_g_WINGUSDT) 
				print('Пара_B:', symbol_g_WINGBUSD, '#', 'Продаем', quantity_pair_b, 'WING', 'за', price_b, 'BUSD', 'по цене', price_bids_g_WINGBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WINGUSDT_WINGBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_WINGUSDT_WINGETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WINGUSDT != 0.0 and qty_bids_g_WINGUSDT != 0.0 and price_asks_g_WINGUSDT != 0.0 and qty_asks_g_WINGUSDT != 0.0 and price_bids_g_WINGETH != 0.0 and qty_bids_g_WINGETH != 0.0 and price_asks_g_WINGETH != 0.0 and qty_asks_g_WINGETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WINGETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WINGETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WINGETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WINGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WINGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WINGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WINGETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WINGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WINGETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WINGUSDT, '#', 'Покупаем', quantity_pair_a, 'WING', 'за', price_a, 'USDT', 'по цене', price_asks_g_WINGUSDT) 
				print('Пара_B:', symbol_g_WINGETH, '#', 'Продаем', quantity_pair_b, 'WING', 'за', price_b, 'ETH', 'по цене', price_bids_g_WINGETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WINGUSDT_WINGETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_UNIUSDT_UNIBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_UNIUSDT != 0.0 and qty_bids_g_UNIUSDT != 0.0 and price_asks_g_UNIUSDT != 0.0 and qty_asks_g_UNIUSDT != 0.0 and price_bids_g_UNIBNB != 0.0 and qty_bids_g_UNIBNB != 0.0 and price_asks_g_UNIBNB != 0.0 and qty_asks_g_UNIBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_UNIBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_UNIBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_UNIBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_UNIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_UNIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_UNIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_UNIBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='UNIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='UNIBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_UNIUSDT, '#', 'Покупаем', quantity_pair_a, 'UNI', 'за', price_a, 'USDT', 'по цене', price_asks_g_UNIUSDT) 
				print('Пара_B:', symbol_g_UNIBNB, '#', 'Продаем', quantity_pair_b, 'UNI', 'за', price_b, 'BNB', 'по цене', price_bids_g_UNIBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_UNIUSDT_UNIBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_UNIUSDT_UNIBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_UNIUSDT != 0.0 and qty_bids_g_UNIUSDT != 0.0 and price_asks_g_UNIUSDT != 0.0 and qty_asks_g_UNIUSDT != 0.0 and price_bids_g_UNIBTC != 0.0 and qty_bids_g_UNIBTC != 0.0 and price_asks_g_UNIBTC != 0.0 and qty_asks_g_UNIBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_UNIBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_UNIBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_UNIBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_UNIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_UNIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_UNIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_UNIBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='UNIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='UNIBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_UNIUSDT, '#', 'Покупаем', quantity_pair_a, 'UNI', 'за', price_a, 'USDT', 'по цене', price_asks_g_UNIUSDT) 
				print('Пара_B:', symbol_g_UNIBTC, '#', 'Продаем', quantity_pair_b, 'UNI', 'за', price_b, 'BTC', 'по цене', price_bids_g_UNIBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_UNIUSDT_UNIBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_UNIUSDT_UNIBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_UNIUSDT != 0.0 and qty_bids_g_UNIUSDT != 0.0 and price_asks_g_UNIUSDT != 0.0 and qty_asks_g_UNIUSDT != 0.0 and price_bids_g_UNIBUSD != 0.0 and qty_bids_g_UNIBUSD != 0.0 and price_asks_g_UNIBUSD != 0.0 and qty_asks_g_UNIBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_UNIBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_UNIBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_UNIBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_UNIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_UNIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_UNIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_UNIBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='UNIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='UNIBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_UNIUSDT, '#', 'Покупаем', quantity_pair_a, 'UNI', 'за', price_a, 'USDT', 'по цене', price_asks_g_UNIUSDT) 
				print('Пара_B:', symbol_g_UNIBUSD, '#', 'Продаем', quantity_pair_b, 'UNI', 'за', price_b, 'BUSD', 'по цене', price_bids_g_UNIBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_UNIUSDT_UNIBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_UNIUSDT_UNIEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_UNIUSDT != 0.0 and qty_bids_g_UNIUSDT != 0.0 and price_asks_g_UNIUSDT != 0.0 and qty_asks_g_UNIUSDT != 0.0 and price_bids_g_UNIEUR != 0.0 and qty_bids_g_UNIEUR != 0.0 and price_asks_g_UNIEUR != 0.0 and qty_asks_g_UNIEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_UNIEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_UNIEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_UNIEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_UNIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_UNIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_UNIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_UNIEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='UNIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='UNIEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_UNIUSDT, '#', 'Покупаем', quantity_pair_a, 'UNI', 'за', price_a, 'USDT', 'по цене', price_asks_g_UNIUSDT) 
				print('Пара_B:', symbol_g_UNIEUR, '#', 'Продаем', quantity_pair_b, 'UNI', 'за', price_b, 'EUR', 'по цене', price_bids_g_UNIEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_UNIUSDT_UNIEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_UNIUSDT_UNIETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_UNIUSDT != 0.0 and qty_bids_g_UNIUSDT != 0.0 and price_asks_g_UNIUSDT != 0.0 and qty_asks_g_UNIUSDT != 0.0 and price_bids_g_UNIETH != 0.0 and qty_bids_g_UNIETH != 0.0 and price_asks_g_UNIETH != 0.0 and qty_asks_g_UNIETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_UNIETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_UNIETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_UNIETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_UNIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_UNIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_UNIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_UNIETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='UNIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='UNIETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_UNIUSDT, '#', 'Покупаем', quantity_pair_a, 'UNI', 'за', price_a, 'USDT', 'по цене', price_asks_g_UNIUSDT) 
				print('Пара_B:', symbol_g_UNIETH, '#', 'Продаем', quantity_pair_b, 'UNI', 'за', price_b, 'ETH', 'по цене', price_bids_g_UNIETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_UNIUSDT_UNIETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_OXTUSDT_OXTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OXTUSDT != 0.0 and qty_bids_g_OXTUSDT != 0.0 and price_asks_g_OXTUSDT != 0.0 and qty_asks_g_OXTUSDT != 0.0 and price_bids_g_OXTBTC != 0.0 and qty_bids_g_OXTBTC != 0.0 and price_asks_g_OXTBTC != 0.0 and qty_asks_g_OXTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OXTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OXTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OXTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OXTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OXTUSDT))

			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OXTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OXTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OXTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OXTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OXTUSDT, '#', 'Покупаем', quantity_pair_a, 'OXT', 'за', price_a, 'USDT', 'по цене', price_asks_g_OXTUSDT) 
				print('Пара_B:', symbol_g_OXTBTC, '#', 'Продаем', quantity_pair_b, 'OXT', 'за', price_b, 'BTC', 'по цене', price_bids_g_OXTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OXTUSDT_OXTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_OXTUSDT_OXTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OXTUSDT != 0.0 and qty_bids_g_OXTUSDT != 0.0 and price_asks_g_OXTUSDT != 0.0 and qty_asks_g_OXTUSDT != 0.0 and price_bids_g_OXTBUSD != 0.0 and qty_bids_g_OXTBUSD != 0.0 and price_asks_g_OXTBUSD != 0.0 and qty_asks_g_OXTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OXTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OXTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OXTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OXTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OXTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OXTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OXTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OXTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OXTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OXTUSDT, '#', 'Покупаем', quantity_pair_a, 'OXT', 'за', price_a, 'USDT', 'по цене', price_asks_g_OXTUSDT) 
				print('Пара_B:', symbol_g_OXTBUSD, '#', 'Продаем', quantity_pair_b, 'OXT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_OXTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OXTUSDT_OXTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SUNUSDT_SUNBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SUNUSDT != 0.0 and qty_bids_g_SUNUSDT != 0.0 and price_asks_g_SUNUSDT != 0.0 and qty_asks_g_SUNUSDT != 0.0 and price_bids_g_SUNBUSD != 0.0 and qty_bids_g_SUNBUSD != 0.0 and price_asks_g_SUNBUSD != 0.0 and qty_asks_g_SUNBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SUNBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SUNBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SUNBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SUNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SUNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SUNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SUNBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SUNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SUNBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SUNUSDT, '#', 'Покупаем', quantity_pair_a, 'SUN', 'за', price_a, 'USDT', 'по цене', price_asks_g_SUNUSDT) 
				print('Пара_B:', symbol_g_SUNBUSD, '#', 'Продаем', quantity_pair_b, 'SUN', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SUNBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SUNUSDT_SUNBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_AVAXUSDT_AVAXBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AVAXUSDT != 0.0 and qty_bids_g_AVAXUSDT != 0.0 and price_asks_g_AVAXUSDT != 0.0 and qty_asks_g_AVAXUSDT != 0.0 and price_bids_g_AVAXBNB != 0.0 and qty_bids_g_AVAXBNB != 0.0 and price_asks_g_AVAXBNB != 0.0 and qty_asks_g_AVAXBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AVAXBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AVAXBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AVAXBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AVAXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AVAXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AVAXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AVAXBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AVAXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AVAXBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AVAXUSDT, '#', 'Покупаем', quantity_pair_a, 'AVAX', 'за', price_a, 'USDT', 'по цене', price_asks_g_AVAXUSDT) 
				print('Пара_B:', symbol_g_AVAXBNB, '#', 'Продаем', quantity_pair_b, 'AVAX', 'за', price_b, 'BNB', 'по цене', price_bids_g_AVAXBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AVAXUSDT_AVAXBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_AVAXUSDT_AVAXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AVAXUSDT != 0.0 and qty_bids_g_AVAXUSDT != 0.0 and price_asks_g_AVAXUSDT != 0.0 and qty_asks_g_AVAXUSDT != 0.0 and price_bids_g_AVAXBTC != 0.0 and qty_bids_g_AVAXBTC != 0.0 and price_asks_g_AVAXBTC != 0.0 and qty_asks_g_AVAXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AVAXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AVAXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AVAXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AVAXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AVAXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AVAXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AVAXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AVAXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AVAXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AVAXUSDT, '#', 'Покупаем', quantity_pair_a, 'AVAX', 'за', price_a, 'USDT', 'по цене', price_asks_g_AVAXUSDT) 
				print('Пара_B:', symbol_g_AVAXBTC, '#', 'Продаем', quantity_pair_b, 'AVAX', 'за', price_b, 'BTC', 'по цене', price_bids_g_AVAXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AVAXUSDT_AVAXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_AVAXUSDT_AVAXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AVAXUSDT != 0.0 and qty_bids_g_AVAXUSDT != 0.0 and price_asks_g_AVAXUSDT != 0.0 and qty_asks_g_AVAXUSDT != 0.0 and price_bids_g_AVAXBUSD != 0.0 and qty_bids_g_AVAXBUSD != 0.0 and price_asks_g_AVAXBUSD != 0.0 and qty_asks_g_AVAXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AVAXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AVAXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AVAXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AVAXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AVAXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AVAXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AVAXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AVAXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AVAXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AVAXUSDT, '#', 'Покупаем', quantity_pair_a, 'AVAX', 'за', price_a, 'USDT', 'по цене', price_asks_g_AVAXUSDT) 
				print('Пара_B:', symbol_g_AVAXBUSD, '#', 'Продаем', quantity_pair_b, 'AVAX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_AVAXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AVAXUSDT_AVAXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_AVAXUSDT_AVAXEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AVAXUSDT != 0.0 and qty_bids_g_AVAXUSDT != 0.0 and price_asks_g_AVAXUSDT != 0.0 and qty_asks_g_AVAXUSDT != 0.0 and price_bids_g_AVAXEUR != 0.0 and qty_bids_g_AVAXEUR != 0.0 and price_asks_g_AVAXEUR != 0.0 and qty_asks_g_AVAXEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AVAXEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AVAXEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AVAXEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AVAXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AVAXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AVAXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AVAXEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AVAXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AVAXEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AVAXUSDT, '#', 'Покупаем', quantity_pair_a, 'AVAX', 'за', price_a, 'USDT', 'по цене', price_asks_g_AVAXUSDT) 
				print('Пара_B:', symbol_g_AVAXEUR, '#', 'Продаем', quantity_pair_b, 'AVAX', 'за', price_b, 'EUR', 'по цене', price_bids_g_AVAXEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AVAXUSDT_AVAXEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_AVAXUSDT_AVAXAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AVAXUSDT != 0.0 and qty_bids_g_AVAXUSDT != 0.0 and price_asks_g_AVAXUSDT != 0.0 and qty_asks_g_AVAXUSDT != 0.0 and price_bids_g_AVAXAUD != 0.0 and qty_bids_g_AVAXAUD != 0.0 and price_asks_g_AVAXAUD != 0.0 and qty_asks_g_AVAXAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AVAXAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AVAXAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AVAXAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AVAXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AVAXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AVAXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AVAXAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AVAXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AVAXAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AVAXUSDT, '#', 'Покупаем', quantity_pair_a, 'AVAX', 'за', price_a, 'USDT', 'по цене', price_asks_g_AVAXUSDT) 
				print('Пара_B:', symbol_g_AVAXAUD, '#', 'Продаем', quantity_pair_b, 'AVAX', 'за', price_b, 'AUD', 'по цене', price_bids_g_AVAXAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AVAXUSDT_AVAXAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_AVAXUSDT_AVAXETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AVAXUSDT != 0.0 and qty_bids_g_AVAXUSDT != 0.0 and price_asks_g_AVAXUSDT != 0.0 and qty_asks_g_AVAXUSDT != 0.0 and price_bids_g_AVAXETH != 0.0 and qty_bids_g_AVAXETH != 0.0 and price_asks_g_AVAXETH != 0.0 and qty_asks_g_AVAXETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AVAXETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AVAXETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AVAXETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AVAXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AVAXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AVAXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AVAXETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AVAXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AVAXETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AVAXUSDT, '#', 'Покупаем', quantity_pair_a, 'AVAX', 'за', price_a, 'USDT', 'по цене', price_asks_g_AVAXUSDT) 
				print('Пара_B:', symbol_g_AVAXETH, '#', 'Продаем', quantity_pair_b, 'AVAX', 'за', price_b, 'ETH', 'по цене', price_bids_g_AVAXETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AVAXUSDT_AVAXETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_AVAXUSDT_AVAXGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AVAXUSDT != 0.0 and qty_bids_g_AVAXUSDT != 0.0 and price_asks_g_AVAXUSDT != 0.0 and qty_asks_g_AVAXUSDT != 0.0 and price_bids_g_AVAXGBP != 0.0 and qty_bids_g_AVAXGBP != 0.0 and price_asks_g_AVAXGBP != 0.0 and qty_asks_g_AVAXGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AVAXGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AVAXGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AVAXGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AVAXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AVAXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AVAXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AVAXGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AVAXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AVAXGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AVAXUSDT, '#', 'Покупаем', quantity_pair_a, 'AVAX', 'за', price_a, 'USDT', 'по цене', price_asks_g_AVAXUSDT) 
				print('Пара_B:', symbol_g_AVAXGBP, '#', 'Продаем', quantity_pair_b, 'AVAX', 'за', price_b, 'GBP', 'по цене', price_bids_g_AVAXGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AVAXUSDT_AVAXGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_FLMUSDT_FLMBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FLMUSDT != 0.0 and qty_bids_g_FLMUSDT != 0.0 and price_asks_g_FLMUSDT != 0.0 and qty_asks_g_FLMUSDT != 0.0 and price_bids_g_FLMBTC != 0.0 and qty_bids_g_FLMBTC != 0.0 and price_asks_g_FLMBTC != 0.0 and qty_asks_g_FLMBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FLMBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FLMBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FLMBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FLMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FLMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FLMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FLMBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FLMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FLMBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FLMUSDT, '#', 'Покупаем', quantity_pair_a, 'FLM', 'за', price_a, 'USDT', 'по цене', price_asks_g_FLMUSDT) 
				print('Пара_B:', symbol_g_FLMBTC, '#', 'Продаем', quantity_pair_b, 'FLM', 'за', price_b, 'BTC', 'по цене', price_bids_g_FLMBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FLMUSDT_FLMBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ORNUSDT_ORNBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ORNUSDT != 0.0 and qty_bids_g_ORNUSDT != 0.0 and price_asks_g_ORNUSDT != 0.0 and qty_asks_g_ORNUSDT != 0.0 and price_bids_g_ORNBTC != 0.0 and qty_bids_g_ORNBTC != 0.0 and price_asks_g_ORNBTC != 0.0 and qty_asks_g_ORNBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ORNBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ORNBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ORNBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ORNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ORNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ORNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ORNBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ORNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ORNBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ORNUSDT, '#', 'Покупаем', quantity_pair_a, 'ORN', 'за', price_a, 'USDT', 'по цене', price_asks_g_ORNUSDT) 
				print('Пара_B:', symbol_g_ORNBTC, '#', 'Продаем', quantity_pair_b, 'ORN', 'за', price_b, 'BTC', 'по цене', price_bids_g_ORNBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ORNUSDT_ORNBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ORNUSDT_ORNBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ORNUSDT != 0.0 and qty_bids_g_ORNUSDT != 0.0 and price_asks_g_ORNUSDT != 0.0 and qty_asks_g_ORNUSDT != 0.0 and price_bids_g_ORNBUSD != 0.0 and qty_bids_g_ORNBUSD != 0.0 and price_asks_g_ORNBUSD != 0.0 and qty_asks_g_ORNBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ORNBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ORNBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ORNBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ORNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ORNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ORNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ORNBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ORNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ORNBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ORNUSDT, '#', 'Покупаем', quantity_pair_a, 'ORN', 'за', price_a, 'USDT', 'по цене', price_asks_g_ORNUSDT) 
				print('Пара_B:', symbol_g_ORNBUSD, '#', 'Продаем', quantity_pair_b, 'ORN', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ORNBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ORNUSDT_ORNBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_UTKUSDT_UTKBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_UTKUSDT != 0.0 and qty_bids_g_UTKUSDT != 0.0 and price_asks_g_UTKUSDT != 0.0 and qty_asks_g_UTKUSDT != 0.0 and price_bids_g_UTKBTC != 0.0 and qty_bids_g_UTKBTC != 0.0 and price_asks_g_UTKBTC != 0.0 and qty_asks_g_UTKBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_UTKBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_UTKBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_UTKBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_UTKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_UTKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_UTKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_UTKBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='UTKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='UTKBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_UTKUSDT, '#', 'Покупаем', quantity_pair_a, 'UTK', 'за', price_a, 'USDT', 'по цене', price_asks_g_UTKUSDT) 
				print('Пара_B:', symbol_g_UTKBTC, '#', 'Продаем', quantity_pair_b, 'UTK', 'за', price_b, 'BTC', 'по цене', price_bids_g_UTKBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_UTKUSDT_UTKBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_UTKUSDT_UTKBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_UTKUSDT != 0.0 and qty_bids_g_UTKUSDT != 0.0 and price_asks_g_UTKUSDT != 0.0 and qty_asks_g_UTKUSDT != 0.0 and price_bids_g_UTKBUSD != 0.0 and qty_bids_g_UTKBUSD != 0.0 and price_asks_g_UTKBUSD != 0.0 and qty_asks_g_UTKBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_UTKBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_UTKBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_UTKBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_UTKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_UTKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_UTKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_UTKBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='UTKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='UTKBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_UTKUSDT, '#', 'Покупаем', quantity_pair_a, 'UTK', 'за', price_a, 'USDT', 'по цене', price_asks_g_UTKUSDT) 
				print('Пара_B:', symbol_g_UTKBUSD, '#', 'Продаем', quantity_pair_b, 'UTK', 'за', price_b, 'BUSD', 'по цене', price_bids_g_UTKBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_UTKUSDT_UTKBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_XVSUSDT_XVSBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XVSUSDT != 0.0 and qty_bids_g_XVSUSDT != 0.0 and price_asks_g_XVSUSDT != 0.0 and qty_asks_g_XVSUSDT != 0.0 and price_bids_g_XVSBNB != 0.0 and qty_bids_g_XVSBNB != 0.0 and price_asks_g_XVSBNB != 0.0 and qty_asks_g_XVSBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XVSBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XVSBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XVSBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XVSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XVSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XVSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XVSBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XVSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XVSBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XVSUSDT, '#', 'Покупаем', quantity_pair_a, 'XVS', 'за', price_a, 'USDT', 'по цене', price_asks_g_XVSUSDT) 
				print('Пара_B:', symbol_g_XVSBNB, '#', 'Продаем', quantity_pair_b, 'XVS', 'за', price_b, 'BNB', 'по цене', price_bids_g_XVSBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XVSUSDT_XVSBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_XVSUSDT_XVSBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XVSUSDT != 0.0 and qty_bids_g_XVSUSDT != 0.0 and price_asks_g_XVSUSDT != 0.0 and qty_asks_g_XVSUSDT != 0.0 and price_bids_g_XVSBTC != 0.0 and qty_bids_g_XVSBTC != 0.0 and price_asks_g_XVSBTC != 0.0 and qty_asks_g_XVSBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XVSBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XVSBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XVSBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XVSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XVSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XVSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XVSBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XVSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XVSBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XVSUSDT, '#', 'Покупаем', quantity_pair_a, 'XVS', 'за', price_a, 'USDT', 'по цене', price_asks_g_XVSUSDT) 
				print('Пара_B:', symbol_g_XVSBTC, '#', 'Продаем', quantity_pair_b, 'XVS', 'за', price_b, 'BTC', 'по цене', price_bids_g_XVSBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XVSUSDT_XVSBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_XVSUSDT_XVSBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XVSUSDT != 0.0 and qty_bids_g_XVSUSDT != 0.0 and price_asks_g_XVSUSDT != 0.0 and qty_asks_g_XVSUSDT != 0.0 and price_bids_g_XVSBUSD != 0.0 and qty_bids_g_XVSBUSD != 0.0 and price_asks_g_XVSBUSD != 0.0 and qty_asks_g_XVSBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XVSBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XVSBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XVSBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XVSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XVSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XVSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XVSBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XVSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XVSBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XVSUSDT, '#', 'Покупаем', quantity_pair_a, 'XVS', 'за', price_a, 'USDT', 'по цене', price_asks_g_XVSUSDT) 
				print('Пара_B:', symbol_g_XVSBUSD, '#', 'Продаем', quantity_pair_b, 'XVS', 'за', price_b, 'BUSD', 'по цене', price_bids_g_XVSBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XVSUSDT_XVSBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ALPHAUSDT_ALPHABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALPHAUSDT != 0.0 and qty_bids_g_ALPHAUSDT != 0.0 and price_asks_g_ALPHAUSDT != 0.0 and qty_asks_g_ALPHAUSDT != 0.0 and price_bids_g_ALPHABTC != 0.0 and qty_bids_g_ALPHABTC != 0.0 and price_asks_g_ALPHABTC != 0.0 and qty_asks_g_ALPHABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALPHABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALPHABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALPHABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALPHAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALPHAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALPHAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALPHABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALPHAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALPHABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALPHAUSDT, '#', 'Покупаем', quantity_pair_a, 'ALPHA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALPHAUSDT) 
				print('Пара_B:', symbol_g_ALPHABTC, '#', 'Продаем', quantity_pair_b, 'ALPHA', 'за', price_b, 'BTC', 'по цене', price_bids_g_ALPHABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALPHAUSDT_ALPHABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ALPHAUSDT_ALPHABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALPHAUSDT != 0.0 and qty_bids_g_ALPHAUSDT != 0.0 and price_asks_g_ALPHAUSDT != 0.0 and qty_asks_g_ALPHAUSDT != 0.0 and price_bids_g_ALPHABUSD != 0.0 and qty_bids_g_ALPHABUSD != 0.0 and price_asks_g_ALPHABUSD != 0.0 and qty_asks_g_ALPHABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALPHABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALPHABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALPHABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALPHAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALPHAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALPHAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALPHABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALPHAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALPHABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALPHAUSDT, '#', 'Покупаем', quantity_pair_a, 'ALPHA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALPHAUSDT) 
				print('Пара_B:', symbol_g_ALPHABUSD, '#', 'Продаем', quantity_pair_b, 'ALPHA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ALPHABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALPHAUSDT_ALPHABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_AAVEUSDT_AAVEBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AAVEUSDT != 0.0 and qty_bids_g_AAVEUSDT != 0.0 and price_asks_g_AAVEUSDT != 0.0 and qty_asks_g_AAVEUSDT != 0.0 and price_bids_g_AAVEBNB != 0.0 and qty_bids_g_AAVEBNB != 0.0 and price_asks_g_AAVEBNB != 0.0 and qty_asks_g_AAVEBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AAVEBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AAVEBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AAVEBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AAVEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AAVEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AAVEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AAVEBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AAVEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AAVEBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AAVEUSDT, '#', 'Покупаем', quantity_pair_a, 'AAVE', 'за', price_a, 'USDT', 'по цене', price_asks_g_AAVEUSDT) 
				print('Пара_B:', symbol_g_AAVEBNB, '#', 'Продаем', quantity_pair_b, 'AAVE', 'за', price_b, 'BNB', 'по цене', price_bids_g_AAVEBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AAVEUSDT_AAVEBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_AAVEUSDT_AAVEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AAVEUSDT != 0.0 and qty_bids_g_AAVEUSDT != 0.0 and price_asks_g_AAVEUSDT != 0.0 and qty_asks_g_AAVEUSDT != 0.0 and price_bids_g_AAVEBTC != 0.0 and qty_bids_g_AAVEBTC != 0.0 and price_asks_g_AAVEBTC != 0.0 and qty_asks_g_AAVEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AAVEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AAVEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AAVEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AAVEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AAVEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AAVEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AAVEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AAVEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AAVEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AAVEUSDT, '#', 'Покупаем', quantity_pair_a, 'AAVE', 'за', price_a, 'USDT', 'по цене', price_asks_g_AAVEUSDT) 
				print('Пара_B:', symbol_g_AAVEBTC, '#', 'Продаем', quantity_pair_b, 'AAVE', 'за', price_b, 'BTC', 'по цене', price_bids_g_AAVEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AAVEUSDT_AAVEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_AAVEUSDT_AAVEETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AAVEUSDT != 0.0 and qty_bids_g_AAVEUSDT != 0.0 and price_asks_g_AAVEUSDT != 0.0 and qty_asks_g_AAVEUSDT != 0.0 and price_bids_g_AAVEETH != 0.0 and qty_bids_g_AAVEETH != 0.0 and price_asks_g_AAVEETH != 0.0 and qty_asks_g_AAVEETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AAVEETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AAVEETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AAVEETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AAVEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AAVEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AAVEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AAVEETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AAVEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AAVEETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AAVEUSDT, '#', 'Покупаем', quantity_pair_a, 'AAVE', 'за', price_a, 'USDT', 'по цене', price_asks_g_AAVEUSDT) 
				print('Пара_B:', symbol_g_AAVEETH, '#', 'Продаем', quantity_pair_b, 'AAVE', 'за', price_b, 'ETH', 'по цене', price_bids_g_AAVEETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AAVEUSDT_AAVEETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_AAVEUSDT_AAVEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AAVEUSDT != 0.0 and qty_bids_g_AAVEUSDT != 0.0 and price_asks_g_AAVEUSDT != 0.0 and qty_asks_g_AAVEUSDT != 0.0 and price_bids_g_AAVEBUSD != 0.0 and qty_bids_g_AAVEBUSD != 0.0 and price_asks_g_AAVEBUSD != 0.0 and qty_asks_g_AAVEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AAVEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AAVEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AAVEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AAVEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AAVEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AAVEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AAVEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AAVEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AAVEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AAVEUSDT, '#', 'Покупаем', quantity_pair_a, 'AAVE', 'за', price_a, 'USDT', 'по цене', price_asks_g_AAVEUSDT) 
				print('Пара_B:', symbol_g_AAVEBUSD, '#', 'Продаем', quantity_pair_b, 'AAVE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_AAVEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AAVEUSDT_AAVEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_NEARUSDT_NEARBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NEARUSDT != 0.0 and qty_bids_g_NEARUSDT != 0.0 and price_asks_g_NEARUSDT != 0.0 and qty_asks_g_NEARUSDT != 0.0 and price_bids_g_NEARBNB != 0.0 and qty_bids_g_NEARBNB != 0.0 and price_asks_g_NEARBNB != 0.0 and qty_asks_g_NEARBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NEARBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NEARBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NEARBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NEARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NEARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NEARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NEARBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NEARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NEARBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NEARUSDT, '#', 'Покупаем', quantity_pair_a, 'NEAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_NEARUSDT) 
				print('Пара_B:', symbol_g_NEARBNB, '#', 'Продаем', quantity_pair_b, 'NEAR', 'за', price_b, 'BNB', 'по цене', price_bids_g_NEARBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NEARUSDT_NEARBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_NEARUSDT_NEARBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NEARUSDT != 0.0 and qty_bids_g_NEARUSDT != 0.0 and price_asks_g_NEARUSDT != 0.0 and qty_asks_g_NEARUSDT != 0.0 and price_bids_g_NEARBTC != 0.0 and qty_bids_g_NEARBTC != 0.0 and price_asks_g_NEARBTC != 0.0 and qty_asks_g_NEARBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NEARBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NEARBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NEARBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NEARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NEARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NEARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NEARBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NEARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NEARBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NEARUSDT, '#', 'Покупаем', quantity_pair_a, 'NEAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_NEARUSDT) 
				print('Пара_B:', symbol_g_NEARBTC, '#', 'Продаем', quantity_pair_b, 'NEAR', 'за', price_b, 'BTC', 'по цене', price_bids_g_NEARBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NEARUSDT_NEARBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_NEARUSDT_NEARBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NEARUSDT != 0.0 and qty_bids_g_NEARUSDT != 0.0 and price_asks_g_NEARUSDT != 0.0 and qty_asks_g_NEARUSDT != 0.0 and price_bids_g_NEARBUSD != 0.0 and qty_bids_g_NEARBUSD != 0.0 and price_asks_g_NEARBUSD != 0.0 and qty_asks_g_NEARBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NEARBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NEARBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NEARBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NEARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NEARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NEARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NEARBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NEARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NEARBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NEARUSDT, '#', 'Покупаем', quantity_pair_a, 'NEAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_NEARUSDT) 
				print('Пара_B:', symbol_g_NEARBUSD, '#', 'Продаем', quantity_pair_b, 'NEAR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_NEARBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NEARUSDT_NEARBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_NEARUSDT_NEARETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NEARUSDT != 0.0 and qty_bids_g_NEARUSDT != 0.0 and price_asks_g_NEARUSDT != 0.0 and qty_asks_g_NEARUSDT != 0.0 and price_bids_g_NEARETH != 0.0 and qty_bids_g_NEARETH != 0.0 and price_asks_g_NEARETH != 0.0 and qty_asks_g_NEARETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NEARETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NEARETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NEARETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NEARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NEARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NEARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NEARETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NEARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NEARETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NEARUSDT, '#', 'Покупаем', quantity_pair_a, 'NEAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_NEARUSDT) 
				print('Пара_B:', symbol_g_NEARETH, '#', 'Продаем', quantity_pair_b, 'NEAR', 'за', price_b, 'ETH', 'по цене', price_bids_g_NEARETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NEARUSDT_NEARETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_NEARUSDT_NEAREUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NEARUSDT != 0.0 and qty_bids_g_NEARUSDT != 0.0 and price_asks_g_NEARUSDT != 0.0 and qty_asks_g_NEARUSDT != 0.0 and price_bids_g_NEAREUR != 0.0 and qty_bids_g_NEAREUR != 0.0 and price_asks_g_NEAREUR != 0.0 and qty_asks_g_NEAREUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NEAREUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NEAREUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NEAREUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NEARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NEARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NEARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NEAREUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NEARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NEAREUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NEARUSDT, '#', 'Покупаем', quantity_pair_a, 'NEAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_NEARUSDT) 
				print('Пара_B:', symbol_g_NEAREUR, '#', 'Продаем', quantity_pair_b, 'NEAR', 'за', price_b, 'EUR', 'по цене', price_bids_g_NEAREUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NEARUSDT_NEAREUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_FILUSDT_FILBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FILUSDT != 0.0 and qty_bids_g_FILUSDT != 0.0 and price_asks_g_FILUSDT != 0.0 and qty_asks_g_FILUSDT != 0.0 and price_bids_g_FILBNB != 0.0 and qty_bids_g_FILBNB != 0.0 and price_asks_g_FILBNB != 0.0 and qty_asks_g_FILBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FILBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FILBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FILBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FILUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FILUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FILUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FILBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FILUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FILBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FILUSDT, '#', 'Покупаем', quantity_pair_a, 'FIL', 'за', price_a, 'USDT', 'по цене', price_asks_g_FILUSDT) 
				print('Пара_B:', symbol_g_FILBNB, '#', 'Продаем', quantity_pair_b, 'FIL', 'за', price_b, 'BNB', 'по цене', price_bids_g_FILBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FILUSDT_FILBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_FILUSDT_FILBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FILUSDT != 0.0 and qty_bids_g_FILUSDT != 0.0 and price_asks_g_FILUSDT != 0.0 and qty_asks_g_FILUSDT != 0.0 and price_bids_g_FILBTC != 0.0 and qty_bids_g_FILBTC != 0.0 and price_asks_g_FILBTC != 0.0 and qty_asks_g_FILBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FILBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FILBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FILBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FILUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FILUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FILUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FILBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FILUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FILBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FILUSDT, '#', 'Покупаем', quantity_pair_a, 'FIL', 'за', price_a, 'USDT', 'по цене', price_asks_g_FILUSDT) 
				print('Пара_B:', symbol_g_FILBTC, '#', 'Продаем', quantity_pair_b, 'FIL', 'за', price_b, 'BTC', 'по цене', price_bids_g_FILBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FILUSDT_FILBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_FILUSDT_FILBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FILUSDT != 0.0 and qty_bids_g_FILUSDT != 0.0 and price_asks_g_FILUSDT != 0.0 and qty_asks_g_FILUSDT != 0.0 and price_bids_g_FILBUSD != 0.0 and qty_bids_g_FILBUSD != 0.0 and price_asks_g_FILBUSD != 0.0 and qty_asks_g_FILBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FILBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FILBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FILBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FILUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FILUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FILUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FILBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FILUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FILBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FILUSDT, '#', 'Покупаем', quantity_pair_a, 'FIL', 'за', price_a, 'USDT', 'по цене', price_asks_g_FILUSDT) 
				print('Пара_B:', symbol_g_FILBUSD, '#', 'Продаем', quantity_pair_b, 'FIL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FILBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FILUSDT_FILBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FILUSDT_FILETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FILUSDT != 0.0 and qty_bids_g_FILUSDT != 0.0 and price_asks_g_FILUSDT != 0.0 and qty_asks_g_FILUSDT != 0.0 and price_bids_g_FILETH != 0.0 and qty_bids_g_FILETH != 0.0 and price_asks_g_FILETH != 0.0 and qty_asks_g_FILETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FILETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FILETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FILETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FILUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FILUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FILUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FILETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FILUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FILETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FILUSDT, '#', 'Покупаем', quantity_pair_a, 'FIL', 'за', price_a, 'USDT', 'по цене', price_asks_g_FILUSDT) 
				print('Пара_B:', symbol_g_FILETH, '#', 'Продаем', quantity_pair_b, 'FIL', 'за', price_b, 'ETH', 'по цене', price_bids_g_FILETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FILUSDT_FILETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_INJUSDT_INJBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_INJUSDT != 0.0 and qty_bids_g_INJUSDT != 0.0 and price_asks_g_INJUSDT != 0.0 and qty_asks_g_INJUSDT != 0.0 and price_bids_g_INJBNB != 0.0 and qty_bids_g_INJBNB != 0.0 and price_asks_g_INJBNB != 0.0 and qty_asks_g_INJBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_INJBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_INJBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_INJBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_INJUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_INJUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_INJUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_INJBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='INJUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='INJBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_INJUSDT, '#', 'Покупаем', quantity_pair_a, 'INJ', 'за', price_a, 'USDT', 'по цене', price_asks_g_INJUSDT) 
				print('Пара_B:', symbol_g_INJBNB, '#', 'Продаем', quantity_pair_b, 'INJ', 'за', price_b, 'BNB', 'по цене', price_bids_g_INJBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_INJUSDT_INJBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_INJUSDT_INJBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_INJUSDT != 0.0 and qty_bids_g_INJUSDT != 0.0 and price_asks_g_INJUSDT != 0.0 and qty_asks_g_INJUSDT != 0.0 and price_bids_g_INJBTC != 0.0 and qty_bids_g_INJBTC != 0.0 and price_asks_g_INJBTC != 0.0 and qty_asks_g_INJBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_INJBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_INJBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_INJBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_INJUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_INJUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_INJUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_INJBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='INJUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='INJBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_INJUSDT, '#', 'Покупаем', quantity_pair_a, 'INJ', 'за', price_a, 'USDT', 'по цене', price_asks_g_INJUSDT) 
				print('Пара_B:', symbol_g_INJBTC, '#', 'Продаем', quantity_pair_b, 'INJ', 'за', price_b, 'BTC', 'по цене', price_bids_g_INJBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_INJUSDT_INJBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_INJUSDT_INJBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_INJUSDT != 0.0 and qty_bids_g_INJUSDT != 0.0 and price_asks_g_INJUSDT != 0.0 and qty_asks_g_INJUSDT != 0.0 and price_bids_g_INJBUSD != 0.0 and qty_bids_g_INJBUSD != 0.0 and price_asks_g_INJBUSD != 0.0 and qty_asks_g_INJBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_INJBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_INJBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_INJBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_INJUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_INJUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_INJUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_INJBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='INJUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='INJBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_INJUSDT, '#', 'Покупаем', quantity_pair_a, 'INJ', 'за', price_a, 'USDT', 'по цене', price_asks_g_INJUSDT) 
				print('Пара_B:', symbol_g_INJBUSD, '#', 'Продаем', quantity_pair_b, 'INJ', 'за', price_b, 'BUSD', 'по цене', price_bids_g_INJBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_INJUSDT_INJBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_AUDIOUSDT_AUDIOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AUDIOUSDT != 0.0 and qty_bids_g_AUDIOUSDT != 0.0 and price_asks_g_AUDIOUSDT != 0.0 and qty_asks_g_AUDIOUSDT != 0.0 and price_bids_g_AUDIOBTC != 0.0 and qty_bids_g_AUDIOBTC != 0.0 and price_asks_g_AUDIOBTC != 0.0 and qty_asks_g_AUDIOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AUDIOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AUDIOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AUDIOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AUDIOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AUDIOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AUDIOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AUDIOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AUDIOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AUDIOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AUDIOUSDT, '#', 'Покупаем', quantity_pair_a, 'AUDIO', 'за', price_a, 'USDT', 'по цене', price_asks_g_AUDIOUSDT) 
				print('Пара_B:', symbol_g_AUDIOBTC, '#', 'Продаем', quantity_pair_b, 'AUDIO', 'за', price_b, 'BTC', 'по цене', price_bids_g_AUDIOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AUDIOUSDT_AUDIOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_AUDIOUSDT_AUDIOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AUDIOUSDT != 0.0 and qty_bids_g_AUDIOUSDT != 0.0 and price_asks_g_AUDIOUSDT != 0.0 and qty_asks_g_AUDIOUSDT != 0.0 and price_bids_g_AUDIOBUSD != 0.0 and qty_bids_g_AUDIOBUSD != 0.0 and price_asks_g_AUDIOBUSD != 0.0 and qty_asks_g_AUDIOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AUDIOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AUDIOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AUDIOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AUDIOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AUDIOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AUDIOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AUDIOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AUDIOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AUDIOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AUDIOUSDT, '#', 'Покупаем', quantity_pair_a, 'AUDIO', 'за', price_a, 'USDT', 'по цене', price_asks_g_AUDIOUSDT) 
				print('Пара_B:', symbol_g_AUDIOBUSD, '#', 'Продаем', quantity_pair_b, 'AUDIO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_AUDIOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AUDIOUSDT_AUDIOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_CTKUSDT_CTKBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CTKUSDT != 0.0 and qty_bids_g_CTKUSDT != 0.0 and price_asks_g_CTKUSDT != 0.0 and qty_asks_g_CTKUSDT != 0.0 and price_bids_g_CTKBNB != 0.0 and qty_bids_g_CTKBNB != 0.0 and price_asks_g_CTKBNB != 0.0 and qty_asks_g_CTKBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CTKBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CTKBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CTKBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CTKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CTKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CTKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CTKBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CTKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CTKBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CTKUSDT, '#', 'Покупаем', quantity_pair_a, 'CTK', 'за', price_a, 'USDT', 'по цене', price_asks_g_CTKUSDT) 
				print('Пара_B:', symbol_g_CTKBNB, '#', 'Продаем', quantity_pair_b, 'CTK', 'за', price_b, 'BNB', 'по цене', price_bids_g_CTKBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CTKUSDT_CTKBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_CTKUSDT_CTKBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CTKUSDT != 0.0 and qty_bids_g_CTKUSDT != 0.0 and price_asks_g_CTKUSDT != 0.0 and qty_asks_g_CTKUSDT != 0.0 and price_bids_g_CTKBTC != 0.0 and qty_bids_g_CTKBTC != 0.0 and price_asks_g_CTKBTC != 0.0 and qty_asks_g_CTKBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CTKBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CTKBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CTKBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CTKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CTKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CTKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CTKBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CTKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CTKBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CTKUSDT, '#', 'Покупаем', quantity_pair_a, 'CTK', 'за', price_a, 'USDT', 'по цене', price_asks_g_CTKUSDT) 
				print('Пара_B:', symbol_g_CTKBTC, '#', 'Продаем', quantity_pair_b, 'CTK', 'за', price_b, 'BTC', 'по цене', price_bids_g_CTKBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CTKUSDT_CTKBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CTKUSDT_CTKBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CTKUSDT != 0.0 and qty_bids_g_CTKUSDT != 0.0 and price_asks_g_CTKUSDT != 0.0 and qty_asks_g_CTKUSDT != 0.0 and price_bids_g_CTKBUSD != 0.0 and qty_bids_g_CTKBUSD != 0.0 and price_asks_g_CTKBUSD != 0.0 and qty_asks_g_CTKBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CTKBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CTKBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CTKBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CTKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CTKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CTKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CTKBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CTKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CTKBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CTKUSDT, '#', 'Покупаем', quantity_pair_a, 'CTK', 'за', price_a, 'USDT', 'по цене', price_asks_g_CTKUSDT) 
				print('Пара_B:', symbol_g_CTKBUSD, '#', 'Продаем', quantity_pair_b, 'CTK', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CTKBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CTKUSDT_CTKBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_AKROUSDT_AKROBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AKROUSDT != 0.0 and qty_bids_g_AKROUSDT != 0.0 and price_asks_g_AKROUSDT != 0.0 and qty_asks_g_AKROUSDT != 0.0 and price_bids_g_AKROBUSD != 0.0 and qty_bids_g_AKROBUSD != 0.0 and price_asks_g_AKROBUSD != 0.0 and qty_asks_g_AKROBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AKROBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AKROBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AKROBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AKROUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AKROUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AKROUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AKROBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AKROUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AKROBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AKROUSDT, '#', 'Покупаем', quantity_pair_a, 'AKRO', 'за', price_a, 'USDT', 'по цене', price_asks_g_AKROUSDT) 
				print('Пара_B:', symbol_g_AKROBUSD, '#', 'Продаем', quantity_pair_b, 'AKRO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_AKROBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AKROUSDT_AKROBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_AXSUSDT_AXSBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AXSUSDT != 0.0 and qty_bids_g_AXSUSDT != 0.0 and price_asks_g_AXSUSDT != 0.0 and qty_asks_g_AXSUSDT != 0.0 and price_bids_g_AXSBNB != 0.0 and qty_bids_g_AXSBNB != 0.0 and price_asks_g_AXSBNB != 0.0 and qty_asks_g_AXSBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AXSBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AXSBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AXSBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AXSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AXSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AXSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AXSBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AXSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AXSBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AXSUSDT, '#', 'Покупаем', quantity_pair_a, 'AXS', 'за', price_a, 'USDT', 'по цене', price_asks_g_AXSUSDT) 
				print('Пара_B:', symbol_g_AXSBNB, '#', 'Продаем', quantity_pair_b, 'AXS', 'за', price_b, 'BNB', 'по цене', price_bids_g_AXSBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AXSUSDT_AXSBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_AXSUSDT_AXSBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AXSUSDT != 0.0 and qty_bids_g_AXSUSDT != 0.0 and price_asks_g_AXSUSDT != 0.0 and qty_asks_g_AXSUSDT != 0.0 and price_bids_g_AXSBTC != 0.0 and qty_bids_g_AXSBTC != 0.0 and price_asks_g_AXSBTC != 0.0 and qty_asks_g_AXSBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AXSBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AXSBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AXSBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AXSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AXSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AXSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AXSBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AXSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AXSBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AXSUSDT, '#', 'Покупаем', quantity_pair_a, 'AXS', 'за', price_a, 'USDT', 'по цене', price_asks_g_AXSUSDT) 
				print('Пара_B:', symbol_g_AXSBTC, '#', 'Продаем', quantity_pair_b, 'AXS', 'за', price_b, 'BTC', 'по цене', price_bids_g_AXSBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AXSUSDT_AXSBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_AXSUSDT_AXSBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AXSUSDT != 0.0 and qty_bids_g_AXSUSDT != 0.0 and price_asks_g_AXSUSDT != 0.0 and qty_asks_g_AXSUSDT != 0.0 and price_bids_g_AXSBUSD != 0.0 and qty_bids_g_AXSBUSD != 0.0 and price_asks_g_AXSBUSD != 0.0 and qty_asks_g_AXSBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AXSBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AXSBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AXSBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AXSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AXSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AXSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AXSBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AXSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AXSBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AXSUSDT, '#', 'Покупаем', quantity_pair_a, 'AXS', 'за', price_a, 'USDT', 'по цене', price_asks_g_AXSUSDT) 
				print('Пара_B:', symbol_g_AXSBUSD, '#', 'Продаем', quantity_pair_b, 'AXS', 'за', price_b, 'BUSD', 'по цене', price_bids_g_AXSBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AXSUSDT_AXSBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_AXSUSDT_AXSAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AXSUSDT != 0.0 and qty_bids_g_AXSUSDT != 0.0 and price_asks_g_AXSUSDT != 0.0 and qty_asks_g_AXSUSDT != 0.0 and price_bids_g_AXSAUD != 0.0 and qty_bids_g_AXSAUD != 0.0 and price_asks_g_AXSAUD != 0.0 and qty_asks_g_AXSAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AXSAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AXSAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AXSAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AXSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AXSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AXSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AXSAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AXSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AXSAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AXSUSDT, '#', 'Покупаем', quantity_pair_a, 'AXS', 'за', price_a, 'USDT', 'по цене', price_asks_g_AXSUSDT) 
				print('Пара_B:', symbol_g_AXSAUD, '#', 'Продаем', quantity_pair_b, 'AXS', 'за', price_b, 'AUD', 'по цене', price_bids_g_AXSAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AXSUSDT_AXSAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_AXSUSDT_AXSETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AXSUSDT != 0.0 and qty_bids_g_AXSUSDT != 0.0 and price_asks_g_AXSUSDT != 0.0 and qty_asks_g_AXSUSDT != 0.0 and price_bids_g_AXSETH != 0.0 and qty_bids_g_AXSETH != 0.0 and price_asks_g_AXSETH != 0.0 and qty_asks_g_AXSETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AXSETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AXSETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AXSETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AXSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AXSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AXSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AXSETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AXSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AXSETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AXSUSDT, '#', 'Покупаем', quantity_pair_a, 'AXS', 'за', price_a, 'USDT', 'по цене', price_asks_g_AXSUSDT) 
				print('Пара_B:', symbol_g_AXSETH, '#', 'Продаем', quantity_pair_b, 'AXS', 'за', price_b, 'ETH', 'по цене', price_bids_g_AXSETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AXSUSDT_AXSETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_HARDUSDT_HARDBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HARDUSDT != 0.0 and qty_bids_g_HARDUSDT != 0.0 and price_asks_g_HARDUSDT != 0.0 and qty_asks_g_HARDUSDT != 0.0 and price_bids_g_HARDBNB != 0.0 and qty_bids_g_HARDBNB != 0.0 and price_asks_g_HARDBNB != 0.0 and qty_asks_g_HARDBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HARDBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HARDBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HARDBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HARDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HARDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HARDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HARDBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HARDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HARDBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HARDUSDT, '#', 'Покупаем', quantity_pair_a, 'HARD', 'за', price_a, 'USDT', 'по цене', price_asks_g_HARDUSDT) 
				print('Пара_B:', symbol_g_HARDBNB, '#', 'Продаем', quantity_pair_b, 'HARD', 'за', price_b, 'BNB', 'по цене', price_bids_g_HARDBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HARDUSDT_HARDBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_HARDUSDT_HARDBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HARDUSDT != 0.0 and qty_bids_g_HARDUSDT != 0.0 and price_asks_g_HARDUSDT != 0.0 and qty_asks_g_HARDUSDT != 0.0 and price_bids_g_HARDBTC != 0.0 and qty_bids_g_HARDBTC != 0.0 and price_asks_g_HARDBTC != 0.0 and qty_asks_g_HARDBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HARDBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HARDBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HARDBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HARDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HARDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HARDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HARDBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HARDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HARDBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HARDUSDT, '#', 'Покупаем', quantity_pair_a, 'HARD', 'за', price_a, 'USDT', 'по цене', price_asks_g_HARDUSDT) 
				print('Пара_B:', symbol_g_HARDBTC, '#', 'Продаем', quantity_pair_b, 'HARD', 'за', price_b, 'BTC', 'по цене', price_bids_g_HARDBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HARDUSDT_HARDBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_HARDUSDT_HARDBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HARDUSDT != 0.0 and qty_bids_g_HARDUSDT != 0.0 and price_asks_g_HARDUSDT != 0.0 and qty_asks_g_HARDUSDT != 0.0 and price_bids_g_HARDBUSD != 0.0 and qty_bids_g_HARDBUSD != 0.0 and price_asks_g_HARDBUSD != 0.0 and qty_asks_g_HARDBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HARDBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HARDBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HARDBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HARDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HARDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HARDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HARDBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HARDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HARDBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HARDUSDT, '#', 'Покупаем', quantity_pair_a, 'HARD', 'за', price_a, 'USDT', 'по цене', price_asks_g_HARDUSDT) 
				print('Пара_B:', symbol_g_HARDBUSD, '#', 'Продаем', quantity_pair_b, 'HARD', 'за', price_b, 'BUSD', 'по цене', price_bids_g_HARDBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HARDUSDT_HARDBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_STRAXUSDT_STRAXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STRAXUSDT != 0.0 and qty_bids_g_STRAXUSDT != 0.0 and price_asks_g_STRAXUSDT != 0.0 and qty_asks_g_STRAXUSDT != 0.0 and price_bids_g_STRAXBTC != 0.0 and qty_bids_g_STRAXBTC != 0.0 and price_asks_g_STRAXBTC != 0.0 and qty_asks_g_STRAXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STRAXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STRAXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STRAXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STRAXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STRAXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STRAXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STRAXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STRAXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STRAXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STRAXUSDT, '#', 'Покупаем', quantity_pair_a, 'STRAX', 'за', price_a, 'USDT', 'по цене', price_asks_g_STRAXUSDT) 
				print('Пара_B:', symbol_g_STRAXBTC, '#', 'Продаем', quantity_pair_b, 'STRAX', 'за', price_b, 'BTC', 'по цене', price_bids_g_STRAXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STRAXUSDT_STRAXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_STRAXUSDT_STRAXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STRAXUSDT != 0.0 and qty_bids_g_STRAXUSDT != 0.0 and price_asks_g_STRAXUSDT != 0.0 and qty_asks_g_STRAXUSDT != 0.0 and price_bids_g_STRAXBUSD != 0.0 and qty_bids_g_STRAXBUSD != 0.0 and price_asks_g_STRAXBUSD != 0.0 and qty_asks_g_STRAXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STRAXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STRAXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STRAXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STRAXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STRAXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STRAXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STRAXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STRAXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STRAXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STRAXUSDT, '#', 'Покупаем', quantity_pair_a, 'STRAX', 'за', price_a, 'USDT', 'по цене', price_asks_g_STRAXUSDT) 
				print('Пара_B:', symbol_g_STRAXBUSD, '#', 'Продаем', quantity_pair_b, 'STRAX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_STRAXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STRAXUSDT_STRAXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_UNFIUSDT_UNFIBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_UNFIUSDT != 0.0 and qty_bids_g_UNFIUSDT != 0.0 and price_asks_g_UNFIUSDT != 0.0 and qty_asks_g_UNFIUSDT != 0.0 and price_bids_g_UNFIBTC != 0.0 and qty_bids_g_UNFIBTC != 0.0 and price_asks_g_UNFIBTC != 0.0 and qty_asks_g_UNFIBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_UNFIBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_UNFIBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_UNFIBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_UNFIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_UNFIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_UNFIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_UNFIBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='UNFIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='UNFIBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_UNFIUSDT, '#', 'Покупаем', quantity_pair_a, 'UNFI', 'за', price_a, 'USDT', 'по цене', price_asks_g_UNFIUSDT) 
				print('Пара_B:', symbol_g_UNFIBTC, '#', 'Продаем', quantity_pair_b, 'UNFI', 'за', price_b, 'BTC', 'по цене', price_bids_g_UNFIBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_UNFIUSDT_UNFIBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_UNFIUSDT_UNFIBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_UNFIUSDT != 0.0 and qty_bids_g_UNFIUSDT != 0.0 and price_asks_g_UNFIUSDT != 0.0 and qty_asks_g_UNFIUSDT != 0.0 and price_bids_g_UNFIBUSD != 0.0 and qty_bids_g_UNFIBUSD != 0.0 and price_asks_g_UNFIBUSD != 0.0 and qty_asks_g_UNFIBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_UNFIBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_UNFIBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_UNFIBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_UNFIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_UNFIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_UNFIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_UNFIBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='UNFIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='UNFIBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_UNFIUSDT, '#', 'Покупаем', quantity_pair_a, 'UNFI', 'за', price_a, 'USDT', 'по цене', price_asks_g_UNFIUSDT) 
				print('Пара_B:', symbol_g_UNFIBUSD, '#', 'Продаем', quantity_pair_b, 'UNFI', 'за', price_b, 'BUSD', 'по цене', price_bids_g_UNFIBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_UNFIUSDT_UNFIBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_UNFIUSDT_UNFIETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_UNFIUSDT != 0.0 and qty_bids_g_UNFIUSDT != 0.0 and price_asks_g_UNFIUSDT != 0.0 and qty_asks_g_UNFIUSDT != 0.0 and price_bids_g_UNFIETH != 0.0 and qty_bids_g_UNFIETH != 0.0 and price_asks_g_UNFIETH != 0.0 and qty_asks_g_UNFIETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_UNFIETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_UNFIETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_UNFIETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_UNFIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_UNFIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_UNFIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_UNFIETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='UNFIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='UNFIETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_UNFIUSDT, '#', 'Покупаем', quantity_pair_a, 'UNFI', 'за', price_a, 'USDT', 'по цене', price_asks_g_UNFIUSDT) 
				print('Пара_B:', symbol_g_UNFIETH, '#', 'Продаем', quantity_pair_b, 'UNFI', 'за', price_b, 'ETH', 'по цене', price_bids_g_UNFIETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_UNFIUSDT_UNFIETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ROSEUSDT_ROSEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ROSEUSDT != 0.0 and qty_bids_g_ROSEUSDT != 0.0 and price_asks_g_ROSEUSDT != 0.0 and qty_asks_g_ROSEUSDT != 0.0 and price_bids_g_ROSEBTC != 0.0 and qty_bids_g_ROSEBTC != 0.0 and price_asks_g_ROSEBTC != 0.0 and qty_asks_g_ROSEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ROSEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ROSEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ROSEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ROSEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ROSEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ROSEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ROSEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ROSEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ROSEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ROSEUSDT, '#', 'Покупаем', quantity_pair_a, 'ROSE', 'за', price_a, 'USDT', 'по цене', price_asks_g_ROSEUSDT) 
				print('Пара_B:', symbol_g_ROSEBTC, '#', 'Продаем', quantity_pair_b, 'ROSE', 'за', price_b, 'BTC', 'по цене', price_bids_g_ROSEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ROSEUSDT_ROSEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ROSEUSDT_ROSEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ROSEUSDT != 0.0 and qty_bids_g_ROSEUSDT != 0.0 and price_asks_g_ROSEUSDT != 0.0 and qty_asks_g_ROSEUSDT != 0.0 and price_bids_g_ROSEBUSD != 0.0 and qty_bids_g_ROSEBUSD != 0.0 and price_asks_g_ROSEBUSD != 0.0 and qty_asks_g_ROSEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ROSEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ROSEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ROSEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ROSEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ROSEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ROSEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ROSEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ROSEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ROSEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ROSEUSDT, '#', 'Покупаем', quantity_pair_a, 'ROSE', 'за', price_a, 'USDT', 'по цене', price_asks_g_ROSEUSDT) 
				print('Пара_B:', symbol_g_ROSEBUSD, '#', 'Продаем', quantity_pair_b, 'ROSE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ROSEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ROSEUSDT_ROSEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ROSEUSDT_ROSEETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ROSEUSDT != 0.0 and qty_bids_g_ROSEUSDT != 0.0 and price_asks_g_ROSEUSDT != 0.0 and qty_asks_g_ROSEUSDT != 0.0 and price_bids_g_ROSEETH != 0.0 and qty_bids_g_ROSEETH != 0.0 and price_asks_g_ROSEETH != 0.0 and qty_asks_g_ROSEETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ROSEETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ROSEETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ROSEETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ROSEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ROSEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ROSEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ROSEETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ROSEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ROSEETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ROSEUSDT, '#', 'Покупаем', quantity_pair_a, 'ROSE', 'за', price_a, 'USDT', 'по цене', price_asks_g_ROSEUSDT) 
				print('Пара_B:', symbol_g_ROSEETH, '#', 'Продаем', quantity_pair_b, 'ROSE', 'за', price_b, 'ETH', 'по цене', price_bids_g_ROSEETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ROSEUSDT_ROSEETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_AVAUSDT_AVABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AVAUSDT != 0.0 and qty_bids_g_AVAUSDT != 0.0 and price_asks_g_AVAUSDT != 0.0 and qty_asks_g_AVAUSDT != 0.0 and price_bids_g_AVABTC != 0.0 and qty_bids_g_AVABTC != 0.0 and price_asks_g_AVABTC != 0.0 and qty_asks_g_AVABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AVABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AVABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AVABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AVAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AVAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AVAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AVABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AVAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AVABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AVAUSDT, '#', 'Покупаем', quantity_pair_a, 'AVA', 'за', price_a, 'USDT', 'по цене', price_asks_g_AVAUSDT) 
				print('Пара_B:', symbol_g_AVABTC, '#', 'Продаем', quantity_pair_b, 'AVA', 'за', price_b, 'BTC', 'по цене', price_bids_g_AVABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AVAUSDT_AVABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_AVAUSDT_AVABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AVAUSDT != 0.0 and qty_bids_g_AVAUSDT != 0.0 and price_asks_g_AVAUSDT != 0.0 and qty_asks_g_AVAUSDT != 0.0 and price_bids_g_AVABUSD != 0.0 and qty_bids_g_AVABUSD != 0.0 and price_asks_g_AVABUSD != 0.0 and qty_asks_g_AVABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AVABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AVABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AVABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AVAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AVAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AVAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AVABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AVAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AVABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AVAUSDT, '#', 'Покупаем', quantity_pair_a, 'AVA', 'за', price_a, 'USDT', 'по цене', price_asks_g_AVAUSDT) 
				print('Пара_B:', symbol_g_AVABUSD, '#', 'Продаем', quantity_pair_b, 'AVA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_AVABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AVAUSDT_AVABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SKLUSDT_SKLBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SKLUSDT != 0.0 and qty_bids_g_SKLUSDT != 0.0 and price_asks_g_SKLUSDT != 0.0 and qty_asks_g_SKLUSDT != 0.0 and price_bids_g_SKLBTC != 0.0 and qty_bids_g_SKLBTC != 0.0 and price_asks_g_SKLBTC != 0.0 and qty_asks_g_SKLBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SKLBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SKLBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SKLBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SKLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SKLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SKLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SKLBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SKLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SKLBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SKLUSDT, '#', 'Покупаем', quantity_pair_a, 'SKL', 'за', price_a, 'USDT', 'по цене', price_asks_g_SKLUSDT) 
				print('Пара_B:', symbol_g_SKLBTC, '#', 'Продаем', quantity_pair_b, 'SKL', 'за', price_b, 'BTC', 'по цене', price_bids_g_SKLBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SKLUSDT_SKLBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_SKLUSDT_SKLBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SKLUSDT != 0.0 and qty_bids_g_SKLUSDT != 0.0 and price_asks_g_SKLUSDT != 0.0 and qty_asks_g_SKLUSDT != 0.0 and price_bids_g_SKLBUSD != 0.0 and qty_bids_g_SKLBUSD != 0.0 and price_asks_g_SKLBUSD != 0.0 and qty_asks_g_SKLBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SKLBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SKLBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SKLBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SKLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SKLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SKLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SKLBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SKLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SKLBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SKLUSDT, '#', 'Покупаем', quantity_pair_a, 'SKL', 'за', price_a, 'USDT', 'по цене', price_asks_g_SKLUSDT) 
				print('Пара_B:', symbol_g_SKLBUSD, '#', 'Продаем', quantity_pair_b, 'SKL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SKLBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SKLUSDT_SKLBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_GRTUSDT_GRTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GRTUSDT != 0.0 and qty_bids_g_GRTUSDT != 0.0 and price_asks_g_GRTUSDT != 0.0 and qty_asks_g_GRTUSDT != 0.0 and price_bids_g_GRTBTC != 0.0 and qty_bids_g_GRTBTC != 0.0 and price_asks_g_GRTBTC != 0.0 and qty_asks_g_GRTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GRTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GRTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GRTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GRTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GRTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GRTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GRTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GRTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GRTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GRTUSDT, '#', 'Покупаем', quantity_pair_a, 'GRT', 'за', price_a, 'USDT', 'по цене', price_asks_g_GRTUSDT) 
				print('Пара_B:', symbol_g_GRTBTC, '#', 'Продаем', quantity_pair_b, 'GRT', 'за', price_b, 'BTC', 'по цене', price_bids_g_GRTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GRTUSDT_GRTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_GRTUSDT_GRTETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GRTUSDT != 0.0 and qty_bids_g_GRTUSDT != 0.0 and price_asks_g_GRTUSDT != 0.0 and qty_asks_g_GRTUSDT != 0.0 and price_bids_g_GRTETH != 0.0 and qty_bids_g_GRTETH != 0.0 and price_asks_g_GRTETH != 0.0 and qty_asks_g_GRTETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GRTETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GRTETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GRTETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GRTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GRTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GRTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GRTETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GRTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GRTETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GRTUSDT, '#', 'Покупаем', quantity_pair_a, 'GRT', 'за', price_a, 'USDT', 'по цене', price_asks_g_GRTUSDT) 
				print('Пара_B:', symbol_g_GRTETH, '#', 'Продаем', quantity_pair_b, 'GRT', 'за', price_b, 'ETH', 'по цене', price_bids_g_GRTETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GRTUSDT_GRTETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_GRTUSDT_GRTEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GRTUSDT != 0.0 and qty_bids_g_GRTUSDT != 0.0 and price_asks_g_GRTUSDT != 0.0 and qty_asks_g_GRTUSDT != 0.0 and price_bids_g_GRTEUR != 0.0 and qty_bids_g_GRTEUR != 0.0 and price_asks_g_GRTEUR != 0.0 and qty_asks_g_GRTEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GRTEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GRTEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GRTEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GRTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GRTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GRTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GRTEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GRTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GRTEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GRTUSDT, '#', 'Покупаем', quantity_pair_a, 'GRT', 'за', price_a, 'USDT', 'по цене', price_asks_g_GRTUSDT) 
				print('Пара_B:', symbol_g_GRTEUR, '#', 'Продаем', quantity_pair_b, 'GRT', 'за', price_b, 'EUR', 'по цене', price_bids_g_GRTEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GRTUSDT_GRTEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_GRTUSDT_GRTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GRTUSDT != 0.0 and qty_bids_g_GRTUSDT != 0.0 and price_asks_g_GRTUSDT != 0.0 and qty_asks_g_GRTUSDT != 0.0 and price_bids_g_GRTBUSD != 0.0 and qty_bids_g_GRTBUSD != 0.0 and price_asks_g_GRTBUSD != 0.0 and qty_asks_g_GRTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GRTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GRTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GRTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GRTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GRTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GRTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GRTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GRTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GRTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GRTUSDT, '#', 'Покупаем', quantity_pair_a, 'GRT', 'за', price_a, 'USDT', 'по цене', price_asks_g_GRTUSDT) 
				print('Пара_B:', symbol_g_GRTBUSD, '#', 'Продаем', quantity_pair_b, 'GRT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_GRTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GRTUSDT_GRTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_JUVUSDT_JUVBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_JUVUSDT != 0.0 and qty_bids_g_JUVUSDT != 0.0 and price_asks_g_JUVUSDT != 0.0 and qty_asks_g_JUVUSDT != 0.0 and price_bids_g_JUVBTC != 0.0 and qty_bids_g_JUVBTC != 0.0 and price_asks_g_JUVBTC != 0.0 and qty_asks_g_JUVBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_JUVBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_JUVBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_JUVBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_JUVUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_JUVUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_JUVUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_JUVBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='JUVUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='JUVBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_JUVUSDT, '#', 'Покупаем', quantity_pair_a, 'JUV', 'за', price_a, 'USDT', 'по цене', price_asks_g_JUVUSDT) 
				print('Пара_B:', symbol_g_JUVBTC, '#', 'Продаем', quantity_pair_b, 'JUV', 'за', price_b, 'BTC', 'по цене', price_bids_g_JUVBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_JUVUSDT_JUVBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_JUVUSDT_JUVBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_JUVUSDT != 0.0 and qty_bids_g_JUVUSDT != 0.0 and price_asks_g_JUVUSDT != 0.0 and qty_asks_g_JUVUSDT != 0.0 and price_bids_g_JUVBUSD != 0.0 and qty_bids_g_JUVBUSD != 0.0 and price_asks_g_JUVBUSD != 0.0 and qty_asks_g_JUVBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_JUVBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_JUVBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_JUVBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_JUVUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_JUVUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_JUVUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_JUVBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='JUVUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='JUVBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_JUVUSDT, '#', 'Покупаем', quantity_pair_a, 'JUV', 'за', price_a, 'USDT', 'по цене', price_asks_g_JUVUSDT) 
				print('Пара_B:', symbol_g_JUVBUSD, '#', 'Продаем', quantity_pair_b, 'JUV', 'за', price_b, 'BUSD', 'по цене', price_bids_g_JUVBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_JUVUSDT_JUVBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_PSGUSDT_PSGBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PSGUSDT != 0.0 and qty_bids_g_PSGUSDT != 0.0 and price_asks_g_PSGUSDT != 0.0 and qty_asks_g_PSGUSDT != 0.0 and price_bids_g_PSGBTC != 0.0 and qty_bids_g_PSGBTC != 0.0 and price_asks_g_PSGBTC != 0.0 and qty_asks_g_PSGBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PSGBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PSGBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PSGBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PSGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PSGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PSGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PSGBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PSGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PSGBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PSGUSDT, '#', 'Покупаем', quantity_pair_a, 'PSG', 'за', price_a, 'USDT', 'по цене', price_asks_g_PSGUSDT) 
				print('Пара_B:', symbol_g_PSGBTC, '#', 'Продаем', quantity_pair_b, 'PSG', 'за', price_b, 'BTC', 'по цене', price_bids_g_PSGBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PSGUSDT_PSGBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_PSGUSDT_PSGBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PSGUSDT != 0.0 and qty_bids_g_PSGUSDT != 0.0 and price_asks_g_PSGUSDT != 0.0 and qty_asks_g_PSGUSDT != 0.0 and price_bids_g_PSGBUSD != 0.0 and qty_bids_g_PSGBUSD != 0.0 and price_asks_g_PSGBUSD != 0.0 and qty_asks_g_PSGBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PSGBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PSGBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PSGBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PSGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PSGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PSGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PSGBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PSGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PSGBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PSGUSDT, '#', 'Покупаем', quantity_pair_a, 'PSG', 'за', price_a, 'USDT', 'по цене', price_asks_g_PSGUSDT) 
				print('Пара_B:', symbol_g_PSGBUSD, '#', 'Продаем', quantity_pair_b, 'PSG', 'за', price_b, 'BUSD', 'по цене', price_bids_g_PSGBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PSGUSDT_PSGBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_1INCHUSDT_1INCHBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_1INCHUSDT != 0.0 and qty_bids_g_1INCHUSDT != 0.0 and price_asks_g_1INCHUSDT != 0.0 and qty_asks_g_1INCHUSDT != 0.0 and price_bids_g_1INCHBTC != 0.0 and qty_bids_g_1INCHBTC != 0.0 and price_asks_g_1INCHBTC != 0.0 and qty_asks_g_1INCHBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_1INCHBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_1INCHBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_1INCHBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_1INCHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_1INCHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_1INCHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_1INCHBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='1INCHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='1INCHBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_1INCHUSDT, '#', 'Покупаем', quantity_pair_a, '1INCH', 'за', price_a, 'USDT', 'по цене', price_asks_g_1INCHUSDT) 
				print('Пара_B:', symbol_g_1INCHBTC, '#', 'Продаем', quantity_pair_b, '1INCH', 'за', price_b, 'BTC', 'по цене', price_bids_g_1INCHBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_1INCHUSDT_1INCHBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_1INCHUSDT_1INCHBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_1INCHUSDT != 0.0 and qty_bids_g_1INCHUSDT != 0.0 and price_asks_g_1INCHUSDT != 0.0 and qty_asks_g_1INCHUSDT != 0.0 and price_bids_g_1INCHBUSD != 0.0 and qty_bids_g_1INCHBUSD != 0.0 and price_asks_g_1INCHBUSD != 0.0 and qty_asks_g_1INCHBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_1INCHBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_1INCHBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_1INCHBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_1INCHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_1INCHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_1INCHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_1INCHBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='1INCHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='1INCHBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_1INCHUSDT, '#', 'Покупаем', quantity_pair_a, '1INCH', 'за', price_a, 'USDT', 'по цене', price_asks_g_1INCHUSDT) 
				print('Пара_B:', symbol_g_1INCHBUSD, '#', 'Продаем', quantity_pair_b, '1INCH', 'за', price_b, 'BUSD', 'по цене', price_bids_g_1INCHBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_1INCHUSDT_1INCHBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_REEFUSDT_REEFBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_REEFUSDT != 0.0 and qty_bids_g_REEFUSDT != 0.0 and price_asks_g_REEFUSDT != 0.0 and qty_asks_g_REEFUSDT != 0.0 and price_bids_g_REEFBUSD != 0.0 and qty_bids_g_REEFBUSD != 0.0 and price_asks_g_REEFBUSD != 0.0 and qty_asks_g_REEFBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_REEFBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_REEFBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_REEFBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_REEFUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_REEFUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_REEFUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_REEFBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='REEFUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='REEFBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_REEFUSDT, '#', 'Покупаем', quantity_pair_a, 'REEF', 'за', price_a, 'USDT', 'по цене', price_asks_g_REEFUSDT) 
				print('Пара_B:', symbol_g_REEFBUSD, '#', 'Продаем', quantity_pair_b, 'REEF', 'за', price_b, 'BUSD', 'по цене', price_bids_g_REEFBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_REEFUSDT_REEFBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_OGUSDT_OGBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OGUSDT != 0.0 and qty_bids_g_OGUSDT != 0.0 and price_asks_g_OGUSDT != 0.0 and qty_asks_g_OGUSDT != 0.0 and price_bids_g_OGBTC != 0.0 and qty_bids_g_OGBTC != 0.0 and price_asks_g_OGBTC != 0.0 and qty_asks_g_OGBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OGBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OGBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OGBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OGBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OGBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OGUSDT, '#', 'Покупаем', quantity_pair_a, 'OG', 'за', price_a, 'USDT', 'по цене', price_asks_g_OGUSDT) 
				print('Пара_B:', symbol_g_OGBTC, '#', 'Продаем', quantity_pair_b, 'OG', 'за', price_b, 'BTC', 'по цене', price_bids_g_OGBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OGUSDT_OGBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_OGUSDT_OGBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OGUSDT != 0.0 and qty_bids_g_OGUSDT != 0.0 and price_asks_g_OGUSDT != 0.0 and qty_asks_g_OGUSDT != 0.0 and price_bids_g_OGBUSD != 0.0 and qty_bids_g_OGBUSD != 0.0 and price_asks_g_OGBUSD != 0.0 and qty_asks_g_OGBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OGBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OGBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OGBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OGBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OGBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OGUSDT, '#', 'Покупаем', quantity_pair_a, 'OG', 'за', price_a, 'USDT', 'по цене', price_asks_g_OGUSDT) 
				print('Пара_B:', symbol_g_OGBUSD, '#', 'Продаем', quantity_pair_b, 'OG', 'за', price_b, 'BUSD', 'по цене', price_bids_g_OGBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OGUSDT_OGBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ATMUSDT_ATMBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ATMUSDT != 0.0 and qty_bids_g_ATMUSDT != 0.0 and price_asks_g_ATMUSDT != 0.0 and qty_asks_g_ATMUSDT != 0.0 and price_bids_g_ATMBTC != 0.0 and qty_bids_g_ATMBTC != 0.0 and price_asks_g_ATMBTC != 0.0 and qty_asks_g_ATMBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ATMBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ATMBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ATMBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ATMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ATMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ATMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ATMBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ATMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ATMBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ATMUSDT, '#', 'Покупаем', quantity_pair_a, 'ATM', 'за', price_a, 'USDT', 'по цене', price_asks_g_ATMUSDT) 
				print('Пара_B:', symbol_g_ATMBTC, '#', 'Продаем', quantity_pair_b, 'ATM', 'за', price_b, 'BTC', 'по цене', price_bids_g_ATMBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ATMUSDT_ATMBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ATMUSDT_ATMBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ATMUSDT != 0.0 and qty_bids_g_ATMUSDT != 0.0 and price_asks_g_ATMUSDT != 0.0 and qty_asks_g_ATMUSDT != 0.0 and price_bids_g_ATMBUSD != 0.0 and qty_bids_g_ATMBUSD != 0.0 and price_asks_g_ATMBUSD != 0.0 and qty_asks_g_ATMBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ATMBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ATMBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ATMBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ATMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ATMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ATMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ATMBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ATMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ATMBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ATMUSDT, '#', 'Покупаем', quantity_pair_a, 'ATM', 'за', price_a, 'USDT', 'по цене', price_asks_g_ATMUSDT) 
				print('Пара_B:', symbol_g_ATMBUSD, '#', 'Продаем', quantity_pair_b, 'ATM', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ATMBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ATMUSDT_ATMBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ASRUSDT_ASRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ASRUSDT != 0.0 and qty_bids_g_ASRUSDT != 0.0 and price_asks_g_ASRUSDT != 0.0 and qty_asks_g_ASRUSDT != 0.0 and price_bids_g_ASRBTC != 0.0 and qty_bids_g_ASRBTC != 0.0 and price_asks_g_ASRBTC != 0.0 and qty_asks_g_ASRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ASRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ASRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ASRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ASRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ASRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ASRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ASRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ASRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ASRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ASRUSDT, '#', 'Покупаем', quantity_pair_a, 'ASR', 'за', price_a, 'USDT', 'по цене', price_asks_g_ASRUSDT) 
				print('Пара_B:', symbol_g_ASRBTC, '#', 'Продаем', quantity_pair_b, 'ASR', 'за', price_b, 'BTC', 'по цене', price_bids_g_ASRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ASRUSDT_ASRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ASRUSDT_ASRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ASRUSDT != 0.0 and qty_bids_g_ASRUSDT != 0.0 and price_asks_g_ASRUSDT != 0.0 and qty_asks_g_ASRUSDT != 0.0 and price_bids_g_ASRBUSD != 0.0 and qty_bids_g_ASRBUSD != 0.0 and price_asks_g_ASRBUSD != 0.0 and qty_asks_g_ASRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ASRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ASRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ASRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ASRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ASRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ASRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ASRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ASRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ASRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ASRUSDT, '#', 'Покупаем', quantity_pair_a, 'ASR', 'за', price_a, 'USDT', 'по цене', price_asks_g_ASRUSDT) 
				print('Пара_B:', symbol_g_ASRBUSD, '#', 'Продаем', quantity_pair_b, 'ASR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ASRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ASRUSDT_ASRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_CELOUSDT_CELOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CELOUSDT != 0.0 and qty_bids_g_CELOUSDT != 0.0 and price_asks_g_CELOUSDT != 0.0 and qty_asks_g_CELOUSDT != 0.0 and price_bids_g_CELOBTC != 0.0 and qty_bids_g_CELOBTC != 0.0 and price_asks_g_CELOBTC != 0.0 and qty_asks_g_CELOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CELOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CELOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CELOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CELOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CELOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CELOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CELOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CELOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CELOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CELOUSDT, '#', 'Покупаем', quantity_pair_a, 'CELO', 'за', price_a, 'USDT', 'по цене', price_asks_g_CELOUSDT) 
				print('Пара_B:', symbol_g_CELOBTC, '#', 'Продаем', quantity_pair_b, 'CELO', 'за', price_b, 'BTC', 'по цене', price_bids_g_CELOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CELOUSDT_CELOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CELOUSDT_CELOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CELOUSDT != 0.0 and qty_bids_g_CELOUSDT != 0.0 and price_asks_g_CELOUSDT != 0.0 and qty_asks_g_CELOUSDT != 0.0 and price_bids_g_CELOBUSD != 0.0 and qty_bids_g_CELOBUSD != 0.0 and price_asks_g_CELOBUSD != 0.0 and qty_asks_g_CELOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CELOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CELOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CELOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CELOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CELOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CELOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CELOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CELOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CELOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CELOUSDT, '#', 'Покупаем', quantity_pair_a, 'CELO', 'за', price_a, 'USDT', 'по цене', price_asks_g_CELOUSDT) 
				print('Пара_B:', symbol_g_CELOBUSD, '#', 'Продаем', quantity_pair_b, 'CELO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CELOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CELOUSDT_CELOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_RIFUSDT_RIFBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RIFUSDT != 0.0 and qty_bids_g_RIFUSDT != 0.0 and price_asks_g_RIFUSDT != 0.0 and qty_asks_g_RIFUSDT != 0.0 and price_bids_g_RIFBTC != 0.0 and qty_bids_g_RIFBTC != 0.0 and price_asks_g_RIFBTC != 0.0 and qty_asks_g_RIFBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RIFBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RIFBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RIFBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RIFUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RIFUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RIFUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RIFBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RIFUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RIFBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RIFUSDT, '#', 'Покупаем', quantity_pair_a, 'RIF', 'за', price_a, 'USDT', 'по цене', price_asks_g_RIFUSDT) 
				print('Пара_B:', symbol_g_RIFBTC, '#', 'Продаем', quantity_pair_b, 'RIF', 'за', price_b, 'BTC', 'по цене', price_bids_g_RIFBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RIFUSDT_RIFBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_TRUUSDT_TRUBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TRUUSDT != 0.0 and qty_bids_g_TRUUSDT != 0.0 and price_asks_g_TRUUSDT != 0.0 and qty_asks_g_TRUUSDT != 0.0 and price_bids_g_TRUBTC != 0.0 and qty_bids_g_TRUBTC != 0.0 and price_asks_g_TRUBTC != 0.0 and qty_asks_g_TRUBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TRUBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TRUBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TRUBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TRUUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TRUUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TRUUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TRUBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TRUUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TRUBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TRUUSDT, '#', 'Покупаем', quantity_pair_a, 'TRU', 'за', price_a, 'USDT', 'по цене', price_asks_g_TRUUSDT) 
				print('Пара_B:', symbol_g_TRUBTC, '#', 'Продаем', quantity_pair_b, 'TRU', 'за', price_b, 'BTC', 'по цене', price_bids_g_TRUBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TRUUSDT_TRUBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CKBUSDT_CKBBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CKBUSDT != 0.0 and qty_bids_g_CKBUSDT != 0.0 and price_asks_g_CKBUSDT != 0.0 and qty_asks_g_CKBUSDT != 0.0 and price_bids_g_CKBBUSD != 0.0 and qty_bids_g_CKBBUSD != 0.0 and price_asks_g_CKBBUSD != 0.0 and qty_asks_g_CKBBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CKBBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CKBBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CKBBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CKBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CKBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CKBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CKBBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CKBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CKBBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CKBUSDT, '#', 'Покупаем', quantity_pair_a, 'CKB', 'за', price_a, 'USDT', 'по цене', price_asks_g_CKBUSDT) 
				print('Пара_B:', symbol_g_CKBBUSD, '#', 'Продаем', quantity_pair_b, 'CKB', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CKBBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CKBUSDT_CKBBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_TWTUSDT_TWTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TWTUSDT != 0.0 and qty_bids_g_TWTUSDT != 0.0 and price_asks_g_TWTUSDT != 0.0 and qty_asks_g_TWTUSDT != 0.0 and price_bids_g_TWTBTC != 0.0 and qty_bids_g_TWTBTC != 0.0 and price_asks_g_TWTBTC != 0.0 and qty_asks_g_TWTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TWTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TWTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TWTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TWTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TWTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TWTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TWTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TWTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TWTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TWTUSDT, '#', 'Покупаем', quantity_pair_a, 'TWT', 'за', price_a, 'USDT', 'по цене', price_asks_g_TWTUSDT) 
				print('Пара_B:', symbol_g_TWTBTC, '#', 'Продаем', quantity_pair_b, 'TWT', 'за', price_b, 'BTC', 'по цене', price_bids_g_TWTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TWTUSDT_TWTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_TWTUSDT_TWTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TWTUSDT != 0.0 and qty_bids_g_TWTUSDT != 0.0 and price_asks_g_TWTUSDT != 0.0 and qty_asks_g_TWTUSDT != 0.0 and price_bids_g_TWTBUSD != 0.0 and qty_bids_g_TWTBUSD != 0.0 and price_asks_g_TWTBUSD != 0.0 and qty_asks_g_TWTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TWTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TWTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TWTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TWTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TWTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TWTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TWTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TWTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TWTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TWTUSDT, '#', 'Покупаем', quantity_pair_a, 'TWT', 'за', price_a, 'USDT', 'по цене', price_asks_g_TWTUSDT) 
				print('Пара_B:', symbol_g_TWTBUSD, '#', 'Продаем', quantity_pair_b, 'TWT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_TWTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TWTUSDT_TWTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FIROUSDT_FIROBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FIROUSDT != 0.0 and qty_bids_g_FIROUSDT != 0.0 and price_asks_g_FIROUSDT != 0.0 and qty_asks_g_FIROUSDT != 0.0 and price_bids_g_FIROBTC != 0.0 and qty_bids_g_FIROBTC != 0.0 and price_asks_g_FIROBTC != 0.0 and qty_asks_g_FIROBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FIROBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FIROBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FIROBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FIROUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FIROUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FIROUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FIROBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FIROUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FIROBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FIROUSDT, '#', 'Покупаем', quantity_pair_a, 'FIRO', 'за', price_a, 'USDT', 'по цене', price_asks_g_FIROUSDT) 
				print('Пара_B:', symbol_g_FIROBTC, '#', 'Продаем', quantity_pair_b, 'FIRO', 'за', price_b, 'BTC', 'по цене', price_bids_g_FIROBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FIROUSDT_FIROBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_FIROUSDT_FIROBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FIROUSDT != 0.0 and qty_bids_g_FIROUSDT != 0.0 and price_asks_g_FIROUSDT != 0.0 and qty_asks_g_FIROUSDT != 0.0 and price_bids_g_FIROBUSD != 0.0 and qty_bids_g_FIROBUSD != 0.0 and price_asks_g_FIROBUSD != 0.0 and qty_asks_g_FIROBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FIROBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FIROBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FIROBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FIROUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FIROUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FIROUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FIROBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FIROUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FIROBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FIROUSDT, '#', 'Покупаем', quantity_pair_a, 'FIRO', 'за', price_a, 'USDT', 'по цене', price_asks_g_FIROUSDT) 
				print('Пара_B:', symbol_g_FIROBUSD, '#', 'Продаем', quantity_pair_b, 'FIRO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FIROBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FIROUSDT_FIROBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_LITUSDT_LITBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LITUSDT != 0.0 and qty_bids_g_LITUSDT != 0.0 and price_asks_g_LITUSDT != 0.0 and qty_asks_g_LITUSDT != 0.0 and price_bids_g_LITBTC != 0.0 and qty_bids_g_LITBTC != 0.0 and price_asks_g_LITBTC != 0.0 and qty_asks_g_LITBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LITBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LITBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LITBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LITUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LITUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LITUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LITBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LITUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LITBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LITUSDT, '#', 'Покупаем', quantity_pair_a, 'LIT', 'за', price_a, 'USDT', 'по цене', price_asks_g_LITUSDT) 
				print('Пара_B:', symbol_g_LITBTC, '#', 'Продаем', quantity_pair_b, 'LIT', 'за', price_b, 'BTC', 'по цене', price_bids_g_LITBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LITUSDT_LITBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_LITUSDT_LITBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LITUSDT != 0.0 and qty_bids_g_LITUSDT != 0.0 and price_asks_g_LITUSDT != 0.0 and qty_asks_g_LITUSDT != 0.0 and price_bids_g_LITBUSD != 0.0 and qty_bids_g_LITBUSD != 0.0 and price_asks_g_LITBUSD != 0.0 and qty_asks_g_LITBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LITBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LITBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LITBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LITUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LITUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LITUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LITBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LITUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LITBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LITUSDT, '#', 'Покупаем', quantity_pair_a, 'LIT', 'за', price_a, 'USDT', 'по цене', price_asks_g_LITUSDT) 
				print('Пара_B:', symbol_g_LITBUSD, '#', 'Продаем', quantity_pair_b, 'LIT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LITBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LITUSDT_LITBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_LITUSDT_LITETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LITUSDT != 0.0 and qty_bids_g_LITUSDT != 0.0 and price_asks_g_LITUSDT != 0.0 and qty_asks_g_LITUSDT != 0.0 and price_bids_g_LITETH != 0.0 and qty_bids_g_LITETH != 0.0 and price_asks_g_LITETH != 0.0 and qty_asks_g_LITETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LITETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LITETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LITETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LITUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LITUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LITUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LITETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LITUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LITETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LITUSDT, '#', 'Покупаем', quantity_pair_a, 'LIT', 'за', price_a, 'USDT', 'по цене', price_asks_g_LITUSDT) 
				print('Пара_B:', symbol_g_LITETH, '#', 'Продаем', quantity_pair_b, 'LIT', 'за', price_b, 'ETH', 'по цене', price_bids_g_LITETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LITUSDT_LITETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_SFPUSDT_SFPBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SFPUSDT != 0.0 and qty_bids_g_SFPUSDT != 0.0 and price_asks_g_SFPUSDT != 0.0 and qty_asks_g_SFPUSDT != 0.0 and price_bids_g_SFPBTC != 0.0 and qty_bids_g_SFPBTC != 0.0 and price_asks_g_SFPBTC != 0.0 and qty_asks_g_SFPBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SFPBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SFPBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SFPBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SFPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SFPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SFPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SFPBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SFPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SFPBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SFPUSDT, '#', 'Покупаем', quantity_pair_a, 'SFP', 'за', price_a, 'USDT', 'по цене', price_asks_g_SFPUSDT) 
				print('Пара_B:', symbol_g_SFPBTC, '#', 'Продаем', quantity_pair_b, 'SFP', 'за', price_b, 'BTC', 'по цене', price_bids_g_SFPBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SFPUSDT_SFPBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_SFPUSDT_SFPBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SFPUSDT != 0.0 and qty_bids_g_SFPUSDT != 0.0 and price_asks_g_SFPUSDT != 0.0 and qty_asks_g_SFPUSDT != 0.0 and price_bids_g_SFPBUSD != 0.0 and qty_bids_g_SFPBUSD != 0.0 and price_asks_g_SFPBUSD != 0.0 and qty_asks_g_SFPBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SFPBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SFPBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SFPBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SFPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SFPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SFPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SFPBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SFPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SFPBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SFPUSDT, '#', 'Покупаем', quantity_pair_a, 'SFP', 'за', price_a, 'USDT', 'по цене', price_asks_g_SFPUSDT) 
				print('Пара_B:', symbol_g_SFPBUSD, '#', 'Продаем', quantity_pair_b, 'SFP', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SFPBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SFPUSDT_SFPBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DODOUSDT_DODOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DODOUSDT != 0.0 and qty_bids_g_DODOUSDT != 0.0 and price_asks_g_DODOUSDT != 0.0 and qty_asks_g_DODOUSDT != 0.0 and price_bids_g_DODOBTC != 0.0 and qty_bids_g_DODOBTC != 0.0 and price_asks_g_DODOBTC != 0.0 and qty_asks_g_DODOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DODOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DODOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DODOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DODOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DODOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DODOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DODOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DODOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DODOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DODOUSDT, '#', 'Покупаем', quantity_pair_a, 'DODO', 'за', price_a, 'USDT', 'по цене', price_asks_g_DODOUSDT) 
				print('Пара_B:', symbol_g_DODOBTC, '#', 'Продаем', quantity_pair_b, 'DODO', 'за', price_b, 'BTC', 'по цене', price_bids_g_DODOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DODOUSDT_DODOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_DODOUSDT_DODOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DODOUSDT != 0.0 and qty_bids_g_DODOUSDT != 0.0 and price_asks_g_DODOUSDT != 0.0 and qty_asks_g_DODOUSDT != 0.0 and price_bids_g_DODOBUSD != 0.0 and qty_bids_g_DODOBUSD != 0.0 and price_asks_g_DODOBUSD != 0.0 and qty_asks_g_DODOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DODOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DODOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DODOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DODOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DODOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DODOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DODOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DODOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DODOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DODOUSDT, '#', 'Покупаем', quantity_pair_a, 'DODO', 'за', price_a, 'USDT', 'по цене', price_asks_g_DODOUSDT) 
				print('Пара_B:', symbol_g_DODOBUSD, '#', 'Продаем', quantity_pair_b, 'DODO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DODOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DODOUSDT_DODOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_CAKEUSDT_CAKEBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CAKEUSDT != 0.0 and qty_bids_g_CAKEUSDT != 0.0 and price_asks_g_CAKEUSDT != 0.0 and qty_asks_g_CAKEUSDT != 0.0 and price_bids_g_CAKEBNB != 0.0 and qty_bids_g_CAKEBNB != 0.0 and price_asks_g_CAKEBNB != 0.0 and qty_asks_g_CAKEBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CAKEBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CAKEBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CAKEBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CAKEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CAKEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CAKEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CAKEBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CAKEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CAKEBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CAKEUSDT, '#', 'Покупаем', quantity_pair_a, 'CAKE', 'за', price_a, 'USDT', 'по цене', price_asks_g_CAKEUSDT) 
				print('Пара_B:', symbol_g_CAKEBNB, '#', 'Продаем', quantity_pair_b, 'CAKE', 'за', price_b, 'BNB', 'по цене', price_bids_g_CAKEBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CAKEUSDT_CAKEBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_CAKEUSDT_CAKEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CAKEUSDT != 0.0 and qty_bids_g_CAKEUSDT != 0.0 and price_asks_g_CAKEUSDT != 0.0 and qty_asks_g_CAKEUSDT != 0.0 and price_bids_g_CAKEBUSD != 0.0 and qty_bids_g_CAKEBUSD != 0.0 and price_asks_g_CAKEBUSD != 0.0 and qty_asks_g_CAKEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CAKEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CAKEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CAKEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CAKEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CAKEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CAKEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CAKEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CAKEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CAKEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CAKEUSDT, '#', 'Покупаем', quantity_pair_a, 'CAKE', 'за', price_a, 'USDT', 'по цене', price_asks_g_CAKEUSDT) 
				print('Пара_B:', symbol_g_CAKEBUSD, '#', 'Продаем', quantity_pair_b, 'CAKE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CAKEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CAKEUSDT_CAKEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_CAKEUSDT_CAKEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CAKEUSDT != 0.0 and qty_bids_g_CAKEUSDT != 0.0 and price_asks_g_CAKEUSDT != 0.0 and qty_asks_g_CAKEUSDT != 0.0 and price_bids_g_CAKEBTC != 0.0 and qty_bids_g_CAKEBTC != 0.0 and price_asks_g_CAKEBTC != 0.0 and qty_asks_g_CAKEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CAKEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CAKEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CAKEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CAKEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CAKEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CAKEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CAKEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CAKEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CAKEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CAKEUSDT, '#', 'Покупаем', quantity_pair_a, 'CAKE', 'за', price_a, 'USDT', 'по цене', price_asks_g_CAKEUSDT) 
				print('Пара_B:', symbol_g_CAKEBTC, '#', 'Продаем', quantity_pair_b, 'CAKE', 'за', price_b, 'BTC', 'по цене', price_bids_g_CAKEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CAKEUSDT_CAKEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ACMUSDT_ACMBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ACMUSDT != 0.0 and qty_bids_g_ACMUSDT != 0.0 and price_asks_g_ACMUSDT != 0.0 and qty_asks_g_ACMUSDT != 0.0 and price_bids_g_ACMBTC != 0.0 and qty_bids_g_ACMBTC != 0.0 and price_asks_g_ACMBTC != 0.0 and qty_asks_g_ACMBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ACMBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ACMBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ACMBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ACMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ACMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ACMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ACMBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ACMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ACMBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ACMUSDT, '#', 'Покупаем', quantity_pair_a, 'ACM', 'за', price_a, 'USDT', 'по цене', price_asks_g_ACMUSDT) 
				print('Пара_B:', symbol_g_ACMBTC, '#', 'Продаем', quantity_pair_b, 'ACM', 'за', price_b, 'BTC', 'по цене', price_bids_g_ACMBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ACMUSDT_ACMBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ACMUSDT_ACMBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ACMUSDT != 0.0 and qty_bids_g_ACMUSDT != 0.0 and price_asks_g_ACMUSDT != 0.0 and qty_asks_g_ACMUSDT != 0.0 and price_bids_g_ACMBUSD != 0.0 and qty_bids_g_ACMBUSD != 0.0 and price_asks_g_ACMBUSD != 0.0 and qty_asks_g_ACMBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ACMBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ACMBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ACMBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ACMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ACMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ACMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ACMBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ACMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ACMBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ACMUSDT, '#', 'Покупаем', quantity_pair_a, 'ACM', 'за', price_a, 'USDT', 'по цене', price_asks_g_ACMUSDT) 
				print('Пара_B:', symbol_g_ACMBUSD, '#', 'Продаем', quantity_pair_b, 'ACM', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ACMBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ACMUSDT_ACMBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BADGERUSDT_BADGERBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BADGERUSDT != 0.0 and qty_bids_g_BADGERUSDT != 0.0 and price_asks_g_BADGERUSDT != 0.0 and qty_asks_g_BADGERUSDT != 0.0 and price_bids_g_BADGERBTC != 0.0 and qty_bids_g_BADGERBTC != 0.0 and price_asks_g_BADGERBTC != 0.0 and qty_asks_g_BADGERBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BADGERBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BADGERBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BADGERBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BADGERUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BADGERUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BADGERUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BADGERBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BADGERUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BADGERBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BADGERUSDT, '#', 'Покупаем', quantity_pair_a, 'BADGER', 'за', price_a, 'USDT', 'по цене', price_asks_g_BADGERUSDT) 
				print('Пара_B:', symbol_g_BADGERBTC, '#', 'Продаем', quantity_pair_b, 'BADGER', 'за', price_b, 'BTC', 'по цене', price_bids_g_BADGERBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BADGERUSDT_BADGERBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BADGERUSDT_BADGERBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BADGERUSDT != 0.0 and qty_bids_g_BADGERUSDT != 0.0 and price_asks_g_BADGERUSDT != 0.0 and qty_asks_g_BADGERUSDT != 0.0 and price_bids_g_BADGERBUSD != 0.0 and qty_bids_g_BADGERBUSD != 0.0 and price_asks_g_BADGERBUSD != 0.0 and qty_asks_g_BADGERBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BADGERBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BADGERBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BADGERBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BADGERUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BADGERUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BADGERUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BADGERBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BADGERUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BADGERBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BADGERUSDT, '#', 'Покупаем', quantity_pair_a, 'BADGER', 'за', price_a, 'USDT', 'по цене', price_asks_g_BADGERUSDT) 
				print('Пара_B:', symbol_g_BADGERBUSD, '#', 'Продаем', quantity_pair_b, 'BADGER', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BADGERBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BADGERUSDT_BADGERBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FISUSDT_FISBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FISUSDT != 0.0 and qty_bids_g_FISUSDT != 0.0 and price_asks_g_FISUSDT != 0.0 and qty_asks_g_FISUSDT != 0.0 and price_bids_g_FISBTC != 0.0 and qty_bids_g_FISBTC != 0.0 and price_asks_g_FISBTC != 0.0 and qty_asks_g_FISBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FISBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FISBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FISBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FISUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FISUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FISUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FISBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FISUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FISBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FISUSDT, '#', 'Покупаем', quantity_pair_a, 'FIS', 'за', price_a, 'USDT', 'по цене', price_asks_g_FISUSDT) 
				print('Пара_B:', symbol_g_FISBTC, '#', 'Продаем', quantity_pair_b, 'FIS', 'за', price_b, 'BTC', 'по цене', price_bids_g_FISBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FISUSDT_FISBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_FISUSDT_FISBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FISUSDT != 0.0 and qty_bids_g_FISUSDT != 0.0 and price_asks_g_FISUSDT != 0.0 and qty_asks_g_FISUSDT != 0.0 and price_bids_g_FISBUSD != 0.0 and qty_bids_g_FISBUSD != 0.0 and price_asks_g_FISBUSD != 0.0 and qty_asks_g_FISBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FISBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FISBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FISBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FISUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FISUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FISUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FISBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FISUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FISBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FISUSDT, '#', 'Покупаем', quantity_pair_a, 'FIS', 'за', price_a, 'USDT', 'по цене', price_asks_g_FISUSDT) 
				print('Пара_B:', symbol_g_FISBUSD, '#', 'Продаем', quantity_pair_b, 'FIS', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FISBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FISUSDT_FISBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_OMUSDT_OMBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OMUSDT != 0.0 and qty_bids_g_OMUSDT != 0.0 and price_asks_g_OMUSDT != 0.0 and qty_asks_g_OMUSDT != 0.0 and price_bids_g_OMBTC != 0.0 and qty_bids_g_OMBTC != 0.0 and price_asks_g_OMBTC != 0.0 and qty_asks_g_OMBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OMBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OMBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OMBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OMBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OMBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OMUSDT, '#', 'Покупаем', quantity_pair_a, 'OM', 'за', price_a, 'USDT', 'по цене', price_asks_g_OMUSDT) 
				print('Пара_B:', symbol_g_OMBTC, '#', 'Продаем', quantity_pair_b, 'OM', 'за', price_b, 'BTC', 'по цене', price_bids_g_OMBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OMUSDT_OMBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_OMUSDT_OMBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OMUSDT != 0.0 and qty_bids_g_OMUSDT != 0.0 and price_asks_g_OMUSDT != 0.0 and qty_asks_g_OMUSDT != 0.0 and price_bids_g_OMBUSD != 0.0 and qty_bids_g_OMBUSD != 0.0 and price_asks_g_OMBUSD != 0.0 and qty_asks_g_OMBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OMBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OMBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OMBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OMBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OMBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OMUSDT, '#', 'Покупаем', quantity_pair_a, 'OM', 'за', price_a, 'USDT', 'по цене', price_asks_g_OMUSDT) 
				print('Пара_B:', symbol_g_OMBUSD, '#', 'Продаем', quantity_pair_b, 'OM', 'за', price_b, 'BUSD', 'по цене', price_bids_g_OMBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OMUSDT_OMBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_PONDUSDT_PONDBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PONDUSDT != 0.0 and qty_bids_g_PONDUSDT != 0.0 and price_asks_g_PONDUSDT != 0.0 and qty_asks_g_PONDUSDT != 0.0 and price_bids_g_PONDBTC != 0.0 and qty_bids_g_PONDBTC != 0.0 and price_asks_g_PONDBTC != 0.0 and qty_asks_g_PONDBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PONDBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PONDBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PONDBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PONDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PONDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PONDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PONDBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PONDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PONDBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PONDUSDT, '#', 'Покупаем', quantity_pair_a, 'POND', 'за', price_a, 'USDT', 'по цене', price_asks_g_PONDUSDT) 
				print('Пара_B:', symbol_g_PONDBTC, '#', 'Продаем', quantity_pair_b, 'POND', 'за', price_b, 'BTC', 'по цене', price_bids_g_PONDBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PONDUSDT_PONDBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_PONDUSDT_PONDBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PONDUSDT != 0.0 and qty_bids_g_PONDUSDT != 0.0 and price_asks_g_PONDUSDT != 0.0 and qty_asks_g_PONDUSDT != 0.0 and price_bids_g_PONDBUSD != 0.0 and qty_bids_g_PONDBUSD != 0.0 and price_asks_g_PONDBUSD != 0.0 and qty_asks_g_PONDBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PONDBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PONDBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PONDBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PONDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PONDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PONDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PONDBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PONDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PONDBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PONDUSDT, '#', 'Покупаем', quantity_pair_a, 'POND', 'за', price_a, 'USDT', 'по цене', price_asks_g_PONDUSDT) 
				print('Пара_B:', symbol_g_PONDBUSD, '#', 'Продаем', quantity_pair_b, 'POND', 'за', price_b, 'BUSD', 'по цене', price_bids_g_PONDBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PONDUSDT_PONDBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DEGOUSDT_DEGOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DEGOUSDT != 0.0 and qty_bids_g_DEGOUSDT != 0.0 and price_asks_g_DEGOUSDT != 0.0 and qty_asks_g_DEGOUSDT != 0.0 and price_bids_g_DEGOBTC != 0.0 and qty_bids_g_DEGOBTC != 0.0 and price_asks_g_DEGOBTC != 0.0 and qty_asks_g_DEGOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DEGOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DEGOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DEGOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DEGOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DEGOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DEGOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DEGOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DEGOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DEGOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DEGOUSDT, '#', 'Покупаем', quantity_pair_a, 'DEGO', 'за', price_a, 'USDT', 'по цене', price_asks_g_DEGOUSDT) 
				print('Пара_B:', symbol_g_DEGOBTC, '#', 'Продаем', quantity_pair_b, 'DEGO', 'за', price_b, 'BTC', 'по цене', price_bids_g_DEGOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DEGOUSDT_DEGOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_DEGOUSDT_DEGOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DEGOUSDT != 0.0 and qty_bids_g_DEGOUSDT != 0.0 and price_asks_g_DEGOUSDT != 0.0 and qty_asks_g_DEGOUSDT != 0.0 and price_bids_g_DEGOBUSD != 0.0 and qty_bids_g_DEGOBUSD != 0.0 and price_asks_g_DEGOBUSD != 0.0 and qty_asks_g_DEGOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DEGOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DEGOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DEGOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DEGOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DEGOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DEGOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DEGOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DEGOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DEGOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DEGOUSDT, '#', 'Покупаем', quantity_pair_a, 'DEGO', 'за', price_a, 'USDT', 'по цене', price_asks_g_DEGOUSDT) 
				print('Пара_B:', symbol_g_DEGOBUSD, '#', 'Продаем', quantity_pair_b, 'DEGO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DEGOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DEGOUSDT_DEGOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ALICEUSDT_ALICEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALICEUSDT != 0.0 and qty_bids_g_ALICEUSDT != 0.0 and price_asks_g_ALICEUSDT != 0.0 and qty_asks_g_ALICEUSDT != 0.0 and price_bids_g_ALICEBTC != 0.0 and qty_bids_g_ALICEBTC != 0.0 and price_asks_g_ALICEBTC != 0.0 and qty_asks_g_ALICEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALICEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALICEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALICEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALICEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALICEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALICEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALICEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALICEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALICEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALICEUSDT, '#', 'Покупаем', quantity_pair_a, 'ALICE', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALICEUSDT) 
				print('Пара_B:', symbol_g_ALICEBTC, '#', 'Продаем', quantity_pair_b, 'ALICE', 'за', price_b, 'BTC', 'по цене', price_bids_g_ALICEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALICEUSDT_ALICEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ALICEUSDT_ALICEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALICEUSDT != 0.0 and qty_bids_g_ALICEUSDT != 0.0 and price_asks_g_ALICEUSDT != 0.0 and qty_asks_g_ALICEUSDT != 0.0 and price_bids_g_ALICEBUSD != 0.0 and qty_bids_g_ALICEBUSD != 0.0 and price_asks_g_ALICEBUSD != 0.0 and qty_asks_g_ALICEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALICEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALICEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALICEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALICEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALICEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALICEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALICEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALICEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALICEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALICEUSDT, '#', 'Покупаем', quantity_pair_a, 'ALICE', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALICEUSDT) 
				print('Пара_B:', symbol_g_ALICEBUSD, '#', 'Продаем', quantity_pair_b, 'ALICE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ALICEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALICEUSDT_ALICEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ALICEUSDT_ALICEBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALICEUSDT != 0.0 and qty_bids_g_ALICEUSDT != 0.0 and price_asks_g_ALICEUSDT != 0.0 and qty_asks_g_ALICEUSDT != 0.0 and price_bids_g_ALICEBNB != 0.0 and qty_bids_g_ALICEBNB != 0.0 and price_asks_g_ALICEBNB != 0.0 and qty_asks_g_ALICEBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALICEBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALICEBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALICEBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALICEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALICEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALICEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALICEBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALICEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALICEBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALICEUSDT, '#', 'Покупаем', quantity_pair_a, 'ALICE', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALICEUSDT) 
				print('Пара_B:', symbol_g_ALICEBNB, '#', 'Продаем', quantity_pair_b, 'ALICE', 'за', price_b, 'BNB', 'по цене', price_bids_g_ALICEBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALICEUSDT_ALICEBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_LINAUSDT_LINABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LINAUSDT != 0.0 and qty_bids_g_LINAUSDT != 0.0 and price_asks_g_LINAUSDT != 0.0 and qty_asks_g_LINAUSDT != 0.0 and price_bids_g_LINABTC != 0.0 and qty_bids_g_LINABTC != 0.0 and price_asks_g_LINABTC != 0.0 and qty_asks_g_LINABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LINABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LINABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LINABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LINAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LINAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LINAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LINABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LINAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LINABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LINAUSDT, '#', 'Покупаем', quantity_pair_a, 'LINA', 'за', price_a, 'USDT', 'по цене', price_asks_g_LINAUSDT) 
				print('Пара_B:', symbol_g_LINABTC, '#', 'Продаем', quantity_pair_b, 'LINA', 'за', price_b, 'BTC', 'по цене', price_bids_g_LINABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LINAUSDT_LINABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_LINAUSDT_LINABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LINAUSDT != 0.0 and qty_bids_g_LINAUSDT != 0.0 and price_asks_g_LINAUSDT != 0.0 and qty_asks_g_LINAUSDT != 0.0 and price_bids_g_LINABUSD != 0.0 and qty_bids_g_LINABUSD != 0.0 and price_asks_g_LINABUSD != 0.0 and qty_asks_g_LINABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LINABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LINABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LINABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LINAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LINAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LINAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LINABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LINAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LINABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LINAUSDT, '#', 'Покупаем', quantity_pair_a, 'LINA', 'за', price_a, 'USDT', 'по цене', price_asks_g_LINAUSDT) 
				print('Пара_B:', symbol_g_LINABUSD, '#', 'Продаем', quantity_pair_b, 'LINA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LINABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LINAUSDT_LINABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_PERPUSDT_PERPBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PERPUSDT != 0.0 and qty_bids_g_PERPUSDT != 0.0 and price_asks_g_PERPUSDT != 0.0 and qty_asks_g_PERPUSDT != 0.0 and price_bids_g_PERPBTC != 0.0 and qty_bids_g_PERPBTC != 0.0 and price_asks_g_PERPBTC != 0.0 and qty_asks_g_PERPBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PERPBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PERPBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PERPBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PERPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PERPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PERPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PERPBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PERPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PERPBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PERPUSDT, '#', 'Покупаем', quantity_pair_a, 'PERP', 'за', price_a, 'USDT', 'по цене', price_asks_g_PERPUSDT) 
				print('Пара_B:', symbol_g_PERPBTC, '#', 'Продаем', quantity_pair_b, 'PERP', 'за', price_b, 'BTC', 'по цене', price_bids_g_PERPBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PERPUSDT_PERPBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_PERPUSDT_PERPBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PERPUSDT != 0.0 and qty_bids_g_PERPUSDT != 0.0 and price_asks_g_PERPUSDT != 0.0 and qty_asks_g_PERPUSDT != 0.0 and price_bids_g_PERPBUSD != 0.0 and qty_bids_g_PERPBUSD != 0.0 and price_asks_g_PERPBUSD != 0.0 and qty_asks_g_PERPBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PERPBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PERPBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PERPBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PERPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PERPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PERPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PERPBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PERPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PERPBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PERPUSDT, '#', 'Покупаем', quantity_pair_a, 'PERP', 'за', price_a, 'USDT', 'по цене', price_asks_g_PERPUSDT) 
				print('Пара_B:', symbol_g_PERPBUSD, '#', 'Продаем', quantity_pair_b, 'PERP', 'за', price_b, 'BUSD', 'по цене', price_bids_g_PERPBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PERPUSDT_PERPBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SUPERUSDT_SUPERBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SUPERUSDT != 0.0 and qty_bids_g_SUPERUSDT != 0.0 and price_asks_g_SUPERUSDT != 0.0 and qty_asks_g_SUPERUSDT != 0.0 and price_bids_g_SUPERBTC != 0.0 and qty_bids_g_SUPERBTC != 0.0 and price_asks_g_SUPERBTC != 0.0 and qty_asks_g_SUPERBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SUPERBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SUPERBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SUPERBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SUPERUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SUPERUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SUPERUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SUPERBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SUPERUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SUPERBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SUPERUSDT, '#', 'Покупаем', quantity_pair_a, 'SUPER', 'за', price_a, 'USDT', 'по цене', price_asks_g_SUPERUSDT) 
				print('Пара_B:', symbol_g_SUPERBTC, '#', 'Продаем', quantity_pair_b, 'SUPER', 'за', price_b, 'BTC', 'по цене', price_bids_g_SUPERBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SUPERUSDT_SUPERBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_SUPERUSDT_SUPERBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SUPERUSDT != 0.0 and qty_bids_g_SUPERUSDT != 0.0 and price_asks_g_SUPERUSDT != 0.0 and qty_asks_g_SUPERUSDT != 0.0 and price_bids_g_SUPERBUSD != 0.0 and qty_bids_g_SUPERBUSD != 0.0 and price_asks_g_SUPERBUSD != 0.0 and qty_asks_g_SUPERBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SUPERBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SUPERBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SUPERBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SUPERUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SUPERUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SUPERUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SUPERBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SUPERUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SUPERBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SUPERUSDT, '#', 'Покупаем', quantity_pair_a, 'SUPER', 'за', price_a, 'USDT', 'по цене', price_asks_g_SUPERUSDT) 
				print('Пара_B:', symbol_g_SUPERBUSD, '#', 'Продаем', quantity_pair_b, 'SUPER', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SUPERBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SUPERUSDT_SUPERBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_CFXUSDT_CFXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CFXUSDT != 0.0 and qty_bids_g_CFXUSDT != 0.0 and price_asks_g_CFXUSDT != 0.0 and qty_asks_g_CFXUSDT != 0.0 and price_bids_g_CFXBTC != 0.0 and qty_bids_g_CFXBTC != 0.0 and price_asks_g_CFXBTC != 0.0 and qty_asks_g_CFXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CFXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CFXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CFXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CFXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CFXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CFXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CFXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CFXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CFXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CFXUSDT, '#', 'Покупаем', quantity_pair_a, 'CFX', 'за', price_a, 'USDT', 'по цене', price_asks_g_CFXUSDT) 
				print('Пара_B:', symbol_g_CFXBTC, '#', 'Продаем', quantity_pair_b, 'CFX', 'за', price_b, 'BTC', 'по цене', price_bids_g_CFXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CFXUSDT_CFXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CFXUSDT_CFXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CFXUSDT != 0.0 and qty_bids_g_CFXUSDT != 0.0 and price_asks_g_CFXUSDT != 0.0 and qty_asks_g_CFXUSDT != 0.0 and price_bids_g_CFXBUSD != 0.0 and qty_bids_g_CFXBUSD != 0.0 and price_asks_g_CFXBUSD != 0.0 and qty_asks_g_CFXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CFXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CFXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CFXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CFXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CFXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CFXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CFXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CFXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CFXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CFXUSDT, '#', 'Покупаем', quantity_pair_a, 'CFX', 'за', price_a, 'USDT', 'по цене', price_asks_g_CFXUSDT) 
				print('Пара_B:', symbol_g_CFXBUSD, '#', 'Продаем', quantity_pair_b, 'CFX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CFXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CFXUSDT_CFXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_AUTOUSDT_AUTOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AUTOUSDT != 0.0 and qty_bids_g_AUTOUSDT != 0.0 and price_asks_g_AUTOUSDT != 0.0 and qty_asks_g_AUTOUSDT != 0.0 and price_bids_g_AUTOBTC != 0.0 and qty_bids_g_AUTOBTC != 0.0 and price_asks_g_AUTOBTC != 0.0 and qty_asks_g_AUTOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AUTOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AUTOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AUTOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AUTOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AUTOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AUTOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AUTOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AUTOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AUTOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AUTOUSDT, '#', 'Покупаем', quantity_pair_a, 'AUTO', 'за', price_a, 'USDT', 'по цене', price_asks_g_AUTOUSDT) 
				print('Пара_B:', symbol_g_AUTOBTC, '#', 'Продаем', quantity_pair_b, 'AUTO', 'за', price_b, 'BTC', 'по цене', price_bids_g_AUTOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AUTOUSDT_AUTOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_AUTOUSDT_AUTOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AUTOUSDT != 0.0 and qty_bids_g_AUTOUSDT != 0.0 and price_asks_g_AUTOUSDT != 0.0 and qty_asks_g_AUTOUSDT != 0.0 and price_bids_g_AUTOBUSD != 0.0 and qty_bids_g_AUTOBUSD != 0.0 and price_asks_g_AUTOBUSD != 0.0 and qty_asks_g_AUTOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AUTOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AUTOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AUTOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AUTOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AUTOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AUTOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AUTOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AUTOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AUTOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AUTOUSDT, '#', 'Покупаем', quantity_pair_a, 'AUTO', 'за', price_a, 'USDT', 'по цене', price_asks_g_AUTOUSDT) 
				print('Пара_B:', symbol_g_AUTOBUSD, '#', 'Продаем', quantity_pair_b, 'AUTO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_AUTOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AUTOUSDT_AUTOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_TKOUSDT_TKOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TKOUSDT != 0.0 and qty_bids_g_TKOUSDT != 0.0 and price_asks_g_TKOUSDT != 0.0 and qty_asks_g_TKOUSDT != 0.0 and price_bids_g_TKOBTC != 0.0 and qty_bids_g_TKOBTC != 0.0 and price_asks_g_TKOBTC != 0.0 and qty_asks_g_TKOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TKOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TKOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TKOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TKOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TKOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TKOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TKOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TKOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TKOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TKOUSDT, '#', 'Покупаем', quantity_pair_a, 'TKO', 'за', price_a, 'USDT', 'по цене', price_asks_g_TKOUSDT) 
				print('Пара_B:', symbol_g_TKOBTC, '#', 'Продаем', quantity_pair_b, 'TKO', 'за', price_b, 'BTC', 'по цене', price_bids_g_TKOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TKOUSDT_TKOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_TKOUSDT_TKOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TKOUSDT != 0.0 and qty_bids_g_TKOUSDT != 0.0 and price_asks_g_TKOUSDT != 0.0 and qty_asks_g_TKOUSDT != 0.0 and price_bids_g_TKOBUSD != 0.0 and qty_bids_g_TKOBUSD != 0.0 and price_asks_g_TKOBUSD != 0.0 and qty_asks_g_TKOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TKOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TKOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TKOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TKOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TKOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TKOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TKOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TKOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TKOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TKOUSDT, '#', 'Покупаем', quantity_pair_a, 'TKO', 'за', price_a, 'USDT', 'по цене', price_asks_g_TKOUSDT) 
				print('Пара_B:', symbol_g_TKOBUSD, '#', 'Продаем', quantity_pair_b, 'TKO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_TKOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TKOUSDT_TKOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_PUNDIXUSDT_PUNDIXETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PUNDIXUSDT != 0.0 and qty_bids_g_PUNDIXUSDT != 0.0 and price_asks_g_PUNDIXUSDT != 0.0 and qty_asks_g_PUNDIXUSDT != 0.0 and price_bids_g_PUNDIXETH != 0.0 and qty_bids_g_PUNDIXETH != 0.0 and price_asks_g_PUNDIXETH != 0.0 and qty_asks_g_PUNDIXETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PUNDIXETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PUNDIXETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PUNDIXETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PUNDIXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PUNDIXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PUNDIXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PUNDIXETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PUNDIXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PUNDIXETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PUNDIXUSDT, '#', 'Покупаем', quantity_pair_a, 'PUNDIX', 'за', price_a, 'USDT', 'по цене', price_asks_g_PUNDIXUSDT) 
				print('Пара_B:', symbol_g_PUNDIXETH, '#', 'Продаем', quantity_pair_b, 'PUNDIX', 'за', price_b, 'ETH', 'по цене', price_bids_g_PUNDIXETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PUNDIXUSDT_PUNDIXETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_PUNDIXUSDT_PUNDIXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PUNDIXUSDT != 0.0 and qty_bids_g_PUNDIXUSDT != 0.0 and price_asks_g_PUNDIXUSDT != 0.0 and qty_asks_g_PUNDIXUSDT != 0.0 and price_bids_g_PUNDIXBUSD != 0.0 and qty_bids_g_PUNDIXBUSD != 0.0 and price_asks_g_PUNDIXBUSD != 0.0 and qty_asks_g_PUNDIXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PUNDIXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PUNDIXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PUNDIXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PUNDIXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PUNDIXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PUNDIXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PUNDIXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PUNDIXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PUNDIXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PUNDIXUSDT, '#', 'Покупаем', quantity_pair_a, 'PUNDIX', 'за', price_a, 'USDT', 'по цене', price_asks_g_PUNDIXUSDT) 
				print('Пара_B:', symbol_g_PUNDIXBUSD, '#', 'Продаем', quantity_pair_b, 'PUNDIX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_PUNDIXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PUNDIXUSDT_PUNDIXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_TLMUSDT_TLMBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TLMUSDT != 0.0 and qty_bids_g_TLMUSDT != 0.0 and price_asks_g_TLMUSDT != 0.0 and qty_asks_g_TLMUSDT != 0.0 and price_bids_g_TLMBTC != 0.0 and qty_bids_g_TLMBTC != 0.0 and price_asks_g_TLMBTC != 0.0 and qty_asks_g_TLMBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TLMBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TLMBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TLMBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TLMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TLMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TLMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TLMBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TLMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TLMBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TLMUSDT, '#', 'Покупаем', quantity_pair_a, 'TLM', 'за', price_a, 'USDT', 'по цене', price_asks_g_TLMUSDT) 
				print('Пара_B:', symbol_g_TLMBTC, '#', 'Продаем', quantity_pair_b, 'TLM', 'за', price_b, 'BTC', 'по цене', price_bids_g_TLMBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TLMUSDT_TLMBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_TLMUSDT_TLMBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TLMUSDT != 0.0 and qty_bids_g_TLMUSDT != 0.0 and price_asks_g_TLMUSDT != 0.0 and qty_asks_g_TLMUSDT != 0.0 and price_bids_g_TLMBUSD != 0.0 and qty_bids_g_TLMBUSD != 0.0 and price_asks_g_TLMBUSD != 0.0 and qty_asks_g_TLMBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TLMBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TLMBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TLMBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TLMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TLMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TLMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TLMBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TLMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TLMBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TLMUSDT, '#', 'Покупаем', quantity_pair_a, 'TLM', 'за', price_a, 'USDT', 'по цене', price_asks_g_TLMUSDT) 
				print('Пара_B:', symbol_g_TLMBUSD, '#', 'Продаем', quantity_pair_b, 'TLM', 'за', price_b, 'BUSD', 'по цене', price_bids_g_TLMBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TLMUSDT_TLMBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BARUSDT_BARBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BARUSDT != 0.0 and qty_bids_g_BARUSDT != 0.0 and price_asks_g_BARUSDT != 0.0 and qty_asks_g_BARUSDT != 0.0 and price_bids_g_BARBTC != 0.0 and qty_bids_g_BARBTC != 0.0 and price_asks_g_BARBTC != 0.0 and qty_asks_g_BARBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BARBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BARBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BARBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BARBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BARBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BARUSDT, '#', 'Покупаем', quantity_pair_a, 'BAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_BARUSDT) 
				print('Пара_B:', symbol_g_BARBTC, '#', 'Продаем', quantity_pair_b, 'BAR', 'за', price_b, 'BTC', 'по цене', price_bids_g_BARBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BARUSDT_BARBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BARUSDT_BARBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BARUSDT != 0.0 and qty_bids_g_BARUSDT != 0.0 and price_asks_g_BARUSDT != 0.0 and qty_asks_g_BARUSDT != 0.0 and price_bids_g_BARBUSD != 0.0 and qty_bids_g_BARBUSD != 0.0 and price_asks_g_BARBUSD != 0.0 and qty_asks_g_BARBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BARBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BARBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BARBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BARBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BARBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BARUSDT, '#', 'Покупаем', quantity_pair_a, 'BAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_BARUSDT) 
				print('Пара_B:', symbol_g_BARBUSD, '#', 'Продаем', quantity_pair_b, 'BAR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BARBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BARUSDT_BARBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FORTHUSDT_FORTHBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FORTHUSDT != 0.0 and qty_bids_g_FORTHUSDT != 0.0 and price_asks_g_FORTHUSDT != 0.0 and qty_asks_g_FORTHUSDT != 0.0 and price_bids_g_FORTHBTC != 0.0 and qty_bids_g_FORTHBTC != 0.0 and price_asks_g_FORTHBTC != 0.0 and qty_asks_g_FORTHBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FORTHBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FORTHBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FORTHBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FORTHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FORTHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FORTHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FORTHBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FORTHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FORTHBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FORTHUSDT, '#', 'Покупаем', quantity_pair_a, 'FORTH', 'за', price_a, 'USDT', 'по цене', price_asks_g_FORTHUSDT) 
				print('Пара_B:', symbol_g_FORTHBTC, '#', 'Продаем', quantity_pair_b, 'FORTH', 'за', price_b, 'BTC', 'по цене', price_bids_g_FORTHBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FORTHUSDT_FORTHBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_FORTHUSDT_FORTHBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FORTHUSDT != 0.0 and qty_bids_g_FORTHUSDT != 0.0 and price_asks_g_FORTHUSDT != 0.0 and qty_asks_g_FORTHUSDT != 0.0 and price_bids_g_FORTHBUSD != 0.0 and qty_bids_g_FORTHBUSD != 0.0 and price_asks_g_FORTHBUSD != 0.0 and qty_asks_g_FORTHBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FORTHBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FORTHBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FORTHBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FORTHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FORTHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FORTHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FORTHBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FORTHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FORTHBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FORTHUSDT, '#', 'Покупаем', quantity_pair_a, 'FORTH', 'за', price_a, 'USDT', 'по цене', price_asks_g_FORTHUSDT) 
				print('Пара_B:', symbol_g_FORTHBUSD, '#', 'Продаем', quantity_pair_b, 'FORTH', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FORTHBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FORTHUSDT_FORTHBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BAKEUSDT_BAKEBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BAKEUSDT != 0.0 and qty_bids_g_BAKEUSDT != 0.0 and price_asks_g_BAKEUSDT != 0.0 and qty_asks_g_BAKEUSDT != 0.0 and price_bids_g_BAKEBNB != 0.0 and qty_bids_g_BAKEBNB != 0.0 and price_asks_g_BAKEBNB != 0.0 and qty_asks_g_BAKEBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BAKEBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BAKEBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BAKEBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BAKEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BAKEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BAKEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BAKEBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BAKEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BAKEBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BAKEUSDT, '#', 'Покупаем', quantity_pair_a, 'BAKE', 'за', price_a, 'USDT', 'по цене', price_asks_g_BAKEUSDT) 
				print('Пара_B:', symbol_g_BAKEBNB, '#', 'Продаем', quantity_pair_b, 'BAKE', 'за', price_b, 'BNB', 'по цене', price_bids_g_BAKEBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BAKEUSDT_BAKEBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_BAKEUSDT_BAKEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BAKEUSDT != 0.0 and qty_bids_g_BAKEUSDT != 0.0 and price_asks_g_BAKEUSDT != 0.0 and qty_asks_g_BAKEUSDT != 0.0 and price_bids_g_BAKEBUSD != 0.0 and qty_bids_g_BAKEBUSD != 0.0 and price_asks_g_BAKEBUSD != 0.0 and qty_asks_g_BAKEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BAKEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BAKEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BAKEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BAKEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BAKEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BAKEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BAKEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BAKEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BAKEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BAKEUSDT, '#', 'Покупаем', quantity_pair_a, 'BAKE', 'за', price_a, 'USDT', 'по цене', price_asks_g_BAKEUSDT) 
				print('Пара_B:', symbol_g_BAKEBUSD, '#', 'Продаем', quantity_pair_b, 'BAKE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BAKEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BAKEUSDT_BAKEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BAKEUSDT_BAKEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BAKEUSDT != 0.0 and qty_bids_g_BAKEUSDT != 0.0 and price_asks_g_BAKEUSDT != 0.0 and qty_asks_g_BAKEUSDT != 0.0 and price_bids_g_BAKEBTC != 0.0 and qty_bids_g_BAKEBTC != 0.0 and price_asks_g_BAKEBTC != 0.0 and qty_asks_g_BAKEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BAKEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BAKEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BAKEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BAKEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BAKEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BAKEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BAKEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BAKEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BAKEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BAKEUSDT, '#', 'Покупаем', quantity_pair_a, 'BAKE', 'за', price_a, 'USDT', 'по цене', price_asks_g_BAKEUSDT) 
				print('Пара_B:', symbol_g_BAKEBTC, '#', 'Продаем', quantity_pair_b, 'BAKE', 'за', price_b, 'BTC', 'по цене', price_bids_g_BAKEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BAKEUSDT_BAKEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BURGERUSDT_BURGERBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BURGERUSDT != 0.0 and qty_bids_g_BURGERUSDT != 0.0 and price_asks_g_BURGERUSDT != 0.0 and qty_asks_g_BURGERUSDT != 0.0 and price_bids_g_BURGERBNB != 0.0 and qty_bids_g_BURGERBNB != 0.0 and price_asks_g_BURGERBNB != 0.0 and qty_asks_g_BURGERBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BURGERBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BURGERBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BURGERBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BURGERUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BURGERUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BURGERUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BURGERBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BURGERUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BURGERBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BURGERUSDT, '#', 'Покупаем', quantity_pair_a, 'BURGER', 'за', price_a, 'USDT', 'по цене', price_asks_g_BURGERUSDT) 
				print('Пара_B:', symbol_g_BURGERBNB, '#', 'Продаем', quantity_pair_b, 'BURGER', 'за', price_b, 'BNB', 'по цене', price_bids_g_BURGERBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BURGERUSDT_BURGERBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_BURGERUSDT_BURGERBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BURGERUSDT != 0.0 and qty_bids_g_BURGERUSDT != 0.0 and price_asks_g_BURGERUSDT != 0.0 and qty_asks_g_BURGERUSDT != 0.0 and price_bids_g_BURGERBUSD != 0.0 and qty_bids_g_BURGERBUSD != 0.0 and price_asks_g_BURGERBUSD != 0.0 and qty_asks_g_BURGERBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BURGERBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BURGERBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BURGERBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BURGERUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BURGERUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BURGERUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BURGERBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BURGERUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BURGERBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BURGERUSDT, '#', 'Покупаем', quantity_pair_a, 'BURGER', 'за', price_a, 'USDT', 'по цене', price_asks_g_BURGERUSDT) 
				print('Пара_B:', symbol_g_BURGERBUSD, '#', 'Продаем', quantity_pair_b, 'BURGER', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BURGERBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BURGERUSDT_BURGERBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BURGERUSDT_BURGERETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BURGERUSDT != 0.0 and qty_bids_g_BURGERUSDT != 0.0 and price_asks_g_BURGERUSDT != 0.0 and qty_asks_g_BURGERUSDT != 0.0 and price_bids_g_BURGERETH != 0.0 and qty_bids_g_BURGERETH != 0.0 and price_asks_g_BURGERETH != 0.0 and qty_asks_g_BURGERETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BURGERETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BURGERETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BURGERETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BURGERUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BURGERUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BURGERUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BURGERETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BURGERUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BURGERETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BURGERUSDT, '#', 'Покупаем', quantity_pair_a, 'BURGER', 'за', price_a, 'USDT', 'по цене', price_asks_g_BURGERUSDT) 
				print('Пара_B:', symbol_g_BURGERETH, '#', 'Продаем', quantity_pair_b, 'BURGER', 'за', price_b, 'ETH', 'по цене', price_bids_g_BURGERETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BURGERUSDT_BURGERETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_SLPUSDT_SLPETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SLPUSDT != 0.0 and qty_bids_g_SLPUSDT != 0.0 and price_asks_g_SLPUSDT != 0.0 and qty_asks_g_SLPUSDT != 0.0 and price_bids_g_SLPETH != 0.0 and qty_bids_g_SLPETH != 0.0 and price_asks_g_SLPETH != 0.0 and qty_asks_g_SLPETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SLPETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SLPETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SLPETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SLPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SLPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SLPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SLPETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SLPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SLPETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SLPUSDT, '#', 'Покупаем', quantity_pair_a, 'SLP', 'за', price_a, 'USDT', 'по цене', price_asks_g_SLPUSDT) 
				print('Пара_B:', symbol_g_SLPETH, '#', 'Продаем', quantity_pair_b, 'SLP', 'за', price_b, 'ETH', 'по цене', price_bids_g_SLPETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SLPUSDT_SLPETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_SLPUSDT_SLPBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SLPUSDT != 0.0 and qty_bids_g_SLPUSDT != 0.0 and price_asks_g_SLPUSDT != 0.0 and qty_asks_g_SLPUSDT != 0.0 and price_bids_g_SLPBUSD != 0.0 and qty_bids_g_SLPBUSD != 0.0 and price_asks_g_SLPBUSD != 0.0 and qty_asks_g_SLPBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SLPBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SLPBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SLPBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SLPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SLPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SLPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SLPBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SLPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SLPBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SLPUSDT, '#', 'Покупаем', quantity_pair_a, 'SLP', 'за', price_a, 'USDT', 'по цене', price_asks_g_SLPUSDT) 
				print('Пара_B:', symbol_g_SLPBUSD, '#', 'Продаем', quantity_pair_b, 'SLP', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SLPBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SLPUSDT_SLPBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SHIBUSDT_SHIBBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SHIBUSDT != 0.0 and qty_bids_g_SHIBUSDT != 0.0 and price_asks_g_SHIBUSDT != 0.0 and qty_asks_g_SHIBUSDT != 0.0 and price_bids_g_SHIBBUSD != 0.0 and qty_bids_g_SHIBBUSD != 0.0 and price_asks_g_SHIBBUSD != 0.0 and qty_asks_g_SHIBBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SHIBBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SHIBBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SHIBBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SHIBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SHIBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SHIBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SHIBBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SHIBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SHIBBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SHIBUSDT, '#', 'Покупаем', quantity_pair_a, 'SHIB', 'за', price_a, 'USDT', 'по цене', price_asks_g_SHIBUSDT) 
				print('Пара_B:', symbol_g_SHIBBUSD, '#', 'Продаем', quantity_pair_b, 'SHIB', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SHIBBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SHIBUSDT_SHIBBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SHIBUSDT_SHIBEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SHIBUSDT != 0.0 and qty_bids_g_SHIBUSDT != 0.0 and price_asks_g_SHIBUSDT != 0.0 and qty_asks_g_SHIBUSDT != 0.0 and price_bids_g_SHIBEUR != 0.0 and qty_bids_g_SHIBEUR != 0.0 and price_asks_g_SHIBEUR != 0.0 and qty_asks_g_SHIBEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SHIBEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SHIBEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SHIBEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SHIBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SHIBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SHIBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SHIBEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SHIBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SHIBEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SHIBUSDT, '#', 'Покупаем', quantity_pair_a, 'SHIB', 'за', price_a, 'USDT', 'по цене', price_asks_g_SHIBUSDT) 
				print('Пара_B:', symbol_g_SHIBEUR, '#', 'Продаем', quantity_pair_b, 'SHIB', 'за', price_b, 'EUR', 'по цене', price_bids_g_SHIBEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SHIBUSDT_SHIBEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_SHIBUSDT_SHIBAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SHIBUSDT != 0.0 and qty_bids_g_SHIBUSDT != 0.0 and price_asks_g_SHIBUSDT != 0.0 and qty_asks_g_SHIBUSDT != 0.0 and price_bids_g_SHIBAUD != 0.0 and qty_bids_g_SHIBAUD != 0.0 and price_asks_g_SHIBAUD != 0.0 and qty_asks_g_SHIBAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SHIBAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SHIBAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SHIBAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SHIBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SHIBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SHIBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SHIBAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SHIBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SHIBAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SHIBUSDT, '#', 'Покупаем', quantity_pair_a, 'SHIB', 'за', price_a, 'USDT', 'по цене', price_asks_g_SHIBUSDT) 
				print('Пара_B:', symbol_g_SHIBAUD, '#', 'Продаем', quantity_pair_b, 'SHIB', 'за', price_b, 'AUD', 'по цене', price_bids_g_SHIBAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SHIBUSDT_SHIBAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_SHIBUSDT_SHIBDOGE_DOGEUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SHIBUSDT != 0.0 and qty_bids_g_SHIBUSDT != 0.0 and price_asks_g_SHIBUSDT != 0.0 and qty_asks_g_SHIBUSDT != 0.0 and price_bids_g_SHIBDOGE != 0.0 and qty_bids_g_SHIBDOGE != 0.0 and price_asks_g_SHIBDOGE != 0.0 and qty_asks_g_SHIBDOGE != 0.0 and price_bids_g_DOGEUSDT != 0.0 and qty_bids_g_DOGEUSDT != 0.0 and price_asks_g_DOGEUSDT != 0.0 and qty_asks_g_DOGEUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_DOGEUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_DOGEUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SHIBDOGE) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SHIBDOGE)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SHIBDOGE)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SHIBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SHIBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SHIBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SHIBDOGE) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_DOGEUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SHIBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SHIBDOGE', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='DOGEUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SHIBUSDT, '#', 'Покупаем', quantity_pair_a, 'SHIB', 'за', price_a, 'USDT', 'по цене', price_asks_g_SHIBUSDT) 
				print('Пара_B:', symbol_g_SHIBDOGE, '#', 'Продаем', quantity_pair_b, 'SHIB', 'за', price_b, 'DOGE', 'по цене', price_bids_g_SHIBDOGE) 
				print('Пара_C:', symbol_g_DOGEUSDT, '#', 'Продаем', quantity_pair_c, 'DOGE', 'за', price_c, 'USDT', 'по цене', price_bids_g_DOGEUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SHIBUSDT_SHIBDOGE_DOGEUSDT_Trade).start() 

###################################################################### 


def loop_ICPUSDT_ICPBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ICPUSDT != 0.0 and qty_bids_g_ICPUSDT != 0.0 and price_asks_g_ICPUSDT != 0.0 and qty_asks_g_ICPUSDT != 0.0 and price_bids_g_ICPBTC != 0.0 and qty_bids_g_ICPBTC != 0.0 and price_asks_g_ICPBTC != 0.0 and qty_asks_g_ICPBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ICPBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ICPBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ICPBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ICPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ICPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ICPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ICPBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ICPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ICPBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ICPUSDT, '#', 'Покупаем', quantity_pair_a, 'ICP', 'за', price_a, 'USDT', 'по цене', price_asks_g_ICPUSDT) 
				print('Пара_B:', symbol_g_ICPBTC, '#', 'Продаем', quantity_pair_b, 'ICP', 'за', price_b, 'BTC', 'по цене', price_bids_g_ICPBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ICPUSDT_ICPBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ICPUSDT_ICPBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ICPUSDT != 0.0 and qty_bids_g_ICPUSDT != 0.0 and price_asks_g_ICPUSDT != 0.0 and qty_asks_g_ICPUSDT != 0.0 and price_bids_g_ICPBNB != 0.0 and qty_bids_g_ICPBNB != 0.0 and price_asks_g_ICPBNB != 0.0 and qty_asks_g_ICPBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ICPBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ICPBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ICPBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ICPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ICPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ICPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ICPBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ICPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ICPBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ICPUSDT, '#', 'Покупаем', quantity_pair_a, 'ICP', 'за', price_a, 'USDT', 'по цене', price_asks_g_ICPUSDT) 
				print('Пара_B:', symbol_g_ICPBNB, '#', 'Продаем', quantity_pair_b, 'ICP', 'за', price_b, 'BNB', 'по цене', price_bids_g_ICPBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ICPUSDT_ICPBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ICPUSDT_ICPBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ICPUSDT != 0.0 and qty_bids_g_ICPUSDT != 0.0 and price_asks_g_ICPUSDT != 0.0 and qty_asks_g_ICPUSDT != 0.0 and price_bids_g_ICPBUSD != 0.0 and qty_bids_g_ICPBUSD != 0.0 and price_asks_g_ICPBUSD != 0.0 and qty_asks_g_ICPBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ICPBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ICPBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ICPBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ICPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ICPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ICPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ICPBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ICPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ICPBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ICPUSDT, '#', 'Покупаем', quantity_pair_a, 'ICP', 'за', price_a, 'USDT', 'по цене', price_asks_g_ICPUSDT) 
				print('Пара_B:', symbol_g_ICPBUSD, '#', 'Продаем', quantity_pair_b, 'ICP', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ICPBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ICPUSDT_ICPBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ICPUSDT_ICPEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ICPUSDT != 0.0 and qty_bids_g_ICPUSDT != 0.0 and price_asks_g_ICPUSDT != 0.0 and qty_asks_g_ICPUSDT != 0.0 and price_bids_g_ICPEUR != 0.0 and qty_bids_g_ICPEUR != 0.0 and price_asks_g_ICPEUR != 0.0 and qty_asks_g_ICPEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ICPEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ICPEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ICPEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ICPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ICPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ICPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ICPEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ICPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ICPEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ICPUSDT, '#', 'Покупаем', quantity_pair_a, 'ICP', 'за', price_a, 'USDT', 'по цене', price_asks_g_ICPUSDT) 
				print('Пара_B:', symbol_g_ICPEUR, '#', 'Продаем', quantity_pair_b, 'ICP', 'за', price_b, 'EUR', 'по цене', price_bids_g_ICPEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ICPUSDT_ICPEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_ICPUSDT_ICPETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ICPUSDT != 0.0 and qty_bids_g_ICPUSDT != 0.0 and price_asks_g_ICPUSDT != 0.0 and qty_asks_g_ICPUSDT != 0.0 and price_bids_g_ICPETH != 0.0 and qty_bids_g_ICPETH != 0.0 and price_asks_g_ICPETH != 0.0 and qty_asks_g_ICPETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ICPETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ICPETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ICPETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ICPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ICPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ICPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ICPETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ICPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ICPETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ICPUSDT, '#', 'Покупаем', quantity_pair_a, 'ICP', 'за', price_a, 'USDT', 'по цене', price_asks_g_ICPUSDT) 
				print('Пара_B:', symbol_g_ICPETH, '#', 'Продаем', quantity_pair_b, 'ICP', 'за', price_b, 'ETH', 'по цене', price_bids_g_ICPETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ICPUSDT_ICPETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ARUSDT_ARBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ARUSDT != 0.0 and qty_bids_g_ARUSDT != 0.0 and price_asks_g_ARUSDT != 0.0 and qty_asks_g_ARUSDT != 0.0 and price_bids_g_ARBTC != 0.0 and qty_bids_g_ARBTC != 0.0 and price_asks_g_ARBTC != 0.0 and qty_asks_g_ARBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ARBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ARBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ARBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ARBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ARBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ARUSDT, '#', 'Покупаем', quantity_pair_a, 'AR', 'за', price_a, 'USDT', 'по цене', price_asks_g_ARUSDT) 
				print('Пара_B:', symbol_g_ARBTC, '#', 'Продаем', quantity_pair_b, 'AR', 'за', price_b, 'BTC', 'по цене', price_bids_g_ARBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ARUSDT_ARBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ARUSDT_ARBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ARUSDT != 0.0 and qty_bids_g_ARUSDT != 0.0 and price_asks_g_ARUSDT != 0.0 and qty_asks_g_ARUSDT != 0.0 and price_bids_g_ARBNB != 0.0 and qty_bids_g_ARBNB != 0.0 and price_asks_g_ARBNB != 0.0 and qty_asks_g_ARBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ARBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ARBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ARBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ARBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ARBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ARUSDT, '#', 'Покупаем', quantity_pair_a, 'AR', 'за', price_a, 'USDT', 'по цене', price_asks_g_ARUSDT) 
				print('Пара_B:', symbol_g_ARBNB, '#', 'Продаем', quantity_pair_b, 'AR', 'за', price_b, 'BNB', 'по цене', price_bids_g_ARBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ARUSDT_ARBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ARUSDT_ARBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ARUSDT != 0.0 and qty_bids_g_ARUSDT != 0.0 and price_asks_g_ARUSDT != 0.0 and qty_asks_g_ARUSDT != 0.0 and price_bids_g_ARBUSD != 0.0 and qty_bids_g_ARBUSD != 0.0 and price_asks_g_ARBUSD != 0.0 and qty_asks_g_ARBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ARBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ARBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ARBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ARBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ARBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ARUSDT, '#', 'Покупаем', quantity_pair_a, 'AR', 'за', price_a, 'USDT', 'по цене', price_asks_g_ARUSDT) 
				print('Пара_B:', symbol_g_ARBUSD, '#', 'Продаем', quantity_pair_b, 'AR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ARBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ARUSDT_ARBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_POLSUSDT_POLSBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_POLSUSDT != 0.0 and qty_bids_g_POLSUSDT != 0.0 and price_asks_g_POLSUSDT != 0.0 and qty_asks_g_POLSUSDT != 0.0 and price_bids_g_POLSBTC != 0.0 and qty_bids_g_POLSBTC != 0.0 and price_asks_g_POLSBTC != 0.0 and qty_asks_g_POLSBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_POLSBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_POLSBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_POLSBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_POLSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_POLSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_POLSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_POLSBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='POLSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='POLSBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_POLSUSDT, '#', 'Покупаем', quantity_pair_a, 'POLS', 'за', price_a, 'USDT', 'по цене', price_asks_g_POLSUSDT) 
				print('Пара_B:', symbol_g_POLSBTC, '#', 'Продаем', quantity_pair_b, 'POLS', 'за', price_b, 'BTC', 'по цене', price_bids_g_POLSBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_POLSUSDT_POLSBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_POLSUSDT_POLSBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_POLSUSDT != 0.0 and qty_bids_g_POLSUSDT != 0.0 and price_asks_g_POLSUSDT != 0.0 and qty_asks_g_POLSUSDT != 0.0 and price_bids_g_POLSBNB != 0.0 and qty_bids_g_POLSBNB != 0.0 and price_asks_g_POLSBNB != 0.0 and qty_asks_g_POLSBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_POLSBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_POLSBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_POLSBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_POLSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_POLSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_POLSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_POLSBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='POLSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='POLSBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_POLSUSDT, '#', 'Покупаем', quantity_pair_a, 'POLS', 'за', price_a, 'USDT', 'по цене', price_asks_g_POLSUSDT) 
				print('Пара_B:', symbol_g_POLSBNB, '#', 'Продаем', quantity_pair_b, 'POLS', 'за', price_b, 'BNB', 'по цене', price_bids_g_POLSBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_POLSUSDT_POLSBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_POLSUSDT_POLSBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_POLSUSDT != 0.0 and qty_bids_g_POLSUSDT != 0.0 and price_asks_g_POLSUSDT != 0.0 and qty_asks_g_POLSUSDT != 0.0 and price_bids_g_POLSBUSD != 0.0 and qty_bids_g_POLSBUSD != 0.0 and price_asks_g_POLSBUSD != 0.0 and qty_asks_g_POLSBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_POLSBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_POLSBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_POLSBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_POLSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_POLSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_POLSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_POLSBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='POLSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='POLSBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_POLSUSDT, '#', 'Покупаем', quantity_pair_a, 'POLS', 'за', price_a, 'USDT', 'по цене', price_asks_g_POLSUSDT) 
				print('Пара_B:', symbol_g_POLSBUSD, '#', 'Продаем', quantity_pair_b, 'POLS', 'за', price_b, 'BUSD', 'по цене', price_bids_g_POLSBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_POLSUSDT_POLSBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_MDXUSDT_MDXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MDXUSDT != 0.0 and qty_bids_g_MDXUSDT != 0.0 and price_asks_g_MDXUSDT != 0.0 and qty_asks_g_MDXUSDT != 0.0 and price_bids_g_MDXBTC != 0.0 and qty_bids_g_MDXBTC != 0.0 and price_asks_g_MDXBTC != 0.0 and qty_asks_g_MDXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MDXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MDXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MDXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MDXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MDXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MDXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MDXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MDXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MDXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MDXUSDT, '#', 'Покупаем', quantity_pair_a, 'MDX', 'за', price_a, 'USDT', 'по цене', price_asks_g_MDXUSDT) 
				print('Пара_B:', symbol_g_MDXBTC, '#', 'Продаем', quantity_pair_b, 'MDX', 'за', price_b, 'BTC', 'по цене', price_bids_g_MDXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MDXUSDT_MDXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MDXUSDT_MDXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MDXUSDT != 0.0 and qty_bids_g_MDXUSDT != 0.0 and price_asks_g_MDXUSDT != 0.0 and qty_asks_g_MDXUSDT != 0.0 and price_bids_g_MDXBUSD != 0.0 and qty_bids_g_MDXBUSD != 0.0 and price_asks_g_MDXBUSD != 0.0 and qty_asks_g_MDXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MDXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MDXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MDXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MDXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MDXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MDXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MDXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MDXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MDXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MDXUSDT, '#', 'Покупаем', quantity_pair_a, 'MDX', 'за', price_a, 'USDT', 'по цене', price_asks_g_MDXUSDT) 
				print('Пара_B:', symbol_g_MDXBUSD, '#', 'Продаем', quantity_pair_b, 'MDX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MDXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MDXUSDT_MDXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_MASKUSDT_MASKBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MASKUSDT != 0.0 and qty_bids_g_MASKUSDT != 0.0 and price_asks_g_MASKUSDT != 0.0 and qty_asks_g_MASKUSDT != 0.0 and price_bids_g_MASKBNB != 0.0 and qty_bids_g_MASKBNB != 0.0 and price_asks_g_MASKBNB != 0.0 and qty_asks_g_MASKBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MASKBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MASKBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MASKBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MASKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MASKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MASKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MASKBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MASKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MASKBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MASKUSDT, '#', 'Покупаем', quantity_pair_a, 'MASK', 'за', price_a, 'USDT', 'по цене', price_asks_g_MASKUSDT) 
				print('Пара_B:', symbol_g_MASKBNB, '#', 'Продаем', quantity_pair_b, 'MASK', 'за', price_b, 'BNB', 'по цене', price_bids_g_MASKBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MASKUSDT_MASKBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_MASKUSDT_MASKBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MASKUSDT != 0.0 and qty_bids_g_MASKUSDT != 0.0 and price_asks_g_MASKUSDT != 0.0 and qty_asks_g_MASKUSDT != 0.0 and price_bids_g_MASKBUSD != 0.0 and qty_bids_g_MASKBUSD != 0.0 and price_asks_g_MASKBUSD != 0.0 and qty_asks_g_MASKBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MASKBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MASKBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MASKBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MASKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MASKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MASKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MASKBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MASKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MASKBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MASKUSDT, '#', 'Покупаем', quantity_pair_a, 'MASK', 'за', price_a, 'USDT', 'по цене', price_asks_g_MASKUSDT) 
				print('Пара_B:', symbol_g_MASKBUSD, '#', 'Продаем', quantity_pair_b, 'MASK', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MASKBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MASKUSDT_MASKBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_LPTUSDT_LPTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LPTUSDT != 0.0 and qty_bids_g_LPTUSDT != 0.0 and price_asks_g_LPTUSDT != 0.0 and qty_asks_g_LPTUSDT != 0.0 and price_bids_g_LPTBTC != 0.0 and qty_bids_g_LPTBTC != 0.0 and price_asks_g_LPTBTC != 0.0 and qty_asks_g_LPTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LPTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LPTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LPTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LPTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LPTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LPTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LPTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LPTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LPTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LPTUSDT, '#', 'Покупаем', quantity_pair_a, 'LPT', 'за', price_a, 'USDT', 'по цене', price_asks_g_LPTUSDT) 
				print('Пара_B:', symbol_g_LPTBTC, '#', 'Продаем', quantity_pair_b, 'LPT', 'за', price_b, 'BTC', 'по цене', price_bids_g_LPTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LPTUSDT_LPTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_LPTUSDT_LPTBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LPTUSDT != 0.0 and qty_bids_g_LPTUSDT != 0.0 and price_asks_g_LPTUSDT != 0.0 and qty_asks_g_LPTUSDT != 0.0 and price_bids_g_LPTBNB != 0.0 and qty_bids_g_LPTBNB != 0.0 and price_asks_g_LPTBNB != 0.0 and qty_asks_g_LPTBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LPTBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LPTBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LPTBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LPTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LPTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LPTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LPTBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LPTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LPTBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LPTUSDT, '#', 'Покупаем', quantity_pair_a, 'LPT', 'за', price_a, 'USDT', 'по цене', price_asks_g_LPTUSDT) 
				print('Пара_B:', symbol_g_LPTBNB, '#', 'Продаем', quantity_pair_b, 'LPT', 'за', price_b, 'BNB', 'по цене', price_bids_g_LPTBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LPTUSDT_LPTBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_LPTUSDT_LPTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LPTUSDT != 0.0 and qty_bids_g_LPTUSDT != 0.0 and price_asks_g_LPTUSDT != 0.0 and qty_asks_g_LPTUSDT != 0.0 and price_bids_g_LPTBUSD != 0.0 and qty_bids_g_LPTBUSD != 0.0 and price_asks_g_LPTBUSD != 0.0 and qty_asks_g_LPTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LPTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LPTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LPTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LPTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LPTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LPTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LPTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LPTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LPTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LPTUSDT, '#', 'Покупаем', quantity_pair_a, 'LPT', 'за', price_a, 'USDT', 'по цене', price_asks_g_LPTUSDT) 
				print('Пара_B:', symbol_g_LPTBUSD, '#', 'Продаем', quantity_pair_b, 'LPT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LPTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LPTUSDT_LPTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_XVGUSDT_XVGETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XVGUSDT != 0.0 and qty_bids_g_XVGUSDT != 0.0 and price_asks_g_XVGUSDT != 0.0 and qty_asks_g_XVGUSDT != 0.0 and price_bids_g_XVGETH != 0.0 and qty_bids_g_XVGETH != 0.0 and price_asks_g_XVGETH != 0.0 and qty_asks_g_XVGETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XVGETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XVGETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XVGETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XVGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XVGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XVGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XVGETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XVGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XVGETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XVGUSDT, '#', 'Покупаем', quantity_pair_a, 'XVG', 'за', price_a, 'USDT', 'по цене', price_asks_g_XVGUSDT) 
				print('Пара_B:', symbol_g_XVGETH, '#', 'Продаем', quantity_pair_b, 'XVG', 'за', price_b, 'ETH', 'по цене', price_bids_g_XVGETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XVGUSDT_XVGETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_XVGUSDT_XVGBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XVGUSDT != 0.0 and qty_bids_g_XVGUSDT != 0.0 and price_asks_g_XVGUSDT != 0.0 and qty_asks_g_XVGUSDT != 0.0 and price_bids_g_XVGBUSD != 0.0 and qty_bids_g_XVGBUSD != 0.0 and price_asks_g_XVGBUSD != 0.0 and qty_asks_g_XVGBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XVGBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XVGBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XVGBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XVGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XVGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XVGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XVGBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XVGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XVGBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XVGUSDT, '#', 'Покупаем', quantity_pair_a, 'XVG', 'за', price_a, 'USDT', 'по цене', price_asks_g_XVGUSDT) 
				print('Пара_B:', symbol_g_XVGBUSD, '#', 'Продаем', quantity_pair_b, 'XVG', 'за', price_b, 'BUSD', 'по цене', price_bids_g_XVGBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XVGUSDT_XVGBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ATAUSDT_ATABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ATAUSDT != 0.0 and qty_bids_g_ATAUSDT != 0.0 and price_asks_g_ATAUSDT != 0.0 and qty_asks_g_ATAUSDT != 0.0 and price_bids_g_ATABTC != 0.0 and qty_bids_g_ATABTC != 0.0 and price_asks_g_ATABTC != 0.0 and qty_asks_g_ATABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ATABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ATABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ATABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ATAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ATAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ATAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ATABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ATAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ATABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ATAUSDT, '#', 'Покупаем', quantity_pair_a, 'ATA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ATAUSDT) 
				print('Пара_B:', symbol_g_ATABTC, '#', 'Продаем', quantity_pair_b, 'ATA', 'за', price_b, 'BTC', 'по цене', price_bids_g_ATABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ATAUSDT_ATABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ATAUSDT_ATABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ATAUSDT != 0.0 and qty_bids_g_ATAUSDT != 0.0 and price_asks_g_ATAUSDT != 0.0 and qty_asks_g_ATAUSDT != 0.0 and price_bids_g_ATABUSD != 0.0 and qty_bids_g_ATABUSD != 0.0 and price_asks_g_ATABUSD != 0.0 and qty_asks_g_ATABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ATABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ATABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ATABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ATAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ATAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ATAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ATABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ATAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ATABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ATAUSDT, '#', 'Покупаем', quantity_pair_a, 'ATA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ATAUSDT) 
				print('Пара_B:', symbol_g_ATABUSD, '#', 'Продаем', quantity_pair_b, 'ATA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ATABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ATAUSDT_ATABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_GTCUSDT_GTCBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GTCUSDT != 0.0 and qty_bids_g_GTCUSDT != 0.0 and price_asks_g_GTCUSDT != 0.0 and qty_asks_g_GTCUSDT != 0.0 and price_bids_g_GTCBTC != 0.0 and qty_bids_g_GTCBTC != 0.0 and price_asks_g_GTCBTC != 0.0 and qty_asks_g_GTCBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GTCBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GTCBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GTCBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GTCBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GTCBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GTCUSDT, '#', 'Покупаем', quantity_pair_a, 'GTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_GTCUSDT) 
				print('Пара_B:', symbol_g_GTCBTC, '#', 'Продаем', quantity_pair_b, 'GTC', 'за', price_b, 'BTC', 'по цене', price_bids_g_GTCBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GTCUSDT_GTCBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_GTCUSDT_GTCBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GTCUSDT != 0.0 and qty_bids_g_GTCUSDT != 0.0 and price_asks_g_GTCUSDT != 0.0 and qty_asks_g_GTCUSDT != 0.0 and price_bids_g_GTCBUSD != 0.0 and qty_bids_g_GTCBUSD != 0.0 and price_asks_g_GTCBUSD != 0.0 and qty_asks_g_GTCBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GTCBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GTCBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GTCBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GTCBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GTCBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GTCUSDT, '#', 'Покупаем', quantity_pair_a, 'GTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_GTCUSDT) 
				print('Пара_B:', symbol_g_GTCBUSD, '#', 'Продаем', quantity_pair_b, 'GTC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_GTCBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GTCUSDT_GTCBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ERNUSDT_ERNBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ERNUSDT != 0.0 and qty_bids_g_ERNUSDT != 0.0 and price_asks_g_ERNUSDT != 0.0 and qty_asks_g_ERNUSDT != 0.0 and price_bids_g_ERNBNB != 0.0 and qty_bids_g_ERNBNB != 0.0 and price_asks_g_ERNBNB != 0.0 and qty_asks_g_ERNBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ERNBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ERNBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ERNBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ERNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ERNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ERNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ERNBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ERNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ERNBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ERNUSDT, '#', 'Покупаем', quantity_pair_a, 'ERN', 'за', price_a, 'USDT', 'по цене', price_asks_g_ERNUSDT) 
				print('Пара_B:', symbol_g_ERNBNB, '#', 'Продаем', quantity_pair_b, 'ERN', 'за', price_b, 'BNB', 'по цене', price_bids_g_ERNBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ERNUSDT_ERNBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ERNUSDT_ERNBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ERNUSDT != 0.0 and qty_bids_g_ERNUSDT != 0.0 and price_asks_g_ERNUSDT != 0.0 and qty_asks_g_ERNUSDT != 0.0 and price_bids_g_ERNBUSD != 0.0 and qty_bids_g_ERNBUSD != 0.0 and price_asks_g_ERNBUSD != 0.0 and qty_asks_g_ERNBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ERNBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ERNBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ERNBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ERNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ERNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ERNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ERNBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ERNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ERNBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ERNUSDT, '#', 'Покупаем', quantity_pair_a, 'ERN', 'за', price_a, 'USDT', 'по цене', price_asks_g_ERNUSDT) 
				print('Пара_B:', symbol_g_ERNBUSD, '#', 'Продаем', quantity_pair_b, 'ERN', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ERNBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ERNUSDT_ERNBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_KLAYUSDT_KLAYBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KLAYUSDT != 0.0 and qty_bids_g_KLAYUSDT != 0.0 and price_asks_g_KLAYUSDT != 0.0 and qty_asks_g_KLAYUSDT != 0.0 and price_bids_g_KLAYBTC != 0.0 and qty_bids_g_KLAYBTC != 0.0 and price_asks_g_KLAYBTC != 0.0 and qty_asks_g_KLAYBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KLAYBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KLAYBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KLAYBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KLAYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KLAYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KLAYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KLAYBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KLAYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KLAYBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KLAYUSDT, '#', 'Покупаем', quantity_pair_a, 'KLAY', 'за', price_a, 'USDT', 'по цене', price_asks_g_KLAYUSDT) 
				print('Пара_B:', symbol_g_KLAYBTC, '#', 'Продаем', quantity_pair_b, 'KLAY', 'за', price_b, 'BTC', 'по цене', price_bids_g_KLAYBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KLAYUSDT_KLAYBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_KLAYUSDT_KLAYBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KLAYUSDT != 0.0 and qty_bids_g_KLAYUSDT != 0.0 and price_asks_g_KLAYUSDT != 0.0 and qty_asks_g_KLAYUSDT != 0.0 and price_bids_g_KLAYBNB != 0.0 and qty_bids_g_KLAYBNB != 0.0 and price_asks_g_KLAYBNB != 0.0 and qty_asks_g_KLAYBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KLAYBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KLAYBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KLAYBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KLAYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KLAYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KLAYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KLAYBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KLAYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KLAYBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KLAYUSDT, '#', 'Покупаем', quantity_pair_a, 'KLAY', 'за', price_a, 'USDT', 'по цене', price_asks_g_KLAYUSDT) 
				print('Пара_B:', symbol_g_KLAYBNB, '#', 'Продаем', quantity_pair_b, 'KLAY', 'за', price_b, 'BNB', 'по цене', price_bids_g_KLAYBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KLAYUSDT_KLAYBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_KLAYUSDT_KLAYBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KLAYUSDT != 0.0 and qty_bids_g_KLAYUSDT != 0.0 and price_asks_g_KLAYUSDT != 0.0 and qty_asks_g_KLAYUSDT != 0.0 and price_bids_g_KLAYBUSD != 0.0 and qty_bids_g_KLAYBUSD != 0.0 and price_asks_g_KLAYBUSD != 0.0 and qty_asks_g_KLAYBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KLAYBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KLAYBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KLAYBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KLAYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KLAYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KLAYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KLAYBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KLAYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KLAYBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KLAYUSDT, '#', 'Покупаем', quantity_pair_a, 'KLAY', 'за', price_a, 'USDT', 'по цене', price_asks_g_KLAYUSDT) 
				print('Пара_B:', symbol_g_KLAYBUSD, '#', 'Продаем', quantity_pair_b, 'KLAY', 'за', price_b, 'BUSD', 'по цене', price_bids_g_KLAYBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KLAYUSDT_KLAYBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_PHAUSDT_PHABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PHAUSDT != 0.0 and qty_bids_g_PHAUSDT != 0.0 and price_asks_g_PHAUSDT != 0.0 and qty_asks_g_PHAUSDT != 0.0 and price_bids_g_PHABTC != 0.0 and qty_bids_g_PHABTC != 0.0 and price_asks_g_PHABTC != 0.0 and qty_asks_g_PHABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PHABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PHABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PHABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PHAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PHAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PHAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PHABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PHAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PHABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PHAUSDT, '#', 'Покупаем', quantity_pair_a, 'PHA', 'за', price_a, 'USDT', 'по цене', price_asks_g_PHAUSDT) 
				print('Пара_B:', symbol_g_PHABTC, '#', 'Продаем', quantity_pair_b, 'PHA', 'за', price_b, 'BTC', 'по цене', price_bids_g_PHABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PHAUSDT_PHABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_PHAUSDT_PHABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PHAUSDT != 0.0 and qty_bids_g_PHAUSDT != 0.0 and price_asks_g_PHAUSDT != 0.0 and qty_asks_g_PHAUSDT != 0.0 and price_bids_g_PHABUSD != 0.0 and qty_bids_g_PHABUSD != 0.0 and price_asks_g_PHABUSD != 0.0 and qty_asks_g_PHABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PHABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PHABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PHABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PHAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PHAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PHAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PHABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PHAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PHABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PHAUSDT, '#', 'Покупаем', quantity_pair_a, 'PHA', 'за', price_a, 'USDT', 'по цене', price_asks_g_PHAUSDT) 
				print('Пара_B:', symbol_g_PHABUSD, '#', 'Продаем', quantity_pair_b, 'PHA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_PHABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PHAUSDT_PHABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BONDUSDT_BONDBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BONDUSDT != 0.0 and qty_bids_g_BONDUSDT != 0.0 and price_asks_g_BONDUSDT != 0.0 and qty_asks_g_BONDUSDT != 0.0 and price_bids_g_BONDBTC != 0.0 and qty_bids_g_BONDBTC != 0.0 and price_asks_g_BONDBTC != 0.0 and qty_asks_g_BONDBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BONDBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BONDBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BONDBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BONDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BONDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BONDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BONDBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BONDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BONDBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BONDUSDT, '#', 'Покупаем', quantity_pair_a, 'BOND', 'за', price_a, 'USDT', 'по цене', price_asks_g_BONDUSDT) 
				print('Пара_B:', symbol_g_BONDBTC, '#', 'Продаем', quantity_pair_b, 'BOND', 'за', price_b, 'BTC', 'по цене', price_bids_g_BONDBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BONDUSDT_BONDBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BONDUSDT_BONDBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BONDUSDT != 0.0 and qty_bids_g_BONDUSDT != 0.0 and price_asks_g_BONDUSDT != 0.0 and qty_asks_g_BONDUSDT != 0.0 and price_bids_g_BONDBUSD != 0.0 and qty_bids_g_BONDBUSD != 0.0 and price_asks_g_BONDBUSD != 0.0 and qty_asks_g_BONDBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BONDBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BONDBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BONDBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BONDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BONDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BONDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BONDBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BONDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BONDBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BONDUSDT, '#', 'Покупаем', quantity_pair_a, 'BOND', 'за', price_a, 'USDT', 'по цене', price_asks_g_BONDUSDT) 
				print('Пара_B:', symbol_g_BONDBUSD, '#', 'Продаем', quantity_pair_b, 'BOND', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BONDBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BONDUSDT_BONDBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BONDUSDT_BONDETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BONDUSDT != 0.0 and qty_bids_g_BONDUSDT != 0.0 and price_asks_g_BONDUSDT != 0.0 and qty_asks_g_BONDUSDT != 0.0 and price_bids_g_BONDETH != 0.0 and qty_bids_g_BONDETH != 0.0 and price_asks_g_BONDETH != 0.0 and qty_asks_g_BONDETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BONDETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BONDETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BONDETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BONDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BONDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BONDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BONDETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BONDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BONDETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BONDUSDT, '#', 'Покупаем', quantity_pair_a, 'BOND', 'за', price_a, 'USDT', 'по цене', price_asks_g_BONDUSDT) 
				print('Пара_B:', symbol_g_BONDETH, '#', 'Продаем', quantity_pair_b, 'BOND', 'за', price_b, 'ETH', 'по цене', price_bids_g_BONDETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BONDUSDT_BONDETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_MLNUSDT_MLNBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MLNUSDT != 0.0 and qty_bids_g_MLNUSDT != 0.0 and price_asks_g_MLNUSDT != 0.0 and qty_asks_g_MLNUSDT != 0.0 and price_bids_g_MLNBTC != 0.0 and qty_bids_g_MLNBTC != 0.0 and price_asks_g_MLNBTC != 0.0 and qty_asks_g_MLNBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MLNBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MLNBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MLNBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MLNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MLNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MLNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MLNBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MLNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MLNBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MLNUSDT, '#', 'Покупаем', quantity_pair_a, 'MLN', 'за', price_a, 'USDT', 'по цене', price_asks_g_MLNUSDT) 
				print('Пара_B:', symbol_g_MLNBTC, '#', 'Продаем', quantity_pair_b, 'MLN', 'за', price_b, 'BTC', 'по цене', price_bids_g_MLNBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MLNUSDT_MLNBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MLNUSDT_MLNBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MLNUSDT != 0.0 and qty_bids_g_MLNUSDT != 0.0 and price_asks_g_MLNUSDT != 0.0 and qty_asks_g_MLNUSDT != 0.0 and price_bids_g_MLNBUSD != 0.0 and qty_bids_g_MLNBUSD != 0.0 and price_asks_g_MLNBUSD != 0.0 and qty_asks_g_MLNBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MLNBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MLNBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MLNBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MLNUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MLNUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MLNUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MLNBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MLNUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MLNBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MLNUSDT, '#', 'Покупаем', quantity_pair_a, 'MLN', 'за', price_a, 'USDT', 'по цене', price_asks_g_MLNUSDT) 
				print('Пара_B:', symbol_g_MLNBUSD, '#', 'Продаем', quantity_pair_b, 'MLN', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MLNBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MLNUSDT_MLNBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DEXEUSDT_DEXEETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DEXEUSDT != 0.0 and qty_bids_g_DEXEUSDT != 0.0 and price_asks_g_DEXEUSDT != 0.0 and qty_asks_g_DEXEUSDT != 0.0 and price_bids_g_DEXEETH != 0.0 and qty_bids_g_DEXEETH != 0.0 and price_asks_g_DEXEETH != 0.0 and qty_asks_g_DEXEETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DEXEETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DEXEETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DEXEETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DEXEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DEXEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DEXEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DEXEETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DEXEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DEXEETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DEXEUSDT, '#', 'Покупаем', quantity_pair_a, 'DEXE', 'за', price_a, 'USDT', 'по цене', price_asks_g_DEXEUSDT) 
				print('Пара_B:', symbol_g_DEXEETH, '#', 'Продаем', quantity_pair_b, 'DEXE', 'за', price_b, 'ETH', 'по цене', price_bids_g_DEXEETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DEXEUSDT_DEXEETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_DEXEUSDT_DEXEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DEXEUSDT != 0.0 and qty_bids_g_DEXEUSDT != 0.0 and price_asks_g_DEXEUSDT != 0.0 and qty_asks_g_DEXEUSDT != 0.0 and price_bids_g_DEXEBUSD != 0.0 and qty_bids_g_DEXEBUSD != 0.0 and price_asks_g_DEXEBUSD != 0.0 and qty_asks_g_DEXEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DEXEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DEXEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DEXEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DEXEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DEXEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DEXEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DEXEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DEXEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DEXEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DEXEUSDT, '#', 'Покупаем', quantity_pair_a, 'DEXE', 'за', price_a, 'USDT', 'по цене', price_asks_g_DEXEUSDT) 
				print('Пара_B:', symbol_g_DEXEBUSD, '#', 'Продаем', quantity_pair_b, 'DEXE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DEXEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DEXEUSDT_DEXEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_C98USDT_C98BUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_C98USDT != 0.0 and qty_bids_g_C98USDT != 0.0 and price_asks_g_C98USDT != 0.0 and qty_asks_g_C98USDT != 0.0 and price_bids_g_C98BUSD != 0.0 and qty_bids_g_C98BUSD != 0.0 and price_asks_g_C98BUSD != 0.0 and qty_asks_g_C98BUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_C98BUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_C98BUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_C98BUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_C98USDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_C98USDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_C98USDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_C98BUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='C98USDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='C98BUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_C98USDT, '#', 'Покупаем', quantity_pair_a, 'C98', 'за', price_a, 'USDT', 'по цене', price_asks_g_C98USDT) 
				print('Пара_B:', symbol_g_C98BUSD, '#', 'Продаем', quantity_pair_b, 'C98', 'за', price_b, 'BUSD', 'по цене', price_bids_g_C98BUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_C98USDT_C98BUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_C98USDT_C98BNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_C98USDT != 0.0 and qty_bids_g_C98USDT != 0.0 and price_asks_g_C98USDT != 0.0 and qty_asks_g_C98USDT != 0.0 and price_bids_g_C98BNB != 0.0 and qty_bids_g_C98BNB != 0.0 and price_asks_g_C98BNB != 0.0 and qty_asks_g_C98BNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_C98BNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_C98BNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_C98BNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_C98USDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_C98USDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_C98USDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_C98BNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='C98USDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='C98BNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_C98USDT, '#', 'Покупаем', quantity_pair_a, 'C98', 'за', price_a, 'USDT', 'по цене', price_asks_g_C98USDT) 
				print('Пара_B:', symbol_g_C98BNB, '#', 'Продаем', quantity_pair_b, 'C98', 'за', price_b, 'BNB', 'по цене', price_bids_g_C98BNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_C98USDT_C98BNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_C98USDT_C98BTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_C98USDT != 0.0 and qty_bids_g_C98USDT != 0.0 and price_asks_g_C98USDT != 0.0 and qty_asks_g_C98USDT != 0.0 and price_bids_g_C98BTC != 0.0 and qty_bids_g_C98BTC != 0.0 and price_asks_g_C98BTC != 0.0 and qty_asks_g_C98BTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_C98BTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_C98BTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_C98BTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_C98USDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_C98USDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_C98USDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_C98BTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='C98USDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='C98BTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_C98USDT, '#', 'Покупаем', quantity_pair_a, 'C98', 'за', price_a, 'USDT', 'по цене', price_asks_g_C98USDT) 
				print('Пара_B:', symbol_g_C98BTC, '#', 'Продаем', quantity_pair_b, 'C98', 'за', price_b, 'BTC', 'по цене', price_bids_g_C98BTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_C98USDT_C98BTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CLVUSDT_CLVBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CLVUSDT != 0.0 and qty_bids_g_CLVUSDT != 0.0 and price_asks_g_CLVUSDT != 0.0 and qty_asks_g_CLVUSDT != 0.0 and price_bids_g_CLVBTC != 0.0 and qty_bids_g_CLVBTC != 0.0 and price_asks_g_CLVBTC != 0.0 and qty_asks_g_CLVBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CLVBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CLVBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CLVBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CLVUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CLVUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CLVUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CLVBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CLVUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CLVBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CLVUSDT, '#', 'Покупаем', quantity_pair_a, 'CLV', 'за', price_a, 'USDT', 'по цене', price_asks_g_CLVUSDT) 
				print('Пара_B:', symbol_g_CLVBTC, '#', 'Продаем', quantity_pair_b, 'CLV', 'за', price_b, 'BTC', 'по цене', price_bids_g_CLVBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CLVUSDT_CLVBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CLVUSDT_CLVBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CLVUSDT != 0.0 and qty_bids_g_CLVUSDT != 0.0 and price_asks_g_CLVUSDT != 0.0 and qty_asks_g_CLVUSDT != 0.0 and price_bids_g_CLVBNB != 0.0 and qty_bids_g_CLVBNB != 0.0 and price_asks_g_CLVBNB != 0.0 and qty_asks_g_CLVBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CLVBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CLVBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CLVBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CLVUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CLVUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CLVUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CLVBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CLVUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CLVBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CLVUSDT, '#', 'Покупаем', quantity_pair_a, 'CLV', 'за', price_a, 'USDT', 'по цене', price_asks_g_CLVUSDT) 
				print('Пара_B:', symbol_g_CLVBNB, '#', 'Продаем', quantity_pair_b, 'CLV', 'за', price_b, 'BNB', 'по цене', price_bids_g_CLVBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CLVUSDT_CLVBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_CLVUSDT_CLVBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CLVUSDT != 0.0 and qty_bids_g_CLVUSDT != 0.0 and price_asks_g_CLVUSDT != 0.0 and qty_asks_g_CLVUSDT != 0.0 and price_bids_g_CLVBUSD != 0.0 and qty_bids_g_CLVBUSD != 0.0 and price_asks_g_CLVBUSD != 0.0 and qty_asks_g_CLVBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CLVBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CLVBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CLVBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CLVUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CLVUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CLVUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CLVBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CLVUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CLVBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CLVUSDT, '#', 'Покупаем', quantity_pair_a, 'CLV', 'за', price_a, 'USDT', 'по цене', price_asks_g_CLVUSDT) 
				print('Пара_B:', symbol_g_CLVBUSD, '#', 'Продаем', quantity_pair_b, 'CLV', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CLVBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CLVUSDT_CLVBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_QNTUSDT_QNTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_QNTUSDT != 0.0 and qty_bids_g_QNTUSDT != 0.0 and price_asks_g_QNTUSDT != 0.0 and qty_asks_g_QNTUSDT != 0.0 and price_bids_g_QNTBTC != 0.0 and qty_bids_g_QNTBTC != 0.0 and price_asks_g_QNTBTC != 0.0 and qty_asks_g_QNTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_QNTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_QNTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_QNTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_QNTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_QNTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_QNTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_QNTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='QNTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='QNTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_QNTUSDT, '#', 'Покупаем', quantity_pair_a, 'QNT', 'за', price_a, 'USDT', 'по цене', price_asks_g_QNTUSDT) 
				print('Пара_B:', symbol_g_QNTBTC, '#', 'Продаем', quantity_pair_b, 'QNT', 'за', price_b, 'BTC', 'по цене', price_bids_g_QNTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_QNTUSDT_QNTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_QNTUSDT_QNTBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_QNTUSDT != 0.0 and qty_bids_g_QNTUSDT != 0.0 and price_asks_g_QNTUSDT != 0.0 and qty_asks_g_QNTUSDT != 0.0 and price_bids_g_QNTBNB != 0.0 and qty_bids_g_QNTBNB != 0.0 and price_asks_g_QNTBNB != 0.0 and qty_asks_g_QNTBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_QNTBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_QNTBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_QNTBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_QNTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_QNTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_QNTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_QNTBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='QNTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='QNTBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_QNTUSDT, '#', 'Покупаем', quantity_pair_a, 'QNT', 'за', price_a, 'USDT', 'по цене', price_asks_g_QNTUSDT) 
				print('Пара_B:', symbol_g_QNTBNB, '#', 'Продаем', quantity_pair_b, 'QNT', 'за', price_b, 'BNB', 'по цене', price_bids_g_QNTBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_QNTUSDT_QNTBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_QNTUSDT_QNTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_QNTUSDT != 0.0 and qty_bids_g_QNTUSDT != 0.0 and price_asks_g_QNTUSDT != 0.0 and qty_asks_g_QNTUSDT != 0.0 and price_bids_g_QNTBUSD != 0.0 and qty_bids_g_QNTBUSD != 0.0 and price_asks_g_QNTBUSD != 0.0 and qty_asks_g_QNTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_QNTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_QNTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_QNTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_QNTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_QNTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_QNTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_QNTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='QNTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='QNTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_QNTUSDT, '#', 'Покупаем', quantity_pair_a, 'QNT', 'за', price_a, 'USDT', 'по цене', price_asks_g_QNTUSDT) 
				print('Пара_B:', symbol_g_QNTBUSD, '#', 'Продаем', quantity_pair_b, 'QNT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_QNTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_QNTUSDT_QNTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FLOWUSDT_FLOWBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FLOWUSDT != 0.0 and qty_bids_g_FLOWUSDT != 0.0 and price_asks_g_FLOWUSDT != 0.0 and qty_asks_g_FLOWUSDT != 0.0 and price_bids_g_FLOWBTC != 0.0 and qty_bids_g_FLOWBTC != 0.0 and price_asks_g_FLOWBTC != 0.0 and qty_asks_g_FLOWBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FLOWBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FLOWBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FLOWBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FLOWUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FLOWUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FLOWUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FLOWBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FLOWUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FLOWBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FLOWUSDT, '#', 'Покупаем', quantity_pair_a, 'FLOW', 'за', price_a, 'USDT', 'по цене', price_asks_g_FLOWUSDT) 
				print('Пара_B:', symbol_g_FLOWBTC, '#', 'Продаем', quantity_pair_b, 'FLOW', 'за', price_b, 'BTC', 'по цене', price_bids_g_FLOWBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FLOWUSDT_FLOWBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_FLOWUSDT_FLOWBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FLOWUSDT != 0.0 and qty_bids_g_FLOWUSDT != 0.0 and price_asks_g_FLOWUSDT != 0.0 and qty_asks_g_FLOWUSDT != 0.0 and price_bids_g_FLOWBNB != 0.0 and qty_bids_g_FLOWBNB != 0.0 and price_asks_g_FLOWBNB != 0.0 and qty_asks_g_FLOWBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FLOWBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FLOWBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FLOWBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FLOWUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FLOWUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FLOWUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FLOWBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FLOWUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FLOWBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FLOWUSDT, '#', 'Покупаем', quantity_pair_a, 'FLOW', 'за', price_a, 'USDT', 'по цене', price_asks_g_FLOWUSDT) 
				print('Пара_B:', symbol_g_FLOWBNB, '#', 'Продаем', quantity_pair_b, 'FLOW', 'за', price_b, 'BNB', 'по цене', price_bids_g_FLOWBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FLOWUSDT_FLOWBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_FLOWUSDT_FLOWBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FLOWUSDT != 0.0 and qty_bids_g_FLOWUSDT != 0.0 and price_asks_g_FLOWUSDT != 0.0 and qty_asks_g_FLOWUSDT != 0.0 and price_bids_g_FLOWBUSD != 0.0 and qty_bids_g_FLOWBUSD != 0.0 and price_asks_g_FLOWBUSD != 0.0 and qty_asks_g_FLOWBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FLOWBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FLOWBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FLOWBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FLOWUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FLOWUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FLOWUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FLOWBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FLOWUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FLOWBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FLOWUSDT, '#', 'Покупаем', quantity_pair_a, 'FLOW', 'за', price_a, 'USDT', 'по цене', price_asks_g_FLOWUSDT) 
				print('Пара_B:', symbol_g_FLOWBUSD, '#', 'Продаем', quantity_pair_b, 'FLOW', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FLOWBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FLOWUSDT_FLOWBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_TVKUSDT_TVKBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TVKUSDT != 0.0 and qty_bids_g_TVKUSDT != 0.0 and price_asks_g_TVKUSDT != 0.0 and qty_asks_g_TVKUSDT != 0.0 and price_bids_g_TVKBTC != 0.0 and qty_bids_g_TVKBTC != 0.0 and price_asks_g_TVKBTC != 0.0 and qty_asks_g_TVKBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TVKBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TVKBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TVKBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TVKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TVKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TVKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TVKBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TVKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TVKBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TVKUSDT, '#', 'Покупаем', quantity_pair_a, 'TVK', 'за', price_a, 'USDT', 'по цене', price_asks_g_TVKUSDT) 
				print('Пара_B:', symbol_g_TVKBTC, '#', 'Продаем', quantity_pair_b, 'TVK', 'за', price_b, 'BTC', 'по цене', price_bids_g_TVKBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TVKUSDT_TVKBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_TVKUSDT_TVKBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TVKUSDT != 0.0 and qty_bids_g_TVKUSDT != 0.0 and price_asks_g_TVKUSDT != 0.0 and qty_asks_g_TVKUSDT != 0.0 and price_bids_g_TVKBUSD != 0.0 and qty_bids_g_TVKBUSD != 0.0 and price_asks_g_TVKBUSD != 0.0 and qty_asks_g_TVKBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TVKBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TVKBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TVKBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TVKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TVKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TVKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TVKBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TVKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TVKBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TVKUSDT, '#', 'Покупаем', quantity_pair_a, 'TVK', 'за', price_a, 'USDT', 'по цене', price_asks_g_TVKUSDT) 
				print('Пара_B:', symbol_g_TVKBUSD, '#', 'Продаем', quantity_pair_b, 'TVK', 'за', price_b, 'BUSD', 'по цене', price_bids_g_TVKBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TVKUSDT_TVKBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_MINAUSDT_MINABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MINAUSDT != 0.0 and qty_bids_g_MINAUSDT != 0.0 and price_asks_g_MINAUSDT != 0.0 and qty_asks_g_MINAUSDT != 0.0 and price_bids_g_MINABTC != 0.0 and qty_bids_g_MINABTC != 0.0 and price_asks_g_MINABTC != 0.0 and qty_asks_g_MINABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MINABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MINABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MINABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MINAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MINAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MINAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MINABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MINAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MINABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MINAUSDT, '#', 'Покупаем', quantity_pair_a, 'MINA', 'за', price_a, 'USDT', 'по цене', price_asks_g_MINAUSDT) 
				print('Пара_B:', symbol_g_MINABTC, '#', 'Продаем', quantity_pair_b, 'MINA', 'за', price_b, 'BTC', 'по цене', price_bids_g_MINABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MINAUSDT_MINABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MINAUSDT_MINABNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MINAUSDT != 0.0 and qty_bids_g_MINAUSDT != 0.0 and price_asks_g_MINAUSDT != 0.0 and qty_asks_g_MINAUSDT != 0.0 and price_bids_g_MINABNB != 0.0 and qty_bids_g_MINABNB != 0.0 and price_asks_g_MINABNB != 0.0 and qty_asks_g_MINABNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MINABNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MINABNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MINABNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MINAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MINAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MINAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MINABNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MINAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MINABNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MINAUSDT, '#', 'Покупаем', quantity_pair_a, 'MINA', 'за', price_a, 'USDT', 'по цене', price_asks_g_MINAUSDT) 
				print('Пара_B:', symbol_g_MINABNB, '#', 'Продаем', quantity_pair_b, 'MINA', 'за', price_b, 'BNB', 'по цене', price_bids_g_MINABNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MINAUSDT_MINABNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_MINAUSDT_MINABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MINAUSDT != 0.0 and qty_bids_g_MINAUSDT != 0.0 and price_asks_g_MINAUSDT != 0.0 and qty_asks_g_MINAUSDT != 0.0 and price_bids_g_MINABUSD != 0.0 and qty_bids_g_MINABUSD != 0.0 and price_asks_g_MINABUSD != 0.0 and qty_asks_g_MINABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MINABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MINABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MINABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MINAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MINAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MINAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MINABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MINAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MINABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MINAUSDT, '#', 'Покупаем', quantity_pair_a, 'MINA', 'за', price_a, 'USDT', 'по цене', price_asks_g_MINAUSDT) 
				print('Пара_B:', symbol_g_MINABUSD, '#', 'Продаем', quantity_pair_b, 'MINA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MINABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MINAUSDT_MINABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_RAYUSDT_RAYBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RAYUSDT != 0.0 and qty_bids_g_RAYUSDT != 0.0 and price_asks_g_RAYUSDT != 0.0 and qty_asks_g_RAYUSDT != 0.0 and price_bids_g_RAYBNB != 0.0 and qty_bids_g_RAYBNB != 0.0 and price_asks_g_RAYBNB != 0.0 and qty_asks_g_RAYBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RAYBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RAYBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RAYBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RAYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RAYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RAYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RAYBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RAYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RAYBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RAYUSDT, '#', 'Покупаем', quantity_pair_a, 'RAY', 'за', price_a, 'USDT', 'по цене', price_asks_g_RAYUSDT) 
				print('Пара_B:', symbol_g_RAYBNB, '#', 'Продаем', quantity_pair_b, 'RAY', 'за', price_b, 'BNB', 'по цене', price_bids_g_RAYBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RAYUSDT_RAYBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_RAYUSDT_RAYBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RAYUSDT != 0.0 and qty_bids_g_RAYUSDT != 0.0 and price_asks_g_RAYUSDT != 0.0 and qty_asks_g_RAYUSDT != 0.0 and price_bids_g_RAYBUSD != 0.0 and qty_bids_g_RAYBUSD != 0.0 and price_asks_g_RAYBUSD != 0.0 and qty_asks_g_RAYBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RAYBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RAYBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RAYBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RAYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RAYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RAYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RAYBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RAYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RAYBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RAYUSDT, '#', 'Покупаем', quantity_pair_a, 'RAY', 'за', price_a, 'USDT', 'по цене', price_asks_g_RAYUSDT) 
				print('Пара_B:', symbol_g_RAYBUSD, '#', 'Продаем', quantity_pair_b, 'RAY', 'за', price_b, 'BUSD', 'по цене', price_bids_g_RAYBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RAYUSDT_RAYBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FARMUSDT_FARMBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FARMUSDT != 0.0 and qty_bids_g_FARMUSDT != 0.0 and price_asks_g_FARMUSDT != 0.0 and qty_asks_g_FARMUSDT != 0.0 and price_bids_g_FARMBTC != 0.0 and qty_bids_g_FARMBTC != 0.0 and price_asks_g_FARMBTC != 0.0 and qty_asks_g_FARMBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FARMBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FARMBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FARMBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FARMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FARMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FARMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FARMBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FARMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FARMBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FARMUSDT, '#', 'Покупаем', quantity_pair_a, 'FARM', 'за', price_a, 'USDT', 'по цене', price_asks_g_FARMUSDT) 
				print('Пара_B:', symbol_g_FARMBTC, '#', 'Продаем', quantity_pair_b, 'FARM', 'за', price_b, 'BTC', 'по цене', price_bids_g_FARMBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FARMUSDT_FARMBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_FARMUSDT_FARMBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FARMUSDT != 0.0 and qty_bids_g_FARMUSDT != 0.0 and price_asks_g_FARMUSDT != 0.0 and qty_asks_g_FARMUSDT != 0.0 and price_bids_g_FARMBUSD != 0.0 and qty_bids_g_FARMBUSD != 0.0 and price_asks_g_FARMBUSD != 0.0 and qty_asks_g_FARMBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FARMBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FARMBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FARMBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FARMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FARMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FARMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FARMBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FARMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FARMBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FARMUSDT, '#', 'Покупаем', quantity_pair_a, 'FARM', 'за', price_a, 'USDT', 'по цене', price_asks_g_FARMUSDT) 
				print('Пара_B:', symbol_g_FARMBUSD, '#', 'Продаем', quantity_pair_b, 'FARM', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FARMBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FARMUSDT_FARMBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ALPACAUSDT_ALPACABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALPACAUSDT != 0.0 and qty_bids_g_ALPACAUSDT != 0.0 and price_asks_g_ALPACAUSDT != 0.0 and qty_asks_g_ALPACAUSDT != 0.0 and price_bids_g_ALPACABTC != 0.0 and qty_bids_g_ALPACABTC != 0.0 and price_asks_g_ALPACABTC != 0.0 and qty_asks_g_ALPACABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALPACABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALPACABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALPACABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALPACAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALPACAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALPACAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALPACABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALPACAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALPACABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALPACAUSDT, '#', 'Покупаем', quantity_pair_a, 'ALPACA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALPACAUSDT) 
				print('Пара_B:', symbol_g_ALPACABTC, '#', 'Продаем', quantity_pair_b, 'ALPACA', 'за', price_b, 'BTC', 'по цене', price_bids_g_ALPACABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALPACAUSDT_ALPACABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ALPACAUSDT_ALPACABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALPACAUSDT != 0.0 and qty_bids_g_ALPACAUSDT != 0.0 and price_asks_g_ALPACAUSDT != 0.0 and qty_asks_g_ALPACAUSDT != 0.0 and price_bids_g_ALPACABUSD != 0.0 and qty_bids_g_ALPACABUSD != 0.0 and price_asks_g_ALPACABUSD != 0.0 and qty_asks_g_ALPACABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALPACABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALPACABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALPACABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALPACAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALPACAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALPACAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALPACABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALPACAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALPACABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALPACAUSDT, '#', 'Покупаем', quantity_pair_a, 'ALPACA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALPACAUSDT) 
				print('Пара_B:', symbol_g_ALPACABUSD, '#', 'Продаем', quantity_pair_b, 'ALPACA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ALPACABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALPACAUSDT_ALPACABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_QUICKUSDT_QUICKBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_QUICKUSDT != 0.0 and qty_bids_g_QUICKUSDT != 0.0 and price_asks_g_QUICKUSDT != 0.0 and qty_asks_g_QUICKUSDT != 0.0 and price_bids_g_QUICKBTC != 0.0 and qty_bids_g_QUICKBTC != 0.0 and price_asks_g_QUICKBTC != 0.0 and qty_asks_g_QUICKBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_QUICKBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_QUICKBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_QUICKBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_QUICKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_QUICKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_QUICKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_QUICKBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='QUICKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='QUICKBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_QUICKUSDT, '#', 'Покупаем', quantity_pair_a, 'QUICK', 'за', price_a, 'USDT', 'по цене', price_asks_g_QUICKUSDT) 
				print('Пара_B:', symbol_g_QUICKBTC, '#', 'Продаем', quantity_pair_b, 'QUICK', 'за', price_b, 'BTC', 'по цене', price_bids_g_QUICKBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_QUICKUSDT_QUICKBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_QUICKUSDT_QUICKBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_QUICKUSDT != 0.0 and qty_bids_g_QUICKUSDT != 0.0 and price_asks_g_QUICKUSDT != 0.0 and qty_asks_g_QUICKUSDT != 0.0 and price_bids_g_QUICKBUSD != 0.0 and qty_bids_g_QUICKBUSD != 0.0 and price_asks_g_QUICKBUSD != 0.0 and qty_asks_g_QUICKBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_QUICKBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_QUICKBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_QUICKBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_QUICKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_QUICKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_QUICKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_QUICKBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='QUICKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='QUICKBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_QUICKUSDT, '#', 'Покупаем', quantity_pair_a, 'QUICK', 'за', price_a, 'USDT', 'по цене', price_asks_g_QUICKUSDT) 
				print('Пара_B:', symbol_g_QUICKBUSD, '#', 'Продаем', quantity_pair_b, 'QUICK', 'за', price_b, 'BUSD', 'по цене', price_bids_g_QUICKBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_QUICKUSDT_QUICKBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_MBOXUSDT_MBOXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MBOXUSDT != 0.0 and qty_bids_g_MBOXUSDT != 0.0 and price_asks_g_MBOXUSDT != 0.0 and qty_asks_g_MBOXUSDT != 0.0 and price_bids_g_MBOXBTC != 0.0 and qty_bids_g_MBOXBTC != 0.0 and price_asks_g_MBOXBTC != 0.0 and qty_asks_g_MBOXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MBOXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MBOXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MBOXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MBOXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MBOXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MBOXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MBOXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MBOXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MBOXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MBOXUSDT, '#', 'Покупаем', quantity_pair_a, 'MBOX', 'за', price_a, 'USDT', 'по цене', price_asks_g_MBOXUSDT) 
				print('Пара_B:', symbol_g_MBOXBTC, '#', 'Продаем', quantity_pair_b, 'MBOX', 'за', price_b, 'BTC', 'по цене', price_bids_g_MBOXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MBOXUSDT_MBOXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MBOXUSDT_MBOXBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MBOXUSDT != 0.0 and qty_bids_g_MBOXUSDT != 0.0 and price_asks_g_MBOXUSDT != 0.0 and qty_asks_g_MBOXUSDT != 0.0 and price_bids_g_MBOXBNB != 0.0 and qty_bids_g_MBOXBNB != 0.0 and price_asks_g_MBOXBNB != 0.0 and qty_asks_g_MBOXBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MBOXBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MBOXBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MBOXBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MBOXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MBOXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MBOXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MBOXBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MBOXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MBOXBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MBOXUSDT, '#', 'Покупаем', quantity_pair_a, 'MBOX', 'за', price_a, 'USDT', 'по цене', price_asks_g_MBOXUSDT) 
				print('Пара_B:', symbol_g_MBOXBNB, '#', 'Продаем', quantity_pair_b, 'MBOX', 'за', price_b, 'BNB', 'по цене', price_bids_g_MBOXBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MBOXUSDT_MBOXBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_MBOXUSDT_MBOXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MBOXUSDT != 0.0 and qty_bids_g_MBOXUSDT != 0.0 and price_asks_g_MBOXUSDT != 0.0 and qty_asks_g_MBOXUSDT != 0.0 and price_bids_g_MBOXBUSD != 0.0 and qty_bids_g_MBOXBUSD != 0.0 and price_asks_g_MBOXBUSD != 0.0 and qty_asks_g_MBOXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MBOXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MBOXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MBOXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MBOXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MBOXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MBOXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MBOXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MBOXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MBOXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MBOXUSDT, '#', 'Покупаем', quantity_pair_a, 'MBOX', 'за', price_a, 'USDT', 'по цене', price_asks_g_MBOXUSDT) 
				print('Пара_B:', symbol_g_MBOXBUSD, '#', 'Продаем', quantity_pair_b, 'MBOX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MBOXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MBOXUSDT_MBOXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FORUSDT_FORBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FORUSDT != 0.0 and qty_bids_g_FORUSDT != 0.0 and price_asks_g_FORUSDT != 0.0 and qty_asks_g_FORUSDT != 0.0 and price_bids_g_FORBTC != 0.0 and qty_bids_g_FORBTC != 0.0 and price_asks_g_FORBTC != 0.0 and qty_asks_g_FORBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FORBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FORBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FORBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FORUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FORUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FORUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FORBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FORUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FORBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FORUSDT, '#', 'Покупаем', quantity_pair_a, 'FOR', 'за', price_a, 'USDT', 'по цене', price_asks_g_FORUSDT) 
				print('Пара_B:', symbol_g_FORBTC, '#', 'Продаем', quantity_pair_b, 'FOR', 'за', price_b, 'BTC', 'по цене', price_bids_g_FORBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FORUSDT_FORBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_FORUSDT_FORBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FORUSDT != 0.0 and qty_bids_g_FORUSDT != 0.0 and price_asks_g_FORUSDT != 0.0 and qty_asks_g_FORUSDT != 0.0 and price_bids_g_FORBUSD != 0.0 and qty_bids_g_FORBUSD != 0.0 and price_asks_g_FORBUSD != 0.0 and qty_asks_g_FORBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FORBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FORBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FORBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FORUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FORUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FORUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FORBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FORUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FORBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FORUSDT, '#', 'Покупаем', quantity_pair_a, 'FOR', 'за', price_a, 'USDT', 'по цене', price_asks_g_FORUSDT) 
				print('Пара_B:', symbol_g_FORBUSD, '#', 'Продаем', quantity_pair_b, 'FOR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FORBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FORUSDT_FORBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_REQUSDT_REQBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_REQUSDT != 0.0 and qty_bids_g_REQUSDT != 0.0 and price_asks_g_REQUSDT != 0.0 and qty_asks_g_REQUSDT != 0.0 and price_bids_g_REQBTC != 0.0 and qty_bids_g_REQBTC != 0.0 and price_asks_g_REQBTC != 0.0 and qty_asks_g_REQBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_REQBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_REQBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_REQBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_REQUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_REQUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_REQUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_REQBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='REQUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='REQBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_REQUSDT, '#', 'Покупаем', quantity_pair_a, 'REQ', 'за', price_a, 'USDT', 'по цене', price_asks_g_REQUSDT) 
				print('Пара_B:', symbol_g_REQBTC, '#', 'Продаем', quantity_pair_b, 'REQ', 'за', price_b, 'BTC', 'по цене', price_bids_g_REQBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_REQUSDT_REQBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_REQUSDT_REQBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_REQUSDT != 0.0 and qty_bids_g_REQUSDT != 0.0 and price_asks_g_REQUSDT != 0.0 and qty_asks_g_REQUSDT != 0.0 and price_bids_g_REQBUSD != 0.0 and qty_bids_g_REQBUSD != 0.0 and price_asks_g_REQBUSD != 0.0 and qty_asks_g_REQBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_REQBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_REQBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_REQBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_REQUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_REQUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_REQUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_REQBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='REQUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='REQBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_REQUSDT, '#', 'Покупаем', quantity_pair_a, 'REQ', 'за', price_a, 'USDT', 'по цене', price_asks_g_REQUSDT) 
				print('Пара_B:', symbol_g_REQBUSD, '#', 'Продаем', quantity_pair_b, 'REQ', 'за', price_b, 'BUSD', 'по цене', price_bids_g_REQBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_REQUSDT_REQBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_GHSTUSDT_GHSTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GHSTUSDT != 0.0 and qty_bids_g_GHSTUSDT != 0.0 and price_asks_g_GHSTUSDT != 0.0 and qty_asks_g_GHSTUSDT != 0.0 and price_bids_g_GHSTBUSD != 0.0 and qty_bids_g_GHSTBUSD != 0.0 and price_asks_g_GHSTBUSD != 0.0 and qty_asks_g_GHSTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GHSTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GHSTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GHSTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GHSTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GHSTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GHSTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GHSTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GHSTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GHSTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GHSTUSDT, '#', 'Покупаем', quantity_pair_a, 'GHST', 'за', price_a, 'USDT', 'по цене', price_asks_g_GHSTUSDT) 
				print('Пара_B:', symbol_g_GHSTBUSD, '#', 'Продаем', quantity_pair_b, 'GHST', 'за', price_b, 'BUSD', 'по цене', price_bids_g_GHSTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GHSTUSDT_GHSTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_WAXPUSDT_WAXPBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WAXPUSDT != 0.0 and qty_bids_g_WAXPUSDT != 0.0 and price_asks_g_WAXPUSDT != 0.0 and qty_asks_g_WAXPUSDT != 0.0 and price_bids_g_WAXPBUSD != 0.0 and qty_bids_g_WAXPBUSD != 0.0 and price_asks_g_WAXPBUSD != 0.0 and qty_asks_g_WAXPBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WAXPBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WAXPBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WAXPBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WAXPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WAXPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WAXPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WAXPBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WAXPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WAXPBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WAXPUSDT, '#', 'Покупаем', quantity_pair_a, 'WAXP', 'за', price_a, 'USDT', 'по цене', price_asks_g_WAXPUSDT) 
				print('Пара_B:', symbol_g_WAXPBUSD, '#', 'Продаем', quantity_pair_b, 'WAXP', 'за', price_b, 'BUSD', 'по цене', price_bids_g_WAXPBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WAXPUSDT_WAXPBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_WAXPUSDT_WAXPBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WAXPUSDT != 0.0 and qty_bids_g_WAXPUSDT != 0.0 and price_asks_g_WAXPUSDT != 0.0 and qty_asks_g_WAXPUSDT != 0.0 and price_bids_g_WAXPBNB != 0.0 and qty_bids_g_WAXPBNB != 0.0 and price_asks_g_WAXPBNB != 0.0 and qty_asks_g_WAXPBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WAXPBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WAXPBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WAXPBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WAXPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WAXPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WAXPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WAXPBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WAXPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WAXPBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WAXPUSDT, '#', 'Покупаем', quantity_pair_a, 'WAXP', 'за', price_a, 'USDT', 'по цене', price_asks_g_WAXPUSDT) 
				print('Пара_B:', symbol_g_WAXPBNB, '#', 'Продаем', quantity_pair_b, 'WAXP', 'за', price_b, 'BNB', 'по цене', price_bids_g_WAXPBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WAXPUSDT_WAXPBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_WAXPUSDT_WAXPBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WAXPUSDT != 0.0 and qty_bids_g_WAXPUSDT != 0.0 and price_asks_g_WAXPUSDT != 0.0 and qty_asks_g_WAXPUSDT != 0.0 and price_bids_g_WAXPBTC != 0.0 and qty_bids_g_WAXPBTC != 0.0 and price_asks_g_WAXPBTC != 0.0 and qty_asks_g_WAXPBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WAXPBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WAXPBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WAXPBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WAXPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WAXPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WAXPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WAXPBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WAXPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WAXPBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WAXPUSDT, '#', 'Покупаем', quantity_pair_a, 'WAXP', 'за', price_a, 'USDT', 'по цене', price_asks_g_WAXPUSDT) 
				print('Пара_B:', symbol_g_WAXPBTC, '#', 'Продаем', quantity_pair_b, 'WAXP', 'за', price_b, 'BTC', 'по цене', price_bids_g_WAXPBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WAXPUSDT_WAXPBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_XECUSDT_XECBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XECUSDT != 0.0 and qty_bids_g_XECUSDT != 0.0 and price_asks_g_XECUSDT != 0.0 and qty_asks_g_XECUSDT != 0.0 and price_bids_g_XECBUSD != 0.0 and qty_bids_g_XECBUSD != 0.0 and price_asks_g_XECBUSD != 0.0 and qty_asks_g_XECBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XECBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XECBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XECBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XECUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XECUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XECUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XECBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XECUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XECBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XECUSDT, '#', 'Покупаем', quantity_pair_a, 'XEC', 'за', price_a, 'USDT', 'по цене', price_asks_g_XECUSDT) 
				print('Пара_B:', symbol_g_XECBUSD, '#', 'Продаем', quantity_pair_b, 'XEC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_XECBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XECUSDT_XECBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ELFUSDT_ELFBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ELFUSDT != 0.0 and qty_bids_g_ELFUSDT != 0.0 and price_asks_g_ELFUSDT != 0.0 and qty_asks_g_ELFUSDT != 0.0 and price_bids_g_ELFBTC != 0.0 and qty_bids_g_ELFBTC != 0.0 and price_asks_g_ELFBTC != 0.0 and qty_asks_g_ELFBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ELFBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ELFBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ELFBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ELFUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ELFUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ELFUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ELFBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ELFUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ELFBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ELFUSDT, '#', 'Покупаем', quantity_pair_a, 'ELF', 'за', price_a, 'USDT', 'по цене', price_asks_g_ELFUSDT) 
				print('Пара_B:', symbol_g_ELFBTC, '#', 'Продаем', quantity_pair_b, 'ELF', 'за', price_b, 'BTC', 'по цене', price_bids_g_ELFBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ELFUSDT_ELFBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ELFUSDT_ELFETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ELFUSDT != 0.0 and qty_bids_g_ELFUSDT != 0.0 and price_asks_g_ELFUSDT != 0.0 and qty_asks_g_ELFUSDT != 0.0 and price_bids_g_ELFETH != 0.0 and qty_bids_g_ELFETH != 0.0 and price_asks_g_ELFETH != 0.0 and qty_asks_g_ELFETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ELFETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ELFETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ELFETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ELFUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ELFUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ELFUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ELFETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ELFUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ELFETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ELFUSDT, '#', 'Покупаем', quantity_pair_a, 'ELF', 'за', price_a, 'USDT', 'по цене', price_asks_g_ELFUSDT) 
				print('Пара_B:', symbol_g_ELFETH, '#', 'Продаем', quantity_pair_b, 'ELF', 'за', price_b, 'ETH', 'по цене', price_bids_g_ELFETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ELFUSDT_ELFETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ELFUSDT_ELFBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ELFUSDT != 0.0 and qty_bids_g_ELFUSDT != 0.0 and price_asks_g_ELFUSDT != 0.0 and qty_asks_g_ELFUSDT != 0.0 and price_bids_g_ELFBUSD != 0.0 and qty_bids_g_ELFBUSD != 0.0 and price_asks_g_ELFBUSD != 0.0 and qty_asks_g_ELFBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ELFBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ELFBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ELFBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ELFUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ELFUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ELFUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ELFBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ELFUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ELFBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ELFUSDT, '#', 'Покупаем', quantity_pair_a, 'ELF', 'за', price_a, 'USDT', 'по цене', price_asks_g_ELFUSDT) 
				print('Пара_B:', symbol_g_ELFBUSD, '#', 'Продаем', quantity_pair_b, 'ELF', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ELFBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ELFUSDT_ELFBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DYDXUSDT_DYDXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DYDXUSDT != 0.0 and qty_bids_g_DYDXUSDT != 0.0 and price_asks_g_DYDXUSDT != 0.0 and qty_asks_g_DYDXUSDT != 0.0 and price_bids_g_DYDXBUSD != 0.0 and qty_bids_g_DYDXBUSD != 0.0 and price_asks_g_DYDXBUSD != 0.0 and qty_asks_g_DYDXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DYDXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DYDXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DYDXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DYDXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DYDXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DYDXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DYDXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DYDXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DYDXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DYDXUSDT, '#', 'Покупаем', quantity_pair_a, 'DYDX', 'за', price_a, 'USDT', 'по цене', price_asks_g_DYDXUSDT) 
				print('Пара_B:', symbol_g_DYDXBUSD, '#', 'Продаем', quantity_pair_b, 'DYDX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DYDXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DYDXUSDT_DYDXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DYDXUSDT_DYDXBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DYDXUSDT != 0.0 and qty_bids_g_DYDXUSDT != 0.0 and price_asks_g_DYDXUSDT != 0.0 and qty_asks_g_DYDXUSDT != 0.0 and price_bids_g_DYDXBNB != 0.0 and qty_bids_g_DYDXBNB != 0.0 and price_asks_g_DYDXBNB != 0.0 and qty_asks_g_DYDXBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DYDXBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DYDXBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DYDXBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DYDXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DYDXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DYDXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DYDXBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DYDXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DYDXBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DYDXUSDT, '#', 'Покупаем', quantity_pair_a, 'DYDX', 'за', price_a, 'USDT', 'по цене', price_asks_g_DYDXUSDT) 
				print('Пара_B:', symbol_g_DYDXBNB, '#', 'Продаем', quantity_pair_b, 'DYDX', 'за', price_b, 'BNB', 'по цене', price_bids_g_DYDXBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DYDXUSDT_DYDXBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_DYDXUSDT_DYDXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DYDXUSDT != 0.0 and qty_bids_g_DYDXUSDT != 0.0 and price_asks_g_DYDXUSDT != 0.0 and qty_asks_g_DYDXUSDT != 0.0 and price_bids_g_DYDXBTC != 0.0 and qty_bids_g_DYDXBTC != 0.0 and price_asks_g_DYDXBTC != 0.0 and qty_asks_g_DYDXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DYDXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DYDXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DYDXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DYDXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DYDXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DYDXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DYDXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DYDXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DYDXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DYDXUSDT, '#', 'Покупаем', quantity_pair_a, 'DYDX', 'за', price_a, 'USDT', 'по цене', price_asks_g_DYDXUSDT) 
				print('Пара_B:', symbol_g_DYDXBTC, '#', 'Продаем', quantity_pair_b, 'DYDX', 'за', price_b, 'BTC', 'по цене', price_bids_g_DYDXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DYDXUSDT_DYDXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_IDEXUSDT_IDEXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IDEXUSDT != 0.0 and qty_bids_g_IDEXUSDT != 0.0 and price_asks_g_IDEXUSDT != 0.0 and qty_asks_g_IDEXUSDT != 0.0 and price_bids_g_IDEXBTC != 0.0 and qty_bids_g_IDEXBTC != 0.0 and price_asks_g_IDEXBTC != 0.0 and qty_asks_g_IDEXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IDEXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IDEXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IDEXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IDEXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IDEXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IDEXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IDEXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IDEXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IDEXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IDEXUSDT, '#', 'Покупаем', quantity_pair_a, 'IDEX', 'за', price_a, 'USDT', 'по цене', price_asks_g_IDEXUSDT) 
				print('Пара_B:', symbol_g_IDEXBTC, '#', 'Продаем', quantity_pair_b, 'IDEX', 'за', price_b, 'BTC', 'по цене', price_bids_g_IDEXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IDEXUSDT_IDEXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_IDEXUSDT_IDEXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IDEXUSDT != 0.0 and qty_bids_g_IDEXUSDT != 0.0 and price_asks_g_IDEXUSDT != 0.0 and qty_asks_g_IDEXUSDT != 0.0 and price_bids_g_IDEXBUSD != 0.0 and qty_bids_g_IDEXBUSD != 0.0 and price_asks_g_IDEXBUSD != 0.0 and qty_asks_g_IDEXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IDEXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IDEXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IDEXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IDEXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IDEXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IDEXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IDEXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IDEXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IDEXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IDEXUSDT, '#', 'Покупаем', quantity_pair_a, 'IDEX', 'за', price_a, 'USDT', 'по цене', price_asks_g_IDEXUSDT) 
				print('Пара_B:', symbol_g_IDEXBUSD, '#', 'Продаем', quantity_pair_b, 'IDEX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_IDEXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IDEXUSDT_IDEXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_IDEXUSDT_IDEXBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IDEXUSDT != 0.0 and qty_bids_g_IDEXUSDT != 0.0 and price_asks_g_IDEXUSDT != 0.0 and qty_asks_g_IDEXUSDT != 0.0 and price_bids_g_IDEXBNB != 0.0 and qty_bids_g_IDEXBNB != 0.0 and price_asks_g_IDEXBNB != 0.0 and qty_asks_g_IDEXBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IDEXBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IDEXBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IDEXBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IDEXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IDEXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IDEXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IDEXBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IDEXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IDEXBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IDEXUSDT, '#', 'Покупаем', quantity_pair_a, 'IDEX', 'за', price_a, 'USDT', 'по цене', price_asks_g_IDEXUSDT) 
				print('Пара_B:', symbol_g_IDEXBNB, '#', 'Продаем', quantity_pair_b, 'IDEX', 'за', price_b, 'BNB', 'по цене', price_bids_g_IDEXBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IDEXUSDT_IDEXBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_VIDTUSDT_VIDTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_VIDTUSDT != 0.0 and qty_bids_g_VIDTUSDT != 0.0 and price_asks_g_VIDTUSDT != 0.0 and qty_asks_g_VIDTUSDT != 0.0 and price_bids_g_VIDTBTC != 0.0 and qty_bids_g_VIDTBTC != 0.0 and price_asks_g_VIDTBTC != 0.0 and qty_asks_g_VIDTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_VIDTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_VIDTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_VIDTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_VIDTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_VIDTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_VIDTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_VIDTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='VIDTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='VIDTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_VIDTUSDT, '#', 'Покупаем', quantity_pair_a, 'VIDT', 'за', price_a, 'USDT', 'по цене', price_asks_g_VIDTUSDT) 
				print('Пара_B:', symbol_g_VIDTBTC, '#', 'Продаем', quantity_pair_b, 'VIDT', 'за', price_b, 'BTC', 'по цене', price_bids_g_VIDTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_VIDTUSDT_VIDTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_VIDTUSDT_VIDTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_VIDTUSDT != 0.0 and qty_bids_g_VIDTUSDT != 0.0 and price_asks_g_VIDTUSDT != 0.0 and qty_asks_g_VIDTUSDT != 0.0 and price_bids_g_VIDTBUSD != 0.0 and qty_bids_g_VIDTBUSD != 0.0 and price_asks_g_VIDTBUSD != 0.0 and qty_asks_g_VIDTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_VIDTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_VIDTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_VIDTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_VIDTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_VIDTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_VIDTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_VIDTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='VIDTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='VIDTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_VIDTUSDT, '#', 'Покупаем', quantity_pair_a, 'VIDT', 'за', price_a, 'USDT', 'по цене', price_asks_g_VIDTUSDT) 
				print('Пара_B:', symbol_g_VIDTBUSD, '#', 'Продаем', quantity_pair_b, 'VIDT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_VIDTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_VIDTUSDT_VIDTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_GALAUSDT_GALABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GALAUSDT != 0.0 and qty_bids_g_GALAUSDT != 0.0 and price_asks_g_GALAUSDT != 0.0 and qty_asks_g_GALAUSDT != 0.0 and price_bids_g_GALABUSD != 0.0 and qty_bids_g_GALABUSD != 0.0 and price_asks_g_GALABUSD != 0.0 and qty_asks_g_GALABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GALABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GALABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GALABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GALAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GALAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GALAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GALABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GALAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GALABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GALAUSDT, '#', 'Покупаем', quantity_pair_a, 'GALA', 'за', price_a, 'USDT', 'по цене', price_asks_g_GALAUSDT) 
				print('Пара_B:', symbol_g_GALABUSD, '#', 'Продаем', quantity_pair_b, 'GALA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_GALABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GALAUSDT_GALABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_GALAUSDT_GALABNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GALAUSDT != 0.0 and qty_bids_g_GALAUSDT != 0.0 and price_asks_g_GALAUSDT != 0.0 and qty_asks_g_GALAUSDT != 0.0 and price_bids_g_GALABNB != 0.0 and qty_bids_g_GALABNB != 0.0 and price_asks_g_GALABNB != 0.0 and qty_asks_g_GALABNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GALABNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GALABNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GALABNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GALAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GALAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GALAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GALABNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GALAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GALABNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GALAUSDT, '#', 'Покупаем', quantity_pair_a, 'GALA', 'за', price_a, 'USDT', 'по цене', price_asks_g_GALAUSDT) 
				print('Пара_B:', symbol_g_GALABNB, '#', 'Продаем', quantity_pair_b, 'GALA', 'за', price_b, 'BNB', 'по цене', price_bids_g_GALABNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GALAUSDT_GALABNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_GALAUSDT_GALABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GALAUSDT != 0.0 and qty_bids_g_GALAUSDT != 0.0 and price_asks_g_GALAUSDT != 0.0 and qty_asks_g_GALAUSDT != 0.0 and price_bids_g_GALABTC != 0.0 and qty_bids_g_GALABTC != 0.0 and price_asks_g_GALABTC != 0.0 and qty_asks_g_GALABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GALABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GALABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GALABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GALAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GALAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GALAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GALABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GALAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GALABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GALAUSDT, '#', 'Покупаем', quantity_pair_a, 'GALA', 'за', price_a, 'USDT', 'по цене', price_asks_g_GALAUSDT) 
				print('Пара_B:', symbol_g_GALABTC, '#', 'Продаем', quantity_pair_b, 'GALA', 'за', price_b, 'BTC', 'по цене', price_bids_g_GALABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GALAUSDT_GALABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_GALAUSDT_GALAETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GALAUSDT != 0.0 and qty_bids_g_GALAUSDT != 0.0 and price_asks_g_GALAUSDT != 0.0 and qty_asks_g_GALAUSDT != 0.0 and price_bids_g_GALAETH != 0.0 and qty_bids_g_GALAETH != 0.0 and price_asks_g_GALAETH != 0.0 and qty_asks_g_GALAETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GALAETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GALAETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GALAETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GALAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GALAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GALAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GALAETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GALAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GALAETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GALAUSDT, '#', 'Покупаем', quantity_pair_a, 'GALA', 'за', price_a, 'USDT', 'по цене', price_asks_g_GALAUSDT) 
				print('Пара_B:', symbol_g_GALAETH, '#', 'Продаем', quantity_pair_b, 'GALA', 'за', price_b, 'ETH', 'по цене', price_bids_g_GALAETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GALAUSDT_GALAETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_GALAUSDT_GALAAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GALAUSDT != 0.0 and qty_bids_g_GALAUSDT != 0.0 and price_asks_g_GALAUSDT != 0.0 and qty_asks_g_GALAUSDT != 0.0 and price_bids_g_GALAAUD != 0.0 and qty_bids_g_GALAAUD != 0.0 and price_asks_g_GALAAUD != 0.0 and qty_asks_g_GALAAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GALAAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GALAAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GALAAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GALAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GALAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GALAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GALAAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GALAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GALAAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GALAUSDT, '#', 'Покупаем', quantity_pair_a, 'GALA', 'за', price_a, 'USDT', 'по цене', price_asks_g_GALAUSDT) 
				print('Пара_B:', symbol_g_GALAAUD, '#', 'Продаем', quantity_pair_b, 'GALA', 'за', price_b, 'AUD', 'по цене', price_bids_g_GALAAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GALAUSDT_GALAAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_GALAUSDT_GALAEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GALAUSDT != 0.0 and qty_bids_g_GALAUSDT != 0.0 and price_asks_g_GALAUSDT != 0.0 and qty_asks_g_GALAUSDT != 0.0 and price_bids_g_GALAEUR != 0.0 and qty_bids_g_GALAEUR != 0.0 and price_asks_g_GALAEUR != 0.0 and qty_asks_g_GALAEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GALAEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GALAEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GALAEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GALAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GALAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GALAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GALAEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GALAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GALAEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GALAUSDT, '#', 'Покупаем', quantity_pair_a, 'GALA', 'за', price_a, 'USDT', 'по цене', price_asks_g_GALAUSDT) 
				print('Пара_B:', symbol_g_GALAEUR, '#', 'Продаем', quantity_pair_b, 'GALA', 'за', price_b, 'EUR', 'по цене', price_bids_g_GALAEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GALAUSDT_GALAEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_ILVUSDT_ILVBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ILVUSDT != 0.0 and qty_bids_g_ILVUSDT != 0.0 and price_asks_g_ILVUSDT != 0.0 and qty_asks_g_ILVUSDT != 0.0 and price_bids_g_ILVBUSD != 0.0 and qty_bids_g_ILVBUSD != 0.0 and price_asks_g_ILVBUSD != 0.0 and qty_asks_g_ILVBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ILVBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ILVBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ILVBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ILVUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ILVUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ILVUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ILVBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ILVUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ILVBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ILVUSDT, '#', 'Покупаем', quantity_pair_a, 'ILV', 'за', price_a, 'USDT', 'по цене', price_asks_g_ILVUSDT) 
				print('Пара_B:', symbol_g_ILVBUSD, '#', 'Продаем', quantity_pair_b, 'ILV', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ILVBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ILVUSDT_ILVBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ILVUSDT_ILVBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ILVUSDT != 0.0 and qty_bids_g_ILVUSDT != 0.0 and price_asks_g_ILVUSDT != 0.0 and qty_asks_g_ILVUSDT != 0.0 and price_bids_g_ILVBNB != 0.0 and qty_bids_g_ILVBNB != 0.0 and price_asks_g_ILVBNB != 0.0 and qty_asks_g_ILVBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ILVBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ILVBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ILVBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ILVUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ILVUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ILVUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ILVBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ILVUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ILVBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ILVUSDT, '#', 'Покупаем', quantity_pair_a, 'ILV', 'за', price_a, 'USDT', 'по цене', price_asks_g_ILVUSDT) 
				print('Пара_B:', symbol_g_ILVBNB, '#', 'Продаем', quantity_pair_b, 'ILV', 'за', price_b, 'BNB', 'по цене', price_bids_g_ILVBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ILVUSDT_ILVBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ILVUSDT_ILVBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ILVUSDT != 0.0 and qty_bids_g_ILVUSDT != 0.0 and price_asks_g_ILVUSDT != 0.0 and qty_asks_g_ILVUSDT != 0.0 and price_bids_g_ILVBTC != 0.0 and qty_bids_g_ILVBTC != 0.0 and price_asks_g_ILVBTC != 0.0 and qty_asks_g_ILVBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ILVBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ILVBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ILVBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ILVUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ILVUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ILVUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ILVBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ILVUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ILVBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ILVUSDT, '#', 'Покупаем', quantity_pair_a, 'ILV', 'за', price_a, 'USDT', 'по цене', price_asks_g_ILVUSDT) 
				print('Пара_B:', symbol_g_ILVBTC, '#', 'Продаем', quantity_pair_b, 'ILV', 'за', price_b, 'BTC', 'по цене', price_bids_g_ILVBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ILVUSDT_ILVBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_YGGUSDT_YGGBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_YGGUSDT != 0.0 and qty_bids_g_YGGUSDT != 0.0 and price_asks_g_YGGUSDT != 0.0 and qty_asks_g_YGGUSDT != 0.0 and price_bids_g_YGGBUSD != 0.0 and qty_bids_g_YGGBUSD != 0.0 and price_asks_g_YGGBUSD != 0.0 and qty_asks_g_YGGBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_YGGBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_YGGBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_YGGBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_YGGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_YGGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_YGGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_YGGBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='YGGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='YGGBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_YGGUSDT, '#', 'Покупаем', quantity_pair_a, 'YGG', 'за', price_a, 'USDT', 'по цене', price_asks_g_YGGUSDT) 
				print('Пара_B:', symbol_g_YGGBUSD, '#', 'Продаем', quantity_pair_b, 'YGG', 'за', price_b, 'BUSD', 'по цене', price_bids_g_YGGBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_YGGUSDT_YGGBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_YGGUSDT_YGGBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_YGGUSDT != 0.0 and qty_bids_g_YGGUSDT != 0.0 and price_asks_g_YGGUSDT != 0.0 and qty_asks_g_YGGUSDT != 0.0 and price_bids_g_YGGBNB != 0.0 and qty_bids_g_YGGBNB != 0.0 and price_asks_g_YGGBNB != 0.0 and qty_asks_g_YGGBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_YGGBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_YGGBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_YGGBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_YGGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_YGGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_YGGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_YGGBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='YGGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='YGGBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_YGGUSDT, '#', 'Покупаем', quantity_pair_a, 'YGG', 'за', price_a, 'USDT', 'по цене', price_asks_g_YGGUSDT) 
				print('Пара_B:', symbol_g_YGGBNB, '#', 'Продаем', quantity_pair_b, 'YGG', 'за', price_b, 'BNB', 'по цене', price_bids_g_YGGBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_YGGUSDT_YGGBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_YGGUSDT_YGGBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_YGGUSDT != 0.0 and qty_bids_g_YGGUSDT != 0.0 and price_asks_g_YGGUSDT != 0.0 and qty_asks_g_YGGUSDT != 0.0 and price_bids_g_YGGBTC != 0.0 and qty_bids_g_YGGBTC != 0.0 and price_asks_g_YGGBTC != 0.0 and qty_asks_g_YGGBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_YGGBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_YGGBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_YGGBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_YGGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_YGGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_YGGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_YGGBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='YGGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='YGGBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_YGGUSDT, '#', 'Покупаем', quantity_pair_a, 'YGG', 'за', price_a, 'USDT', 'по цене', price_asks_g_YGGUSDT) 
				print('Пара_B:', symbol_g_YGGBTC, '#', 'Продаем', quantity_pair_b, 'YGG', 'за', price_b, 'BTC', 'по цене', price_bids_g_YGGBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_YGGUSDT_YGGBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_SYSUSDT_SYSBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SYSUSDT != 0.0 and qty_bids_g_SYSUSDT != 0.0 and price_asks_g_SYSUSDT != 0.0 and qty_asks_g_SYSUSDT != 0.0 and price_bids_g_SYSBTC != 0.0 and qty_bids_g_SYSBTC != 0.0 and price_asks_g_SYSBTC != 0.0 and qty_asks_g_SYSBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SYSBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SYSBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SYSBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SYSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SYSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SYSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SYSBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SYSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SYSBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SYSUSDT, '#', 'Покупаем', quantity_pair_a, 'SYS', 'за', price_a, 'USDT', 'по цене', price_asks_g_SYSUSDT) 
				print('Пара_B:', symbol_g_SYSBTC, '#', 'Продаем', quantity_pair_b, 'SYS', 'за', price_b, 'BTC', 'по цене', price_bids_g_SYSBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SYSUSDT_SYSBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_SYSUSDT_SYSBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SYSUSDT != 0.0 and qty_bids_g_SYSUSDT != 0.0 and price_asks_g_SYSUSDT != 0.0 and qty_asks_g_SYSUSDT != 0.0 and price_bids_g_SYSBUSD != 0.0 and qty_bids_g_SYSBUSD != 0.0 and price_asks_g_SYSBUSD != 0.0 and qty_asks_g_SYSBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SYSBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SYSBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SYSBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SYSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SYSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SYSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SYSBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SYSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SYSBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SYSUSDT, '#', 'Покупаем', quantity_pair_a, 'SYS', 'за', price_a, 'USDT', 'по цене', price_asks_g_SYSUSDT) 
				print('Пара_B:', symbol_g_SYSBUSD, '#', 'Продаем', quantity_pair_b, 'SYS', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SYSBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SYSUSDT_SYSBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DFUSDT_DFBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DFUSDT != 0.0 and qty_bids_g_DFUSDT != 0.0 and price_asks_g_DFUSDT != 0.0 and qty_asks_g_DFUSDT != 0.0 and price_bids_g_DFBUSD != 0.0 and qty_bids_g_DFBUSD != 0.0 and price_asks_g_DFBUSD != 0.0 and qty_asks_g_DFBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DFBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DFBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DFBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DFUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DFUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DFUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DFBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DFUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DFBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DFUSDT, '#', 'Покупаем', quantity_pair_a, 'DF', 'за', price_a, 'USDT', 'по цене', price_asks_g_DFUSDT) 
				print('Пара_B:', symbol_g_DFBUSD, '#', 'Продаем', quantity_pair_b, 'DF', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DFBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DFUSDT_DFBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FIDAUSDT_FIDABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FIDAUSDT != 0.0 and qty_bids_g_FIDAUSDT != 0.0 and price_asks_g_FIDAUSDT != 0.0 and qty_asks_g_FIDAUSDT != 0.0 and price_bids_g_FIDABUSD != 0.0 and qty_bids_g_FIDABUSD != 0.0 and price_asks_g_FIDABUSD != 0.0 and qty_asks_g_FIDABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FIDABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FIDABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FIDABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FIDAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FIDAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FIDAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FIDABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FIDAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FIDABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FIDAUSDT, '#', 'Покупаем', quantity_pair_a, 'FIDA', 'за', price_a, 'USDT', 'по цене', price_asks_g_FIDAUSDT) 
				print('Пара_B:', symbol_g_FIDABUSD, '#', 'Продаем', quantity_pair_b, 'FIDA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FIDABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FIDAUSDT_FIDABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FIDAUSDT_FIDABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FIDAUSDT != 0.0 and qty_bids_g_FIDAUSDT != 0.0 and price_asks_g_FIDAUSDT != 0.0 and qty_asks_g_FIDAUSDT != 0.0 and price_bids_g_FIDABTC != 0.0 and qty_bids_g_FIDABTC != 0.0 and price_asks_g_FIDABTC != 0.0 and qty_asks_g_FIDABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FIDABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FIDABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FIDABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FIDAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FIDAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FIDAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FIDABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FIDAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FIDABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FIDAUSDT, '#', 'Покупаем', quantity_pair_a, 'FIDA', 'за', price_a, 'USDT', 'по цене', price_asks_g_FIDAUSDT) 
				print('Пара_B:', symbol_g_FIDABTC, '#', 'Продаем', quantity_pair_b, 'FIDA', 'за', price_b, 'BTC', 'по цене', price_bids_g_FIDABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FIDAUSDT_FIDABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_FRONTUSDT_FRONTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FRONTUSDT != 0.0 and qty_bids_g_FRONTUSDT != 0.0 and price_asks_g_FRONTUSDT != 0.0 and qty_asks_g_FRONTUSDT != 0.0 and price_bids_g_FRONTBUSD != 0.0 and qty_bids_g_FRONTBUSD != 0.0 and price_asks_g_FRONTBUSD != 0.0 and qty_asks_g_FRONTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FRONTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FRONTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FRONTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FRONTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FRONTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FRONTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FRONTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FRONTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FRONTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FRONTUSDT, '#', 'Покупаем', quantity_pair_a, 'FRONT', 'за', price_a, 'USDT', 'по цене', price_asks_g_FRONTUSDT) 
				print('Пара_B:', symbol_g_FRONTBUSD, '#', 'Продаем', quantity_pair_b, 'FRONT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FRONTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FRONTUSDT_FRONTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FRONTUSDT_FRONTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FRONTUSDT != 0.0 and qty_bids_g_FRONTUSDT != 0.0 and price_asks_g_FRONTUSDT != 0.0 and qty_asks_g_FRONTUSDT != 0.0 and price_bids_g_FRONTBTC != 0.0 and qty_bids_g_FRONTBTC != 0.0 and price_asks_g_FRONTBTC != 0.0 and qty_asks_g_FRONTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FRONTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FRONTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FRONTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FRONTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FRONTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FRONTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FRONTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FRONTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FRONTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FRONTUSDT, '#', 'Покупаем', quantity_pair_a, 'FRONT', 'за', price_a, 'USDT', 'по цене', price_asks_g_FRONTUSDT) 
				print('Пара_B:', symbol_g_FRONTBTC, '#', 'Продаем', quantity_pair_b, 'FRONT', 'за', price_b, 'BTC', 'по цене', price_bids_g_FRONTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FRONTUSDT_FRONTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CVPUSDT_CVPETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CVPUSDT != 0.0 and qty_bids_g_CVPUSDT != 0.0 and price_asks_g_CVPUSDT != 0.0 and qty_asks_g_CVPUSDT != 0.0 and price_bids_g_CVPETH != 0.0 and qty_bids_g_CVPETH != 0.0 and price_asks_g_CVPETH != 0.0 and qty_asks_g_CVPETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CVPETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CVPETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CVPETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CVPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CVPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CVPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CVPETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CVPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CVPETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CVPUSDT, '#', 'Покупаем', quantity_pair_a, 'CVP', 'за', price_a, 'USDT', 'по цене', price_asks_g_CVPUSDT) 
				print('Пара_B:', symbol_g_CVPETH, '#', 'Продаем', quantity_pair_b, 'CVP', 'за', price_b, 'ETH', 'по цене', price_bids_g_CVPETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CVPUSDT_CVPETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_CVPUSDT_CVPBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CVPUSDT != 0.0 and qty_bids_g_CVPUSDT != 0.0 and price_asks_g_CVPUSDT != 0.0 and qty_asks_g_CVPUSDT != 0.0 and price_bids_g_CVPBUSD != 0.0 and qty_bids_g_CVPBUSD != 0.0 and price_asks_g_CVPBUSD != 0.0 and qty_asks_g_CVPBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CVPBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CVPBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CVPBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CVPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CVPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CVPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CVPBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CVPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CVPBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CVPUSDT, '#', 'Покупаем', quantity_pair_a, 'CVP', 'за', price_a, 'USDT', 'по цене', price_asks_g_CVPUSDT) 
				print('Пара_B:', symbol_g_CVPBUSD, '#', 'Продаем', quantity_pair_b, 'CVP', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CVPBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CVPUSDT_CVPBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_AGLDUSDT_AGLDBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AGLDUSDT != 0.0 and qty_bids_g_AGLDUSDT != 0.0 and price_asks_g_AGLDUSDT != 0.0 and qty_asks_g_AGLDUSDT != 0.0 and price_bids_g_AGLDBTC != 0.0 and qty_bids_g_AGLDBTC != 0.0 and price_asks_g_AGLDBTC != 0.0 and qty_asks_g_AGLDBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AGLDBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AGLDBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AGLDBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AGLDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AGLDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AGLDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AGLDBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AGLDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AGLDBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AGLDUSDT, '#', 'Покупаем', quantity_pair_a, 'AGLD', 'за', price_a, 'USDT', 'по цене', price_asks_g_AGLDUSDT) 
				print('Пара_B:', symbol_g_AGLDBTC, '#', 'Продаем', quantity_pair_b, 'AGLD', 'за', price_b, 'BTC', 'по цене', price_bids_g_AGLDBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AGLDUSDT_AGLDBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_AGLDUSDT_AGLDBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AGLDUSDT != 0.0 and qty_bids_g_AGLDUSDT != 0.0 and price_asks_g_AGLDUSDT != 0.0 and qty_asks_g_AGLDUSDT != 0.0 and price_bids_g_AGLDBUSD != 0.0 and qty_bids_g_AGLDBUSD != 0.0 and price_asks_g_AGLDBUSD != 0.0 and qty_asks_g_AGLDBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AGLDBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AGLDBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AGLDBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AGLDUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AGLDUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AGLDUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AGLDBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AGLDUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AGLDBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AGLDUSDT, '#', 'Покупаем', quantity_pair_a, 'AGLD', 'за', price_a, 'USDT', 'по цене', price_asks_g_AGLDUSDT) 
				print('Пара_B:', symbol_g_AGLDBUSD, '#', 'Продаем', quantity_pair_b, 'AGLD', 'за', price_b, 'BUSD', 'по цене', price_bids_g_AGLDBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AGLDUSDT_AGLDBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_RADUSDT_RADBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RADUSDT != 0.0 and qty_bids_g_RADUSDT != 0.0 and price_asks_g_RADUSDT != 0.0 and qty_asks_g_RADUSDT != 0.0 and price_bids_g_RADBTC != 0.0 and qty_bids_g_RADBTC != 0.0 and price_asks_g_RADBTC != 0.0 and qty_asks_g_RADBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RADBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RADBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RADBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RADUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RADUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RADUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RADBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RADUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RADBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RADUSDT, '#', 'Покупаем', quantity_pair_a, 'RAD', 'за', price_a, 'USDT', 'по цене', price_asks_g_RADUSDT) 
				print('Пара_B:', symbol_g_RADBTC, '#', 'Продаем', quantity_pair_b, 'RAD', 'за', price_b, 'BTC', 'по цене', price_bids_g_RADBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RADUSDT_RADBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_RADUSDT_RADBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RADUSDT != 0.0 and qty_bids_g_RADUSDT != 0.0 and price_asks_g_RADUSDT != 0.0 and qty_asks_g_RADUSDT != 0.0 and price_bids_g_RADBNB != 0.0 and qty_bids_g_RADBNB != 0.0 and price_asks_g_RADBNB != 0.0 and qty_asks_g_RADBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RADBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RADBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RADBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RADUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RADUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RADUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RADBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RADUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RADBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RADUSDT, '#', 'Покупаем', quantity_pair_a, 'RAD', 'за', price_a, 'USDT', 'по цене', price_asks_g_RADUSDT) 
				print('Пара_B:', symbol_g_RADBNB, '#', 'Продаем', quantity_pair_b, 'RAD', 'за', price_b, 'BNB', 'по цене', price_bids_g_RADBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RADUSDT_RADBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_RADUSDT_RADBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RADUSDT != 0.0 and qty_bids_g_RADUSDT != 0.0 and price_asks_g_RADUSDT != 0.0 and qty_asks_g_RADUSDT != 0.0 and price_bids_g_RADBUSD != 0.0 and qty_bids_g_RADBUSD != 0.0 and price_asks_g_RADBUSD != 0.0 and qty_asks_g_RADBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RADBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RADBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RADBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RADUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RADUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RADUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RADBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RADUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RADBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RADUSDT, '#', 'Покупаем', quantity_pair_a, 'RAD', 'за', price_a, 'USDT', 'по цене', price_asks_g_RADUSDT) 
				print('Пара_B:', symbol_g_RADBUSD, '#', 'Продаем', quantity_pair_b, 'RAD', 'за', price_b, 'BUSD', 'по цене', price_bids_g_RADBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RADUSDT_RADBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BETAUSDT_BETABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BETAUSDT != 0.0 and qty_bids_g_BETAUSDT != 0.0 and price_asks_g_BETAUSDT != 0.0 and qty_asks_g_BETAUSDT != 0.0 and price_bids_g_BETABTC != 0.0 and qty_bids_g_BETABTC != 0.0 and price_asks_g_BETABTC != 0.0 and qty_asks_g_BETABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BETABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BETABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BETABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BETAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BETAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BETAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BETABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BETAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BETABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BETAUSDT, '#', 'Покупаем', quantity_pair_a, 'BETA', 'за', price_a, 'USDT', 'по цене', price_asks_g_BETAUSDT) 
				print('Пара_B:', symbol_g_BETABTC, '#', 'Продаем', quantity_pair_b, 'BETA', 'за', price_b, 'BTC', 'по цене', price_bids_g_BETABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BETAUSDT_BETABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BETAUSDT_BETABNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BETAUSDT != 0.0 and qty_bids_g_BETAUSDT != 0.0 and price_asks_g_BETAUSDT != 0.0 and qty_asks_g_BETAUSDT != 0.0 and price_bids_g_BETABNB != 0.0 and qty_bids_g_BETABNB != 0.0 and price_asks_g_BETABNB != 0.0 and qty_asks_g_BETABNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BETABNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BETABNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BETABNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BETAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BETAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BETAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BETABNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BETAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BETABNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BETAUSDT, '#', 'Покупаем', quantity_pair_a, 'BETA', 'за', price_a, 'USDT', 'по цене', price_asks_g_BETAUSDT) 
				print('Пара_B:', symbol_g_BETABNB, '#', 'Продаем', quantity_pair_b, 'BETA', 'за', price_b, 'BNB', 'по цене', price_bids_g_BETABNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BETAUSDT_BETABNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_BETAUSDT_BETABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BETAUSDT != 0.0 and qty_bids_g_BETAUSDT != 0.0 and price_asks_g_BETAUSDT != 0.0 and qty_asks_g_BETAUSDT != 0.0 and price_bids_g_BETABUSD != 0.0 and qty_bids_g_BETABUSD != 0.0 and price_asks_g_BETABUSD != 0.0 and qty_asks_g_BETABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BETABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BETABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BETABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BETAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BETAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BETAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BETABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BETAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BETABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BETAUSDT, '#', 'Покупаем', quantity_pair_a, 'BETA', 'за', price_a, 'USDT', 'по цене', price_asks_g_BETAUSDT) 
				print('Пара_B:', symbol_g_BETABUSD, '#', 'Продаем', quantity_pair_b, 'BETA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BETABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BETAUSDT_BETABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BETAUSDT_BETAETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BETAUSDT != 0.0 and qty_bids_g_BETAUSDT != 0.0 and price_asks_g_BETAUSDT != 0.0 and qty_asks_g_BETAUSDT != 0.0 and price_bids_g_BETAETH != 0.0 and qty_bids_g_BETAETH != 0.0 and price_asks_g_BETAETH != 0.0 and qty_asks_g_BETAETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BETAETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BETAETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BETAETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BETAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BETAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BETAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BETAETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BETAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BETAETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BETAUSDT, '#', 'Покупаем', quantity_pair_a, 'BETA', 'за', price_a, 'USDT', 'по цене', price_asks_g_BETAUSDT) 
				print('Пара_B:', symbol_g_BETAETH, '#', 'Продаем', quantity_pair_b, 'BETA', 'за', price_b, 'ETH', 'по цене', price_bids_g_BETAETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BETAUSDT_BETAETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_RAREUSDT_RAREBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RAREUSDT != 0.0 and qty_bids_g_RAREUSDT != 0.0 and price_asks_g_RAREUSDT != 0.0 and qty_asks_g_RAREUSDT != 0.0 and price_bids_g_RAREBTC != 0.0 and qty_bids_g_RAREBTC != 0.0 and price_asks_g_RAREBTC != 0.0 and qty_asks_g_RAREBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RAREBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RAREBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RAREBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RAREUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RAREUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RAREUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RAREBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RAREUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RAREBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RAREUSDT, '#', 'Покупаем', quantity_pair_a, 'RARE', 'за', price_a, 'USDT', 'по цене', price_asks_g_RAREUSDT) 
				print('Пара_B:', symbol_g_RAREBTC, '#', 'Продаем', quantity_pair_b, 'RARE', 'за', price_b, 'BTC', 'по цене', price_bids_g_RAREBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RAREUSDT_RAREBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_RAREUSDT_RAREBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RAREUSDT != 0.0 and qty_bids_g_RAREUSDT != 0.0 and price_asks_g_RAREUSDT != 0.0 and qty_asks_g_RAREUSDT != 0.0 and price_bids_g_RAREBUSD != 0.0 and qty_bids_g_RAREBUSD != 0.0 and price_asks_g_RAREBUSD != 0.0 and qty_asks_g_RAREBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RAREBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RAREBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RAREBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RAREUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RAREUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RAREUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RAREBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RAREUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RAREBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RAREUSDT, '#', 'Покупаем', quantity_pair_a, 'RARE', 'за', price_a, 'USDT', 'по цене', price_asks_g_RAREUSDT) 
				print('Пара_B:', symbol_g_RAREBUSD, '#', 'Продаем', quantity_pair_b, 'RARE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_RAREBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RAREUSDT_RAREBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_LAZIOUSDT_LAZIOEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LAZIOUSDT != 0.0 and qty_bids_g_LAZIOUSDT != 0.0 and price_asks_g_LAZIOUSDT != 0.0 and qty_asks_g_LAZIOUSDT != 0.0 and price_bids_g_LAZIOEUR != 0.0 and qty_bids_g_LAZIOEUR != 0.0 and price_asks_g_LAZIOEUR != 0.0 and qty_asks_g_LAZIOEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LAZIOEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LAZIOEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LAZIOEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LAZIOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LAZIOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LAZIOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LAZIOEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LAZIOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LAZIOEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LAZIOUSDT, '#', 'Покупаем', quantity_pair_a, 'LAZIO', 'за', price_a, 'USDT', 'по цене', price_asks_g_LAZIOUSDT) 
				print('Пара_B:', symbol_g_LAZIOEUR, '#', 'Продаем', quantity_pair_b, 'LAZIO', 'за', price_b, 'EUR', 'по цене', price_bids_g_LAZIOEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LAZIOUSDT_LAZIOEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_LAZIOUSDT_LAZIOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LAZIOUSDT != 0.0 and qty_bids_g_LAZIOUSDT != 0.0 and price_asks_g_LAZIOUSDT != 0.0 and qty_asks_g_LAZIOUSDT != 0.0 and price_bids_g_LAZIOBTC != 0.0 and qty_bids_g_LAZIOBTC != 0.0 and price_asks_g_LAZIOBTC != 0.0 and qty_asks_g_LAZIOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LAZIOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LAZIOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LAZIOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LAZIOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LAZIOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LAZIOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LAZIOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LAZIOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LAZIOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LAZIOUSDT, '#', 'Покупаем', quantity_pair_a, 'LAZIO', 'за', price_a, 'USDT', 'по цене', price_asks_g_LAZIOUSDT) 
				print('Пара_B:', symbol_g_LAZIOBTC, '#', 'Продаем', quantity_pair_b, 'LAZIO', 'за', price_b, 'BTC', 'по цене', price_bids_g_LAZIOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LAZIOUSDT_LAZIOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_LAZIOUSDT_LAZIOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LAZIOUSDT != 0.0 and qty_bids_g_LAZIOUSDT != 0.0 and price_asks_g_LAZIOUSDT != 0.0 and qty_asks_g_LAZIOUSDT != 0.0 and price_bids_g_LAZIOBUSD != 0.0 and qty_bids_g_LAZIOBUSD != 0.0 and price_asks_g_LAZIOBUSD != 0.0 and qty_asks_g_LAZIOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LAZIOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LAZIOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LAZIOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LAZIOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LAZIOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LAZIOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LAZIOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LAZIOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LAZIOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LAZIOUSDT, '#', 'Покупаем', quantity_pair_a, 'LAZIO', 'за', price_a, 'USDT', 'по цене', price_asks_g_LAZIOUSDT) 
				print('Пара_B:', symbol_g_LAZIOBUSD, '#', 'Продаем', quantity_pair_b, 'LAZIO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LAZIOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LAZIOUSDT_LAZIOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_CHESSUSDT_CHESSBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CHESSUSDT != 0.0 and qty_bids_g_CHESSUSDT != 0.0 and price_asks_g_CHESSUSDT != 0.0 and qty_asks_g_CHESSUSDT != 0.0 and price_bids_g_CHESSBTC != 0.0 and qty_bids_g_CHESSBTC != 0.0 and price_asks_g_CHESSBTC != 0.0 and qty_asks_g_CHESSBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CHESSBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CHESSBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CHESSBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CHESSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CHESSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CHESSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CHESSBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CHESSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CHESSBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CHESSUSDT, '#', 'Покупаем', quantity_pair_a, 'CHESS', 'за', price_a, 'USDT', 'по цене', price_asks_g_CHESSUSDT) 
				print('Пара_B:', symbol_g_CHESSBTC, '#', 'Продаем', quantity_pair_b, 'CHESS', 'за', price_b, 'BTC', 'по цене', price_bids_g_CHESSBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CHESSUSDT_CHESSBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CHESSUSDT_CHESSBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CHESSUSDT != 0.0 and qty_bids_g_CHESSUSDT != 0.0 and price_asks_g_CHESSUSDT != 0.0 and qty_asks_g_CHESSUSDT != 0.0 and price_bids_g_CHESSBUSD != 0.0 and qty_bids_g_CHESSBUSD != 0.0 and price_asks_g_CHESSBUSD != 0.0 and qty_asks_g_CHESSBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CHESSBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CHESSBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CHESSBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CHESSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CHESSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CHESSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CHESSBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CHESSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CHESSBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CHESSUSDT, '#', 'Покупаем', quantity_pair_a, 'CHESS', 'за', price_a, 'USDT', 'по цене', price_asks_g_CHESSUSDT) 
				print('Пара_B:', symbol_g_CHESSBUSD, '#', 'Продаем', quantity_pair_b, 'CHESS', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CHESSBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CHESSUSDT_CHESSBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ADXUSDT_ADXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ADXUSDT != 0.0 and qty_bids_g_ADXUSDT != 0.0 and price_asks_g_ADXUSDT != 0.0 and qty_asks_g_ADXUSDT != 0.0 and price_bids_g_ADXBTC != 0.0 and qty_bids_g_ADXBTC != 0.0 and price_asks_g_ADXBTC != 0.0 and qty_asks_g_ADXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ADXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ADXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ADXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ADXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ADXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ADXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ADXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ADXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ADXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ADXUSDT, '#', 'Покупаем', quantity_pair_a, 'ADX', 'за', price_a, 'USDT', 'по цене', price_asks_g_ADXUSDT) 
				print('Пара_B:', symbol_g_ADXBTC, '#', 'Продаем', quantity_pair_b, 'ADX', 'за', price_b, 'BTC', 'по цене', price_bids_g_ADXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ADXUSDT_ADXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ADXUSDT_ADXETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ADXUSDT != 0.0 and qty_bids_g_ADXUSDT != 0.0 and price_asks_g_ADXUSDT != 0.0 and qty_asks_g_ADXUSDT != 0.0 and price_bids_g_ADXETH != 0.0 and qty_bids_g_ADXETH != 0.0 and price_asks_g_ADXETH != 0.0 and qty_asks_g_ADXETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ADXETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ADXETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ADXETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ADXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ADXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ADXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ADXETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ADXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ADXETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ADXUSDT, '#', 'Покупаем', quantity_pair_a, 'ADX', 'за', price_a, 'USDT', 'по цене', price_asks_g_ADXUSDT) 
				print('Пара_B:', symbol_g_ADXETH, '#', 'Продаем', quantity_pair_b, 'ADX', 'за', price_b, 'ETH', 'по цене', price_bids_g_ADXETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ADXUSDT_ADXETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_ADXUSDT_ADXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ADXUSDT != 0.0 and qty_bids_g_ADXUSDT != 0.0 and price_asks_g_ADXUSDT != 0.0 and qty_asks_g_ADXUSDT != 0.0 and price_bids_g_ADXBUSD != 0.0 and qty_bids_g_ADXBUSD != 0.0 and price_asks_g_ADXBUSD != 0.0 and qty_asks_g_ADXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ADXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ADXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ADXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ADXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ADXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ADXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ADXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ADXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ADXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ADXUSDT, '#', 'Покупаем', quantity_pair_a, 'ADX', 'за', price_a, 'USDT', 'по цене', price_asks_g_ADXUSDT) 
				print('Пара_B:', symbol_g_ADXBUSD, '#', 'Продаем', quantity_pair_b, 'ADX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ADXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ADXUSDT_ADXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_AUCTIONUSDT_AUCTIONBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AUCTIONUSDT != 0.0 and qty_bids_g_AUCTIONUSDT != 0.0 and price_asks_g_AUCTIONUSDT != 0.0 and qty_asks_g_AUCTIONUSDT != 0.0 and price_bids_g_AUCTIONBTC != 0.0 and qty_bids_g_AUCTIONBTC != 0.0 and price_asks_g_AUCTIONBTC != 0.0 and qty_asks_g_AUCTIONBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AUCTIONBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AUCTIONBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AUCTIONBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AUCTIONUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AUCTIONUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AUCTIONUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AUCTIONBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AUCTIONUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AUCTIONBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AUCTIONUSDT, '#', 'Покупаем', quantity_pair_a, 'AUCTION', 'за', price_a, 'USDT', 'по цене', price_asks_g_AUCTIONUSDT) 
				print('Пара_B:', symbol_g_AUCTIONBTC, '#', 'Продаем', quantity_pair_b, 'AUCTION', 'за', price_b, 'BTC', 'по цене', price_bids_g_AUCTIONBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AUCTIONUSDT_AUCTIONBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_AUCTIONUSDT_AUCTIONBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AUCTIONUSDT != 0.0 and qty_bids_g_AUCTIONUSDT != 0.0 and price_asks_g_AUCTIONUSDT != 0.0 and qty_asks_g_AUCTIONUSDT != 0.0 and price_bids_g_AUCTIONBUSD != 0.0 and qty_bids_g_AUCTIONBUSD != 0.0 and price_asks_g_AUCTIONBUSD != 0.0 and qty_asks_g_AUCTIONBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AUCTIONBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AUCTIONBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AUCTIONBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AUCTIONUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AUCTIONUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AUCTIONUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AUCTIONBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AUCTIONUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AUCTIONBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AUCTIONUSDT, '#', 'Покупаем', quantity_pair_a, 'AUCTION', 'за', price_a, 'USDT', 'по цене', price_asks_g_AUCTIONUSDT) 
				print('Пара_B:', symbol_g_AUCTIONBUSD, '#', 'Продаем', quantity_pair_b, 'AUCTION', 'за', price_b, 'BUSD', 'по цене', price_bids_g_AUCTIONBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AUCTIONUSDT_AUCTIONBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DARUSDT_DARBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DARUSDT != 0.0 and qty_bids_g_DARUSDT != 0.0 and price_asks_g_DARUSDT != 0.0 and qty_asks_g_DARUSDT != 0.0 and price_bids_g_DARBUSD != 0.0 and qty_bids_g_DARBUSD != 0.0 and price_asks_g_DARBUSD != 0.0 and qty_asks_g_DARBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DARBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DARBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DARBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DARBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DARBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DARUSDT, '#', 'Покупаем', quantity_pair_a, 'DAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_DARUSDT) 
				print('Пара_B:', symbol_g_DARBUSD, '#', 'Продаем', quantity_pair_b, 'DAR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_DARBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DARUSDT_DARBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_DARUSDT_DARBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DARUSDT != 0.0 and qty_bids_g_DARUSDT != 0.0 and price_asks_g_DARUSDT != 0.0 and qty_asks_g_DARUSDT != 0.0 and price_bids_g_DARBNB != 0.0 and qty_bids_g_DARBNB != 0.0 and price_asks_g_DARBNB != 0.0 and qty_asks_g_DARBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DARBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DARBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DARBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DARBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DARBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DARUSDT, '#', 'Покупаем', quantity_pair_a, 'DAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_DARUSDT) 
				print('Пара_B:', symbol_g_DARBNB, '#', 'Продаем', quantity_pair_b, 'DAR', 'за', price_b, 'BNB', 'по цене', price_bids_g_DARBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DARUSDT_DARBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_DARUSDT_DARBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DARUSDT != 0.0 and qty_bids_g_DARUSDT != 0.0 and price_asks_g_DARUSDT != 0.0 and qty_asks_g_DARUSDT != 0.0 and price_bids_g_DARBTC != 0.0 and qty_bids_g_DARBTC != 0.0 and price_asks_g_DARBTC != 0.0 and qty_asks_g_DARBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DARBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DARBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DARBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DARBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DARBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DARUSDT, '#', 'Покупаем', quantity_pair_a, 'DAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_DARUSDT) 
				print('Пара_B:', symbol_g_DARBTC, '#', 'Продаем', quantity_pair_b, 'DAR', 'за', price_b, 'BTC', 'по цене', price_bids_g_DARBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DARUSDT_DARBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_DARUSDT_DAREUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_DARUSDT != 0.0 and qty_bids_g_DARUSDT != 0.0 and price_asks_g_DARUSDT != 0.0 and qty_asks_g_DARUSDT != 0.0 and price_bids_g_DAREUR != 0.0 and qty_bids_g_DAREUR != 0.0 and price_asks_g_DAREUR != 0.0 and qty_asks_g_DAREUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_DAREUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_DAREUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_DAREUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_DARUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_DARUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_DARUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_DAREUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='DARUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='DAREUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_DARUSDT, '#', 'Покупаем', quantity_pair_a, 'DAR', 'за', price_a, 'USDT', 'по цене', price_asks_g_DARUSDT) 
				print('Пара_B:', symbol_g_DAREUR, '#', 'Продаем', quantity_pair_b, 'DAR', 'за', price_b, 'EUR', 'по цене', price_bids_g_DAREUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_DARUSDT_DAREUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_BNXUSDT_BNXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BNXUSDT != 0.0 and qty_bids_g_BNXUSDT != 0.0 and price_asks_g_BNXUSDT != 0.0 and qty_asks_g_BNXUSDT != 0.0 and price_bids_g_BNXBTC != 0.0 and qty_bids_g_BNXBTC != 0.0 and price_asks_g_BNXBTC != 0.0 and qty_asks_g_BNXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BNXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BNXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BNXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BNXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BNXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BNXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BNXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BNXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BNXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BNXUSDT, '#', 'Покупаем', quantity_pair_a, 'BNX', 'за', price_a, 'USDT', 'по цене', price_asks_g_BNXUSDT) 
				print('Пара_B:', symbol_g_BNXBTC, '#', 'Продаем', quantity_pair_b, 'BNX', 'за', price_b, 'BTC', 'по цене', price_bids_g_BNXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BNXUSDT_BNXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BNXUSDT_BNXBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BNXUSDT != 0.0 and qty_bids_g_BNXUSDT != 0.0 and price_asks_g_BNXUSDT != 0.0 and qty_asks_g_BNXUSDT != 0.0 and price_bids_g_BNXBNB != 0.0 and qty_bids_g_BNXBNB != 0.0 and price_asks_g_BNXBNB != 0.0 and qty_asks_g_BNXBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BNXBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BNXBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BNXBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BNXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BNXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BNXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BNXBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BNXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BNXBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BNXUSDT, '#', 'Покупаем', quantity_pair_a, 'BNX', 'за', price_a, 'USDT', 'по цене', price_asks_g_BNXUSDT) 
				print('Пара_B:', symbol_g_BNXBNB, '#', 'Продаем', quantity_pair_b, 'BNX', 'за', price_b, 'BNB', 'по цене', price_bids_g_BNXBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BNXUSDT_BNXBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_BNXUSDT_BNXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BNXUSDT != 0.0 and qty_bids_g_BNXUSDT != 0.0 and price_asks_g_BNXUSDT != 0.0 and qty_asks_g_BNXUSDT != 0.0 and price_bids_g_BNXBUSD != 0.0 and qty_bids_g_BNXBUSD != 0.0 and price_asks_g_BNXBUSD != 0.0 and qty_asks_g_BNXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BNXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BNXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BNXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BNXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BNXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BNXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BNXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BNXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BNXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BNXUSDT, '#', 'Покупаем', quantity_pair_a, 'BNX', 'за', price_a, 'USDT', 'по цене', price_asks_g_BNXUSDT) 
				print('Пара_B:', symbol_g_BNXBUSD, '#', 'Продаем', quantity_pair_b, 'BNX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BNXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BNXUSDT_BNXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_MOVRUSDT_MOVRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MOVRUSDT != 0.0 and qty_bids_g_MOVRUSDT != 0.0 and price_asks_g_MOVRUSDT != 0.0 and qty_asks_g_MOVRUSDT != 0.0 and price_bids_g_MOVRBTC != 0.0 and qty_bids_g_MOVRBTC != 0.0 and price_asks_g_MOVRBTC != 0.0 and qty_asks_g_MOVRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MOVRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MOVRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MOVRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MOVRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MOVRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MOVRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MOVRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MOVRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MOVRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MOVRUSDT, '#', 'Покупаем', quantity_pair_a, 'MOVR', 'за', price_a, 'USDT', 'по цене', price_asks_g_MOVRUSDT) 
				print('Пара_B:', symbol_g_MOVRBTC, '#', 'Продаем', quantity_pair_b, 'MOVR', 'за', price_b, 'BTC', 'по цене', price_bids_g_MOVRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MOVRUSDT_MOVRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MOVRUSDT_MOVRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MOVRUSDT != 0.0 and qty_bids_g_MOVRUSDT != 0.0 and price_asks_g_MOVRUSDT != 0.0 and qty_asks_g_MOVRUSDT != 0.0 and price_bids_g_MOVRBUSD != 0.0 and qty_bids_g_MOVRBUSD != 0.0 and price_asks_g_MOVRBUSD != 0.0 and qty_asks_g_MOVRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MOVRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MOVRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MOVRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MOVRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MOVRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MOVRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MOVRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MOVRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MOVRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MOVRUSDT, '#', 'Покупаем', quantity_pair_a, 'MOVR', 'за', price_a, 'USDT', 'по цене', price_asks_g_MOVRUSDT) 
				print('Пара_B:', symbol_g_MOVRBUSD, '#', 'Продаем', quantity_pair_b, 'MOVR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MOVRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MOVRUSDT_MOVRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_CITYUSDT_CITYBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CITYUSDT != 0.0 and qty_bids_g_CITYUSDT != 0.0 and price_asks_g_CITYUSDT != 0.0 and qty_asks_g_CITYUSDT != 0.0 and price_bids_g_CITYBTC != 0.0 and qty_bids_g_CITYBTC != 0.0 and price_asks_g_CITYBTC != 0.0 and qty_asks_g_CITYBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CITYBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CITYBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CITYBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CITYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CITYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CITYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CITYBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CITYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CITYBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CITYUSDT, '#', 'Покупаем', quantity_pair_a, 'CITY', 'за', price_a, 'USDT', 'по цене', price_asks_g_CITYUSDT) 
				print('Пара_B:', symbol_g_CITYBTC, '#', 'Продаем', quantity_pair_b, 'CITY', 'за', price_b, 'BTC', 'по цене', price_bids_g_CITYBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CITYUSDT_CITYBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CITYUSDT_CITYBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CITYUSDT != 0.0 and qty_bids_g_CITYUSDT != 0.0 and price_asks_g_CITYUSDT != 0.0 and qty_asks_g_CITYUSDT != 0.0 and price_bids_g_CITYBNB != 0.0 and qty_bids_g_CITYBNB != 0.0 and price_asks_g_CITYBNB != 0.0 and qty_asks_g_CITYBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CITYBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CITYBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CITYBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CITYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CITYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CITYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CITYBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CITYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CITYBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CITYUSDT, '#', 'Покупаем', quantity_pair_a, 'CITY', 'за', price_a, 'USDT', 'по цене', price_asks_g_CITYUSDT) 
				print('Пара_B:', symbol_g_CITYBNB, '#', 'Продаем', quantity_pair_b, 'CITY', 'за', price_b, 'BNB', 'по цене', price_bids_g_CITYBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CITYUSDT_CITYBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_CITYUSDT_CITYBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CITYUSDT != 0.0 and qty_bids_g_CITYUSDT != 0.0 and price_asks_g_CITYUSDT != 0.0 and qty_asks_g_CITYUSDT != 0.0 and price_bids_g_CITYBUSD != 0.0 and qty_bids_g_CITYBUSD != 0.0 and price_asks_g_CITYBUSD != 0.0 and qty_asks_g_CITYBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CITYBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CITYBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CITYBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CITYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CITYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CITYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CITYBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CITYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CITYBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CITYUSDT, '#', 'Покупаем', quantity_pair_a, 'CITY', 'за', price_a, 'USDT', 'по цене', price_asks_g_CITYUSDT) 
				print('Пара_B:', symbol_g_CITYBUSD, '#', 'Продаем', quantity_pair_b, 'CITY', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CITYBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CITYUSDT_CITYBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ENSUSDT_ENSBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ENSUSDT != 0.0 and qty_bids_g_ENSUSDT != 0.0 and price_asks_g_ENSUSDT != 0.0 and qty_asks_g_ENSUSDT != 0.0 and price_bids_g_ENSBTC != 0.0 and qty_bids_g_ENSBTC != 0.0 and price_asks_g_ENSBTC != 0.0 and qty_asks_g_ENSBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ENSBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ENSBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ENSBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ENSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ENSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ENSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ENSBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ENSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ENSBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ENSUSDT, '#', 'Покупаем', quantity_pair_a, 'ENS', 'за', price_a, 'USDT', 'по цене', price_asks_g_ENSUSDT) 
				print('Пара_B:', symbol_g_ENSBTC, '#', 'Продаем', quantity_pair_b, 'ENS', 'за', price_b, 'BTC', 'по цене', price_bids_g_ENSBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ENSUSDT_ENSBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ENSUSDT_ENSBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ENSUSDT != 0.0 and qty_bids_g_ENSUSDT != 0.0 and price_asks_g_ENSUSDT != 0.0 and qty_asks_g_ENSUSDT != 0.0 and price_bids_g_ENSBNB != 0.0 and qty_bids_g_ENSBNB != 0.0 and price_asks_g_ENSBNB != 0.0 and qty_asks_g_ENSBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ENSBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ENSBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ENSBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ENSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ENSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ENSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ENSBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ENSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ENSBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ENSUSDT, '#', 'Покупаем', quantity_pair_a, 'ENS', 'за', price_a, 'USDT', 'по цене', price_asks_g_ENSUSDT) 
				print('Пара_B:', symbol_g_ENSBNB, '#', 'Продаем', quantity_pair_b, 'ENS', 'за', price_b, 'BNB', 'по цене', price_bids_g_ENSBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ENSUSDT_ENSBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_ENSUSDT_ENSBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ENSUSDT != 0.0 and qty_bids_g_ENSUSDT != 0.0 and price_asks_g_ENSUSDT != 0.0 and qty_asks_g_ENSUSDT != 0.0 and price_bids_g_ENSBUSD != 0.0 and qty_bids_g_ENSBUSD != 0.0 and price_asks_g_ENSBUSD != 0.0 and qty_asks_g_ENSBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ENSBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ENSBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ENSBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ENSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ENSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ENSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ENSBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ENSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ENSBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ENSUSDT, '#', 'Покупаем', quantity_pair_a, 'ENS', 'за', price_a, 'USDT', 'по цене', price_asks_g_ENSUSDT) 
				print('Пара_B:', symbol_g_ENSBUSD, '#', 'Продаем', quantity_pair_b, 'ENS', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ENSBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ENSUSDT_ENSBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_KP3RUSDT_KP3RBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KP3RUSDT != 0.0 and qty_bids_g_KP3RUSDT != 0.0 and price_asks_g_KP3RUSDT != 0.0 and qty_asks_g_KP3RUSDT != 0.0 and price_bids_g_KP3RBNB != 0.0 and qty_bids_g_KP3RBNB != 0.0 and price_asks_g_KP3RBNB != 0.0 and qty_asks_g_KP3RBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KP3RBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KP3RBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KP3RBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KP3RUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KP3RUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KP3RUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KP3RBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KP3RUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KP3RBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KP3RUSDT, '#', 'Покупаем', quantity_pair_a, 'KP3R', 'за', price_a, 'USDT', 'по цене', price_asks_g_KP3RUSDT) 
				print('Пара_B:', symbol_g_KP3RBNB, '#', 'Продаем', quantity_pair_b, 'KP3R', 'за', price_b, 'BNB', 'по цене', price_bids_g_KP3RBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KP3RUSDT_KP3RBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_KP3RUSDT_KP3RBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KP3RUSDT != 0.0 and qty_bids_g_KP3RUSDT != 0.0 and price_asks_g_KP3RUSDT != 0.0 and qty_asks_g_KP3RUSDT != 0.0 and price_bids_g_KP3RBUSD != 0.0 and qty_bids_g_KP3RBUSD != 0.0 and price_asks_g_KP3RBUSD != 0.0 and qty_asks_g_KP3RBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KP3RBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KP3RBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KP3RBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KP3RUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KP3RUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KP3RUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KP3RBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KP3RUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KP3RBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KP3RUSDT, '#', 'Покупаем', quantity_pair_a, 'KP3R', 'за', price_a, 'USDT', 'по цене', price_asks_g_KP3RUSDT) 
				print('Пара_B:', symbol_g_KP3RBUSD, '#', 'Продаем', quantity_pair_b, 'KP3R', 'за', price_b, 'BUSD', 'по цене', price_bids_g_KP3RBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KP3RUSDT_KP3RBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_QIUSDT_QIBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_QIUSDT != 0.0 and qty_bids_g_QIUSDT != 0.0 and price_asks_g_QIUSDT != 0.0 and qty_asks_g_QIUSDT != 0.0 and price_bids_g_QIBUSD != 0.0 and qty_bids_g_QIBUSD != 0.0 and price_asks_g_QIBUSD != 0.0 and qty_asks_g_QIBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_QIBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_QIBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_QIBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_QIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_QIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_QIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_QIBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='QIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='QIBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_QIUSDT, '#', 'Покупаем', quantity_pair_a, 'QI', 'за', price_a, 'USDT', 'по цене', price_asks_g_QIUSDT) 
				print('Пара_B:', symbol_g_QIBUSD, '#', 'Продаем', quantity_pair_b, 'QI', 'за', price_b, 'BUSD', 'по цене', price_bids_g_QIBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_QIUSDT_QIBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_QIUSDT_QIBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_QIUSDT != 0.0 and qty_bids_g_QIUSDT != 0.0 and price_asks_g_QIUSDT != 0.0 and qty_asks_g_QIUSDT != 0.0 and price_bids_g_QIBTC != 0.0 and qty_bids_g_QIBTC != 0.0 and price_asks_g_QIBTC != 0.0 and qty_asks_g_QIBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_QIBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_QIBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_QIBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_QIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_QIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_QIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_QIBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='QIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='QIBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_QIUSDT, '#', 'Покупаем', quantity_pair_a, 'QI', 'за', price_a, 'USDT', 'по цене', price_asks_g_QIUSDT) 
				print('Пара_B:', symbol_g_QIBTC, '#', 'Продаем', quantity_pair_b, 'QI', 'за', price_b, 'BTC', 'по цене', price_bids_g_QIBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_QIUSDT_QIBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_PORTOUSDT_PORTOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PORTOUSDT != 0.0 and qty_bids_g_PORTOUSDT != 0.0 and price_asks_g_PORTOUSDT != 0.0 and qty_asks_g_PORTOUSDT != 0.0 and price_bids_g_PORTOBTC != 0.0 and qty_bids_g_PORTOBTC != 0.0 and price_asks_g_PORTOBTC != 0.0 and qty_asks_g_PORTOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PORTOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PORTOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PORTOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PORTOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PORTOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PORTOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PORTOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PORTOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PORTOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PORTOUSDT, '#', 'Покупаем', quantity_pair_a, 'PORTO', 'за', price_a, 'USDT', 'по цене', price_asks_g_PORTOUSDT) 
				print('Пара_B:', symbol_g_PORTOBTC, '#', 'Продаем', quantity_pair_b, 'PORTO', 'за', price_b, 'BTC', 'по цене', price_bids_g_PORTOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PORTOUSDT_PORTOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_PORTOUSDT_PORTOEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PORTOUSDT != 0.0 and qty_bids_g_PORTOUSDT != 0.0 and price_asks_g_PORTOUSDT != 0.0 and qty_asks_g_PORTOUSDT != 0.0 and price_bids_g_PORTOEUR != 0.0 and qty_bids_g_PORTOEUR != 0.0 and price_asks_g_PORTOEUR != 0.0 and qty_asks_g_PORTOEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PORTOEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PORTOEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PORTOEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PORTOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PORTOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PORTOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PORTOEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PORTOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PORTOEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PORTOUSDT, '#', 'Покупаем', quantity_pair_a, 'PORTO', 'за', price_a, 'USDT', 'по цене', price_asks_g_PORTOUSDT) 
				print('Пара_B:', symbol_g_PORTOEUR, '#', 'Продаем', quantity_pair_b, 'PORTO', 'за', price_b, 'EUR', 'по цене', price_bids_g_PORTOEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PORTOUSDT_PORTOEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_PORTOUSDT_PORTOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PORTOUSDT != 0.0 and qty_bids_g_PORTOUSDT != 0.0 and price_asks_g_PORTOUSDT != 0.0 and qty_asks_g_PORTOUSDT != 0.0 and price_bids_g_PORTOBUSD != 0.0 and qty_bids_g_PORTOBUSD != 0.0 and price_asks_g_PORTOBUSD != 0.0 and qty_asks_g_PORTOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PORTOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PORTOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PORTOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PORTOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PORTOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PORTOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PORTOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PORTOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PORTOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PORTOUSDT, '#', 'Покупаем', quantity_pair_a, 'PORTO', 'за', price_a, 'USDT', 'по цене', price_asks_g_PORTOUSDT) 
				print('Пара_B:', symbol_g_PORTOBUSD, '#', 'Продаем', quantity_pair_b, 'PORTO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_PORTOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PORTOUSDT_PORTOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_POWRUSDT_POWRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_POWRUSDT != 0.0 and qty_bids_g_POWRUSDT != 0.0 and price_asks_g_POWRUSDT != 0.0 and qty_asks_g_POWRUSDT != 0.0 and price_bids_g_POWRBTC != 0.0 and qty_bids_g_POWRBTC != 0.0 and price_asks_g_POWRBTC != 0.0 and qty_asks_g_POWRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_POWRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_POWRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_POWRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_POWRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_POWRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_POWRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_POWRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='POWRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='POWRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_POWRUSDT, '#', 'Покупаем', quantity_pair_a, 'POWR', 'за', price_a, 'USDT', 'по цене', price_asks_g_POWRUSDT) 
				print('Пара_B:', symbol_g_POWRBTC, '#', 'Продаем', quantity_pair_b, 'POWR', 'за', price_b, 'BTC', 'по цене', price_bids_g_POWRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_POWRUSDT_POWRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_POWRUSDT_POWRETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_POWRUSDT != 0.0 and qty_bids_g_POWRUSDT != 0.0 and price_asks_g_POWRUSDT != 0.0 and qty_asks_g_POWRUSDT != 0.0 and price_bids_g_POWRETH != 0.0 and qty_bids_g_POWRETH != 0.0 and price_asks_g_POWRETH != 0.0 and qty_asks_g_POWRETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_POWRETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_POWRETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_POWRETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_POWRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_POWRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_POWRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_POWRETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='POWRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='POWRETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_POWRUSDT, '#', 'Покупаем', quantity_pair_a, 'POWR', 'за', price_a, 'USDT', 'по цене', price_asks_g_POWRUSDT) 
				print('Пара_B:', symbol_g_POWRETH, '#', 'Продаем', quantity_pair_b, 'POWR', 'за', price_b, 'ETH', 'по цене', price_bids_g_POWRETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_POWRUSDT_POWRETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_POWRUSDT_POWRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_POWRUSDT != 0.0 and qty_bids_g_POWRUSDT != 0.0 and price_asks_g_POWRUSDT != 0.0 and qty_asks_g_POWRUSDT != 0.0 and price_bids_g_POWRBUSD != 0.0 and qty_bids_g_POWRBUSD != 0.0 and price_asks_g_POWRBUSD != 0.0 and qty_asks_g_POWRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_POWRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_POWRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_POWRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_POWRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_POWRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_POWRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_POWRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='POWRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='POWRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_POWRUSDT, '#', 'Покупаем', quantity_pair_a, 'POWR', 'за', price_a, 'USDT', 'по цене', price_asks_g_POWRUSDT) 
				print('Пара_B:', symbol_g_POWRBUSD, '#', 'Продаем', quantity_pair_b, 'POWR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_POWRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_POWRUSDT_POWRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_JASMYUSDT_JASMYBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_JASMYUSDT != 0.0 and qty_bids_g_JASMYUSDT != 0.0 and price_asks_g_JASMYUSDT != 0.0 and qty_asks_g_JASMYUSDT != 0.0 and price_bids_g_JASMYBUSD != 0.0 and qty_bids_g_JASMYBUSD != 0.0 and price_asks_g_JASMYBUSD != 0.0 and qty_asks_g_JASMYBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_JASMYBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_JASMYBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_JASMYBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_JASMYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_JASMYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_JASMYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_JASMYBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='JASMYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='JASMYBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_JASMYUSDT, '#', 'Покупаем', quantity_pair_a, 'JASMY', 'за', price_a, 'USDT', 'по цене', price_asks_g_JASMYUSDT) 
				print('Пара_B:', symbol_g_JASMYBUSD, '#', 'Продаем', quantity_pair_b, 'JASMY', 'за', price_b, 'BUSD', 'по цене', price_bids_g_JASMYBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_JASMYUSDT_JASMYBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_JASMYUSDT_JASMYBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_JASMYUSDT != 0.0 and qty_bids_g_JASMYUSDT != 0.0 and price_asks_g_JASMYUSDT != 0.0 and qty_asks_g_JASMYUSDT != 0.0 and price_bids_g_JASMYBNB != 0.0 and qty_bids_g_JASMYBNB != 0.0 and price_asks_g_JASMYBNB != 0.0 and qty_asks_g_JASMYBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_JASMYBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_JASMYBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_JASMYBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_JASMYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_JASMYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_JASMYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_JASMYBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='JASMYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='JASMYBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_JASMYUSDT, '#', 'Покупаем', quantity_pair_a, 'JASMY', 'за', price_a, 'USDT', 'по цене', price_asks_g_JASMYUSDT) 
				print('Пара_B:', symbol_g_JASMYBNB, '#', 'Продаем', quantity_pair_b, 'JASMY', 'за', price_b, 'BNB', 'по цене', price_bids_g_JASMYBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_JASMYUSDT_JASMYBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_JASMYUSDT_JASMYBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_JASMYUSDT != 0.0 and qty_bids_g_JASMYUSDT != 0.0 and price_asks_g_JASMYUSDT != 0.0 and qty_asks_g_JASMYUSDT != 0.0 and price_bids_g_JASMYBTC != 0.0 and qty_bids_g_JASMYBTC != 0.0 and price_asks_g_JASMYBTC != 0.0 and qty_asks_g_JASMYBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_JASMYBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_JASMYBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_JASMYBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_JASMYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_JASMYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_JASMYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_JASMYBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='JASMYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='JASMYBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_JASMYUSDT, '#', 'Покупаем', quantity_pair_a, 'JASMY', 'за', price_a, 'USDT', 'по цене', price_asks_g_JASMYUSDT) 
				print('Пара_B:', symbol_g_JASMYBTC, '#', 'Продаем', quantity_pair_b, 'JASMY', 'за', price_b, 'BTC', 'по цене', price_bids_g_JASMYBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_JASMYUSDT_JASMYBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_JASMYUSDT_JASMYETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_JASMYUSDT != 0.0 and qty_bids_g_JASMYUSDT != 0.0 and price_asks_g_JASMYUSDT != 0.0 and qty_asks_g_JASMYUSDT != 0.0 and price_bids_g_JASMYETH != 0.0 and qty_bids_g_JASMYETH != 0.0 and price_asks_g_JASMYETH != 0.0 and qty_asks_g_JASMYETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_JASMYETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_JASMYETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_JASMYETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_JASMYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_JASMYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_JASMYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_JASMYETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='JASMYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='JASMYETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_JASMYUSDT, '#', 'Покупаем', quantity_pair_a, 'JASMY', 'за', price_a, 'USDT', 'по цене', price_asks_g_JASMYUSDT) 
				print('Пара_B:', symbol_g_JASMYETH, '#', 'Продаем', quantity_pair_b, 'JASMY', 'за', price_b, 'ETH', 'по цене', price_bids_g_JASMYETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_JASMYUSDT_JASMYETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_JASMYUSDT_JASMYEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_JASMYUSDT != 0.0 and qty_bids_g_JASMYUSDT != 0.0 and price_asks_g_JASMYUSDT != 0.0 and qty_asks_g_JASMYUSDT != 0.0 and price_bids_g_JASMYEUR != 0.0 and qty_bids_g_JASMYEUR != 0.0 and price_asks_g_JASMYEUR != 0.0 and qty_asks_g_JASMYEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_JASMYEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_JASMYEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_JASMYEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_JASMYUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_JASMYUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_JASMYUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_JASMYEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='JASMYUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='JASMYEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_JASMYUSDT, '#', 'Покупаем', quantity_pair_a, 'JASMY', 'за', price_a, 'USDT', 'по цене', price_asks_g_JASMYUSDT) 
				print('Пара_B:', symbol_g_JASMYEUR, '#', 'Продаем', quantity_pair_b, 'JASMY', 'за', price_b, 'EUR', 'по цене', price_bids_g_JASMYEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_JASMYUSDT_JASMYEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_AMPUSDT_AMPBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AMPUSDT != 0.0 and qty_bids_g_AMPUSDT != 0.0 and price_asks_g_AMPUSDT != 0.0 and qty_asks_g_AMPUSDT != 0.0 and price_bids_g_AMPBTC != 0.0 and qty_bids_g_AMPBTC != 0.0 and price_asks_g_AMPBTC != 0.0 and qty_asks_g_AMPBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AMPBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AMPBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AMPBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AMPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AMPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AMPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AMPBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AMPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AMPBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AMPUSDT, '#', 'Покупаем', quantity_pair_a, 'AMP', 'за', price_a, 'USDT', 'по цене', price_asks_g_AMPUSDT) 
				print('Пара_B:', symbol_g_AMPBTC, '#', 'Продаем', quantity_pair_b, 'AMP', 'за', price_b, 'BTC', 'по цене', price_bids_g_AMPBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AMPUSDT_AMPBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_AMPUSDT_AMPBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_AMPUSDT != 0.0 and qty_bids_g_AMPUSDT != 0.0 and price_asks_g_AMPUSDT != 0.0 and qty_asks_g_AMPUSDT != 0.0 and price_bids_g_AMPBUSD != 0.0 and qty_bids_g_AMPBUSD != 0.0 and price_asks_g_AMPBUSD != 0.0 and qty_asks_g_AMPBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_AMPBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_AMPBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_AMPBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_AMPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_AMPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_AMPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_AMPBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='AMPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='AMPBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_AMPUSDT, '#', 'Покупаем', quantity_pair_a, 'AMP', 'за', price_a, 'USDT', 'по цене', price_asks_g_AMPUSDT) 
				print('Пара_B:', symbol_g_AMPBUSD, '#', 'Продаем', quantity_pair_b, 'AMP', 'за', price_b, 'BUSD', 'по цене', price_bids_g_AMPBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_AMPUSDT_AMPBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_PLAUSDT_PLABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PLAUSDT != 0.0 and qty_bids_g_PLAUSDT != 0.0 and price_asks_g_PLAUSDT != 0.0 and qty_asks_g_PLAUSDT != 0.0 and price_bids_g_PLABTC != 0.0 and qty_bids_g_PLABTC != 0.0 and price_asks_g_PLABTC != 0.0 and qty_asks_g_PLABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PLABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PLABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PLABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PLAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PLAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PLAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PLABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PLAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PLABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PLAUSDT, '#', 'Покупаем', quantity_pair_a, 'PLA', 'за', price_a, 'USDT', 'по цене', price_asks_g_PLAUSDT) 
				print('Пара_B:', symbol_g_PLABTC, '#', 'Продаем', quantity_pair_b, 'PLA', 'за', price_b, 'BTC', 'по цене', price_bids_g_PLABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PLAUSDT_PLABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_PLAUSDT_PLABNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PLAUSDT != 0.0 and qty_bids_g_PLAUSDT != 0.0 and price_asks_g_PLAUSDT != 0.0 and qty_asks_g_PLAUSDT != 0.0 and price_bids_g_PLABNB != 0.0 and qty_bids_g_PLABNB != 0.0 and price_asks_g_PLABNB != 0.0 and qty_asks_g_PLABNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PLABNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PLABNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PLABNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PLAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PLAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PLAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PLABNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PLAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PLABNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PLAUSDT, '#', 'Покупаем', quantity_pair_a, 'PLA', 'за', price_a, 'USDT', 'по цене', price_asks_g_PLAUSDT) 
				print('Пара_B:', symbol_g_PLABNB, '#', 'Продаем', quantity_pair_b, 'PLA', 'за', price_b, 'BNB', 'по цене', price_bids_g_PLABNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PLAUSDT_PLABNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_PLAUSDT_PLABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PLAUSDT != 0.0 and qty_bids_g_PLAUSDT != 0.0 and price_asks_g_PLAUSDT != 0.0 and qty_asks_g_PLAUSDT != 0.0 and price_bids_g_PLABUSD != 0.0 and qty_bids_g_PLABUSD != 0.0 and price_asks_g_PLABUSD != 0.0 and qty_asks_g_PLABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PLABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PLABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PLABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PLAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PLAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PLAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PLABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PLAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PLABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PLAUSDT, '#', 'Покупаем', quantity_pair_a, 'PLA', 'за', price_a, 'USDT', 'по цене', price_asks_g_PLAUSDT) 
				print('Пара_B:', symbol_g_PLABUSD, '#', 'Продаем', quantity_pair_b, 'PLA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_PLABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PLAUSDT_PLABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_PYRUSDT_PYRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PYRUSDT != 0.0 and qty_bids_g_PYRUSDT != 0.0 and price_asks_g_PYRUSDT != 0.0 and qty_asks_g_PYRUSDT != 0.0 and price_bids_g_PYRBTC != 0.0 and qty_bids_g_PYRBTC != 0.0 and price_asks_g_PYRBTC != 0.0 and qty_asks_g_PYRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PYRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PYRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PYRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PYRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PYRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PYRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PYRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PYRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PYRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PYRUSDT, '#', 'Покупаем', quantity_pair_a, 'PYR', 'за', price_a, 'USDT', 'по цене', price_asks_g_PYRUSDT) 
				print('Пара_B:', symbol_g_PYRBTC, '#', 'Продаем', quantity_pair_b, 'PYR', 'за', price_b, 'BTC', 'по цене', price_bids_g_PYRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PYRUSDT_PYRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_PYRUSDT_PYRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PYRUSDT != 0.0 and qty_bids_g_PYRUSDT != 0.0 and price_asks_g_PYRUSDT != 0.0 and qty_asks_g_PYRUSDT != 0.0 and price_bids_g_PYRBUSD != 0.0 and qty_bids_g_PYRBUSD != 0.0 and price_asks_g_PYRBUSD != 0.0 and qty_asks_g_PYRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PYRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PYRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PYRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PYRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PYRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PYRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PYRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PYRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PYRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PYRUSDT, '#', 'Покупаем', quantity_pair_a, 'PYR', 'за', price_a, 'USDT', 'по цене', price_asks_g_PYRUSDT) 
				print('Пара_B:', symbol_g_PYRBUSD, '#', 'Продаем', quantity_pair_b, 'PYR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_PYRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PYRUSDT_PYRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_RNDRUSDT_RNDRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RNDRUSDT != 0.0 and qty_bids_g_RNDRUSDT != 0.0 and price_asks_g_RNDRUSDT != 0.0 and qty_asks_g_RNDRUSDT != 0.0 and price_bids_g_RNDRBTC != 0.0 and qty_bids_g_RNDRBTC != 0.0 and price_asks_g_RNDRBTC != 0.0 and qty_asks_g_RNDRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RNDRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RNDRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RNDRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RNDRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RNDRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RNDRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RNDRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RNDRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RNDRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RNDRUSDT, '#', 'Покупаем', quantity_pair_a, 'RNDR', 'за', price_a, 'USDT', 'по цене', price_asks_g_RNDRUSDT) 
				print('Пара_B:', symbol_g_RNDRBTC, '#', 'Продаем', quantity_pair_b, 'RNDR', 'за', price_b, 'BTC', 'по цене', price_bids_g_RNDRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RNDRUSDT_RNDRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_RNDRUSDT_RNDRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RNDRUSDT != 0.0 and qty_bids_g_RNDRUSDT != 0.0 and price_asks_g_RNDRUSDT != 0.0 and qty_asks_g_RNDRUSDT != 0.0 and price_bids_g_RNDRBUSD != 0.0 and qty_bids_g_RNDRBUSD != 0.0 and price_asks_g_RNDRBUSD != 0.0 and qty_asks_g_RNDRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RNDRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RNDRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RNDRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RNDRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RNDRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RNDRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RNDRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RNDRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RNDRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RNDRUSDT, '#', 'Покупаем', quantity_pair_a, 'RNDR', 'за', price_a, 'USDT', 'по цене', price_asks_g_RNDRUSDT) 
				print('Пара_B:', symbol_g_RNDRBUSD, '#', 'Продаем', quantity_pair_b, 'RNDR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_RNDRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RNDRUSDT_RNDRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ALCXUSDT_ALCXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALCXUSDT != 0.0 and qty_bids_g_ALCXUSDT != 0.0 and price_asks_g_ALCXUSDT != 0.0 and qty_asks_g_ALCXUSDT != 0.0 and price_bids_g_ALCXBTC != 0.0 and qty_bids_g_ALCXBTC != 0.0 and price_asks_g_ALCXBTC != 0.0 and qty_asks_g_ALCXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALCXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALCXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALCXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALCXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALCXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALCXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALCXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALCXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALCXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALCXUSDT, '#', 'Покупаем', quantity_pair_a, 'ALCX', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALCXUSDT) 
				print('Пара_B:', symbol_g_ALCXBTC, '#', 'Продаем', quantity_pair_b, 'ALCX', 'за', price_b, 'BTC', 'по цене', price_bids_g_ALCXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALCXUSDT_ALCXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ALCXUSDT_ALCXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALCXUSDT != 0.0 and qty_bids_g_ALCXUSDT != 0.0 and price_asks_g_ALCXUSDT != 0.0 and qty_asks_g_ALCXUSDT != 0.0 and price_bids_g_ALCXBUSD != 0.0 and qty_bids_g_ALCXBUSD != 0.0 and price_asks_g_ALCXBUSD != 0.0 and qty_asks_g_ALCXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALCXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALCXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALCXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALCXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALCXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALCXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALCXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALCXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALCXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALCXUSDT, '#', 'Покупаем', quantity_pair_a, 'ALCX', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALCXUSDT) 
				print('Пара_B:', symbol_g_ALCXBUSD, '#', 'Продаем', quantity_pair_b, 'ALCX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ALCXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALCXUSDT_ALCXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SANTOSUSDT_SANTOSBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SANTOSUSDT != 0.0 and qty_bids_g_SANTOSUSDT != 0.0 and price_asks_g_SANTOSUSDT != 0.0 and qty_asks_g_SANTOSUSDT != 0.0 and price_bids_g_SANTOSBTC != 0.0 and qty_bids_g_SANTOSBTC != 0.0 and price_asks_g_SANTOSBTC != 0.0 and qty_asks_g_SANTOSBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SANTOSBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SANTOSBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SANTOSBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SANTOSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SANTOSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SANTOSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SANTOSBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SANTOSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SANTOSBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SANTOSUSDT, '#', 'Покупаем', quantity_pair_a, 'SANTOS', 'за', price_a, 'USDT', 'по цене', price_asks_g_SANTOSUSDT) 
				print('Пара_B:', symbol_g_SANTOSBTC, '#', 'Продаем', quantity_pair_b, 'SANTOS', 'за', price_b, 'BTC', 'по цене', price_bids_g_SANTOSBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SANTOSUSDT_SANTOSBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_SANTOSUSDT_SANTOSBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SANTOSUSDT != 0.0 and qty_bids_g_SANTOSUSDT != 0.0 and price_asks_g_SANTOSUSDT != 0.0 and qty_asks_g_SANTOSUSDT != 0.0 and price_bids_g_SANTOSBUSD != 0.0 and qty_bids_g_SANTOSBUSD != 0.0 and price_asks_g_SANTOSBUSD != 0.0 and qty_asks_g_SANTOSBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SANTOSBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SANTOSBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SANTOSBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SANTOSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SANTOSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SANTOSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SANTOSBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SANTOSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SANTOSBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SANTOSUSDT, '#', 'Покупаем', quantity_pair_a, 'SANTOS', 'за', price_a, 'USDT', 'по цене', price_asks_g_SANTOSUSDT) 
				print('Пара_B:', symbol_g_SANTOSBUSD, '#', 'Продаем', quantity_pair_b, 'SANTOS', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SANTOSBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SANTOSUSDT_SANTOSBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_MCUSDT_MCBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MCUSDT != 0.0 and qty_bids_g_MCUSDT != 0.0 and price_asks_g_MCUSDT != 0.0 and qty_asks_g_MCUSDT != 0.0 and price_bids_g_MCBTC != 0.0 and qty_bids_g_MCBTC != 0.0 and price_asks_g_MCBTC != 0.0 and qty_asks_g_MCBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MCBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MCBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MCBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MCBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MCBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MCUSDT, '#', 'Покупаем', quantity_pair_a, 'MC', 'за', price_a, 'USDT', 'по цене', price_asks_g_MCUSDT) 
				print('Пара_B:', symbol_g_MCBTC, '#', 'Продаем', quantity_pair_b, 'MC', 'за', price_b, 'BTC', 'по цене', price_bids_g_MCBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MCUSDT_MCBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MCUSDT_MCBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MCUSDT != 0.0 and qty_bids_g_MCUSDT != 0.0 and price_asks_g_MCUSDT != 0.0 and qty_asks_g_MCUSDT != 0.0 and price_bids_g_MCBUSD != 0.0 and qty_bids_g_MCBUSD != 0.0 and price_asks_g_MCBUSD != 0.0 and qty_asks_g_MCBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MCBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MCBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MCBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MCBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MCBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MCUSDT, '#', 'Покупаем', quantity_pair_a, 'MC', 'за', price_a, 'USDT', 'по цене', price_asks_g_MCUSDT) 
				print('Пара_B:', symbol_g_MCBUSD, '#', 'Продаем', quantity_pair_b, 'MC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MCBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MCUSDT_MCBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_MCUSDT_MCBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MCUSDT != 0.0 and qty_bids_g_MCUSDT != 0.0 and price_asks_g_MCUSDT != 0.0 and qty_asks_g_MCUSDT != 0.0 and price_bids_g_MCBNB != 0.0 and qty_bids_g_MCBNB != 0.0 and price_asks_g_MCBNB != 0.0 and qty_asks_g_MCBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MCBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MCBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MCBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MCBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MCBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MCUSDT, '#', 'Покупаем', quantity_pair_a, 'MC', 'за', price_a, 'USDT', 'по цене', price_asks_g_MCUSDT) 
				print('Пара_B:', symbol_g_MCBNB, '#', 'Продаем', quantity_pair_b, 'MC', 'за', price_b, 'BNB', 'по цене', price_bids_g_MCBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MCUSDT_MCBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_BICOUSDT_BICOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BICOUSDT != 0.0 and qty_bids_g_BICOUSDT != 0.0 and price_asks_g_BICOUSDT != 0.0 and qty_asks_g_BICOUSDT != 0.0 and price_bids_g_BICOBTC != 0.0 and qty_bids_g_BICOBTC != 0.0 and price_asks_g_BICOBTC != 0.0 and qty_asks_g_BICOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BICOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BICOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BICOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BICOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BICOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BICOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BICOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BICOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BICOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BICOUSDT, '#', 'Покупаем', quantity_pair_a, 'BICO', 'за', price_a, 'USDT', 'по цене', price_asks_g_BICOUSDT) 
				print('Пара_B:', symbol_g_BICOBTC, '#', 'Продаем', quantity_pair_b, 'BICO', 'за', price_b, 'BTC', 'по цене', price_bids_g_BICOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BICOUSDT_BICOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_BICOUSDT_BICOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BICOUSDT != 0.0 and qty_bids_g_BICOUSDT != 0.0 and price_asks_g_BICOUSDT != 0.0 and qty_asks_g_BICOUSDT != 0.0 and price_bids_g_BICOBUSD != 0.0 and qty_bids_g_BICOBUSD != 0.0 and price_asks_g_BICOBUSD != 0.0 and qty_asks_g_BICOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BICOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BICOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BICOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BICOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BICOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BICOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BICOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BICOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BICOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BICOUSDT, '#', 'Покупаем', quantity_pair_a, 'BICO', 'за', price_a, 'USDT', 'по цене', price_asks_g_BICOUSDT) 
				print('Пара_B:', symbol_g_BICOBUSD, '#', 'Продаем', quantity_pair_b, 'BICO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BICOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BICOUSDT_BICOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FLUXUSDT_FLUXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FLUXUSDT != 0.0 and qty_bids_g_FLUXUSDT != 0.0 and price_asks_g_FLUXUSDT != 0.0 and qty_asks_g_FLUXUSDT != 0.0 and price_bids_g_FLUXBTC != 0.0 and qty_bids_g_FLUXBTC != 0.0 and price_asks_g_FLUXBTC != 0.0 and qty_asks_g_FLUXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FLUXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FLUXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FLUXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FLUXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FLUXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FLUXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FLUXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FLUXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FLUXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FLUXUSDT, '#', 'Покупаем', quantity_pair_a, 'FLUX', 'за', price_a, 'USDT', 'по цене', price_asks_g_FLUXUSDT) 
				print('Пара_B:', symbol_g_FLUXBTC, '#', 'Продаем', quantity_pair_b, 'FLUX', 'за', price_b, 'BTC', 'по цене', price_bids_g_FLUXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FLUXUSDT_FLUXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_FLUXUSDT_FLUXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FLUXUSDT != 0.0 and qty_bids_g_FLUXUSDT != 0.0 and price_asks_g_FLUXUSDT != 0.0 and qty_asks_g_FLUXUSDT != 0.0 and price_bids_g_FLUXBUSD != 0.0 and qty_bids_g_FLUXBUSD != 0.0 and price_asks_g_FLUXBUSD != 0.0 and qty_asks_g_FLUXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FLUXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FLUXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FLUXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FLUXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FLUXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FLUXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FLUXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FLUXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FLUXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FLUXUSDT, '#', 'Покупаем', quantity_pair_a, 'FLUX', 'за', price_a, 'USDT', 'по цене', price_asks_g_FLUXUSDT) 
				print('Пара_B:', symbol_g_FLUXBUSD, '#', 'Продаем', quantity_pair_b, 'FLUX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FLUXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FLUXUSDT_FLUXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_FXSUSDT_FXSBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FXSUSDT != 0.0 and qty_bids_g_FXSUSDT != 0.0 and price_asks_g_FXSUSDT != 0.0 and qty_asks_g_FXSUSDT != 0.0 and price_bids_g_FXSBTC != 0.0 and qty_bids_g_FXSBTC != 0.0 and price_asks_g_FXSBTC != 0.0 and qty_asks_g_FXSBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FXSBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FXSBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FXSBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FXSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FXSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FXSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FXSBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FXSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FXSBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FXSUSDT, '#', 'Покупаем', quantity_pair_a, 'FXS', 'за', price_a, 'USDT', 'по цене', price_asks_g_FXSUSDT) 
				print('Пара_B:', symbol_g_FXSBTC, '#', 'Продаем', quantity_pair_b, 'FXS', 'за', price_b, 'BTC', 'по цене', price_bids_g_FXSBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FXSUSDT_FXSBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_FXSUSDT_FXSBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_FXSUSDT != 0.0 and qty_bids_g_FXSUSDT != 0.0 and price_asks_g_FXSUSDT != 0.0 and qty_asks_g_FXSUSDT != 0.0 and price_bids_g_FXSBUSD != 0.0 and qty_bids_g_FXSBUSD != 0.0 and price_asks_g_FXSBUSD != 0.0 and qty_asks_g_FXSBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_FXSBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_FXSBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_FXSBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_FXSUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_FXSUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_FXSUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_FXSBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='FXSUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='FXSBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_FXSUSDT, '#', 'Покупаем', quantity_pair_a, 'FXS', 'за', price_a, 'USDT', 'по цене', price_asks_g_FXSUSDT) 
				print('Пара_B:', symbol_g_FXSBUSD, '#', 'Продаем', quantity_pair_b, 'FXS', 'за', price_b, 'BUSD', 'по цене', price_bids_g_FXSBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_FXSUSDT_FXSBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_VOXELUSDT_VOXELBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_VOXELUSDT != 0.0 and qty_bids_g_VOXELUSDT != 0.0 and price_asks_g_VOXELUSDT != 0.0 and qty_asks_g_VOXELUSDT != 0.0 and price_bids_g_VOXELBTC != 0.0 and qty_bids_g_VOXELBTC != 0.0 and price_asks_g_VOXELBTC != 0.0 and qty_asks_g_VOXELBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_VOXELBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_VOXELBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_VOXELBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_VOXELUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_VOXELUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_VOXELUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_VOXELBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='VOXELUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='VOXELBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_VOXELUSDT, '#', 'Покупаем', quantity_pair_a, 'VOXEL', 'за', price_a, 'USDT', 'по цене', price_asks_g_VOXELUSDT) 
				print('Пара_B:', symbol_g_VOXELBTC, '#', 'Продаем', quantity_pair_b, 'VOXEL', 'за', price_b, 'BTC', 'по цене', price_bids_g_VOXELBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_VOXELUSDT_VOXELBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_VOXELUSDT_VOXELBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_VOXELUSDT != 0.0 and qty_bids_g_VOXELUSDT != 0.0 and price_asks_g_VOXELUSDT != 0.0 and qty_asks_g_VOXELUSDT != 0.0 and price_bids_g_VOXELBNB != 0.0 and qty_bids_g_VOXELBNB != 0.0 and price_asks_g_VOXELBNB != 0.0 and qty_asks_g_VOXELBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_VOXELBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_VOXELBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_VOXELBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_VOXELUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_VOXELUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_VOXELUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_VOXELBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='VOXELUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='VOXELBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_VOXELUSDT, '#', 'Покупаем', quantity_pair_a, 'VOXEL', 'за', price_a, 'USDT', 'по цене', price_asks_g_VOXELUSDT) 
				print('Пара_B:', symbol_g_VOXELBNB, '#', 'Продаем', quantity_pair_b, 'VOXEL', 'за', price_b, 'BNB', 'по цене', price_bids_g_VOXELBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_VOXELUSDT_VOXELBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_VOXELUSDT_VOXELBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_VOXELUSDT != 0.0 and qty_bids_g_VOXELUSDT != 0.0 and price_asks_g_VOXELUSDT != 0.0 and qty_asks_g_VOXELUSDT != 0.0 and price_bids_g_VOXELBUSD != 0.0 and qty_bids_g_VOXELBUSD != 0.0 and price_asks_g_VOXELBUSD != 0.0 and qty_asks_g_VOXELBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_VOXELBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_VOXELBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_VOXELBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_VOXELUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_VOXELUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_VOXELUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_VOXELBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='VOXELUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='VOXELBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_VOXELUSDT, '#', 'Покупаем', quantity_pair_a, 'VOXEL', 'за', price_a, 'USDT', 'по цене', price_asks_g_VOXELUSDT) 
				print('Пара_B:', symbol_g_VOXELBUSD, '#', 'Продаем', quantity_pair_b, 'VOXEL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_VOXELBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_VOXELUSDT_VOXELBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_HIGHUSDT_HIGHBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HIGHUSDT != 0.0 and qty_bids_g_HIGHUSDT != 0.0 and price_asks_g_HIGHUSDT != 0.0 and qty_asks_g_HIGHUSDT != 0.0 and price_bids_g_HIGHBTC != 0.0 and qty_bids_g_HIGHBTC != 0.0 and price_asks_g_HIGHBTC != 0.0 and qty_asks_g_HIGHBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HIGHBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HIGHBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HIGHBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HIGHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HIGHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HIGHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HIGHBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HIGHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HIGHBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HIGHUSDT, '#', 'Покупаем', quantity_pair_a, 'HIGH', 'за', price_a, 'USDT', 'по цене', price_asks_g_HIGHUSDT) 
				print('Пара_B:', symbol_g_HIGHBTC, '#', 'Продаем', quantity_pair_b, 'HIGH', 'за', price_b, 'BTC', 'по цене', price_bids_g_HIGHBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HIGHUSDT_HIGHBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_HIGHUSDT_HIGHBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HIGHUSDT != 0.0 and qty_bids_g_HIGHUSDT != 0.0 and price_asks_g_HIGHUSDT != 0.0 and qty_asks_g_HIGHUSDT != 0.0 and price_bids_g_HIGHBUSD != 0.0 and qty_bids_g_HIGHBUSD != 0.0 and price_asks_g_HIGHBUSD != 0.0 and qty_asks_g_HIGHBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HIGHBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HIGHBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HIGHBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HIGHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HIGHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HIGHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HIGHBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HIGHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HIGHBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HIGHUSDT, '#', 'Покупаем', quantity_pair_a, 'HIGH', 'за', price_a, 'USDT', 'по цене', price_asks_g_HIGHUSDT) 
				print('Пара_B:', symbol_g_HIGHBUSD, '#', 'Продаем', quantity_pair_b, 'HIGH', 'за', price_b, 'BUSD', 'по цене', price_bids_g_HIGHBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HIGHUSDT_HIGHBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_HIGHUSDT_HIGHBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HIGHUSDT != 0.0 and qty_bids_g_HIGHUSDT != 0.0 and price_asks_g_HIGHUSDT != 0.0 and qty_asks_g_HIGHUSDT != 0.0 and price_bids_g_HIGHBNB != 0.0 and qty_bids_g_HIGHBNB != 0.0 and price_asks_g_HIGHBNB != 0.0 and qty_asks_g_HIGHBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HIGHBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HIGHBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HIGHBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HIGHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HIGHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HIGHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HIGHBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HIGHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HIGHBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HIGHUSDT, '#', 'Покупаем', quantity_pair_a, 'HIGH', 'за', price_a, 'USDT', 'по цене', price_asks_g_HIGHUSDT) 
				print('Пара_B:', symbol_g_HIGHBNB, '#', 'Продаем', quantity_pair_b, 'HIGH', 'за', price_b, 'BNB', 'по цене', price_bids_g_HIGHBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HIGHUSDT_HIGHBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_CVXUSDT_CVXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CVXUSDT != 0.0 and qty_bids_g_CVXUSDT != 0.0 and price_asks_g_CVXUSDT != 0.0 and qty_asks_g_CVXUSDT != 0.0 and price_bids_g_CVXBTC != 0.0 and qty_bids_g_CVXBTC != 0.0 and price_asks_g_CVXBTC != 0.0 and qty_asks_g_CVXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CVXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CVXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CVXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CVXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CVXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CVXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CVXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CVXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CVXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CVXUSDT, '#', 'Покупаем', quantity_pair_a, 'CVX', 'за', price_a, 'USDT', 'по цене', price_asks_g_CVXUSDT) 
				print('Пара_B:', symbol_g_CVXBTC, '#', 'Продаем', quantity_pair_b, 'CVX', 'за', price_b, 'BTC', 'по цене', price_bids_g_CVXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CVXUSDT_CVXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_CVXUSDT_CVXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_CVXUSDT != 0.0 and qty_bids_g_CVXUSDT != 0.0 and price_asks_g_CVXUSDT != 0.0 and qty_asks_g_CVXUSDT != 0.0 and price_bids_g_CVXBUSD != 0.0 and qty_bids_g_CVXBUSD != 0.0 and price_asks_g_CVXBUSD != 0.0 and qty_asks_g_CVXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_CVXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_CVXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_CVXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_CVXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_CVXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_CVXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_CVXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='CVXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='CVXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_CVXUSDT, '#', 'Покупаем', quantity_pair_a, 'CVX', 'за', price_a, 'USDT', 'по цене', price_asks_g_CVXUSDT) 
				print('Пара_B:', symbol_g_CVXBUSD, '#', 'Продаем', quantity_pair_b, 'CVX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_CVXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_CVXUSDT_CVXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_PEOPLEUSDT_PEOPLEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PEOPLEUSDT != 0.0 and qty_bids_g_PEOPLEUSDT != 0.0 and price_asks_g_PEOPLEUSDT != 0.0 and qty_asks_g_PEOPLEUSDT != 0.0 and price_bids_g_PEOPLEBTC != 0.0 and qty_bids_g_PEOPLEBTC != 0.0 and price_asks_g_PEOPLEBTC != 0.0 and qty_asks_g_PEOPLEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PEOPLEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PEOPLEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PEOPLEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PEOPLEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PEOPLEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PEOPLEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PEOPLEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PEOPLEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PEOPLEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PEOPLEUSDT, '#', 'Покупаем', quantity_pair_a, 'PEOPLE', 'за', price_a, 'USDT', 'по цене', price_asks_g_PEOPLEUSDT) 
				print('Пара_B:', symbol_g_PEOPLEBTC, '#', 'Продаем', quantity_pair_b, 'PEOPLE', 'за', price_b, 'BTC', 'по цене', price_bids_g_PEOPLEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PEOPLEUSDT_PEOPLEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_PEOPLEUSDT_PEOPLEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PEOPLEUSDT != 0.0 and qty_bids_g_PEOPLEUSDT != 0.0 and price_asks_g_PEOPLEUSDT != 0.0 and qty_asks_g_PEOPLEUSDT != 0.0 and price_bids_g_PEOPLEBUSD != 0.0 and qty_bids_g_PEOPLEBUSD != 0.0 and price_asks_g_PEOPLEBUSD != 0.0 and qty_asks_g_PEOPLEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PEOPLEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PEOPLEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PEOPLEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PEOPLEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PEOPLEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PEOPLEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PEOPLEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PEOPLEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PEOPLEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PEOPLEUSDT, '#', 'Покупаем', quantity_pair_a, 'PEOPLE', 'за', price_a, 'USDT', 'по цене', price_asks_g_PEOPLEUSDT) 
				print('Пара_B:', symbol_g_PEOPLEBUSD, '#', 'Продаем', quantity_pair_b, 'PEOPLE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_PEOPLEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PEOPLEUSDT_PEOPLEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_PEOPLEUSDT_PEOPLEBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PEOPLEUSDT != 0.0 and qty_bids_g_PEOPLEUSDT != 0.0 and price_asks_g_PEOPLEUSDT != 0.0 and qty_asks_g_PEOPLEUSDT != 0.0 and price_bids_g_PEOPLEBNB != 0.0 and qty_bids_g_PEOPLEBNB != 0.0 and price_asks_g_PEOPLEBNB != 0.0 and qty_asks_g_PEOPLEBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PEOPLEBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PEOPLEBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PEOPLEBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PEOPLEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PEOPLEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PEOPLEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PEOPLEBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PEOPLEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PEOPLEBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PEOPLEUSDT, '#', 'Покупаем', quantity_pair_a, 'PEOPLE', 'за', price_a, 'USDT', 'по цене', price_asks_g_PEOPLEUSDT) 
				print('Пара_B:', symbol_g_PEOPLEBNB, '#', 'Продаем', quantity_pair_b, 'PEOPLE', 'за', price_b, 'BNB', 'по цене', price_bids_g_PEOPLEBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PEOPLEUSDT_PEOPLEBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_PEOPLEUSDT_PEOPLEETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PEOPLEUSDT != 0.0 and qty_bids_g_PEOPLEUSDT != 0.0 and price_asks_g_PEOPLEUSDT != 0.0 and qty_asks_g_PEOPLEUSDT != 0.0 and price_bids_g_PEOPLEETH != 0.0 and qty_bids_g_PEOPLEETH != 0.0 and price_asks_g_PEOPLEETH != 0.0 and qty_asks_g_PEOPLEETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PEOPLEETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PEOPLEETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PEOPLEETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PEOPLEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PEOPLEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PEOPLEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PEOPLEETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PEOPLEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PEOPLEETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PEOPLEUSDT, '#', 'Покупаем', quantity_pair_a, 'PEOPLE', 'за', price_a, 'USDT', 'по цене', price_asks_g_PEOPLEUSDT) 
				print('Пара_B:', symbol_g_PEOPLEETH, '#', 'Продаем', quantity_pair_b, 'PEOPLE', 'за', price_b, 'ETH', 'по цене', price_bids_g_PEOPLEETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PEOPLEUSDT_PEOPLEETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_OOKIUSDT_OOKIBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OOKIUSDT != 0.0 and qty_bids_g_OOKIUSDT != 0.0 and price_asks_g_OOKIUSDT != 0.0 and qty_asks_g_OOKIUSDT != 0.0 and price_bids_g_OOKIBUSD != 0.0 and qty_bids_g_OOKIBUSD != 0.0 and price_asks_g_OOKIBUSD != 0.0 and qty_asks_g_OOKIBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OOKIBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OOKIBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OOKIBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OOKIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OOKIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OOKIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OOKIBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OOKIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OOKIBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OOKIUSDT, '#', 'Покупаем', quantity_pair_a, 'OOKI', 'за', price_a, 'USDT', 'по цене', price_asks_g_OOKIUSDT) 
				print('Пара_B:', symbol_g_OOKIBUSD, '#', 'Продаем', quantity_pair_b, 'OOKI', 'за', price_b, 'BUSD', 'по цене', price_bids_g_OOKIBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OOKIUSDT_OOKIBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_OOKIUSDT_OOKIETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OOKIUSDT != 0.0 and qty_bids_g_OOKIUSDT != 0.0 and price_asks_g_OOKIUSDT != 0.0 and qty_asks_g_OOKIUSDT != 0.0 and price_bids_g_OOKIETH != 0.0 and qty_bids_g_OOKIETH != 0.0 and price_asks_g_OOKIETH != 0.0 and qty_asks_g_OOKIETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OOKIETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OOKIETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OOKIETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OOKIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OOKIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OOKIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OOKIETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OOKIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OOKIETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OOKIUSDT, '#', 'Покупаем', quantity_pair_a, 'OOKI', 'за', price_a, 'USDT', 'по цене', price_asks_g_OOKIUSDT) 
				print('Пара_B:', symbol_g_OOKIETH, '#', 'Продаем', quantity_pair_b, 'OOKI', 'за', price_b, 'ETH', 'по цене', price_bids_g_OOKIETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OOKIUSDT_OOKIETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_SPELLUSDT_SPELLBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SPELLUSDT != 0.0 and qty_bids_g_SPELLUSDT != 0.0 and price_asks_g_SPELLUSDT != 0.0 and qty_asks_g_SPELLUSDT != 0.0 and price_bids_g_SPELLBUSD != 0.0 and qty_bids_g_SPELLBUSD != 0.0 and price_asks_g_SPELLBUSD != 0.0 and qty_asks_g_SPELLBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SPELLBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SPELLBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SPELLBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SPELLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SPELLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SPELLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SPELLBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SPELLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SPELLBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SPELLUSDT, '#', 'Покупаем', quantity_pair_a, 'SPELL', 'за', price_a, 'USDT', 'по цене', price_asks_g_SPELLUSDT) 
				print('Пара_B:', symbol_g_SPELLBUSD, '#', 'Продаем', quantity_pair_b, 'SPELL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SPELLBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SPELLUSDT_SPELLBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_JOEUSDT_JOEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_JOEUSDT != 0.0 and qty_bids_g_JOEUSDT != 0.0 and price_asks_g_JOEUSDT != 0.0 and qty_asks_g_JOEUSDT != 0.0 and price_bids_g_JOEBTC != 0.0 and qty_bids_g_JOEBTC != 0.0 and price_asks_g_JOEBTC != 0.0 and qty_asks_g_JOEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_JOEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_JOEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_JOEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_JOEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_JOEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_JOEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_JOEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='JOEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='JOEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_JOEUSDT, '#', 'Покупаем', quantity_pair_a, 'JOE', 'за', price_a, 'USDT', 'по цене', price_asks_g_JOEUSDT) 
				print('Пара_B:', symbol_g_JOEBTC, '#', 'Продаем', quantity_pair_b, 'JOE', 'за', price_b, 'BTC', 'по цене', price_bids_g_JOEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_JOEUSDT_JOEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_JOEUSDT_JOEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_JOEUSDT != 0.0 and qty_bids_g_JOEUSDT != 0.0 and price_asks_g_JOEUSDT != 0.0 and qty_asks_g_JOEUSDT != 0.0 and price_bids_g_JOEBUSD != 0.0 and qty_bids_g_JOEBUSD != 0.0 and price_asks_g_JOEBUSD != 0.0 and qty_asks_g_JOEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_JOEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_JOEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_JOEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_JOEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_JOEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_JOEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_JOEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='JOEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='JOEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_JOEUSDT, '#', 'Покупаем', quantity_pair_a, 'JOE', 'за', price_a, 'USDT', 'по цене', price_asks_g_JOEUSDT) 
				print('Пара_B:', symbol_g_JOEBUSD, '#', 'Продаем', quantity_pair_b, 'JOE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_JOEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_JOEUSDT_JOEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ACHUSDT_ACHBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ACHUSDT != 0.0 and qty_bids_g_ACHUSDT != 0.0 and price_asks_g_ACHUSDT != 0.0 and qty_asks_g_ACHUSDT != 0.0 and price_bids_g_ACHBTC != 0.0 and qty_bids_g_ACHBTC != 0.0 and price_asks_g_ACHBTC != 0.0 and qty_asks_g_ACHBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ACHBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ACHBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ACHBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ACHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ACHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ACHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ACHBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ACHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ACHBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ACHUSDT, '#', 'Покупаем', quantity_pair_a, 'ACH', 'за', price_a, 'USDT', 'по цене', price_asks_g_ACHUSDT) 
				print('Пара_B:', symbol_g_ACHBTC, '#', 'Продаем', quantity_pair_b, 'ACH', 'за', price_b, 'BTC', 'по цене', price_bids_g_ACHBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ACHUSDT_ACHBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ACHUSDT_ACHBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ACHUSDT != 0.0 and qty_bids_g_ACHUSDT != 0.0 and price_asks_g_ACHUSDT != 0.0 and qty_asks_g_ACHUSDT != 0.0 and price_bids_g_ACHBUSD != 0.0 and qty_bids_g_ACHBUSD != 0.0 and price_asks_g_ACHBUSD != 0.0 and qty_asks_g_ACHBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ACHBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ACHBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ACHBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ACHUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ACHUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ACHUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ACHBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ACHUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ACHBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ACHUSDT, '#', 'Покупаем', quantity_pair_a, 'ACH', 'за', price_a, 'USDT', 'по цене', price_asks_g_ACHUSDT) 
				print('Пара_B:', symbol_g_ACHBUSD, '#', 'Продаем', quantity_pair_b, 'ACH', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ACHBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ACHUSDT_ACHBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_IMXUSDT_IMXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IMXUSDT != 0.0 and qty_bids_g_IMXUSDT != 0.0 and price_asks_g_IMXUSDT != 0.0 and qty_asks_g_IMXUSDT != 0.0 and price_bids_g_IMXBTC != 0.0 and qty_bids_g_IMXBTC != 0.0 and price_asks_g_IMXBTC != 0.0 and qty_asks_g_IMXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IMXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IMXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IMXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IMXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IMXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IMXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IMXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IMXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IMXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IMXUSDT, '#', 'Покупаем', quantity_pair_a, 'IMX', 'за', price_a, 'USDT', 'по цене', price_asks_g_IMXUSDT) 
				print('Пара_B:', symbol_g_IMXBTC, '#', 'Продаем', quantity_pair_b, 'IMX', 'за', price_b, 'BTC', 'по цене', price_bids_g_IMXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IMXUSDT_IMXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_IMXUSDT_IMXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IMXUSDT != 0.0 and qty_bids_g_IMXUSDT != 0.0 and price_asks_g_IMXUSDT != 0.0 and qty_asks_g_IMXUSDT != 0.0 and price_bids_g_IMXBUSD != 0.0 and qty_bids_g_IMXBUSD != 0.0 and price_asks_g_IMXBUSD != 0.0 and qty_asks_g_IMXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IMXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IMXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IMXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IMXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IMXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IMXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IMXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IMXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IMXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IMXUSDT, '#', 'Покупаем', quantity_pair_a, 'IMX', 'за', price_a, 'USDT', 'по цене', price_asks_g_IMXUSDT) 
				print('Пара_B:', symbol_g_IMXBUSD, '#', 'Продаем', quantity_pair_b, 'IMX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_IMXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IMXUSDT_IMXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_IMXUSDT_IMXBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_IMXUSDT != 0.0 and qty_bids_g_IMXUSDT != 0.0 and price_asks_g_IMXUSDT != 0.0 and qty_asks_g_IMXUSDT != 0.0 and price_bids_g_IMXBNB != 0.0 and qty_bids_g_IMXBNB != 0.0 and price_asks_g_IMXBNB != 0.0 and qty_asks_g_IMXBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_IMXBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_IMXBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_IMXBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_IMXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_IMXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_IMXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_IMXBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='IMXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='IMXBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_IMXUSDT, '#', 'Покупаем', quantity_pair_a, 'IMX', 'за', price_a, 'USDT', 'по цене', price_asks_g_IMXUSDT) 
				print('Пара_B:', symbol_g_IMXBNB, '#', 'Продаем', quantity_pair_b, 'IMX', 'за', price_b, 'BNB', 'по цене', price_bids_g_IMXBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_IMXUSDT_IMXBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_GLMRUSDT_GLMRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GLMRUSDT != 0.0 and qty_bids_g_GLMRUSDT != 0.0 and price_asks_g_GLMRUSDT != 0.0 and qty_asks_g_GLMRUSDT != 0.0 and price_bids_g_GLMRBTC != 0.0 and qty_bids_g_GLMRBTC != 0.0 and price_asks_g_GLMRBTC != 0.0 and qty_asks_g_GLMRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GLMRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GLMRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GLMRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GLMRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GLMRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GLMRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GLMRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GLMRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GLMRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GLMRUSDT, '#', 'Покупаем', quantity_pair_a, 'GLMR', 'за', price_a, 'USDT', 'по цене', price_asks_g_GLMRUSDT) 
				print('Пара_B:', symbol_g_GLMRBTC, '#', 'Продаем', quantity_pair_b, 'GLMR', 'за', price_b, 'BTC', 'по цене', price_bids_g_GLMRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GLMRUSDT_GLMRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_GLMRUSDT_GLMRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GLMRUSDT != 0.0 and qty_bids_g_GLMRUSDT != 0.0 and price_asks_g_GLMRUSDT != 0.0 and qty_asks_g_GLMRUSDT != 0.0 and price_bids_g_GLMRBUSD != 0.0 and qty_bids_g_GLMRBUSD != 0.0 and price_asks_g_GLMRBUSD != 0.0 and qty_asks_g_GLMRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GLMRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GLMRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GLMRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GLMRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GLMRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GLMRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GLMRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GLMRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GLMRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GLMRUSDT, '#', 'Покупаем', quantity_pair_a, 'GLMR', 'за', price_a, 'USDT', 'по цене', price_asks_g_GLMRUSDT) 
				print('Пара_B:', symbol_g_GLMRBUSD, '#', 'Продаем', quantity_pair_b, 'GLMR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_GLMRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GLMRUSDT_GLMRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_GLMRUSDT_GLMRBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GLMRUSDT != 0.0 and qty_bids_g_GLMRUSDT != 0.0 and price_asks_g_GLMRUSDT != 0.0 and qty_asks_g_GLMRUSDT != 0.0 and price_bids_g_GLMRBNB != 0.0 and qty_bids_g_GLMRBNB != 0.0 and price_asks_g_GLMRBNB != 0.0 and qty_asks_g_GLMRBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GLMRBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GLMRBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GLMRBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GLMRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GLMRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GLMRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GLMRBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GLMRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GLMRBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GLMRUSDT, '#', 'Покупаем', quantity_pair_a, 'GLMR', 'за', price_a, 'USDT', 'по цене', price_asks_g_GLMRUSDT) 
				print('Пара_B:', symbol_g_GLMRBNB, '#', 'Продаем', quantity_pair_b, 'GLMR', 'за', price_b, 'BNB', 'по цене', price_bids_g_GLMRBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GLMRUSDT_GLMRBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_LOKAUSDT_LOKABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LOKAUSDT != 0.0 and qty_bids_g_LOKAUSDT != 0.0 and price_asks_g_LOKAUSDT != 0.0 and qty_asks_g_LOKAUSDT != 0.0 and price_bids_g_LOKABTC != 0.0 and qty_bids_g_LOKABTC != 0.0 and price_asks_g_LOKABTC != 0.0 and qty_asks_g_LOKABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LOKABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LOKABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LOKABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LOKAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LOKAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LOKAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LOKABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LOKAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LOKABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LOKAUSDT, '#', 'Покупаем', quantity_pair_a, 'LOKA', 'за', price_a, 'USDT', 'по цене', price_asks_g_LOKAUSDT) 
				print('Пара_B:', symbol_g_LOKABTC, '#', 'Продаем', quantity_pair_b, 'LOKA', 'за', price_b, 'BTC', 'по цене', price_bids_g_LOKABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LOKAUSDT_LOKABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_LOKAUSDT_LOKABNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LOKAUSDT != 0.0 and qty_bids_g_LOKAUSDT != 0.0 and price_asks_g_LOKAUSDT != 0.0 and qty_asks_g_LOKAUSDT != 0.0 and price_bids_g_LOKABNB != 0.0 and qty_bids_g_LOKABNB != 0.0 and price_asks_g_LOKABNB != 0.0 and qty_asks_g_LOKABNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LOKABNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LOKABNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LOKABNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LOKAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LOKAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LOKAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LOKABNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LOKAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LOKABNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LOKAUSDT, '#', 'Покупаем', quantity_pair_a, 'LOKA', 'за', price_a, 'USDT', 'по цене', price_asks_g_LOKAUSDT) 
				print('Пара_B:', symbol_g_LOKABNB, '#', 'Продаем', quantity_pair_b, 'LOKA', 'за', price_b, 'BNB', 'по цене', price_bids_g_LOKABNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LOKAUSDT_LOKABNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_LOKAUSDT_LOKABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LOKAUSDT != 0.0 and qty_bids_g_LOKAUSDT != 0.0 and price_asks_g_LOKAUSDT != 0.0 and qty_asks_g_LOKAUSDT != 0.0 and price_bids_g_LOKABUSD != 0.0 and qty_bids_g_LOKABUSD != 0.0 and price_asks_g_LOKABUSD != 0.0 and qty_asks_g_LOKABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LOKABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LOKABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LOKABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LOKAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LOKAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LOKAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LOKABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LOKAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LOKABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LOKAUSDT, '#', 'Покупаем', quantity_pair_a, 'LOKA', 'за', price_a, 'USDT', 'по цене', price_asks_g_LOKAUSDT) 
				print('Пара_B:', symbol_g_LOKABUSD, '#', 'Продаем', quantity_pair_b, 'LOKA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LOKABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LOKAUSDT_LOKABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_SCRTUSDT_SCRTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SCRTUSDT != 0.0 and qty_bids_g_SCRTUSDT != 0.0 and price_asks_g_SCRTUSDT != 0.0 and qty_asks_g_SCRTUSDT != 0.0 and price_bids_g_SCRTBTC != 0.0 and qty_bids_g_SCRTBTC != 0.0 and price_asks_g_SCRTBTC != 0.0 and qty_asks_g_SCRTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SCRTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SCRTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SCRTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SCRTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SCRTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SCRTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SCRTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SCRTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SCRTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SCRTUSDT, '#', 'Покупаем', quantity_pair_a, 'SCRT', 'за', price_a, 'USDT', 'по цене', price_asks_g_SCRTUSDT) 
				print('Пара_B:', symbol_g_SCRTBTC, '#', 'Продаем', quantity_pair_b, 'SCRT', 'за', price_b, 'BTC', 'по цене', price_bids_g_SCRTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SCRTUSDT_SCRTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_SCRTUSDT_SCRTETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SCRTUSDT != 0.0 and qty_bids_g_SCRTUSDT != 0.0 and price_asks_g_SCRTUSDT != 0.0 and qty_asks_g_SCRTUSDT != 0.0 and price_bids_g_SCRTETH != 0.0 and qty_bids_g_SCRTETH != 0.0 and price_asks_g_SCRTETH != 0.0 and qty_asks_g_SCRTETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SCRTETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SCRTETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SCRTETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SCRTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SCRTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SCRTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SCRTETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SCRTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SCRTETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SCRTUSDT, '#', 'Покупаем', quantity_pair_a, 'SCRT', 'за', price_a, 'USDT', 'по цене', price_asks_g_SCRTUSDT) 
				print('Пара_B:', symbol_g_SCRTETH, '#', 'Продаем', quantity_pair_b, 'SCRT', 'за', price_b, 'ETH', 'по цене', price_bids_g_SCRTETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SCRTUSDT_SCRTETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_SCRTUSDT_SCRTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_SCRTUSDT != 0.0 and qty_bids_g_SCRTUSDT != 0.0 and price_asks_g_SCRTUSDT != 0.0 and qty_asks_g_SCRTUSDT != 0.0 and price_bids_g_SCRTBUSD != 0.0 and qty_bids_g_SCRTBUSD != 0.0 and price_asks_g_SCRTBUSD != 0.0 and qty_asks_g_SCRTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_SCRTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_SCRTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_SCRTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_SCRTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_SCRTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_SCRTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_SCRTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='SCRTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='SCRTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_SCRTUSDT, '#', 'Покупаем', quantity_pair_a, 'SCRT', 'за', price_a, 'USDT', 'по цене', price_asks_g_SCRTUSDT) 
				print('Пара_B:', symbol_g_SCRTBUSD, '#', 'Продаем', quantity_pair_b, 'SCRT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_SCRTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_SCRTUSDT_SCRTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_API3USDT_API3BTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_API3USDT != 0.0 and qty_bids_g_API3USDT != 0.0 and price_asks_g_API3USDT != 0.0 and qty_asks_g_API3USDT != 0.0 and price_bids_g_API3BTC != 0.0 and qty_bids_g_API3BTC != 0.0 and price_asks_g_API3BTC != 0.0 and qty_asks_g_API3BTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_API3BTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_API3BTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_API3BTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_API3USDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_API3USDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_API3USDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_API3BTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='API3USDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='API3BTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_API3USDT, '#', 'Покупаем', quantity_pair_a, 'API3', 'за', price_a, 'USDT', 'по цене', price_asks_g_API3USDT) 
				print('Пара_B:', symbol_g_API3BTC, '#', 'Продаем', quantity_pair_b, 'API3', 'за', price_b, 'BTC', 'по цене', price_bids_g_API3BTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_API3USDT_API3BTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_API3USDT_API3BUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_API3USDT != 0.0 and qty_bids_g_API3USDT != 0.0 and price_asks_g_API3USDT != 0.0 and qty_asks_g_API3USDT != 0.0 and price_bids_g_API3BUSD != 0.0 and qty_bids_g_API3BUSD != 0.0 and price_asks_g_API3BUSD != 0.0 and qty_asks_g_API3BUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_API3BUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_API3BUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_API3BUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_API3USDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_API3USDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_API3USDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_API3BUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='API3USDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='API3BUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_API3USDT, '#', 'Покупаем', quantity_pair_a, 'API3', 'за', price_a, 'USDT', 'по цене', price_asks_g_API3USDT) 
				print('Пара_B:', symbol_g_API3BUSD, '#', 'Продаем', quantity_pair_b, 'API3', 'за', price_b, 'BUSD', 'по цене', price_bids_g_API3BUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_API3USDT_API3BUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BTTCUSDT_BTTCBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BTTCUSDT != 0.0 and qty_bids_g_BTTCUSDT != 0.0 and price_asks_g_BTTCUSDT != 0.0 and qty_asks_g_BTTCUSDT != 0.0 and price_bids_g_BTTCBUSD != 0.0 and qty_bids_g_BTTCBUSD != 0.0 and price_asks_g_BTTCBUSD != 0.0 and qty_asks_g_BTTCBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BTTCBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BTTCBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BTTCBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BTTCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BTTCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BTTCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BTTCBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BTTCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BTTCBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BTTCUSDT, '#', 'Покупаем', quantity_pair_a, 'BTTC', 'за', price_a, 'USDT', 'по цене', price_asks_g_BTTCUSDT) 
				print('Пара_B:', symbol_g_BTTCBUSD, '#', 'Продаем', quantity_pair_b, 'BTTC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BTTCBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BTTCUSDT_BTTCBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ACAUSDT_ACABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ACAUSDT != 0.0 and qty_bids_g_ACAUSDT != 0.0 and price_asks_g_ACAUSDT != 0.0 and qty_asks_g_ACAUSDT != 0.0 and price_bids_g_ACABTC != 0.0 and qty_bids_g_ACABTC != 0.0 and price_asks_g_ACABTC != 0.0 and qty_asks_g_ACABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ACABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ACABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ACABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ACAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ACAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ACAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ACABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ACAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ACABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ACAUSDT, '#', 'Покупаем', quantity_pair_a, 'ACA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ACAUSDT) 
				print('Пара_B:', symbol_g_ACABTC, '#', 'Продаем', quantity_pair_b, 'ACA', 'за', price_b, 'BTC', 'по цене', price_bids_g_ACABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ACAUSDT_ACABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ACAUSDT_ACABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ACAUSDT != 0.0 and qty_bids_g_ACAUSDT != 0.0 and price_asks_g_ACAUSDT != 0.0 and qty_asks_g_ACAUSDT != 0.0 and price_bids_g_ACABUSD != 0.0 and qty_bids_g_ACABUSD != 0.0 and price_asks_g_ACABUSD != 0.0 and qty_asks_g_ACABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ACABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ACABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ACABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ACAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ACAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ACAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ACABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ACAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ACABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ACAUSDT, '#', 'Покупаем', quantity_pair_a, 'ACA', 'за', price_a, 'USDT', 'по цене', price_asks_g_ACAUSDT) 
				print('Пара_B:', symbol_g_ACABUSD, '#', 'Продаем', quantity_pair_b, 'ACA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ACABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ACAUSDT_ACABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_XNOUSDT_XNOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XNOUSDT != 0.0 and qty_bids_g_XNOUSDT != 0.0 and price_asks_g_XNOUSDT != 0.0 and qty_asks_g_XNOUSDT != 0.0 and price_bids_g_XNOBTC != 0.0 and qty_bids_g_XNOBTC != 0.0 and price_asks_g_XNOBTC != 0.0 and qty_asks_g_XNOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XNOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XNOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XNOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XNOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XNOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XNOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XNOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XNOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XNOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XNOUSDT, '#', 'Покупаем', quantity_pair_a, 'XNO', 'за', price_a, 'USDT', 'по цене', price_asks_g_XNOUSDT) 
				print('Пара_B:', symbol_g_XNOBTC, '#', 'Продаем', quantity_pair_b, 'XNO', 'за', price_b, 'BTC', 'по цене', price_bids_g_XNOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XNOUSDT_XNOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_XNOUSDT_XNOETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XNOUSDT != 0.0 and qty_bids_g_XNOUSDT != 0.0 and price_asks_g_XNOUSDT != 0.0 and qty_asks_g_XNOUSDT != 0.0 and price_bids_g_XNOETH != 0.0 and qty_bids_g_XNOETH != 0.0 and price_asks_g_XNOETH != 0.0 and qty_asks_g_XNOETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XNOETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XNOETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XNOETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XNOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XNOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XNOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XNOETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XNOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XNOETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XNOUSDT, '#', 'Покупаем', quantity_pair_a, 'XNO', 'за', price_a, 'USDT', 'по цене', price_asks_g_XNOUSDT) 
				print('Пара_B:', symbol_g_XNOETH, '#', 'Продаем', quantity_pair_b, 'XNO', 'за', price_b, 'ETH', 'по цене', price_bids_g_XNOETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XNOUSDT_XNOETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_XNOUSDT_XNOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_XNOUSDT != 0.0 and qty_bids_g_XNOUSDT != 0.0 and price_asks_g_XNOUSDT != 0.0 and qty_asks_g_XNOUSDT != 0.0 and price_bids_g_XNOBUSD != 0.0 and qty_bids_g_XNOBUSD != 0.0 and price_asks_g_XNOBUSD != 0.0 and qty_asks_g_XNOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_XNOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_XNOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_XNOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_XNOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_XNOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_XNOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_XNOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='XNOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='XNOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_XNOUSDT, '#', 'Покупаем', quantity_pair_a, 'XNO', 'за', price_a, 'USDT', 'по цене', price_asks_g_XNOUSDT) 
				print('Пара_B:', symbol_g_XNOBUSD, '#', 'Продаем', quantity_pair_b, 'XNO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_XNOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_XNOUSDT_XNOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_WOOUSDT_WOOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WOOUSDT != 0.0 and qty_bids_g_WOOUSDT != 0.0 and price_asks_g_WOOUSDT != 0.0 and qty_asks_g_WOOUSDT != 0.0 and price_bids_g_WOOBTC != 0.0 and qty_bids_g_WOOBTC != 0.0 and price_asks_g_WOOBTC != 0.0 and qty_asks_g_WOOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WOOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WOOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WOOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WOOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WOOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WOOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WOOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WOOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WOOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WOOUSDT, '#', 'Покупаем', quantity_pair_a, 'WOO', 'за', price_a, 'USDT', 'по цене', price_asks_g_WOOUSDT) 
				print('Пара_B:', symbol_g_WOOBTC, '#', 'Продаем', quantity_pair_b, 'WOO', 'за', price_b, 'BTC', 'по цене', price_bids_g_WOOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WOOUSDT_WOOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_WOOUSDT_WOOBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WOOUSDT != 0.0 and qty_bids_g_WOOUSDT != 0.0 and price_asks_g_WOOUSDT != 0.0 and qty_asks_g_WOOUSDT != 0.0 and price_bids_g_WOOBNB != 0.0 and qty_bids_g_WOOBNB != 0.0 and price_asks_g_WOOBNB != 0.0 and qty_asks_g_WOOBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WOOBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WOOBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WOOBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WOOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WOOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WOOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WOOBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WOOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WOOBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WOOUSDT, '#', 'Покупаем', quantity_pair_a, 'WOO', 'за', price_a, 'USDT', 'по цене', price_asks_g_WOOUSDT) 
				print('Пара_B:', symbol_g_WOOBNB, '#', 'Продаем', quantity_pair_b, 'WOO', 'за', price_b, 'BNB', 'по цене', price_bids_g_WOOBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WOOUSDT_WOOBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_WOOUSDT_WOOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_WOOUSDT != 0.0 and qty_bids_g_WOOUSDT != 0.0 and price_asks_g_WOOUSDT != 0.0 and qty_asks_g_WOOUSDT != 0.0 and price_bids_g_WOOBUSD != 0.0 and qty_bids_g_WOOBUSD != 0.0 and price_asks_g_WOOBUSD != 0.0 and qty_asks_g_WOOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_WOOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_WOOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_WOOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_WOOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_WOOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_WOOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_WOOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='WOOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='WOOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_WOOUSDT, '#', 'Покупаем', quantity_pair_a, 'WOO', 'за', price_a, 'USDT', 'по цене', price_asks_g_WOOUSDT) 
				print('Пара_B:', symbol_g_WOOBUSD, '#', 'Продаем', quantity_pair_b, 'WOO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_WOOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_WOOUSDT_WOOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ALPINEUSDT_ALPINEEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALPINEUSDT != 0.0 and qty_bids_g_ALPINEUSDT != 0.0 and price_asks_g_ALPINEUSDT != 0.0 and qty_asks_g_ALPINEUSDT != 0.0 and price_bids_g_ALPINEEUR != 0.0 and qty_bids_g_ALPINEEUR != 0.0 and price_asks_g_ALPINEEUR != 0.0 and qty_asks_g_ALPINEEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALPINEEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALPINEEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALPINEEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALPINEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALPINEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALPINEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALPINEEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALPINEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALPINEEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALPINEUSDT, '#', 'Покупаем', quantity_pair_a, 'ALPINE', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALPINEUSDT) 
				print('Пара_B:', symbol_g_ALPINEEUR, '#', 'Продаем', quantity_pair_b, 'ALPINE', 'за', price_b, 'EUR', 'по цене', price_bids_g_ALPINEEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALPINEUSDT_ALPINEEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_ALPINEUSDT_ALPINEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALPINEUSDT != 0.0 and qty_bids_g_ALPINEUSDT != 0.0 and price_asks_g_ALPINEUSDT != 0.0 and qty_asks_g_ALPINEUSDT != 0.0 and price_bids_g_ALPINEBTC != 0.0 and qty_bids_g_ALPINEBTC != 0.0 and price_asks_g_ALPINEBTC != 0.0 and qty_asks_g_ALPINEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALPINEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALPINEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALPINEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALPINEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALPINEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALPINEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALPINEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALPINEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALPINEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALPINEUSDT, '#', 'Покупаем', quantity_pair_a, 'ALPINE', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALPINEUSDT) 
				print('Пара_B:', symbol_g_ALPINEBTC, '#', 'Продаем', quantity_pair_b, 'ALPINE', 'за', price_b, 'BTC', 'по цене', price_bids_g_ALPINEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALPINEUSDT_ALPINEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_ALPINEUSDT_ALPINEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ALPINEUSDT != 0.0 and qty_bids_g_ALPINEUSDT != 0.0 and price_asks_g_ALPINEUSDT != 0.0 and qty_asks_g_ALPINEUSDT != 0.0 and price_bids_g_ALPINEBUSD != 0.0 and qty_bids_g_ALPINEBUSD != 0.0 and price_asks_g_ALPINEBUSD != 0.0 and qty_asks_g_ALPINEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ALPINEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ALPINEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ALPINEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ALPINEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ALPINEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ALPINEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ALPINEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ALPINEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ALPINEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ALPINEUSDT, '#', 'Покупаем', quantity_pair_a, 'ALPINE', 'за', price_a, 'USDT', 'по цене', price_asks_g_ALPINEUSDT) 
				print('Пара_B:', symbol_g_ALPINEBUSD, '#', 'Продаем', quantity_pair_b, 'ALPINE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ALPINEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ALPINEUSDT_ALPINEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_TUSDT_TBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_TUSDT != 0.0 and qty_bids_g_TUSDT != 0.0 and price_asks_g_TUSDT != 0.0 and qty_asks_g_TUSDT != 0.0 and price_bids_g_TBUSD != 0.0 and qty_bids_g_TBUSD != 0.0 and price_asks_g_TBUSD != 0.0 and qty_asks_g_TBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_TBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_TBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_TBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_TUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_TUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_TUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_TBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='TUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='TBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_TUSDT, '#', 'Покупаем', quantity_pair_a, 'T', 'за', price_a, 'USDT', 'по цене', price_asks_g_TUSDT) 
				print('Пара_B:', symbol_g_TBUSD, '#', 'Продаем', quantity_pair_b, 'T', 'за', price_b, 'BUSD', 'по цене', price_bids_g_TBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_TUSDT_TBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ASTRUSDT_ASTRBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ASTRUSDT != 0.0 and qty_bids_g_ASTRUSDT != 0.0 and price_asks_g_ASTRUSDT != 0.0 and qty_asks_g_ASTRUSDT != 0.0 and price_bids_g_ASTRBUSD != 0.0 and qty_bids_g_ASTRBUSD != 0.0 and price_asks_g_ASTRBUSD != 0.0 and qty_asks_g_ASTRBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ASTRBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ASTRBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ASTRBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ASTRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ASTRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ASTRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ASTRBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ASTRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ASTRBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ASTRUSDT, '#', 'Покупаем', quantity_pair_a, 'ASTR', 'за', price_a, 'USDT', 'по цене', price_asks_g_ASTRUSDT) 
				print('Пара_B:', symbol_g_ASTRBUSD, '#', 'Продаем', quantity_pair_b, 'ASTR', 'за', price_b, 'BUSD', 'по цене', price_bids_g_ASTRBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ASTRUSDT_ASTRBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_ASTRUSDT_ASTRBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_ASTRUSDT != 0.0 and qty_bids_g_ASTRUSDT != 0.0 and price_asks_g_ASTRUSDT != 0.0 and qty_asks_g_ASTRUSDT != 0.0 and price_bids_g_ASTRBTC != 0.0 and qty_bids_g_ASTRBTC != 0.0 and price_asks_g_ASTRBTC != 0.0 and qty_asks_g_ASTRBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_ASTRBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_ASTRBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_ASTRBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_ASTRUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_ASTRUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_ASTRUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_ASTRBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='ASTRUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='ASTRBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_ASTRUSDT, '#', 'Покупаем', quantity_pair_a, 'ASTR', 'за', price_a, 'USDT', 'по цене', price_asks_g_ASTRUSDT) 
				print('Пара_B:', symbol_g_ASTRBTC, '#', 'Продаем', quantity_pair_b, 'ASTR', 'за', price_b, 'BTC', 'по цене', price_bids_g_ASTRBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_ASTRUSDT_ASTRBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_GMTUSDT_GMTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GMTUSDT != 0.0 and qty_bids_g_GMTUSDT != 0.0 and price_asks_g_GMTUSDT != 0.0 and qty_asks_g_GMTUSDT != 0.0 and price_bids_g_GMTBTC != 0.0 and qty_bids_g_GMTBTC != 0.0 and price_asks_g_GMTBTC != 0.0 and qty_asks_g_GMTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GMTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GMTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GMTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GMTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GMTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GMTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GMTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GMTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GMTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GMTUSDT, '#', 'Покупаем', quantity_pair_a, 'GMT', 'за', price_a, 'USDT', 'по цене', price_asks_g_GMTUSDT) 
				print('Пара_B:', symbol_g_GMTBTC, '#', 'Продаем', quantity_pair_b, 'GMT', 'за', price_b, 'BTC', 'по цене', price_bids_g_GMTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GMTUSDT_GMTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_GMTUSDT_GMTBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GMTUSDT != 0.0 and qty_bids_g_GMTUSDT != 0.0 and price_asks_g_GMTUSDT != 0.0 and qty_asks_g_GMTUSDT != 0.0 and price_bids_g_GMTBNB != 0.0 and qty_bids_g_GMTBNB != 0.0 and price_asks_g_GMTBNB != 0.0 and qty_asks_g_GMTBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GMTBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GMTBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GMTBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GMTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GMTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GMTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GMTBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GMTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GMTBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GMTUSDT, '#', 'Покупаем', quantity_pair_a, 'GMT', 'за', price_a, 'USDT', 'по цене', price_asks_g_GMTUSDT) 
				print('Пара_B:', symbol_g_GMTBNB, '#', 'Продаем', quantity_pair_b, 'GMT', 'за', price_b, 'BNB', 'по цене', price_bids_g_GMTBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GMTUSDT_GMTBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_GMTUSDT_GMTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GMTUSDT != 0.0 and qty_bids_g_GMTUSDT != 0.0 and price_asks_g_GMTUSDT != 0.0 and qty_asks_g_GMTUSDT != 0.0 and price_bids_g_GMTBUSD != 0.0 and qty_bids_g_GMTBUSD != 0.0 and price_asks_g_GMTBUSD != 0.0 and qty_asks_g_GMTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GMTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GMTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GMTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GMTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GMTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GMTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GMTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GMTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GMTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GMTUSDT, '#', 'Покупаем', quantity_pair_a, 'GMT', 'за', price_a, 'USDT', 'по цене', price_asks_g_GMTUSDT) 
				print('Пара_B:', symbol_g_GMTBUSD, '#', 'Продаем', quantity_pair_b, 'GMT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_GMTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GMTUSDT_GMTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_GMTUSDT_GMTETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GMTUSDT != 0.0 and qty_bids_g_GMTUSDT != 0.0 and price_asks_g_GMTUSDT != 0.0 and qty_asks_g_GMTUSDT != 0.0 and price_bids_g_GMTETH != 0.0 and qty_bids_g_GMTETH != 0.0 and price_asks_g_GMTETH != 0.0 and qty_asks_g_GMTETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GMTETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GMTETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GMTETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GMTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GMTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GMTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GMTETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GMTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GMTETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GMTUSDT, '#', 'Покупаем', quantity_pair_a, 'GMT', 'за', price_a, 'USDT', 'по цене', price_asks_g_GMTUSDT) 
				print('Пара_B:', symbol_g_GMTETH, '#', 'Продаем', quantity_pair_b, 'GMT', 'за', price_b, 'ETH', 'по цене', price_bids_g_GMTETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GMTUSDT_GMTETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_GMTUSDT_GMTEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GMTUSDT != 0.0 and qty_bids_g_GMTUSDT != 0.0 and price_asks_g_GMTUSDT != 0.0 and qty_asks_g_GMTUSDT != 0.0 and price_bids_g_GMTEUR != 0.0 and qty_bids_g_GMTEUR != 0.0 and price_asks_g_GMTEUR != 0.0 and qty_asks_g_GMTEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GMTEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GMTEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GMTEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GMTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GMTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GMTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GMTEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GMTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GMTEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GMTUSDT, '#', 'Покупаем', quantity_pair_a, 'GMT', 'за', price_a, 'USDT', 'по цене', price_asks_g_GMTUSDT) 
				print('Пара_B:', symbol_g_GMTEUR, '#', 'Продаем', quantity_pair_b, 'GMT', 'за', price_b, 'EUR', 'по цене', price_bids_g_GMTEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GMTUSDT_GMTEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_GMTUSDT_GMTGBP_GBPUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GMTUSDT != 0.0 and qty_bids_g_GMTUSDT != 0.0 and price_asks_g_GMTUSDT != 0.0 and qty_asks_g_GMTUSDT != 0.0 and price_bids_g_GMTGBP != 0.0 and qty_bids_g_GMTGBP != 0.0 and price_asks_g_GMTGBP != 0.0 and qty_asks_g_GMTGBP != 0.0 and price_bids_g_GBPUSDT != 0.0 and qty_bids_g_GBPUSDT != 0.0 and price_asks_g_GBPUSDT != 0.0 and qty_asks_g_GBPUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_GBPUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_GBPUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GMTGBP) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GMTGBP)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GMTGBP)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GMTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GMTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GMTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GMTGBP) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_GBPUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GMTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GMTGBP', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='GBPUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GMTUSDT, '#', 'Покупаем', quantity_pair_a, 'GMT', 'за', price_a, 'USDT', 'по цене', price_asks_g_GMTUSDT) 
				print('Пара_B:', symbol_g_GMTGBP, '#', 'Продаем', quantity_pair_b, 'GMT', 'за', price_b, 'GBP', 'по цене', price_bids_g_GMTGBP) 
				print('Пара_C:', symbol_g_GBPUSDT, '#', 'Продаем', quantity_pair_c, 'GBP', 'за', price_c, 'USDT', 'по цене', price_bids_g_GBPUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GMTUSDT_GMTGBP_GBPUSDT_Trade).start() 

###################################################################### 


def loop_GMTUSDT_GMTAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GMTUSDT != 0.0 and qty_bids_g_GMTUSDT != 0.0 and price_asks_g_GMTUSDT != 0.0 and qty_asks_g_GMTUSDT != 0.0 and price_bids_g_GMTAUD != 0.0 and qty_bids_g_GMTAUD != 0.0 and price_asks_g_GMTAUD != 0.0 and qty_asks_g_GMTAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GMTAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GMTAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GMTAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GMTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GMTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GMTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GMTAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GMTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GMTAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GMTUSDT, '#', 'Покупаем', quantity_pair_a, 'GMT', 'за', price_a, 'USDT', 'по цене', price_asks_g_GMTUSDT) 
				print('Пара_B:', symbol_g_GMTAUD, '#', 'Продаем', quantity_pair_b, 'GMT', 'за', price_b, 'AUD', 'по цене', price_bids_g_GMTAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GMTUSDT_GMTAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_KDAUSDT_KDABTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KDAUSDT != 0.0 and qty_bids_g_KDAUSDT != 0.0 and price_asks_g_KDAUSDT != 0.0 and qty_asks_g_KDAUSDT != 0.0 and price_bids_g_KDABTC != 0.0 and qty_bids_g_KDABTC != 0.0 and price_asks_g_KDABTC != 0.0 and qty_asks_g_KDABTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KDABTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KDABTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KDABTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KDAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KDAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KDAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KDABTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KDAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KDABTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KDAUSDT, '#', 'Покупаем', quantity_pair_a, 'KDA', 'за', price_a, 'USDT', 'по цене', price_asks_g_KDAUSDT) 
				print('Пара_B:', symbol_g_KDABTC, '#', 'Продаем', quantity_pair_b, 'KDA', 'за', price_b, 'BTC', 'по цене', price_bids_g_KDABTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KDAUSDT_KDABTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_KDAUSDT_KDABUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_KDAUSDT != 0.0 and qty_bids_g_KDAUSDT != 0.0 and price_asks_g_KDAUSDT != 0.0 and qty_asks_g_KDAUSDT != 0.0 and price_bids_g_KDABUSD != 0.0 and qty_bids_g_KDABUSD != 0.0 and price_asks_g_KDABUSD != 0.0 and qty_asks_g_KDABUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_KDABUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_KDABUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_KDABUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_KDAUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_KDAUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_KDAUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_KDABUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='KDAUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='KDABUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_KDAUSDT, '#', 'Покупаем', quantity_pair_a, 'KDA', 'за', price_a, 'USDT', 'по цене', price_asks_g_KDAUSDT) 
				print('Пара_B:', symbol_g_KDABUSD, '#', 'Продаем', quantity_pair_b, 'KDA', 'за', price_b, 'BUSD', 'по цене', price_bids_g_KDABUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_KDAUSDT_KDABUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_APEUSDT_APEBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_APEUSDT != 0.0 and qty_bids_g_APEUSDT != 0.0 and price_asks_g_APEUSDT != 0.0 and qty_asks_g_APEUSDT != 0.0 and price_bids_g_APEBUSD != 0.0 and qty_bids_g_APEBUSD != 0.0 and price_asks_g_APEBUSD != 0.0 and qty_asks_g_APEBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_APEBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_APEBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_APEBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_APEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_APEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_APEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_APEBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='APEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='APEBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_APEUSDT, '#', 'Покупаем', quantity_pair_a, 'APE', 'за', price_a, 'USDT', 'по цене', price_asks_g_APEUSDT) 
				print('Пара_B:', symbol_g_APEBUSD, '#', 'Продаем', quantity_pair_b, 'APE', 'за', price_b, 'BUSD', 'по цене', price_bids_g_APEBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_APEUSDT_APEBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_APEUSDT_APEBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_APEUSDT != 0.0 and qty_bids_g_APEUSDT != 0.0 and price_asks_g_APEUSDT != 0.0 and qty_asks_g_APEUSDT != 0.0 and price_bids_g_APEBTC != 0.0 and qty_bids_g_APEBTC != 0.0 and price_asks_g_APEBTC != 0.0 and qty_asks_g_APEBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_APEBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_APEBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_APEBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_APEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_APEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_APEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_APEBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='APEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='APEBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_APEUSDT, '#', 'Покупаем', quantity_pair_a, 'APE', 'за', price_a, 'USDT', 'по цене', price_asks_g_APEUSDT) 
				print('Пара_B:', symbol_g_APEBTC, '#', 'Продаем', quantity_pair_b, 'APE', 'за', price_b, 'BTC', 'по цене', price_bids_g_APEBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_APEUSDT_APEBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_APEUSDT_APEEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_APEUSDT != 0.0 and qty_bids_g_APEUSDT != 0.0 and price_asks_g_APEUSDT != 0.0 and qty_asks_g_APEUSDT != 0.0 and price_bids_g_APEEUR != 0.0 and qty_bids_g_APEEUR != 0.0 and price_asks_g_APEEUR != 0.0 and qty_asks_g_APEEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_APEEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_APEEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_APEEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_APEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_APEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_APEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_APEEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='APEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='APEEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_APEUSDT, '#', 'Покупаем', quantity_pair_a, 'APE', 'за', price_a, 'USDT', 'по цене', price_asks_g_APEUSDT) 
				print('Пара_B:', symbol_g_APEEUR, '#', 'Продаем', quantity_pair_b, 'APE', 'за', price_b, 'EUR', 'по цене', price_bids_g_APEEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_APEUSDT_APEEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_APEUSDT_APEBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_APEUSDT != 0.0 and qty_bids_g_APEUSDT != 0.0 and price_asks_g_APEUSDT != 0.0 and qty_asks_g_APEUSDT != 0.0 and price_bids_g_APEBNB != 0.0 and qty_bids_g_APEBNB != 0.0 and price_asks_g_APEBNB != 0.0 and qty_asks_g_APEBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_APEBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_APEBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_APEBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_APEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_APEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_APEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_APEBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='APEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='APEBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_APEUSDT, '#', 'Покупаем', quantity_pair_a, 'APE', 'за', price_a, 'USDT', 'по цене', price_asks_g_APEUSDT) 
				print('Пара_B:', symbol_g_APEBNB, '#', 'Продаем', quantity_pair_b, 'APE', 'за', price_b, 'BNB', 'по цене', price_bids_g_APEBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_APEUSDT_APEBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_APEUSDT_APEAUD_AUDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_APEUSDT != 0.0 and qty_bids_g_APEUSDT != 0.0 and price_asks_g_APEUSDT != 0.0 and qty_asks_g_APEUSDT != 0.0 and price_bids_g_APEAUD != 0.0 and qty_bids_g_APEAUD != 0.0 and price_asks_g_APEAUD != 0.0 and qty_asks_g_APEAUD != 0.0 and price_bids_g_AUDUSDT != 0.0 and qty_bids_g_AUDUSDT != 0.0 and price_asks_g_AUDUSDT != 0.0 and qty_asks_g_AUDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_AUDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_AUDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_APEAUD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_APEAUD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_APEAUD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_APEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_APEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_APEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_APEAUD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_AUDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='APEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='APEAUD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='AUDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_APEUSDT, '#', 'Покупаем', quantity_pair_a, 'APE', 'за', price_a, 'USDT', 'по цене', price_asks_g_APEUSDT) 
				print('Пара_B:', symbol_g_APEAUD, '#', 'Продаем', quantity_pair_b, 'APE', 'за', price_b, 'AUD', 'по цене', price_bids_g_APEAUD) 
				print('Пара_C:', symbol_g_AUDUSDT, '#', 'Продаем', quantity_pair_c, 'AUD', 'за', price_c, 'USDT', 'по цене', price_bids_g_AUDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_APEUSDT_APEAUD_AUDUSDT_Trade).start() 

###################################################################### 


def loop_APEUSDT_APEETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_APEUSDT != 0.0 and qty_bids_g_APEUSDT != 0.0 and price_asks_g_APEUSDT != 0.0 and qty_asks_g_APEUSDT != 0.0 and price_bids_g_APEETH != 0.0 and qty_bids_g_APEETH != 0.0 and price_asks_g_APEETH != 0.0 and qty_asks_g_APEETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_APEETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_APEETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_APEETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_APEUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_APEUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_APEUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_APEETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='APEUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='APEETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_APEUSDT, '#', 'Покупаем', quantity_pair_a, 'APE', 'за', price_a, 'USDT', 'по цене', price_asks_g_APEUSDT) 
				print('Пара_B:', symbol_g_APEETH, '#', 'Продаем', quantity_pair_b, 'APE', 'за', price_b, 'ETH', 'по цене', price_bids_g_APEETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_APEUSDT_APEETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_BSWUSDT_BSWBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BSWUSDT != 0.0 and qty_bids_g_BSWUSDT != 0.0 and price_asks_g_BSWUSDT != 0.0 and qty_asks_g_BSWUSDT != 0.0 and price_bids_g_BSWBUSD != 0.0 and qty_bids_g_BSWBUSD != 0.0 and price_asks_g_BSWBUSD != 0.0 and qty_asks_g_BSWBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BSWBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BSWBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BSWBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BSWUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BSWUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BSWUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BSWBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BSWUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BSWBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BSWUSDT, '#', 'Покупаем', quantity_pair_a, 'BSW', 'за', price_a, 'USDT', 'по цене', price_asks_g_BSWUSDT) 
				print('Пара_B:', symbol_g_BSWBUSD, '#', 'Продаем', quantity_pair_b, 'BSW', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BSWBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BSWUSDT_BSWBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_BSWUSDT_BSWBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BSWUSDT != 0.0 and qty_bids_g_BSWUSDT != 0.0 and price_asks_g_BSWUSDT != 0.0 and qty_asks_g_BSWUSDT != 0.0 and price_bids_g_BSWBNB != 0.0 and qty_bids_g_BSWBNB != 0.0 and price_asks_g_BSWBNB != 0.0 and qty_asks_g_BSWBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BSWBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BSWBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BSWBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BSWUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BSWUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BSWUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BSWBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BSWUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BSWBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BSWUSDT, '#', 'Покупаем', quantity_pair_a, 'BSW', 'за', price_a, 'USDT', 'по цене', price_asks_g_BSWUSDT) 
				print('Пара_B:', symbol_g_BSWBNB, '#', 'Продаем', quantity_pair_b, 'BSW', 'за', price_b, 'BNB', 'по цене', price_bids_g_BSWBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BSWUSDT_BSWBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_BSWUSDT_BSWETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BSWUSDT != 0.0 and qty_bids_g_BSWUSDT != 0.0 and price_asks_g_BSWUSDT != 0.0 and qty_asks_g_BSWUSDT != 0.0 and price_bids_g_BSWETH != 0.0 and qty_bids_g_BSWETH != 0.0 and price_asks_g_BSWETH != 0.0 and qty_asks_g_BSWETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BSWETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BSWETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BSWETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BSWUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BSWUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BSWUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BSWETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BSWUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BSWETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BSWUSDT, '#', 'Покупаем', quantity_pair_a, 'BSW', 'за', price_a, 'USDT', 'по цене', price_asks_g_BSWUSDT) 
				print('Пара_B:', symbol_g_BSWETH, '#', 'Продаем', quantity_pair_b, 'BSW', 'за', price_b, 'ETH', 'по цене', price_bids_g_BSWETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BSWUSDT_BSWETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_BIFIUSDT_BIFIBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_BIFIUSDT != 0.0 and qty_bids_g_BIFIUSDT != 0.0 and price_asks_g_BIFIUSDT != 0.0 and qty_asks_g_BIFIUSDT != 0.0 and price_bids_g_BIFIBUSD != 0.0 and qty_bids_g_BIFIBUSD != 0.0 and price_asks_g_BIFIBUSD != 0.0 and qty_asks_g_BIFIBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_BIFIBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_BIFIBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_BIFIBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_BIFIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_BIFIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_BIFIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_BIFIBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='BIFIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='BIFIBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_BIFIUSDT, '#', 'Покупаем', quantity_pair_a, 'BIFI', 'за', price_a, 'USDT', 'по цене', price_asks_g_BIFIUSDT) 
				print('Пара_B:', symbol_g_BIFIBUSD, '#', 'Продаем', quantity_pair_b, 'BIFI', 'за', price_b, 'BUSD', 'по цене', price_bids_g_BIFIBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_BIFIUSDT_BIFIBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_MULTIUSDT_MULTIBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MULTIUSDT != 0.0 and qty_bids_g_MULTIUSDT != 0.0 and price_asks_g_MULTIUSDT != 0.0 and qty_asks_g_MULTIUSDT != 0.0 and price_bids_g_MULTIBTC != 0.0 and qty_bids_g_MULTIBTC != 0.0 and price_asks_g_MULTIBTC != 0.0 and qty_asks_g_MULTIBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MULTIBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MULTIBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MULTIBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MULTIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MULTIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MULTIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MULTIBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MULTIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MULTIBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MULTIUSDT, '#', 'Покупаем', quantity_pair_a, 'MULTI', 'за', price_a, 'USDT', 'по цене', price_asks_g_MULTIUSDT) 
				print('Пара_B:', symbol_g_MULTIBTC, '#', 'Продаем', quantity_pair_b, 'MULTI', 'за', price_b, 'BTC', 'по цене', price_bids_g_MULTIBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MULTIUSDT_MULTIBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MULTIUSDT_MULTIBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MULTIUSDT != 0.0 and qty_bids_g_MULTIUSDT != 0.0 and price_asks_g_MULTIUSDT != 0.0 and qty_asks_g_MULTIUSDT != 0.0 and price_bids_g_MULTIBUSD != 0.0 and qty_bids_g_MULTIBUSD != 0.0 and price_asks_g_MULTIBUSD != 0.0 and qty_asks_g_MULTIBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MULTIBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MULTIBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MULTIBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MULTIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MULTIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MULTIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MULTIBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MULTIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MULTIBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MULTIUSDT, '#', 'Покупаем', quantity_pair_a, 'MULTI', 'за', price_a, 'USDT', 'по цене', price_asks_g_MULTIUSDT) 
				print('Пара_B:', symbol_g_MULTIBUSD, '#', 'Продаем', quantity_pair_b, 'MULTI', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MULTIBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MULTIUSDT_MULTIBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_STEEMUSDT_STEEMBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STEEMUSDT != 0.0 and qty_bids_g_STEEMUSDT != 0.0 and price_asks_g_STEEMUSDT != 0.0 and qty_asks_g_STEEMUSDT != 0.0 and price_bids_g_STEEMBTC != 0.0 and qty_bids_g_STEEMBTC != 0.0 and price_asks_g_STEEMBTC != 0.0 and qty_asks_g_STEEMBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STEEMBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STEEMBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STEEMBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STEEMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STEEMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STEEMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STEEMBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STEEMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STEEMBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STEEMUSDT, '#', 'Покупаем', quantity_pair_a, 'STEEM', 'за', price_a, 'USDT', 'по цене', price_asks_g_STEEMUSDT) 
				print('Пара_B:', symbol_g_STEEMBTC, '#', 'Продаем', quantity_pair_b, 'STEEM', 'за', price_b, 'BTC', 'по цене', price_bids_g_STEEMBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STEEMUSDT_STEEMBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_STEEMUSDT_STEEMETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STEEMUSDT != 0.0 and qty_bids_g_STEEMUSDT != 0.0 and price_asks_g_STEEMUSDT != 0.0 and qty_asks_g_STEEMUSDT != 0.0 and price_bids_g_STEEMETH != 0.0 and qty_bids_g_STEEMETH != 0.0 and price_asks_g_STEEMETH != 0.0 and qty_asks_g_STEEMETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STEEMETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STEEMETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STEEMETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STEEMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STEEMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STEEMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STEEMETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STEEMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STEEMETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STEEMUSDT, '#', 'Покупаем', quantity_pair_a, 'STEEM', 'за', price_a, 'USDT', 'по цене', price_asks_g_STEEMUSDT) 
				print('Пара_B:', symbol_g_STEEMETH, '#', 'Продаем', quantity_pair_b, 'STEEM', 'за', price_b, 'ETH', 'по цене', price_bids_g_STEEMETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STEEMUSDT_STEEMETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_STEEMUSDT_STEEMBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STEEMUSDT != 0.0 and qty_bids_g_STEEMUSDT != 0.0 and price_asks_g_STEEMUSDT != 0.0 and qty_asks_g_STEEMUSDT != 0.0 and price_bids_g_STEEMBUSD != 0.0 and qty_bids_g_STEEMBUSD != 0.0 and price_asks_g_STEEMBUSD != 0.0 and qty_asks_g_STEEMBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STEEMBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STEEMBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STEEMBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STEEMUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STEEMUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STEEMUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STEEMBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STEEMUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STEEMBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STEEMUSDT, '#', 'Покупаем', quantity_pair_a, 'STEEM', 'за', price_a, 'USDT', 'по цене', price_asks_g_STEEMUSDT) 
				print('Пара_B:', symbol_g_STEEMBUSD, '#', 'Продаем', quantity_pair_b, 'STEEM', 'за', price_b, 'BUSD', 'по цене', price_bids_g_STEEMBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STEEMUSDT_STEEMBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_MOBUSDT_MOBBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MOBUSDT != 0.0 and qty_bids_g_MOBUSDT != 0.0 and price_asks_g_MOBUSDT != 0.0 and qty_asks_g_MOBUSDT != 0.0 and price_bids_g_MOBBUSD != 0.0 and qty_bids_g_MOBBUSD != 0.0 and price_asks_g_MOBBUSD != 0.0 and qty_asks_g_MOBBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MOBBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MOBBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MOBBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MOBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MOBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MOBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MOBBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MOBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MOBBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MOBUSDT, '#', 'Покупаем', quantity_pair_a, 'MOB', 'за', price_a, 'USDT', 'по цене', price_asks_g_MOBUSDT) 
				print('Пара_B:', symbol_g_MOBBUSD, '#', 'Продаем', quantity_pair_b, 'MOB', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MOBBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MOBUSDT_MOBBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_MOBUSDT_MOBBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MOBUSDT != 0.0 and qty_bids_g_MOBUSDT != 0.0 and price_asks_g_MOBUSDT != 0.0 and qty_asks_g_MOBUSDT != 0.0 and price_bids_g_MOBBTC != 0.0 and qty_bids_g_MOBBTC != 0.0 and price_asks_g_MOBBTC != 0.0 and qty_asks_g_MOBBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MOBBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MOBBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MOBBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MOBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MOBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MOBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MOBBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MOBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MOBBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MOBUSDT, '#', 'Покупаем', quantity_pair_a, 'MOB', 'за', price_a, 'USDT', 'по цене', price_asks_g_MOBUSDT) 
				print('Пара_B:', symbol_g_MOBBTC, '#', 'Продаем', quantity_pair_b, 'MOB', 'за', price_b, 'BTC', 'по цене', price_bids_g_MOBBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MOBUSDT_MOBBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_NEXOUSDT_NEXOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NEXOUSDT != 0.0 and qty_bids_g_NEXOUSDT != 0.0 and price_asks_g_NEXOUSDT != 0.0 and qty_asks_g_NEXOUSDT != 0.0 and price_bids_g_NEXOBUSD != 0.0 and qty_bids_g_NEXOBUSD != 0.0 and price_asks_g_NEXOBUSD != 0.0 and qty_asks_g_NEXOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NEXOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NEXOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NEXOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NEXOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NEXOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NEXOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NEXOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NEXOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NEXOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NEXOUSDT, '#', 'Покупаем', quantity_pair_a, 'NEXO', 'за', price_a, 'USDT', 'по цене', price_asks_g_NEXOUSDT) 
				print('Пара_B:', symbol_g_NEXOBUSD, '#', 'Продаем', quantity_pair_b, 'NEXO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_NEXOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NEXOUSDT_NEXOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_NEXOUSDT_NEXOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NEXOUSDT != 0.0 and qty_bids_g_NEXOUSDT != 0.0 and price_asks_g_NEXOUSDT != 0.0 and qty_asks_g_NEXOUSDT != 0.0 and price_bids_g_NEXOBTC != 0.0 and qty_bids_g_NEXOBTC != 0.0 and price_asks_g_NEXOBTC != 0.0 and qty_asks_g_NEXOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NEXOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NEXOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NEXOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NEXOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NEXOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NEXOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NEXOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NEXOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NEXOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NEXOUSDT, '#', 'Покупаем', quantity_pair_a, 'NEXO', 'за', price_a, 'USDT', 'по цене', price_asks_g_NEXOUSDT) 
				print('Пара_B:', symbol_g_NEXOBTC, '#', 'Продаем', quantity_pair_b, 'NEXO', 'за', price_b, 'BTC', 'по цене', price_bids_g_NEXOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NEXOUSDT_NEXOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_REIUSDT_REIBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_REIUSDT != 0.0 and qty_bids_g_REIUSDT != 0.0 and price_asks_g_REIUSDT != 0.0 and qty_asks_g_REIUSDT != 0.0 and price_bids_g_REIBNB != 0.0 and qty_bids_g_REIBNB != 0.0 and price_asks_g_REIBNB != 0.0 and qty_asks_g_REIBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_REIBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_REIBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_REIBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_REIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_REIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_REIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_REIBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='REIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='REIBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_REIUSDT, '#', 'Покупаем', quantity_pair_a, 'REI', 'за', price_a, 'USDT', 'по цене', price_asks_g_REIUSDT) 
				print('Пара_B:', symbol_g_REIBNB, '#', 'Продаем', quantity_pair_b, 'REI', 'за', price_b, 'BNB', 'по цене', price_bids_g_REIBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_REIUSDT_REIBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_REIUSDT_REIBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_REIUSDT != 0.0 and qty_bids_g_REIUSDT != 0.0 and price_asks_g_REIUSDT != 0.0 and qty_asks_g_REIUSDT != 0.0 and price_bids_g_REIBUSD != 0.0 and qty_bids_g_REIBUSD != 0.0 and price_asks_g_REIBUSD != 0.0 and qty_asks_g_REIBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_REIBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_REIBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_REIBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_REIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_REIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_REIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_REIBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='REIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='REIBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_REIUSDT, '#', 'Покупаем', quantity_pair_a, 'REI', 'за', price_a, 'USDT', 'по цене', price_asks_g_REIUSDT) 
				print('Пара_B:', symbol_g_REIBUSD, '#', 'Продаем', quantity_pair_b, 'REI', 'за', price_b, 'BUSD', 'по цене', price_bids_g_REIBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_REIUSDT_REIBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_GALUSDT_GALBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GALUSDT != 0.0 and qty_bids_g_GALUSDT != 0.0 and price_asks_g_GALUSDT != 0.0 and qty_asks_g_GALUSDT != 0.0 and price_bids_g_GALBUSD != 0.0 and qty_bids_g_GALBUSD != 0.0 and price_asks_g_GALBUSD != 0.0 and qty_asks_g_GALBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GALBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GALBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GALBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GALUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GALUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GALUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GALBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GALUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GALBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GALUSDT, '#', 'Покупаем', quantity_pair_a, 'GAL', 'за', price_a, 'USDT', 'по цене', price_asks_g_GALUSDT) 
				print('Пара_B:', symbol_g_GALBUSD, '#', 'Продаем', quantity_pair_b, 'GAL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_GALBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GALUSDT_GALBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_GALUSDT_GALBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GALUSDT != 0.0 and qty_bids_g_GALUSDT != 0.0 and price_asks_g_GALUSDT != 0.0 and qty_asks_g_GALUSDT != 0.0 and price_bids_g_GALBNB != 0.0 and qty_bids_g_GALBNB != 0.0 and price_asks_g_GALBNB != 0.0 and qty_asks_g_GALBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GALBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GALBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GALBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GALUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GALUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GALUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GALBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GALUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GALBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GALUSDT, '#', 'Покупаем', quantity_pair_a, 'GAL', 'за', price_a, 'USDT', 'по цене', price_asks_g_GALUSDT) 
				print('Пара_B:', symbol_g_GALBNB, '#', 'Продаем', quantity_pair_b, 'GAL', 'за', price_b, 'BNB', 'по цене', price_bids_g_GALBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GALUSDT_GALBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_GALUSDT_GALBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GALUSDT != 0.0 and qty_bids_g_GALUSDT != 0.0 and price_asks_g_GALUSDT != 0.0 and qty_asks_g_GALUSDT != 0.0 and price_bids_g_GALBTC != 0.0 and qty_bids_g_GALBTC != 0.0 and price_asks_g_GALBTC != 0.0 and qty_asks_g_GALBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GALBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GALBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GALBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GALUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GALUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GALUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GALBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GALUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GALBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GALUSDT, '#', 'Покупаем', quantity_pair_a, 'GAL', 'за', price_a, 'USDT', 'по цене', price_asks_g_GALUSDT) 
				print('Пара_B:', symbol_g_GALBTC, '#', 'Продаем', quantity_pair_b, 'GAL', 'за', price_b, 'BTC', 'по цене', price_bids_g_GALBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GALUSDT_GALBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_GALUSDT_GALEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GALUSDT != 0.0 and qty_bids_g_GALUSDT != 0.0 and price_asks_g_GALUSDT != 0.0 and qty_asks_g_GALUSDT != 0.0 and price_bids_g_GALEUR != 0.0 and qty_bids_g_GALEUR != 0.0 and price_asks_g_GALEUR != 0.0 and qty_asks_g_GALEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GALEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GALEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GALEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GALUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GALUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GALUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GALEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GALUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GALEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GALUSDT, '#', 'Покупаем', quantity_pair_a, 'GAL', 'за', price_a, 'USDT', 'по цене', price_asks_g_GALUSDT) 
				print('Пара_B:', symbol_g_GALEUR, '#', 'Продаем', quantity_pair_b, 'GAL', 'за', price_b, 'EUR', 'по цене', price_bids_g_GALEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GALUSDT_GALEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_GALUSDT_GALETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GALUSDT != 0.0 and qty_bids_g_GALUSDT != 0.0 and price_asks_g_GALUSDT != 0.0 and qty_asks_g_GALUSDT != 0.0 and price_bids_g_GALETH != 0.0 and qty_bids_g_GALETH != 0.0 and price_asks_g_GALETH != 0.0 and qty_asks_g_GALETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GALETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GALETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GALETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GALUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GALUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GALUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GALETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GALUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GALETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GALUSDT, '#', 'Покупаем', quantity_pair_a, 'GAL', 'за', price_a, 'USDT', 'по цене', price_asks_g_GALUSDT) 
				print('Пара_B:', symbol_g_GALETH, '#', 'Продаем', quantity_pair_b, 'GAL', 'за', price_b, 'ETH', 'по цене', price_bids_g_GALETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GALUSDT_GALETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_LDOUSDT_LDOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LDOUSDT != 0.0 and qty_bids_g_LDOUSDT != 0.0 and price_asks_g_LDOUSDT != 0.0 and qty_asks_g_LDOUSDT != 0.0 and price_bids_g_LDOBUSD != 0.0 and qty_bids_g_LDOBUSD != 0.0 and price_asks_g_LDOBUSD != 0.0 and qty_asks_g_LDOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LDOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LDOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LDOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LDOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LDOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LDOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LDOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LDOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LDOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LDOUSDT, '#', 'Покупаем', quantity_pair_a, 'LDO', 'за', price_a, 'USDT', 'по цене', price_asks_g_LDOUSDT) 
				print('Пара_B:', symbol_g_LDOBUSD, '#', 'Продаем', quantity_pair_b, 'LDO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LDOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LDOUSDT_LDOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_LDOUSDT_LDOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LDOUSDT != 0.0 and qty_bids_g_LDOUSDT != 0.0 and price_asks_g_LDOUSDT != 0.0 and qty_asks_g_LDOUSDT != 0.0 and price_bids_g_LDOBTC != 0.0 and qty_bids_g_LDOBTC != 0.0 and price_asks_g_LDOBTC != 0.0 and qty_asks_g_LDOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LDOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LDOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LDOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LDOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LDOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LDOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LDOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LDOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LDOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LDOUSDT, '#', 'Покупаем', quantity_pair_a, 'LDO', 'за', price_a, 'USDT', 'по цене', price_asks_g_LDOUSDT) 
				print('Пара_B:', symbol_g_LDOBTC, '#', 'Продаем', quantity_pair_b, 'LDO', 'за', price_b, 'BTC', 'по цене', price_bids_g_LDOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LDOUSDT_LDOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_EPXUSDT_EPXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_EPXUSDT != 0.0 and qty_bids_g_EPXUSDT != 0.0 and price_asks_g_EPXUSDT != 0.0 and qty_asks_g_EPXUSDT != 0.0 and price_bids_g_EPXBUSD != 0.0 and qty_bids_g_EPXBUSD != 0.0 and price_asks_g_EPXBUSD != 0.0 and qty_asks_g_EPXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_EPXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_EPXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_EPXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_EPXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_EPXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_EPXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_EPXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='EPXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='EPXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_EPXUSDT, '#', 'Покупаем', quantity_pair_a, 'EPX', 'за', price_a, 'USDT', 'по цене', price_asks_g_EPXUSDT) 
				print('Пара_B:', symbol_g_EPXBUSD, '#', 'Продаем', quantity_pair_b, 'EPX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_EPXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_EPXUSDT_EPXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_OPUSDT_OPBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OPUSDT != 0.0 and qty_bids_g_OPUSDT != 0.0 and price_asks_g_OPUSDT != 0.0 and qty_asks_g_OPUSDT != 0.0 and price_bids_g_OPBTC != 0.0 and qty_bids_g_OPBTC != 0.0 and price_asks_g_OPBTC != 0.0 and qty_asks_g_OPBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OPBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OPBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OPBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OPBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OPBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OPUSDT, '#', 'Покупаем', quantity_pair_a, 'OP', 'за', price_a, 'USDT', 'по цене', price_asks_g_OPUSDT) 
				print('Пара_B:', symbol_g_OPBTC, '#', 'Продаем', quantity_pair_b, 'OP', 'за', price_b, 'BTC', 'по цене', price_bids_g_OPBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OPUSDT_OPBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_OPUSDT_OPBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OPUSDT != 0.0 and qty_bids_g_OPUSDT != 0.0 and price_asks_g_OPUSDT != 0.0 and qty_asks_g_OPUSDT != 0.0 and price_bids_g_OPBUSD != 0.0 and qty_bids_g_OPBUSD != 0.0 and price_asks_g_OPBUSD != 0.0 and qty_asks_g_OPBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OPBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OPBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OPBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OPBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OPBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OPUSDT, '#', 'Покупаем', quantity_pair_a, 'OP', 'за', price_a, 'USDT', 'по цене', price_asks_g_OPUSDT) 
				print('Пара_B:', symbol_g_OPBUSD, '#', 'Продаем', quantity_pair_b, 'OP', 'за', price_b, 'BUSD', 'по цене', price_bids_g_OPBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OPUSDT_OPBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_OPUSDT_OPBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OPUSDT != 0.0 and qty_bids_g_OPUSDT != 0.0 and price_asks_g_OPUSDT != 0.0 and qty_asks_g_OPUSDT != 0.0 and price_bids_g_OPBNB != 0.0 and qty_bids_g_OPBNB != 0.0 and price_asks_g_OPBNB != 0.0 and qty_asks_g_OPBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OPBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OPBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OPBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OPBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OPBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OPUSDT, '#', 'Покупаем', quantity_pair_a, 'OP', 'за', price_a, 'USDT', 'по цене', price_asks_g_OPUSDT) 
				print('Пара_B:', symbol_g_OPBNB, '#', 'Продаем', quantity_pair_b, 'OP', 'за', price_b, 'BNB', 'по цене', price_bids_g_OPBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OPUSDT_OPBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_OPUSDT_OPEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OPUSDT != 0.0 and qty_bids_g_OPUSDT != 0.0 and price_asks_g_OPUSDT != 0.0 and qty_asks_g_OPUSDT != 0.0 and price_bids_g_OPEUR != 0.0 and qty_bids_g_OPEUR != 0.0 and price_asks_g_OPEUR != 0.0 and qty_asks_g_OPEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OPEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OPEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OPEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OPEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OPEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OPUSDT, '#', 'Покупаем', quantity_pair_a, 'OP', 'за', price_a, 'USDT', 'по цене', price_asks_g_OPUSDT) 
				print('Пара_B:', symbol_g_OPEUR, '#', 'Продаем', quantity_pair_b, 'OP', 'за', price_b, 'EUR', 'по цене', price_bids_g_OPEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OPUSDT_OPEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_OPUSDT_OPETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OPUSDT != 0.0 and qty_bids_g_OPUSDT != 0.0 and price_asks_g_OPUSDT != 0.0 and qty_asks_g_OPUSDT != 0.0 and price_bids_g_OPETH != 0.0 and qty_bids_g_OPETH != 0.0 and price_asks_g_OPETH != 0.0 and qty_asks_g_OPETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OPETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OPETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OPETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OPUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OPUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OPUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OPETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OPUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OPETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OPUSDT, '#', 'Покупаем', quantity_pair_a, 'OP', 'за', price_a, 'USDT', 'по цене', price_asks_g_OPUSDT) 
				print('Пара_B:', symbol_g_OPETH, '#', 'Продаем', quantity_pair_b, 'OP', 'за', price_b, 'ETH', 'по цене', price_bids_g_OPETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OPUSDT_OPETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_LEVERUSDT_LEVERBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LEVERUSDT != 0.0 and qty_bids_g_LEVERUSDT != 0.0 and price_asks_g_LEVERUSDT != 0.0 and qty_asks_g_LEVERUSDT != 0.0 and price_bids_g_LEVERBUSD != 0.0 and qty_bids_g_LEVERBUSD != 0.0 and price_asks_g_LEVERBUSD != 0.0 and qty_asks_g_LEVERBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LEVERBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LEVERBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LEVERBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LEVERUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LEVERUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LEVERUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LEVERBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LEVERUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LEVERBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LEVERUSDT, '#', 'Покупаем', quantity_pair_a, 'LEVER', 'за', price_a, 'USDT', 'по цене', price_asks_g_LEVERUSDT) 
				print('Пара_B:', symbol_g_LEVERBUSD, '#', 'Продаем', quantity_pair_b, 'LEVER', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LEVERBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LEVERUSDT_LEVERBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_STGUSDT_STGBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STGUSDT != 0.0 and qty_bids_g_STGUSDT != 0.0 and price_asks_g_STGUSDT != 0.0 and qty_asks_g_STGUSDT != 0.0 and price_bids_g_STGBTC != 0.0 and qty_bids_g_STGBTC != 0.0 and price_asks_g_STGBTC != 0.0 and qty_asks_g_STGBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STGBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STGBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STGBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STGBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STGBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STGUSDT, '#', 'Покупаем', quantity_pair_a, 'STG', 'за', price_a, 'USDT', 'по цене', price_asks_g_STGUSDT) 
				print('Пара_B:', symbol_g_STGBTC, '#', 'Продаем', quantity_pair_b, 'STG', 'за', price_b, 'BTC', 'по цене', price_bids_g_STGBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STGUSDT_STGBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_STGUSDT_STGBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_STGUSDT != 0.0 and qty_bids_g_STGUSDT != 0.0 and price_asks_g_STGUSDT != 0.0 and qty_asks_g_STGUSDT != 0.0 and price_bids_g_STGBUSD != 0.0 and qty_bids_g_STGBUSD != 0.0 and price_asks_g_STGBUSD != 0.0 and qty_asks_g_STGBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_STGBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_STGBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_STGBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_STGUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_STGUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_STGUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_STGBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='STGUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='STGBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_STGUSDT, '#', 'Покупаем', quantity_pair_a, 'STG', 'за', price_a, 'USDT', 'по цене', price_asks_g_STGUSDT) 
				print('Пара_B:', symbol_g_STGBUSD, '#', 'Продаем', quantity_pair_b, 'STG', 'за', price_b, 'BUSD', 'по цене', price_bids_g_STGBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_STGUSDT_STGBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_LUNCUSDT_LUNCBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_LUNCUSDT != 0.0 and qty_bids_g_LUNCUSDT != 0.0 and price_asks_g_LUNCUSDT != 0.0 and qty_asks_g_LUNCUSDT != 0.0 and price_bids_g_LUNCBUSD != 0.0 and qty_bids_g_LUNCBUSD != 0.0 and price_asks_g_LUNCBUSD != 0.0 and qty_asks_g_LUNCBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_LUNCBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_LUNCBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_LUNCBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_LUNCUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_LUNCUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_LUNCUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_LUNCBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='LUNCUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='LUNCBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_LUNCUSDT, '#', 'Покупаем', quantity_pair_a, 'LUNC', 'за', price_a, 'USDT', 'по цене', price_asks_g_LUNCUSDT) 
				print('Пара_B:', symbol_g_LUNCBUSD, '#', 'Продаем', quantity_pair_b, 'LUNC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_LUNCBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_LUNCUSDT_LUNCBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_GMXUSDT_GMXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GMXUSDT != 0.0 and qty_bids_g_GMXUSDT != 0.0 and price_asks_g_GMXUSDT != 0.0 and qty_asks_g_GMXUSDT != 0.0 and price_bids_g_GMXBTC != 0.0 and qty_bids_g_GMXBTC != 0.0 and price_asks_g_GMXBTC != 0.0 and qty_asks_g_GMXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GMXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GMXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GMXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GMXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GMXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GMXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GMXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GMXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GMXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GMXUSDT, '#', 'Покупаем', quantity_pair_a, 'GMX', 'за', price_a, 'USDT', 'по цене', price_asks_g_GMXUSDT) 
				print('Пара_B:', symbol_g_GMXBTC, '#', 'Продаем', quantity_pair_b, 'GMX', 'за', price_b, 'BTC', 'по цене', price_bids_g_GMXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GMXUSDT_GMXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_GMXUSDT_GMXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_GMXUSDT != 0.0 and qty_bids_g_GMXUSDT != 0.0 and price_asks_g_GMXUSDT != 0.0 and qty_asks_g_GMXUSDT != 0.0 and price_bids_g_GMXBUSD != 0.0 and qty_bids_g_GMXBUSD != 0.0 and price_asks_g_GMXBUSD != 0.0 and qty_asks_g_GMXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_GMXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_GMXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_GMXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_GMXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_GMXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_GMXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_GMXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='GMXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='GMXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_GMXUSDT, '#', 'Покупаем', quantity_pair_a, 'GMX', 'за', price_a, 'USDT', 'по цене', price_asks_g_GMXUSDT) 
				print('Пара_B:', symbol_g_GMXBUSD, '#', 'Продаем', quantity_pair_b, 'GMX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_GMXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_GMXUSDT_GMXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_NEBLUSDT_NEBLBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NEBLUSDT != 0.0 and qty_bids_g_NEBLUSDT != 0.0 and price_asks_g_NEBLUSDT != 0.0 and qty_asks_g_NEBLUSDT != 0.0 and price_bids_g_NEBLBTC != 0.0 and qty_bids_g_NEBLBTC != 0.0 and price_asks_g_NEBLBTC != 0.0 and qty_asks_g_NEBLBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NEBLBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NEBLBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NEBLBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NEBLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NEBLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NEBLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NEBLBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NEBLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NEBLBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NEBLUSDT, '#', 'Покупаем', quantity_pair_a, 'NEBL', 'за', price_a, 'USDT', 'по цене', price_asks_g_NEBLUSDT) 
				print('Пара_B:', symbol_g_NEBLBTC, '#', 'Продаем', quantity_pair_b, 'NEBL', 'за', price_b, 'BTC', 'по цене', price_bids_g_NEBLBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NEBLUSDT_NEBLBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_NEBLUSDT_NEBLBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_NEBLUSDT != 0.0 and qty_bids_g_NEBLUSDT != 0.0 and price_asks_g_NEBLUSDT != 0.0 and qty_asks_g_NEBLUSDT != 0.0 and price_bids_g_NEBLBUSD != 0.0 and qty_bids_g_NEBLBUSD != 0.0 and price_asks_g_NEBLBUSD != 0.0 and qty_asks_g_NEBLBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_NEBLBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_NEBLBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_NEBLBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_NEBLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_NEBLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_NEBLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_NEBLBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='NEBLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='NEBLBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_NEBLUSDT, '#', 'Покупаем', quantity_pair_a, 'NEBL', 'за', price_a, 'USDT', 'по цене', price_asks_g_NEBLUSDT) 
				print('Пара_B:', symbol_g_NEBLBUSD, '#', 'Продаем', quantity_pair_b, 'NEBL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_NEBLBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_NEBLUSDT_NEBLBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_POLYXUSDT_POLYXBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_POLYXUSDT != 0.0 and qty_bids_g_POLYXUSDT != 0.0 and price_asks_g_POLYXUSDT != 0.0 and qty_asks_g_POLYXUSDT != 0.0 and price_bids_g_POLYXBTC != 0.0 and qty_bids_g_POLYXBTC != 0.0 and price_asks_g_POLYXBTC != 0.0 and qty_asks_g_POLYXBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_POLYXBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_POLYXBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_POLYXBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_POLYXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_POLYXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_POLYXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_POLYXBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='POLYXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='POLYXBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_POLYXUSDT, '#', 'Покупаем', quantity_pair_a, 'POLYX', 'за', price_a, 'USDT', 'по цене', price_asks_g_POLYXUSDT) 
				print('Пара_B:', symbol_g_POLYXBTC, '#', 'Продаем', quantity_pair_b, 'POLYX', 'за', price_b, 'BTC', 'по цене', price_bids_g_POLYXBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_POLYXUSDT_POLYXBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_POLYXUSDT_POLYXBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_POLYXUSDT != 0.0 and qty_bids_g_POLYXUSDT != 0.0 and price_asks_g_POLYXUSDT != 0.0 and qty_asks_g_POLYXUSDT != 0.0 and price_bids_g_POLYXBUSD != 0.0 and qty_bids_g_POLYXBUSD != 0.0 and price_asks_g_POLYXBUSD != 0.0 and qty_asks_g_POLYXBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_POLYXBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_POLYXBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_POLYXBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_POLYXUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_POLYXUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_POLYXUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_POLYXBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='POLYXUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='POLYXBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_POLYXUSDT, '#', 'Покупаем', quantity_pair_a, 'POLYX', 'за', price_a, 'USDT', 'по цене', price_asks_g_POLYXUSDT) 
				print('Пара_B:', symbol_g_POLYXBUSD, '#', 'Продаем', quantity_pair_b, 'POLYX', 'за', price_b, 'BUSD', 'по цене', price_bids_g_POLYXBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_POLYXUSDT_POLYXBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_APTUSDT_APTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_APTUSDT != 0.0 and qty_bids_g_APTUSDT != 0.0 and price_asks_g_APTUSDT != 0.0 and qty_asks_g_APTUSDT != 0.0 and price_bids_g_APTBTC != 0.0 and qty_bids_g_APTBTC != 0.0 and price_asks_g_APTBTC != 0.0 and qty_asks_g_APTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_APTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_APTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_APTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_APTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_APTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_APTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_APTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='APTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='APTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_APTUSDT, '#', 'Покупаем', quantity_pair_a, 'APT', 'за', price_a, 'USDT', 'по цене', price_asks_g_APTUSDT) 
				print('Пара_B:', symbol_g_APTBTC, '#', 'Продаем', quantity_pair_b, 'APT', 'за', price_b, 'BTC', 'по цене', price_bids_g_APTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_APTUSDT_APTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_APTUSDT_APTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_APTUSDT != 0.0 and qty_bids_g_APTUSDT != 0.0 and price_asks_g_APTUSDT != 0.0 and qty_asks_g_APTUSDT != 0.0 and price_bids_g_APTBUSD != 0.0 and qty_bids_g_APTBUSD != 0.0 and price_asks_g_APTBUSD != 0.0 and qty_asks_g_APTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_APTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_APTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_APTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_APTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_APTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_APTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_APTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='APTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='APTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_APTUSDT, '#', 'Покупаем', quantity_pair_a, 'APT', 'за', price_a, 'USDT', 'по цене', price_asks_g_APTUSDT) 
				print('Пара_B:', symbol_g_APTBUSD, '#', 'Продаем', quantity_pair_b, 'APT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_APTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_APTUSDT_APTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_APTUSDT_APTEUR_EURUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_APTUSDT != 0.0 and qty_bids_g_APTUSDT != 0.0 and price_asks_g_APTUSDT != 0.0 and qty_asks_g_APTUSDT != 0.0 and price_bids_g_APTEUR != 0.0 and qty_bids_g_APTEUR != 0.0 and price_asks_g_APTEUR != 0.0 and qty_asks_g_APTEUR != 0.0 and price_bids_g_EURUSDT != 0.0 and qty_bids_g_EURUSDT != 0.0 and price_asks_g_EURUSDT != 0.0 and qty_asks_g_EURUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_EURUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_EURUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_APTEUR) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_APTEUR)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_APTEUR)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_APTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_APTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_APTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_APTEUR) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_EURUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='APTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='APTEUR', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='EURUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_APTUSDT, '#', 'Покупаем', quantity_pair_a, 'APT', 'за', price_a, 'USDT', 'по цене', price_asks_g_APTUSDT) 
				print('Пара_B:', symbol_g_APTEUR, '#', 'Продаем', quantity_pair_b, 'APT', 'за', price_b, 'EUR', 'по цене', price_bids_g_APTEUR) 
				print('Пара_C:', symbol_g_EURUSDT, '#', 'Продаем', quantity_pair_c, 'EUR', 'за', price_c, 'USDT', 'по цене', price_bids_g_EURUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_APTUSDT_APTEUR_EURUSDT_Trade).start() 

###################################################################### 


def loop_OSMOUSDT_OSMOBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OSMOUSDT != 0.0 and qty_bids_g_OSMOUSDT != 0.0 and price_asks_g_OSMOUSDT != 0.0 and qty_asks_g_OSMOUSDT != 0.0 and price_bids_g_OSMOBTC != 0.0 and qty_bids_g_OSMOBTC != 0.0 and price_asks_g_OSMOBTC != 0.0 and qty_asks_g_OSMOBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OSMOBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OSMOBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OSMOBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OSMOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OSMOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OSMOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OSMOBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OSMOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OSMOBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OSMOUSDT, '#', 'Покупаем', quantity_pair_a, 'OSMO', 'за', price_a, 'USDT', 'по цене', price_asks_g_OSMOUSDT) 
				print('Пара_B:', symbol_g_OSMOBTC, '#', 'Продаем', quantity_pair_b, 'OSMO', 'за', price_b, 'BTC', 'по цене', price_bids_g_OSMOBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OSMOUSDT_OSMOBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_OSMOUSDT_OSMOBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_OSMOUSDT != 0.0 and qty_bids_g_OSMOUSDT != 0.0 and price_asks_g_OSMOUSDT != 0.0 and qty_asks_g_OSMOUSDT != 0.0 and price_bids_g_OSMOBUSD != 0.0 and qty_bids_g_OSMOBUSD != 0.0 and price_asks_g_OSMOBUSD != 0.0 and qty_asks_g_OSMOBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_OSMOBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_OSMOBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_OSMOBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_OSMOUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_OSMOUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_OSMOUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_OSMOBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='OSMOUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='OSMOBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_OSMOUSDT, '#', 'Покупаем', quantity_pair_a, 'OSMO', 'за', price_a, 'USDT', 'по цене', price_asks_g_OSMOUSDT) 
				print('Пара_B:', symbol_g_OSMOBUSD, '#', 'Продаем', quantity_pair_b, 'OSMO', 'за', price_b, 'BUSD', 'по цене', price_bids_g_OSMOBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_OSMOUSDT_OSMOBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_HFTUSDT_HFTBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HFTUSDT != 0.0 and qty_bids_g_HFTUSDT != 0.0 and price_asks_g_HFTUSDT != 0.0 and qty_asks_g_HFTUSDT != 0.0 and price_bids_g_HFTBTC != 0.0 and qty_bids_g_HFTBTC != 0.0 and price_asks_g_HFTBTC != 0.0 and qty_asks_g_HFTBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HFTBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HFTBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HFTBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HFTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HFTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HFTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HFTBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HFTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HFTBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HFTUSDT, '#', 'Покупаем', quantity_pair_a, 'HFT', 'за', price_a, 'USDT', 'по цене', price_asks_g_HFTUSDT) 
				print('Пара_B:', symbol_g_HFTBTC, '#', 'Продаем', quantity_pair_b, 'HFT', 'за', price_b, 'BTC', 'по цене', price_bids_g_HFTBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HFTUSDT_HFTBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_HFTUSDT_HFTBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HFTUSDT != 0.0 and qty_bids_g_HFTUSDT != 0.0 and price_asks_g_HFTUSDT != 0.0 and qty_asks_g_HFTUSDT != 0.0 and price_bids_g_HFTBUSD != 0.0 and qty_bids_g_HFTBUSD != 0.0 and price_asks_g_HFTBUSD != 0.0 and qty_asks_g_HFTBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HFTBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HFTBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HFTBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HFTUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HFTUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HFTUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HFTBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HFTUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HFTBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HFTUSDT, '#', 'Покупаем', quantity_pair_a, 'HFT', 'за', price_a, 'USDT', 'по цене', price_asks_g_HFTUSDT) 
				print('Пара_B:', symbol_g_HFTBUSD, '#', 'Продаем', quantity_pair_b, 'HFT', 'за', price_b, 'BUSD', 'по цене', price_bids_g_HFTBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HFTUSDT_HFTBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_PHBUSDT_PHBBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PHBUSDT != 0.0 and qty_bids_g_PHBUSDT != 0.0 and price_asks_g_PHBUSDT != 0.0 and qty_asks_g_PHBUSDT != 0.0 and price_bids_g_PHBBTC != 0.0 and qty_bids_g_PHBBTC != 0.0 and price_asks_g_PHBBTC != 0.0 and qty_asks_g_PHBBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PHBBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PHBBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PHBBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PHBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PHBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PHBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PHBBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PHBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PHBBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PHBUSDT, '#', 'Покупаем', quantity_pair_a, 'PHB', 'за', price_a, 'USDT', 'по цене', price_asks_g_PHBUSDT) 
				print('Пара_B:', symbol_g_PHBBTC, '#', 'Продаем', quantity_pair_b, 'PHB', 'за', price_b, 'BTC', 'по цене', price_bids_g_PHBBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PHBUSDT_PHBBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_PHBUSDT_PHBBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_PHBUSDT != 0.0 and qty_bids_g_PHBUSDT != 0.0 and price_asks_g_PHBUSDT != 0.0 and qty_asks_g_PHBUSDT != 0.0 and price_bids_g_PHBBUSD != 0.0 and qty_bids_g_PHBBUSD != 0.0 and price_asks_g_PHBBUSD != 0.0 and qty_asks_g_PHBBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_PHBBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_PHBBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_PHBBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_PHBUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_PHBUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_PHBUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_PHBBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='PHBUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='PHBBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_PHBUSDT, '#', 'Покупаем', quantity_pair_a, 'PHB', 'за', price_a, 'USDT', 'по цене', price_asks_g_PHBUSDT) 
				print('Пара_B:', symbol_g_PHBBUSD, '#', 'Продаем', quantity_pair_b, 'PHB', 'за', price_b, 'BUSD', 'по цене', price_bids_g_PHBBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_PHBUSDT_PHBBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_HOOKUSDT_HOOKBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HOOKUSDT != 0.0 and qty_bids_g_HOOKUSDT != 0.0 and price_asks_g_HOOKUSDT != 0.0 and qty_asks_g_HOOKUSDT != 0.0 and price_bids_g_HOOKBTC != 0.0 and qty_bids_g_HOOKBTC != 0.0 and price_asks_g_HOOKBTC != 0.0 and qty_asks_g_HOOKBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HOOKBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HOOKBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HOOKBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HOOKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HOOKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HOOKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HOOKBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HOOKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HOOKBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HOOKUSDT, '#', 'Покупаем', quantity_pair_a, 'HOOK', 'за', price_a, 'USDT', 'по цене', price_asks_g_HOOKUSDT) 
				print('Пара_B:', symbol_g_HOOKBTC, '#', 'Продаем', quantity_pair_b, 'HOOK', 'за', price_b, 'BTC', 'по цене', price_bids_g_HOOKBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HOOKUSDT_HOOKBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_HOOKUSDT_HOOKBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HOOKUSDT != 0.0 and qty_bids_g_HOOKUSDT != 0.0 and price_asks_g_HOOKUSDT != 0.0 and qty_asks_g_HOOKUSDT != 0.0 and price_bids_g_HOOKBUSD != 0.0 and qty_bids_g_HOOKBUSD != 0.0 and price_asks_g_HOOKBUSD != 0.0 and qty_asks_g_HOOKBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HOOKBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HOOKBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HOOKBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HOOKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HOOKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HOOKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HOOKBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HOOKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HOOKBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HOOKUSDT, '#', 'Покупаем', quantity_pair_a, 'HOOK', 'за', price_a, 'USDT', 'по цене', price_asks_g_HOOKUSDT) 
				print('Пара_B:', symbol_g_HOOKBUSD, '#', 'Продаем', quantity_pair_b, 'HOOK', 'за', price_b, 'BUSD', 'по цене', price_bids_g_HOOKBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HOOKUSDT_HOOKBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_HOOKUSDT_HOOKBNB_BNBUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HOOKUSDT != 0.0 and qty_bids_g_HOOKUSDT != 0.0 and price_asks_g_HOOKUSDT != 0.0 and qty_asks_g_HOOKUSDT != 0.0 and price_bids_g_HOOKBNB != 0.0 and qty_bids_g_HOOKBNB != 0.0 and price_asks_g_HOOKBNB != 0.0 and qty_asks_g_HOOKBNB != 0.0 and price_bids_g_BNBUSDT != 0.0 and qty_bids_g_BNBUSDT != 0.0 and price_asks_g_BNBUSDT != 0.0 and qty_asks_g_BNBUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BNBUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BNBUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HOOKBNB) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HOOKBNB)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HOOKBNB)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HOOKUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HOOKUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HOOKUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HOOKBNB) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BNBUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HOOKUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HOOKBNB', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BNBUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HOOKUSDT, '#', 'Покупаем', quantity_pair_a, 'HOOK', 'за', price_a, 'USDT', 'по цене', price_asks_g_HOOKUSDT) 
				print('Пара_B:', symbol_g_HOOKBNB, '#', 'Продаем', quantity_pair_b, 'HOOK', 'за', price_b, 'BNB', 'по цене', price_bids_g_HOOKBNB) 
				print('Пара_C:', symbol_g_BNBUSDT, '#', 'Продаем', quantity_pair_c, 'BNB', 'за', price_c, 'USDT', 'по цене', price_bids_g_BNBUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HOOKUSDT_HOOKBNB_BNBUSDT_Trade).start() 

###################################################################### 


def loop_MAGICUSDT_MAGICBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MAGICUSDT != 0.0 and qty_bids_g_MAGICUSDT != 0.0 and price_asks_g_MAGICUSDT != 0.0 and qty_asks_g_MAGICUSDT != 0.0 and price_bids_g_MAGICBTC != 0.0 and qty_bids_g_MAGICBTC != 0.0 and price_asks_g_MAGICBTC != 0.0 and qty_asks_g_MAGICBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MAGICBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MAGICBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MAGICBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MAGICUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MAGICUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MAGICUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MAGICBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MAGICUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MAGICBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MAGICUSDT, '#', 'Покупаем', quantity_pair_a, 'MAGIC', 'за', price_a, 'USDT', 'по цене', price_asks_g_MAGICUSDT) 
				print('Пара_B:', symbol_g_MAGICBTC, '#', 'Продаем', quantity_pair_b, 'MAGIC', 'за', price_b, 'BTC', 'по цене', price_bids_g_MAGICBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MAGICUSDT_MAGICBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_MAGICUSDT_MAGICBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_MAGICUSDT != 0.0 and qty_bids_g_MAGICUSDT != 0.0 and price_asks_g_MAGICUSDT != 0.0 and qty_asks_g_MAGICUSDT != 0.0 and price_bids_g_MAGICBUSD != 0.0 and qty_bids_g_MAGICBUSD != 0.0 and price_asks_g_MAGICBUSD != 0.0 and qty_asks_g_MAGICBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_MAGICBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_MAGICBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_MAGICBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_MAGICUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_MAGICUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_MAGICUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_MAGICBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='MAGICUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='MAGICBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_MAGICUSDT, '#', 'Покупаем', quantity_pair_a, 'MAGIC', 'за', price_a, 'USDT', 'по цене', price_asks_g_MAGICUSDT) 
				print('Пара_B:', symbol_g_MAGICBUSD, '#', 'Продаем', quantity_pair_b, 'MAGIC', 'за', price_b, 'BUSD', 'по цене', price_bids_g_MAGICBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_MAGICUSDT_MAGICBUSD_BUSDUSDT_Trade).start() 

###################################################################### 


def loop_HIFIUSDT_HIFIETH_ETHUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_HIFIUSDT != 0.0 and qty_bids_g_HIFIUSDT != 0.0 and price_asks_g_HIFIUSDT != 0.0 and qty_asks_g_HIFIUSDT != 0.0 and price_bids_g_HIFIETH != 0.0 and qty_bids_g_HIFIETH != 0.0 and price_asks_g_HIFIETH != 0.0 and qty_asks_g_HIFIETH != 0.0 and price_bids_g_ETHUSDT != 0.0 and qty_bids_g_ETHUSDT != 0.0 and price_asks_g_ETHUSDT != 0.0 and qty_asks_g_ETHUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_ETHUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_ETHUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_HIFIETH) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_HIFIETH)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_HIFIETH)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_HIFIUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_HIFIUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_HIFIUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_HIFIETH) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_ETHUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.075') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='HIFIUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='HIFIETH', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='ETHUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_HIFIUSDT, '#', 'Покупаем', quantity_pair_a, 'HIFI', 'за', price_a, 'USDT', 'по цене', price_asks_g_HIFIUSDT) 
				print('Пара_B:', symbol_g_HIFIETH, '#', 'Продаем', quantity_pair_b, 'HIFI', 'за', price_b, 'ETH', 'по цене', price_bids_g_HIFIETH) 
				print('Пара_C:', symbol_g_ETHUSDT, '#', 'Продаем', quantity_pair_c, 'ETH', 'за', price_c, 'USDT', 'по цене', price_bids_g_ETHUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_HIFIUSDT_HIFIETH_ETHUSDT_Trade).start() 

###################################################################### 


def loop_RPLUSDT_RPLBTC_BTCUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RPLUSDT != 0.0 and qty_bids_g_RPLUSDT != 0.0 and price_asks_g_RPLUSDT != 0.0 and qty_asks_g_RPLUSDT != 0.0 and price_bids_g_RPLBTC != 0.0 and qty_bids_g_RPLBTC != 0.0 and price_asks_g_RPLBTC != 0.0 and qty_asks_g_RPLBTC != 0.0 and price_bids_g_BTCUSDT != 0.0 and qty_bids_g_BTCUSDT != 0.0 and price_asks_g_BTCUSDT != 0.0 and qty_asks_g_BTCUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BTCUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BTCUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RPLBTC) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RPLBTC)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RPLBTC)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RPLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RPLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RPLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RPLBTC) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BTCUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RPLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RPLBTC', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BTCUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RPLUSDT, '#', 'Покупаем', quantity_pair_a, 'RPL', 'за', price_a, 'USDT', 'по цене', price_asks_g_RPLUSDT) 
				print('Пара_B:', symbol_g_RPLBTC, '#', 'Продаем', quantity_pair_b, 'RPL', 'за', price_b, 'BTC', 'по цене', price_bids_g_RPLBTC) 
				print('Пара_C:', symbol_g_BTCUSDT, '#', 'Продаем', quantity_pair_c, 'BTC', 'за', price_c, 'USDT', 'по цене', price_bids_g_BTCUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RPLUSDT_RPLBTC_BTCUSDT_Trade).start() 

###################################################################### 


def loop_RPLUSDT_RPLBUSD_BUSDUSDT_Trade(): 

	while True: 
		time.sleep(0.1)

		if price_bids_g_RPLUSDT != 0.0 and qty_bids_g_RPLUSDT != 0.0 and price_asks_g_RPLUSDT != 0.0 and qty_asks_g_RPLUSDT != 0.0 and price_bids_g_RPLBUSD != 0.0 and qty_bids_g_RPLBUSD != 0.0 and price_asks_g_RPLBUSD != 0.0 and qty_asks_g_RPLBUSD != 0.0 and price_bids_g_BUSDUSDT != 0.0 and qty_bids_g_BUSDUSDT != 0.0 and price_asks_g_BUSDUSDT != 0.0 and qty_asks_g_BUSDUSDT != 0.0: 

			quantity_pair_c_raschet = Decimal(usdt_count) / Decimal(price_bids_g_BUSDUSDT) 
			quantity_pair_c_raschet = Decimal(f_minqty_size_down(quantity_pair_c_raschet, stepSize_g_BUSDUSDT)) 
			test3 = quantity_pair_c_raschet 
			quantity_pair_b_raschet = Decimal(test3) / Decimal(price_bids_g_RPLBUSD) 
			test2 = Decimal(f_minqty_size_down(quantity_pair_b_raschet, stepSize_g_RPLBUSD)) 
			while test2 < quantity_pair_b_raschet: 
				test2 = Decimal(f_minqty_size_up(quantity_pair_b_raschet, stepSize_g_RPLBUSD)) 
			test1 = Decimal(f_minqty_size_down(test2, stepSize_g_RPLUSDT)) 
			while test1 < test2: 
				test1 = Decimal(f_minqty_size_up(test1, stepSize_g_RPLUSDT)) 
			quantity_pair_a = test1 
			quantity_pair_b = test2 
			quantity_pair_c = test3 
			price_a = Decimal(quantity_pair_a) * Decimal(price_asks_g_RPLUSDT) 
			price_b = Decimal(quantity_pair_b) * Decimal(price_bids_g_RPLBUSD) 
			price_c = Decimal(quantity_pair_c) * Decimal(price_bids_g_BUSDUSDT) 
			pribil = Decimal(price_c) - Decimal(price_a) 

			time_test = datetime.datetime.now() 
			a = Decimal(price_c) 
			b = Decimal(price_a) 
			c = Decimal((a / b - 1) * 100) 
			commission_a = Decimal('0.075') 
			commission_b = Decimal('0.075') 
			commission_c = Decimal('0.0') 
			commission_all = Decimal(commission_a) + Decimal(commission_b) + Decimal(commission_c) 
			if c > commission_all: 

				locker.acquire()
				a = client.order_market_buy( 
					symbol='RPLUSDT', 
					quantity=float(quantity_pair_a) 
				) 
				b = client.order_market_sell( 
					symbol='RPLBUSD', 
					quantity=float(quantity_pair_b) 
				) 
				c = client.order_market_sell( 
					symbol='BUSDUSDT', 
					quantity=float(quantity_pair_c) 
				) 
				print('################################################################################################################') 
				print(time_test) 
				print('Общая коммисия:', commission_all) 
				print('Пара_А:', symbol_g_RPLUSDT, '#', 'Покупаем', quantity_pair_a, 'RPL', 'за', price_a, 'USDT', 'по цене', price_asks_g_RPLUSDT) 
				print('Пара_B:', symbol_g_RPLBUSD, '#', 'Продаем', quantity_pair_b, 'RPL', 'за', price_b, 'BUSD', 'по цене', price_bids_g_RPLBUSD) 
				print('Пара_C:', symbol_g_BUSDUSDT, '#', 'Продаем', quantity_pair_c, 'BUSD', 'за', price_c, 'USDT', 'по цене', price_bids_g_BUSDUSDT) 
				print('Прибыль:', pribil, 'Прибыль в %:', c, '%') 
				locker.release() 

Thread(target=loop_RPLUSDT_RPLBUSD_BUSDUSDT_Trade).start() 

###################################################################### 
