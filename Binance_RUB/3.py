import json
import time
import subprocess

file_pairs_buy_para_b_test = '1_pairs_buy_para_b_test.json'


def f_file_pairs_buy_para_b_test():
    with open(file_pairs_buy_para_b_test) as file_data:
        data_a = json.load(file_data)

    return data_a


all_pairs_btc = "Run_BTC_test_2" + ".py"

with open(all_pairs_btc, 'w') as file3:
    file3.write("")

with open(all_pairs_btc, 'a') as file3:
    file3.write(
        "import time \n"
        "import datetime \n"
        "import json \n"
        "import websocket \n"
        "import asyncio \n"
        "from threading import * \n"
        "import datetime \n"
        "from binance.client import Client \n"
        "\n"
        "def f_minqty_size_up(kolichestvo, stepSize): \n"
        "\tdef adjust_to_step(value, step, increase=True): \n"
        "\t\treturn ((int(value * 100000000) - int(value * 100000000) % int( \n"
        "\t\t\tfloat(step) * 100000000)) / 100000000) + (float(step) if increase else 0) \n"
        "\n"
        "\tsell_amount_a = adjust_to_step(kolichestvo, stepSize) \n"
        "\n"
        "\treturn sell_amount_a \n"
        "\n"
        "def f_minqty_size_down(kolichestvo, stepSize): \n"
        "\tdef adjust_to_step(value, step, increase=False): \n"
        "\t\treturn ((int(value * 100000000) - int(value * 100000000) % int( \n"
        "\t\t\tfloat(step) * 100000000)) / 100000000) + (float(step) if increase else 0) \n"
        "\n"
        "\tsell_amount_a = adjust_to_step(kolichestvo, stepSize) \n"
        "\n"
        "\treturn sell_amount_a \n"
        "\n"
        "api_key = 'A6Bc2FXbmn2dreyATiWkHMVFP3HTXNgTJTkKfVHihMuTb907wgHHkfqYHE8LGLdG' \n"
        "secret_key = 'zvP6vTEroLyMwoFut4pQKf4K2s05baZeQhXzVSC4wSiYB0G3l45dpt0EDcQGsQMA' \n"
        "\n"
        "client = Client(api_key, secret_key) \n"
        "\n"
        "usdt_count = float(11.0) \n"
        "\n"
        # "locker = threading.RLock() \n"
        "\n"
        "all_pribil = float(0.0) \n"
        "\n"
        f"symbol_c_g_BTCUSDT = 'BTCUSDT' \n"
        f"price_bids_c_g_BTCUSDT = float(0.0) \n"
        f"qty_bids_c_g_BTCUSDT = float(0.0) \n"
        f"price_asks_c_g_BTCUSDT = float(0.0) \n"
        f"qty_asks_c_g_BTCUSDT = float(0.0) \n"
        f"stepSize_BTCUSDT = '0.00001000' \n"
        "\n"
        f"def on_message_BTCUSDT(ws, message): \n"
        "\t#locker.acquire() \n"
        "\tdata = json.loads(message) \n"
        "\n"
        "\tsymbol_c_l_BTCUSDT = 'BTCUSDT' \n"
        "\tprice_bids_c_l_BTCUSDT = data['bids'][0][0] \n"
        "\tqty_bids_c_l_BTCUSDT = data['bids'][0][1] \n"
        "\tprice_asks_c_l_BTCUSDT = data['asks'][0][0] \n"
        "\tqty_asks_c_l_BTCUSDT = data['asks'][0][1] \n"
        "\n"
        f"\tglobal symbol_c_g_BTCUSDT \n"
        f"\tglobal price_bids_c_g_BTCUSDT \n"
        f"\tglobal qty_bids_c_g_BTCUSDT \n"
        f"\tglobal price_asks_c_g_BTCUSDT \n"
        f"\tglobal qty_asks_c_g_BTCUSDT \n"
        "\n"
        f"\tsymbol_c_g_BTCUSDT = symbol_c_l_BTCUSDT \n"
        f"\tprice_bids_c_g_BTCUSDT= price_bids_c_l_BTCUSDT \n"
        f"\tqty_bids_c_g_BTCUSDT= qty_bids_c_l_BTCUSDT \n"
        f"\tprice_asks_c_g_BTCUSDT = price_asks_c_l_BTCUSDT \n"
        f"\tqty_asks_c_g_BTCUSDT= qty_asks_c_l_BTCUSDT \n"
        "\t#locker.release() \n"
        "\n"
        f"def loop_BTCUSDT(): \n"
        f"\tsocket1 = f'wss://stream.binance.com:9443/ws/btcusdt@depth5@100ms' \n"
        f"\tws = websocket.WebSocketApp(socket1, on_message=on_message_BTCUSDT) \n"
        "\tws.run_forever() \n"
        "\n"
        f"Thread(target=loop_BTCUSDT).start() \n"
        "\n"
    )

for i in f_file_pairs_buy_para_b_test():
    symbol_a = i['symbol_a']
    symbol_aa = symbol_a.lower()
    stepSize_a = i['stepSize_a']

    symbol_b = i['symbol_b']
    symbol_bb = symbol_b.lower()
    stepSize_b = i['stepSize_b']

    with open(all_pairs_btc, 'a') as file3:
        file3.write(

            ###############################################################################################
            f"stream{symbol_aa} = '{symbol_aa}@bookTicker'\n"
            f"stream{symbol_bb}  = '{symbol_bb}@bookTicker'\n"
            "\n"
            f"symbol_a_g_{symbol_a} = '{symbol_a}' \n"
            f"price_bids_a_g_{symbol_a} = float(0.0) \n"
            f"qty_bids_a_g_{symbol_a} = float(0.0) \n"
            f"price_asks_a_g_{symbol_a} = float(0.0) \n"
            f"qty_asks_a_g_{symbol_a} = float(0.0) \n"
            "\n"
            f"stepSize_{symbol_a} = {stepSize_a} \n"
            "\n"
            f"symbol_b_g_{symbol_b} = '{symbol_b}' \n"
            f"price_bids_b_g_{symbol_b} = float(0.0) \n"
            f"qty_bids_b_g_{symbol_b} = float(0.0) \n"
            f"price_asks_b_g_{symbol_b} = float(0.0) \n"
            f"qty_asks_b_g_{symbol_b} = float(0.0) \n"
            "\n"
            f"stepSize_{symbol_b} = {stepSize_b} \n"
            "\n"
            f"def on_message_{symbol_a}(ws, message): \n"
            "\tdata = json.loads(message) \n"
            "\n"
            f"\tif data['stream'] == stream{symbol_aa} :\n"
            f"\t\tsymbol_a_l_{symbol_a} = data['data']['s'] \n"
            f"\t\tprice_bids_a_l_{symbol_a} = data['data']['b'] \n"
            f"\t\tqty_bids_a_l_{symbol_a} = data['data']['B'] \n"
            f"\t\tprice_asks_a_l_{symbol_a} = data['data']['a'] \n"
            f"\t\tqty_asks_a_l_{symbol_a} = data['data']['A'] \n"
            "\n"
            f"\t\tglobal symbol_a_g_{symbol_a} \n"
            f"\t\tglobal price_bids_a_g_{symbol_a} \n"
            f"\t\tglobal qty_bids_a_g_{symbol_a} \n"
            f"\t\tglobal price_asks_a_g_{symbol_a} \n"
            f"\t\tglobal qty_asks_a_g_{symbol_a} \n"
            "\n"
            f"\t\tsymbol_a_g_{symbol_a} = symbol_a_l_{symbol_a} \n"
            f"\t\tprice_bids_a_g_{symbol_a} = price_bids_a_l_{symbol_a} \n"
            f"\t\tqty_bids_a_g_{symbol_a} = qty_bids_a_l_{symbol_a} \n"
            f"\t\tprice_asks_a_g_{symbol_a} = price_asks_a_l_{symbol_a} \n"
            f"\t\tqty_asks_a_g_{symbol_a} = qty_asks_a_l_{symbol_a} \n"
            "\n"
            f"\tif data['stream'] == stream{symbol_bb} :\n"

            "\t\tdata = json.loads(message) \n"
            "\n"
            f"\t\tsymbol_b_l_{symbol_b} = data['data']['s'] \n"
            f"\t\tprice_bids_b_l_{symbol_b} = data['data']['b'] \n"
            f"\t\tqty_bids_b_l_{symbol_b} = data['data']['B']\n"
            f"\t\tprice_asks_b_l_{symbol_b} = data['data']['a'] \n"
            f"\t\tqty_asks_b_l_{symbol_b} = data['data']['A'] \n"
            "\n"
            f"\t\tglobal symbol_b_g_{symbol_b} \n"
            f"\t\tglobal price_bids_b_g_{symbol_b} \n"
            f"\t\tglobal qty_bids_b_g_{symbol_b} \n"
            f"\t\tglobal price_asks_b_g_{symbol_b} \n"
            f"\t\tglobal qty_asks_b_g_{symbol_b} \n"
            "\n"
            f"\t\tsymbol_b_g_{symbol_b} = symbol_b_l_{symbol_b} \n"
            f"\t\tprice_bids_b_g_{symbol_b} = price_bids_b_l_{symbol_b} \n"
            f"\t\tqty_bids_b_g_{symbol_b} = qty_bids_b_l_{symbol_b} \n"
            f"\t\tprice_asks_b_g_{symbol_b} = price_asks_b_l_{symbol_b} \n"
            f"\t\tqty_asks_b_g_{symbol_b} = qty_asks_b_l_{symbol_b} \n"
            "\n"
            # f"\tThread(target=loop_{symbol_a}_Trade).start() \n"
            "\n"
            f"def loop_{symbol_a}():\n"
            "\tsocket1 = f'wss://stream.binance.com:9443/stream?streams={stream"f"{symbol_aa}""}""/""{stream"f"{symbol_bb}""}""' \n"
            "\n"
            f"\tws = websocket.WebSocketApp(socket1, \n"
            f"\ton_message=on_message_{symbol_a} \n"
            f"\t) \n"
            "\n"
            "\tws.run_forever() \n"
            "\n"
            f"Thread(target=loop_{symbol_a}).start()\n"
            "\n"
            f"def loop_{symbol_a}_Trade(): \n"

            "\twhile True: \n"
            # "\t\tlocker.acquire() \n"
            "\t\ttime.sleep(0.1)\n"
            "\n"
            # "\t\tlocker.acquire() \n"
            "\n"
            f"\t\tif price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_{symbol_a} != 0.0 and qty_bids_a_g_{symbol_a} != 0.0 and price_asks_a_g_{symbol_a} != 0.0 and qty_asks_a_g_{symbol_a} != 0.0 and price_bids_b_g_{symbol_b} != 0.0 and qty_bids_b_g_{symbol_b} != 0.0 and price_asks_b_g_{symbol_b} != 0.0 and qty_asks_b_g_{symbol_b} != 0.0: \n"
            #######################################################################################################################
            "\n"
            # Вычисляем сколько нужно продать в конце (пара С) BTC при депозите usdt_count.
            f"\t\t\tpraice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) \n"
            f"\t\t\tpraice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) \n"
            "\t\t\tpraice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) \n"
            "\n"
            # Вычесляем сколько нужно продать в конце (пара B) ETH при praice_pair_c_raschet_size_up
            f"\t\t\tpraice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_{symbol_b}) \n"
            f"\t\t\tpraice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_{symbol_b})) \n"
            "\t\t\tpraice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) \n"
            "\n"
            # Вычесляем сколько нужно купить в конце (пара А) ETH при praice_pair_b_raschet_size_up
            f"\t\t\tprice_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_{symbol_a})) \n"
            f"\t\t\tprice_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_{symbol_a}) \n"
            "\t\t\tpraice_pair_a_raschet_round = round(price_pair_a_raschet, 14) \n"
            "\t\n"
            ##############################################################################
            ##############################################################################
            ##############################################################################

            "\t\t\tprice_a = round(price_pair_a_raschet_size_up, 14) \n"
            "\n"
            f"\t\t\tprice_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_{symbol_b})) \n"
            f"\t\t\tprice_b = price_b_round_size_down * float(price_bids_b_g_{symbol_b}) \n"
            "\t\t\tprice_b_round = round(price_b, 14) \n"
            "\n"
            f"\t\t\tprice_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) \n"
            f"\t\t\tprice_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) \n"
            "\t\t\tprice_c_round = round(price_c, 7) \n"
            "\n"
            "\t\t\ta = 0.225 / 100 \n"
            "\t\t\tb = price_c_round * a \n"
            "\t\t\titog_minus_proc = price_c_round - b \n"
            "\n"
            "\t\t\tpribil = itog_minus_proc - praice_pair_a_raschet_round \n"
            "\n"
            "\t\t\ttime_test = datetime.datetime.now() \n"
            "\n"
            "\t\t\tif pribil > 0.01: \n"
            # "\t\t\tlocker.acquire() \n"
            "\n"
            "\t\t\t\tprint('1111') \n"
            "\t\t\t\tglobal all_pribil \n"
            "\t\t\t\tall_pribil = float(all_pribil) + float(pribil) \n"
            "\n"
            # f"\t\t\ttest_a = (float(qty_asks_a_g_{symbol_a}) - float(price_a)) \n"
            # f"\t\t\ttest_a2 = (float(qty_asks_a_g_{symbol_a}) / float(price_a)) \n"
            # "\n"
            # f"\t\t\ttest_b = (float(qty_bids_b_g_{symbol_b}) - float(price_b_round)) \n"
            # f"\t\t\ttest_b2 = (float(qty_bids_b_g_{symbol_b}) / float(price_b_round)) \n"
            # "\n"
            # f"\t\t\ttest_c = (float(qty_bids_c_g_BTCUSDT) - float(price_c_round_size_down)) \n"
            # f"\t\t\ttest_c2 = (float(qty_bids_c_g_BTCUSDT) / float(price_c_round_size_down)) \n"
            # "\n"
            # "\t\t\tif test_a2 > 5.0 and test_b2 > 5.0 and test_c2 > 1.0 :\n"
            "\t\t\t\tprint('############################################################################################################') \n"
            f"\t\t\t\tprint('Kupili:', symbol_a_g_{symbol_a}, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_{symbol_a}, 'potratili:', praice_pair_a_raschet_round, time_test) \n"
            f"\t\t\t\tprint('Prodali:', symbol_b_g_{symbol_b}, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_{symbol_b}) \n"
            f"\t\t\t\tprint('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) \n"
            f"\t\t\t\tprint('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) \n"
            # "\t\t\t\tprint(test_a, test_a2, '|', test_b, test_b2, '|', test_c, test_c2) \n"
            "\t\t\t\tprint(all_pribil) \n"
            "\n"
            f"\t\t\t\ta = client.order_market_buy(\n"
            f"\t\t\t\tsymbol='{symbol_a}',\n"
            f"\t\t\t\tquantity=float(price_a)\n"
            f"\t\t\t\t)\n"

            f"\t\t\t\tprint(symbol_a_g_{symbol_a}, price_asks_a_g_{symbol_a}) \n"

            f"\t\t\t\tb = client.order_market_sell(\n"
            f"\t\t\t\tsymbol='{symbol_b}',\n"
            f"\t\t\t\tquantity=float(price_b_round_size_down)\n"
            f"\t\t\t\t)\n"

            f"\t\t\t\tc = client.order_market_sell(\n"
            "\t\t\t\tsymbol='BTCUSDT',\n"
            f"\t\t\t\tquantity=float(price_c_round_size_down)\n"
            f"\t\t\t\t)\n"


            # "\t\t\t\ttime_test = datetime.datetime.now()\n"
            # f"\t\t\t\tprint(symbol_a_g_{symbol_a}, price_asks_a_g_{symbol_a}, time_test) \n"
            "\t\t\t\ttime.sleep(1) \n"
            # "\t\t\tlocker.release() \n"
            "\n"
            f"Thread(target=loop_{symbol_a}_Trade).start() \n"
            "\n"
        )