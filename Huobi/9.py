f"symbol_c_g_HTUSDT = 'HTUSDT' \n"
f"price_bids_c_g_HTUSDT = float(0.0) \n"
f"qty_bids_c_g_HTUSDT = float(0.0) \n"
f"qprice_asks_c_g_HTUSDT = float(0.0) \n"
f"qty_asks_c_g_HTUSDT = float(0.0) \n"
"\n"
f"def on_message_HTUSDT(ws, message): \n"
"\t#locker.acquire() \n"
"\tdata = json.loads(gzip.decompress(message)) \n"
"\n"
"\tif 'ping' in data: \n"
# Отправить pong
"\t\tws.send(json.dumps({ \n"
"\t\t\t'pong': data['ping'] \n"
"\t\t})) \n"
"\n"
"\telse: \n"
"\n"
"\t\tsymbol_c_l_HTUSDT = 'HTUSDT' \n"
"\t\tprice_bids_c_l_HTUSDT = data['tick']['bid'] \n"
"\t\tqty_bids_c_l_HTUSDT = data['tick']['bidSize'] \n"
"\t\tprice_asks_c_l_HTUSDT = data['tick']['ask'] \n"
"\t\tqty_asks_c_l_HTUSDT = data['tick']['askSize'] \n"
"\n"
f"\t\tglobal symbol_c_g_HTUSDT \n"
f"\t\tglobal price_bids_c_g_HTUSDT \n"
f"\t\tglobal qty_bids_c_g_HTUSDT \n"
f"\t\tglobal qprice_asks_c_g_HTUSDT \n"
f"\t\tglobal qty_asks_c_g_HTUSDT \n"
"\n"
f"\t\tsymbol_c_g_HTUSDT = symbol_c_l_HTUSDT \n"
f"\t\tprice_bids_c_g_HTUSDT= price_bids_c_l_HTUSDT \n"
f"\t\tqty_bids_c_g_HTUSDT= qty_bids_c_l_HTUSDT \n"
f"\t\tqprice_asks_c_g_HTUSDT = price_asks_c_l_HTUSDT \n"
f"\t\tqty_asks_c_g_HTUSDT= qty_asks_c_l_HTUSDT \n"
"\t#locker.release() \n"
"\n"
"def on_close_HTUSDT(ws): \n"
"\tprint('### closed ###') \n"
"\n"
"def on_error_HTUSDT(ws, message): \n"
"\tprint(message) \n"
"\n"
"def on_open_HTUSDT(ws): \n"
"\tws.send(json.dumps({'sub': f'market.htusdt.ticker'})) \n"
"\n"
f"def oloop_HTUSDT(): \n"
f"\tws = websocket.WebSocketApp('wss://api.huobi.pro/ws', \n"
"\t\ton_message=on_message_HTUSDT, \n"
"\t\ton_close=on_close_HTUSDT, \n"
"\t\ton_error=on_error_HTUSDT) \n"
f"\tws.on_open = on_open_HTUSDT \n"
"\tws.run_forever() \n"
"\n"
f"Thread(target=oloop_HTUSDT).start() \n"
"\n"