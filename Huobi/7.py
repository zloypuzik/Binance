import json
import time
import subprocess

file_pairs_buy_para_b_test = '../Huobi/1_pairs_buy_para_b_test.json'


def f_file_pairs_buy_para_b_test():
    with open(file_pairs_buy_para_b_test) as file_data:
        data_a = json.load(file_data)

    return data_a


all_pairs_btc = "Run_BTC_test_2" + ".py"

with open(all_pairs_btc, 'w') as file3:
    file3.write("")

with open(all_pairs_btc, 'a') as file3:
    file3.write(
        "import time \n"
        "import datetime \n"
        "import json \n"
        "import websocket \n"
        "import asyncio \n"
        "from threading import * \n"
        "import datetime \n"
        "import gzip \n"
        "\n"
        "usdt_count = float(11.0) \n"
        "\n"
        # "locker = threading.RLock() \n"
        "\n"
        "all_pribil = float(0.0) \n"
        "\n"
################################################################################
        f"symbol_c_g_BTCUSDT = 'BTCUSDT' \n"
        f"price_bids_c_g_BTCUSDT = float(0.0) \n"
        f"qty_bids_c_g_BTCUSDT = float(0.0) \n"
        f"price_asks_c_g_BTCUSDT = float(0.0) \n"
        f"qty_asks_c_g_BTCUSDT = float(0.0) \n"
        "\n"
        f"def on_message_BTCUSDT(ws, message): \n"
        "\t#locker.acquire() \n"
        "\tdata = json.loads(gzip.decompress(message)) \n"
        "\n"
        "\tif 'ping' in data: \n"
        # Отправить pong
            "\t\tws.send(json.dumps({ \n"
            "\t\t\t'pong': data['ping'] \n"
            "\t\t})) \n"
        "\n"
        "\telse: \n"
        "\n"
        "\t\tsymbol_c_l_BTCUSDT = 'BTCUSDT' \n"
        "\t\tprice_bids_c_l_BTCUSDT = data['tick']['bid'] \n"
        "\t\tqty_bids_c_l_BTCUSDT = data['tick']['bidSize'] \n"
        "\t\tprice_asks_c_l_BTCUSDT = data['tick']['ask'] \n"
        "\t\tqty_asks_c_l_BTCUSDT = data['tick']['askSize'] \n"
        "\n"
        f"\t\tglobal symbol_c_g_BTCUSDT \n"
        f"\t\tglobal price_bids_c_g_BTCUSDT \n"
        f"\t\tglobal qty_bids_c_g_BTCUSDT \n"
        f"\t\tglobal price_asks_c_g_BTCUSDT \n"
        f"\t\tglobal qty_asks_c_g_BTCUSDT \n"
        "\n"
        f"\t\tsymbol_c_g_BTCUSDT = symbol_c_l_BTCUSDT \n"
        f"\t\tprice_bids_c_g_BTCUSDT= price_bids_c_l_BTCUSDT \n"
        f"\t\tqty_bids_c_g_BTCUSDT= qty_bids_c_l_BTCUSDT \n"
        f"\t\tprice_asks_c_g_BTCUSDT = price_asks_c_l_BTCUSDT \n"
        f"\t\tqty_asks_c_g_BTCUSDT= qty_asks_c_l_BTCUSDT \n"
        "\t#locker.release() \n"
        "\n"
        "def on_close_BTCUSDT(ws): \n"
            "\tprint('### closed ###') \n"
        "\n"
        "def on_error_BTCUSDT(ws, message): \n"
            "\tprint(message) \n"
        "\n"
        "def on_open_BTCUSDT(ws): \n"
            "\tws.send(json.dumps({'sub': f'market.btcusdt.ticker'})) \n"
        "\n"
        f"def loop_BTCUSDT(): \n"
        f"\tws = websocket.WebSocketApp('wss://api.huobi.pro/ws', \n"
                "\t\ton_message=on_message_BTCUSDT, \n"
                "\t\ton_close=on_close_BTCUSDT, \n"
                "\t\ton_error=on_error_BTCUSDT) \n"
        f"\tws.on_open = on_open_BTCUSDT \n"
        "\tws.run_forever() \n"
        "\n"
        f"Thread(target=loop_BTCUSDT).start() \n"
        "\n"
################################################################################
        f"symbol_c_g_ETHUSDT = 'ETHUSDT' \n"
        f"price_bids_c_g_ETHUSDT = float(0.0) \n"
        f"qty_bids_c_g_ETHUSDT = float(0.0) \n"
        f"price_asks_c_g_ETHUSDT = float(0.0) \n"
        f"qty_asks_c_g_ETHUSDT = float(0.0) \n"
        "\n"
        f"def on_message_ETHUSDT(ws, message): \n"
        "\t#locker.acquire() \n"
        "\tdata = json.loads(gzip.decompress(message)) \n"
        "\n"
        "\tif 'ping' in data: \n"
        # Отправить pong
        "\t\tws.send(json.dumps({ \n"
        "\t\t\t'pong': data['ping'] \n"
        "\t\t})) \n"
        "\n"
        "\telse: \n"
        "\n"
        "\t\tsymbol_c_l_ETHUSDT = 'ETHUSDT' \n"
        "\t\tprice_bids_c_l_ETHUSDT = data['tick']['bid'] \n"
        "\t\tqty_bids_c_l_ETHUSDT = data['tick']['bidSize'] \n"
        "\t\tprice_asks_c_l_ETHUSDT = data['tick']['ask'] \n"
        "\t\tqty_asks_c_l_ETHUSDT = data['tick']['askSize'] \n"
        "\n"
        f"\t\tglobal symbol_c_g_ETHUSDT \n"
        f"\t\tglobal price_bids_c_g_ETHUSDT \n"
        f"\t\tglobal qty_bids_c_g_ETHUSDT \n"
        f"\t\tglobal price_asks_c_g_ETHUSDT \n"
        f"\t\tglobal qty_asks_c_g_ETHUSDT \n"
        "\n"
        f"\t\tsymbol_c_g_ETHUSDT = symbol_c_l_ETHUSDT \n"
        f"\t\tprice_bids_c_g_ETHUSDT= price_bids_c_l_ETHUSDT \n"
        f"\t\tqty_bids_c_g_ETHUSDT= qty_bids_c_l_ETHUSDT \n"
        f"\t\tprice_asks_c_g_ETHUSDT = price_asks_c_l_ETHUSDT \n"
        f"\t\tqty_asks_c_g_ETHUSDT= qty_asks_c_l_ETHUSDT \n"
        "\t#locker.release() \n"
        "\n"
        "def on_close_ETHUSDT(ws): \n"
        "\tprint('### closed ###') \n"
        "\n"
        "def on_error_ETHUSDT(ws, message): \n"
        "\tprint(message) \n"
        "\n"
        "def on_open_ETHUSDT(ws): \n"
        "\tws.send(json.dumps({'sub': f'market.ethusdt.ticker'})) \n"
        "\n"
        f"def loop_ETHUSDT(): \n"
        f"\tws = websocket.WebSocketApp('wss://api.huobi.pro/ws', \n"
        "\t\ton_message=on_message_ETHUSDT, \n"
        "\t\ton_close=on_close_ETHUSDT, \n"
        "\t\ton_error=on_error_ETHUSDT) \n"
        f"\tws.on_open = on_open_ETHUSDT \n"
        "\tws.run_forever() \n"
        "\n"
        f"Thread(target=loop_ETHUSDT).start() \n"
        "\n"
################################################################################
        f"symbol_c_g_USDCUSDT = 'USDCUSDT' \n"
        f"price_bids_c_g_USDCUSDT = float(0.0) \n"
        f"qty_bids_c_g_USDCUSDT = float(0.0) \n"
        f"price_asks_c_g_USDCUSDT = float(0.0) \n"
        f"qty_asks_c_g_USDCUSDT = float(0.0) \n"
        "\n"
        f"def on_message_USDCUSDT(ws, message): \n"
        "\t#locker.acquire() \n"
        "\tdata = json.loads(gzip.decompress(message)) \n"
        "\n"
        "\tif 'ping' in data: \n"
        # Отправить pong
        "\t\tws.send(json.dumps({ \n"
        "\t\t\t'pong': data['ping'] \n"
        "\t\t})) \n"
        "\n"
        "\telse: \n"
        "\n"
        "\t\tsymbol_c_l_USDCUSDT = 'USDCUSDT' \n"
        "\t\tprice_bids_c_l_USDCUSDT = data['tick']['bid'] \n"
        "\t\tqty_bids_c_l_USDCUSDT = data['tick']['bidSize'] \n"
        "\t\tprice_asks_c_l_USDCUSDT = data['tick']['ask'] \n"
        "\t\tqty_asks_c_l_USDCUSDT = data['tick']['askSize'] \n"
        "\n"
        f"\t\tglobal symbol_c_g_USDCUSDT \n"
        f"\t\tglobal price_bids_c_g_USDCUSDT \n"
        f"\t\tglobal qty_bids_c_g_USDCUSDT \n"
        f"\t\tglobal price_asks_c_g_USDCUSDT \n"
        f"\t\tglobal qty_asks_c_g_USDCUSDT \n"
        "\n"
        f"\t\tsymbol_c_g_USDCUSDT = symbol_c_l_USDCUSDT \n"
        f"\t\tprice_bids_c_g_USDCUSDT= price_bids_c_l_USDCUSDT \n"
        f"\t\tqty_bids_c_g_USDCUSDT= qty_bids_c_l_USDCUSDT \n"
        f"\t\tprice_asks_c_g_USDCUSDT = price_asks_c_l_USDCUSDT \n"
        f"\t\tqty_asks_c_g_USDCUSDT= qty_asks_c_l_USDCUSDT \n"
        "\t#locker.release() \n"
        "\n"
        "def on_close_USDCUSDT(ws): \n"
        "\tprint('### closed ###') \n"
        "\n"
        "def on_error_USDCUSDT(ws, message): \n"
        "\tprint(message) \n"
        "\n"
        "def on_open_USDCUSDT(ws): \n"
        "\tws.send(json.dumps({'sub': f'market.usdcusdt.ticker'})) \n"
        "\n"
        f"def oloop_USDCUSDT(): \n"
        f"\tws = websocket.WebSocketApp('wss://api.huobi.pro/ws', \n"
        "\t\ton_message=on_message_USDCUSDT, \n"
        "\t\ton_close=on_close_USDCUSDT, \n"
        "\t\ton_error=on_error_USDCUSDT) \n"
        f"\tws.on_open = on_open_USDCUSDT \n"
        "\tws.run_forever() \n"
        "\n"
        f"Thread(target=oloop_USDCUSDT).start() \n"
        "\n"
################################################################################
        f"symbol_c_g_USDDUSDT = 'USDDUSDT' \n"
        f"price_bids_c_g_USDDUSDT = float(0.0) \n"
        f"qty_bids_c_g_USDDUSDT = float(0.0) \n"
        f"price_asks_c_g_USDDUSDT = float(0.0) \n"
        f"qty_asks_c_g_USDDUSDT = float(0.0) \n"
        "\n"
        f"def on_message_USDDUSDT(ws, message): \n"
        "\t#locker.acquire() \n"
        "\tdata = json.loads(gzip.decompress(message)) \n"
        "\n"
        "\tif 'ping' in data: \n"
        # Отправить pong
        "\t\tws.send(json.dumps({ \n"
        "\t\t\t'pong': data['ping'] \n"
        "\t\t})) \n"
        "\n"
        "\telse: \n"
        "\n"
        "\t\tsymbol_c_l_USDDUSDT = 'USDDUSDT' \n"
        "\t\tprice_bids_c_l_USDDUSDT = data['tick']['bid'] \n"
        "\t\tqty_bids_c_l_USDDUSDT = data['tick']['bidSize'] \n"
        "\t\tprice_asks_c_l_USDDUSDT = data['tick']['ask'] \n"
        "\t\tqty_asks_c_l_USDDUSDT = data['tick']['askSize'] \n"
        "\n"
        f"\t\tglobal symbol_c_g_USDDUSDT \n"
        f"\t\tglobal price_bids_c_g_USDDUSDT \n"
        f"\t\tglobal qty_bids_c_g_USDDUSDT \n"
        f"\t\tglobal price_asks_c_g_USDDUSDT \n"
        f"\t\tglobal qty_asks_c_g_USDDUSDT \n"
        "\n"
        f"\t\tsymbol_c_g_USDDUSDT = symbol_c_l_USDDUSDT \n"
        f"\t\tprice_bids_c_g_USDDUSDT= price_bids_c_l_USDDUSDT \n"
        f"\t\tqty_bids_c_g_USDDUSDT= qty_bids_c_l_USDDUSDT \n"
        f"\t\tprice_asks_c_g_USDDUSDT = price_asks_c_l_USDDUSDT \n"
        f"\t\tqty_asks_c_g_USDDUSDT= qty_asks_c_l_USDDUSDT \n"
        "\t#locker.release() \n"
        "\n"
        "def on_close_USDDUSDT(ws): \n"
        "\tprint('### closed ###') \n"
        "\n"
        "def on_error_USDDUSDT(ws, message): \n"
        "\tprint(message) \n"
        "\n"
        "def on_open_USDDUSDT(ws): \n"
        "\tws.send(json.dumps({'sub': f'market.usddusdt.ticker'})) \n"
        "\n"
        f"def oloop_USDDUSDT(): \n"
        f"\tws = websocket.WebSocketApp('wss://api.huobi.pro/ws', \n"
        "\t\ton_message=on_message_USDDUSDT, \n"
        "\t\ton_close=on_close_USDDUSDT, \n"
        "\t\ton_error=on_error_USDDUSDT) \n"
        f"\tws.on_open = on_open_USDDUSDT \n"
        "\tws.run_forever() \n"
        "\n"
        f"Thread(target=oloop_USDDUSDT).start() \n"
        "\n"
################################################################################
        f"symbol_c_g_HTUSDT = 'HTUSDT' \n"
        f"price_bids_c_g_HTUSDT = float(0.0) \n"
        f"qty_bids_c_g_HTUSDT = float(0.0) \n"
        f"price_asks_c_g_HTUSDT = float(0.0) \n"
        f"qty_asks_c_g_HTUSDT = float(0.0) \n"
        "\n"
        f"def on_message_HTUSDT(ws, message): \n"
        "\t#locker.acquire() \n"
        "\tdata = json.loads(gzip.decompress(message)) \n"
        "\n"
        "\tif 'ping' in data: \n"
        # Отправить pong
        "\t\tws.send(json.dumps({ \n"
        "\t\t\t'pong': data['ping'] \n"
        "\t\t})) \n"
        "\n"
        "\telse: \n"
        "\n"
        "\t\tsymbol_c_l_HTUSDT = 'HTUSDT' \n"
        "\t\tprice_bids_c_l_HTUSDT = data['tick']['bid'] \n"
        "\t\tqty_bids_c_l_HTUSDT = data['tick']['bidSize'] \n"
        "\t\tprice_asks_c_l_HTUSDT = data['tick']['ask'] \n"
        "\t\tqty_asks_c_l_HTUSDT = data['tick']['askSize'] \n"
        "\n"
        f"\t\tglobal symbol_c_g_HTUSDT \n"
        f"\t\tglobal price_bids_c_g_HTUSDT \n"
        f"\t\tglobal qty_bids_c_g_HTUSDT \n"
        f"\t\tglobal price_asks_c_g_HTUSDT \n"
        f"\t\tglobal qty_asks_c_g_HTUSDT \n"
        "\n"
        f"\t\tsymbol_c_g_HTUSDT = symbol_c_l_HTUSDT \n"
        f"\t\tprice_bids_c_g_HTUSDT= price_bids_c_l_HTUSDT \n"
        f"\t\tqty_bids_c_g_HTUSDT= qty_bids_c_l_HTUSDT \n"
        f"\t\tprice_asks_c_g_HTUSDT = price_asks_c_l_HTUSDT \n"
        f"\t\tqty_asks_c_g_HTUSDT= qty_asks_c_l_HTUSDT \n"
        "\t#locker.release() \n"
        "\n"
        "def on_close_HTUSDT(ws): \n"
        "\tprint('### closed ###') \n"
        "\n"
        "def on_error_HTUSDT(ws, message): \n"
        "\tprint(message) \n"
        "\n"
        "def on_open_HTUSDT(ws): \n"
        "\tws.send(json.dumps({'sub': f'market.htusdt.ticker'})) \n"
        "\n"
        f"def oloop_HTUSDT(): \n"
        f"\tws = websocket.WebSocketApp('wss://api.huobi.pro/ws', \n"
        "\t\ton_message=on_message_HTUSDT, \n"
        "\t\ton_close=on_close_HTUSDT, \n"
        "\t\ton_error=on_error_HTUSDT) \n"
        f"\tws.on_open = on_open_HTUSDT \n"
        "\tws.run_forever() \n"
        "\n"
        f"Thread(target=oloop_HTUSDT).start() \n"
        "\n"
################################################################################
    )

for i in f_file_pairs_buy_para_b_test():
    symbol_a = i['symbol_a']
    symbol_aa = symbol_a.lower()

    symbol_b = i['symbol_b']
    symbol_bb = symbol_b.lower()

    symbol_c = i['symbol_c']
    # symbol_cc = symbol_c.lower()

    with open(all_pairs_btc, 'a') as file3:
        file3.write(

            ###############################################################################################
            f"symbol_a_g_{symbol_a} = '{symbol_a}' \n"
            f"price_bids_a_g_{symbol_a} = float(0.0) \n"
            f"qty_bids_a_g_{symbol_a} = float(0.0) \n"
            f"price_asks_a_g_{symbol_a} = float(0.0) \n"
            f"qty_asks_a_g_{symbol_a} = float(0.0) \n"
            "\n"
            # f"symbol_b_g_{symbol_b} = '{symbol_b}' \n"
            # f"price_bids_b_g_{symbol_b} = float(0.0) \n"
            # f"qty_bids_b_g_{symbol_b} = float(0.0) \n"
            # f"price_asks_b_g_{symbol_b} = float(0.0) \n"
            # f"qty_asks_b_g_{symbol_b} = float(0.0) \n"
            # "\n"
            f"def on_message_{symbol_a}(ws, message): \n"
            "\tdata = json.loads(gzip.decompress(message)) \n"
            "\n"
            "\tif 'ping' in data: \n"
        # Отправить pong
                "\t\tws.send(json.dumps({ \n"
                "\t\t\t'pong': data['ping'] \n"
                "\t\t})) \n"
            "\n"
            "\telse: \n"
            "\n"
            # f"\tif data['stream'] == stream{symbol_aa} :\n"
            f"\t\tsymbol_a_l_{symbol_a} = '{symbol_a}' \n"
            f"\t\tprice_bids_a_l_{symbol_a} = data['tick']['bid'] \n"
            f"\t\tqty_bids_a_l_{symbol_a} = data['tick']['bidSize'] \n"
            f"\t\tprice_asks_a_l_{symbol_a} = data['tick']['ask'] \n"
            f"\t\tqty_asks_a_l_{symbol_a} = data['tick']['askSize'] \n"
            "\n"
            f"\t\tglobal symbol_a_g_{symbol_a} \n"
            f"\t\tglobal price_bids_a_g_{symbol_a} \n"
            f"\t\tglobal qty_bids_a_g_{symbol_a} \n"
            f"\t\tglobal price_asks_a_g_{symbol_a} \n"
            f"\t\tglobal qty_asks_a_g_{symbol_a} \n"
            "\n"
            f"\t\tsymbol_a_g_{symbol_a} = symbol_a_l_{symbol_a} \n"
            f"\t\tprice_bids_a_g_{symbol_a} = price_bids_a_l_{symbol_a} \n"
            f"\t\tqty_bids_a_g_{symbol_a} = qty_bids_a_l_{symbol_a} \n"
            f"\t\tprice_asks_a_g_{symbol_a} = price_asks_a_l_{symbol_a} \n"
            f"\t\tqty_asks_a_g_{symbol_a} = qty_asks_a_l_{symbol_a} \n"
            "\n"
            
            f"def on_close_{symbol_a}(ws): \n"
            "\tprint('### closed ###') \n"
            "\n"
            f"def on_error_{symbol_a}(ws, message): \n"
                "\tprint(message) \n"
            "\n"
            f"def on_open_{symbol_a}(ws): \n"
                "\tws.send(json.dumps(""{"f"'sub': f'market.{symbol_a}.ticker'""}"")) \n"
            "\n"
            f"def loop_{symbol_a}(): \n"
            f"\tws = websocket.WebSocketApp('wss://api.huobi.pro/ws', \n"
                    f"\t\ton_message=on_message_{symbol_a}, \n"
                    f"\t\ton_close=on_close_{symbol_a}, \n"
                    f"\t\ton_error=on_error_{symbol_a}) \n"
            f"\tws.on_open = on_open_{symbol_a} \n"
            "\tws.run_forever() \n"
            "\n"
            f"Thread(target=loop_{symbol_a}).start() \n"
            "\n"
            
            
            
            # f"\tif data['stream'] == stream{symbol_bb} :\n"
            
            f"symbol_b_g_{symbol_b} = '{symbol_b}' \n"
            f"price_bids_b_g_{symbol_b} = float(0.0) \n"
            f"qty_bids_b_g_{symbol_b} = float(0.0) \n"
            f"price_asks_b_g_{symbol_b} = float(0.0) \n"
            f"qty_asks_b_g_{symbol_b} = float(0.0) \n"
            "\n"
            f"def on_message_{symbol_b}(ws, message): \n"
            "\tdata = json.loads(gzip.decompress(message)) \n"
            "\n"
            "\tif 'ping' in data: \n"
            # Отправить pong
                "\t\tws.send(json.dumps({ \n"
                "\t\t\t'pong': data['ping'] \n"
                "\t\t})) \n"
            "\n"
            "\telse: \n"
            "\n"
            f"\t\tsymbol_b_l_{symbol_b} = '{symbol_b}' \n"
            f"\t\tprice_bids_b_l_{symbol_b} = data['tick']['bid'] \n"
            f"\t\tqty_bids_b_l_{symbol_b} = data['tick']['bidSize']\n"
            f"\t\tprice_asks_b_l_{symbol_b} = data['tick']['ask'] \n"
            f"\t\tqty_asks_b_l_{symbol_b} = data['tick']['askSize'] \n"
            "\n"
            f"\t\tglobal symbol_b_g_{symbol_b} \n"
            f"\t\tglobal price_bids_b_g_{symbol_b} \n"
            f"\t\tglobal qty_bids_b_g_{symbol_b} \n"
            f"\t\tglobal price_asks_b_g_{symbol_b} \n"
            f"\t\tglobal qty_asks_b_g_{symbol_b} \n"
            "\n"
            f"\t\tsymbol_b_g_{symbol_b} = symbol_b_l_{symbol_b} \n"
            f"\t\tprice_bids_b_g_{symbol_b} = price_bids_b_l_{symbol_b} \n"
            f"\t\tqty_bids_b_g_{symbol_b} = qty_bids_b_l_{symbol_b} \n"
            f"\t\tprice_asks_b_g_{symbol_b} = price_asks_b_l_{symbol_b} \n"
            f"\t\tqty_asks_b_g_{symbol_b} = qty_asks_b_l_{symbol_b} \n"
            "\n"
            # f"\tThread(target=loop_{symbol_a}_Trade).start() \n"
            "\n"
        
             f"def on_close_{symbol_b}(ws): \n"
            "\tprint('### closed ###') \n"
            "\n"
            f"def on_error_{symbol_b}(ws, message): \n"
                "\tprint(message) \n"
            "\n"
            f"def on_open_{symbol_b}(ws): \n"
                "\tws.send(json.dumps(""{"f"'sub': f'market.{symbol_b}.ticker'""}"")) \n"
            "\n"
            f"def loop_{symbol_b}(): \n"
            f"\tws = websocket.WebSocketApp('wss://api.huobi.pro/ws', \n"
                    f"\t\ton_message=on_message_{symbol_b}, \n"
                    f"\t\ton_close=on_close_{symbol_b}, \n"
                    f"\t\ton_error=on_error_{symbol_b}) \n"
            f"\tws.on_open = on_open_{symbol_b} \n"
            "\tws.run_forever() \n"
            "\n"
            f"Thread(target=loop_{symbol_b}).start() \n"
            "\n"
        
        
        
            f"def loop_{symbol_a}_Trade(): \n"

            "\twhile True: \n"
            # "\t\tlocker.acquire() \n"
            "\t\ttime.sleep(0.1)\n"
            "\n"
            # "\t\tlocker.acquire() \n"
            "\n"
            f"\t\tif price_bids_c_g_{symbol_c} != 0.0 and qty_bids_c_g_{symbol_c} != 0.0 and price_asks_c_g_{symbol_c} != 0.0 and qty_asks_c_g_{symbol_c} != 0.0 and price_bids_a_g_{symbol_a} != 0.0 and qty_bids_a_g_{symbol_a} != 0.0 and price_asks_a_g_{symbol_a} != 0.0 and qty_asks_a_g_{symbol_a} != 0.0 and price_bids_b_g_{symbol_b} != 0.0 and qty_bids_b_g_{symbol_b} != 0.0 and price_asks_b_g_{symbol_b} != 0.0 and qty_asks_b_g_{symbol_b} != 0.0: \n"
            #######################################################################################################################
            "\n"
            # Вычисляем сколько нужно продать в конце (пара С) BTC при депозите usdt_count.
            # f"\t\t\tpraice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) \n"
            # f"\t\t\tpraice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) \n"
            # "\t\t\tpraice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) \n"
            # "\n"
            # # Вычесляем сколько нужно продать в конце (пара B) ETH при praice_pair_c_raschet_size_up
            # f"\t\t\tpraice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_{symbol_b}) \n"
            # f"\t\t\tpraice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_{symbol_b})) \n"
            # "\t\t\tpraice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) \n"
            # "\n"
            # # Вычесляем сколько нужно купить в конце (пара А) ETH при praice_pair_b_raschet_size_up
            # f"\t\t\tprice_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_{symbol_a})) \n"
            # f"\t\t\tprice_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_{symbol_a}) \n"
            # "\t\t\tpraice_pair_a_raschet_round = round(price_pair_a_raschet, 14) \n"
            # "\t\n"
            ##############################################################################
            ##############################################################################
            ##############################################################################

            # "\t\t\tprice_a = round(price_pair_a_raschet_size_up, 14) \n"
            # "\n"
            # f"\t\t\tprice_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_{symbol_b})) \n"
            # f"\t\t\tprice_b = price_b_round_size_down * float(price_bids_b_g_{symbol_b}) \n"
            # "\t\t\tprice_b_round = round(price_b, 14) \n"
            # "\n"
            # f"\t\t\tprice_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) \n"
            # f"\t\t\tprice_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) \n"
            # "\t\t\tprice_c_round = round(price_c, 7) \n"
            # "\n"
            # "\t\t\ta = 0.15 / 100 \n"
            # "\t\t\tb = price_c_round * a \n"
            # "\t\t\titog_minus_proc = price_c_round - b \n"
            # "\n"
            # "\t\t\tpribil = itog_minus_proc - praice_pair_a_raschet_round \n"
            # "\n"
            # "\t\t\ttime_test = datetime.datetime.now() \n"
            # "\n"
            # "\t\t\tif pribil > 0.0: \n"
            # # "\t\t\tlocker.acquire() \n"
            # "\n"
            # "\t\t\t\tprint('1111') \n"
            # "\t\t\t\tglobal all_pribil \n"
            # "\t\t\t\tall_pribil = float(all_pribil) + float(pribil) \n"
            "\n"
            f"\t\t\tprice_a = usdt_count / float(price_asks_a_g_{symbol_a}) \n"
            f"\t\t\tprice_b = float(price_bids_b_g_{symbol_b}) * price_a \n"
            f"\t\t\tprice_c = float(price_bids_c_g_{symbol_c}) * price_b \n"
            f"\t\t\tpribil =  price_c - usdt_count\n"
            "\n"
            f"\t\t\tif pribil > 0:\n"
            f"\t\t\t\tprint(symbol_b_g_{symbol_b}, pribil)\n"
            "\n"
            #print(price_c)
            # "\t\t\t\tprint('############################################################################################################') \n"
            # f"\t\t\t\tprint('Kupili:', symbol_a_g_{symbol_a}, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_{symbol_a}, 'potratili:', praice_pair_a_raschet_round, time_test) \n"
            # f"\t\t\t\tprint('Prodali:', symbol_b_g_{symbol_b}, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_{symbol_b}) \n"
            # f"\t\t\t\tprint('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) \n"
            # f"\t\t\t\tprint('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) \n"
            # "\t\t\t\tprint(all_pribil) \n"
            # "\n"
            # "\t\t\t\ttime.sleep(1) \n"
            # "\n"
            f"Thread(target=loop_{symbol_a}_Trade).start() \n"
            "\n"
        )