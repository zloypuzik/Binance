import time 
import datetime 
import json 
import websocket 
import asyncio 
from threading import * 
import datetime 
from binance.client import Client 

def f_minqty_size_up(kolichestvo, stepSize): 
	def adjust_to_step(value, step, increase=True): 
		return ((int(value * 100000000) - int(value * 100000000) % int( 
			float(step) * 100000000)) / 100000000) + (float(step) if increase else 0) 

	sell_amount_a = adjust_to_step(kolichestvo, stepSize) 

	return sell_amount_a 

def f_minqty_size_down(kolichestvo, stepSize): 
	def adjust_to_step(value, step, increase=False): 
		return ((int(value * 100000000) - int(value * 100000000) % int( 
			float(step) * 100000000)) / 100000000) + (float(step) if increase else 0) 

	sell_amount_a = adjust_to_step(kolichestvo, stepSize) 

	return sell_amount_a 

api_key = 'A6Bc2FXbmn2dreyATiWkHMVFP3HTXNgTJTkKfVHihMuTb907wgHHkfqYHE8LGLdG' 
secret_key = 'zvP6vTEroLyMwoFut4pQKf4K2s05baZeQhXzVSC4wSiYB0G3l45dpt0EDcQGsQMA' 

client = Client(api_key, secret_key) 

usdt_count = float(11.0) 


all_pribil = float(0.0) 

symbol_c_g_BTCUSDT = 'BTCUSDT' 
price_bids_c_g_BTCUSDT = float(0.0) 
qty_bids_c_g_BTCUSDT = float(0.0) 
price_asks_c_g_BTCUSDT = float(0.0) 
qty_asks_c_g_BTCUSDT = float(0.0) 
stepSize_BTCUSDT = '0.00001000' 

def on_message_BTCUSDT(ws, message): 
	#locker.acquire() 
	data = json.loads(message) 

	symbol_c_l_BTCUSDT = 'BTCUSDT' 
	price_bids_c_l_BTCUSDT = data['bids'][0][0] 
	qty_bids_c_l_BTCUSDT = data['bids'][0][1] 
	price_asks_c_l_BTCUSDT = data['asks'][0][0] 
	qty_asks_c_l_BTCUSDT = data['asks'][0][1] 

	global symbol_c_g_BTCUSDT 
	global price_bids_c_g_BTCUSDT 
	global qty_bids_c_g_BTCUSDT 
	global price_asks_c_g_BTCUSDT 
	global qty_asks_c_g_BTCUSDT 

	symbol_c_g_BTCUSDT = symbol_c_l_BTCUSDT 
	price_bids_c_g_BTCUSDT= price_bids_c_l_BTCUSDT 
	qty_bids_c_g_BTCUSDT= qty_bids_c_l_BTCUSDT 
	price_asks_c_g_BTCUSDT = price_asks_c_l_BTCUSDT 
	qty_asks_c_g_BTCUSDT= qty_asks_c_l_BTCUSDT 
	#locker.release() 

def loop_BTCUSDT(): 
	socket1 = f'wss://stream.binance.com:9443/ws/btcusdt@depth5@100ms' 
	ws = websocket.WebSocketApp(socket1, on_message=on_message_BTCUSDT) 
	ws.run_forever() 

Thread(target=loop_BTCUSDT).start() 

streamethusdt = 'ethusdt@bookTicker'
streamethbtc  = 'ethbtc@bookTicker'

symbol_a_g_ETHUSDT = 'ETHUSDT' 
price_bids_a_g_ETHUSDT = float(0.0) 
qty_bids_a_g_ETHUSDT = float(0.0) 
price_asks_a_g_ETHUSDT = float(0.0) 
qty_asks_a_g_ETHUSDT = float(0.0) 

stepSize_ETHUSDT = 0.00010000 

symbol_b_g_ETHBTC = 'ETHBTC' 
price_bids_b_g_ETHBTC = float(0.0) 
qty_bids_b_g_ETHBTC = float(0.0) 
price_asks_b_g_ETHBTC = float(0.0) 
qty_asks_b_g_ETHBTC = float(0.0) 

stepSize_ETHBTC = 0.00010000 

def on_message_ETHUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamethusdt :
		symbol_a_l_ETHUSDT = data['data']['s'] 
		price_bids_a_l_ETHUSDT = data['data']['b'] 
		qty_bids_a_l_ETHUSDT = data['data']['B'] 
		price_asks_a_l_ETHUSDT = data['data']['a'] 
		qty_asks_a_l_ETHUSDT = data['data']['A'] 

		global symbol_a_g_ETHUSDT 
		global price_bids_a_g_ETHUSDT 
		global qty_bids_a_g_ETHUSDT 
		global price_asks_a_g_ETHUSDT 
		global qty_asks_a_g_ETHUSDT 

		symbol_a_g_ETHUSDT = symbol_a_l_ETHUSDT 
		price_bids_a_g_ETHUSDT = price_bids_a_l_ETHUSDT 
		qty_bids_a_g_ETHUSDT = qty_bids_a_l_ETHUSDT 
		price_asks_a_g_ETHUSDT = price_asks_a_l_ETHUSDT 
		qty_asks_a_g_ETHUSDT = qty_asks_a_l_ETHUSDT 

	if data['stream'] == streamethbtc :
		data = json.loads(message) 

		symbol_b_l_ETHBTC = data['data']['s'] 
		price_bids_b_l_ETHBTC = data['data']['b'] 
		qty_bids_b_l_ETHBTC = data['data']['B']
		price_asks_b_l_ETHBTC = data['data']['a'] 
		qty_asks_b_l_ETHBTC = data['data']['A'] 

		global symbol_b_g_ETHBTC 
		global price_bids_b_g_ETHBTC 
		global qty_bids_b_g_ETHBTC 
		global price_asks_b_g_ETHBTC 
		global qty_asks_b_g_ETHBTC 

		symbol_b_g_ETHBTC = symbol_b_l_ETHBTC 
		price_bids_b_g_ETHBTC = price_bids_b_l_ETHBTC 
		qty_bids_b_g_ETHBTC = qty_bids_b_l_ETHBTC 
		price_asks_b_g_ETHBTC = price_asks_b_l_ETHBTC 
		qty_asks_b_g_ETHBTC = qty_asks_b_l_ETHBTC 


def loop_ETHUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamethusdt}/{streamethbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ETHUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ETHUSDT).start()

def loop_ETHUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ETHUSDT != 0.0 and qty_bids_a_g_ETHUSDT != 0.0 and price_asks_a_g_ETHUSDT != 0.0 and qty_asks_a_g_ETHUSDT != 0.0 and price_bids_b_g_ETHBTC != 0.0 and qty_bids_b_g_ETHBTC != 0.0 and price_asks_b_g_ETHBTC != 0.0 and qty_asks_b_g_ETHBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ETHBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ETHBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ETHUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ETHUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ETHBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ETHBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ETHUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ETHUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ETHBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ETHBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ETHUSDT_Trade).start() 

streambnbusdt = 'bnbusdt@bookTicker'
streambnbbtc  = 'bnbbtc@bookTicker'

symbol_a_g_BNBUSDT = 'BNBUSDT' 
price_bids_a_g_BNBUSDT = float(0.0) 
qty_bids_a_g_BNBUSDT = float(0.0) 
price_asks_a_g_BNBUSDT = float(0.0) 
qty_asks_a_g_BNBUSDT = float(0.0) 

stepSize_BNBUSDT = 0.00100000 

symbol_b_g_BNBBTC = 'BNBBTC' 
price_bids_b_g_BNBBTC = float(0.0) 
qty_bids_b_g_BNBBTC = float(0.0) 
price_asks_b_g_BNBBTC = float(0.0) 
qty_asks_b_g_BNBBTC = float(0.0) 

stepSize_BNBBTC = 0.00100000 

def on_message_BNBUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambnbusdt :
		symbol_a_l_BNBUSDT = data['data']['s'] 
		price_bids_a_l_BNBUSDT = data['data']['b'] 
		qty_bids_a_l_BNBUSDT = data['data']['B'] 
		price_asks_a_l_BNBUSDT = data['data']['a'] 
		qty_asks_a_l_BNBUSDT = data['data']['A'] 

		global symbol_a_g_BNBUSDT 
		global price_bids_a_g_BNBUSDT 
		global qty_bids_a_g_BNBUSDT 
		global price_asks_a_g_BNBUSDT 
		global qty_asks_a_g_BNBUSDT 

		symbol_a_g_BNBUSDT = symbol_a_l_BNBUSDT 
		price_bids_a_g_BNBUSDT = price_bids_a_l_BNBUSDT 
		qty_bids_a_g_BNBUSDT = qty_bids_a_l_BNBUSDT 
		price_asks_a_g_BNBUSDT = price_asks_a_l_BNBUSDT 
		qty_asks_a_g_BNBUSDT = qty_asks_a_l_BNBUSDT 

	if data['stream'] == streambnbbtc :
		data = json.loads(message) 

		symbol_b_l_BNBBTC = data['data']['s'] 
		price_bids_b_l_BNBBTC = data['data']['b'] 
		qty_bids_b_l_BNBBTC = data['data']['B']
		price_asks_b_l_BNBBTC = data['data']['a'] 
		qty_asks_b_l_BNBBTC = data['data']['A'] 

		global symbol_b_g_BNBBTC 
		global price_bids_b_g_BNBBTC 
		global qty_bids_b_g_BNBBTC 
		global price_asks_b_g_BNBBTC 
		global qty_asks_b_g_BNBBTC 

		symbol_b_g_BNBBTC = symbol_b_l_BNBBTC 
		price_bids_b_g_BNBBTC = price_bids_b_l_BNBBTC 
		qty_bids_b_g_BNBBTC = qty_bids_b_l_BNBBTC 
		price_asks_b_g_BNBBTC = price_asks_b_l_BNBBTC 
		qty_asks_b_g_BNBBTC = qty_asks_b_l_BNBBTC 


def loop_BNBUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambnbusdt}/{streambnbbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BNBUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BNBUSDT).start()

def loop_BNBUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BNBUSDT != 0.0 and qty_bids_a_g_BNBUSDT != 0.0 and price_asks_a_g_BNBUSDT != 0.0 and qty_asks_a_g_BNBUSDT != 0.0 and price_bids_b_g_BNBBTC != 0.0 and qty_bids_b_g_BNBBTC != 0.0 and price_asks_b_g_BNBBTC != 0.0 and qty_asks_b_g_BNBBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BNBBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BNBBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BNBUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BNBUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BNBBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BNBBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BNBUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BNBUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BNBBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BNBBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BNBUSDT_Trade).start() 

streamneousdt = 'neousdt@bookTicker'
streamneobtc  = 'neobtc@bookTicker'

symbol_a_g_NEOUSDT = 'NEOUSDT' 
price_bids_a_g_NEOUSDT = float(0.0) 
qty_bids_a_g_NEOUSDT = float(0.0) 
price_asks_a_g_NEOUSDT = float(0.0) 
qty_asks_a_g_NEOUSDT = float(0.0) 

stepSize_NEOUSDT = 0.01000000 

symbol_b_g_NEOBTC = 'NEOBTC' 
price_bids_b_g_NEOBTC = float(0.0) 
qty_bids_b_g_NEOBTC = float(0.0) 
price_asks_b_g_NEOBTC = float(0.0) 
qty_asks_b_g_NEOBTC = float(0.0) 

stepSize_NEOBTC = 0.01000000 

def on_message_NEOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamneousdt :
		symbol_a_l_NEOUSDT = data['data']['s'] 
		price_bids_a_l_NEOUSDT = data['data']['b'] 
		qty_bids_a_l_NEOUSDT = data['data']['B'] 
		price_asks_a_l_NEOUSDT = data['data']['a'] 
		qty_asks_a_l_NEOUSDT = data['data']['A'] 

		global symbol_a_g_NEOUSDT 
		global price_bids_a_g_NEOUSDT 
		global qty_bids_a_g_NEOUSDT 
		global price_asks_a_g_NEOUSDT 
		global qty_asks_a_g_NEOUSDT 

		symbol_a_g_NEOUSDT = symbol_a_l_NEOUSDT 
		price_bids_a_g_NEOUSDT = price_bids_a_l_NEOUSDT 
		qty_bids_a_g_NEOUSDT = qty_bids_a_l_NEOUSDT 
		price_asks_a_g_NEOUSDT = price_asks_a_l_NEOUSDT 
		qty_asks_a_g_NEOUSDT = qty_asks_a_l_NEOUSDT 

	if data['stream'] == streamneobtc :
		data = json.loads(message) 

		symbol_b_l_NEOBTC = data['data']['s'] 
		price_bids_b_l_NEOBTC = data['data']['b'] 
		qty_bids_b_l_NEOBTC = data['data']['B']
		price_asks_b_l_NEOBTC = data['data']['a'] 
		qty_asks_b_l_NEOBTC = data['data']['A'] 

		global symbol_b_g_NEOBTC 
		global price_bids_b_g_NEOBTC 
		global qty_bids_b_g_NEOBTC 
		global price_asks_b_g_NEOBTC 
		global qty_asks_b_g_NEOBTC 

		symbol_b_g_NEOBTC = symbol_b_l_NEOBTC 
		price_bids_b_g_NEOBTC = price_bids_b_l_NEOBTC 
		qty_bids_b_g_NEOBTC = qty_bids_b_l_NEOBTC 
		price_asks_b_g_NEOBTC = price_asks_b_l_NEOBTC 
		qty_asks_b_g_NEOBTC = qty_asks_b_l_NEOBTC 


def loop_NEOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamneousdt}/{streamneobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_NEOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_NEOUSDT).start()

def loop_NEOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_NEOUSDT != 0.0 and qty_bids_a_g_NEOUSDT != 0.0 and price_asks_a_g_NEOUSDT != 0.0 and qty_asks_a_g_NEOUSDT != 0.0 and price_bids_b_g_NEOBTC != 0.0 and qty_bids_b_g_NEOBTC != 0.0 and price_asks_b_g_NEOBTC != 0.0 and qty_asks_b_g_NEOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_NEOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_NEOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_NEOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_NEOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_NEOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_NEOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_NEOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_NEOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_NEOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_NEOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_NEOUSDT_Trade).start() 

streamltcusdt = 'ltcusdt@bookTicker'
streamltcbtc  = 'ltcbtc@bookTicker'

symbol_a_g_LTCUSDT = 'LTCUSDT' 
price_bids_a_g_LTCUSDT = float(0.0) 
qty_bids_a_g_LTCUSDT = float(0.0) 
price_asks_a_g_LTCUSDT = float(0.0) 
qty_asks_a_g_LTCUSDT = float(0.0) 

stepSize_LTCUSDT = 0.00100000 

symbol_b_g_LTCBTC = 'LTCBTC' 
price_bids_b_g_LTCBTC = float(0.0) 
qty_bids_b_g_LTCBTC = float(0.0) 
price_asks_b_g_LTCBTC = float(0.0) 
qty_asks_b_g_LTCBTC = float(0.0) 

stepSize_LTCBTC = 0.00100000 

def on_message_LTCUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamltcusdt :
		symbol_a_l_LTCUSDT = data['data']['s'] 
		price_bids_a_l_LTCUSDT = data['data']['b'] 
		qty_bids_a_l_LTCUSDT = data['data']['B'] 
		price_asks_a_l_LTCUSDT = data['data']['a'] 
		qty_asks_a_l_LTCUSDT = data['data']['A'] 

		global symbol_a_g_LTCUSDT 
		global price_bids_a_g_LTCUSDT 
		global qty_bids_a_g_LTCUSDT 
		global price_asks_a_g_LTCUSDT 
		global qty_asks_a_g_LTCUSDT 

		symbol_a_g_LTCUSDT = symbol_a_l_LTCUSDT 
		price_bids_a_g_LTCUSDT = price_bids_a_l_LTCUSDT 
		qty_bids_a_g_LTCUSDT = qty_bids_a_l_LTCUSDT 
		price_asks_a_g_LTCUSDT = price_asks_a_l_LTCUSDT 
		qty_asks_a_g_LTCUSDT = qty_asks_a_l_LTCUSDT 

	if data['stream'] == streamltcbtc :
		data = json.loads(message) 

		symbol_b_l_LTCBTC = data['data']['s'] 
		price_bids_b_l_LTCBTC = data['data']['b'] 
		qty_bids_b_l_LTCBTC = data['data']['B']
		price_asks_b_l_LTCBTC = data['data']['a'] 
		qty_asks_b_l_LTCBTC = data['data']['A'] 

		global symbol_b_g_LTCBTC 
		global price_bids_b_g_LTCBTC 
		global qty_bids_b_g_LTCBTC 
		global price_asks_b_g_LTCBTC 
		global qty_asks_b_g_LTCBTC 

		symbol_b_g_LTCBTC = symbol_b_l_LTCBTC 
		price_bids_b_g_LTCBTC = price_bids_b_l_LTCBTC 
		qty_bids_b_g_LTCBTC = qty_bids_b_l_LTCBTC 
		price_asks_b_g_LTCBTC = price_asks_b_l_LTCBTC 
		qty_asks_b_g_LTCBTC = qty_asks_b_l_LTCBTC 


def loop_LTCUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamltcusdt}/{streamltcbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_LTCUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_LTCUSDT).start()

def loop_LTCUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_LTCUSDT != 0.0 and qty_bids_a_g_LTCUSDT != 0.0 and price_asks_a_g_LTCUSDT != 0.0 and qty_asks_a_g_LTCUSDT != 0.0 and price_bids_b_g_LTCBTC != 0.0 and qty_bids_b_g_LTCBTC != 0.0 and price_asks_b_g_LTCBTC != 0.0 and qty_asks_b_g_LTCBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_LTCBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_LTCBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_LTCUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_LTCUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_LTCBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_LTCBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_LTCUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_LTCUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_LTCBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_LTCBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_LTCUSDT_Trade).start() 

streamqtumusdt = 'qtumusdt@bookTicker'
streamqtumbtc  = 'qtumbtc@bookTicker'

symbol_a_g_QTUMUSDT = 'QTUMUSDT' 
price_bids_a_g_QTUMUSDT = float(0.0) 
qty_bids_a_g_QTUMUSDT = float(0.0) 
price_asks_a_g_QTUMUSDT = float(0.0) 
qty_asks_a_g_QTUMUSDT = float(0.0) 

stepSize_QTUMUSDT = 0.10000000 

symbol_b_g_QTUMBTC = 'QTUMBTC' 
price_bids_b_g_QTUMBTC = float(0.0) 
qty_bids_b_g_QTUMBTC = float(0.0) 
price_asks_b_g_QTUMBTC = float(0.0) 
qty_asks_b_g_QTUMBTC = float(0.0) 

stepSize_QTUMBTC = 0.10000000 

def on_message_QTUMUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamqtumusdt :
		symbol_a_l_QTUMUSDT = data['data']['s'] 
		price_bids_a_l_QTUMUSDT = data['data']['b'] 
		qty_bids_a_l_QTUMUSDT = data['data']['B'] 
		price_asks_a_l_QTUMUSDT = data['data']['a'] 
		qty_asks_a_l_QTUMUSDT = data['data']['A'] 

		global symbol_a_g_QTUMUSDT 
		global price_bids_a_g_QTUMUSDT 
		global qty_bids_a_g_QTUMUSDT 
		global price_asks_a_g_QTUMUSDT 
		global qty_asks_a_g_QTUMUSDT 

		symbol_a_g_QTUMUSDT = symbol_a_l_QTUMUSDT 
		price_bids_a_g_QTUMUSDT = price_bids_a_l_QTUMUSDT 
		qty_bids_a_g_QTUMUSDT = qty_bids_a_l_QTUMUSDT 
		price_asks_a_g_QTUMUSDT = price_asks_a_l_QTUMUSDT 
		qty_asks_a_g_QTUMUSDT = qty_asks_a_l_QTUMUSDT 

	if data['stream'] == streamqtumbtc :
		data = json.loads(message) 

		symbol_b_l_QTUMBTC = data['data']['s'] 
		price_bids_b_l_QTUMBTC = data['data']['b'] 
		qty_bids_b_l_QTUMBTC = data['data']['B']
		price_asks_b_l_QTUMBTC = data['data']['a'] 
		qty_asks_b_l_QTUMBTC = data['data']['A'] 

		global symbol_b_g_QTUMBTC 
		global price_bids_b_g_QTUMBTC 
		global qty_bids_b_g_QTUMBTC 
		global price_asks_b_g_QTUMBTC 
		global qty_asks_b_g_QTUMBTC 

		symbol_b_g_QTUMBTC = symbol_b_l_QTUMBTC 
		price_bids_b_g_QTUMBTC = price_bids_b_l_QTUMBTC 
		qty_bids_b_g_QTUMBTC = qty_bids_b_l_QTUMBTC 
		price_asks_b_g_QTUMBTC = price_asks_b_l_QTUMBTC 
		qty_asks_b_g_QTUMBTC = qty_asks_b_l_QTUMBTC 


def loop_QTUMUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamqtumusdt}/{streamqtumbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_QTUMUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_QTUMUSDT).start()

def loop_QTUMUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_QTUMUSDT != 0.0 and qty_bids_a_g_QTUMUSDT != 0.0 and price_asks_a_g_QTUMUSDT != 0.0 and qty_asks_a_g_QTUMUSDT != 0.0 and price_bids_b_g_QTUMBTC != 0.0 and qty_bids_b_g_QTUMBTC != 0.0 and price_asks_b_g_QTUMBTC != 0.0 and qty_asks_b_g_QTUMBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_QTUMBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_QTUMBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_QTUMUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_QTUMUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_QTUMBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_QTUMBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_QTUMUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_QTUMUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_QTUMBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_QTUMBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_QTUMUSDT_Trade).start() 

streamadausdt = 'adausdt@bookTicker'
streamadabtc  = 'adabtc@bookTicker'

symbol_a_g_ADAUSDT = 'ADAUSDT' 
price_bids_a_g_ADAUSDT = float(0.0) 
qty_bids_a_g_ADAUSDT = float(0.0) 
price_asks_a_g_ADAUSDT = float(0.0) 
qty_asks_a_g_ADAUSDT = float(0.0) 

stepSize_ADAUSDT = 0.10000000 

symbol_b_g_ADABTC = 'ADABTC' 
price_bids_b_g_ADABTC = float(0.0) 
qty_bids_b_g_ADABTC = float(0.0) 
price_asks_b_g_ADABTC = float(0.0) 
qty_asks_b_g_ADABTC = float(0.0) 

stepSize_ADABTC = 0.10000000 

def on_message_ADAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamadausdt :
		symbol_a_l_ADAUSDT = data['data']['s'] 
		price_bids_a_l_ADAUSDT = data['data']['b'] 
		qty_bids_a_l_ADAUSDT = data['data']['B'] 
		price_asks_a_l_ADAUSDT = data['data']['a'] 
		qty_asks_a_l_ADAUSDT = data['data']['A'] 

		global symbol_a_g_ADAUSDT 
		global price_bids_a_g_ADAUSDT 
		global qty_bids_a_g_ADAUSDT 
		global price_asks_a_g_ADAUSDT 
		global qty_asks_a_g_ADAUSDT 

		symbol_a_g_ADAUSDT = symbol_a_l_ADAUSDT 
		price_bids_a_g_ADAUSDT = price_bids_a_l_ADAUSDT 
		qty_bids_a_g_ADAUSDT = qty_bids_a_l_ADAUSDT 
		price_asks_a_g_ADAUSDT = price_asks_a_l_ADAUSDT 
		qty_asks_a_g_ADAUSDT = qty_asks_a_l_ADAUSDT 

	if data['stream'] == streamadabtc :
		data = json.loads(message) 

		symbol_b_l_ADABTC = data['data']['s'] 
		price_bids_b_l_ADABTC = data['data']['b'] 
		qty_bids_b_l_ADABTC = data['data']['B']
		price_asks_b_l_ADABTC = data['data']['a'] 
		qty_asks_b_l_ADABTC = data['data']['A'] 

		global symbol_b_g_ADABTC 
		global price_bids_b_g_ADABTC 
		global qty_bids_b_g_ADABTC 
		global price_asks_b_g_ADABTC 
		global qty_asks_b_g_ADABTC 

		symbol_b_g_ADABTC = symbol_b_l_ADABTC 
		price_bids_b_g_ADABTC = price_bids_b_l_ADABTC 
		qty_bids_b_g_ADABTC = qty_bids_b_l_ADABTC 
		price_asks_b_g_ADABTC = price_asks_b_l_ADABTC 
		qty_asks_b_g_ADABTC = qty_asks_b_l_ADABTC 


def loop_ADAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamadausdt}/{streamadabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ADAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ADAUSDT).start()

def loop_ADAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ADAUSDT != 0.0 and qty_bids_a_g_ADAUSDT != 0.0 and price_asks_a_g_ADAUSDT != 0.0 and qty_asks_a_g_ADAUSDT != 0.0 and price_bids_b_g_ADABTC != 0.0 and qty_bids_b_g_ADABTC != 0.0 and price_asks_b_g_ADABTC != 0.0 and qty_asks_b_g_ADABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ADABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ADABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ADAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ADAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ADABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ADABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ADAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ADAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ADABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ADABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ADAUSDT_Trade).start() 

streamxrpusdt = 'xrpusdt@bookTicker'
streamxrpbtc  = 'xrpbtc@bookTicker'

symbol_a_g_XRPUSDT = 'XRPUSDT' 
price_bids_a_g_XRPUSDT = float(0.0) 
qty_bids_a_g_XRPUSDT = float(0.0) 
price_asks_a_g_XRPUSDT = float(0.0) 
qty_asks_a_g_XRPUSDT = float(0.0) 

stepSize_XRPUSDT = 1.00000000 

symbol_b_g_XRPBTC = 'XRPBTC' 
price_bids_b_g_XRPBTC = float(0.0) 
qty_bids_b_g_XRPBTC = float(0.0) 
price_asks_b_g_XRPBTC = float(0.0) 
qty_asks_b_g_XRPBTC = float(0.0) 

stepSize_XRPBTC = 1.00000000 

def on_message_XRPUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamxrpusdt :
		symbol_a_l_XRPUSDT = data['data']['s'] 
		price_bids_a_l_XRPUSDT = data['data']['b'] 
		qty_bids_a_l_XRPUSDT = data['data']['B'] 
		price_asks_a_l_XRPUSDT = data['data']['a'] 
		qty_asks_a_l_XRPUSDT = data['data']['A'] 

		global symbol_a_g_XRPUSDT 
		global price_bids_a_g_XRPUSDT 
		global qty_bids_a_g_XRPUSDT 
		global price_asks_a_g_XRPUSDT 
		global qty_asks_a_g_XRPUSDT 

		symbol_a_g_XRPUSDT = symbol_a_l_XRPUSDT 
		price_bids_a_g_XRPUSDT = price_bids_a_l_XRPUSDT 
		qty_bids_a_g_XRPUSDT = qty_bids_a_l_XRPUSDT 
		price_asks_a_g_XRPUSDT = price_asks_a_l_XRPUSDT 
		qty_asks_a_g_XRPUSDT = qty_asks_a_l_XRPUSDT 

	if data['stream'] == streamxrpbtc :
		data = json.loads(message) 

		symbol_b_l_XRPBTC = data['data']['s'] 
		price_bids_b_l_XRPBTC = data['data']['b'] 
		qty_bids_b_l_XRPBTC = data['data']['B']
		price_asks_b_l_XRPBTC = data['data']['a'] 
		qty_asks_b_l_XRPBTC = data['data']['A'] 

		global symbol_b_g_XRPBTC 
		global price_bids_b_g_XRPBTC 
		global qty_bids_b_g_XRPBTC 
		global price_asks_b_g_XRPBTC 
		global qty_asks_b_g_XRPBTC 

		symbol_b_g_XRPBTC = symbol_b_l_XRPBTC 
		price_bids_b_g_XRPBTC = price_bids_b_l_XRPBTC 
		qty_bids_b_g_XRPBTC = qty_bids_b_l_XRPBTC 
		price_asks_b_g_XRPBTC = price_asks_b_l_XRPBTC 
		qty_asks_b_g_XRPBTC = qty_asks_b_l_XRPBTC 


def loop_XRPUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamxrpusdt}/{streamxrpbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_XRPUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_XRPUSDT).start()

def loop_XRPUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_XRPUSDT != 0.0 and qty_bids_a_g_XRPUSDT != 0.0 and price_asks_a_g_XRPUSDT != 0.0 and qty_asks_a_g_XRPUSDT != 0.0 and price_bids_b_g_XRPBTC != 0.0 and qty_bids_b_g_XRPBTC != 0.0 and price_asks_b_g_XRPBTC != 0.0 and qty_asks_b_g_XRPBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_XRPBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_XRPBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_XRPUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_XRPUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_XRPBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_XRPBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_XRPUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_XRPUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_XRPBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_XRPBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_XRPUSDT_Trade).start() 

streameosusdt = 'eosusdt@bookTicker'
streameosbtc  = 'eosbtc@bookTicker'

symbol_a_g_EOSUSDT = 'EOSUSDT' 
price_bids_a_g_EOSUSDT = float(0.0) 
qty_bids_a_g_EOSUSDT = float(0.0) 
price_asks_a_g_EOSUSDT = float(0.0) 
qty_asks_a_g_EOSUSDT = float(0.0) 

stepSize_EOSUSDT = 0.10000000 

symbol_b_g_EOSBTC = 'EOSBTC' 
price_bids_b_g_EOSBTC = float(0.0) 
qty_bids_b_g_EOSBTC = float(0.0) 
price_asks_b_g_EOSBTC = float(0.0) 
qty_asks_b_g_EOSBTC = float(0.0) 

stepSize_EOSBTC = 0.10000000 

def on_message_EOSUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streameosusdt :
		symbol_a_l_EOSUSDT = data['data']['s'] 
		price_bids_a_l_EOSUSDT = data['data']['b'] 
		qty_bids_a_l_EOSUSDT = data['data']['B'] 
		price_asks_a_l_EOSUSDT = data['data']['a'] 
		qty_asks_a_l_EOSUSDT = data['data']['A'] 

		global symbol_a_g_EOSUSDT 
		global price_bids_a_g_EOSUSDT 
		global qty_bids_a_g_EOSUSDT 
		global price_asks_a_g_EOSUSDT 
		global qty_asks_a_g_EOSUSDT 

		symbol_a_g_EOSUSDT = symbol_a_l_EOSUSDT 
		price_bids_a_g_EOSUSDT = price_bids_a_l_EOSUSDT 
		qty_bids_a_g_EOSUSDT = qty_bids_a_l_EOSUSDT 
		price_asks_a_g_EOSUSDT = price_asks_a_l_EOSUSDT 
		qty_asks_a_g_EOSUSDT = qty_asks_a_l_EOSUSDT 

	if data['stream'] == streameosbtc :
		data = json.loads(message) 

		symbol_b_l_EOSBTC = data['data']['s'] 
		price_bids_b_l_EOSBTC = data['data']['b'] 
		qty_bids_b_l_EOSBTC = data['data']['B']
		price_asks_b_l_EOSBTC = data['data']['a'] 
		qty_asks_b_l_EOSBTC = data['data']['A'] 

		global symbol_b_g_EOSBTC 
		global price_bids_b_g_EOSBTC 
		global qty_bids_b_g_EOSBTC 
		global price_asks_b_g_EOSBTC 
		global qty_asks_b_g_EOSBTC 

		symbol_b_g_EOSBTC = symbol_b_l_EOSBTC 
		price_bids_b_g_EOSBTC = price_bids_b_l_EOSBTC 
		qty_bids_b_g_EOSBTC = qty_bids_b_l_EOSBTC 
		price_asks_b_g_EOSBTC = price_asks_b_l_EOSBTC 
		qty_asks_b_g_EOSBTC = qty_asks_b_l_EOSBTC 


def loop_EOSUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streameosusdt}/{streameosbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_EOSUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_EOSUSDT).start()

def loop_EOSUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_EOSUSDT != 0.0 and qty_bids_a_g_EOSUSDT != 0.0 and price_asks_a_g_EOSUSDT != 0.0 and qty_asks_a_g_EOSUSDT != 0.0 and price_bids_b_g_EOSBTC != 0.0 and qty_bids_b_g_EOSBTC != 0.0 and price_asks_b_g_EOSBTC != 0.0 and qty_asks_b_g_EOSBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_EOSBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_EOSBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_EOSUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_EOSUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_EOSBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_EOSBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_EOSUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_EOSUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_EOSBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_EOSBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_EOSUSDT_Trade).start() 

streamiotausdt = 'iotausdt@bookTicker'
streamiotabtc  = 'iotabtc@bookTicker'

symbol_a_g_IOTAUSDT = 'IOTAUSDT' 
price_bids_a_g_IOTAUSDT = float(0.0) 
qty_bids_a_g_IOTAUSDT = float(0.0) 
price_asks_a_g_IOTAUSDT = float(0.0) 
qty_asks_a_g_IOTAUSDT = float(0.0) 

stepSize_IOTAUSDT = 1.00000000 

symbol_b_g_IOTABTC = 'IOTABTC' 
price_bids_b_g_IOTABTC = float(0.0) 
qty_bids_b_g_IOTABTC = float(0.0) 
price_asks_b_g_IOTABTC = float(0.0) 
qty_asks_b_g_IOTABTC = float(0.0) 

stepSize_IOTABTC = 1.00000000 

def on_message_IOTAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamiotausdt :
		symbol_a_l_IOTAUSDT = data['data']['s'] 
		price_bids_a_l_IOTAUSDT = data['data']['b'] 
		qty_bids_a_l_IOTAUSDT = data['data']['B'] 
		price_asks_a_l_IOTAUSDT = data['data']['a'] 
		qty_asks_a_l_IOTAUSDT = data['data']['A'] 

		global symbol_a_g_IOTAUSDT 
		global price_bids_a_g_IOTAUSDT 
		global qty_bids_a_g_IOTAUSDT 
		global price_asks_a_g_IOTAUSDT 
		global qty_asks_a_g_IOTAUSDT 

		symbol_a_g_IOTAUSDT = symbol_a_l_IOTAUSDT 
		price_bids_a_g_IOTAUSDT = price_bids_a_l_IOTAUSDT 
		qty_bids_a_g_IOTAUSDT = qty_bids_a_l_IOTAUSDT 
		price_asks_a_g_IOTAUSDT = price_asks_a_l_IOTAUSDT 
		qty_asks_a_g_IOTAUSDT = qty_asks_a_l_IOTAUSDT 

	if data['stream'] == streamiotabtc :
		data = json.loads(message) 

		symbol_b_l_IOTABTC = data['data']['s'] 
		price_bids_b_l_IOTABTC = data['data']['b'] 
		qty_bids_b_l_IOTABTC = data['data']['B']
		price_asks_b_l_IOTABTC = data['data']['a'] 
		qty_asks_b_l_IOTABTC = data['data']['A'] 

		global symbol_b_g_IOTABTC 
		global price_bids_b_g_IOTABTC 
		global qty_bids_b_g_IOTABTC 
		global price_asks_b_g_IOTABTC 
		global qty_asks_b_g_IOTABTC 

		symbol_b_g_IOTABTC = symbol_b_l_IOTABTC 
		price_bids_b_g_IOTABTC = price_bids_b_l_IOTABTC 
		qty_bids_b_g_IOTABTC = qty_bids_b_l_IOTABTC 
		price_asks_b_g_IOTABTC = price_asks_b_l_IOTABTC 
		qty_asks_b_g_IOTABTC = qty_asks_b_l_IOTABTC 


def loop_IOTAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamiotausdt}/{streamiotabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_IOTAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_IOTAUSDT).start()

def loop_IOTAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_IOTAUSDT != 0.0 and qty_bids_a_g_IOTAUSDT != 0.0 and price_asks_a_g_IOTAUSDT != 0.0 and qty_asks_a_g_IOTAUSDT != 0.0 and price_bids_b_g_IOTABTC != 0.0 and qty_bids_b_g_IOTABTC != 0.0 and price_asks_b_g_IOTABTC != 0.0 and qty_asks_b_g_IOTABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_IOTABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_IOTABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_IOTAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_IOTAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_IOTABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_IOTABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_IOTAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_IOTAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_IOTABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_IOTABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_IOTAUSDT_Trade).start() 

streamxlmusdt = 'xlmusdt@bookTicker'
streamxlmbtc  = 'xlmbtc@bookTicker'

symbol_a_g_XLMUSDT = 'XLMUSDT' 
price_bids_a_g_XLMUSDT = float(0.0) 
qty_bids_a_g_XLMUSDT = float(0.0) 
price_asks_a_g_XLMUSDT = float(0.0) 
qty_asks_a_g_XLMUSDT = float(0.0) 

stepSize_XLMUSDT = 1.00000000 

symbol_b_g_XLMBTC = 'XLMBTC' 
price_bids_b_g_XLMBTC = float(0.0) 
qty_bids_b_g_XLMBTC = float(0.0) 
price_asks_b_g_XLMBTC = float(0.0) 
qty_asks_b_g_XLMBTC = float(0.0) 

stepSize_XLMBTC = 1.00000000 

def on_message_XLMUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamxlmusdt :
		symbol_a_l_XLMUSDT = data['data']['s'] 
		price_bids_a_l_XLMUSDT = data['data']['b'] 
		qty_bids_a_l_XLMUSDT = data['data']['B'] 
		price_asks_a_l_XLMUSDT = data['data']['a'] 
		qty_asks_a_l_XLMUSDT = data['data']['A'] 

		global symbol_a_g_XLMUSDT 
		global price_bids_a_g_XLMUSDT 
		global qty_bids_a_g_XLMUSDT 
		global price_asks_a_g_XLMUSDT 
		global qty_asks_a_g_XLMUSDT 

		symbol_a_g_XLMUSDT = symbol_a_l_XLMUSDT 
		price_bids_a_g_XLMUSDT = price_bids_a_l_XLMUSDT 
		qty_bids_a_g_XLMUSDT = qty_bids_a_l_XLMUSDT 
		price_asks_a_g_XLMUSDT = price_asks_a_l_XLMUSDT 
		qty_asks_a_g_XLMUSDT = qty_asks_a_l_XLMUSDT 

	if data['stream'] == streamxlmbtc :
		data = json.loads(message) 

		symbol_b_l_XLMBTC = data['data']['s'] 
		price_bids_b_l_XLMBTC = data['data']['b'] 
		qty_bids_b_l_XLMBTC = data['data']['B']
		price_asks_b_l_XLMBTC = data['data']['a'] 
		qty_asks_b_l_XLMBTC = data['data']['A'] 

		global symbol_b_g_XLMBTC 
		global price_bids_b_g_XLMBTC 
		global qty_bids_b_g_XLMBTC 
		global price_asks_b_g_XLMBTC 
		global qty_asks_b_g_XLMBTC 

		symbol_b_g_XLMBTC = symbol_b_l_XLMBTC 
		price_bids_b_g_XLMBTC = price_bids_b_l_XLMBTC 
		qty_bids_b_g_XLMBTC = qty_bids_b_l_XLMBTC 
		price_asks_b_g_XLMBTC = price_asks_b_l_XLMBTC 
		qty_asks_b_g_XLMBTC = qty_asks_b_l_XLMBTC 


def loop_XLMUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamxlmusdt}/{streamxlmbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_XLMUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_XLMUSDT).start()

def loop_XLMUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_XLMUSDT != 0.0 and qty_bids_a_g_XLMUSDT != 0.0 and price_asks_a_g_XLMUSDT != 0.0 and qty_asks_a_g_XLMUSDT != 0.0 and price_bids_b_g_XLMBTC != 0.0 and qty_bids_b_g_XLMBTC != 0.0 and price_asks_b_g_XLMBTC != 0.0 and qty_asks_b_g_XLMBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_XLMBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_XLMBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_XLMUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_XLMUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_XLMBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_XLMBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_XLMUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_XLMUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_XLMBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_XLMBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_XLMUSDT_Trade).start() 

streamontusdt = 'ontusdt@bookTicker'
streamontbtc  = 'ontbtc@bookTicker'

symbol_a_g_ONTUSDT = 'ONTUSDT' 
price_bids_a_g_ONTUSDT = float(0.0) 
qty_bids_a_g_ONTUSDT = float(0.0) 
price_asks_a_g_ONTUSDT = float(0.0) 
qty_asks_a_g_ONTUSDT = float(0.0) 

stepSize_ONTUSDT = 1.00000000 

symbol_b_g_ONTBTC = 'ONTBTC' 
price_bids_b_g_ONTBTC = float(0.0) 
qty_bids_b_g_ONTBTC = float(0.0) 
price_asks_b_g_ONTBTC = float(0.0) 
qty_asks_b_g_ONTBTC = float(0.0) 

stepSize_ONTBTC = 1.00000000 

def on_message_ONTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamontusdt :
		symbol_a_l_ONTUSDT = data['data']['s'] 
		price_bids_a_l_ONTUSDT = data['data']['b'] 
		qty_bids_a_l_ONTUSDT = data['data']['B'] 
		price_asks_a_l_ONTUSDT = data['data']['a'] 
		qty_asks_a_l_ONTUSDT = data['data']['A'] 

		global symbol_a_g_ONTUSDT 
		global price_bids_a_g_ONTUSDT 
		global qty_bids_a_g_ONTUSDT 
		global price_asks_a_g_ONTUSDT 
		global qty_asks_a_g_ONTUSDT 

		symbol_a_g_ONTUSDT = symbol_a_l_ONTUSDT 
		price_bids_a_g_ONTUSDT = price_bids_a_l_ONTUSDT 
		qty_bids_a_g_ONTUSDT = qty_bids_a_l_ONTUSDT 
		price_asks_a_g_ONTUSDT = price_asks_a_l_ONTUSDT 
		qty_asks_a_g_ONTUSDT = qty_asks_a_l_ONTUSDT 

	if data['stream'] == streamontbtc :
		data = json.loads(message) 

		symbol_b_l_ONTBTC = data['data']['s'] 
		price_bids_b_l_ONTBTC = data['data']['b'] 
		qty_bids_b_l_ONTBTC = data['data']['B']
		price_asks_b_l_ONTBTC = data['data']['a'] 
		qty_asks_b_l_ONTBTC = data['data']['A'] 

		global symbol_b_g_ONTBTC 
		global price_bids_b_g_ONTBTC 
		global qty_bids_b_g_ONTBTC 
		global price_asks_b_g_ONTBTC 
		global qty_asks_b_g_ONTBTC 

		symbol_b_g_ONTBTC = symbol_b_l_ONTBTC 
		price_bids_b_g_ONTBTC = price_bids_b_l_ONTBTC 
		qty_bids_b_g_ONTBTC = qty_bids_b_l_ONTBTC 
		price_asks_b_g_ONTBTC = price_asks_b_l_ONTBTC 
		qty_asks_b_g_ONTBTC = qty_asks_b_l_ONTBTC 


def loop_ONTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamontusdt}/{streamontbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ONTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ONTUSDT).start()

def loop_ONTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ONTUSDT != 0.0 and qty_bids_a_g_ONTUSDT != 0.0 and price_asks_a_g_ONTUSDT != 0.0 and qty_asks_a_g_ONTUSDT != 0.0 and price_bids_b_g_ONTBTC != 0.0 and qty_bids_b_g_ONTBTC != 0.0 and price_asks_b_g_ONTBTC != 0.0 and qty_asks_b_g_ONTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ONTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ONTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ONTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ONTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ONTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ONTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ONTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ONTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ONTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ONTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ONTUSDT_Trade).start() 

streamtrxusdt = 'trxusdt@bookTicker'
streamtrxbtc  = 'trxbtc@bookTicker'

symbol_a_g_TRXUSDT = 'TRXUSDT' 
price_bids_a_g_TRXUSDT = float(0.0) 
qty_bids_a_g_TRXUSDT = float(0.0) 
price_asks_a_g_TRXUSDT = float(0.0) 
qty_asks_a_g_TRXUSDT = float(0.0) 

stepSize_TRXUSDT = 0.10000000 

symbol_b_g_TRXBTC = 'TRXBTC' 
price_bids_b_g_TRXBTC = float(0.0) 
qty_bids_b_g_TRXBTC = float(0.0) 
price_asks_b_g_TRXBTC = float(0.0) 
qty_asks_b_g_TRXBTC = float(0.0) 

stepSize_TRXBTC = 1.00000000 

def on_message_TRXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamtrxusdt :
		symbol_a_l_TRXUSDT = data['data']['s'] 
		price_bids_a_l_TRXUSDT = data['data']['b'] 
		qty_bids_a_l_TRXUSDT = data['data']['B'] 
		price_asks_a_l_TRXUSDT = data['data']['a'] 
		qty_asks_a_l_TRXUSDT = data['data']['A'] 

		global symbol_a_g_TRXUSDT 
		global price_bids_a_g_TRXUSDT 
		global qty_bids_a_g_TRXUSDT 
		global price_asks_a_g_TRXUSDT 
		global qty_asks_a_g_TRXUSDT 

		symbol_a_g_TRXUSDT = symbol_a_l_TRXUSDT 
		price_bids_a_g_TRXUSDT = price_bids_a_l_TRXUSDT 
		qty_bids_a_g_TRXUSDT = qty_bids_a_l_TRXUSDT 
		price_asks_a_g_TRXUSDT = price_asks_a_l_TRXUSDT 
		qty_asks_a_g_TRXUSDT = qty_asks_a_l_TRXUSDT 

	if data['stream'] == streamtrxbtc :
		data = json.loads(message) 

		symbol_b_l_TRXBTC = data['data']['s'] 
		price_bids_b_l_TRXBTC = data['data']['b'] 
		qty_bids_b_l_TRXBTC = data['data']['B']
		price_asks_b_l_TRXBTC = data['data']['a'] 
		qty_asks_b_l_TRXBTC = data['data']['A'] 

		global symbol_b_g_TRXBTC 
		global price_bids_b_g_TRXBTC 
		global qty_bids_b_g_TRXBTC 
		global price_asks_b_g_TRXBTC 
		global qty_asks_b_g_TRXBTC 

		symbol_b_g_TRXBTC = symbol_b_l_TRXBTC 
		price_bids_b_g_TRXBTC = price_bids_b_l_TRXBTC 
		qty_bids_b_g_TRXBTC = qty_bids_b_l_TRXBTC 
		price_asks_b_g_TRXBTC = price_asks_b_l_TRXBTC 
		qty_asks_b_g_TRXBTC = qty_asks_b_l_TRXBTC 


def loop_TRXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamtrxusdt}/{streamtrxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_TRXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_TRXUSDT).start()

def loop_TRXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_TRXUSDT != 0.0 and qty_bids_a_g_TRXUSDT != 0.0 and price_asks_a_g_TRXUSDT != 0.0 and qty_asks_a_g_TRXUSDT != 0.0 and price_bids_b_g_TRXBTC != 0.0 and qty_bids_b_g_TRXBTC != 0.0 and price_asks_b_g_TRXBTC != 0.0 and qty_asks_b_g_TRXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_TRXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_TRXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_TRXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_TRXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_TRXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_TRXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_TRXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_TRXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_TRXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_TRXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_TRXUSDT_Trade).start() 

streametcusdt = 'etcusdt@bookTicker'
streametcbtc  = 'etcbtc@bookTicker'

symbol_a_g_ETCUSDT = 'ETCUSDT' 
price_bids_a_g_ETCUSDT = float(0.0) 
qty_bids_a_g_ETCUSDT = float(0.0) 
price_asks_a_g_ETCUSDT = float(0.0) 
qty_asks_a_g_ETCUSDT = float(0.0) 

stepSize_ETCUSDT = 0.01000000 

symbol_b_g_ETCBTC = 'ETCBTC' 
price_bids_b_g_ETCBTC = float(0.0) 
qty_bids_b_g_ETCBTC = float(0.0) 
price_asks_b_g_ETCBTC = float(0.0) 
qty_asks_b_g_ETCBTC = float(0.0) 

stepSize_ETCBTC = 0.01000000 

def on_message_ETCUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streametcusdt :
		symbol_a_l_ETCUSDT = data['data']['s'] 
		price_bids_a_l_ETCUSDT = data['data']['b'] 
		qty_bids_a_l_ETCUSDT = data['data']['B'] 
		price_asks_a_l_ETCUSDT = data['data']['a'] 
		qty_asks_a_l_ETCUSDT = data['data']['A'] 

		global symbol_a_g_ETCUSDT 
		global price_bids_a_g_ETCUSDT 
		global qty_bids_a_g_ETCUSDT 
		global price_asks_a_g_ETCUSDT 
		global qty_asks_a_g_ETCUSDT 

		symbol_a_g_ETCUSDT = symbol_a_l_ETCUSDT 
		price_bids_a_g_ETCUSDT = price_bids_a_l_ETCUSDT 
		qty_bids_a_g_ETCUSDT = qty_bids_a_l_ETCUSDT 
		price_asks_a_g_ETCUSDT = price_asks_a_l_ETCUSDT 
		qty_asks_a_g_ETCUSDT = qty_asks_a_l_ETCUSDT 

	if data['stream'] == streametcbtc :
		data = json.loads(message) 

		symbol_b_l_ETCBTC = data['data']['s'] 
		price_bids_b_l_ETCBTC = data['data']['b'] 
		qty_bids_b_l_ETCBTC = data['data']['B']
		price_asks_b_l_ETCBTC = data['data']['a'] 
		qty_asks_b_l_ETCBTC = data['data']['A'] 

		global symbol_b_g_ETCBTC 
		global price_bids_b_g_ETCBTC 
		global qty_bids_b_g_ETCBTC 
		global price_asks_b_g_ETCBTC 
		global qty_asks_b_g_ETCBTC 

		symbol_b_g_ETCBTC = symbol_b_l_ETCBTC 
		price_bids_b_g_ETCBTC = price_bids_b_l_ETCBTC 
		qty_bids_b_g_ETCBTC = qty_bids_b_l_ETCBTC 
		price_asks_b_g_ETCBTC = price_asks_b_l_ETCBTC 
		qty_asks_b_g_ETCBTC = qty_asks_b_l_ETCBTC 


def loop_ETCUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streametcusdt}/{streametcbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ETCUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ETCUSDT).start()

def loop_ETCUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ETCUSDT != 0.0 and qty_bids_a_g_ETCUSDT != 0.0 and price_asks_a_g_ETCUSDT != 0.0 and qty_asks_a_g_ETCUSDT != 0.0 and price_bids_b_g_ETCBTC != 0.0 and qty_bids_b_g_ETCBTC != 0.0 and price_asks_b_g_ETCBTC != 0.0 and qty_asks_b_g_ETCBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ETCBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ETCBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ETCUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ETCUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ETCBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ETCBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ETCUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ETCUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ETCBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ETCBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ETCUSDT_Trade).start() 

streamicxusdt = 'icxusdt@bookTicker'
streamicxbtc  = 'icxbtc@bookTicker'

symbol_a_g_ICXUSDT = 'ICXUSDT' 
price_bids_a_g_ICXUSDT = float(0.0) 
qty_bids_a_g_ICXUSDT = float(0.0) 
price_asks_a_g_ICXUSDT = float(0.0) 
qty_asks_a_g_ICXUSDT = float(0.0) 

stepSize_ICXUSDT = 0.10000000 

symbol_b_g_ICXBTC = 'ICXBTC' 
price_bids_b_g_ICXBTC = float(0.0) 
qty_bids_b_g_ICXBTC = float(0.0) 
price_asks_b_g_ICXBTC = float(0.0) 
qty_asks_b_g_ICXBTC = float(0.0) 

stepSize_ICXBTC = 1.00000000 

def on_message_ICXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamicxusdt :
		symbol_a_l_ICXUSDT = data['data']['s'] 
		price_bids_a_l_ICXUSDT = data['data']['b'] 
		qty_bids_a_l_ICXUSDT = data['data']['B'] 
		price_asks_a_l_ICXUSDT = data['data']['a'] 
		qty_asks_a_l_ICXUSDT = data['data']['A'] 

		global symbol_a_g_ICXUSDT 
		global price_bids_a_g_ICXUSDT 
		global qty_bids_a_g_ICXUSDT 
		global price_asks_a_g_ICXUSDT 
		global qty_asks_a_g_ICXUSDT 

		symbol_a_g_ICXUSDT = symbol_a_l_ICXUSDT 
		price_bids_a_g_ICXUSDT = price_bids_a_l_ICXUSDT 
		qty_bids_a_g_ICXUSDT = qty_bids_a_l_ICXUSDT 
		price_asks_a_g_ICXUSDT = price_asks_a_l_ICXUSDT 
		qty_asks_a_g_ICXUSDT = qty_asks_a_l_ICXUSDT 

	if data['stream'] == streamicxbtc :
		data = json.loads(message) 

		symbol_b_l_ICXBTC = data['data']['s'] 
		price_bids_b_l_ICXBTC = data['data']['b'] 
		qty_bids_b_l_ICXBTC = data['data']['B']
		price_asks_b_l_ICXBTC = data['data']['a'] 
		qty_asks_b_l_ICXBTC = data['data']['A'] 

		global symbol_b_g_ICXBTC 
		global price_bids_b_g_ICXBTC 
		global qty_bids_b_g_ICXBTC 
		global price_asks_b_g_ICXBTC 
		global qty_asks_b_g_ICXBTC 

		symbol_b_g_ICXBTC = symbol_b_l_ICXBTC 
		price_bids_b_g_ICXBTC = price_bids_b_l_ICXBTC 
		qty_bids_b_g_ICXBTC = qty_bids_b_l_ICXBTC 
		price_asks_b_g_ICXBTC = price_asks_b_l_ICXBTC 
		qty_asks_b_g_ICXBTC = qty_asks_b_l_ICXBTC 


def loop_ICXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamicxusdt}/{streamicxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ICXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ICXUSDT).start()

def loop_ICXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ICXUSDT != 0.0 and qty_bids_a_g_ICXUSDT != 0.0 and price_asks_a_g_ICXUSDT != 0.0 and qty_asks_a_g_ICXUSDT != 0.0 and price_bids_b_g_ICXBTC != 0.0 and qty_bids_b_g_ICXBTC != 0.0 and price_asks_b_g_ICXBTC != 0.0 and qty_asks_b_g_ICXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ICXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ICXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ICXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ICXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ICXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ICXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ICXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ICXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ICXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ICXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ICXUSDT_Trade).start() 

streamnulsusdt = 'nulsusdt@bookTicker'
streamnulsbtc  = 'nulsbtc@bookTicker'

symbol_a_g_NULSUSDT = 'NULSUSDT' 
price_bids_a_g_NULSUSDT = float(0.0) 
qty_bids_a_g_NULSUSDT = float(0.0) 
price_asks_a_g_NULSUSDT = float(0.0) 
qty_asks_a_g_NULSUSDT = float(0.0) 

stepSize_NULSUSDT = 1.00000000 

symbol_b_g_NULSBTC = 'NULSBTC' 
price_bids_b_g_NULSBTC = float(0.0) 
qty_bids_b_g_NULSBTC = float(0.0) 
price_asks_b_g_NULSBTC = float(0.0) 
qty_asks_b_g_NULSBTC = float(0.0) 

stepSize_NULSBTC = 1.00000000 

def on_message_NULSUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamnulsusdt :
		symbol_a_l_NULSUSDT = data['data']['s'] 
		price_bids_a_l_NULSUSDT = data['data']['b'] 
		qty_bids_a_l_NULSUSDT = data['data']['B'] 
		price_asks_a_l_NULSUSDT = data['data']['a'] 
		qty_asks_a_l_NULSUSDT = data['data']['A'] 

		global symbol_a_g_NULSUSDT 
		global price_bids_a_g_NULSUSDT 
		global qty_bids_a_g_NULSUSDT 
		global price_asks_a_g_NULSUSDT 
		global qty_asks_a_g_NULSUSDT 

		symbol_a_g_NULSUSDT = symbol_a_l_NULSUSDT 
		price_bids_a_g_NULSUSDT = price_bids_a_l_NULSUSDT 
		qty_bids_a_g_NULSUSDT = qty_bids_a_l_NULSUSDT 
		price_asks_a_g_NULSUSDT = price_asks_a_l_NULSUSDT 
		qty_asks_a_g_NULSUSDT = qty_asks_a_l_NULSUSDT 

	if data['stream'] == streamnulsbtc :
		data = json.loads(message) 

		symbol_b_l_NULSBTC = data['data']['s'] 
		price_bids_b_l_NULSBTC = data['data']['b'] 
		qty_bids_b_l_NULSBTC = data['data']['B']
		price_asks_b_l_NULSBTC = data['data']['a'] 
		qty_asks_b_l_NULSBTC = data['data']['A'] 

		global symbol_b_g_NULSBTC 
		global price_bids_b_g_NULSBTC 
		global qty_bids_b_g_NULSBTC 
		global price_asks_b_g_NULSBTC 
		global qty_asks_b_g_NULSBTC 

		symbol_b_g_NULSBTC = symbol_b_l_NULSBTC 
		price_bids_b_g_NULSBTC = price_bids_b_l_NULSBTC 
		qty_bids_b_g_NULSBTC = qty_bids_b_l_NULSBTC 
		price_asks_b_g_NULSBTC = price_asks_b_l_NULSBTC 
		qty_asks_b_g_NULSBTC = qty_asks_b_l_NULSBTC 


def loop_NULSUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamnulsusdt}/{streamnulsbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_NULSUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_NULSUSDT).start()

def loop_NULSUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_NULSUSDT != 0.0 and qty_bids_a_g_NULSUSDT != 0.0 and price_asks_a_g_NULSUSDT != 0.0 and qty_asks_a_g_NULSUSDT != 0.0 and price_bids_b_g_NULSBTC != 0.0 and qty_bids_b_g_NULSBTC != 0.0 and price_asks_b_g_NULSBTC != 0.0 and qty_asks_b_g_NULSBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_NULSBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_NULSBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_NULSUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_NULSUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_NULSBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_NULSBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_NULSUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_NULSUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_NULSBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_NULSBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_NULSUSDT_Trade).start() 

streamvetusdt = 'vetusdt@bookTicker'
streamvetbtc  = 'vetbtc@bookTicker'

symbol_a_g_VETUSDT = 'VETUSDT' 
price_bids_a_g_VETUSDT = float(0.0) 
qty_bids_a_g_VETUSDT = float(0.0) 
price_asks_a_g_VETUSDT = float(0.0) 
qty_asks_a_g_VETUSDT = float(0.0) 

stepSize_VETUSDT = 0.10000000 

symbol_b_g_VETBTC = 'VETBTC' 
price_bids_b_g_VETBTC = float(0.0) 
qty_bids_b_g_VETBTC = float(0.0) 
price_asks_b_g_VETBTC = float(0.0) 
qty_asks_b_g_VETBTC = float(0.0) 

stepSize_VETBTC = 1.00000000 

def on_message_VETUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamvetusdt :
		symbol_a_l_VETUSDT = data['data']['s'] 
		price_bids_a_l_VETUSDT = data['data']['b'] 
		qty_bids_a_l_VETUSDT = data['data']['B'] 
		price_asks_a_l_VETUSDT = data['data']['a'] 
		qty_asks_a_l_VETUSDT = data['data']['A'] 

		global symbol_a_g_VETUSDT 
		global price_bids_a_g_VETUSDT 
		global qty_bids_a_g_VETUSDT 
		global price_asks_a_g_VETUSDT 
		global qty_asks_a_g_VETUSDT 

		symbol_a_g_VETUSDT = symbol_a_l_VETUSDT 
		price_bids_a_g_VETUSDT = price_bids_a_l_VETUSDT 
		qty_bids_a_g_VETUSDT = qty_bids_a_l_VETUSDT 
		price_asks_a_g_VETUSDT = price_asks_a_l_VETUSDT 
		qty_asks_a_g_VETUSDT = qty_asks_a_l_VETUSDT 

	if data['stream'] == streamvetbtc :
		data = json.loads(message) 

		symbol_b_l_VETBTC = data['data']['s'] 
		price_bids_b_l_VETBTC = data['data']['b'] 
		qty_bids_b_l_VETBTC = data['data']['B']
		price_asks_b_l_VETBTC = data['data']['a'] 
		qty_asks_b_l_VETBTC = data['data']['A'] 

		global symbol_b_g_VETBTC 
		global price_bids_b_g_VETBTC 
		global qty_bids_b_g_VETBTC 
		global price_asks_b_g_VETBTC 
		global qty_asks_b_g_VETBTC 

		symbol_b_g_VETBTC = symbol_b_l_VETBTC 
		price_bids_b_g_VETBTC = price_bids_b_l_VETBTC 
		qty_bids_b_g_VETBTC = qty_bids_b_l_VETBTC 
		price_asks_b_g_VETBTC = price_asks_b_l_VETBTC 
		qty_asks_b_g_VETBTC = qty_asks_b_l_VETBTC 


def loop_VETUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamvetusdt}/{streamvetbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_VETUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_VETUSDT).start()

def loop_VETUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_VETUSDT != 0.0 and qty_bids_a_g_VETUSDT != 0.0 and price_asks_a_g_VETUSDT != 0.0 and qty_asks_a_g_VETUSDT != 0.0 and price_bids_b_g_VETBTC != 0.0 and qty_bids_b_g_VETBTC != 0.0 and price_asks_b_g_VETBTC != 0.0 and qty_asks_b_g_VETBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_VETBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_VETBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_VETUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_VETUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_VETBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_VETBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_VETUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_VETUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_VETBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_VETBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_VETUSDT_Trade).start() 

streamlinkusdt = 'linkusdt@bookTicker'
streamlinkbtc  = 'linkbtc@bookTicker'

symbol_a_g_LINKUSDT = 'LINKUSDT' 
price_bids_a_g_LINKUSDT = float(0.0) 
qty_bids_a_g_LINKUSDT = float(0.0) 
price_asks_a_g_LINKUSDT = float(0.0) 
qty_asks_a_g_LINKUSDT = float(0.0) 

stepSize_LINKUSDT = 0.01000000 

symbol_b_g_LINKBTC = 'LINKBTC' 
price_bids_b_g_LINKBTC = float(0.0) 
qty_bids_b_g_LINKBTC = float(0.0) 
price_asks_b_g_LINKBTC = float(0.0) 
qty_asks_b_g_LINKBTC = float(0.0) 

stepSize_LINKBTC = 0.01000000 

def on_message_LINKUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamlinkusdt :
		symbol_a_l_LINKUSDT = data['data']['s'] 
		price_bids_a_l_LINKUSDT = data['data']['b'] 
		qty_bids_a_l_LINKUSDT = data['data']['B'] 
		price_asks_a_l_LINKUSDT = data['data']['a'] 
		qty_asks_a_l_LINKUSDT = data['data']['A'] 

		global symbol_a_g_LINKUSDT 
		global price_bids_a_g_LINKUSDT 
		global qty_bids_a_g_LINKUSDT 
		global price_asks_a_g_LINKUSDT 
		global qty_asks_a_g_LINKUSDT 

		symbol_a_g_LINKUSDT = symbol_a_l_LINKUSDT 
		price_bids_a_g_LINKUSDT = price_bids_a_l_LINKUSDT 
		qty_bids_a_g_LINKUSDT = qty_bids_a_l_LINKUSDT 
		price_asks_a_g_LINKUSDT = price_asks_a_l_LINKUSDT 
		qty_asks_a_g_LINKUSDT = qty_asks_a_l_LINKUSDT 

	if data['stream'] == streamlinkbtc :
		data = json.loads(message) 

		symbol_b_l_LINKBTC = data['data']['s'] 
		price_bids_b_l_LINKBTC = data['data']['b'] 
		qty_bids_b_l_LINKBTC = data['data']['B']
		price_asks_b_l_LINKBTC = data['data']['a'] 
		qty_asks_b_l_LINKBTC = data['data']['A'] 

		global symbol_b_g_LINKBTC 
		global price_bids_b_g_LINKBTC 
		global qty_bids_b_g_LINKBTC 
		global price_asks_b_g_LINKBTC 
		global qty_asks_b_g_LINKBTC 

		symbol_b_g_LINKBTC = symbol_b_l_LINKBTC 
		price_bids_b_g_LINKBTC = price_bids_b_l_LINKBTC 
		qty_bids_b_g_LINKBTC = qty_bids_b_l_LINKBTC 
		price_asks_b_g_LINKBTC = price_asks_b_l_LINKBTC 
		qty_asks_b_g_LINKBTC = qty_asks_b_l_LINKBTC 


def loop_LINKUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamlinkusdt}/{streamlinkbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_LINKUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_LINKUSDT).start()

def loop_LINKUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_LINKUSDT != 0.0 and qty_bids_a_g_LINKUSDT != 0.0 and price_asks_a_g_LINKUSDT != 0.0 and qty_asks_a_g_LINKUSDT != 0.0 and price_bids_b_g_LINKBTC != 0.0 and qty_bids_b_g_LINKBTC != 0.0 and price_asks_b_g_LINKBTC != 0.0 and qty_asks_b_g_LINKBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_LINKBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_LINKBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_LINKUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_LINKUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_LINKBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_LINKBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_LINKUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_LINKUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_LINKBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_LINKBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_LINKUSDT_Trade).start() 

streamwavesusdt = 'wavesusdt@bookTicker'
streamwavesbtc  = 'wavesbtc@bookTicker'

symbol_a_g_WAVESUSDT = 'WAVESUSDT' 
price_bids_a_g_WAVESUSDT = float(0.0) 
qty_bids_a_g_WAVESUSDT = float(0.0) 
price_asks_a_g_WAVESUSDT = float(0.0) 
qty_asks_a_g_WAVESUSDT = float(0.0) 

stepSize_WAVESUSDT = 0.01000000 

symbol_b_g_WAVESBTC = 'WAVESBTC' 
price_bids_b_g_WAVESBTC = float(0.0) 
qty_bids_b_g_WAVESBTC = float(0.0) 
price_asks_b_g_WAVESBTC = float(0.0) 
qty_asks_b_g_WAVESBTC = float(0.0) 

stepSize_WAVESBTC = 0.01000000 

def on_message_WAVESUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamwavesusdt :
		symbol_a_l_WAVESUSDT = data['data']['s'] 
		price_bids_a_l_WAVESUSDT = data['data']['b'] 
		qty_bids_a_l_WAVESUSDT = data['data']['B'] 
		price_asks_a_l_WAVESUSDT = data['data']['a'] 
		qty_asks_a_l_WAVESUSDT = data['data']['A'] 

		global symbol_a_g_WAVESUSDT 
		global price_bids_a_g_WAVESUSDT 
		global qty_bids_a_g_WAVESUSDT 
		global price_asks_a_g_WAVESUSDT 
		global qty_asks_a_g_WAVESUSDT 

		symbol_a_g_WAVESUSDT = symbol_a_l_WAVESUSDT 
		price_bids_a_g_WAVESUSDT = price_bids_a_l_WAVESUSDT 
		qty_bids_a_g_WAVESUSDT = qty_bids_a_l_WAVESUSDT 
		price_asks_a_g_WAVESUSDT = price_asks_a_l_WAVESUSDT 
		qty_asks_a_g_WAVESUSDT = qty_asks_a_l_WAVESUSDT 

	if data['stream'] == streamwavesbtc :
		data = json.loads(message) 

		symbol_b_l_WAVESBTC = data['data']['s'] 
		price_bids_b_l_WAVESBTC = data['data']['b'] 
		qty_bids_b_l_WAVESBTC = data['data']['B']
		price_asks_b_l_WAVESBTC = data['data']['a'] 
		qty_asks_b_l_WAVESBTC = data['data']['A'] 

		global symbol_b_g_WAVESBTC 
		global price_bids_b_g_WAVESBTC 
		global qty_bids_b_g_WAVESBTC 
		global price_asks_b_g_WAVESBTC 
		global qty_asks_b_g_WAVESBTC 

		symbol_b_g_WAVESBTC = symbol_b_l_WAVESBTC 
		price_bids_b_g_WAVESBTC = price_bids_b_l_WAVESBTC 
		qty_bids_b_g_WAVESBTC = qty_bids_b_l_WAVESBTC 
		price_asks_b_g_WAVESBTC = price_asks_b_l_WAVESBTC 
		qty_asks_b_g_WAVESBTC = qty_asks_b_l_WAVESBTC 


def loop_WAVESUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamwavesusdt}/{streamwavesbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_WAVESUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_WAVESUSDT).start()

def loop_WAVESUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_WAVESUSDT != 0.0 and qty_bids_a_g_WAVESUSDT != 0.0 and price_asks_a_g_WAVESUSDT != 0.0 and qty_asks_a_g_WAVESUSDT != 0.0 and price_bids_b_g_WAVESBTC != 0.0 and qty_bids_b_g_WAVESBTC != 0.0 and price_asks_b_g_WAVESBTC != 0.0 and qty_asks_b_g_WAVESBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_WAVESBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_WAVESBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_WAVESUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_WAVESUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_WAVESBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_WAVESBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_WAVESUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_WAVESUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_WAVESBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_WAVESBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_WAVESUSDT_Trade).start() 

streamongusdt = 'ongusdt@bookTicker'
streamongbtc  = 'ongbtc@bookTicker'

symbol_a_g_ONGUSDT = 'ONGUSDT' 
price_bids_a_g_ONGUSDT = float(0.0) 
qty_bids_a_g_ONGUSDT = float(0.0) 
price_asks_a_g_ONGUSDT = float(0.0) 
qty_asks_a_g_ONGUSDT = float(0.0) 

stepSize_ONGUSDT = 1.00000000 

symbol_b_g_ONGBTC = 'ONGBTC' 
price_bids_b_g_ONGBTC = float(0.0) 
qty_bids_b_g_ONGBTC = float(0.0) 
price_asks_b_g_ONGBTC = float(0.0) 
qty_asks_b_g_ONGBTC = float(0.0) 

stepSize_ONGBTC = 1.00000000 

def on_message_ONGUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamongusdt :
		symbol_a_l_ONGUSDT = data['data']['s'] 
		price_bids_a_l_ONGUSDT = data['data']['b'] 
		qty_bids_a_l_ONGUSDT = data['data']['B'] 
		price_asks_a_l_ONGUSDT = data['data']['a'] 
		qty_asks_a_l_ONGUSDT = data['data']['A'] 

		global symbol_a_g_ONGUSDT 
		global price_bids_a_g_ONGUSDT 
		global qty_bids_a_g_ONGUSDT 
		global price_asks_a_g_ONGUSDT 
		global qty_asks_a_g_ONGUSDT 

		symbol_a_g_ONGUSDT = symbol_a_l_ONGUSDT 
		price_bids_a_g_ONGUSDT = price_bids_a_l_ONGUSDT 
		qty_bids_a_g_ONGUSDT = qty_bids_a_l_ONGUSDT 
		price_asks_a_g_ONGUSDT = price_asks_a_l_ONGUSDT 
		qty_asks_a_g_ONGUSDT = qty_asks_a_l_ONGUSDT 

	if data['stream'] == streamongbtc :
		data = json.loads(message) 

		symbol_b_l_ONGBTC = data['data']['s'] 
		price_bids_b_l_ONGBTC = data['data']['b'] 
		qty_bids_b_l_ONGBTC = data['data']['B']
		price_asks_b_l_ONGBTC = data['data']['a'] 
		qty_asks_b_l_ONGBTC = data['data']['A'] 

		global symbol_b_g_ONGBTC 
		global price_bids_b_g_ONGBTC 
		global qty_bids_b_g_ONGBTC 
		global price_asks_b_g_ONGBTC 
		global qty_asks_b_g_ONGBTC 

		symbol_b_g_ONGBTC = symbol_b_l_ONGBTC 
		price_bids_b_g_ONGBTC = price_bids_b_l_ONGBTC 
		qty_bids_b_g_ONGBTC = qty_bids_b_l_ONGBTC 
		price_asks_b_g_ONGBTC = price_asks_b_l_ONGBTC 
		qty_asks_b_g_ONGBTC = qty_asks_b_l_ONGBTC 


def loop_ONGUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamongusdt}/{streamongbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ONGUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ONGUSDT).start()

def loop_ONGUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ONGUSDT != 0.0 and qty_bids_a_g_ONGUSDT != 0.0 and price_asks_a_g_ONGUSDT != 0.0 and qty_asks_a_g_ONGUSDT != 0.0 and price_bids_b_g_ONGBTC != 0.0 and qty_bids_b_g_ONGBTC != 0.0 and price_asks_b_g_ONGBTC != 0.0 and qty_asks_b_g_ONGBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ONGBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ONGBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ONGUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ONGUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ONGBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ONGBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ONGUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ONGUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ONGBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ONGBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ONGUSDT_Trade).start() 

streamzilusdt = 'zilusdt@bookTicker'
streamzilbtc  = 'zilbtc@bookTicker'

symbol_a_g_ZILUSDT = 'ZILUSDT' 
price_bids_a_g_ZILUSDT = float(0.0) 
qty_bids_a_g_ZILUSDT = float(0.0) 
price_asks_a_g_ZILUSDT = float(0.0) 
qty_asks_a_g_ZILUSDT = float(0.0) 

stepSize_ZILUSDT = 0.10000000 

symbol_b_g_ZILBTC = 'ZILBTC' 
price_bids_b_g_ZILBTC = float(0.0) 
qty_bids_b_g_ZILBTC = float(0.0) 
price_asks_b_g_ZILBTC = float(0.0) 
qty_asks_b_g_ZILBTC = float(0.0) 

stepSize_ZILBTC = 1.00000000 

def on_message_ZILUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamzilusdt :
		symbol_a_l_ZILUSDT = data['data']['s'] 
		price_bids_a_l_ZILUSDT = data['data']['b'] 
		qty_bids_a_l_ZILUSDT = data['data']['B'] 
		price_asks_a_l_ZILUSDT = data['data']['a'] 
		qty_asks_a_l_ZILUSDT = data['data']['A'] 

		global symbol_a_g_ZILUSDT 
		global price_bids_a_g_ZILUSDT 
		global qty_bids_a_g_ZILUSDT 
		global price_asks_a_g_ZILUSDT 
		global qty_asks_a_g_ZILUSDT 

		symbol_a_g_ZILUSDT = symbol_a_l_ZILUSDT 
		price_bids_a_g_ZILUSDT = price_bids_a_l_ZILUSDT 
		qty_bids_a_g_ZILUSDT = qty_bids_a_l_ZILUSDT 
		price_asks_a_g_ZILUSDT = price_asks_a_l_ZILUSDT 
		qty_asks_a_g_ZILUSDT = qty_asks_a_l_ZILUSDT 

	if data['stream'] == streamzilbtc :
		data = json.loads(message) 

		symbol_b_l_ZILBTC = data['data']['s'] 
		price_bids_b_l_ZILBTC = data['data']['b'] 
		qty_bids_b_l_ZILBTC = data['data']['B']
		price_asks_b_l_ZILBTC = data['data']['a'] 
		qty_asks_b_l_ZILBTC = data['data']['A'] 

		global symbol_b_g_ZILBTC 
		global price_bids_b_g_ZILBTC 
		global qty_bids_b_g_ZILBTC 
		global price_asks_b_g_ZILBTC 
		global qty_asks_b_g_ZILBTC 

		symbol_b_g_ZILBTC = symbol_b_l_ZILBTC 
		price_bids_b_g_ZILBTC = price_bids_b_l_ZILBTC 
		qty_bids_b_g_ZILBTC = qty_bids_b_l_ZILBTC 
		price_asks_b_g_ZILBTC = price_asks_b_l_ZILBTC 
		qty_asks_b_g_ZILBTC = qty_asks_b_l_ZILBTC 


def loop_ZILUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamzilusdt}/{streamzilbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ZILUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ZILUSDT).start()

def loop_ZILUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ZILUSDT != 0.0 and qty_bids_a_g_ZILUSDT != 0.0 and price_asks_a_g_ZILUSDT != 0.0 and qty_asks_a_g_ZILUSDT != 0.0 and price_bids_b_g_ZILBTC != 0.0 and qty_bids_b_g_ZILBTC != 0.0 and price_asks_b_g_ZILBTC != 0.0 and qty_asks_b_g_ZILBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ZILBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ZILBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ZILUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ZILUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ZILBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ZILBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ZILUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ZILUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ZILBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ZILBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ZILUSDT_Trade).start() 

streamzrxusdt = 'zrxusdt@bookTicker'
streamzrxbtc  = 'zrxbtc@bookTicker'

symbol_a_g_ZRXUSDT = 'ZRXUSDT' 
price_bids_a_g_ZRXUSDT = float(0.0) 
qty_bids_a_g_ZRXUSDT = float(0.0) 
price_asks_a_g_ZRXUSDT = float(0.0) 
qty_asks_a_g_ZRXUSDT = float(0.0) 

stepSize_ZRXUSDT = 1.00000000 

symbol_b_g_ZRXBTC = 'ZRXBTC' 
price_bids_b_g_ZRXBTC = float(0.0) 
qty_bids_b_g_ZRXBTC = float(0.0) 
price_asks_b_g_ZRXBTC = float(0.0) 
qty_asks_b_g_ZRXBTC = float(0.0) 

stepSize_ZRXBTC = 1.00000000 

def on_message_ZRXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamzrxusdt :
		symbol_a_l_ZRXUSDT = data['data']['s'] 
		price_bids_a_l_ZRXUSDT = data['data']['b'] 
		qty_bids_a_l_ZRXUSDT = data['data']['B'] 
		price_asks_a_l_ZRXUSDT = data['data']['a'] 
		qty_asks_a_l_ZRXUSDT = data['data']['A'] 

		global symbol_a_g_ZRXUSDT 
		global price_bids_a_g_ZRXUSDT 
		global qty_bids_a_g_ZRXUSDT 
		global price_asks_a_g_ZRXUSDT 
		global qty_asks_a_g_ZRXUSDT 

		symbol_a_g_ZRXUSDT = symbol_a_l_ZRXUSDT 
		price_bids_a_g_ZRXUSDT = price_bids_a_l_ZRXUSDT 
		qty_bids_a_g_ZRXUSDT = qty_bids_a_l_ZRXUSDT 
		price_asks_a_g_ZRXUSDT = price_asks_a_l_ZRXUSDT 
		qty_asks_a_g_ZRXUSDT = qty_asks_a_l_ZRXUSDT 

	if data['stream'] == streamzrxbtc :
		data = json.loads(message) 

		symbol_b_l_ZRXBTC = data['data']['s'] 
		price_bids_b_l_ZRXBTC = data['data']['b'] 
		qty_bids_b_l_ZRXBTC = data['data']['B']
		price_asks_b_l_ZRXBTC = data['data']['a'] 
		qty_asks_b_l_ZRXBTC = data['data']['A'] 

		global symbol_b_g_ZRXBTC 
		global price_bids_b_g_ZRXBTC 
		global qty_bids_b_g_ZRXBTC 
		global price_asks_b_g_ZRXBTC 
		global qty_asks_b_g_ZRXBTC 

		symbol_b_g_ZRXBTC = symbol_b_l_ZRXBTC 
		price_bids_b_g_ZRXBTC = price_bids_b_l_ZRXBTC 
		qty_bids_b_g_ZRXBTC = qty_bids_b_l_ZRXBTC 
		price_asks_b_g_ZRXBTC = price_asks_b_l_ZRXBTC 
		qty_asks_b_g_ZRXBTC = qty_asks_b_l_ZRXBTC 


def loop_ZRXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamzrxusdt}/{streamzrxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ZRXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ZRXUSDT).start()

def loop_ZRXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ZRXUSDT != 0.0 and qty_bids_a_g_ZRXUSDT != 0.0 and price_asks_a_g_ZRXUSDT != 0.0 and qty_asks_a_g_ZRXUSDT != 0.0 and price_bids_b_g_ZRXBTC != 0.0 and qty_bids_b_g_ZRXBTC != 0.0 and price_asks_b_g_ZRXBTC != 0.0 and qty_asks_b_g_ZRXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ZRXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ZRXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ZRXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ZRXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ZRXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ZRXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ZRXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ZRXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ZRXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ZRXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ZRXUSDT_Trade).start() 

streamfetusdt = 'fetusdt@bookTicker'
streamfetbtc  = 'fetbtc@bookTicker'

symbol_a_g_FETUSDT = 'FETUSDT' 
price_bids_a_g_FETUSDT = float(0.0) 
qty_bids_a_g_FETUSDT = float(0.0) 
price_asks_a_g_FETUSDT = float(0.0) 
qty_asks_a_g_FETUSDT = float(0.0) 

stepSize_FETUSDT = 1.00000000 

symbol_b_g_FETBTC = 'FETBTC' 
price_bids_b_g_FETBTC = float(0.0) 
qty_bids_b_g_FETBTC = float(0.0) 
price_asks_b_g_FETBTC = float(0.0) 
qty_asks_b_g_FETBTC = float(0.0) 

stepSize_FETBTC = 1.00000000 

def on_message_FETUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamfetusdt :
		symbol_a_l_FETUSDT = data['data']['s'] 
		price_bids_a_l_FETUSDT = data['data']['b'] 
		qty_bids_a_l_FETUSDT = data['data']['B'] 
		price_asks_a_l_FETUSDT = data['data']['a'] 
		qty_asks_a_l_FETUSDT = data['data']['A'] 

		global symbol_a_g_FETUSDT 
		global price_bids_a_g_FETUSDT 
		global qty_bids_a_g_FETUSDT 
		global price_asks_a_g_FETUSDT 
		global qty_asks_a_g_FETUSDT 

		symbol_a_g_FETUSDT = symbol_a_l_FETUSDT 
		price_bids_a_g_FETUSDT = price_bids_a_l_FETUSDT 
		qty_bids_a_g_FETUSDT = qty_bids_a_l_FETUSDT 
		price_asks_a_g_FETUSDT = price_asks_a_l_FETUSDT 
		qty_asks_a_g_FETUSDT = qty_asks_a_l_FETUSDT 

	if data['stream'] == streamfetbtc :
		data = json.loads(message) 

		symbol_b_l_FETBTC = data['data']['s'] 
		price_bids_b_l_FETBTC = data['data']['b'] 
		qty_bids_b_l_FETBTC = data['data']['B']
		price_asks_b_l_FETBTC = data['data']['a'] 
		qty_asks_b_l_FETBTC = data['data']['A'] 

		global symbol_b_g_FETBTC 
		global price_bids_b_g_FETBTC 
		global qty_bids_b_g_FETBTC 
		global price_asks_b_g_FETBTC 
		global qty_asks_b_g_FETBTC 

		symbol_b_g_FETBTC = symbol_b_l_FETBTC 
		price_bids_b_g_FETBTC = price_bids_b_l_FETBTC 
		qty_bids_b_g_FETBTC = qty_bids_b_l_FETBTC 
		price_asks_b_g_FETBTC = price_asks_b_l_FETBTC 
		qty_asks_b_g_FETBTC = qty_asks_b_l_FETBTC 


def loop_FETUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamfetusdt}/{streamfetbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FETUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FETUSDT).start()

def loop_FETUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FETUSDT != 0.0 and qty_bids_a_g_FETUSDT != 0.0 and price_asks_a_g_FETUSDT != 0.0 and qty_asks_a_g_FETUSDT != 0.0 and price_bids_b_g_FETBTC != 0.0 and qty_bids_b_g_FETBTC != 0.0 and price_asks_b_g_FETBTC != 0.0 and qty_asks_b_g_FETBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FETBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FETBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FETUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FETUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FETBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FETBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FETUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FETUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FETBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FETBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FETUSDT_Trade).start() 

streambatusdt = 'batusdt@bookTicker'
streambatbtc  = 'batbtc@bookTicker'

symbol_a_g_BATUSDT = 'BATUSDT' 
price_bids_a_g_BATUSDT = float(0.0) 
qty_bids_a_g_BATUSDT = float(0.0) 
price_asks_a_g_BATUSDT = float(0.0) 
qty_asks_a_g_BATUSDT = float(0.0) 

stepSize_BATUSDT = 1.00000000 

symbol_b_g_BATBTC = 'BATBTC' 
price_bids_b_g_BATBTC = float(0.0) 
qty_bids_b_g_BATBTC = float(0.0) 
price_asks_b_g_BATBTC = float(0.0) 
qty_asks_b_g_BATBTC = float(0.0) 

stepSize_BATBTC = 1.00000000 

def on_message_BATUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambatusdt :
		symbol_a_l_BATUSDT = data['data']['s'] 
		price_bids_a_l_BATUSDT = data['data']['b'] 
		qty_bids_a_l_BATUSDT = data['data']['B'] 
		price_asks_a_l_BATUSDT = data['data']['a'] 
		qty_asks_a_l_BATUSDT = data['data']['A'] 

		global symbol_a_g_BATUSDT 
		global price_bids_a_g_BATUSDT 
		global qty_bids_a_g_BATUSDT 
		global price_asks_a_g_BATUSDT 
		global qty_asks_a_g_BATUSDT 

		symbol_a_g_BATUSDT = symbol_a_l_BATUSDT 
		price_bids_a_g_BATUSDT = price_bids_a_l_BATUSDT 
		qty_bids_a_g_BATUSDT = qty_bids_a_l_BATUSDT 
		price_asks_a_g_BATUSDT = price_asks_a_l_BATUSDT 
		qty_asks_a_g_BATUSDT = qty_asks_a_l_BATUSDT 

	if data['stream'] == streambatbtc :
		data = json.loads(message) 

		symbol_b_l_BATBTC = data['data']['s'] 
		price_bids_b_l_BATBTC = data['data']['b'] 
		qty_bids_b_l_BATBTC = data['data']['B']
		price_asks_b_l_BATBTC = data['data']['a'] 
		qty_asks_b_l_BATBTC = data['data']['A'] 

		global symbol_b_g_BATBTC 
		global price_bids_b_g_BATBTC 
		global qty_bids_b_g_BATBTC 
		global price_asks_b_g_BATBTC 
		global qty_asks_b_g_BATBTC 

		symbol_b_g_BATBTC = symbol_b_l_BATBTC 
		price_bids_b_g_BATBTC = price_bids_b_l_BATBTC 
		qty_bids_b_g_BATBTC = qty_bids_b_l_BATBTC 
		price_asks_b_g_BATBTC = price_asks_b_l_BATBTC 
		qty_asks_b_g_BATBTC = qty_asks_b_l_BATBTC 


def loop_BATUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambatusdt}/{streambatbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BATUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BATUSDT).start()

def loop_BATUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BATUSDT != 0.0 and qty_bids_a_g_BATUSDT != 0.0 and price_asks_a_g_BATUSDT != 0.0 and qty_asks_a_g_BATUSDT != 0.0 and price_bids_b_g_BATBTC != 0.0 and qty_bids_b_g_BATBTC != 0.0 and price_asks_b_g_BATBTC != 0.0 and qty_asks_b_g_BATBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BATBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BATBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BATUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BATUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BATBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BATBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BATUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BATUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BATBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BATBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BATUSDT_Trade).start() 

streamxmrusdt = 'xmrusdt@bookTicker'
streamxmrbtc  = 'xmrbtc@bookTicker'

symbol_a_g_XMRUSDT = 'XMRUSDT' 
price_bids_a_g_XMRUSDT = float(0.0) 
qty_bids_a_g_XMRUSDT = float(0.0) 
price_asks_a_g_XMRUSDT = float(0.0) 
qty_asks_a_g_XMRUSDT = float(0.0) 

stepSize_XMRUSDT = 0.00100000 

symbol_b_g_XMRBTC = 'XMRBTC' 
price_bids_b_g_XMRBTC = float(0.0) 
qty_bids_b_g_XMRBTC = float(0.0) 
price_asks_b_g_XMRBTC = float(0.0) 
qty_asks_b_g_XMRBTC = float(0.0) 

stepSize_XMRBTC = 0.00100000 

def on_message_XMRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamxmrusdt :
		symbol_a_l_XMRUSDT = data['data']['s'] 
		price_bids_a_l_XMRUSDT = data['data']['b'] 
		qty_bids_a_l_XMRUSDT = data['data']['B'] 
		price_asks_a_l_XMRUSDT = data['data']['a'] 
		qty_asks_a_l_XMRUSDT = data['data']['A'] 

		global symbol_a_g_XMRUSDT 
		global price_bids_a_g_XMRUSDT 
		global qty_bids_a_g_XMRUSDT 
		global price_asks_a_g_XMRUSDT 
		global qty_asks_a_g_XMRUSDT 

		symbol_a_g_XMRUSDT = symbol_a_l_XMRUSDT 
		price_bids_a_g_XMRUSDT = price_bids_a_l_XMRUSDT 
		qty_bids_a_g_XMRUSDT = qty_bids_a_l_XMRUSDT 
		price_asks_a_g_XMRUSDT = price_asks_a_l_XMRUSDT 
		qty_asks_a_g_XMRUSDT = qty_asks_a_l_XMRUSDT 

	if data['stream'] == streamxmrbtc :
		data = json.loads(message) 

		symbol_b_l_XMRBTC = data['data']['s'] 
		price_bids_b_l_XMRBTC = data['data']['b'] 
		qty_bids_b_l_XMRBTC = data['data']['B']
		price_asks_b_l_XMRBTC = data['data']['a'] 
		qty_asks_b_l_XMRBTC = data['data']['A'] 

		global symbol_b_g_XMRBTC 
		global price_bids_b_g_XMRBTC 
		global qty_bids_b_g_XMRBTC 
		global price_asks_b_g_XMRBTC 
		global qty_asks_b_g_XMRBTC 

		symbol_b_g_XMRBTC = symbol_b_l_XMRBTC 
		price_bids_b_g_XMRBTC = price_bids_b_l_XMRBTC 
		qty_bids_b_g_XMRBTC = qty_bids_b_l_XMRBTC 
		price_asks_b_g_XMRBTC = price_asks_b_l_XMRBTC 
		qty_asks_b_g_XMRBTC = qty_asks_b_l_XMRBTC 


def loop_XMRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamxmrusdt}/{streamxmrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_XMRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_XMRUSDT).start()

def loop_XMRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_XMRUSDT != 0.0 and qty_bids_a_g_XMRUSDT != 0.0 and price_asks_a_g_XMRUSDT != 0.0 and qty_asks_a_g_XMRUSDT != 0.0 and price_bids_b_g_XMRBTC != 0.0 and qty_bids_b_g_XMRBTC != 0.0 and price_asks_b_g_XMRBTC != 0.0 and qty_asks_b_g_XMRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_XMRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_XMRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_XMRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_XMRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_XMRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_XMRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_XMRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_XMRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_XMRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_XMRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_XMRUSDT_Trade).start() 

streamzecusdt = 'zecusdt@bookTicker'
streamzecbtc  = 'zecbtc@bookTicker'

symbol_a_g_ZECUSDT = 'ZECUSDT' 
price_bids_a_g_ZECUSDT = float(0.0) 
qty_bids_a_g_ZECUSDT = float(0.0) 
price_asks_a_g_ZECUSDT = float(0.0) 
qty_asks_a_g_ZECUSDT = float(0.0) 

stepSize_ZECUSDT = 0.00100000 

symbol_b_g_ZECBTC = 'ZECBTC' 
price_bids_b_g_ZECBTC = float(0.0) 
qty_bids_b_g_ZECBTC = float(0.0) 
price_asks_b_g_ZECBTC = float(0.0) 
qty_asks_b_g_ZECBTC = float(0.0) 

stepSize_ZECBTC = 0.00100000 

def on_message_ZECUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamzecusdt :
		symbol_a_l_ZECUSDT = data['data']['s'] 
		price_bids_a_l_ZECUSDT = data['data']['b'] 
		qty_bids_a_l_ZECUSDT = data['data']['B'] 
		price_asks_a_l_ZECUSDT = data['data']['a'] 
		qty_asks_a_l_ZECUSDT = data['data']['A'] 

		global symbol_a_g_ZECUSDT 
		global price_bids_a_g_ZECUSDT 
		global qty_bids_a_g_ZECUSDT 
		global price_asks_a_g_ZECUSDT 
		global qty_asks_a_g_ZECUSDT 

		symbol_a_g_ZECUSDT = symbol_a_l_ZECUSDT 
		price_bids_a_g_ZECUSDT = price_bids_a_l_ZECUSDT 
		qty_bids_a_g_ZECUSDT = qty_bids_a_l_ZECUSDT 
		price_asks_a_g_ZECUSDT = price_asks_a_l_ZECUSDT 
		qty_asks_a_g_ZECUSDT = qty_asks_a_l_ZECUSDT 

	if data['stream'] == streamzecbtc :
		data = json.loads(message) 

		symbol_b_l_ZECBTC = data['data']['s'] 
		price_bids_b_l_ZECBTC = data['data']['b'] 
		qty_bids_b_l_ZECBTC = data['data']['B']
		price_asks_b_l_ZECBTC = data['data']['a'] 
		qty_asks_b_l_ZECBTC = data['data']['A'] 

		global symbol_b_g_ZECBTC 
		global price_bids_b_g_ZECBTC 
		global qty_bids_b_g_ZECBTC 
		global price_asks_b_g_ZECBTC 
		global qty_asks_b_g_ZECBTC 

		symbol_b_g_ZECBTC = symbol_b_l_ZECBTC 
		price_bids_b_g_ZECBTC = price_bids_b_l_ZECBTC 
		qty_bids_b_g_ZECBTC = qty_bids_b_l_ZECBTC 
		price_asks_b_g_ZECBTC = price_asks_b_l_ZECBTC 
		qty_asks_b_g_ZECBTC = qty_asks_b_l_ZECBTC 


def loop_ZECUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamzecusdt}/{streamzecbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ZECUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ZECUSDT).start()

def loop_ZECUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ZECUSDT != 0.0 and qty_bids_a_g_ZECUSDT != 0.0 and price_asks_a_g_ZECUSDT != 0.0 and qty_asks_a_g_ZECUSDT != 0.0 and price_bids_b_g_ZECBTC != 0.0 and qty_bids_b_g_ZECBTC != 0.0 and price_asks_b_g_ZECBTC != 0.0 and qty_asks_b_g_ZECBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ZECBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ZECBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ZECUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ZECUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ZECBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ZECBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ZECUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ZECUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ZECBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ZECBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ZECUSDT_Trade).start() 

streamiostusdt = 'iostusdt@bookTicker'
streamiostbtc  = 'iostbtc@bookTicker'

symbol_a_g_IOSTUSDT = 'IOSTUSDT' 
price_bids_a_g_IOSTUSDT = float(0.0) 
qty_bids_a_g_IOSTUSDT = float(0.0) 
price_asks_a_g_IOSTUSDT = float(0.0) 
qty_asks_a_g_IOSTUSDT = float(0.0) 

stepSize_IOSTUSDT = 1.00000000 

symbol_b_g_IOSTBTC = 'IOSTBTC' 
price_bids_b_g_IOSTBTC = float(0.0) 
qty_bids_b_g_IOSTBTC = float(0.0) 
price_asks_b_g_IOSTBTC = float(0.0) 
qty_asks_b_g_IOSTBTC = float(0.0) 

stepSize_IOSTBTC = 1.00000000 

def on_message_IOSTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamiostusdt :
		symbol_a_l_IOSTUSDT = data['data']['s'] 
		price_bids_a_l_IOSTUSDT = data['data']['b'] 
		qty_bids_a_l_IOSTUSDT = data['data']['B'] 
		price_asks_a_l_IOSTUSDT = data['data']['a'] 
		qty_asks_a_l_IOSTUSDT = data['data']['A'] 

		global symbol_a_g_IOSTUSDT 
		global price_bids_a_g_IOSTUSDT 
		global qty_bids_a_g_IOSTUSDT 
		global price_asks_a_g_IOSTUSDT 
		global qty_asks_a_g_IOSTUSDT 

		symbol_a_g_IOSTUSDT = symbol_a_l_IOSTUSDT 
		price_bids_a_g_IOSTUSDT = price_bids_a_l_IOSTUSDT 
		qty_bids_a_g_IOSTUSDT = qty_bids_a_l_IOSTUSDT 
		price_asks_a_g_IOSTUSDT = price_asks_a_l_IOSTUSDT 
		qty_asks_a_g_IOSTUSDT = qty_asks_a_l_IOSTUSDT 

	if data['stream'] == streamiostbtc :
		data = json.loads(message) 

		symbol_b_l_IOSTBTC = data['data']['s'] 
		price_bids_b_l_IOSTBTC = data['data']['b'] 
		qty_bids_b_l_IOSTBTC = data['data']['B']
		price_asks_b_l_IOSTBTC = data['data']['a'] 
		qty_asks_b_l_IOSTBTC = data['data']['A'] 

		global symbol_b_g_IOSTBTC 
		global price_bids_b_g_IOSTBTC 
		global qty_bids_b_g_IOSTBTC 
		global price_asks_b_g_IOSTBTC 
		global qty_asks_b_g_IOSTBTC 

		symbol_b_g_IOSTBTC = symbol_b_l_IOSTBTC 
		price_bids_b_g_IOSTBTC = price_bids_b_l_IOSTBTC 
		qty_bids_b_g_IOSTBTC = qty_bids_b_l_IOSTBTC 
		price_asks_b_g_IOSTBTC = price_asks_b_l_IOSTBTC 
		qty_asks_b_g_IOSTBTC = qty_asks_b_l_IOSTBTC 


def loop_IOSTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamiostusdt}/{streamiostbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_IOSTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_IOSTUSDT).start()

def loop_IOSTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_IOSTUSDT != 0.0 and qty_bids_a_g_IOSTUSDT != 0.0 and price_asks_a_g_IOSTUSDT != 0.0 and qty_asks_a_g_IOSTUSDT != 0.0 and price_bids_b_g_IOSTBTC != 0.0 and qty_bids_b_g_IOSTBTC != 0.0 and price_asks_b_g_IOSTBTC != 0.0 and qty_asks_b_g_IOSTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_IOSTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_IOSTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_IOSTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_IOSTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_IOSTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_IOSTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_IOSTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_IOSTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_IOSTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_IOSTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_IOSTUSDT_Trade).start() 

streamcelrusdt = 'celrusdt@bookTicker'
streamcelrbtc  = 'celrbtc@bookTicker'

symbol_a_g_CELRUSDT = 'CELRUSDT' 
price_bids_a_g_CELRUSDT = float(0.0) 
qty_bids_a_g_CELRUSDT = float(0.0) 
price_asks_a_g_CELRUSDT = float(0.0) 
qty_asks_a_g_CELRUSDT = float(0.0) 

stepSize_CELRUSDT = 0.10000000 

symbol_b_g_CELRBTC = 'CELRBTC' 
price_bids_b_g_CELRBTC = float(0.0) 
qty_bids_b_g_CELRBTC = float(0.0) 
price_asks_b_g_CELRBTC = float(0.0) 
qty_asks_b_g_CELRBTC = float(0.0) 

stepSize_CELRBTC = 1.00000000 

def on_message_CELRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamcelrusdt :
		symbol_a_l_CELRUSDT = data['data']['s'] 
		price_bids_a_l_CELRUSDT = data['data']['b'] 
		qty_bids_a_l_CELRUSDT = data['data']['B'] 
		price_asks_a_l_CELRUSDT = data['data']['a'] 
		qty_asks_a_l_CELRUSDT = data['data']['A'] 

		global symbol_a_g_CELRUSDT 
		global price_bids_a_g_CELRUSDT 
		global qty_bids_a_g_CELRUSDT 
		global price_asks_a_g_CELRUSDT 
		global qty_asks_a_g_CELRUSDT 

		symbol_a_g_CELRUSDT = symbol_a_l_CELRUSDT 
		price_bids_a_g_CELRUSDT = price_bids_a_l_CELRUSDT 
		qty_bids_a_g_CELRUSDT = qty_bids_a_l_CELRUSDT 
		price_asks_a_g_CELRUSDT = price_asks_a_l_CELRUSDT 
		qty_asks_a_g_CELRUSDT = qty_asks_a_l_CELRUSDT 

	if data['stream'] == streamcelrbtc :
		data = json.loads(message) 

		symbol_b_l_CELRBTC = data['data']['s'] 
		price_bids_b_l_CELRBTC = data['data']['b'] 
		qty_bids_b_l_CELRBTC = data['data']['B']
		price_asks_b_l_CELRBTC = data['data']['a'] 
		qty_asks_b_l_CELRBTC = data['data']['A'] 

		global symbol_b_g_CELRBTC 
		global price_bids_b_g_CELRBTC 
		global qty_bids_b_g_CELRBTC 
		global price_asks_b_g_CELRBTC 
		global qty_asks_b_g_CELRBTC 

		symbol_b_g_CELRBTC = symbol_b_l_CELRBTC 
		price_bids_b_g_CELRBTC = price_bids_b_l_CELRBTC 
		qty_bids_b_g_CELRBTC = qty_bids_b_l_CELRBTC 
		price_asks_b_g_CELRBTC = price_asks_b_l_CELRBTC 
		qty_asks_b_g_CELRBTC = qty_asks_b_l_CELRBTC 


def loop_CELRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamcelrusdt}/{streamcelrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CELRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CELRUSDT).start()

def loop_CELRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CELRUSDT != 0.0 and qty_bids_a_g_CELRUSDT != 0.0 and price_asks_a_g_CELRUSDT != 0.0 and qty_asks_a_g_CELRUSDT != 0.0 and price_bids_b_g_CELRBTC != 0.0 and qty_bids_b_g_CELRBTC != 0.0 and price_asks_b_g_CELRBTC != 0.0 and qty_asks_b_g_CELRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CELRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CELRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CELRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CELRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CELRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CELRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CELRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CELRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CELRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CELRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CELRUSDT_Trade).start() 

streamdashusdt = 'dashusdt@bookTicker'
streamdashbtc  = 'dashbtc@bookTicker'

symbol_a_g_DASHUSDT = 'DASHUSDT' 
price_bids_a_g_DASHUSDT = float(0.0) 
qty_bids_a_g_DASHUSDT = float(0.0) 
price_asks_a_g_DASHUSDT = float(0.0) 
qty_asks_a_g_DASHUSDT = float(0.0) 

stepSize_DASHUSDT = 0.00100000 

symbol_b_g_DASHBTC = 'DASHBTC' 
price_bids_b_g_DASHBTC = float(0.0) 
qty_bids_b_g_DASHBTC = float(0.0) 
price_asks_b_g_DASHBTC = float(0.0) 
qty_asks_b_g_DASHBTC = float(0.0) 

stepSize_DASHBTC = 0.00100000 

def on_message_DASHUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamdashusdt :
		symbol_a_l_DASHUSDT = data['data']['s'] 
		price_bids_a_l_DASHUSDT = data['data']['b'] 
		qty_bids_a_l_DASHUSDT = data['data']['B'] 
		price_asks_a_l_DASHUSDT = data['data']['a'] 
		qty_asks_a_l_DASHUSDT = data['data']['A'] 

		global symbol_a_g_DASHUSDT 
		global price_bids_a_g_DASHUSDT 
		global qty_bids_a_g_DASHUSDT 
		global price_asks_a_g_DASHUSDT 
		global qty_asks_a_g_DASHUSDT 

		symbol_a_g_DASHUSDT = symbol_a_l_DASHUSDT 
		price_bids_a_g_DASHUSDT = price_bids_a_l_DASHUSDT 
		qty_bids_a_g_DASHUSDT = qty_bids_a_l_DASHUSDT 
		price_asks_a_g_DASHUSDT = price_asks_a_l_DASHUSDT 
		qty_asks_a_g_DASHUSDT = qty_asks_a_l_DASHUSDT 

	if data['stream'] == streamdashbtc :
		data = json.loads(message) 

		symbol_b_l_DASHBTC = data['data']['s'] 
		price_bids_b_l_DASHBTC = data['data']['b'] 
		qty_bids_b_l_DASHBTC = data['data']['B']
		price_asks_b_l_DASHBTC = data['data']['a'] 
		qty_asks_b_l_DASHBTC = data['data']['A'] 

		global symbol_b_g_DASHBTC 
		global price_bids_b_g_DASHBTC 
		global qty_bids_b_g_DASHBTC 
		global price_asks_b_g_DASHBTC 
		global qty_asks_b_g_DASHBTC 

		symbol_b_g_DASHBTC = symbol_b_l_DASHBTC 
		price_bids_b_g_DASHBTC = price_bids_b_l_DASHBTC 
		qty_bids_b_g_DASHBTC = qty_bids_b_l_DASHBTC 
		price_asks_b_g_DASHBTC = price_asks_b_l_DASHBTC 
		qty_asks_b_g_DASHBTC = qty_asks_b_l_DASHBTC 


def loop_DASHUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamdashusdt}/{streamdashbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DASHUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DASHUSDT).start()

def loop_DASHUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DASHUSDT != 0.0 and qty_bids_a_g_DASHUSDT != 0.0 and price_asks_a_g_DASHUSDT != 0.0 and qty_asks_a_g_DASHUSDT != 0.0 and price_bids_b_g_DASHBTC != 0.0 and qty_bids_b_g_DASHBTC != 0.0 and price_asks_b_g_DASHBTC != 0.0 and qty_asks_b_g_DASHBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DASHBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DASHBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DASHUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DASHUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DASHBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DASHBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DASHUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DASHUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DASHBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DASHBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DASHUSDT_Trade).start() 

streamomgusdt = 'omgusdt@bookTicker'
streamomgbtc  = 'omgbtc@bookTicker'

symbol_a_g_OMGUSDT = 'OMGUSDT' 
price_bids_a_g_OMGUSDT = float(0.0) 
qty_bids_a_g_OMGUSDT = float(0.0) 
price_asks_a_g_OMGUSDT = float(0.0) 
qty_asks_a_g_OMGUSDT = float(0.0) 

stepSize_OMGUSDT = 0.10000000 

symbol_b_g_OMGBTC = 'OMGBTC' 
price_bids_b_g_OMGBTC = float(0.0) 
qty_bids_b_g_OMGBTC = float(0.0) 
price_asks_b_g_OMGBTC = float(0.0) 
qty_asks_b_g_OMGBTC = float(0.0) 

stepSize_OMGBTC = 0.10000000 

def on_message_OMGUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamomgusdt :
		symbol_a_l_OMGUSDT = data['data']['s'] 
		price_bids_a_l_OMGUSDT = data['data']['b'] 
		qty_bids_a_l_OMGUSDT = data['data']['B'] 
		price_asks_a_l_OMGUSDT = data['data']['a'] 
		qty_asks_a_l_OMGUSDT = data['data']['A'] 

		global symbol_a_g_OMGUSDT 
		global price_bids_a_g_OMGUSDT 
		global qty_bids_a_g_OMGUSDT 
		global price_asks_a_g_OMGUSDT 
		global qty_asks_a_g_OMGUSDT 

		symbol_a_g_OMGUSDT = symbol_a_l_OMGUSDT 
		price_bids_a_g_OMGUSDT = price_bids_a_l_OMGUSDT 
		qty_bids_a_g_OMGUSDT = qty_bids_a_l_OMGUSDT 
		price_asks_a_g_OMGUSDT = price_asks_a_l_OMGUSDT 
		qty_asks_a_g_OMGUSDT = qty_asks_a_l_OMGUSDT 

	if data['stream'] == streamomgbtc :
		data = json.loads(message) 

		symbol_b_l_OMGBTC = data['data']['s'] 
		price_bids_b_l_OMGBTC = data['data']['b'] 
		qty_bids_b_l_OMGBTC = data['data']['B']
		price_asks_b_l_OMGBTC = data['data']['a'] 
		qty_asks_b_l_OMGBTC = data['data']['A'] 

		global symbol_b_g_OMGBTC 
		global price_bids_b_g_OMGBTC 
		global qty_bids_b_g_OMGBTC 
		global price_asks_b_g_OMGBTC 
		global qty_asks_b_g_OMGBTC 

		symbol_b_g_OMGBTC = symbol_b_l_OMGBTC 
		price_bids_b_g_OMGBTC = price_bids_b_l_OMGBTC 
		qty_bids_b_g_OMGBTC = qty_bids_b_l_OMGBTC 
		price_asks_b_g_OMGBTC = price_asks_b_l_OMGBTC 
		qty_asks_b_g_OMGBTC = qty_asks_b_l_OMGBTC 


def loop_OMGUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamomgusdt}/{streamomgbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_OMGUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_OMGUSDT).start()

def loop_OMGUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_OMGUSDT != 0.0 and qty_bids_a_g_OMGUSDT != 0.0 and price_asks_a_g_OMGUSDT != 0.0 and qty_asks_a_g_OMGUSDT != 0.0 and price_bids_b_g_OMGBTC != 0.0 and qty_bids_b_g_OMGBTC != 0.0 and price_asks_b_g_OMGBTC != 0.0 and qty_asks_b_g_OMGBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_OMGBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_OMGBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_OMGUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_OMGUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_OMGBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_OMGBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_OMGUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_OMGUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_OMGBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_OMGBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_OMGUSDT_Trade).start() 

streamthetausdt = 'thetausdt@bookTicker'
streamthetabtc  = 'thetabtc@bookTicker'

symbol_a_g_THETAUSDT = 'THETAUSDT' 
price_bids_a_g_THETAUSDT = float(0.0) 
qty_bids_a_g_THETAUSDT = float(0.0) 
price_asks_a_g_THETAUSDT = float(0.0) 
qty_asks_a_g_THETAUSDT = float(0.0) 

stepSize_THETAUSDT = 0.10000000 

symbol_b_g_THETABTC = 'THETABTC' 
price_bids_b_g_THETABTC = float(0.0) 
qty_bids_b_g_THETABTC = float(0.0) 
price_asks_b_g_THETABTC = float(0.0) 
qty_asks_b_g_THETABTC = float(0.0) 

stepSize_THETABTC = 0.10000000 

def on_message_THETAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamthetausdt :
		symbol_a_l_THETAUSDT = data['data']['s'] 
		price_bids_a_l_THETAUSDT = data['data']['b'] 
		qty_bids_a_l_THETAUSDT = data['data']['B'] 
		price_asks_a_l_THETAUSDT = data['data']['a'] 
		qty_asks_a_l_THETAUSDT = data['data']['A'] 

		global symbol_a_g_THETAUSDT 
		global price_bids_a_g_THETAUSDT 
		global qty_bids_a_g_THETAUSDT 
		global price_asks_a_g_THETAUSDT 
		global qty_asks_a_g_THETAUSDT 

		symbol_a_g_THETAUSDT = symbol_a_l_THETAUSDT 
		price_bids_a_g_THETAUSDT = price_bids_a_l_THETAUSDT 
		qty_bids_a_g_THETAUSDT = qty_bids_a_l_THETAUSDT 
		price_asks_a_g_THETAUSDT = price_asks_a_l_THETAUSDT 
		qty_asks_a_g_THETAUSDT = qty_asks_a_l_THETAUSDT 

	if data['stream'] == streamthetabtc :
		data = json.loads(message) 

		symbol_b_l_THETABTC = data['data']['s'] 
		price_bids_b_l_THETABTC = data['data']['b'] 
		qty_bids_b_l_THETABTC = data['data']['B']
		price_asks_b_l_THETABTC = data['data']['a'] 
		qty_asks_b_l_THETABTC = data['data']['A'] 

		global symbol_b_g_THETABTC 
		global price_bids_b_g_THETABTC 
		global qty_bids_b_g_THETABTC 
		global price_asks_b_g_THETABTC 
		global qty_asks_b_g_THETABTC 

		symbol_b_g_THETABTC = symbol_b_l_THETABTC 
		price_bids_b_g_THETABTC = price_bids_b_l_THETABTC 
		qty_bids_b_g_THETABTC = qty_bids_b_l_THETABTC 
		price_asks_b_g_THETABTC = price_asks_b_l_THETABTC 
		qty_asks_b_g_THETABTC = qty_asks_b_l_THETABTC 


def loop_THETAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamthetausdt}/{streamthetabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_THETAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_THETAUSDT).start()

def loop_THETAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_THETAUSDT != 0.0 and qty_bids_a_g_THETAUSDT != 0.0 and price_asks_a_g_THETAUSDT != 0.0 and qty_asks_a_g_THETAUSDT != 0.0 and price_bids_b_g_THETABTC != 0.0 and qty_bids_b_g_THETABTC != 0.0 and price_asks_b_g_THETABTC != 0.0 and qty_asks_b_g_THETABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_THETABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_THETABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_THETAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_THETAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_THETABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_THETABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_THETAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_THETAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_THETABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_THETABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_THETAUSDT_Trade).start() 

streamenjusdt = 'enjusdt@bookTicker'
streamenjbtc  = 'enjbtc@bookTicker'

symbol_a_g_ENJUSDT = 'ENJUSDT' 
price_bids_a_g_ENJUSDT = float(0.0) 
qty_bids_a_g_ENJUSDT = float(0.0) 
price_asks_a_g_ENJUSDT = float(0.0) 
qty_asks_a_g_ENJUSDT = float(0.0) 

stepSize_ENJUSDT = 0.10000000 

symbol_b_g_ENJBTC = 'ENJBTC' 
price_bids_b_g_ENJBTC = float(0.0) 
qty_bids_b_g_ENJBTC = float(0.0) 
price_asks_b_g_ENJBTC = float(0.0) 
qty_asks_b_g_ENJBTC = float(0.0) 

stepSize_ENJBTC = 0.10000000 

def on_message_ENJUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamenjusdt :
		symbol_a_l_ENJUSDT = data['data']['s'] 
		price_bids_a_l_ENJUSDT = data['data']['b'] 
		qty_bids_a_l_ENJUSDT = data['data']['B'] 
		price_asks_a_l_ENJUSDT = data['data']['a'] 
		qty_asks_a_l_ENJUSDT = data['data']['A'] 

		global symbol_a_g_ENJUSDT 
		global price_bids_a_g_ENJUSDT 
		global qty_bids_a_g_ENJUSDT 
		global price_asks_a_g_ENJUSDT 
		global qty_asks_a_g_ENJUSDT 

		symbol_a_g_ENJUSDT = symbol_a_l_ENJUSDT 
		price_bids_a_g_ENJUSDT = price_bids_a_l_ENJUSDT 
		qty_bids_a_g_ENJUSDT = qty_bids_a_l_ENJUSDT 
		price_asks_a_g_ENJUSDT = price_asks_a_l_ENJUSDT 
		qty_asks_a_g_ENJUSDT = qty_asks_a_l_ENJUSDT 

	if data['stream'] == streamenjbtc :
		data = json.loads(message) 

		symbol_b_l_ENJBTC = data['data']['s'] 
		price_bids_b_l_ENJBTC = data['data']['b'] 
		qty_bids_b_l_ENJBTC = data['data']['B']
		price_asks_b_l_ENJBTC = data['data']['a'] 
		qty_asks_b_l_ENJBTC = data['data']['A'] 

		global symbol_b_g_ENJBTC 
		global price_bids_b_g_ENJBTC 
		global qty_bids_b_g_ENJBTC 
		global price_asks_b_g_ENJBTC 
		global qty_asks_b_g_ENJBTC 

		symbol_b_g_ENJBTC = symbol_b_l_ENJBTC 
		price_bids_b_g_ENJBTC = price_bids_b_l_ENJBTC 
		qty_bids_b_g_ENJBTC = qty_bids_b_l_ENJBTC 
		price_asks_b_g_ENJBTC = price_asks_b_l_ENJBTC 
		qty_asks_b_g_ENJBTC = qty_asks_b_l_ENJBTC 


def loop_ENJUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamenjusdt}/{streamenjbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ENJUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ENJUSDT).start()

def loop_ENJUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ENJUSDT != 0.0 and qty_bids_a_g_ENJUSDT != 0.0 and price_asks_a_g_ENJUSDT != 0.0 and qty_asks_a_g_ENJUSDT != 0.0 and price_bids_b_g_ENJBTC != 0.0 and qty_bids_b_g_ENJBTC != 0.0 and price_asks_b_g_ENJBTC != 0.0 and qty_asks_b_g_ENJBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ENJBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ENJBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ENJUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ENJUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ENJBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ENJBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ENJUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ENJUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ENJBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ENJBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ENJUSDT_Trade).start() 

streammaticusdt = 'maticusdt@bookTicker'
streammaticbtc  = 'maticbtc@bookTicker'

symbol_a_g_MATICUSDT = 'MATICUSDT' 
price_bids_a_g_MATICUSDT = float(0.0) 
qty_bids_a_g_MATICUSDT = float(0.0) 
price_asks_a_g_MATICUSDT = float(0.0) 
qty_asks_a_g_MATICUSDT = float(0.0) 

stepSize_MATICUSDT = 0.10000000 

symbol_b_g_MATICBTC = 'MATICBTC' 
price_bids_b_g_MATICBTC = float(0.0) 
qty_bids_b_g_MATICBTC = float(0.0) 
price_asks_b_g_MATICBTC = float(0.0) 
qty_asks_b_g_MATICBTC = float(0.0) 

stepSize_MATICBTC = 0.10000000 

def on_message_MATICUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streammaticusdt :
		symbol_a_l_MATICUSDT = data['data']['s'] 
		price_bids_a_l_MATICUSDT = data['data']['b'] 
		qty_bids_a_l_MATICUSDT = data['data']['B'] 
		price_asks_a_l_MATICUSDT = data['data']['a'] 
		qty_asks_a_l_MATICUSDT = data['data']['A'] 

		global symbol_a_g_MATICUSDT 
		global price_bids_a_g_MATICUSDT 
		global qty_bids_a_g_MATICUSDT 
		global price_asks_a_g_MATICUSDT 
		global qty_asks_a_g_MATICUSDT 

		symbol_a_g_MATICUSDT = symbol_a_l_MATICUSDT 
		price_bids_a_g_MATICUSDT = price_bids_a_l_MATICUSDT 
		qty_bids_a_g_MATICUSDT = qty_bids_a_l_MATICUSDT 
		price_asks_a_g_MATICUSDT = price_asks_a_l_MATICUSDT 
		qty_asks_a_g_MATICUSDT = qty_asks_a_l_MATICUSDT 

	if data['stream'] == streammaticbtc :
		data = json.loads(message) 

		symbol_b_l_MATICBTC = data['data']['s'] 
		price_bids_b_l_MATICBTC = data['data']['b'] 
		qty_bids_b_l_MATICBTC = data['data']['B']
		price_asks_b_l_MATICBTC = data['data']['a'] 
		qty_asks_b_l_MATICBTC = data['data']['A'] 

		global symbol_b_g_MATICBTC 
		global price_bids_b_g_MATICBTC 
		global qty_bids_b_g_MATICBTC 
		global price_asks_b_g_MATICBTC 
		global qty_asks_b_g_MATICBTC 

		symbol_b_g_MATICBTC = symbol_b_l_MATICBTC 
		price_bids_b_g_MATICBTC = price_bids_b_l_MATICBTC 
		qty_bids_b_g_MATICBTC = qty_bids_b_l_MATICBTC 
		price_asks_b_g_MATICBTC = price_asks_b_l_MATICBTC 
		qty_asks_b_g_MATICBTC = qty_asks_b_l_MATICBTC 


def loop_MATICUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streammaticusdt}/{streammaticbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_MATICUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_MATICUSDT).start()

def loop_MATICUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_MATICUSDT != 0.0 and qty_bids_a_g_MATICUSDT != 0.0 and price_asks_a_g_MATICUSDT != 0.0 and qty_asks_a_g_MATICUSDT != 0.0 and price_bids_b_g_MATICBTC != 0.0 and qty_bids_b_g_MATICBTC != 0.0 and price_asks_b_g_MATICBTC != 0.0 and qty_asks_b_g_MATICBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_MATICBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_MATICBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_MATICUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_MATICUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_MATICBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_MATICBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_MATICUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_MATICUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_MATICBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_MATICBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_MATICUSDT_Trade).start() 

streamatomusdt = 'atomusdt@bookTicker'
streamatombtc  = 'atombtc@bookTicker'

symbol_a_g_ATOMUSDT = 'ATOMUSDT' 
price_bids_a_g_ATOMUSDT = float(0.0) 
qty_bids_a_g_ATOMUSDT = float(0.0) 
price_asks_a_g_ATOMUSDT = float(0.0) 
qty_asks_a_g_ATOMUSDT = float(0.0) 

stepSize_ATOMUSDT = 0.01000000 

symbol_b_g_ATOMBTC = 'ATOMBTC' 
price_bids_b_g_ATOMBTC = float(0.0) 
qty_bids_b_g_ATOMBTC = float(0.0) 
price_asks_b_g_ATOMBTC = float(0.0) 
qty_asks_b_g_ATOMBTC = float(0.0) 

stepSize_ATOMBTC = 0.01000000 

def on_message_ATOMUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamatomusdt :
		symbol_a_l_ATOMUSDT = data['data']['s'] 
		price_bids_a_l_ATOMUSDT = data['data']['b'] 
		qty_bids_a_l_ATOMUSDT = data['data']['B'] 
		price_asks_a_l_ATOMUSDT = data['data']['a'] 
		qty_asks_a_l_ATOMUSDT = data['data']['A'] 

		global symbol_a_g_ATOMUSDT 
		global price_bids_a_g_ATOMUSDT 
		global qty_bids_a_g_ATOMUSDT 
		global price_asks_a_g_ATOMUSDT 
		global qty_asks_a_g_ATOMUSDT 

		symbol_a_g_ATOMUSDT = symbol_a_l_ATOMUSDT 
		price_bids_a_g_ATOMUSDT = price_bids_a_l_ATOMUSDT 
		qty_bids_a_g_ATOMUSDT = qty_bids_a_l_ATOMUSDT 
		price_asks_a_g_ATOMUSDT = price_asks_a_l_ATOMUSDT 
		qty_asks_a_g_ATOMUSDT = qty_asks_a_l_ATOMUSDT 

	if data['stream'] == streamatombtc :
		data = json.loads(message) 

		symbol_b_l_ATOMBTC = data['data']['s'] 
		price_bids_b_l_ATOMBTC = data['data']['b'] 
		qty_bids_b_l_ATOMBTC = data['data']['B']
		price_asks_b_l_ATOMBTC = data['data']['a'] 
		qty_asks_b_l_ATOMBTC = data['data']['A'] 

		global symbol_b_g_ATOMBTC 
		global price_bids_b_g_ATOMBTC 
		global qty_bids_b_g_ATOMBTC 
		global price_asks_b_g_ATOMBTC 
		global qty_asks_b_g_ATOMBTC 

		symbol_b_g_ATOMBTC = symbol_b_l_ATOMBTC 
		price_bids_b_g_ATOMBTC = price_bids_b_l_ATOMBTC 
		qty_bids_b_g_ATOMBTC = qty_bids_b_l_ATOMBTC 
		price_asks_b_g_ATOMBTC = price_asks_b_l_ATOMBTC 
		qty_asks_b_g_ATOMBTC = qty_asks_b_l_ATOMBTC 


def loop_ATOMUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamatomusdt}/{streamatombtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ATOMUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ATOMUSDT).start()

def loop_ATOMUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ATOMUSDT != 0.0 and qty_bids_a_g_ATOMUSDT != 0.0 and price_asks_a_g_ATOMUSDT != 0.0 and qty_asks_a_g_ATOMUSDT != 0.0 and price_bids_b_g_ATOMBTC != 0.0 and qty_bids_b_g_ATOMBTC != 0.0 and price_asks_b_g_ATOMBTC != 0.0 and qty_asks_b_g_ATOMBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ATOMBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ATOMBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ATOMUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ATOMUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ATOMBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ATOMBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ATOMUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ATOMUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ATOMBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ATOMBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ATOMUSDT_Trade).start() 

streamtfuelusdt = 'tfuelusdt@bookTicker'
streamtfuelbtc  = 'tfuelbtc@bookTicker'

symbol_a_g_TFUELUSDT = 'TFUELUSDT' 
price_bids_a_g_TFUELUSDT = float(0.0) 
qty_bids_a_g_TFUELUSDT = float(0.0) 
price_asks_a_g_TFUELUSDT = float(0.0) 
qty_asks_a_g_TFUELUSDT = float(0.0) 

stepSize_TFUELUSDT = 1.00000000 

symbol_b_g_TFUELBTC = 'TFUELBTC' 
price_bids_b_g_TFUELBTC = float(0.0) 
qty_bids_b_g_TFUELBTC = float(0.0) 
price_asks_b_g_TFUELBTC = float(0.0) 
qty_asks_b_g_TFUELBTC = float(0.0) 

stepSize_TFUELBTC = 1.00000000 

def on_message_TFUELUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamtfuelusdt :
		symbol_a_l_TFUELUSDT = data['data']['s'] 
		price_bids_a_l_TFUELUSDT = data['data']['b'] 
		qty_bids_a_l_TFUELUSDT = data['data']['B'] 
		price_asks_a_l_TFUELUSDT = data['data']['a'] 
		qty_asks_a_l_TFUELUSDT = data['data']['A'] 

		global symbol_a_g_TFUELUSDT 
		global price_bids_a_g_TFUELUSDT 
		global qty_bids_a_g_TFUELUSDT 
		global price_asks_a_g_TFUELUSDT 
		global qty_asks_a_g_TFUELUSDT 

		symbol_a_g_TFUELUSDT = symbol_a_l_TFUELUSDT 
		price_bids_a_g_TFUELUSDT = price_bids_a_l_TFUELUSDT 
		qty_bids_a_g_TFUELUSDT = qty_bids_a_l_TFUELUSDT 
		price_asks_a_g_TFUELUSDT = price_asks_a_l_TFUELUSDT 
		qty_asks_a_g_TFUELUSDT = qty_asks_a_l_TFUELUSDT 

	if data['stream'] == streamtfuelbtc :
		data = json.loads(message) 

		symbol_b_l_TFUELBTC = data['data']['s'] 
		price_bids_b_l_TFUELBTC = data['data']['b'] 
		qty_bids_b_l_TFUELBTC = data['data']['B']
		price_asks_b_l_TFUELBTC = data['data']['a'] 
		qty_asks_b_l_TFUELBTC = data['data']['A'] 

		global symbol_b_g_TFUELBTC 
		global price_bids_b_g_TFUELBTC 
		global qty_bids_b_g_TFUELBTC 
		global price_asks_b_g_TFUELBTC 
		global qty_asks_b_g_TFUELBTC 

		symbol_b_g_TFUELBTC = symbol_b_l_TFUELBTC 
		price_bids_b_g_TFUELBTC = price_bids_b_l_TFUELBTC 
		qty_bids_b_g_TFUELBTC = qty_bids_b_l_TFUELBTC 
		price_asks_b_g_TFUELBTC = price_asks_b_l_TFUELBTC 
		qty_asks_b_g_TFUELBTC = qty_asks_b_l_TFUELBTC 


def loop_TFUELUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamtfuelusdt}/{streamtfuelbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_TFUELUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_TFUELUSDT).start()

def loop_TFUELUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_TFUELUSDT != 0.0 and qty_bids_a_g_TFUELUSDT != 0.0 and price_asks_a_g_TFUELUSDT != 0.0 and qty_asks_a_g_TFUELUSDT != 0.0 and price_bids_b_g_TFUELBTC != 0.0 and qty_bids_b_g_TFUELBTC != 0.0 and price_asks_b_g_TFUELBTC != 0.0 and qty_asks_b_g_TFUELBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_TFUELBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_TFUELBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_TFUELUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_TFUELUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_TFUELBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_TFUELBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_TFUELUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_TFUELUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_TFUELBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_TFUELBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_TFUELUSDT_Trade).start() 

streamoneusdt = 'oneusdt@bookTicker'
streamonebtc  = 'onebtc@bookTicker'

symbol_a_g_ONEUSDT = 'ONEUSDT' 
price_bids_a_g_ONEUSDT = float(0.0) 
qty_bids_a_g_ONEUSDT = float(0.0) 
price_asks_a_g_ONEUSDT = float(0.0) 
qty_asks_a_g_ONEUSDT = float(0.0) 

stepSize_ONEUSDT = 0.10000000 

symbol_b_g_ONEBTC = 'ONEBTC' 
price_bids_b_g_ONEBTC = float(0.0) 
qty_bids_b_g_ONEBTC = float(0.0) 
price_asks_b_g_ONEBTC = float(0.0) 
qty_asks_b_g_ONEBTC = float(0.0) 

stepSize_ONEBTC = 1.00000000 

def on_message_ONEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamoneusdt :
		symbol_a_l_ONEUSDT = data['data']['s'] 
		price_bids_a_l_ONEUSDT = data['data']['b'] 
		qty_bids_a_l_ONEUSDT = data['data']['B'] 
		price_asks_a_l_ONEUSDT = data['data']['a'] 
		qty_asks_a_l_ONEUSDT = data['data']['A'] 

		global symbol_a_g_ONEUSDT 
		global price_bids_a_g_ONEUSDT 
		global qty_bids_a_g_ONEUSDT 
		global price_asks_a_g_ONEUSDT 
		global qty_asks_a_g_ONEUSDT 

		symbol_a_g_ONEUSDT = symbol_a_l_ONEUSDT 
		price_bids_a_g_ONEUSDT = price_bids_a_l_ONEUSDT 
		qty_bids_a_g_ONEUSDT = qty_bids_a_l_ONEUSDT 
		price_asks_a_g_ONEUSDT = price_asks_a_l_ONEUSDT 
		qty_asks_a_g_ONEUSDT = qty_asks_a_l_ONEUSDT 

	if data['stream'] == streamonebtc :
		data = json.loads(message) 

		symbol_b_l_ONEBTC = data['data']['s'] 
		price_bids_b_l_ONEBTC = data['data']['b'] 
		qty_bids_b_l_ONEBTC = data['data']['B']
		price_asks_b_l_ONEBTC = data['data']['a'] 
		qty_asks_b_l_ONEBTC = data['data']['A'] 

		global symbol_b_g_ONEBTC 
		global price_bids_b_g_ONEBTC 
		global qty_bids_b_g_ONEBTC 
		global price_asks_b_g_ONEBTC 
		global qty_asks_b_g_ONEBTC 

		symbol_b_g_ONEBTC = symbol_b_l_ONEBTC 
		price_bids_b_g_ONEBTC = price_bids_b_l_ONEBTC 
		qty_bids_b_g_ONEBTC = qty_bids_b_l_ONEBTC 
		price_asks_b_g_ONEBTC = price_asks_b_l_ONEBTC 
		qty_asks_b_g_ONEBTC = qty_asks_b_l_ONEBTC 


def loop_ONEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamoneusdt}/{streamonebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ONEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ONEUSDT).start()

def loop_ONEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ONEUSDT != 0.0 and qty_bids_a_g_ONEUSDT != 0.0 and price_asks_a_g_ONEUSDT != 0.0 and qty_asks_a_g_ONEUSDT != 0.0 and price_bids_b_g_ONEBTC != 0.0 and qty_bids_b_g_ONEBTC != 0.0 and price_asks_b_g_ONEBTC != 0.0 and qty_asks_b_g_ONEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ONEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ONEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ONEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ONEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ONEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ONEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ONEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ONEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ONEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ONEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ONEUSDT_Trade).start() 

streamftmusdt = 'ftmusdt@bookTicker'
streamftmbtc  = 'ftmbtc@bookTicker'

symbol_a_g_FTMUSDT = 'FTMUSDT' 
price_bids_a_g_FTMUSDT = float(0.0) 
qty_bids_a_g_FTMUSDT = float(0.0) 
price_asks_a_g_FTMUSDT = float(0.0) 
qty_asks_a_g_FTMUSDT = float(0.0) 

stepSize_FTMUSDT = 1.00000000 

symbol_b_g_FTMBTC = 'FTMBTC' 
price_bids_b_g_FTMBTC = float(0.0) 
qty_bids_b_g_FTMBTC = float(0.0) 
price_asks_b_g_FTMBTC = float(0.0) 
qty_asks_b_g_FTMBTC = float(0.0) 

stepSize_FTMBTC = 1.00000000 

def on_message_FTMUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamftmusdt :
		symbol_a_l_FTMUSDT = data['data']['s'] 
		price_bids_a_l_FTMUSDT = data['data']['b'] 
		qty_bids_a_l_FTMUSDT = data['data']['B'] 
		price_asks_a_l_FTMUSDT = data['data']['a'] 
		qty_asks_a_l_FTMUSDT = data['data']['A'] 

		global symbol_a_g_FTMUSDT 
		global price_bids_a_g_FTMUSDT 
		global qty_bids_a_g_FTMUSDT 
		global price_asks_a_g_FTMUSDT 
		global qty_asks_a_g_FTMUSDT 

		symbol_a_g_FTMUSDT = symbol_a_l_FTMUSDT 
		price_bids_a_g_FTMUSDT = price_bids_a_l_FTMUSDT 
		qty_bids_a_g_FTMUSDT = qty_bids_a_l_FTMUSDT 
		price_asks_a_g_FTMUSDT = price_asks_a_l_FTMUSDT 
		qty_asks_a_g_FTMUSDT = qty_asks_a_l_FTMUSDT 

	if data['stream'] == streamftmbtc :
		data = json.loads(message) 

		symbol_b_l_FTMBTC = data['data']['s'] 
		price_bids_b_l_FTMBTC = data['data']['b'] 
		qty_bids_b_l_FTMBTC = data['data']['B']
		price_asks_b_l_FTMBTC = data['data']['a'] 
		qty_asks_b_l_FTMBTC = data['data']['A'] 

		global symbol_b_g_FTMBTC 
		global price_bids_b_g_FTMBTC 
		global qty_bids_b_g_FTMBTC 
		global price_asks_b_g_FTMBTC 
		global qty_asks_b_g_FTMBTC 

		symbol_b_g_FTMBTC = symbol_b_l_FTMBTC 
		price_bids_b_g_FTMBTC = price_bids_b_l_FTMBTC 
		qty_bids_b_g_FTMBTC = qty_bids_b_l_FTMBTC 
		price_asks_b_g_FTMBTC = price_asks_b_l_FTMBTC 
		qty_asks_b_g_FTMBTC = qty_asks_b_l_FTMBTC 


def loop_FTMUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamftmusdt}/{streamftmbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FTMUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FTMUSDT).start()

def loop_FTMUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FTMUSDT != 0.0 and qty_bids_a_g_FTMUSDT != 0.0 and price_asks_a_g_FTMUSDT != 0.0 and qty_asks_a_g_FTMUSDT != 0.0 and price_bids_b_g_FTMBTC != 0.0 and qty_bids_b_g_FTMBTC != 0.0 and price_asks_b_g_FTMBTC != 0.0 and qty_asks_b_g_FTMBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FTMBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FTMBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FTMUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FTMUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FTMBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FTMBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FTMUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FTMUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FTMBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FTMBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FTMUSDT_Trade).start() 

streamalgousdt = 'algousdt@bookTicker'
streamalgobtc  = 'algobtc@bookTicker'

symbol_a_g_ALGOUSDT = 'ALGOUSDT' 
price_bids_a_g_ALGOUSDT = float(0.0) 
qty_bids_a_g_ALGOUSDT = float(0.0) 
price_asks_a_g_ALGOUSDT = float(0.0) 
qty_asks_a_g_ALGOUSDT = float(0.0) 

stepSize_ALGOUSDT = 1.00000000 

symbol_b_g_ALGOBTC = 'ALGOBTC' 
price_bids_b_g_ALGOBTC = float(0.0) 
qty_bids_b_g_ALGOBTC = float(0.0) 
price_asks_b_g_ALGOBTC = float(0.0) 
qty_asks_b_g_ALGOBTC = float(0.0) 

stepSize_ALGOBTC = 1.00000000 

def on_message_ALGOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamalgousdt :
		symbol_a_l_ALGOUSDT = data['data']['s'] 
		price_bids_a_l_ALGOUSDT = data['data']['b'] 
		qty_bids_a_l_ALGOUSDT = data['data']['B'] 
		price_asks_a_l_ALGOUSDT = data['data']['a'] 
		qty_asks_a_l_ALGOUSDT = data['data']['A'] 

		global symbol_a_g_ALGOUSDT 
		global price_bids_a_g_ALGOUSDT 
		global qty_bids_a_g_ALGOUSDT 
		global price_asks_a_g_ALGOUSDT 
		global qty_asks_a_g_ALGOUSDT 

		symbol_a_g_ALGOUSDT = symbol_a_l_ALGOUSDT 
		price_bids_a_g_ALGOUSDT = price_bids_a_l_ALGOUSDT 
		qty_bids_a_g_ALGOUSDT = qty_bids_a_l_ALGOUSDT 
		price_asks_a_g_ALGOUSDT = price_asks_a_l_ALGOUSDT 
		qty_asks_a_g_ALGOUSDT = qty_asks_a_l_ALGOUSDT 

	if data['stream'] == streamalgobtc :
		data = json.loads(message) 

		symbol_b_l_ALGOBTC = data['data']['s'] 
		price_bids_b_l_ALGOBTC = data['data']['b'] 
		qty_bids_b_l_ALGOBTC = data['data']['B']
		price_asks_b_l_ALGOBTC = data['data']['a'] 
		qty_asks_b_l_ALGOBTC = data['data']['A'] 

		global symbol_b_g_ALGOBTC 
		global price_bids_b_g_ALGOBTC 
		global qty_bids_b_g_ALGOBTC 
		global price_asks_b_g_ALGOBTC 
		global qty_asks_b_g_ALGOBTC 

		symbol_b_g_ALGOBTC = symbol_b_l_ALGOBTC 
		price_bids_b_g_ALGOBTC = price_bids_b_l_ALGOBTC 
		qty_bids_b_g_ALGOBTC = qty_bids_b_l_ALGOBTC 
		price_asks_b_g_ALGOBTC = price_asks_b_l_ALGOBTC 
		qty_asks_b_g_ALGOBTC = qty_asks_b_l_ALGOBTC 


def loop_ALGOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamalgousdt}/{streamalgobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ALGOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ALGOUSDT).start()

def loop_ALGOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ALGOUSDT != 0.0 and qty_bids_a_g_ALGOUSDT != 0.0 and price_asks_a_g_ALGOUSDT != 0.0 and qty_asks_a_g_ALGOUSDT != 0.0 and price_bids_b_g_ALGOBTC != 0.0 and qty_bids_b_g_ALGOBTC != 0.0 and price_asks_b_g_ALGOBTC != 0.0 and qty_asks_b_g_ALGOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ALGOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ALGOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ALGOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ALGOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ALGOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ALGOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ALGOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ALGOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ALGOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ALGOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ALGOUSDT_Trade).start() 

streamdogeusdt = 'dogeusdt@bookTicker'
streamdogebtc  = 'dogebtc@bookTicker'

symbol_a_g_DOGEUSDT = 'DOGEUSDT' 
price_bids_a_g_DOGEUSDT = float(0.0) 
qty_bids_a_g_DOGEUSDT = float(0.0) 
price_asks_a_g_DOGEUSDT = float(0.0) 
qty_asks_a_g_DOGEUSDT = float(0.0) 

stepSize_DOGEUSDT = 1.00000000 

symbol_b_g_DOGEBTC = 'DOGEBTC' 
price_bids_b_g_DOGEBTC = float(0.0) 
qty_bids_b_g_DOGEBTC = float(0.0) 
price_asks_b_g_DOGEBTC = float(0.0) 
qty_asks_b_g_DOGEBTC = float(0.0) 

stepSize_DOGEBTC = 1.00000000 

def on_message_DOGEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamdogeusdt :
		symbol_a_l_DOGEUSDT = data['data']['s'] 
		price_bids_a_l_DOGEUSDT = data['data']['b'] 
		qty_bids_a_l_DOGEUSDT = data['data']['B'] 
		price_asks_a_l_DOGEUSDT = data['data']['a'] 
		qty_asks_a_l_DOGEUSDT = data['data']['A'] 

		global symbol_a_g_DOGEUSDT 
		global price_bids_a_g_DOGEUSDT 
		global qty_bids_a_g_DOGEUSDT 
		global price_asks_a_g_DOGEUSDT 
		global qty_asks_a_g_DOGEUSDT 

		symbol_a_g_DOGEUSDT = symbol_a_l_DOGEUSDT 
		price_bids_a_g_DOGEUSDT = price_bids_a_l_DOGEUSDT 
		qty_bids_a_g_DOGEUSDT = qty_bids_a_l_DOGEUSDT 
		price_asks_a_g_DOGEUSDT = price_asks_a_l_DOGEUSDT 
		qty_asks_a_g_DOGEUSDT = qty_asks_a_l_DOGEUSDT 

	if data['stream'] == streamdogebtc :
		data = json.loads(message) 

		symbol_b_l_DOGEBTC = data['data']['s'] 
		price_bids_b_l_DOGEBTC = data['data']['b'] 
		qty_bids_b_l_DOGEBTC = data['data']['B']
		price_asks_b_l_DOGEBTC = data['data']['a'] 
		qty_asks_b_l_DOGEBTC = data['data']['A'] 

		global symbol_b_g_DOGEBTC 
		global price_bids_b_g_DOGEBTC 
		global qty_bids_b_g_DOGEBTC 
		global price_asks_b_g_DOGEBTC 
		global qty_asks_b_g_DOGEBTC 

		symbol_b_g_DOGEBTC = symbol_b_l_DOGEBTC 
		price_bids_b_g_DOGEBTC = price_bids_b_l_DOGEBTC 
		qty_bids_b_g_DOGEBTC = qty_bids_b_l_DOGEBTC 
		price_asks_b_g_DOGEBTC = price_asks_b_l_DOGEBTC 
		qty_asks_b_g_DOGEBTC = qty_asks_b_l_DOGEBTC 


def loop_DOGEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamdogeusdt}/{streamdogebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DOGEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DOGEUSDT).start()

def loop_DOGEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DOGEUSDT != 0.0 and qty_bids_a_g_DOGEUSDT != 0.0 and price_asks_a_g_DOGEUSDT != 0.0 and qty_asks_a_g_DOGEUSDT != 0.0 and price_bids_b_g_DOGEBTC != 0.0 and qty_bids_b_g_DOGEBTC != 0.0 and price_asks_b_g_DOGEBTC != 0.0 and qty_asks_b_g_DOGEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DOGEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DOGEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DOGEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DOGEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DOGEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DOGEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DOGEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DOGEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DOGEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DOGEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DOGEUSDT_Trade).start() 

streamduskusdt = 'duskusdt@bookTicker'
streamduskbtc  = 'duskbtc@bookTicker'

symbol_a_g_DUSKUSDT = 'DUSKUSDT' 
price_bids_a_g_DUSKUSDT = float(0.0) 
qty_bids_a_g_DUSKUSDT = float(0.0) 
price_asks_a_g_DUSKUSDT = float(0.0) 
qty_asks_a_g_DUSKUSDT = float(0.0) 

stepSize_DUSKUSDT = 1.00000000 

symbol_b_g_DUSKBTC = 'DUSKBTC' 
price_bids_b_g_DUSKBTC = float(0.0) 
qty_bids_b_g_DUSKBTC = float(0.0) 
price_asks_b_g_DUSKBTC = float(0.0) 
qty_asks_b_g_DUSKBTC = float(0.0) 

stepSize_DUSKBTC = 1.00000000 

def on_message_DUSKUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamduskusdt :
		symbol_a_l_DUSKUSDT = data['data']['s'] 
		price_bids_a_l_DUSKUSDT = data['data']['b'] 
		qty_bids_a_l_DUSKUSDT = data['data']['B'] 
		price_asks_a_l_DUSKUSDT = data['data']['a'] 
		qty_asks_a_l_DUSKUSDT = data['data']['A'] 

		global symbol_a_g_DUSKUSDT 
		global price_bids_a_g_DUSKUSDT 
		global qty_bids_a_g_DUSKUSDT 
		global price_asks_a_g_DUSKUSDT 
		global qty_asks_a_g_DUSKUSDT 

		symbol_a_g_DUSKUSDT = symbol_a_l_DUSKUSDT 
		price_bids_a_g_DUSKUSDT = price_bids_a_l_DUSKUSDT 
		qty_bids_a_g_DUSKUSDT = qty_bids_a_l_DUSKUSDT 
		price_asks_a_g_DUSKUSDT = price_asks_a_l_DUSKUSDT 
		qty_asks_a_g_DUSKUSDT = qty_asks_a_l_DUSKUSDT 

	if data['stream'] == streamduskbtc :
		data = json.loads(message) 

		symbol_b_l_DUSKBTC = data['data']['s'] 
		price_bids_b_l_DUSKBTC = data['data']['b'] 
		qty_bids_b_l_DUSKBTC = data['data']['B']
		price_asks_b_l_DUSKBTC = data['data']['a'] 
		qty_asks_b_l_DUSKBTC = data['data']['A'] 

		global symbol_b_g_DUSKBTC 
		global price_bids_b_g_DUSKBTC 
		global qty_bids_b_g_DUSKBTC 
		global price_asks_b_g_DUSKBTC 
		global qty_asks_b_g_DUSKBTC 

		symbol_b_g_DUSKBTC = symbol_b_l_DUSKBTC 
		price_bids_b_g_DUSKBTC = price_bids_b_l_DUSKBTC 
		qty_bids_b_g_DUSKBTC = qty_bids_b_l_DUSKBTC 
		price_asks_b_g_DUSKBTC = price_asks_b_l_DUSKBTC 
		qty_asks_b_g_DUSKBTC = qty_asks_b_l_DUSKBTC 


def loop_DUSKUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamduskusdt}/{streamduskbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DUSKUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DUSKUSDT).start()

def loop_DUSKUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DUSKUSDT != 0.0 and qty_bids_a_g_DUSKUSDT != 0.0 and price_asks_a_g_DUSKUSDT != 0.0 and qty_asks_a_g_DUSKUSDT != 0.0 and price_bids_b_g_DUSKBTC != 0.0 and qty_bids_b_g_DUSKBTC != 0.0 and price_asks_b_g_DUSKBTC != 0.0 and qty_asks_b_g_DUSKBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DUSKBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DUSKBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DUSKUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DUSKUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DUSKBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DUSKBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DUSKUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DUSKUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DUSKBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DUSKBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DUSKUSDT_Trade).start() 

streamankrusdt = 'ankrusdt@bookTicker'
streamankrbtc  = 'ankrbtc@bookTicker'

symbol_a_g_ANKRUSDT = 'ANKRUSDT' 
price_bids_a_g_ANKRUSDT = float(0.0) 
qty_bids_a_g_ANKRUSDT = float(0.0) 
price_asks_a_g_ANKRUSDT = float(0.0) 
qty_asks_a_g_ANKRUSDT = float(0.0) 

stepSize_ANKRUSDT = 0.10000000 

symbol_b_g_ANKRBTC = 'ANKRBTC' 
price_bids_b_g_ANKRBTC = float(0.0) 
qty_bids_b_g_ANKRBTC = float(0.0) 
price_asks_b_g_ANKRBTC = float(0.0) 
qty_asks_b_g_ANKRBTC = float(0.0) 

stepSize_ANKRBTC = 1.00000000 

def on_message_ANKRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamankrusdt :
		symbol_a_l_ANKRUSDT = data['data']['s'] 
		price_bids_a_l_ANKRUSDT = data['data']['b'] 
		qty_bids_a_l_ANKRUSDT = data['data']['B'] 
		price_asks_a_l_ANKRUSDT = data['data']['a'] 
		qty_asks_a_l_ANKRUSDT = data['data']['A'] 

		global symbol_a_g_ANKRUSDT 
		global price_bids_a_g_ANKRUSDT 
		global qty_bids_a_g_ANKRUSDT 
		global price_asks_a_g_ANKRUSDT 
		global qty_asks_a_g_ANKRUSDT 

		symbol_a_g_ANKRUSDT = symbol_a_l_ANKRUSDT 
		price_bids_a_g_ANKRUSDT = price_bids_a_l_ANKRUSDT 
		qty_bids_a_g_ANKRUSDT = qty_bids_a_l_ANKRUSDT 
		price_asks_a_g_ANKRUSDT = price_asks_a_l_ANKRUSDT 
		qty_asks_a_g_ANKRUSDT = qty_asks_a_l_ANKRUSDT 

	if data['stream'] == streamankrbtc :
		data = json.loads(message) 

		symbol_b_l_ANKRBTC = data['data']['s'] 
		price_bids_b_l_ANKRBTC = data['data']['b'] 
		qty_bids_b_l_ANKRBTC = data['data']['B']
		price_asks_b_l_ANKRBTC = data['data']['a'] 
		qty_asks_b_l_ANKRBTC = data['data']['A'] 

		global symbol_b_g_ANKRBTC 
		global price_bids_b_g_ANKRBTC 
		global qty_bids_b_g_ANKRBTC 
		global price_asks_b_g_ANKRBTC 
		global qty_asks_b_g_ANKRBTC 

		symbol_b_g_ANKRBTC = symbol_b_l_ANKRBTC 
		price_bids_b_g_ANKRBTC = price_bids_b_l_ANKRBTC 
		qty_bids_b_g_ANKRBTC = qty_bids_b_l_ANKRBTC 
		price_asks_b_g_ANKRBTC = price_asks_b_l_ANKRBTC 
		qty_asks_b_g_ANKRBTC = qty_asks_b_l_ANKRBTC 


def loop_ANKRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamankrusdt}/{streamankrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ANKRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ANKRUSDT).start()

def loop_ANKRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ANKRUSDT != 0.0 and qty_bids_a_g_ANKRUSDT != 0.0 and price_asks_a_g_ANKRUSDT != 0.0 and qty_asks_a_g_ANKRUSDT != 0.0 and price_bids_b_g_ANKRBTC != 0.0 and qty_bids_b_g_ANKRBTC != 0.0 and price_asks_b_g_ANKRBTC != 0.0 and qty_asks_b_g_ANKRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ANKRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ANKRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ANKRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ANKRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ANKRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ANKRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ANKRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ANKRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ANKRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ANKRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ANKRUSDT_Trade).start() 

streamcosusdt = 'cosusdt@bookTicker'
streamcosbtc  = 'cosbtc@bookTicker'

symbol_a_g_COSUSDT = 'COSUSDT' 
price_bids_a_g_COSUSDT = float(0.0) 
qty_bids_a_g_COSUSDT = float(0.0) 
price_asks_a_g_COSUSDT = float(0.0) 
qty_asks_a_g_COSUSDT = float(0.0) 

stepSize_COSUSDT = 0.10000000 

symbol_b_g_COSBTC = 'COSBTC' 
price_bids_b_g_COSBTC = float(0.0) 
qty_bids_b_g_COSBTC = float(0.0) 
price_asks_b_g_COSBTC = float(0.0) 
qty_asks_b_g_COSBTC = float(0.0) 

stepSize_COSBTC = 1.00000000 

def on_message_COSUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamcosusdt :
		symbol_a_l_COSUSDT = data['data']['s'] 
		price_bids_a_l_COSUSDT = data['data']['b'] 
		qty_bids_a_l_COSUSDT = data['data']['B'] 
		price_asks_a_l_COSUSDT = data['data']['a'] 
		qty_asks_a_l_COSUSDT = data['data']['A'] 

		global symbol_a_g_COSUSDT 
		global price_bids_a_g_COSUSDT 
		global qty_bids_a_g_COSUSDT 
		global price_asks_a_g_COSUSDT 
		global qty_asks_a_g_COSUSDT 

		symbol_a_g_COSUSDT = symbol_a_l_COSUSDT 
		price_bids_a_g_COSUSDT = price_bids_a_l_COSUSDT 
		qty_bids_a_g_COSUSDT = qty_bids_a_l_COSUSDT 
		price_asks_a_g_COSUSDT = price_asks_a_l_COSUSDT 
		qty_asks_a_g_COSUSDT = qty_asks_a_l_COSUSDT 

	if data['stream'] == streamcosbtc :
		data = json.loads(message) 

		symbol_b_l_COSBTC = data['data']['s'] 
		price_bids_b_l_COSBTC = data['data']['b'] 
		qty_bids_b_l_COSBTC = data['data']['B']
		price_asks_b_l_COSBTC = data['data']['a'] 
		qty_asks_b_l_COSBTC = data['data']['A'] 

		global symbol_b_g_COSBTC 
		global price_bids_b_g_COSBTC 
		global qty_bids_b_g_COSBTC 
		global price_asks_b_g_COSBTC 
		global qty_asks_b_g_COSBTC 

		symbol_b_g_COSBTC = symbol_b_l_COSBTC 
		price_bids_b_g_COSBTC = price_bids_b_l_COSBTC 
		qty_bids_b_g_COSBTC = qty_bids_b_l_COSBTC 
		price_asks_b_g_COSBTC = price_asks_b_l_COSBTC 
		qty_asks_b_g_COSBTC = qty_asks_b_l_COSBTC 


def loop_COSUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamcosusdt}/{streamcosbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_COSUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_COSUSDT).start()

def loop_COSUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_COSUSDT != 0.0 and qty_bids_a_g_COSUSDT != 0.0 and price_asks_a_g_COSUSDT != 0.0 and qty_asks_a_g_COSUSDT != 0.0 and price_bids_b_g_COSBTC != 0.0 and qty_bids_b_g_COSBTC != 0.0 and price_asks_b_g_COSBTC != 0.0 and qty_asks_b_g_COSBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_COSBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_COSBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_COSUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_COSUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_COSBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_COSBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_COSUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_COSUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_COSBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_COSBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_COSUSDT_Trade).start() 

streamtomousdt = 'tomousdt@bookTicker'
streamtomobtc  = 'tomobtc@bookTicker'

symbol_a_g_TOMOUSDT = 'TOMOUSDT' 
price_bids_a_g_TOMOUSDT = float(0.0) 
qty_bids_a_g_TOMOUSDT = float(0.0) 
price_asks_a_g_TOMOUSDT = float(0.0) 
qty_asks_a_g_TOMOUSDT = float(0.0) 

stepSize_TOMOUSDT = 0.10000000 

symbol_b_g_TOMOBTC = 'TOMOBTC' 
price_bids_b_g_TOMOBTC = float(0.0) 
qty_bids_b_g_TOMOBTC = float(0.0) 
price_asks_b_g_TOMOBTC = float(0.0) 
qty_asks_b_g_TOMOBTC = float(0.0) 

stepSize_TOMOBTC = 0.10000000 

def on_message_TOMOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamtomousdt :
		symbol_a_l_TOMOUSDT = data['data']['s'] 
		price_bids_a_l_TOMOUSDT = data['data']['b'] 
		qty_bids_a_l_TOMOUSDT = data['data']['B'] 
		price_asks_a_l_TOMOUSDT = data['data']['a'] 
		qty_asks_a_l_TOMOUSDT = data['data']['A'] 

		global symbol_a_g_TOMOUSDT 
		global price_bids_a_g_TOMOUSDT 
		global qty_bids_a_g_TOMOUSDT 
		global price_asks_a_g_TOMOUSDT 
		global qty_asks_a_g_TOMOUSDT 

		symbol_a_g_TOMOUSDT = symbol_a_l_TOMOUSDT 
		price_bids_a_g_TOMOUSDT = price_bids_a_l_TOMOUSDT 
		qty_bids_a_g_TOMOUSDT = qty_bids_a_l_TOMOUSDT 
		price_asks_a_g_TOMOUSDT = price_asks_a_l_TOMOUSDT 
		qty_asks_a_g_TOMOUSDT = qty_asks_a_l_TOMOUSDT 

	if data['stream'] == streamtomobtc :
		data = json.loads(message) 

		symbol_b_l_TOMOBTC = data['data']['s'] 
		price_bids_b_l_TOMOBTC = data['data']['b'] 
		qty_bids_b_l_TOMOBTC = data['data']['B']
		price_asks_b_l_TOMOBTC = data['data']['a'] 
		qty_asks_b_l_TOMOBTC = data['data']['A'] 

		global symbol_b_g_TOMOBTC 
		global price_bids_b_g_TOMOBTC 
		global qty_bids_b_g_TOMOBTC 
		global price_asks_b_g_TOMOBTC 
		global qty_asks_b_g_TOMOBTC 

		symbol_b_g_TOMOBTC = symbol_b_l_TOMOBTC 
		price_bids_b_g_TOMOBTC = price_bids_b_l_TOMOBTC 
		qty_bids_b_g_TOMOBTC = qty_bids_b_l_TOMOBTC 
		price_asks_b_g_TOMOBTC = price_asks_b_l_TOMOBTC 
		qty_asks_b_g_TOMOBTC = qty_asks_b_l_TOMOBTC 


def loop_TOMOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamtomousdt}/{streamtomobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_TOMOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_TOMOUSDT).start()

def loop_TOMOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_TOMOUSDT != 0.0 and qty_bids_a_g_TOMOUSDT != 0.0 and price_asks_a_g_TOMOUSDT != 0.0 and qty_asks_a_g_TOMOUSDT != 0.0 and price_bids_b_g_TOMOBTC != 0.0 and qty_bids_b_g_TOMOBTC != 0.0 and price_asks_b_g_TOMOBTC != 0.0 and qty_asks_b_g_TOMOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_TOMOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_TOMOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_TOMOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_TOMOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_TOMOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_TOMOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_TOMOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_TOMOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_TOMOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_TOMOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_TOMOUSDT_Trade).start() 

streamdockusdt = 'dockusdt@bookTicker'
streamdockbtc  = 'dockbtc@bookTicker'

symbol_a_g_DOCKUSDT = 'DOCKUSDT' 
price_bids_a_g_DOCKUSDT = float(0.0) 
qty_bids_a_g_DOCKUSDT = float(0.0) 
price_asks_a_g_DOCKUSDT = float(0.0) 
qty_asks_a_g_DOCKUSDT = float(0.0) 

stepSize_DOCKUSDT = 1.00000000 

symbol_b_g_DOCKBTC = 'DOCKBTC' 
price_bids_b_g_DOCKBTC = float(0.0) 
qty_bids_b_g_DOCKBTC = float(0.0) 
price_asks_b_g_DOCKBTC = float(0.0) 
qty_asks_b_g_DOCKBTC = float(0.0) 

stepSize_DOCKBTC = 1.00000000 

def on_message_DOCKUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamdockusdt :
		symbol_a_l_DOCKUSDT = data['data']['s'] 
		price_bids_a_l_DOCKUSDT = data['data']['b'] 
		qty_bids_a_l_DOCKUSDT = data['data']['B'] 
		price_asks_a_l_DOCKUSDT = data['data']['a'] 
		qty_asks_a_l_DOCKUSDT = data['data']['A'] 

		global symbol_a_g_DOCKUSDT 
		global price_bids_a_g_DOCKUSDT 
		global qty_bids_a_g_DOCKUSDT 
		global price_asks_a_g_DOCKUSDT 
		global qty_asks_a_g_DOCKUSDT 

		symbol_a_g_DOCKUSDT = symbol_a_l_DOCKUSDT 
		price_bids_a_g_DOCKUSDT = price_bids_a_l_DOCKUSDT 
		qty_bids_a_g_DOCKUSDT = qty_bids_a_l_DOCKUSDT 
		price_asks_a_g_DOCKUSDT = price_asks_a_l_DOCKUSDT 
		qty_asks_a_g_DOCKUSDT = qty_asks_a_l_DOCKUSDT 

	if data['stream'] == streamdockbtc :
		data = json.loads(message) 

		symbol_b_l_DOCKBTC = data['data']['s'] 
		price_bids_b_l_DOCKBTC = data['data']['b'] 
		qty_bids_b_l_DOCKBTC = data['data']['B']
		price_asks_b_l_DOCKBTC = data['data']['a'] 
		qty_asks_b_l_DOCKBTC = data['data']['A'] 

		global symbol_b_g_DOCKBTC 
		global price_bids_b_g_DOCKBTC 
		global qty_bids_b_g_DOCKBTC 
		global price_asks_b_g_DOCKBTC 
		global qty_asks_b_g_DOCKBTC 

		symbol_b_g_DOCKBTC = symbol_b_l_DOCKBTC 
		price_bids_b_g_DOCKBTC = price_bids_b_l_DOCKBTC 
		qty_bids_b_g_DOCKBTC = qty_bids_b_l_DOCKBTC 
		price_asks_b_g_DOCKBTC = price_asks_b_l_DOCKBTC 
		qty_asks_b_g_DOCKBTC = qty_asks_b_l_DOCKBTC 


def loop_DOCKUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamdockusdt}/{streamdockbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DOCKUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DOCKUSDT).start()

def loop_DOCKUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DOCKUSDT != 0.0 and qty_bids_a_g_DOCKUSDT != 0.0 and price_asks_a_g_DOCKUSDT != 0.0 and qty_asks_a_g_DOCKUSDT != 0.0 and price_bids_b_g_DOCKBTC != 0.0 and qty_bids_b_g_DOCKBTC != 0.0 and price_asks_b_g_DOCKBTC != 0.0 and qty_asks_b_g_DOCKBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DOCKBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DOCKBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DOCKUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DOCKUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DOCKBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DOCKBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DOCKUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DOCKUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DOCKBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DOCKBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DOCKUSDT_Trade).start() 

streamwanusdt = 'wanusdt@bookTicker'
streamwanbtc  = 'wanbtc@bookTicker'

symbol_a_g_WANUSDT = 'WANUSDT' 
price_bids_a_g_WANUSDT = float(0.0) 
qty_bids_a_g_WANUSDT = float(0.0) 
price_asks_a_g_WANUSDT = float(0.0) 
qty_asks_a_g_WANUSDT = float(0.0) 

stepSize_WANUSDT = 1.00000000 

symbol_b_g_WANBTC = 'WANBTC' 
price_bids_b_g_WANBTC = float(0.0) 
qty_bids_b_g_WANBTC = float(0.0) 
price_asks_b_g_WANBTC = float(0.0) 
qty_asks_b_g_WANBTC = float(0.0) 

stepSize_WANBTC = 1.00000000 

def on_message_WANUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamwanusdt :
		symbol_a_l_WANUSDT = data['data']['s'] 
		price_bids_a_l_WANUSDT = data['data']['b'] 
		qty_bids_a_l_WANUSDT = data['data']['B'] 
		price_asks_a_l_WANUSDT = data['data']['a'] 
		qty_asks_a_l_WANUSDT = data['data']['A'] 

		global symbol_a_g_WANUSDT 
		global price_bids_a_g_WANUSDT 
		global qty_bids_a_g_WANUSDT 
		global price_asks_a_g_WANUSDT 
		global qty_asks_a_g_WANUSDT 

		symbol_a_g_WANUSDT = symbol_a_l_WANUSDT 
		price_bids_a_g_WANUSDT = price_bids_a_l_WANUSDT 
		qty_bids_a_g_WANUSDT = qty_bids_a_l_WANUSDT 
		price_asks_a_g_WANUSDT = price_asks_a_l_WANUSDT 
		qty_asks_a_g_WANUSDT = qty_asks_a_l_WANUSDT 

	if data['stream'] == streamwanbtc :
		data = json.loads(message) 

		symbol_b_l_WANBTC = data['data']['s'] 
		price_bids_b_l_WANBTC = data['data']['b'] 
		qty_bids_b_l_WANBTC = data['data']['B']
		price_asks_b_l_WANBTC = data['data']['a'] 
		qty_asks_b_l_WANBTC = data['data']['A'] 

		global symbol_b_g_WANBTC 
		global price_bids_b_g_WANBTC 
		global qty_bids_b_g_WANBTC 
		global price_asks_b_g_WANBTC 
		global qty_asks_b_g_WANBTC 

		symbol_b_g_WANBTC = symbol_b_l_WANBTC 
		price_bids_b_g_WANBTC = price_bids_b_l_WANBTC 
		qty_bids_b_g_WANBTC = qty_bids_b_l_WANBTC 
		price_asks_b_g_WANBTC = price_asks_b_l_WANBTC 
		qty_asks_b_g_WANBTC = qty_asks_b_l_WANBTC 


def loop_WANUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamwanusdt}/{streamwanbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_WANUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_WANUSDT).start()

def loop_WANUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_WANUSDT != 0.0 and qty_bids_a_g_WANUSDT != 0.0 and price_asks_a_g_WANUSDT != 0.0 and qty_asks_a_g_WANUSDT != 0.0 and price_bids_b_g_WANBTC != 0.0 and qty_bids_b_g_WANBTC != 0.0 and price_asks_b_g_WANBTC != 0.0 and qty_asks_b_g_WANBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_WANBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_WANBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_WANUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_WANUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_WANBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_WANBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_WANUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_WANUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_WANBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_WANBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_WANUSDT_Trade).start() 

streamcvcusdt = 'cvcusdt@bookTicker'
streamcvcbtc  = 'cvcbtc@bookTicker'

symbol_a_g_CVCUSDT = 'CVCUSDT' 
price_bids_a_g_CVCUSDT = float(0.0) 
qty_bids_a_g_CVCUSDT = float(0.0) 
price_asks_a_g_CVCUSDT = float(0.0) 
qty_asks_a_g_CVCUSDT = float(0.0) 

stepSize_CVCUSDT = 1.00000000 

symbol_b_g_CVCBTC = 'CVCBTC' 
price_bids_b_g_CVCBTC = float(0.0) 
qty_bids_b_g_CVCBTC = float(0.0) 
price_asks_b_g_CVCBTC = float(0.0) 
qty_asks_b_g_CVCBTC = float(0.0) 

stepSize_CVCBTC = 1.00000000 

def on_message_CVCUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamcvcusdt :
		symbol_a_l_CVCUSDT = data['data']['s'] 
		price_bids_a_l_CVCUSDT = data['data']['b'] 
		qty_bids_a_l_CVCUSDT = data['data']['B'] 
		price_asks_a_l_CVCUSDT = data['data']['a'] 
		qty_asks_a_l_CVCUSDT = data['data']['A'] 

		global symbol_a_g_CVCUSDT 
		global price_bids_a_g_CVCUSDT 
		global qty_bids_a_g_CVCUSDT 
		global price_asks_a_g_CVCUSDT 
		global qty_asks_a_g_CVCUSDT 

		symbol_a_g_CVCUSDT = symbol_a_l_CVCUSDT 
		price_bids_a_g_CVCUSDT = price_bids_a_l_CVCUSDT 
		qty_bids_a_g_CVCUSDT = qty_bids_a_l_CVCUSDT 
		price_asks_a_g_CVCUSDT = price_asks_a_l_CVCUSDT 
		qty_asks_a_g_CVCUSDT = qty_asks_a_l_CVCUSDT 

	if data['stream'] == streamcvcbtc :
		data = json.loads(message) 

		symbol_b_l_CVCBTC = data['data']['s'] 
		price_bids_b_l_CVCBTC = data['data']['b'] 
		qty_bids_b_l_CVCBTC = data['data']['B']
		price_asks_b_l_CVCBTC = data['data']['a'] 
		qty_asks_b_l_CVCBTC = data['data']['A'] 

		global symbol_b_g_CVCBTC 
		global price_bids_b_g_CVCBTC 
		global qty_bids_b_g_CVCBTC 
		global price_asks_b_g_CVCBTC 
		global qty_asks_b_g_CVCBTC 

		symbol_b_g_CVCBTC = symbol_b_l_CVCBTC 
		price_bids_b_g_CVCBTC = price_bids_b_l_CVCBTC 
		qty_bids_b_g_CVCBTC = qty_bids_b_l_CVCBTC 
		price_asks_b_g_CVCBTC = price_asks_b_l_CVCBTC 
		qty_asks_b_g_CVCBTC = qty_asks_b_l_CVCBTC 


def loop_CVCUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamcvcusdt}/{streamcvcbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CVCUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CVCUSDT).start()

def loop_CVCUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CVCUSDT != 0.0 and qty_bids_a_g_CVCUSDT != 0.0 and price_asks_a_g_CVCUSDT != 0.0 and qty_asks_a_g_CVCUSDT != 0.0 and price_bids_b_g_CVCBTC != 0.0 and qty_bids_b_g_CVCBTC != 0.0 and price_asks_b_g_CVCBTC != 0.0 and qty_asks_b_g_CVCBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CVCBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CVCBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CVCUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CVCUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CVCBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CVCBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CVCUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CVCUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CVCBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CVCBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CVCUSDT_Trade).start() 

streamchzusdt = 'chzusdt@bookTicker'
streamchzbtc  = 'chzbtc@bookTicker'

symbol_a_g_CHZUSDT = 'CHZUSDT' 
price_bids_a_g_CHZUSDT = float(0.0) 
qty_bids_a_g_CHZUSDT = float(0.0) 
price_asks_a_g_CHZUSDT = float(0.0) 
qty_asks_a_g_CHZUSDT = float(0.0) 

stepSize_CHZUSDT = 1.00000000 

symbol_b_g_CHZBTC = 'CHZBTC' 
price_bids_b_g_CHZBTC = float(0.0) 
qty_bids_b_g_CHZBTC = float(0.0) 
price_asks_b_g_CHZBTC = float(0.0) 
qty_asks_b_g_CHZBTC = float(0.0) 

stepSize_CHZBTC = 1.00000000 

def on_message_CHZUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamchzusdt :
		symbol_a_l_CHZUSDT = data['data']['s'] 
		price_bids_a_l_CHZUSDT = data['data']['b'] 
		qty_bids_a_l_CHZUSDT = data['data']['B'] 
		price_asks_a_l_CHZUSDT = data['data']['a'] 
		qty_asks_a_l_CHZUSDT = data['data']['A'] 

		global symbol_a_g_CHZUSDT 
		global price_bids_a_g_CHZUSDT 
		global qty_bids_a_g_CHZUSDT 
		global price_asks_a_g_CHZUSDT 
		global qty_asks_a_g_CHZUSDT 

		symbol_a_g_CHZUSDT = symbol_a_l_CHZUSDT 
		price_bids_a_g_CHZUSDT = price_bids_a_l_CHZUSDT 
		qty_bids_a_g_CHZUSDT = qty_bids_a_l_CHZUSDT 
		price_asks_a_g_CHZUSDT = price_asks_a_l_CHZUSDT 
		qty_asks_a_g_CHZUSDT = qty_asks_a_l_CHZUSDT 

	if data['stream'] == streamchzbtc :
		data = json.loads(message) 

		symbol_b_l_CHZBTC = data['data']['s'] 
		price_bids_b_l_CHZBTC = data['data']['b'] 
		qty_bids_b_l_CHZBTC = data['data']['B']
		price_asks_b_l_CHZBTC = data['data']['a'] 
		qty_asks_b_l_CHZBTC = data['data']['A'] 

		global symbol_b_g_CHZBTC 
		global price_bids_b_g_CHZBTC 
		global qty_bids_b_g_CHZBTC 
		global price_asks_b_g_CHZBTC 
		global qty_asks_b_g_CHZBTC 

		symbol_b_g_CHZBTC = symbol_b_l_CHZBTC 
		price_bids_b_g_CHZBTC = price_bids_b_l_CHZBTC 
		qty_bids_b_g_CHZBTC = qty_bids_b_l_CHZBTC 
		price_asks_b_g_CHZBTC = price_asks_b_l_CHZBTC 
		qty_asks_b_g_CHZBTC = qty_asks_b_l_CHZBTC 


def loop_CHZUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamchzusdt}/{streamchzbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CHZUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CHZUSDT).start()

def loop_CHZUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CHZUSDT != 0.0 and qty_bids_a_g_CHZUSDT != 0.0 and price_asks_a_g_CHZUSDT != 0.0 and qty_asks_a_g_CHZUSDT != 0.0 and price_bids_b_g_CHZBTC != 0.0 and qty_bids_b_g_CHZBTC != 0.0 and price_asks_b_g_CHZBTC != 0.0 and qty_asks_b_g_CHZBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CHZBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CHZBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CHZUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CHZUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CHZBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CHZBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CHZUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CHZUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CHZBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CHZBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CHZUSDT_Trade).start() 

streambandusdt = 'bandusdt@bookTicker'
streambandbtc  = 'bandbtc@bookTicker'

symbol_a_g_BANDUSDT = 'BANDUSDT' 
price_bids_a_g_BANDUSDT = float(0.0) 
qty_bids_a_g_BANDUSDT = float(0.0) 
price_asks_a_g_BANDUSDT = float(0.0) 
qty_asks_a_g_BANDUSDT = float(0.0) 

stepSize_BANDUSDT = 0.10000000 

symbol_b_g_BANDBTC = 'BANDBTC' 
price_bids_b_g_BANDBTC = float(0.0) 
qty_bids_b_g_BANDBTC = float(0.0) 
price_asks_b_g_BANDBTC = float(0.0) 
qty_asks_b_g_BANDBTC = float(0.0) 

stepSize_BANDBTC = 0.10000000 

def on_message_BANDUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambandusdt :
		symbol_a_l_BANDUSDT = data['data']['s'] 
		price_bids_a_l_BANDUSDT = data['data']['b'] 
		qty_bids_a_l_BANDUSDT = data['data']['B'] 
		price_asks_a_l_BANDUSDT = data['data']['a'] 
		qty_asks_a_l_BANDUSDT = data['data']['A'] 

		global symbol_a_g_BANDUSDT 
		global price_bids_a_g_BANDUSDT 
		global qty_bids_a_g_BANDUSDT 
		global price_asks_a_g_BANDUSDT 
		global qty_asks_a_g_BANDUSDT 

		symbol_a_g_BANDUSDT = symbol_a_l_BANDUSDT 
		price_bids_a_g_BANDUSDT = price_bids_a_l_BANDUSDT 
		qty_bids_a_g_BANDUSDT = qty_bids_a_l_BANDUSDT 
		price_asks_a_g_BANDUSDT = price_asks_a_l_BANDUSDT 
		qty_asks_a_g_BANDUSDT = qty_asks_a_l_BANDUSDT 

	if data['stream'] == streambandbtc :
		data = json.loads(message) 

		symbol_b_l_BANDBTC = data['data']['s'] 
		price_bids_b_l_BANDBTC = data['data']['b'] 
		qty_bids_b_l_BANDBTC = data['data']['B']
		price_asks_b_l_BANDBTC = data['data']['a'] 
		qty_asks_b_l_BANDBTC = data['data']['A'] 

		global symbol_b_g_BANDBTC 
		global price_bids_b_g_BANDBTC 
		global qty_bids_b_g_BANDBTC 
		global price_asks_b_g_BANDBTC 
		global qty_asks_b_g_BANDBTC 

		symbol_b_g_BANDBTC = symbol_b_l_BANDBTC 
		price_bids_b_g_BANDBTC = price_bids_b_l_BANDBTC 
		qty_bids_b_g_BANDBTC = qty_bids_b_l_BANDBTC 
		price_asks_b_g_BANDBTC = price_asks_b_l_BANDBTC 
		qty_asks_b_g_BANDBTC = qty_asks_b_l_BANDBTC 


def loop_BANDUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambandusdt}/{streambandbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BANDUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BANDUSDT).start()

def loop_BANDUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BANDUSDT != 0.0 and qty_bids_a_g_BANDUSDT != 0.0 and price_asks_a_g_BANDUSDT != 0.0 and qty_asks_a_g_BANDUSDT != 0.0 and price_bids_b_g_BANDBTC != 0.0 and qty_bids_b_g_BANDBTC != 0.0 and price_asks_b_g_BANDBTC != 0.0 and qty_asks_b_g_BANDBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BANDBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BANDBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BANDUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BANDUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BANDBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BANDBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BANDUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BANDUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BANDBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BANDBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BANDUSDT_Trade).start() 

streamxtzusdt = 'xtzusdt@bookTicker'
streamxtzbtc  = 'xtzbtc@bookTicker'

symbol_a_g_XTZUSDT = 'XTZUSDT' 
price_bids_a_g_XTZUSDT = float(0.0) 
qty_bids_a_g_XTZUSDT = float(0.0) 
price_asks_a_g_XTZUSDT = float(0.0) 
qty_asks_a_g_XTZUSDT = float(0.0) 

stepSize_XTZUSDT = 0.10000000 

symbol_b_g_XTZBTC = 'XTZBTC' 
price_bids_b_g_XTZBTC = float(0.0) 
qty_bids_b_g_XTZBTC = float(0.0) 
price_asks_b_g_XTZBTC = float(0.0) 
qty_asks_b_g_XTZBTC = float(0.0) 

stepSize_XTZBTC = 0.10000000 

def on_message_XTZUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamxtzusdt :
		symbol_a_l_XTZUSDT = data['data']['s'] 
		price_bids_a_l_XTZUSDT = data['data']['b'] 
		qty_bids_a_l_XTZUSDT = data['data']['B'] 
		price_asks_a_l_XTZUSDT = data['data']['a'] 
		qty_asks_a_l_XTZUSDT = data['data']['A'] 

		global symbol_a_g_XTZUSDT 
		global price_bids_a_g_XTZUSDT 
		global qty_bids_a_g_XTZUSDT 
		global price_asks_a_g_XTZUSDT 
		global qty_asks_a_g_XTZUSDT 

		symbol_a_g_XTZUSDT = symbol_a_l_XTZUSDT 
		price_bids_a_g_XTZUSDT = price_bids_a_l_XTZUSDT 
		qty_bids_a_g_XTZUSDT = qty_bids_a_l_XTZUSDT 
		price_asks_a_g_XTZUSDT = price_asks_a_l_XTZUSDT 
		qty_asks_a_g_XTZUSDT = qty_asks_a_l_XTZUSDT 

	if data['stream'] == streamxtzbtc :
		data = json.loads(message) 

		symbol_b_l_XTZBTC = data['data']['s'] 
		price_bids_b_l_XTZBTC = data['data']['b'] 
		qty_bids_b_l_XTZBTC = data['data']['B']
		price_asks_b_l_XTZBTC = data['data']['a'] 
		qty_asks_b_l_XTZBTC = data['data']['A'] 

		global symbol_b_g_XTZBTC 
		global price_bids_b_g_XTZBTC 
		global qty_bids_b_g_XTZBTC 
		global price_asks_b_g_XTZBTC 
		global qty_asks_b_g_XTZBTC 

		symbol_b_g_XTZBTC = symbol_b_l_XTZBTC 
		price_bids_b_g_XTZBTC = price_bids_b_l_XTZBTC 
		qty_bids_b_g_XTZBTC = qty_bids_b_l_XTZBTC 
		price_asks_b_g_XTZBTC = price_asks_b_l_XTZBTC 
		qty_asks_b_g_XTZBTC = qty_asks_b_l_XTZBTC 


def loop_XTZUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamxtzusdt}/{streamxtzbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_XTZUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_XTZUSDT).start()

def loop_XTZUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_XTZUSDT != 0.0 and qty_bids_a_g_XTZUSDT != 0.0 and price_asks_a_g_XTZUSDT != 0.0 and qty_asks_a_g_XTZUSDT != 0.0 and price_bids_b_g_XTZBTC != 0.0 and qty_bids_b_g_XTZBTC != 0.0 and price_asks_b_g_XTZBTC != 0.0 and qty_asks_b_g_XTZBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_XTZBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_XTZBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_XTZUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_XTZUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_XTZBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_XTZBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_XTZUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_XTZUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_XTZBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_XTZBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_XTZUSDT_Trade).start() 

streamrenusdt = 'renusdt@bookTicker'
streamrenbtc  = 'renbtc@bookTicker'

symbol_a_g_RENUSDT = 'RENUSDT' 
price_bids_a_g_RENUSDT = float(0.0) 
qty_bids_a_g_RENUSDT = float(0.0) 
price_asks_a_g_RENUSDT = float(0.0) 
qty_asks_a_g_RENUSDT = float(0.0) 

stepSize_RENUSDT = 1.00000000 

symbol_b_g_RENBTC = 'RENBTC' 
price_bids_b_g_RENBTC = float(0.0) 
qty_bids_b_g_RENBTC = float(0.0) 
price_asks_b_g_RENBTC = float(0.0) 
qty_asks_b_g_RENBTC = float(0.0) 

stepSize_RENBTC = 1.00000000 

def on_message_RENUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamrenusdt :
		symbol_a_l_RENUSDT = data['data']['s'] 
		price_bids_a_l_RENUSDT = data['data']['b'] 
		qty_bids_a_l_RENUSDT = data['data']['B'] 
		price_asks_a_l_RENUSDT = data['data']['a'] 
		qty_asks_a_l_RENUSDT = data['data']['A'] 

		global symbol_a_g_RENUSDT 
		global price_bids_a_g_RENUSDT 
		global qty_bids_a_g_RENUSDT 
		global price_asks_a_g_RENUSDT 
		global qty_asks_a_g_RENUSDT 

		symbol_a_g_RENUSDT = symbol_a_l_RENUSDT 
		price_bids_a_g_RENUSDT = price_bids_a_l_RENUSDT 
		qty_bids_a_g_RENUSDT = qty_bids_a_l_RENUSDT 
		price_asks_a_g_RENUSDT = price_asks_a_l_RENUSDT 
		qty_asks_a_g_RENUSDT = qty_asks_a_l_RENUSDT 

	if data['stream'] == streamrenbtc :
		data = json.loads(message) 

		symbol_b_l_RENBTC = data['data']['s'] 
		price_bids_b_l_RENBTC = data['data']['b'] 
		qty_bids_b_l_RENBTC = data['data']['B']
		price_asks_b_l_RENBTC = data['data']['a'] 
		qty_asks_b_l_RENBTC = data['data']['A'] 

		global symbol_b_g_RENBTC 
		global price_bids_b_g_RENBTC 
		global qty_bids_b_g_RENBTC 
		global price_asks_b_g_RENBTC 
		global qty_asks_b_g_RENBTC 

		symbol_b_g_RENBTC = symbol_b_l_RENBTC 
		price_bids_b_g_RENBTC = price_bids_b_l_RENBTC 
		qty_bids_b_g_RENBTC = qty_bids_b_l_RENBTC 
		price_asks_b_g_RENBTC = price_asks_b_l_RENBTC 
		qty_asks_b_g_RENBTC = qty_asks_b_l_RENBTC 


def loop_RENUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamrenusdt}/{streamrenbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_RENUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_RENUSDT).start()

def loop_RENUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_RENUSDT != 0.0 and qty_bids_a_g_RENUSDT != 0.0 and price_asks_a_g_RENUSDT != 0.0 and qty_asks_a_g_RENUSDT != 0.0 and price_bids_b_g_RENBTC != 0.0 and qty_bids_b_g_RENBTC != 0.0 and price_asks_b_g_RENBTC != 0.0 and qty_asks_b_g_RENBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_RENBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_RENBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_RENUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_RENUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_RENBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_RENBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_RENUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_RENUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_RENBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_RENBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_RENUSDT_Trade).start() 

streamrvnusdt = 'rvnusdt@bookTicker'
streamrvnbtc  = 'rvnbtc@bookTicker'

symbol_a_g_RVNUSDT = 'RVNUSDT' 
price_bids_a_g_RVNUSDT = float(0.0) 
qty_bids_a_g_RVNUSDT = float(0.0) 
price_asks_a_g_RVNUSDT = float(0.0) 
qty_asks_a_g_RVNUSDT = float(0.0) 

stepSize_RVNUSDT = 0.10000000 

symbol_b_g_RVNBTC = 'RVNBTC' 
price_bids_b_g_RVNBTC = float(0.0) 
qty_bids_b_g_RVNBTC = float(0.0) 
price_asks_b_g_RVNBTC = float(0.0) 
qty_asks_b_g_RVNBTC = float(0.0) 

stepSize_RVNBTC = 1.00000000 

def on_message_RVNUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamrvnusdt :
		symbol_a_l_RVNUSDT = data['data']['s'] 
		price_bids_a_l_RVNUSDT = data['data']['b'] 
		qty_bids_a_l_RVNUSDT = data['data']['B'] 
		price_asks_a_l_RVNUSDT = data['data']['a'] 
		qty_asks_a_l_RVNUSDT = data['data']['A'] 

		global symbol_a_g_RVNUSDT 
		global price_bids_a_g_RVNUSDT 
		global qty_bids_a_g_RVNUSDT 
		global price_asks_a_g_RVNUSDT 
		global qty_asks_a_g_RVNUSDT 

		symbol_a_g_RVNUSDT = symbol_a_l_RVNUSDT 
		price_bids_a_g_RVNUSDT = price_bids_a_l_RVNUSDT 
		qty_bids_a_g_RVNUSDT = qty_bids_a_l_RVNUSDT 
		price_asks_a_g_RVNUSDT = price_asks_a_l_RVNUSDT 
		qty_asks_a_g_RVNUSDT = qty_asks_a_l_RVNUSDT 

	if data['stream'] == streamrvnbtc :
		data = json.loads(message) 

		symbol_b_l_RVNBTC = data['data']['s'] 
		price_bids_b_l_RVNBTC = data['data']['b'] 
		qty_bids_b_l_RVNBTC = data['data']['B']
		price_asks_b_l_RVNBTC = data['data']['a'] 
		qty_asks_b_l_RVNBTC = data['data']['A'] 

		global symbol_b_g_RVNBTC 
		global price_bids_b_g_RVNBTC 
		global qty_bids_b_g_RVNBTC 
		global price_asks_b_g_RVNBTC 
		global qty_asks_b_g_RVNBTC 

		symbol_b_g_RVNBTC = symbol_b_l_RVNBTC 
		price_bids_b_g_RVNBTC = price_bids_b_l_RVNBTC 
		qty_bids_b_g_RVNBTC = qty_bids_b_l_RVNBTC 
		price_asks_b_g_RVNBTC = price_asks_b_l_RVNBTC 
		qty_asks_b_g_RVNBTC = qty_asks_b_l_RVNBTC 


def loop_RVNUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamrvnusdt}/{streamrvnbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_RVNUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_RVNUSDT).start()

def loop_RVNUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_RVNUSDT != 0.0 and qty_bids_a_g_RVNUSDT != 0.0 and price_asks_a_g_RVNUSDT != 0.0 and qty_asks_a_g_RVNUSDT != 0.0 and price_bids_b_g_RVNBTC != 0.0 and qty_bids_b_g_RVNBTC != 0.0 and price_asks_b_g_RVNBTC != 0.0 and qty_asks_b_g_RVNBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_RVNBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_RVNBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_RVNUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_RVNUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_RVNBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_RVNBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_RVNUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_RVNUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_RVNBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_RVNBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_RVNUSDT_Trade).start() 

streamhbarusdt = 'hbarusdt@bookTicker'
streamhbarbtc  = 'hbarbtc@bookTicker'

symbol_a_g_HBARUSDT = 'HBARUSDT' 
price_bids_a_g_HBARUSDT = float(0.0) 
qty_bids_a_g_HBARUSDT = float(0.0) 
price_asks_a_g_HBARUSDT = float(0.0) 
qty_asks_a_g_HBARUSDT = float(0.0) 

stepSize_HBARUSDT = 1.00000000 

symbol_b_g_HBARBTC = 'HBARBTC' 
price_bids_b_g_HBARBTC = float(0.0) 
qty_bids_b_g_HBARBTC = float(0.0) 
price_asks_b_g_HBARBTC = float(0.0) 
qty_asks_b_g_HBARBTC = float(0.0) 

stepSize_HBARBTC = 1.00000000 

def on_message_HBARUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamhbarusdt :
		symbol_a_l_HBARUSDT = data['data']['s'] 
		price_bids_a_l_HBARUSDT = data['data']['b'] 
		qty_bids_a_l_HBARUSDT = data['data']['B'] 
		price_asks_a_l_HBARUSDT = data['data']['a'] 
		qty_asks_a_l_HBARUSDT = data['data']['A'] 

		global symbol_a_g_HBARUSDT 
		global price_bids_a_g_HBARUSDT 
		global qty_bids_a_g_HBARUSDT 
		global price_asks_a_g_HBARUSDT 
		global qty_asks_a_g_HBARUSDT 

		symbol_a_g_HBARUSDT = symbol_a_l_HBARUSDT 
		price_bids_a_g_HBARUSDT = price_bids_a_l_HBARUSDT 
		qty_bids_a_g_HBARUSDT = qty_bids_a_l_HBARUSDT 
		price_asks_a_g_HBARUSDT = price_asks_a_l_HBARUSDT 
		qty_asks_a_g_HBARUSDT = qty_asks_a_l_HBARUSDT 

	if data['stream'] == streamhbarbtc :
		data = json.loads(message) 

		symbol_b_l_HBARBTC = data['data']['s'] 
		price_bids_b_l_HBARBTC = data['data']['b'] 
		qty_bids_b_l_HBARBTC = data['data']['B']
		price_asks_b_l_HBARBTC = data['data']['a'] 
		qty_asks_b_l_HBARBTC = data['data']['A'] 

		global symbol_b_g_HBARBTC 
		global price_bids_b_g_HBARBTC 
		global qty_bids_b_g_HBARBTC 
		global price_asks_b_g_HBARBTC 
		global qty_asks_b_g_HBARBTC 

		symbol_b_g_HBARBTC = symbol_b_l_HBARBTC 
		price_bids_b_g_HBARBTC = price_bids_b_l_HBARBTC 
		qty_bids_b_g_HBARBTC = qty_bids_b_l_HBARBTC 
		price_asks_b_g_HBARBTC = price_asks_b_l_HBARBTC 
		qty_asks_b_g_HBARBTC = qty_asks_b_l_HBARBTC 


def loop_HBARUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamhbarusdt}/{streamhbarbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_HBARUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_HBARUSDT).start()

def loop_HBARUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_HBARUSDT != 0.0 and qty_bids_a_g_HBARUSDT != 0.0 and price_asks_a_g_HBARUSDT != 0.0 and qty_asks_a_g_HBARUSDT != 0.0 and price_bids_b_g_HBARBTC != 0.0 and qty_bids_b_g_HBARBTC != 0.0 and price_asks_b_g_HBARBTC != 0.0 and qty_asks_b_g_HBARBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_HBARBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_HBARBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_HBARUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_HBARUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_HBARBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_HBARBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_HBARUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_HBARUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_HBARBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_HBARBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_HBARUSDT_Trade).start() 

streamnknusdt = 'nknusdt@bookTicker'
streamnknbtc  = 'nknbtc@bookTicker'

symbol_a_g_NKNUSDT = 'NKNUSDT' 
price_bids_a_g_NKNUSDT = float(0.0) 
qty_bids_a_g_NKNUSDT = float(0.0) 
price_asks_a_g_NKNUSDT = float(0.0) 
qty_asks_a_g_NKNUSDT = float(0.0) 

stepSize_NKNUSDT = 1.00000000 

symbol_b_g_NKNBTC = 'NKNBTC' 
price_bids_b_g_NKNBTC = float(0.0) 
qty_bids_b_g_NKNBTC = float(0.0) 
price_asks_b_g_NKNBTC = float(0.0) 
qty_asks_b_g_NKNBTC = float(0.0) 

stepSize_NKNBTC = 1.00000000 

def on_message_NKNUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamnknusdt :
		symbol_a_l_NKNUSDT = data['data']['s'] 
		price_bids_a_l_NKNUSDT = data['data']['b'] 
		qty_bids_a_l_NKNUSDT = data['data']['B'] 
		price_asks_a_l_NKNUSDT = data['data']['a'] 
		qty_asks_a_l_NKNUSDT = data['data']['A'] 

		global symbol_a_g_NKNUSDT 
		global price_bids_a_g_NKNUSDT 
		global qty_bids_a_g_NKNUSDT 
		global price_asks_a_g_NKNUSDT 
		global qty_asks_a_g_NKNUSDT 

		symbol_a_g_NKNUSDT = symbol_a_l_NKNUSDT 
		price_bids_a_g_NKNUSDT = price_bids_a_l_NKNUSDT 
		qty_bids_a_g_NKNUSDT = qty_bids_a_l_NKNUSDT 
		price_asks_a_g_NKNUSDT = price_asks_a_l_NKNUSDT 
		qty_asks_a_g_NKNUSDT = qty_asks_a_l_NKNUSDT 

	if data['stream'] == streamnknbtc :
		data = json.loads(message) 

		symbol_b_l_NKNBTC = data['data']['s'] 
		price_bids_b_l_NKNBTC = data['data']['b'] 
		qty_bids_b_l_NKNBTC = data['data']['B']
		price_asks_b_l_NKNBTC = data['data']['a'] 
		qty_asks_b_l_NKNBTC = data['data']['A'] 

		global symbol_b_g_NKNBTC 
		global price_bids_b_g_NKNBTC 
		global qty_bids_b_g_NKNBTC 
		global price_asks_b_g_NKNBTC 
		global qty_asks_b_g_NKNBTC 

		symbol_b_g_NKNBTC = symbol_b_l_NKNBTC 
		price_bids_b_g_NKNBTC = price_bids_b_l_NKNBTC 
		qty_bids_b_g_NKNBTC = qty_bids_b_l_NKNBTC 
		price_asks_b_g_NKNBTC = price_asks_b_l_NKNBTC 
		qty_asks_b_g_NKNBTC = qty_asks_b_l_NKNBTC 


def loop_NKNUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamnknusdt}/{streamnknbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_NKNUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_NKNUSDT).start()

def loop_NKNUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_NKNUSDT != 0.0 and qty_bids_a_g_NKNUSDT != 0.0 and price_asks_a_g_NKNUSDT != 0.0 and qty_asks_a_g_NKNUSDT != 0.0 and price_bids_b_g_NKNBTC != 0.0 and qty_bids_b_g_NKNBTC != 0.0 and price_asks_b_g_NKNBTC != 0.0 and qty_asks_b_g_NKNBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_NKNBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_NKNBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_NKNUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_NKNUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_NKNBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_NKNBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_NKNUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_NKNUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_NKNBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_NKNBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_NKNUSDT_Trade).start() 

streamstxusdt = 'stxusdt@bookTicker'
streamstxbtc  = 'stxbtc@bookTicker'

symbol_a_g_STXUSDT = 'STXUSDT' 
price_bids_a_g_STXUSDT = float(0.0) 
qty_bids_a_g_STXUSDT = float(0.0) 
price_asks_a_g_STXUSDT = float(0.0) 
qty_asks_a_g_STXUSDT = float(0.0) 

stepSize_STXUSDT = 0.10000000 

symbol_b_g_STXBTC = 'STXBTC' 
price_bids_b_g_STXBTC = float(0.0) 
qty_bids_b_g_STXBTC = float(0.0) 
price_asks_b_g_STXBTC = float(0.0) 
qty_asks_b_g_STXBTC = float(0.0) 

stepSize_STXBTC = 0.10000000 

def on_message_STXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamstxusdt :
		symbol_a_l_STXUSDT = data['data']['s'] 
		price_bids_a_l_STXUSDT = data['data']['b'] 
		qty_bids_a_l_STXUSDT = data['data']['B'] 
		price_asks_a_l_STXUSDT = data['data']['a'] 
		qty_asks_a_l_STXUSDT = data['data']['A'] 

		global symbol_a_g_STXUSDT 
		global price_bids_a_g_STXUSDT 
		global qty_bids_a_g_STXUSDT 
		global price_asks_a_g_STXUSDT 
		global qty_asks_a_g_STXUSDT 

		symbol_a_g_STXUSDT = symbol_a_l_STXUSDT 
		price_bids_a_g_STXUSDT = price_bids_a_l_STXUSDT 
		qty_bids_a_g_STXUSDT = qty_bids_a_l_STXUSDT 
		price_asks_a_g_STXUSDT = price_asks_a_l_STXUSDT 
		qty_asks_a_g_STXUSDT = qty_asks_a_l_STXUSDT 

	if data['stream'] == streamstxbtc :
		data = json.loads(message) 

		symbol_b_l_STXBTC = data['data']['s'] 
		price_bids_b_l_STXBTC = data['data']['b'] 
		qty_bids_b_l_STXBTC = data['data']['B']
		price_asks_b_l_STXBTC = data['data']['a'] 
		qty_asks_b_l_STXBTC = data['data']['A'] 

		global symbol_b_g_STXBTC 
		global price_bids_b_g_STXBTC 
		global qty_bids_b_g_STXBTC 
		global price_asks_b_g_STXBTC 
		global qty_asks_b_g_STXBTC 

		symbol_b_g_STXBTC = symbol_b_l_STXBTC 
		price_bids_b_g_STXBTC = price_bids_b_l_STXBTC 
		qty_bids_b_g_STXBTC = qty_bids_b_l_STXBTC 
		price_asks_b_g_STXBTC = price_asks_b_l_STXBTC 
		qty_asks_b_g_STXBTC = qty_asks_b_l_STXBTC 


def loop_STXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamstxusdt}/{streamstxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_STXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_STXUSDT).start()

def loop_STXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_STXUSDT != 0.0 and qty_bids_a_g_STXUSDT != 0.0 and price_asks_a_g_STXUSDT != 0.0 and qty_asks_a_g_STXUSDT != 0.0 and price_bids_b_g_STXBTC != 0.0 and qty_bids_b_g_STXBTC != 0.0 and price_asks_b_g_STXBTC != 0.0 and qty_asks_b_g_STXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_STXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_STXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_STXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_STXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_STXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_STXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_STXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_STXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_STXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_STXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_STXUSDT_Trade).start() 

streamkavausdt = 'kavausdt@bookTicker'
streamkavabtc  = 'kavabtc@bookTicker'

symbol_a_g_KAVAUSDT = 'KAVAUSDT' 
price_bids_a_g_KAVAUSDT = float(0.0) 
qty_bids_a_g_KAVAUSDT = float(0.0) 
price_asks_a_g_KAVAUSDT = float(0.0) 
qty_asks_a_g_KAVAUSDT = float(0.0) 

stepSize_KAVAUSDT = 0.10000000 

symbol_b_g_KAVABTC = 'KAVABTC' 
price_bids_b_g_KAVABTC = float(0.0) 
qty_bids_b_g_KAVABTC = float(0.0) 
price_asks_b_g_KAVABTC = float(0.0) 
qty_asks_b_g_KAVABTC = float(0.0) 

stepSize_KAVABTC = 0.10000000 

def on_message_KAVAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamkavausdt :
		symbol_a_l_KAVAUSDT = data['data']['s'] 
		price_bids_a_l_KAVAUSDT = data['data']['b'] 
		qty_bids_a_l_KAVAUSDT = data['data']['B'] 
		price_asks_a_l_KAVAUSDT = data['data']['a'] 
		qty_asks_a_l_KAVAUSDT = data['data']['A'] 

		global symbol_a_g_KAVAUSDT 
		global price_bids_a_g_KAVAUSDT 
		global qty_bids_a_g_KAVAUSDT 
		global price_asks_a_g_KAVAUSDT 
		global qty_asks_a_g_KAVAUSDT 

		symbol_a_g_KAVAUSDT = symbol_a_l_KAVAUSDT 
		price_bids_a_g_KAVAUSDT = price_bids_a_l_KAVAUSDT 
		qty_bids_a_g_KAVAUSDT = qty_bids_a_l_KAVAUSDT 
		price_asks_a_g_KAVAUSDT = price_asks_a_l_KAVAUSDT 
		qty_asks_a_g_KAVAUSDT = qty_asks_a_l_KAVAUSDT 

	if data['stream'] == streamkavabtc :
		data = json.loads(message) 

		symbol_b_l_KAVABTC = data['data']['s'] 
		price_bids_b_l_KAVABTC = data['data']['b'] 
		qty_bids_b_l_KAVABTC = data['data']['B']
		price_asks_b_l_KAVABTC = data['data']['a'] 
		qty_asks_b_l_KAVABTC = data['data']['A'] 

		global symbol_b_g_KAVABTC 
		global price_bids_b_g_KAVABTC 
		global qty_bids_b_g_KAVABTC 
		global price_asks_b_g_KAVABTC 
		global qty_asks_b_g_KAVABTC 

		symbol_b_g_KAVABTC = symbol_b_l_KAVABTC 
		price_bids_b_g_KAVABTC = price_bids_b_l_KAVABTC 
		qty_bids_b_g_KAVABTC = qty_bids_b_l_KAVABTC 
		price_asks_b_g_KAVABTC = price_asks_b_l_KAVABTC 
		qty_asks_b_g_KAVABTC = qty_asks_b_l_KAVABTC 


def loop_KAVAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamkavausdt}/{streamkavabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_KAVAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_KAVAUSDT).start()

def loop_KAVAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_KAVAUSDT != 0.0 and qty_bids_a_g_KAVAUSDT != 0.0 and price_asks_a_g_KAVAUSDT != 0.0 and qty_asks_a_g_KAVAUSDT != 0.0 and price_bids_b_g_KAVABTC != 0.0 and qty_bids_b_g_KAVABTC != 0.0 and price_asks_b_g_KAVABTC != 0.0 and qty_asks_b_g_KAVABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_KAVABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_KAVABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_KAVAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_KAVAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_KAVABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_KAVABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_KAVAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_KAVAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_KAVABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_KAVABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_KAVAUSDT_Trade).start() 

streamarpausdt = 'arpausdt@bookTicker'
streamarpabtc  = 'arpabtc@bookTicker'

symbol_a_g_ARPAUSDT = 'ARPAUSDT' 
price_bids_a_g_ARPAUSDT = float(0.0) 
qty_bids_a_g_ARPAUSDT = float(0.0) 
price_asks_a_g_ARPAUSDT = float(0.0) 
qty_asks_a_g_ARPAUSDT = float(0.0) 

stepSize_ARPAUSDT = 0.10000000 

symbol_b_g_ARPABTC = 'ARPABTC' 
price_bids_b_g_ARPABTC = float(0.0) 
qty_bids_b_g_ARPABTC = float(0.0) 
price_asks_b_g_ARPABTC = float(0.0) 
qty_asks_b_g_ARPABTC = float(0.0) 

stepSize_ARPABTC = 1.00000000 

def on_message_ARPAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamarpausdt :
		symbol_a_l_ARPAUSDT = data['data']['s'] 
		price_bids_a_l_ARPAUSDT = data['data']['b'] 
		qty_bids_a_l_ARPAUSDT = data['data']['B'] 
		price_asks_a_l_ARPAUSDT = data['data']['a'] 
		qty_asks_a_l_ARPAUSDT = data['data']['A'] 

		global symbol_a_g_ARPAUSDT 
		global price_bids_a_g_ARPAUSDT 
		global qty_bids_a_g_ARPAUSDT 
		global price_asks_a_g_ARPAUSDT 
		global qty_asks_a_g_ARPAUSDT 

		symbol_a_g_ARPAUSDT = symbol_a_l_ARPAUSDT 
		price_bids_a_g_ARPAUSDT = price_bids_a_l_ARPAUSDT 
		qty_bids_a_g_ARPAUSDT = qty_bids_a_l_ARPAUSDT 
		price_asks_a_g_ARPAUSDT = price_asks_a_l_ARPAUSDT 
		qty_asks_a_g_ARPAUSDT = qty_asks_a_l_ARPAUSDT 

	if data['stream'] == streamarpabtc :
		data = json.loads(message) 

		symbol_b_l_ARPABTC = data['data']['s'] 
		price_bids_b_l_ARPABTC = data['data']['b'] 
		qty_bids_b_l_ARPABTC = data['data']['B']
		price_asks_b_l_ARPABTC = data['data']['a'] 
		qty_asks_b_l_ARPABTC = data['data']['A'] 

		global symbol_b_g_ARPABTC 
		global price_bids_b_g_ARPABTC 
		global qty_bids_b_g_ARPABTC 
		global price_asks_b_g_ARPABTC 
		global qty_asks_b_g_ARPABTC 

		symbol_b_g_ARPABTC = symbol_b_l_ARPABTC 
		price_bids_b_g_ARPABTC = price_bids_b_l_ARPABTC 
		qty_bids_b_g_ARPABTC = qty_bids_b_l_ARPABTC 
		price_asks_b_g_ARPABTC = price_asks_b_l_ARPABTC 
		qty_asks_b_g_ARPABTC = qty_asks_b_l_ARPABTC 


def loop_ARPAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamarpausdt}/{streamarpabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ARPAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ARPAUSDT).start()

def loop_ARPAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ARPAUSDT != 0.0 and qty_bids_a_g_ARPAUSDT != 0.0 and price_asks_a_g_ARPAUSDT != 0.0 and qty_asks_a_g_ARPAUSDT != 0.0 and price_bids_b_g_ARPABTC != 0.0 and qty_bids_b_g_ARPABTC != 0.0 and price_asks_b_g_ARPABTC != 0.0 and qty_asks_b_g_ARPABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ARPABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ARPABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ARPAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ARPAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ARPABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ARPABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ARPAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ARPAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ARPABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ARPABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ARPAUSDT_Trade).start() 

streamiotxusdt = 'iotxusdt@bookTicker'
streamiotxbtc  = 'iotxbtc@bookTicker'

symbol_a_g_IOTXUSDT = 'IOTXUSDT' 
price_bids_a_g_IOTXUSDT = float(0.0) 
qty_bids_a_g_IOTXUSDT = float(0.0) 
price_asks_a_g_IOTXUSDT = float(0.0) 
qty_asks_a_g_IOTXUSDT = float(0.0) 

stepSize_IOTXUSDT = 1.00000000 

symbol_b_g_IOTXBTC = 'IOTXBTC' 
price_bids_b_g_IOTXBTC = float(0.0) 
qty_bids_b_g_IOTXBTC = float(0.0) 
price_asks_b_g_IOTXBTC = float(0.0) 
qty_asks_b_g_IOTXBTC = float(0.0) 

stepSize_IOTXBTC = 1.00000000 

def on_message_IOTXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamiotxusdt :
		symbol_a_l_IOTXUSDT = data['data']['s'] 
		price_bids_a_l_IOTXUSDT = data['data']['b'] 
		qty_bids_a_l_IOTXUSDT = data['data']['B'] 
		price_asks_a_l_IOTXUSDT = data['data']['a'] 
		qty_asks_a_l_IOTXUSDT = data['data']['A'] 

		global symbol_a_g_IOTXUSDT 
		global price_bids_a_g_IOTXUSDT 
		global qty_bids_a_g_IOTXUSDT 
		global price_asks_a_g_IOTXUSDT 
		global qty_asks_a_g_IOTXUSDT 

		symbol_a_g_IOTXUSDT = symbol_a_l_IOTXUSDT 
		price_bids_a_g_IOTXUSDT = price_bids_a_l_IOTXUSDT 
		qty_bids_a_g_IOTXUSDT = qty_bids_a_l_IOTXUSDT 
		price_asks_a_g_IOTXUSDT = price_asks_a_l_IOTXUSDT 
		qty_asks_a_g_IOTXUSDT = qty_asks_a_l_IOTXUSDT 

	if data['stream'] == streamiotxbtc :
		data = json.loads(message) 

		symbol_b_l_IOTXBTC = data['data']['s'] 
		price_bids_b_l_IOTXBTC = data['data']['b'] 
		qty_bids_b_l_IOTXBTC = data['data']['B']
		price_asks_b_l_IOTXBTC = data['data']['a'] 
		qty_asks_b_l_IOTXBTC = data['data']['A'] 

		global symbol_b_g_IOTXBTC 
		global price_bids_b_g_IOTXBTC 
		global qty_bids_b_g_IOTXBTC 
		global price_asks_b_g_IOTXBTC 
		global qty_asks_b_g_IOTXBTC 

		symbol_b_g_IOTXBTC = symbol_b_l_IOTXBTC 
		price_bids_b_g_IOTXBTC = price_bids_b_l_IOTXBTC 
		qty_bids_b_g_IOTXBTC = qty_bids_b_l_IOTXBTC 
		price_asks_b_g_IOTXBTC = price_asks_b_l_IOTXBTC 
		qty_asks_b_g_IOTXBTC = qty_asks_b_l_IOTXBTC 


def loop_IOTXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamiotxusdt}/{streamiotxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_IOTXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_IOTXUSDT).start()

def loop_IOTXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_IOTXUSDT != 0.0 and qty_bids_a_g_IOTXUSDT != 0.0 and price_asks_a_g_IOTXUSDT != 0.0 and qty_asks_a_g_IOTXUSDT != 0.0 and price_bids_b_g_IOTXBTC != 0.0 and qty_bids_b_g_IOTXBTC != 0.0 and price_asks_b_g_IOTXBTC != 0.0 and qty_asks_b_g_IOTXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_IOTXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_IOTXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_IOTXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_IOTXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_IOTXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_IOTXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_IOTXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_IOTXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_IOTXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_IOTXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_IOTXUSDT_Trade).start() 

streamrlcusdt = 'rlcusdt@bookTicker'
streamrlcbtc  = 'rlcbtc@bookTicker'

symbol_a_g_RLCUSDT = 'RLCUSDT' 
price_bids_a_g_RLCUSDT = float(0.0) 
qty_bids_a_g_RLCUSDT = float(0.0) 
price_asks_a_g_RLCUSDT = float(0.0) 
qty_asks_a_g_RLCUSDT = float(0.0) 

stepSize_RLCUSDT = 0.10000000 

symbol_b_g_RLCBTC = 'RLCBTC' 
price_bids_b_g_RLCBTC = float(0.0) 
qty_bids_b_g_RLCBTC = float(0.0) 
price_asks_b_g_RLCBTC = float(0.0) 
qty_asks_b_g_RLCBTC = float(0.0) 

stepSize_RLCBTC = 0.10000000 

def on_message_RLCUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamrlcusdt :
		symbol_a_l_RLCUSDT = data['data']['s'] 
		price_bids_a_l_RLCUSDT = data['data']['b'] 
		qty_bids_a_l_RLCUSDT = data['data']['B'] 
		price_asks_a_l_RLCUSDT = data['data']['a'] 
		qty_asks_a_l_RLCUSDT = data['data']['A'] 

		global symbol_a_g_RLCUSDT 
		global price_bids_a_g_RLCUSDT 
		global qty_bids_a_g_RLCUSDT 
		global price_asks_a_g_RLCUSDT 
		global qty_asks_a_g_RLCUSDT 

		symbol_a_g_RLCUSDT = symbol_a_l_RLCUSDT 
		price_bids_a_g_RLCUSDT = price_bids_a_l_RLCUSDT 
		qty_bids_a_g_RLCUSDT = qty_bids_a_l_RLCUSDT 
		price_asks_a_g_RLCUSDT = price_asks_a_l_RLCUSDT 
		qty_asks_a_g_RLCUSDT = qty_asks_a_l_RLCUSDT 

	if data['stream'] == streamrlcbtc :
		data = json.loads(message) 

		symbol_b_l_RLCBTC = data['data']['s'] 
		price_bids_b_l_RLCBTC = data['data']['b'] 
		qty_bids_b_l_RLCBTC = data['data']['B']
		price_asks_b_l_RLCBTC = data['data']['a'] 
		qty_asks_b_l_RLCBTC = data['data']['A'] 

		global symbol_b_g_RLCBTC 
		global price_bids_b_g_RLCBTC 
		global qty_bids_b_g_RLCBTC 
		global price_asks_b_g_RLCBTC 
		global qty_asks_b_g_RLCBTC 

		symbol_b_g_RLCBTC = symbol_b_l_RLCBTC 
		price_bids_b_g_RLCBTC = price_bids_b_l_RLCBTC 
		qty_bids_b_g_RLCBTC = qty_bids_b_l_RLCBTC 
		price_asks_b_g_RLCBTC = price_asks_b_l_RLCBTC 
		qty_asks_b_g_RLCBTC = qty_asks_b_l_RLCBTC 


def loop_RLCUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamrlcusdt}/{streamrlcbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_RLCUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_RLCUSDT).start()

def loop_RLCUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_RLCUSDT != 0.0 and qty_bids_a_g_RLCUSDT != 0.0 and price_asks_a_g_RLCUSDT != 0.0 and qty_asks_a_g_RLCUSDT != 0.0 and price_bids_b_g_RLCBTC != 0.0 and qty_bids_b_g_RLCBTC != 0.0 and price_asks_b_g_RLCBTC != 0.0 and qty_asks_b_g_RLCBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_RLCBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_RLCBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_RLCUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_RLCUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_RLCBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_RLCBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_RLCUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_RLCUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_RLCBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_RLCBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_RLCUSDT_Trade).start() 

streamctxcusdt = 'ctxcusdt@bookTicker'
streamctxcbtc  = 'ctxcbtc@bookTicker'

symbol_a_g_CTXCUSDT = 'CTXCUSDT' 
price_bids_a_g_CTXCUSDT = float(0.0) 
qty_bids_a_g_CTXCUSDT = float(0.0) 
price_asks_a_g_CTXCUSDT = float(0.0) 
qty_asks_a_g_CTXCUSDT = float(0.0) 

stepSize_CTXCUSDT = 1.00000000 

symbol_b_g_CTXCBTC = 'CTXCBTC' 
price_bids_b_g_CTXCBTC = float(0.0) 
qty_bids_b_g_CTXCBTC = float(0.0) 
price_asks_b_g_CTXCBTC = float(0.0) 
qty_asks_b_g_CTXCBTC = float(0.0) 

stepSize_CTXCBTC = 1.00000000 

def on_message_CTXCUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamctxcusdt :
		symbol_a_l_CTXCUSDT = data['data']['s'] 
		price_bids_a_l_CTXCUSDT = data['data']['b'] 
		qty_bids_a_l_CTXCUSDT = data['data']['B'] 
		price_asks_a_l_CTXCUSDT = data['data']['a'] 
		qty_asks_a_l_CTXCUSDT = data['data']['A'] 

		global symbol_a_g_CTXCUSDT 
		global price_bids_a_g_CTXCUSDT 
		global qty_bids_a_g_CTXCUSDT 
		global price_asks_a_g_CTXCUSDT 
		global qty_asks_a_g_CTXCUSDT 

		symbol_a_g_CTXCUSDT = symbol_a_l_CTXCUSDT 
		price_bids_a_g_CTXCUSDT = price_bids_a_l_CTXCUSDT 
		qty_bids_a_g_CTXCUSDT = qty_bids_a_l_CTXCUSDT 
		price_asks_a_g_CTXCUSDT = price_asks_a_l_CTXCUSDT 
		qty_asks_a_g_CTXCUSDT = qty_asks_a_l_CTXCUSDT 

	if data['stream'] == streamctxcbtc :
		data = json.loads(message) 

		symbol_b_l_CTXCBTC = data['data']['s'] 
		price_bids_b_l_CTXCBTC = data['data']['b'] 
		qty_bids_b_l_CTXCBTC = data['data']['B']
		price_asks_b_l_CTXCBTC = data['data']['a'] 
		qty_asks_b_l_CTXCBTC = data['data']['A'] 

		global symbol_b_g_CTXCBTC 
		global price_bids_b_g_CTXCBTC 
		global qty_bids_b_g_CTXCBTC 
		global price_asks_b_g_CTXCBTC 
		global qty_asks_b_g_CTXCBTC 

		symbol_b_g_CTXCBTC = symbol_b_l_CTXCBTC 
		price_bids_b_g_CTXCBTC = price_bids_b_l_CTXCBTC 
		qty_bids_b_g_CTXCBTC = qty_bids_b_l_CTXCBTC 
		price_asks_b_g_CTXCBTC = price_asks_b_l_CTXCBTC 
		qty_asks_b_g_CTXCBTC = qty_asks_b_l_CTXCBTC 


def loop_CTXCUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamctxcusdt}/{streamctxcbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CTXCUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CTXCUSDT).start()

def loop_CTXCUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CTXCUSDT != 0.0 and qty_bids_a_g_CTXCUSDT != 0.0 and price_asks_a_g_CTXCUSDT != 0.0 and qty_asks_a_g_CTXCUSDT != 0.0 and price_bids_b_g_CTXCBTC != 0.0 and qty_bids_b_g_CTXCBTC != 0.0 and price_asks_b_g_CTXCBTC != 0.0 and qty_asks_b_g_CTXCBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CTXCBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CTXCBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CTXCUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CTXCUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CTXCBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CTXCBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CTXCUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CTXCUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CTXCBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CTXCBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CTXCUSDT_Trade).start() 

streambchusdt = 'bchusdt@bookTicker'
streambchbtc  = 'bchbtc@bookTicker'

symbol_a_g_BCHUSDT = 'BCHUSDT' 
price_bids_a_g_BCHUSDT = float(0.0) 
qty_bids_a_g_BCHUSDT = float(0.0) 
price_asks_a_g_BCHUSDT = float(0.0) 
qty_asks_a_g_BCHUSDT = float(0.0) 

stepSize_BCHUSDT = 0.00100000 

symbol_b_g_BCHBTC = 'BCHBTC' 
price_bids_b_g_BCHBTC = float(0.0) 
qty_bids_b_g_BCHBTC = float(0.0) 
price_asks_b_g_BCHBTC = float(0.0) 
qty_asks_b_g_BCHBTC = float(0.0) 

stepSize_BCHBTC = 0.00100000 

def on_message_BCHUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambchusdt :
		symbol_a_l_BCHUSDT = data['data']['s'] 
		price_bids_a_l_BCHUSDT = data['data']['b'] 
		qty_bids_a_l_BCHUSDT = data['data']['B'] 
		price_asks_a_l_BCHUSDT = data['data']['a'] 
		qty_asks_a_l_BCHUSDT = data['data']['A'] 

		global symbol_a_g_BCHUSDT 
		global price_bids_a_g_BCHUSDT 
		global qty_bids_a_g_BCHUSDT 
		global price_asks_a_g_BCHUSDT 
		global qty_asks_a_g_BCHUSDT 

		symbol_a_g_BCHUSDT = symbol_a_l_BCHUSDT 
		price_bids_a_g_BCHUSDT = price_bids_a_l_BCHUSDT 
		qty_bids_a_g_BCHUSDT = qty_bids_a_l_BCHUSDT 
		price_asks_a_g_BCHUSDT = price_asks_a_l_BCHUSDT 
		qty_asks_a_g_BCHUSDT = qty_asks_a_l_BCHUSDT 

	if data['stream'] == streambchbtc :
		data = json.loads(message) 

		symbol_b_l_BCHBTC = data['data']['s'] 
		price_bids_b_l_BCHBTC = data['data']['b'] 
		qty_bids_b_l_BCHBTC = data['data']['B']
		price_asks_b_l_BCHBTC = data['data']['a'] 
		qty_asks_b_l_BCHBTC = data['data']['A'] 

		global symbol_b_g_BCHBTC 
		global price_bids_b_g_BCHBTC 
		global qty_bids_b_g_BCHBTC 
		global price_asks_b_g_BCHBTC 
		global qty_asks_b_g_BCHBTC 

		symbol_b_g_BCHBTC = symbol_b_l_BCHBTC 
		price_bids_b_g_BCHBTC = price_bids_b_l_BCHBTC 
		qty_bids_b_g_BCHBTC = qty_bids_b_l_BCHBTC 
		price_asks_b_g_BCHBTC = price_asks_b_l_BCHBTC 
		qty_asks_b_g_BCHBTC = qty_asks_b_l_BCHBTC 


def loop_BCHUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambchusdt}/{streambchbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BCHUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BCHUSDT).start()

def loop_BCHUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BCHUSDT != 0.0 and qty_bids_a_g_BCHUSDT != 0.0 and price_asks_a_g_BCHUSDT != 0.0 and qty_asks_a_g_BCHUSDT != 0.0 and price_bids_b_g_BCHBTC != 0.0 and qty_bids_b_g_BCHBTC != 0.0 and price_asks_b_g_BCHBTC != 0.0 and qty_asks_b_g_BCHBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BCHBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BCHBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BCHUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BCHUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BCHBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BCHBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BCHUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BCHUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BCHBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BCHBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BCHUSDT_Trade).start() 

streamviteusdt = 'viteusdt@bookTicker'
streamvitebtc  = 'vitebtc@bookTicker'

symbol_a_g_VITEUSDT = 'VITEUSDT' 
price_bids_a_g_VITEUSDT = float(0.0) 
qty_bids_a_g_VITEUSDT = float(0.0) 
price_asks_a_g_VITEUSDT = float(0.0) 
qty_asks_a_g_VITEUSDT = float(0.0) 

stepSize_VITEUSDT = 0.10000000 

symbol_b_g_VITEBTC = 'VITEBTC' 
price_bids_b_g_VITEBTC = float(0.0) 
qty_bids_b_g_VITEBTC = float(0.0) 
price_asks_b_g_VITEBTC = float(0.0) 
qty_asks_b_g_VITEBTC = float(0.0) 

stepSize_VITEBTC = 1.00000000 

def on_message_VITEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamviteusdt :
		symbol_a_l_VITEUSDT = data['data']['s'] 
		price_bids_a_l_VITEUSDT = data['data']['b'] 
		qty_bids_a_l_VITEUSDT = data['data']['B'] 
		price_asks_a_l_VITEUSDT = data['data']['a'] 
		qty_asks_a_l_VITEUSDT = data['data']['A'] 

		global symbol_a_g_VITEUSDT 
		global price_bids_a_g_VITEUSDT 
		global qty_bids_a_g_VITEUSDT 
		global price_asks_a_g_VITEUSDT 
		global qty_asks_a_g_VITEUSDT 

		symbol_a_g_VITEUSDT = symbol_a_l_VITEUSDT 
		price_bids_a_g_VITEUSDT = price_bids_a_l_VITEUSDT 
		qty_bids_a_g_VITEUSDT = qty_bids_a_l_VITEUSDT 
		price_asks_a_g_VITEUSDT = price_asks_a_l_VITEUSDT 
		qty_asks_a_g_VITEUSDT = qty_asks_a_l_VITEUSDT 

	if data['stream'] == streamvitebtc :
		data = json.loads(message) 

		symbol_b_l_VITEBTC = data['data']['s'] 
		price_bids_b_l_VITEBTC = data['data']['b'] 
		qty_bids_b_l_VITEBTC = data['data']['B']
		price_asks_b_l_VITEBTC = data['data']['a'] 
		qty_asks_b_l_VITEBTC = data['data']['A'] 

		global symbol_b_g_VITEBTC 
		global price_bids_b_g_VITEBTC 
		global qty_bids_b_g_VITEBTC 
		global price_asks_b_g_VITEBTC 
		global qty_asks_b_g_VITEBTC 

		symbol_b_g_VITEBTC = symbol_b_l_VITEBTC 
		price_bids_b_g_VITEBTC = price_bids_b_l_VITEBTC 
		qty_bids_b_g_VITEBTC = qty_bids_b_l_VITEBTC 
		price_asks_b_g_VITEBTC = price_asks_b_l_VITEBTC 
		qty_asks_b_g_VITEBTC = qty_asks_b_l_VITEBTC 


def loop_VITEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamviteusdt}/{streamvitebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_VITEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_VITEUSDT).start()

def loop_VITEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_VITEUSDT != 0.0 and qty_bids_a_g_VITEUSDT != 0.0 and price_asks_a_g_VITEUSDT != 0.0 and qty_asks_a_g_VITEUSDT != 0.0 and price_bids_b_g_VITEBTC != 0.0 and qty_bids_b_g_VITEBTC != 0.0 and price_asks_b_g_VITEBTC != 0.0 and qty_asks_b_g_VITEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_VITEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_VITEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_VITEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_VITEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_VITEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_VITEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_VITEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_VITEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_VITEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_VITEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_VITEUSDT_Trade).start() 

streamognusdt = 'ognusdt@bookTicker'
streamognbtc  = 'ognbtc@bookTicker'

symbol_a_g_OGNUSDT = 'OGNUSDT' 
price_bids_a_g_OGNUSDT = float(0.0) 
qty_bids_a_g_OGNUSDT = float(0.0) 
price_asks_a_g_OGNUSDT = float(0.0) 
qty_asks_a_g_OGNUSDT = float(0.0) 

stepSize_OGNUSDT = 1.00000000 

symbol_b_g_OGNBTC = 'OGNBTC' 
price_bids_b_g_OGNBTC = float(0.0) 
qty_bids_b_g_OGNBTC = float(0.0) 
price_asks_b_g_OGNBTC = float(0.0) 
qty_asks_b_g_OGNBTC = float(0.0) 

stepSize_OGNBTC = 1.00000000 

def on_message_OGNUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamognusdt :
		symbol_a_l_OGNUSDT = data['data']['s'] 
		price_bids_a_l_OGNUSDT = data['data']['b'] 
		qty_bids_a_l_OGNUSDT = data['data']['B'] 
		price_asks_a_l_OGNUSDT = data['data']['a'] 
		qty_asks_a_l_OGNUSDT = data['data']['A'] 

		global symbol_a_g_OGNUSDT 
		global price_bids_a_g_OGNUSDT 
		global qty_bids_a_g_OGNUSDT 
		global price_asks_a_g_OGNUSDT 
		global qty_asks_a_g_OGNUSDT 

		symbol_a_g_OGNUSDT = symbol_a_l_OGNUSDT 
		price_bids_a_g_OGNUSDT = price_bids_a_l_OGNUSDT 
		qty_bids_a_g_OGNUSDT = qty_bids_a_l_OGNUSDT 
		price_asks_a_g_OGNUSDT = price_asks_a_l_OGNUSDT 
		qty_asks_a_g_OGNUSDT = qty_asks_a_l_OGNUSDT 

	if data['stream'] == streamognbtc :
		data = json.loads(message) 

		symbol_b_l_OGNBTC = data['data']['s'] 
		price_bids_b_l_OGNBTC = data['data']['b'] 
		qty_bids_b_l_OGNBTC = data['data']['B']
		price_asks_b_l_OGNBTC = data['data']['a'] 
		qty_asks_b_l_OGNBTC = data['data']['A'] 

		global symbol_b_g_OGNBTC 
		global price_bids_b_g_OGNBTC 
		global qty_bids_b_g_OGNBTC 
		global price_asks_b_g_OGNBTC 
		global qty_asks_b_g_OGNBTC 

		symbol_b_g_OGNBTC = symbol_b_l_OGNBTC 
		price_bids_b_g_OGNBTC = price_bids_b_l_OGNBTC 
		qty_bids_b_g_OGNBTC = qty_bids_b_l_OGNBTC 
		price_asks_b_g_OGNBTC = price_asks_b_l_OGNBTC 
		qty_asks_b_g_OGNBTC = qty_asks_b_l_OGNBTC 


def loop_OGNUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamognusdt}/{streamognbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_OGNUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_OGNUSDT).start()

def loop_OGNUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_OGNUSDT != 0.0 and qty_bids_a_g_OGNUSDT != 0.0 and price_asks_a_g_OGNUSDT != 0.0 and qty_asks_a_g_OGNUSDT != 0.0 and price_bids_b_g_OGNBTC != 0.0 and qty_bids_b_g_OGNBTC != 0.0 and price_asks_b_g_OGNBTC != 0.0 and qty_asks_b_g_OGNBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_OGNBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_OGNBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_OGNUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_OGNUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_OGNBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_OGNBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_OGNUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_OGNUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_OGNBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_OGNBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_OGNUSDT_Trade).start() 

streamdrepusdt = 'drepusdt@bookTicker'
streamdrepbtc  = 'drepbtc@bookTicker'

symbol_a_g_DREPUSDT = 'DREPUSDT' 
price_bids_a_g_DREPUSDT = float(0.0) 
qty_bids_a_g_DREPUSDT = float(0.0) 
price_asks_a_g_DREPUSDT = float(0.0) 
qty_asks_a_g_DREPUSDT = float(0.0) 

stepSize_DREPUSDT = 1.00000000 

symbol_b_g_DREPBTC = 'DREPBTC' 
price_bids_b_g_DREPBTC = float(0.0) 
qty_bids_b_g_DREPBTC = float(0.0) 
price_asks_b_g_DREPBTC = float(0.0) 
qty_asks_b_g_DREPBTC = float(0.0) 

stepSize_DREPBTC = 1.00000000 

def on_message_DREPUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamdrepusdt :
		symbol_a_l_DREPUSDT = data['data']['s'] 
		price_bids_a_l_DREPUSDT = data['data']['b'] 
		qty_bids_a_l_DREPUSDT = data['data']['B'] 
		price_asks_a_l_DREPUSDT = data['data']['a'] 
		qty_asks_a_l_DREPUSDT = data['data']['A'] 

		global symbol_a_g_DREPUSDT 
		global price_bids_a_g_DREPUSDT 
		global qty_bids_a_g_DREPUSDT 
		global price_asks_a_g_DREPUSDT 
		global qty_asks_a_g_DREPUSDT 

		symbol_a_g_DREPUSDT = symbol_a_l_DREPUSDT 
		price_bids_a_g_DREPUSDT = price_bids_a_l_DREPUSDT 
		qty_bids_a_g_DREPUSDT = qty_bids_a_l_DREPUSDT 
		price_asks_a_g_DREPUSDT = price_asks_a_l_DREPUSDT 
		qty_asks_a_g_DREPUSDT = qty_asks_a_l_DREPUSDT 

	if data['stream'] == streamdrepbtc :
		data = json.loads(message) 

		symbol_b_l_DREPBTC = data['data']['s'] 
		price_bids_b_l_DREPBTC = data['data']['b'] 
		qty_bids_b_l_DREPBTC = data['data']['B']
		price_asks_b_l_DREPBTC = data['data']['a'] 
		qty_asks_b_l_DREPBTC = data['data']['A'] 

		global symbol_b_g_DREPBTC 
		global price_bids_b_g_DREPBTC 
		global qty_bids_b_g_DREPBTC 
		global price_asks_b_g_DREPBTC 
		global qty_asks_b_g_DREPBTC 

		symbol_b_g_DREPBTC = symbol_b_l_DREPBTC 
		price_bids_b_g_DREPBTC = price_bids_b_l_DREPBTC 
		qty_bids_b_g_DREPBTC = qty_bids_b_l_DREPBTC 
		price_asks_b_g_DREPBTC = price_asks_b_l_DREPBTC 
		qty_asks_b_g_DREPBTC = qty_asks_b_l_DREPBTC 


def loop_DREPUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamdrepusdt}/{streamdrepbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DREPUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DREPUSDT).start()

def loop_DREPUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DREPUSDT != 0.0 and qty_bids_a_g_DREPUSDT != 0.0 and price_asks_a_g_DREPUSDT != 0.0 and qty_asks_a_g_DREPUSDT != 0.0 and price_bids_b_g_DREPBTC != 0.0 and qty_bids_b_g_DREPBTC != 0.0 and price_asks_b_g_DREPBTC != 0.0 and qty_asks_b_g_DREPBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DREPBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DREPBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DREPUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DREPUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DREPBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DREPBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DREPUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DREPUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DREPBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DREPBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DREPUSDT_Trade).start() 

streamwrxusdt = 'wrxusdt@bookTicker'
streamwrxbtc  = 'wrxbtc@bookTicker'

symbol_a_g_WRXUSDT = 'WRXUSDT' 
price_bids_a_g_WRXUSDT = float(0.0) 
qty_bids_a_g_WRXUSDT = float(0.0) 
price_asks_a_g_WRXUSDT = float(0.0) 
qty_asks_a_g_WRXUSDT = float(0.0) 

stepSize_WRXUSDT = 0.10000000 

symbol_b_g_WRXBTC = 'WRXBTC' 
price_bids_b_g_WRXBTC = float(0.0) 
qty_bids_b_g_WRXBTC = float(0.0) 
price_asks_b_g_WRXBTC = float(0.0) 
qty_asks_b_g_WRXBTC = float(0.0) 

stepSize_WRXBTC = 0.10000000 

def on_message_WRXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamwrxusdt :
		symbol_a_l_WRXUSDT = data['data']['s'] 
		price_bids_a_l_WRXUSDT = data['data']['b'] 
		qty_bids_a_l_WRXUSDT = data['data']['B'] 
		price_asks_a_l_WRXUSDT = data['data']['a'] 
		qty_asks_a_l_WRXUSDT = data['data']['A'] 

		global symbol_a_g_WRXUSDT 
		global price_bids_a_g_WRXUSDT 
		global qty_bids_a_g_WRXUSDT 
		global price_asks_a_g_WRXUSDT 
		global qty_asks_a_g_WRXUSDT 

		symbol_a_g_WRXUSDT = symbol_a_l_WRXUSDT 
		price_bids_a_g_WRXUSDT = price_bids_a_l_WRXUSDT 
		qty_bids_a_g_WRXUSDT = qty_bids_a_l_WRXUSDT 
		price_asks_a_g_WRXUSDT = price_asks_a_l_WRXUSDT 
		qty_asks_a_g_WRXUSDT = qty_asks_a_l_WRXUSDT 

	if data['stream'] == streamwrxbtc :
		data = json.loads(message) 

		symbol_b_l_WRXBTC = data['data']['s'] 
		price_bids_b_l_WRXBTC = data['data']['b'] 
		qty_bids_b_l_WRXBTC = data['data']['B']
		price_asks_b_l_WRXBTC = data['data']['a'] 
		qty_asks_b_l_WRXBTC = data['data']['A'] 

		global symbol_b_g_WRXBTC 
		global price_bids_b_g_WRXBTC 
		global qty_bids_b_g_WRXBTC 
		global price_asks_b_g_WRXBTC 
		global qty_asks_b_g_WRXBTC 

		symbol_b_g_WRXBTC = symbol_b_l_WRXBTC 
		price_bids_b_g_WRXBTC = price_bids_b_l_WRXBTC 
		qty_bids_b_g_WRXBTC = qty_bids_b_l_WRXBTC 
		price_asks_b_g_WRXBTC = price_asks_b_l_WRXBTC 
		qty_asks_b_g_WRXBTC = qty_asks_b_l_WRXBTC 


def loop_WRXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamwrxusdt}/{streamwrxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_WRXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_WRXUSDT).start()

def loop_WRXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_WRXUSDT != 0.0 and qty_bids_a_g_WRXUSDT != 0.0 and price_asks_a_g_WRXUSDT != 0.0 and qty_asks_a_g_WRXUSDT != 0.0 and price_bids_b_g_WRXBTC != 0.0 and qty_bids_b_g_WRXBTC != 0.0 and price_asks_b_g_WRXBTC != 0.0 and qty_asks_b_g_WRXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_WRXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_WRXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_WRXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_WRXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_WRXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_WRXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_WRXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_WRXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_WRXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_WRXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_WRXUSDT_Trade).start() 

streambtsusdt = 'btsusdt@bookTicker'
streambtsbtc  = 'btsbtc@bookTicker'

symbol_a_g_BTSUSDT = 'BTSUSDT' 
price_bids_a_g_BTSUSDT = float(0.0) 
qty_bids_a_g_BTSUSDT = float(0.0) 
price_asks_a_g_BTSUSDT = float(0.0) 
qty_asks_a_g_BTSUSDT = float(0.0) 

stepSize_BTSUSDT = 0.10000000 

symbol_b_g_BTSBTC = 'BTSBTC' 
price_bids_b_g_BTSBTC = float(0.0) 
qty_bids_b_g_BTSBTC = float(0.0) 
price_asks_b_g_BTSBTC = float(0.0) 
qty_asks_b_g_BTSBTC = float(0.0) 

stepSize_BTSBTC = 1.00000000 

def on_message_BTSUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambtsusdt :
		symbol_a_l_BTSUSDT = data['data']['s'] 
		price_bids_a_l_BTSUSDT = data['data']['b'] 
		qty_bids_a_l_BTSUSDT = data['data']['B'] 
		price_asks_a_l_BTSUSDT = data['data']['a'] 
		qty_asks_a_l_BTSUSDT = data['data']['A'] 

		global symbol_a_g_BTSUSDT 
		global price_bids_a_g_BTSUSDT 
		global qty_bids_a_g_BTSUSDT 
		global price_asks_a_g_BTSUSDT 
		global qty_asks_a_g_BTSUSDT 

		symbol_a_g_BTSUSDT = symbol_a_l_BTSUSDT 
		price_bids_a_g_BTSUSDT = price_bids_a_l_BTSUSDT 
		qty_bids_a_g_BTSUSDT = qty_bids_a_l_BTSUSDT 
		price_asks_a_g_BTSUSDT = price_asks_a_l_BTSUSDT 
		qty_asks_a_g_BTSUSDT = qty_asks_a_l_BTSUSDT 

	if data['stream'] == streambtsbtc :
		data = json.loads(message) 

		symbol_b_l_BTSBTC = data['data']['s'] 
		price_bids_b_l_BTSBTC = data['data']['b'] 
		qty_bids_b_l_BTSBTC = data['data']['B']
		price_asks_b_l_BTSBTC = data['data']['a'] 
		qty_asks_b_l_BTSBTC = data['data']['A'] 

		global symbol_b_g_BTSBTC 
		global price_bids_b_g_BTSBTC 
		global qty_bids_b_g_BTSBTC 
		global price_asks_b_g_BTSBTC 
		global qty_asks_b_g_BTSBTC 

		symbol_b_g_BTSBTC = symbol_b_l_BTSBTC 
		price_bids_b_g_BTSBTC = price_bids_b_l_BTSBTC 
		qty_bids_b_g_BTSBTC = qty_bids_b_l_BTSBTC 
		price_asks_b_g_BTSBTC = price_asks_b_l_BTSBTC 
		qty_asks_b_g_BTSBTC = qty_asks_b_l_BTSBTC 


def loop_BTSUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambtsusdt}/{streambtsbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BTSUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BTSUSDT).start()

def loop_BTSUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BTSUSDT != 0.0 and qty_bids_a_g_BTSUSDT != 0.0 and price_asks_a_g_BTSUSDT != 0.0 and qty_asks_a_g_BTSUSDT != 0.0 and price_bids_b_g_BTSBTC != 0.0 and qty_bids_b_g_BTSBTC != 0.0 and price_asks_b_g_BTSBTC != 0.0 and qty_asks_b_g_BTSBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BTSBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BTSBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BTSUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BTSUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BTSBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BTSBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BTSUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BTSUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BTSBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BTSBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BTSUSDT_Trade).start() 

streamlskusdt = 'lskusdt@bookTicker'
streamlskbtc  = 'lskbtc@bookTicker'

symbol_a_g_LSKUSDT = 'LSKUSDT' 
price_bids_a_g_LSKUSDT = float(0.0) 
qty_bids_a_g_LSKUSDT = float(0.0) 
price_asks_a_g_LSKUSDT = float(0.0) 
qty_asks_a_g_LSKUSDT = float(0.0) 

stepSize_LSKUSDT = 0.10000000 

symbol_b_g_LSKBTC = 'LSKBTC' 
price_bids_b_g_LSKBTC = float(0.0) 
qty_bids_b_g_LSKBTC = float(0.0) 
price_asks_b_g_LSKBTC = float(0.0) 
qty_asks_b_g_LSKBTC = float(0.0) 

stepSize_LSKBTC = 0.10000000 

def on_message_LSKUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamlskusdt :
		symbol_a_l_LSKUSDT = data['data']['s'] 
		price_bids_a_l_LSKUSDT = data['data']['b'] 
		qty_bids_a_l_LSKUSDT = data['data']['B'] 
		price_asks_a_l_LSKUSDT = data['data']['a'] 
		qty_asks_a_l_LSKUSDT = data['data']['A'] 

		global symbol_a_g_LSKUSDT 
		global price_bids_a_g_LSKUSDT 
		global qty_bids_a_g_LSKUSDT 
		global price_asks_a_g_LSKUSDT 
		global qty_asks_a_g_LSKUSDT 

		symbol_a_g_LSKUSDT = symbol_a_l_LSKUSDT 
		price_bids_a_g_LSKUSDT = price_bids_a_l_LSKUSDT 
		qty_bids_a_g_LSKUSDT = qty_bids_a_l_LSKUSDT 
		price_asks_a_g_LSKUSDT = price_asks_a_l_LSKUSDT 
		qty_asks_a_g_LSKUSDT = qty_asks_a_l_LSKUSDT 

	if data['stream'] == streamlskbtc :
		data = json.loads(message) 

		symbol_b_l_LSKBTC = data['data']['s'] 
		price_bids_b_l_LSKBTC = data['data']['b'] 
		qty_bids_b_l_LSKBTC = data['data']['B']
		price_asks_b_l_LSKBTC = data['data']['a'] 
		qty_asks_b_l_LSKBTC = data['data']['A'] 

		global symbol_b_g_LSKBTC 
		global price_bids_b_g_LSKBTC 
		global qty_bids_b_g_LSKBTC 
		global price_asks_b_g_LSKBTC 
		global qty_asks_b_g_LSKBTC 

		symbol_b_g_LSKBTC = symbol_b_l_LSKBTC 
		price_bids_b_g_LSKBTC = price_bids_b_l_LSKBTC 
		qty_bids_b_g_LSKBTC = qty_bids_b_l_LSKBTC 
		price_asks_b_g_LSKBTC = price_asks_b_l_LSKBTC 
		qty_asks_b_g_LSKBTC = qty_asks_b_l_LSKBTC 


def loop_LSKUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamlskusdt}/{streamlskbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_LSKUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_LSKUSDT).start()

def loop_LSKUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_LSKUSDT != 0.0 and qty_bids_a_g_LSKUSDT != 0.0 and price_asks_a_g_LSKUSDT != 0.0 and qty_asks_a_g_LSKUSDT != 0.0 and price_bids_b_g_LSKBTC != 0.0 and qty_bids_b_g_LSKBTC != 0.0 and price_asks_b_g_LSKBTC != 0.0 and qty_asks_b_g_LSKBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_LSKBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_LSKBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_LSKUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_LSKUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_LSKBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_LSKBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_LSKUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_LSKUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_LSKBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_LSKBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_LSKUSDT_Trade).start() 

streambntusdt = 'bntusdt@bookTicker'
streambntbtc  = 'bntbtc@bookTicker'

symbol_a_g_BNTUSDT = 'BNTUSDT' 
price_bids_a_g_BNTUSDT = float(0.0) 
qty_bids_a_g_BNTUSDT = float(0.0) 
price_asks_a_g_BNTUSDT = float(0.0) 
qty_asks_a_g_BNTUSDT = float(0.0) 

stepSize_BNTUSDT = 0.10000000 

symbol_b_g_BNTBTC = 'BNTBTC' 
price_bids_b_g_BNTBTC = float(0.0) 
qty_bids_b_g_BNTBTC = float(0.0) 
price_asks_b_g_BNTBTC = float(0.0) 
qty_asks_b_g_BNTBTC = float(0.0) 

stepSize_BNTBTC = 0.10000000 

def on_message_BNTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambntusdt :
		symbol_a_l_BNTUSDT = data['data']['s'] 
		price_bids_a_l_BNTUSDT = data['data']['b'] 
		qty_bids_a_l_BNTUSDT = data['data']['B'] 
		price_asks_a_l_BNTUSDT = data['data']['a'] 
		qty_asks_a_l_BNTUSDT = data['data']['A'] 

		global symbol_a_g_BNTUSDT 
		global price_bids_a_g_BNTUSDT 
		global qty_bids_a_g_BNTUSDT 
		global price_asks_a_g_BNTUSDT 
		global qty_asks_a_g_BNTUSDT 

		symbol_a_g_BNTUSDT = symbol_a_l_BNTUSDT 
		price_bids_a_g_BNTUSDT = price_bids_a_l_BNTUSDT 
		qty_bids_a_g_BNTUSDT = qty_bids_a_l_BNTUSDT 
		price_asks_a_g_BNTUSDT = price_asks_a_l_BNTUSDT 
		qty_asks_a_g_BNTUSDT = qty_asks_a_l_BNTUSDT 

	if data['stream'] == streambntbtc :
		data = json.loads(message) 

		symbol_b_l_BNTBTC = data['data']['s'] 
		price_bids_b_l_BNTBTC = data['data']['b'] 
		qty_bids_b_l_BNTBTC = data['data']['B']
		price_asks_b_l_BNTBTC = data['data']['a'] 
		qty_asks_b_l_BNTBTC = data['data']['A'] 

		global symbol_b_g_BNTBTC 
		global price_bids_b_g_BNTBTC 
		global qty_bids_b_g_BNTBTC 
		global price_asks_b_g_BNTBTC 
		global qty_asks_b_g_BNTBTC 

		symbol_b_g_BNTBTC = symbol_b_l_BNTBTC 
		price_bids_b_g_BNTBTC = price_bids_b_l_BNTBTC 
		qty_bids_b_g_BNTBTC = qty_bids_b_l_BNTBTC 
		price_asks_b_g_BNTBTC = price_asks_b_l_BNTBTC 
		qty_asks_b_g_BNTBTC = qty_asks_b_l_BNTBTC 


def loop_BNTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambntusdt}/{streambntbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BNTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BNTUSDT).start()

def loop_BNTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BNTUSDT != 0.0 and qty_bids_a_g_BNTUSDT != 0.0 and price_asks_a_g_BNTUSDT != 0.0 and qty_asks_a_g_BNTUSDT != 0.0 and price_bids_b_g_BNTBTC != 0.0 and qty_bids_b_g_BNTBTC != 0.0 and price_asks_b_g_BNTBTC != 0.0 and qty_asks_b_g_BNTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BNTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BNTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BNTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BNTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BNTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BNTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BNTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BNTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BNTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BNTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BNTUSDT_Trade).start() 

streamltousdt = 'ltousdt@bookTicker'
streamltobtc  = 'ltobtc@bookTicker'

symbol_a_g_LTOUSDT = 'LTOUSDT' 
price_bids_a_g_LTOUSDT = float(0.0) 
qty_bids_a_g_LTOUSDT = float(0.0) 
price_asks_a_g_LTOUSDT = float(0.0) 
qty_asks_a_g_LTOUSDT = float(0.0) 

stepSize_LTOUSDT = 1.00000000 

symbol_b_g_LTOBTC = 'LTOBTC' 
price_bids_b_g_LTOBTC = float(0.0) 
qty_bids_b_g_LTOBTC = float(0.0) 
price_asks_b_g_LTOBTC = float(0.0) 
qty_asks_b_g_LTOBTC = float(0.0) 

stepSize_LTOBTC = 1.00000000 

def on_message_LTOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamltousdt :
		symbol_a_l_LTOUSDT = data['data']['s'] 
		price_bids_a_l_LTOUSDT = data['data']['b'] 
		qty_bids_a_l_LTOUSDT = data['data']['B'] 
		price_asks_a_l_LTOUSDT = data['data']['a'] 
		qty_asks_a_l_LTOUSDT = data['data']['A'] 

		global symbol_a_g_LTOUSDT 
		global price_bids_a_g_LTOUSDT 
		global qty_bids_a_g_LTOUSDT 
		global price_asks_a_g_LTOUSDT 
		global qty_asks_a_g_LTOUSDT 

		symbol_a_g_LTOUSDT = symbol_a_l_LTOUSDT 
		price_bids_a_g_LTOUSDT = price_bids_a_l_LTOUSDT 
		qty_bids_a_g_LTOUSDT = qty_bids_a_l_LTOUSDT 
		price_asks_a_g_LTOUSDT = price_asks_a_l_LTOUSDT 
		qty_asks_a_g_LTOUSDT = qty_asks_a_l_LTOUSDT 

	if data['stream'] == streamltobtc :
		data = json.loads(message) 

		symbol_b_l_LTOBTC = data['data']['s'] 
		price_bids_b_l_LTOBTC = data['data']['b'] 
		qty_bids_b_l_LTOBTC = data['data']['B']
		price_asks_b_l_LTOBTC = data['data']['a'] 
		qty_asks_b_l_LTOBTC = data['data']['A'] 

		global symbol_b_g_LTOBTC 
		global price_bids_b_g_LTOBTC 
		global qty_bids_b_g_LTOBTC 
		global price_asks_b_g_LTOBTC 
		global qty_asks_b_g_LTOBTC 

		symbol_b_g_LTOBTC = symbol_b_l_LTOBTC 
		price_bids_b_g_LTOBTC = price_bids_b_l_LTOBTC 
		qty_bids_b_g_LTOBTC = qty_bids_b_l_LTOBTC 
		price_asks_b_g_LTOBTC = price_asks_b_l_LTOBTC 
		qty_asks_b_g_LTOBTC = qty_asks_b_l_LTOBTC 


def loop_LTOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamltousdt}/{streamltobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_LTOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_LTOUSDT).start()

def loop_LTOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_LTOUSDT != 0.0 and qty_bids_a_g_LTOUSDT != 0.0 and price_asks_a_g_LTOUSDT != 0.0 and qty_asks_a_g_LTOUSDT != 0.0 and price_bids_b_g_LTOBTC != 0.0 and qty_bids_b_g_LTOBTC != 0.0 and price_asks_b_g_LTOBTC != 0.0 and qty_asks_b_g_LTOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_LTOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_LTOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_LTOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_LTOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_LTOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_LTOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_LTOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_LTOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_LTOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_LTOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_LTOUSDT_Trade).start() 

streamaionusdt = 'aionusdt@bookTicker'
streamaionbtc  = 'aionbtc@bookTicker'

symbol_a_g_AIONUSDT = 'AIONUSDT' 
price_bids_a_g_AIONUSDT = float(0.0) 
qty_bids_a_g_AIONUSDT = float(0.0) 
price_asks_a_g_AIONUSDT = float(0.0) 
qty_asks_a_g_AIONUSDT = float(0.0) 

stepSize_AIONUSDT = 1.00000000 

symbol_b_g_AIONBTC = 'AIONBTC' 
price_bids_b_g_AIONBTC = float(0.0) 
qty_bids_b_g_AIONBTC = float(0.0) 
price_asks_b_g_AIONBTC = float(0.0) 
qty_asks_b_g_AIONBTC = float(0.0) 

stepSize_AIONBTC = 1.00000000 

def on_message_AIONUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamaionusdt :
		symbol_a_l_AIONUSDT = data['data']['s'] 
		price_bids_a_l_AIONUSDT = data['data']['b'] 
		qty_bids_a_l_AIONUSDT = data['data']['B'] 
		price_asks_a_l_AIONUSDT = data['data']['a'] 
		qty_asks_a_l_AIONUSDT = data['data']['A'] 

		global symbol_a_g_AIONUSDT 
		global price_bids_a_g_AIONUSDT 
		global qty_bids_a_g_AIONUSDT 
		global price_asks_a_g_AIONUSDT 
		global qty_asks_a_g_AIONUSDT 

		symbol_a_g_AIONUSDT = symbol_a_l_AIONUSDT 
		price_bids_a_g_AIONUSDT = price_bids_a_l_AIONUSDT 
		qty_bids_a_g_AIONUSDT = qty_bids_a_l_AIONUSDT 
		price_asks_a_g_AIONUSDT = price_asks_a_l_AIONUSDT 
		qty_asks_a_g_AIONUSDT = qty_asks_a_l_AIONUSDT 

	if data['stream'] == streamaionbtc :
		data = json.loads(message) 

		symbol_b_l_AIONBTC = data['data']['s'] 
		price_bids_b_l_AIONBTC = data['data']['b'] 
		qty_bids_b_l_AIONBTC = data['data']['B']
		price_asks_b_l_AIONBTC = data['data']['a'] 
		qty_asks_b_l_AIONBTC = data['data']['A'] 

		global symbol_b_g_AIONBTC 
		global price_bids_b_g_AIONBTC 
		global qty_bids_b_g_AIONBTC 
		global price_asks_b_g_AIONBTC 
		global qty_asks_b_g_AIONBTC 

		symbol_b_g_AIONBTC = symbol_b_l_AIONBTC 
		price_bids_b_g_AIONBTC = price_bids_b_l_AIONBTC 
		qty_bids_b_g_AIONBTC = qty_bids_b_l_AIONBTC 
		price_asks_b_g_AIONBTC = price_asks_b_l_AIONBTC 
		qty_asks_b_g_AIONBTC = qty_asks_b_l_AIONBTC 


def loop_AIONUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamaionusdt}/{streamaionbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_AIONUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_AIONUSDT).start()

def loop_AIONUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_AIONUSDT != 0.0 and qty_bids_a_g_AIONUSDT != 0.0 and price_asks_a_g_AIONUSDT != 0.0 and qty_asks_a_g_AIONUSDT != 0.0 and price_bids_b_g_AIONBTC != 0.0 and qty_bids_b_g_AIONBTC != 0.0 and price_asks_b_g_AIONBTC != 0.0 and qty_asks_b_g_AIONBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_AIONBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_AIONBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_AIONUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_AIONUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_AIONBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_AIONBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_AIONUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_AIONUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_AIONBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_AIONBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_AIONUSDT_Trade).start() 

streamcotiusdt = 'cotiusdt@bookTicker'
streamcotibtc  = 'cotibtc@bookTicker'

symbol_a_g_COTIUSDT = 'COTIUSDT' 
price_bids_a_g_COTIUSDT = float(0.0) 
qty_bids_a_g_COTIUSDT = float(0.0) 
price_asks_a_g_COTIUSDT = float(0.0) 
qty_asks_a_g_COTIUSDT = float(0.0) 

stepSize_COTIUSDT = 1.00000000 

symbol_b_g_COTIBTC = 'COTIBTC' 
price_bids_b_g_COTIBTC = float(0.0) 
qty_bids_b_g_COTIBTC = float(0.0) 
price_asks_b_g_COTIBTC = float(0.0) 
qty_asks_b_g_COTIBTC = float(0.0) 

stepSize_COTIBTC = 1.00000000 

def on_message_COTIUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamcotiusdt :
		symbol_a_l_COTIUSDT = data['data']['s'] 
		price_bids_a_l_COTIUSDT = data['data']['b'] 
		qty_bids_a_l_COTIUSDT = data['data']['B'] 
		price_asks_a_l_COTIUSDT = data['data']['a'] 
		qty_asks_a_l_COTIUSDT = data['data']['A'] 

		global symbol_a_g_COTIUSDT 
		global price_bids_a_g_COTIUSDT 
		global qty_bids_a_g_COTIUSDT 
		global price_asks_a_g_COTIUSDT 
		global qty_asks_a_g_COTIUSDT 

		symbol_a_g_COTIUSDT = symbol_a_l_COTIUSDT 
		price_bids_a_g_COTIUSDT = price_bids_a_l_COTIUSDT 
		qty_bids_a_g_COTIUSDT = qty_bids_a_l_COTIUSDT 
		price_asks_a_g_COTIUSDT = price_asks_a_l_COTIUSDT 
		qty_asks_a_g_COTIUSDT = qty_asks_a_l_COTIUSDT 

	if data['stream'] == streamcotibtc :
		data = json.loads(message) 

		symbol_b_l_COTIBTC = data['data']['s'] 
		price_bids_b_l_COTIBTC = data['data']['b'] 
		qty_bids_b_l_COTIBTC = data['data']['B']
		price_asks_b_l_COTIBTC = data['data']['a'] 
		qty_asks_b_l_COTIBTC = data['data']['A'] 

		global symbol_b_g_COTIBTC 
		global price_bids_b_g_COTIBTC 
		global qty_bids_b_g_COTIBTC 
		global price_asks_b_g_COTIBTC 
		global qty_asks_b_g_COTIBTC 

		symbol_b_g_COTIBTC = symbol_b_l_COTIBTC 
		price_bids_b_g_COTIBTC = price_bids_b_l_COTIBTC 
		qty_bids_b_g_COTIBTC = qty_bids_b_l_COTIBTC 
		price_asks_b_g_COTIBTC = price_asks_b_l_COTIBTC 
		qty_asks_b_g_COTIBTC = qty_asks_b_l_COTIBTC 


def loop_COTIUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamcotiusdt}/{streamcotibtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_COTIUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_COTIUSDT).start()

def loop_COTIUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_COTIUSDT != 0.0 and qty_bids_a_g_COTIUSDT != 0.0 and price_asks_a_g_COTIUSDT != 0.0 and qty_asks_a_g_COTIUSDT != 0.0 and price_bids_b_g_COTIBTC != 0.0 and qty_bids_b_g_COTIBTC != 0.0 and price_asks_b_g_COTIBTC != 0.0 and qty_asks_b_g_COTIBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_COTIBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_COTIBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_COTIUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_COTIUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_COTIBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_COTIBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_COTIUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_COTIUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_COTIBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_COTIBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_COTIUSDT_Trade).start() 

streamstptusdt = 'stptusdt@bookTicker'
streamstptbtc  = 'stptbtc@bookTicker'

symbol_a_g_STPTUSDT = 'STPTUSDT' 
price_bids_a_g_STPTUSDT = float(0.0) 
qty_bids_a_g_STPTUSDT = float(0.0) 
price_asks_a_g_STPTUSDT = float(0.0) 
qty_asks_a_g_STPTUSDT = float(0.0) 

stepSize_STPTUSDT = 0.10000000 

symbol_b_g_STPTBTC = 'STPTBTC' 
price_bids_b_g_STPTBTC = float(0.0) 
qty_bids_b_g_STPTBTC = float(0.0) 
price_asks_b_g_STPTBTC = float(0.0) 
qty_asks_b_g_STPTBTC = float(0.0) 

stepSize_STPTBTC = 1.00000000 

def on_message_STPTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamstptusdt :
		symbol_a_l_STPTUSDT = data['data']['s'] 
		price_bids_a_l_STPTUSDT = data['data']['b'] 
		qty_bids_a_l_STPTUSDT = data['data']['B'] 
		price_asks_a_l_STPTUSDT = data['data']['a'] 
		qty_asks_a_l_STPTUSDT = data['data']['A'] 

		global symbol_a_g_STPTUSDT 
		global price_bids_a_g_STPTUSDT 
		global qty_bids_a_g_STPTUSDT 
		global price_asks_a_g_STPTUSDT 
		global qty_asks_a_g_STPTUSDT 

		symbol_a_g_STPTUSDT = symbol_a_l_STPTUSDT 
		price_bids_a_g_STPTUSDT = price_bids_a_l_STPTUSDT 
		qty_bids_a_g_STPTUSDT = qty_bids_a_l_STPTUSDT 
		price_asks_a_g_STPTUSDT = price_asks_a_l_STPTUSDT 
		qty_asks_a_g_STPTUSDT = qty_asks_a_l_STPTUSDT 

	if data['stream'] == streamstptbtc :
		data = json.loads(message) 

		symbol_b_l_STPTBTC = data['data']['s'] 
		price_bids_b_l_STPTBTC = data['data']['b'] 
		qty_bids_b_l_STPTBTC = data['data']['B']
		price_asks_b_l_STPTBTC = data['data']['a'] 
		qty_asks_b_l_STPTBTC = data['data']['A'] 

		global symbol_b_g_STPTBTC 
		global price_bids_b_g_STPTBTC 
		global qty_bids_b_g_STPTBTC 
		global price_asks_b_g_STPTBTC 
		global qty_asks_b_g_STPTBTC 

		symbol_b_g_STPTBTC = symbol_b_l_STPTBTC 
		price_bids_b_g_STPTBTC = price_bids_b_l_STPTBTC 
		qty_bids_b_g_STPTBTC = qty_bids_b_l_STPTBTC 
		price_asks_b_g_STPTBTC = price_asks_b_l_STPTBTC 
		qty_asks_b_g_STPTBTC = qty_asks_b_l_STPTBTC 


def loop_STPTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamstptusdt}/{streamstptbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_STPTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_STPTUSDT).start()

def loop_STPTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_STPTUSDT != 0.0 and qty_bids_a_g_STPTUSDT != 0.0 and price_asks_a_g_STPTUSDT != 0.0 and qty_asks_a_g_STPTUSDT != 0.0 and price_bids_b_g_STPTBTC != 0.0 and qty_bids_b_g_STPTBTC != 0.0 and price_asks_b_g_STPTBTC != 0.0 and qty_asks_b_g_STPTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_STPTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_STPTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_STPTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_STPTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_STPTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_STPTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_STPTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_STPTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_STPTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_STPTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_STPTUSDT_Trade).start() 

streamwtcusdt = 'wtcusdt@bookTicker'
streamwtcbtc  = 'wtcbtc@bookTicker'

symbol_a_g_WTCUSDT = 'WTCUSDT' 
price_bids_a_g_WTCUSDT = float(0.0) 
qty_bids_a_g_WTCUSDT = float(0.0) 
price_asks_a_g_WTCUSDT = float(0.0) 
qty_asks_a_g_WTCUSDT = float(0.0) 

stepSize_WTCUSDT = 1.00000000 

symbol_b_g_WTCBTC = 'WTCBTC' 
price_bids_b_g_WTCBTC = float(0.0) 
qty_bids_b_g_WTCBTC = float(0.0) 
price_asks_b_g_WTCBTC = float(0.0) 
qty_asks_b_g_WTCBTC = float(0.0) 

stepSize_WTCBTC = 1.00000000 

def on_message_WTCUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamwtcusdt :
		symbol_a_l_WTCUSDT = data['data']['s'] 
		price_bids_a_l_WTCUSDT = data['data']['b'] 
		qty_bids_a_l_WTCUSDT = data['data']['B'] 
		price_asks_a_l_WTCUSDT = data['data']['a'] 
		qty_asks_a_l_WTCUSDT = data['data']['A'] 

		global symbol_a_g_WTCUSDT 
		global price_bids_a_g_WTCUSDT 
		global qty_bids_a_g_WTCUSDT 
		global price_asks_a_g_WTCUSDT 
		global qty_asks_a_g_WTCUSDT 

		symbol_a_g_WTCUSDT = symbol_a_l_WTCUSDT 
		price_bids_a_g_WTCUSDT = price_bids_a_l_WTCUSDT 
		qty_bids_a_g_WTCUSDT = qty_bids_a_l_WTCUSDT 
		price_asks_a_g_WTCUSDT = price_asks_a_l_WTCUSDT 
		qty_asks_a_g_WTCUSDT = qty_asks_a_l_WTCUSDT 

	if data['stream'] == streamwtcbtc :
		data = json.loads(message) 

		symbol_b_l_WTCBTC = data['data']['s'] 
		price_bids_b_l_WTCBTC = data['data']['b'] 
		qty_bids_b_l_WTCBTC = data['data']['B']
		price_asks_b_l_WTCBTC = data['data']['a'] 
		qty_asks_b_l_WTCBTC = data['data']['A'] 

		global symbol_b_g_WTCBTC 
		global price_bids_b_g_WTCBTC 
		global qty_bids_b_g_WTCBTC 
		global price_asks_b_g_WTCBTC 
		global qty_asks_b_g_WTCBTC 

		symbol_b_g_WTCBTC = symbol_b_l_WTCBTC 
		price_bids_b_g_WTCBTC = price_bids_b_l_WTCBTC 
		qty_bids_b_g_WTCBTC = qty_bids_b_l_WTCBTC 
		price_asks_b_g_WTCBTC = price_asks_b_l_WTCBTC 
		qty_asks_b_g_WTCBTC = qty_asks_b_l_WTCBTC 


def loop_WTCUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamwtcusdt}/{streamwtcbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_WTCUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_WTCUSDT).start()

def loop_WTCUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_WTCUSDT != 0.0 and qty_bids_a_g_WTCUSDT != 0.0 and price_asks_a_g_WTCUSDT != 0.0 and qty_asks_a_g_WTCUSDT != 0.0 and price_bids_b_g_WTCBTC != 0.0 and qty_bids_b_g_WTCBTC != 0.0 and price_asks_b_g_WTCBTC != 0.0 and qty_asks_b_g_WTCBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_WTCBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_WTCBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_WTCUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_WTCUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_WTCBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_WTCBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_WTCUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_WTCUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_WTCBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_WTCBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_WTCUSDT_Trade).start() 

streamdatausdt = 'datausdt@bookTicker'
streamdatabtc  = 'databtc@bookTicker'

symbol_a_g_DATAUSDT = 'DATAUSDT' 
price_bids_a_g_DATAUSDT = float(0.0) 
qty_bids_a_g_DATAUSDT = float(0.0) 
price_asks_a_g_DATAUSDT = float(0.0) 
qty_asks_a_g_DATAUSDT = float(0.0) 

stepSize_DATAUSDT = 0.10000000 

symbol_b_g_DATABTC = 'DATABTC' 
price_bids_b_g_DATABTC = float(0.0) 
qty_bids_b_g_DATABTC = float(0.0) 
price_asks_b_g_DATABTC = float(0.0) 
qty_asks_b_g_DATABTC = float(0.0) 

stepSize_DATABTC = 1.00000000 

def on_message_DATAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamdatausdt :
		symbol_a_l_DATAUSDT = data['data']['s'] 
		price_bids_a_l_DATAUSDT = data['data']['b'] 
		qty_bids_a_l_DATAUSDT = data['data']['B'] 
		price_asks_a_l_DATAUSDT = data['data']['a'] 
		qty_asks_a_l_DATAUSDT = data['data']['A'] 

		global symbol_a_g_DATAUSDT 
		global price_bids_a_g_DATAUSDT 
		global qty_bids_a_g_DATAUSDT 
		global price_asks_a_g_DATAUSDT 
		global qty_asks_a_g_DATAUSDT 

		symbol_a_g_DATAUSDT = symbol_a_l_DATAUSDT 
		price_bids_a_g_DATAUSDT = price_bids_a_l_DATAUSDT 
		qty_bids_a_g_DATAUSDT = qty_bids_a_l_DATAUSDT 
		price_asks_a_g_DATAUSDT = price_asks_a_l_DATAUSDT 
		qty_asks_a_g_DATAUSDT = qty_asks_a_l_DATAUSDT 

	if data['stream'] == streamdatabtc :
		data = json.loads(message) 

		symbol_b_l_DATABTC = data['data']['s'] 
		price_bids_b_l_DATABTC = data['data']['b'] 
		qty_bids_b_l_DATABTC = data['data']['B']
		price_asks_b_l_DATABTC = data['data']['a'] 
		qty_asks_b_l_DATABTC = data['data']['A'] 

		global symbol_b_g_DATABTC 
		global price_bids_b_g_DATABTC 
		global qty_bids_b_g_DATABTC 
		global price_asks_b_g_DATABTC 
		global qty_asks_b_g_DATABTC 

		symbol_b_g_DATABTC = symbol_b_l_DATABTC 
		price_bids_b_g_DATABTC = price_bids_b_l_DATABTC 
		qty_bids_b_g_DATABTC = qty_bids_b_l_DATABTC 
		price_asks_b_g_DATABTC = price_asks_b_l_DATABTC 
		qty_asks_b_g_DATABTC = qty_asks_b_l_DATABTC 


def loop_DATAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamdatausdt}/{streamdatabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DATAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DATAUSDT).start()

def loop_DATAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DATAUSDT != 0.0 and qty_bids_a_g_DATAUSDT != 0.0 and price_asks_a_g_DATAUSDT != 0.0 and qty_asks_a_g_DATAUSDT != 0.0 and price_bids_b_g_DATABTC != 0.0 and qty_bids_b_g_DATABTC != 0.0 and price_asks_b_g_DATABTC != 0.0 and qty_asks_b_g_DATABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DATABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DATABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DATAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DATAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DATABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DATABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DATAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DATAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DATABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DATABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DATAUSDT_Trade).start() 

streamsolusdt = 'solusdt@bookTicker'
streamsolbtc  = 'solbtc@bookTicker'

symbol_a_g_SOLUSDT = 'SOLUSDT' 
price_bids_a_g_SOLUSDT = float(0.0) 
qty_bids_a_g_SOLUSDT = float(0.0) 
price_asks_a_g_SOLUSDT = float(0.0) 
qty_asks_a_g_SOLUSDT = float(0.0) 

stepSize_SOLUSDT = 0.01000000 

symbol_b_g_SOLBTC = 'SOLBTC' 
price_bids_b_g_SOLBTC = float(0.0) 
qty_bids_b_g_SOLBTC = float(0.0) 
price_asks_b_g_SOLBTC = float(0.0) 
qty_asks_b_g_SOLBTC = float(0.0) 

stepSize_SOLBTC = 0.01000000 

def on_message_SOLUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamsolusdt :
		symbol_a_l_SOLUSDT = data['data']['s'] 
		price_bids_a_l_SOLUSDT = data['data']['b'] 
		qty_bids_a_l_SOLUSDT = data['data']['B'] 
		price_asks_a_l_SOLUSDT = data['data']['a'] 
		qty_asks_a_l_SOLUSDT = data['data']['A'] 

		global symbol_a_g_SOLUSDT 
		global price_bids_a_g_SOLUSDT 
		global qty_bids_a_g_SOLUSDT 
		global price_asks_a_g_SOLUSDT 
		global qty_asks_a_g_SOLUSDT 

		symbol_a_g_SOLUSDT = symbol_a_l_SOLUSDT 
		price_bids_a_g_SOLUSDT = price_bids_a_l_SOLUSDT 
		qty_bids_a_g_SOLUSDT = qty_bids_a_l_SOLUSDT 
		price_asks_a_g_SOLUSDT = price_asks_a_l_SOLUSDT 
		qty_asks_a_g_SOLUSDT = qty_asks_a_l_SOLUSDT 

	if data['stream'] == streamsolbtc :
		data = json.loads(message) 

		symbol_b_l_SOLBTC = data['data']['s'] 
		price_bids_b_l_SOLBTC = data['data']['b'] 
		qty_bids_b_l_SOLBTC = data['data']['B']
		price_asks_b_l_SOLBTC = data['data']['a'] 
		qty_asks_b_l_SOLBTC = data['data']['A'] 

		global symbol_b_g_SOLBTC 
		global price_bids_b_g_SOLBTC 
		global qty_bids_b_g_SOLBTC 
		global price_asks_b_g_SOLBTC 
		global qty_asks_b_g_SOLBTC 

		symbol_b_g_SOLBTC = symbol_b_l_SOLBTC 
		price_bids_b_g_SOLBTC = price_bids_b_l_SOLBTC 
		qty_bids_b_g_SOLBTC = qty_bids_b_l_SOLBTC 
		price_asks_b_g_SOLBTC = price_asks_b_l_SOLBTC 
		qty_asks_b_g_SOLBTC = qty_asks_b_l_SOLBTC 


def loop_SOLUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamsolusdt}/{streamsolbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_SOLUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_SOLUSDT).start()

def loop_SOLUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_SOLUSDT != 0.0 and qty_bids_a_g_SOLUSDT != 0.0 and price_asks_a_g_SOLUSDT != 0.0 and qty_asks_a_g_SOLUSDT != 0.0 and price_bids_b_g_SOLBTC != 0.0 and qty_bids_b_g_SOLBTC != 0.0 and price_asks_b_g_SOLBTC != 0.0 and qty_asks_b_g_SOLBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_SOLBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_SOLBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_SOLUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_SOLUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_SOLBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_SOLBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_SOLUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_SOLUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_SOLBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_SOLBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_SOLUSDT_Trade).start() 

streamctsiusdt = 'ctsiusdt@bookTicker'
streamctsibtc  = 'ctsibtc@bookTicker'

symbol_a_g_CTSIUSDT = 'CTSIUSDT' 
price_bids_a_g_CTSIUSDT = float(0.0) 
qty_bids_a_g_CTSIUSDT = float(0.0) 
price_asks_a_g_CTSIUSDT = float(0.0) 
qty_asks_a_g_CTSIUSDT = float(0.0) 

stepSize_CTSIUSDT = 1.00000000 

symbol_b_g_CTSIBTC = 'CTSIBTC' 
price_bids_b_g_CTSIBTC = float(0.0) 
qty_bids_b_g_CTSIBTC = float(0.0) 
price_asks_b_g_CTSIBTC = float(0.0) 
qty_asks_b_g_CTSIBTC = float(0.0) 

stepSize_CTSIBTC = 1.00000000 

def on_message_CTSIUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamctsiusdt :
		symbol_a_l_CTSIUSDT = data['data']['s'] 
		price_bids_a_l_CTSIUSDT = data['data']['b'] 
		qty_bids_a_l_CTSIUSDT = data['data']['B'] 
		price_asks_a_l_CTSIUSDT = data['data']['a'] 
		qty_asks_a_l_CTSIUSDT = data['data']['A'] 

		global symbol_a_g_CTSIUSDT 
		global price_bids_a_g_CTSIUSDT 
		global qty_bids_a_g_CTSIUSDT 
		global price_asks_a_g_CTSIUSDT 
		global qty_asks_a_g_CTSIUSDT 

		symbol_a_g_CTSIUSDT = symbol_a_l_CTSIUSDT 
		price_bids_a_g_CTSIUSDT = price_bids_a_l_CTSIUSDT 
		qty_bids_a_g_CTSIUSDT = qty_bids_a_l_CTSIUSDT 
		price_asks_a_g_CTSIUSDT = price_asks_a_l_CTSIUSDT 
		qty_asks_a_g_CTSIUSDT = qty_asks_a_l_CTSIUSDT 

	if data['stream'] == streamctsibtc :
		data = json.loads(message) 

		symbol_b_l_CTSIBTC = data['data']['s'] 
		price_bids_b_l_CTSIBTC = data['data']['b'] 
		qty_bids_b_l_CTSIBTC = data['data']['B']
		price_asks_b_l_CTSIBTC = data['data']['a'] 
		qty_asks_b_l_CTSIBTC = data['data']['A'] 

		global symbol_b_g_CTSIBTC 
		global price_bids_b_g_CTSIBTC 
		global qty_bids_b_g_CTSIBTC 
		global price_asks_b_g_CTSIBTC 
		global qty_asks_b_g_CTSIBTC 

		symbol_b_g_CTSIBTC = symbol_b_l_CTSIBTC 
		price_bids_b_g_CTSIBTC = price_bids_b_l_CTSIBTC 
		qty_bids_b_g_CTSIBTC = qty_bids_b_l_CTSIBTC 
		price_asks_b_g_CTSIBTC = price_asks_b_l_CTSIBTC 
		qty_asks_b_g_CTSIBTC = qty_asks_b_l_CTSIBTC 


def loop_CTSIUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamctsiusdt}/{streamctsibtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CTSIUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CTSIUSDT).start()

def loop_CTSIUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CTSIUSDT != 0.0 and qty_bids_a_g_CTSIUSDT != 0.0 and price_asks_a_g_CTSIUSDT != 0.0 and qty_asks_a_g_CTSIUSDT != 0.0 and price_bids_b_g_CTSIBTC != 0.0 and qty_bids_b_g_CTSIBTC != 0.0 and price_asks_b_g_CTSIBTC != 0.0 and qty_asks_b_g_CTSIBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CTSIBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CTSIBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CTSIUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CTSIUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CTSIBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CTSIBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CTSIUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CTSIUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CTSIBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CTSIBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CTSIUSDT_Trade).start() 

streamhiveusdt = 'hiveusdt@bookTicker'
streamhivebtc  = 'hivebtc@bookTicker'

symbol_a_g_HIVEUSDT = 'HIVEUSDT' 
price_bids_a_g_HIVEUSDT = float(0.0) 
qty_bids_a_g_HIVEUSDT = float(0.0) 
price_asks_a_g_HIVEUSDT = float(0.0) 
qty_asks_a_g_HIVEUSDT = float(0.0) 

stepSize_HIVEUSDT = 1.00000000 

symbol_b_g_HIVEBTC = 'HIVEBTC' 
price_bids_b_g_HIVEBTC = float(0.0) 
qty_bids_b_g_HIVEBTC = float(0.0) 
price_asks_b_g_HIVEBTC = float(0.0) 
qty_asks_b_g_HIVEBTC = float(0.0) 

stepSize_HIVEBTC = 1.00000000 

def on_message_HIVEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamhiveusdt :
		symbol_a_l_HIVEUSDT = data['data']['s'] 
		price_bids_a_l_HIVEUSDT = data['data']['b'] 
		qty_bids_a_l_HIVEUSDT = data['data']['B'] 
		price_asks_a_l_HIVEUSDT = data['data']['a'] 
		qty_asks_a_l_HIVEUSDT = data['data']['A'] 

		global symbol_a_g_HIVEUSDT 
		global price_bids_a_g_HIVEUSDT 
		global qty_bids_a_g_HIVEUSDT 
		global price_asks_a_g_HIVEUSDT 
		global qty_asks_a_g_HIVEUSDT 

		symbol_a_g_HIVEUSDT = symbol_a_l_HIVEUSDT 
		price_bids_a_g_HIVEUSDT = price_bids_a_l_HIVEUSDT 
		qty_bids_a_g_HIVEUSDT = qty_bids_a_l_HIVEUSDT 
		price_asks_a_g_HIVEUSDT = price_asks_a_l_HIVEUSDT 
		qty_asks_a_g_HIVEUSDT = qty_asks_a_l_HIVEUSDT 

	if data['stream'] == streamhivebtc :
		data = json.loads(message) 

		symbol_b_l_HIVEBTC = data['data']['s'] 
		price_bids_b_l_HIVEBTC = data['data']['b'] 
		qty_bids_b_l_HIVEBTC = data['data']['B']
		price_asks_b_l_HIVEBTC = data['data']['a'] 
		qty_asks_b_l_HIVEBTC = data['data']['A'] 

		global symbol_b_g_HIVEBTC 
		global price_bids_b_g_HIVEBTC 
		global qty_bids_b_g_HIVEBTC 
		global price_asks_b_g_HIVEBTC 
		global qty_asks_b_g_HIVEBTC 

		symbol_b_g_HIVEBTC = symbol_b_l_HIVEBTC 
		price_bids_b_g_HIVEBTC = price_bids_b_l_HIVEBTC 
		qty_bids_b_g_HIVEBTC = qty_bids_b_l_HIVEBTC 
		price_asks_b_g_HIVEBTC = price_asks_b_l_HIVEBTC 
		qty_asks_b_g_HIVEBTC = qty_asks_b_l_HIVEBTC 


def loop_HIVEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamhiveusdt}/{streamhivebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_HIVEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_HIVEUSDT).start()

def loop_HIVEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_HIVEUSDT != 0.0 and qty_bids_a_g_HIVEUSDT != 0.0 and price_asks_a_g_HIVEUSDT != 0.0 and qty_asks_a_g_HIVEUSDT != 0.0 and price_bids_b_g_HIVEBTC != 0.0 and qty_bids_b_g_HIVEBTC != 0.0 and price_asks_b_g_HIVEBTC != 0.0 and qty_asks_b_g_HIVEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_HIVEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_HIVEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_HIVEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_HIVEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_HIVEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_HIVEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_HIVEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_HIVEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_HIVEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_HIVEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_HIVEUSDT_Trade).start() 

streamchrusdt = 'chrusdt@bookTicker'
streamchrbtc  = 'chrbtc@bookTicker'

symbol_a_g_CHRUSDT = 'CHRUSDT' 
price_bids_a_g_CHRUSDT = float(0.0) 
qty_bids_a_g_CHRUSDT = float(0.0) 
price_asks_a_g_CHRUSDT = float(0.0) 
qty_asks_a_g_CHRUSDT = float(0.0) 

stepSize_CHRUSDT = 1.00000000 

symbol_b_g_CHRBTC = 'CHRBTC' 
price_bids_b_g_CHRBTC = float(0.0) 
qty_bids_b_g_CHRBTC = float(0.0) 
price_asks_b_g_CHRBTC = float(0.0) 
qty_asks_b_g_CHRBTC = float(0.0) 

stepSize_CHRBTC = 1.00000000 

def on_message_CHRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamchrusdt :
		symbol_a_l_CHRUSDT = data['data']['s'] 
		price_bids_a_l_CHRUSDT = data['data']['b'] 
		qty_bids_a_l_CHRUSDT = data['data']['B'] 
		price_asks_a_l_CHRUSDT = data['data']['a'] 
		qty_asks_a_l_CHRUSDT = data['data']['A'] 

		global symbol_a_g_CHRUSDT 
		global price_bids_a_g_CHRUSDT 
		global qty_bids_a_g_CHRUSDT 
		global price_asks_a_g_CHRUSDT 
		global qty_asks_a_g_CHRUSDT 

		symbol_a_g_CHRUSDT = symbol_a_l_CHRUSDT 
		price_bids_a_g_CHRUSDT = price_bids_a_l_CHRUSDT 
		qty_bids_a_g_CHRUSDT = qty_bids_a_l_CHRUSDT 
		price_asks_a_g_CHRUSDT = price_asks_a_l_CHRUSDT 
		qty_asks_a_g_CHRUSDT = qty_asks_a_l_CHRUSDT 

	if data['stream'] == streamchrbtc :
		data = json.loads(message) 

		symbol_b_l_CHRBTC = data['data']['s'] 
		price_bids_b_l_CHRBTC = data['data']['b'] 
		qty_bids_b_l_CHRBTC = data['data']['B']
		price_asks_b_l_CHRBTC = data['data']['a'] 
		qty_asks_b_l_CHRBTC = data['data']['A'] 

		global symbol_b_g_CHRBTC 
		global price_bids_b_g_CHRBTC 
		global qty_bids_b_g_CHRBTC 
		global price_asks_b_g_CHRBTC 
		global qty_asks_b_g_CHRBTC 

		symbol_b_g_CHRBTC = symbol_b_l_CHRBTC 
		price_bids_b_g_CHRBTC = price_bids_b_l_CHRBTC 
		qty_bids_b_g_CHRBTC = qty_bids_b_l_CHRBTC 
		price_asks_b_g_CHRBTC = price_asks_b_l_CHRBTC 
		qty_asks_b_g_CHRBTC = qty_asks_b_l_CHRBTC 


def loop_CHRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamchrusdt}/{streamchrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CHRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CHRUSDT).start()

def loop_CHRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CHRUSDT != 0.0 and qty_bids_a_g_CHRUSDT != 0.0 and price_asks_a_g_CHRUSDT != 0.0 and qty_asks_a_g_CHRUSDT != 0.0 and price_bids_b_g_CHRBTC != 0.0 and qty_bids_b_g_CHRBTC != 0.0 and price_asks_b_g_CHRBTC != 0.0 and qty_asks_b_g_CHRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CHRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CHRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CHRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CHRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CHRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CHRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CHRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CHRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CHRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CHRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CHRUSDT_Trade).start() 

streamardrusdt = 'ardrusdt@bookTicker'
streamardrbtc  = 'ardrbtc@bookTicker'

symbol_a_g_ARDRUSDT = 'ARDRUSDT' 
price_bids_a_g_ARDRUSDT = float(0.0) 
qty_bids_a_g_ARDRUSDT = float(0.0) 
price_asks_a_g_ARDRUSDT = float(0.0) 
qty_asks_a_g_ARDRUSDT = float(0.0) 

stepSize_ARDRUSDT = 1.00000000 

symbol_b_g_ARDRBTC = 'ARDRBTC' 
price_bids_b_g_ARDRBTC = float(0.0) 
qty_bids_b_g_ARDRBTC = float(0.0) 
price_asks_b_g_ARDRBTC = float(0.0) 
qty_asks_b_g_ARDRBTC = float(0.0) 

stepSize_ARDRBTC = 1.00000000 

def on_message_ARDRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamardrusdt :
		symbol_a_l_ARDRUSDT = data['data']['s'] 
		price_bids_a_l_ARDRUSDT = data['data']['b'] 
		qty_bids_a_l_ARDRUSDT = data['data']['B'] 
		price_asks_a_l_ARDRUSDT = data['data']['a'] 
		qty_asks_a_l_ARDRUSDT = data['data']['A'] 

		global symbol_a_g_ARDRUSDT 
		global price_bids_a_g_ARDRUSDT 
		global qty_bids_a_g_ARDRUSDT 
		global price_asks_a_g_ARDRUSDT 
		global qty_asks_a_g_ARDRUSDT 

		symbol_a_g_ARDRUSDT = symbol_a_l_ARDRUSDT 
		price_bids_a_g_ARDRUSDT = price_bids_a_l_ARDRUSDT 
		qty_bids_a_g_ARDRUSDT = qty_bids_a_l_ARDRUSDT 
		price_asks_a_g_ARDRUSDT = price_asks_a_l_ARDRUSDT 
		qty_asks_a_g_ARDRUSDT = qty_asks_a_l_ARDRUSDT 

	if data['stream'] == streamardrbtc :
		data = json.loads(message) 

		symbol_b_l_ARDRBTC = data['data']['s'] 
		price_bids_b_l_ARDRBTC = data['data']['b'] 
		qty_bids_b_l_ARDRBTC = data['data']['B']
		price_asks_b_l_ARDRBTC = data['data']['a'] 
		qty_asks_b_l_ARDRBTC = data['data']['A'] 

		global symbol_b_g_ARDRBTC 
		global price_bids_b_g_ARDRBTC 
		global qty_bids_b_g_ARDRBTC 
		global price_asks_b_g_ARDRBTC 
		global qty_asks_b_g_ARDRBTC 

		symbol_b_g_ARDRBTC = symbol_b_l_ARDRBTC 
		price_bids_b_g_ARDRBTC = price_bids_b_l_ARDRBTC 
		qty_bids_b_g_ARDRBTC = qty_bids_b_l_ARDRBTC 
		price_asks_b_g_ARDRBTC = price_asks_b_l_ARDRBTC 
		qty_asks_b_g_ARDRBTC = qty_asks_b_l_ARDRBTC 


def loop_ARDRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamardrusdt}/{streamardrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ARDRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ARDRUSDT).start()

def loop_ARDRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ARDRUSDT != 0.0 and qty_bids_a_g_ARDRUSDT != 0.0 and price_asks_a_g_ARDRUSDT != 0.0 and qty_asks_a_g_ARDRUSDT != 0.0 and price_bids_b_g_ARDRBTC != 0.0 and qty_bids_b_g_ARDRBTC != 0.0 and price_asks_b_g_ARDRBTC != 0.0 and qty_asks_b_g_ARDRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ARDRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ARDRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ARDRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ARDRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ARDRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ARDRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ARDRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ARDRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ARDRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ARDRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ARDRUSDT_Trade).start() 

streammdtusdt = 'mdtusdt@bookTicker'
streammdtbtc  = 'mdtbtc@bookTicker'

symbol_a_g_MDTUSDT = 'MDTUSDT' 
price_bids_a_g_MDTUSDT = float(0.0) 
qty_bids_a_g_MDTUSDT = float(0.0) 
price_asks_a_g_MDTUSDT = float(0.0) 
qty_asks_a_g_MDTUSDT = float(0.0) 

stepSize_MDTUSDT = 0.10000000 

symbol_b_g_MDTBTC = 'MDTBTC' 
price_bids_b_g_MDTBTC = float(0.0) 
qty_bids_b_g_MDTBTC = float(0.0) 
price_asks_b_g_MDTBTC = float(0.0) 
qty_asks_b_g_MDTBTC = float(0.0) 

stepSize_MDTBTC = 1.00000000 

def on_message_MDTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streammdtusdt :
		symbol_a_l_MDTUSDT = data['data']['s'] 
		price_bids_a_l_MDTUSDT = data['data']['b'] 
		qty_bids_a_l_MDTUSDT = data['data']['B'] 
		price_asks_a_l_MDTUSDT = data['data']['a'] 
		qty_asks_a_l_MDTUSDT = data['data']['A'] 

		global symbol_a_g_MDTUSDT 
		global price_bids_a_g_MDTUSDT 
		global qty_bids_a_g_MDTUSDT 
		global price_asks_a_g_MDTUSDT 
		global qty_asks_a_g_MDTUSDT 

		symbol_a_g_MDTUSDT = symbol_a_l_MDTUSDT 
		price_bids_a_g_MDTUSDT = price_bids_a_l_MDTUSDT 
		qty_bids_a_g_MDTUSDT = qty_bids_a_l_MDTUSDT 
		price_asks_a_g_MDTUSDT = price_asks_a_l_MDTUSDT 
		qty_asks_a_g_MDTUSDT = qty_asks_a_l_MDTUSDT 

	if data['stream'] == streammdtbtc :
		data = json.loads(message) 

		symbol_b_l_MDTBTC = data['data']['s'] 
		price_bids_b_l_MDTBTC = data['data']['b'] 
		qty_bids_b_l_MDTBTC = data['data']['B']
		price_asks_b_l_MDTBTC = data['data']['a'] 
		qty_asks_b_l_MDTBTC = data['data']['A'] 

		global symbol_b_g_MDTBTC 
		global price_bids_b_g_MDTBTC 
		global qty_bids_b_g_MDTBTC 
		global price_asks_b_g_MDTBTC 
		global qty_asks_b_g_MDTBTC 

		symbol_b_g_MDTBTC = symbol_b_l_MDTBTC 
		price_bids_b_g_MDTBTC = price_bids_b_l_MDTBTC 
		qty_bids_b_g_MDTBTC = qty_bids_b_l_MDTBTC 
		price_asks_b_g_MDTBTC = price_asks_b_l_MDTBTC 
		qty_asks_b_g_MDTBTC = qty_asks_b_l_MDTBTC 


def loop_MDTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streammdtusdt}/{streammdtbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_MDTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_MDTUSDT).start()

def loop_MDTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_MDTUSDT != 0.0 and qty_bids_a_g_MDTUSDT != 0.0 and price_asks_a_g_MDTUSDT != 0.0 and qty_asks_a_g_MDTUSDT != 0.0 and price_bids_b_g_MDTBTC != 0.0 and qty_bids_b_g_MDTBTC != 0.0 and price_asks_b_g_MDTBTC != 0.0 and qty_asks_b_g_MDTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_MDTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_MDTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_MDTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_MDTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_MDTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_MDTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_MDTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_MDTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_MDTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_MDTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_MDTUSDT_Trade).start() 

streamstmxusdt = 'stmxusdt@bookTicker'
streamstmxbtc  = 'stmxbtc@bookTicker'

symbol_a_g_STMXUSDT = 'STMXUSDT' 
price_bids_a_g_STMXUSDT = float(0.0) 
qty_bids_a_g_STMXUSDT = float(0.0) 
price_asks_a_g_STMXUSDT = float(0.0) 
qty_asks_a_g_STMXUSDT = float(0.0) 

stepSize_STMXUSDT = 1.00000000 

symbol_b_g_STMXBTC = 'STMXBTC' 
price_bids_b_g_STMXBTC = float(0.0) 
qty_bids_b_g_STMXBTC = float(0.0) 
price_asks_b_g_STMXBTC = float(0.0) 
qty_asks_b_g_STMXBTC = float(0.0) 

stepSize_STMXBTC = 1.00000000 

def on_message_STMXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamstmxusdt :
		symbol_a_l_STMXUSDT = data['data']['s'] 
		price_bids_a_l_STMXUSDT = data['data']['b'] 
		qty_bids_a_l_STMXUSDT = data['data']['B'] 
		price_asks_a_l_STMXUSDT = data['data']['a'] 
		qty_asks_a_l_STMXUSDT = data['data']['A'] 

		global symbol_a_g_STMXUSDT 
		global price_bids_a_g_STMXUSDT 
		global qty_bids_a_g_STMXUSDT 
		global price_asks_a_g_STMXUSDT 
		global qty_asks_a_g_STMXUSDT 

		symbol_a_g_STMXUSDT = symbol_a_l_STMXUSDT 
		price_bids_a_g_STMXUSDT = price_bids_a_l_STMXUSDT 
		qty_bids_a_g_STMXUSDT = qty_bids_a_l_STMXUSDT 
		price_asks_a_g_STMXUSDT = price_asks_a_l_STMXUSDT 
		qty_asks_a_g_STMXUSDT = qty_asks_a_l_STMXUSDT 

	if data['stream'] == streamstmxbtc :
		data = json.loads(message) 

		symbol_b_l_STMXBTC = data['data']['s'] 
		price_bids_b_l_STMXBTC = data['data']['b'] 
		qty_bids_b_l_STMXBTC = data['data']['B']
		price_asks_b_l_STMXBTC = data['data']['a'] 
		qty_asks_b_l_STMXBTC = data['data']['A'] 

		global symbol_b_g_STMXBTC 
		global price_bids_b_g_STMXBTC 
		global qty_bids_b_g_STMXBTC 
		global price_asks_b_g_STMXBTC 
		global qty_asks_b_g_STMXBTC 

		symbol_b_g_STMXBTC = symbol_b_l_STMXBTC 
		price_bids_b_g_STMXBTC = price_bids_b_l_STMXBTC 
		qty_bids_b_g_STMXBTC = qty_bids_b_l_STMXBTC 
		price_asks_b_g_STMXBTC = price_asks_b_l_STMXBTC 
		qty_asks_b_g_STMXBTC = qty_asks_b_l_STMXBTC 


def loop_STMXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamstmxusdt}/{streamstmxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_STMXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_STMXUSDT).start()

def loop_STMXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_STMXUSDT != 0.0 and qty_bids_a_g_STMXUSDT != 0.0 and price_asks_a_g_STMXUSDT != 0.0 and qty_asks_a_g_STMXUSDT != 0.0 and price_bids_b_g_STMXBTC != 0.0 and qty_bids_b_g_STMXBTC != 0.0 and price_asks_b_g_STMXBTC != 0.0 and qty_asks_b_g_STMXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_STMXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_STMXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_STMXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_STMXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_STMXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_STMXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_STMXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_STMXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_STMXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_STMXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_STMXUSDT_Trade).start() 

streamkncusdt = 'kncusdt@bookTicker'
streamkncbtc  = 'kncbtc@bookTicker'

symbol_a_g_KNCUSDT = 'KNCUSDT' 
price_bids_a_g_KNCUSDT = float(0.0) 
qty_bids_a_g_KNCUSDT = float(0.0) 
price_asks_a_g_KNCUSDT = float(0.0) 
qty_asks_a_g_KNCUSDT = float(0.0) 

stepSize_KNCUSDT = 0.10000000 

symbol_b_g_KNCBTC = 'KNCBTC' 
price_bids_b_g_KNCBTC = float(0.0) 
qty_bids_b_g_KNCBTC = float(0.0) 
price_asks_b_g_KNCBTC = float(0.0) 
qty_asks_b_g_KNCBTC = float(0.0) 

stepSize_KNCBTC = 0.10000000 

def on_message_KNCUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamkncusdt :
		symbol_a_l_KNCUSDT = data['data']['s'] 
		price_bids_a_l_KNCUSDT = data['data']['b'] 
		qty_bids_a_l_KNCUSDT = data['data']['B'] 
		price_asks_a_l_KNCUSDT = data['data']['a'] 
		qty_asks_a_l_KNCUSDT = data['data']['A'] 

		global symbol_a_g_KNCUSDT 
		global price_bids_a_g_KNCUSDT 
		global qty_bids_a_g_KNCUSDT 
		global price_asks_a_g_KNCUSDT 
		global qty_asks_a_g_KNCUSDT 

		symbol_a_g_KNCUSDT = symbol_a_l_KNCUSDT 
		price_bids_a_g_KNCUSDT = price_bids_a_l_KNCUSDT 
		qty_bids_a_g_KNCUSDT = qty_bids_a_l_KNCUSDT 
		price_asks_a_g_KNCUSDT = price_asks_a_l_KNCUSDT 
		qty_asks_a_g_KNCUSDT = qty_asks_a_l_KNCUSDT 

	if data['stream'] == streamkncbtc :
		data = json.loads(message) 

		symbol_b_l_KNCBTC = data['data']['s'] 
		price_bids_b_l_KNCBTC = data['data']['b'] 
		qty_bids_b_l_KNCBTC = data['data']['B']
		price_asks_b_l_KNCBTC = data['data']['a'] 
		qty_asks_b_l_KNCBTC = data['data']['A'] 

		global symbol_b_g_KNCBTC 
		global price_bids_b_g_KNCBTC 
		global qty_bids_b_g_KNCBTC 
		global price_asks_b_g_KNCBTC 
		global qty_asks_b_g_KNCBTC 

		symbol_b_g_KNCBTC = symbol_b_l_KNCBTC 
		price_bids_b_g_KNCBTC = price_bids_b_l_KNCBTC 
		qty_bids_b_g_KNCBTC = qty_bids_b_l_KNCBTC 
		price_asks_b_g_KNCBTC = price_asks_b_l_KNCBTC 
		qty_asks_b_g_KNCBTC = qty_asks_b_l_KNCBTC 


def loop_KNCUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamkncusdt}/{streamkncbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_KNCUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_KNCUSDT).start()

def loop_KNCUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_KNCUSDT != 0.0 and qty_bids_a_g_KNCUSDT != 0.0 and price_asks_a_g_KNCUSDT != 0.0 and qty_asks_a_g_KNCUSDT != 0.0 and price_bids_b_g_KNCBTC != 0.0 and qty_bids_b_g_KNCBTC != 0.0 and price_asks_b_g_KNCBTC != 0.0 and qty_asks_b_g_KNCBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_KNCBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_KNCBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_KNCUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_KNCUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_KNCBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_KNCBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_KNCUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_KNCUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_KNCBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_KNCBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_KNCUSDT_Trade).start() 

streamlrcusdt = 'lrcusdt@bookTicker'
streamlrcbtc  = 'lrcbtc@bookTicker'

symbol_a_g_LRCUSDT = 'LRCUSDT' 
price_bids_a_g_LRCUSDT = float(0.0) 
qty_bids_a_g_LRCUSDT = float(0.0) 
price_asks_a_g_LRCUSDT = float(0.0) 
qty_asks_a_g_LRCUSDT = float(0.0) 

stepSize_LRCUSDT = 1.00000000 

symbol_b_g_LRCBTC = 'LRCBTC' 
price_bids_b_g_LRCBTC = float(0.0) 
qty_bids_b_g_LRCBTC = float(0.0) 
price_asks_b_g_LRCBTC = float(0.0) 
qty_asks_b_g_LRCBTC = float(0.0) 

stepSize_LRCBTC = 1.00000000 

def on_message_LRCUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamlrcusdt :
		symbol_a_l_LRCUSDT = data['data']['s'] 
		price_bids_a_l_LRCUSDT = data['data']['b'] 
		qty_bids_a_l_LRCUSDT = data['data']['B'] 
		price_asks_a_l_LRCUSDT = data['data']['a'] 
		qty_asks_a_l_LRCUSDT = data['data']['A'] 

		global symbol_a_g_LRCUSDT 
		global price_bids_a_g_LRCUSDT 
		global qty_bids_a_g_LRCUSDT 
		global price_asks_a_g_LRCUSDT 
		global qty_asks_a_g_LRCUSDT 

		symbol_a_g_LRCUSDT = symbol_a_l_LRCUSDT 
		price_bids_a_g_LRCUSDT = price_bids_a_l_LRCUSDT 
		qty_bids_a_g_LRCUSDT = qty_bids_a_l_LRCUSDT 
		price_asks_a_g_LRCUSDT = price_asks_a_l_LRCUSDT 
		qty_asks_a_g_LRCUSDT = qty_asks_a_l_LRCUSDT 

	if data['stream'] == streamlrcbtc :
		data = json.loads(message) 

		symbol_b_l_LRCBTC = data['data']['s'] 
		price_bids_b_l_LRCBTC = data['data']['b'] 
		qty_bids_b_l_LRCBTC = data['data']['B']
		price_asks_b_l_LRCBTC = data['data']['a'] 
		qty_asks_b_l_LRCBTC = data['data']['A'] 

		global symbol_b_g_LRCBTC 
		global price_bids_b_g_LRCBTC 
		global qty_bids_b_g_LRCBTC 
		global price_asks_b_g_LRCBTC 
		global qty_asks_b_g_LRCBTC 

		symbol_b_g_LRCBTC = symbol_b_l_LRCBTC 
		price_bids_b_g_LRCBTC = price_bids_b_l_LRCBTC 
		qty_bids_b_g_LRCBTC = qty_bids_b_l_LRCBTC 
		price_asks_b_g_LRCBTC = price_asks_b_l_LRCBTC 
		qty_asks_b_g_LRCBTC = qty_asks_b_l_LRCBTC 


def loop_LRCUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamlrcusdt}/{streamlrcbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_LRCUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_LRCUSDT).start()

def loop_LRCUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_LRCUSDT != 0.0 and qty_bids_a_g_LRCUSDT != 0.0 and price_asks_a_g_LRCUSDT != 0.0 and qty_asks_a_g_LRCUSDT != 0.0 and price_bids_b_g_LRCBTC != 0.0 and qty_bids_b_g_LRCBTC != 0.0 and price_asks_b_g_LRCBTC != 0.0 and qty_asks_b_g_LRCBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_LRCBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_LRCBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_LRCUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_LRCUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_LRCBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_LRCBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_LRCUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_LRCUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_LRCBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_LRCBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_LRCUSDT_Trade).start() 

streamcompusdt = 'compusdt@bookTicker'
streamcompbtc  = 'compbtc@bookTicker'

symbol_a_g_COMPUSDT = 'COMPUSDT' 
price_bids_a_g_COMPUSDT = float(0.0) 
qty_bids_a_g_COMPUSDT = float(0.0) 
price_asks_a_g_COMPUSDT = float(0.0) 
qty_asks_a_g_COMPUSDT = float(0.0) 

stepSize_COMPUSDT = 0.00100000 

symbol_b_g_COMPBTC = 'COMPBTC' 
price_bids_b_g_COMPBTC = float(0.0) 
qty_bids_b_g_COMPBTC = float(0.0) 
price_asks_b_g_COMPBTC = float(0.0) 
qty_asks_b_g_COMPBTC = float(0.0) 

stepSize_COMPBTC = 0.00100000 

def on_message_COMPUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamcompusdt :
		symbol_a_l_COMPUSDT = data['data']['s'] 
		price_bids_a_l_COMPUSDT = data['data']['b'] 
		qty_bids_a_l_COMPUSDT = data['data']['B'] 
		price_asks_a_l_COMPUSDT = data['data']['a'] 
		qty_asks_a_l_COMPUSDT = data['data']['A'] 

		global symbol_a_g_COMPUSDT 
		global price_bids_a_g_COMPUSDT 
		global qty_bids_a_g_COMPUSDT 
		global price_asks_a_g_COMPUSDT 
		global qty_asks_a_g_COMPUSDT 

		symbol_a_g_COMPUSDT = symbol_a_l_COMPUSDT 
		price_bids_a_g_COMPUSDT = price_bids_a_l_COMPUSDT 
		qty_bids_a_g_COMPUSDT = qty_bids_a_l_COMPUSDT 
		price_asks_a_g_COMPUSDT = price_asks_a_l_COMPUSDT 
		qty_asks_a_g_COMPUSDT = qty_asks_a_l_COMPUSDT 

	if data['stream'] == streamcompbtc :
		data = json.loads(message) 

		symbol_b_l_COMPBTC = data['data']['s'] 
		price_bids_b_l_COMPBTC = data['data']['b'] 
		qty_bids_b_l_COMPBTC = data['data']['B']
		price_asks_b_l_COMPBTC = data['data']['a'] 
		qty_asks_b_l_COMPBTC = data['data']['A'] 

		global symbol_b_g_COMPBTC 
		global price_bids_b_g_COMPBTC 
		global qty_bids_b_g_COMPBTC 
		global price_asks_b_g_COMPBTC 
		global qty_asks_b_g_COMPBTC 

		symbol_b_g_COMPBTC = symbol_b_l_COMPBTC 
		price_bids_b_g_COMPBTC = price_bids_b_l_COMPBTC 
		qty_bids_b_g_COMPBTC = qty_bids_b_l_COMPBTC 
		price_asks_b_g_COMPBTC = price_asks_b_l_COMPBTC 
		qty_asks_b_g_COMPBTC = qty_asks_b_l_COMPBTC 


def loop_COMPUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamcompusdt}/{streamcompbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_COMPUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_COMPUSDT).start()

def loop_COMPUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_COMPUSDT != 0.0 and qty_bids_a_g_COMPUSDT != 0.0 and price_asks_a_g_COMPUSDT != 0.0 and qty_asks_a_g_COMPUSDT != 0.0 and price_bids_b_g_COMPBTC != 0.0 and qty_bids_b_g_COMPBTC != 0.0 and price_asks_b_g_COMPBTC != 0.0 and qty_asks_b_g_COMPBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_COMPBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_COMPBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_COMPUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_COMPUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_COMPBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_COMPBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_COMPUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_COMPUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_COMPBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_COMPBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_COMPUSDT_Trade).start() 

streamzenusdt = 'zenusdt@bookTicker'
streamzenbtc  = 'zenbtc@bookTicker'

symbol_a_g_ZENUSDT = 'ZENUSDT' 
price_bids_a_g_ZENUSDT = float(0.0) 
qty_bids_a_g_ZENUSDT = float(0.0) 
price_asks_a_g_ZENUSDT = float(0.0) 
qty_asks_a_g_ZENUSDT = float(0.0) 

stepSize_ZENUSDT = 0.01000000 

symbol_b_g_ZENBTC = 'ZENBTC' 
price_bids_b_g_ZENBTC = float(0.0) 
qty_bids_b_g_ZENBTC = float(0.0) 
price_asks_b_g_ZENBTC = float(0.0) 
qty_asks_b_g_ZENBTC = float(0.0) 

stepSize_ZENBTC = 0.01000000 

def on_message_ZENUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamzenusdt :
		symbol_a_l_ZENUSDT = data['data']['s'] 
		price_bids_a_l_ZENUSDT = data['data']['b'] 
		qty_bids_a_l_ZENUSDT = data['data']['B'] 
		price_asks_a_l_ZENUSDT = data['data']['a'] 
		qty_asks_a_l_ZENUSDT = data['data']['A'] 

		global symbol_a_g_ZENUSDT 
		global price_bids_a_g_ZENUSDT 
		global qty_bids_a_g_ZENUSDT 
		global price_asks_a_g_ZENUSDT 
		global qty_asks_a_g_ZENUSDT 

		symbol_a_g_ZENUSDT = symbol_a_l_ZENUSDT 
		price_bids_a_g_ZENUSDT = price_bids_a_l_ZENUSDT 
		qty_bids_a_g_ZENUSDT = qty_bids_a_l_ZENUSDT 
		price_asks_a_g_ZENUSDT = price_asks_a_l_ZENUSDT 
		qty_asks_a_g_ZENUSDT = qty_asks_a_l_ZENUSDT 

	if data['stream'] == streamzenbtc :
		data = json.loads(message) 

		symbol_b_l_ZENBTC = data['data']['s'] 
		price_bids_b_l_ZENBTC = data['data']['b'] 
		qty_bids_b_l_ZENBTC = data['data']['B']
		price_asks_b_l_ZENBTC = data['data']['a'] 
		qty_asks_b_l_ZENBTC = data['data']['A'] 

		global symbol_b_g_ZENBTC 
		global price_bids_b_g_ZENBTC 
		global qty_bids_b_g_ZENBTC 
		global price_asks_b_g_ZENBTC 
		global qty_asks_b_g_ZENBTC 

		symbol_b_g_ZENBTC = symbol_b_l_ZENBTC 
		price_bids_b_g_ZENBTC = price_bids_b_l_ZENBTC 
		qty_bids_b_g_ZENBTC = qty_bids_b_l_ZENBTC 
		price_asks_b_g_ZENBTC = price_asks_b_l_ZENBTC 
		qty_asks_b_g_ZENBTC = qty_asks_b_l_ZENBTC 


def loop_ZENUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamzenusdt}/{streamzenbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ZENUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ZENUSDT).start()

def loop_ZENUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ZENUSDT != 0.0 and qty_bids_a_g_ZENUSDT != 0.0 and price_asks_a_g_ZENUSDT != 0.0 and qty_asks_a_g_ZENUSDT != 0.0 and price_bids_b_g_ZENBTC != 0.0 and qty_bids_b_g_ZENBTC != 0.0 and price_asks_b_g_ZENBTC != 0.0 and qty_asks_b_g_ZENBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ZENBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ZENBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ZENUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ZENUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ZENBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ZENBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ZENUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ZENUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ZENBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ZENBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ZENUSDT_Trade).start() 

streamsnxusdt = 'snxusdt@bookTicker'
streamsnxbtc  = 'snxbtc@bookTicker'

symbol_a_g_SNXUSDT = 'SNXUSDT' 
price_bids_a_g_SNXUSDT = float(0.0) 
qty_bids_a_g_SNXUSDT = float(0.0) 
price_asks_a_g_SNXUSDT = float(0.0) 
qty_asks_a_g_SNXUSDT = float(0.0) 

stepSize_SNXUSDT = 0.10000000 

symbol_b_g_SNXBTC = 'SNXBTC' 
price_bids_b_g_SNXBTC = float(0.0) 
qty_bids_b_g_SNXBTC = float(0.0) 
price_asks_b_g_SNXBTC = float(0.0) 
qty_asks_b_g_SNXBTC = float(0.0) 

stepSize_SNXBTC = 0.10000000 

def on_message_SNXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamsnxusdt :
		symbol_a_l_SNXUSDT = data['data']['s'] 
		price_bids_a_l_SNXUSDT = data['data']['b'] 
		qty_bids_a_l_SNXUSDT = data['data']['B'] 
		price_asks_a_l_SNXUSDT = data['data']['a'] 
		qty_asks_a_l_SNXUSDT = data['data']['A'] 

		global symbol_a_g_SNXUSDT 
		global price_bids_a_g_SNXUSDT 
		global qty_bids_a_g_SNXUSDT 
		global price_asks_a_g_SNXUSDT 
		global qty_asks_a_g_SNXUSDT 

		symbol_a_g_SNXUSDT = symbol_a_l_SNXUSDT 
		price_bids_a_g_SNXUSDT = price_bids_a_l_SNXUSDT 
		qty_bids_a_g_SNXUSDT = qty_bids_a_l_SNXUSDT 
		price_asks_a_g_SNXUSDT = price_asks_a_l_SNXUSDT 
		qty_asks_a_g_SNXUSDT = qty_asks_a_l_SNXUSDT 

	if data['stream'] == streamsnxbtc :
		data = json.loads(message) 

		symbol_b_l_SNXBTC = data['data']['s'] 
		price_bids_b_l_SNXBTC = data['data']['b'] 
		qty_bids_b_l_SNXBTC = data['data']['B']
		price_asks_b_l_SNXBTC = data['data']['a'] 
		qty_asks_b_l_SNXBTC = data['data']['A'] 

		global symbol_b_g_SNXBTC 
		global price_bids_b_g_SNXBTC 
		global qty_bids_b_g_SNXBTC 
		global price_asks_b_g_SNXBTC 
		global qty_asks_b_g_SNXBTC 

		symbol_b_g_SNXBTC = symbol_b_l_SNXBTC 
		price_bids_b_g_SNXBTC = price_bids_b_l_SNXBTC 
		qty_bids_b_g_SNXBTC = qty_bids_b_l_SNXBTC 
		price_asks_b_g_SNXBTC = price_asks_b_l_SNXBTC 
		qty_asks_b_g_SNXBTC = qty_asks_b_l_SNXBTC 


def loop_SNXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamsnxusdt}/{streamsnxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_SNXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_SNXUSDT).start()

def loop_SNXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_SNXUSDT != 0.0 and qty_bids_a_g_SNXUSDT != 0.0 and price_asks_a_g_SNXUSDT != 0.0 and qty_asks_a_g_SNXUSDT != 0.0 and price_bids_b_g_SNXBTC != 0.0 and qty_bids_b_g_SNXBTC != 0.0 and price_asks_b_g_SNXBTC != 0.0 and qty_asks_b_g_SNXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_SNXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_SNXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_SNXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_SNXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_SNXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_SNXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_SNXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_SNXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_SNXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_SNXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_SNXUSDT_Trade).start() 

streamdgbusdt = 'dgbusdt@bookTicker'
streamdgbbtc  = 'dgbbtc@bookTicker'

symbol_a_g_DGBUSDT = 'DGBUSDT' 
price_bids_a_g_DGBUSDT = float(0.0) 
qty_bids_a_g_DGBUSDT = float(0.0) 
price_asks_a_g_DGBUSDT = float(0.0) 
qty_asks_a_g_DGBUSDT = float(0.0) 

stepSize_DGBUSDT = 0.10000000 

symbol_b_g_DGBBTC = 'DGBBTC' 
price_bids_b_g_DGBBTC = float(0.0) 
qty_bids_b_g_DGBBTC = float(0.0) 
price_asks_b_g_DGBBTC = float(0.0) 
qty_asks_b_g_DGBBTC = float(0.0) 

stepSize_DGBBTC = 1.00000000 

def on_message_DGBUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamdgbusdt :
		symbol_a_l_DGBUSDT = data['data']['s'] 
		price_bids_a_l_DGBUSDT = data['data']['b'] 
		qty_bids_a_l_DGBUSDT = data['data']['B'] 
		price_asks_a_l_DGBUSDT = data['data']['a'] 
		qty_asks_a_l_DGBUSDT = data['data']['A'] 

		global symbol_a_g_DGBUSDT 
		global price_bids_a_g_DGBUSDT 
		global qty_bids_a_g_DGBUSDT 
		global price_asks_a_g_DGBUSDT 
		global qty_asks_a_g_DGBUSDT 

		symbol_a_g_DGBUSDT = symbol_a_l_DGBUSDT 
		price_bids_a_g_DGBUSDT = price_bids_a_l_DGBUSDT 
		qty_bids_a_g_DGBUSDT = qty_bids_a_l_DGBUSDT 
		price_asks_a_g_DGBUSDT = price_asks_a_l_DGBUSDT 
		qty_asks_a_g_DGBUSDT = qty_asks_a_l_DGBUSDT 

	if data['stream'] == streamdgbbtc :
		data = json.loads(message) 

		symbol_b_l_DGBBTC = data['data']['s'] 
		price_bids_b_l_DGBBTC = data['data']['b'] 
		qty_bids_b_l_DGBBTC = data['data']['B']
		price_asks_b_l_DGBBTC = data['data']['a'] 
		qty_asks_b_l_DGBBTC = data['data']['A'] 

		global symbol_b_g_DGBBTC 
		global price_bids_b_g_DGBBTC 
		global qty_bids_b_g_DGBBTC 
		global price_asks_b_g_DGBBTC 
		global qty_asks_b_g_DGBBTC 

		symbol_b_g_DGBBTC = symbol_b_l_DGBBTC 
		price_bids_b_g_DGBBTC = price_bids_b_l_DGBBTC 
		qty_bids_b_g_DGBBTC = qty_bids_b_l_DGBBTC 
		price_asks_b_g_DGBBTC = price_asks_b_l_DGBBTC 
		qty_asks_b_g_DGBBTC = qty_asks_b_l_DGBBTC 


def loop_DGBUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamdgbusdt}/{streamdgbbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DGBUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DGBUSDT).start()

def loop_DGBUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DGBUSDT != 0.0 and qty_bids_a_g_DGBUSDT != 0.0 and price_asks_a_g_DGBUSDT != 0.0 and qty_asks_a_g_DGBUSDT != 0.0 and price_bids_b_g_DGBBTC != 0.0 and qty_bids_b_g_DGBBTC != 0.0 and price_asks_b_g_DGBBTC != 0.0 and qty_asks_b_g_DGBBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DGBBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DGBBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DGBUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DGBUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DGBBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DGBBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DGBUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DGBUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DGBBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DGBBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DGBUSDT_Trade).start() 

streamsxpusdt = 'sxpusdt@bookTicker'
streamsxpbtc  = 'sxpbtc@bookTicker'

symbol_a_g_SXPUSDT = 'SXPUSDT' 
price_bids_a_g_SXPUSDT = float(0.0) 
qty_bids_a_g_SXPUSDT = float(0.0) 
price_asks_a_g_SXPUSDT = float(0.0) 
qty_asks_a_g_SXPUSDT = float(0.0) 

stepSize_SXPUSDT = 0.10000000 

symbol_b_g_SXPBTC = 'SXPBTC' 
price_bids_b_g_SXPBTC = float(0.0) 
qty_bids_b_g_SXPBTC = float(0.0) 
price_asks_b_g_SXPBTC = float(0.0) 
qty_asks_b_g_SXPBTC = float(0.0) 

stepSize_SXPBTC = 0.10000000 

def on_message_SXPUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamsxpusdt :
		symbol_a_l_SXPUSDT = data['data']['s'] 
		price_bids_a_l_SXPUSDT = data['data']['b'] 
		qty_bids_a_l_SXPUSDT = data['data']['B'] 
		price_asks_a_l_SXPUSDT = data['data']['a'] 
		qty_asks_a_l_SXPUSDT = data['data']['A'] 

		global symbol_a_g_SXPUSDT 
		global price_bids_a_g_SXPUSDT 
		global qty_bids_a_g_SXPUSDT 
		global price_asks_a_g_SXPUSDT 
		global qty_asks_a_g_SXPUSDT 

		symbol_a_g_SXPUSDT = symbol_a_l_SXPUSDT 
		price_bids_a_g_SXPUSDT = price_bids_a_l_SXPUSDT 
		qty_bids_a_g_SXPUSDT = qty_bids_a_l_SXPUSDT 
		price_asks_a_g_SXPUSDT = price_asks_a_l_SXPUSDT 
		qty_asks_a_g_SXPUSDT = qty_asks_a_l_SXPUSDT 

	if data['stream'] == streamsxpbtc :
		data = json.loads(message) 

		symbol_b_l_SXPBTC = data['data']['s'] 
		price_bids_b_l_SXPBTC = data['data']['b'] 
		qty_bids_b_l_SXPBTC = data['data']['B']
		price_asks_b_l_SXPBTC = data['data']['a'] 
		qty_asks_b_l_SXPBTC = data['data']['A'] 

		global symbol_b_g_SXPBTC 
		global price_bids_b_g_SXPBTC 
		global qty_bids_b_g_SXPBTC 
		global price_asks_b_g_SXPBTC 
		global qty_asks_b_g_SXPBTC 

		symbol_b_g_SXPBTC = symbol_b_l_SXPBTC 
		price_bids_b_g_SXPBTC = price_bids_b_l_SXPBTC 
		qty_bids_b_g_SXPBTC = qty_bids_b_l_SXPBTC 
		price_asks_b_g_SXPBTC = price_asks_b_l_SXPBTC 
		qty_asks_b_g_SXPBTC = qty_asks_b_l_SXPBTC 


def loop_SXPUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamsxpusdt}/{streamsxpbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_SXPUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_SXPUSDT).start()

def loop_SXPUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_SXPUSDT != 0.0 and qty_bids_a_g_SXPUSDT != 0.0 and price_asks_a_g_SXPUSDT != 0.0 and qty_asks_a_g_SXPUSDT != 0.0 and price_bids_b_g_SXPBTC != 0.0 and qty_bids_b_g_SXPBTC != 0.0 and price_asks_b_g_SXPBTC != 0.0 and qty_asks_b_g_SXPBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_SXPBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_SXPBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_SXPUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_SXPUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_SXPBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_SXPBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_SXPUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_SXPUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_SXPBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_SXPBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_SXPUSDT_Trade).start() 

streammkrusdt = 'mkrusdt@bookTicker'
streammkrbtc  = 'mkrbtc@bookTicker'

symbol_a_g_MKRUSDT = 'MKRUSDT' 
price_bids_a_g_MKRUSDT = float(0.0) 
qty_bids_a_g_MKRUSDT = float(0.0) 
price_asks_a_g_MKRUSDT = float(0.0) 
qty_asks_a_g_MKRUSDT = float(0.0) 

stepSize_MKRUSDT = 0.00010000 

symbol_b_g_MKRBTC = 'MKRBTC' 
price_bids_b_g_MKRBTC = float(0.0) 
qty_bids_b_g_MKRBTC = float(0.0) 
price_asks_b_g_MKRBTC = float(0.0) 
qty_asks_b_g_MKRBTC = float(0.0) 

stepSize_MKRBTC = 0.00010000 

def on_message_MKRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streammkrusdt :
		symbol_a_l_MKRUSDT = data['data']['s'] 
		price_bids_a_l_MKRUSDT = data['data']['b'] 
		qty_bids_a_l_MKRUSDT = data['data']['B'] 
		price_asks_a_l_MKRUSDT = data['data']['a'] 
		qty_asks_a_l_MKRUSDT = data['data']['A'] 

		global symbol_a_g_MKRUSDT 
		global price_bids_a_g_MKRUSDT 
		global qty_bids_a_g_MKRUSDT 
		global price_asks_a_g_MKRUSDT 
		global qty_asks_a_g_MKRUSDT 

		symbol_a_g_MKRUSDT = symbol_a_l_MKRUSDT 
		price_bids_a_g_MKRUSDT = price_bids_a_l_MKRUSDT 
		qty_bids_a_g_MKRUSDT = qty_bids_a_l_MKRUSDT 
		price_asks_a_g_MKRUSDT = price_asks_a_l_MKRUSDT 
		qty_asks_a_g_MKRUSDT = qty_asks_a_l_MKRUSDT 

	if data['stream'] == streammkrbtc :
		data = json.loads(message) 

		symbol_b_l_MKRBTC = data['data']['s'] 
		price_bids_b_l_MKRBTC = data['data']['b'] 
		qty_bids_b_l_MKRBTC = data['data']['B']
		price_asks_b_l_MKRBTC = data['data']['a'] 
		qty_asks_b_l_MKRBTC = data['data']['A'] 

		global symbol_b_g_MKRBTC 
		global price_bids_b_g_MKRBTC 
		global qty_bids_b_g_MKRBTC 
		global price_asks_b_g_MKRBTC 
		global qty_asks_b_g_MKRBTC 

		symbol_b_g_MKRBTC = symbol_b_l_MKRBTC 
		price_bids_b_g_MKRBTC = price_bids_b_l_MKRBTC 
		qty_bids_b_g_MKRBTC = qty_bids_b_l_MKRBTC 
		price_asks_b_g_MKRBTC = price_asks_b_l_MKRBTC 
		qty_asks_b_g_MKRBTC = qty_asks_b_l_MKRBTC 


def loop_MKRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streammkrusdt}/{streammkrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_MKRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_MKRUSDT).start()

def loop_MKRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_MKRUSDT != 0.0 and qty_bids_a_g_MKRUSDT != 0.0 and price_asks_a_g_MKRUSDT != 0.0 and qty_asks_a_g_MKRUSDT != 0.0 and price_bids_b_g_MKRBTC != 0.0 and qty_bids_b_g_MKRBTC != 0.0 and price_asks_b_g_MKRBTC != 0.0 and qty_asks_b_g_MKRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_MKRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_MKRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_MKRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_MKRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_MKRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_MKRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_MKRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_MKRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_MKRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_MKRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_MKRUSDT_Trade).start() 

streamdcrusdt = 'dcrusdt@bookTicker'
streamdcrbtc  = 'dcrbtc@bookTicker'

symbol_a_g_DCRUSDT = 'DCRUSDT' 
price_bids_a_g_DCRUSDT = float(0.0) 
qty_bids_a_g_DCRUSDT = float(0.0) 
price_asks_a_g_DCRUSDT = float(0.0) 
qty_asks_a_g_DCRUSDT = float(0.0) 

stepSize_DCRUSDT = 0.00100000 

symbol_b_g_DCRBTC = 'DCRBTC' 
price_bids_b_g_DCRBTC = float(0.0) 
qty_bids_b_g_DCRBTC = float(0.0) 
price_asks_b_g_DCRBTC = float(0.0) 
qty_asks_b_g_DCRBTC = float(0.0) 

stepSize_DCRBTC = 0.00100000 

def on_message_DCRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamdcrusdt :
		symbol_a_l_DCRUSDT = data['data']['s'] 
		price_bids_a_l_DCRUSDT = data['data']['b'] 
		qty_bids_a_l_DCRUSDT = data['data']['B'] 
		price_asks_a_l_DCRUSDT = data['data']['a'] 
		qty_asks_a_l_DCRUSDT = data['data']['A'] 

		global symbol_a_g_DCRUSDT 
		global price_bids_a_g_DCRUSDT 
		global qty_bids_a_g_DCRUSDT 
		global price_asks_a_g_DCRUSDT 
		global qty_asks_a_g_DCRUSDT 

		symbol_a_g_DCRUSDT = symbol_a_l_DCRUSDT 
		price_bids_a_g_DCRUSDT = price_bids_a_l_DCRUSDT 
		qty_bids_a_g_DCRUSDT = qty_bids_a_l_DCRUSDT 
		price_asks_a_g_DCRUSDT = price_asks_a_l_DCRUSDT 
		qty_asks_a_g_DCRUSDT = qty_asks_a_l_DCRUSDT 

	if data['stream'] == streamdcrbtc :
		data = json.loads(message) 

		symbol_b_l_DCRBTC = data['data']['s'] 
		price_bids_b_l_DCRBTC = data['data']['b'] 
		qty_bids_b_l_DCRBTC = data['data']['B']
		price_asks_b_l_DCRBTC = data['data']['a'] 
		qty_asks_b_l_DCRBTC = data['data']['A'] 

		global symbol_b_g_DCRBTC 
		global price_bids_b_g_DCRBTC 
		global qty_bids_b_g_DCRBTC 
		global price_asks_b_g_DCRBTC 
		global qty_asks_b_g_DCRBTC 

		symbol_b_g_DCRBTC = symbol_b_l_DCRBTC 
		price_bids_b_g_DCRBTC = price_bids_b_l_DCRBTC 
		qty_bids_b_g_DCRBTC = qty_bids_b_l_DCRBTC 
		price_asks_b_g_DCRBTC = price_asks_b_l_DCRBTC 
		qty_asks_b_g_DCRBTC = qty_asks_b_l_DCRBTC 


def loop_DCRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamdcrusdt}/{streamdcrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DCRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DCRUSDT).start()

def loop_DCRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DCRUSDT != 0.0 and qty_bids_a_g_DCRUSDT != 0.0 and price_asks_a_g_DCRUSDT != 0.0 and qty_asks_a_g_DCRUSDT != 0.0 and price_bids_b_g_DCRBTC != 0.0 and qty_bids_b_g_DCRBTC != 0.0 and price_asks_b_g_DCRBTC != 0.0 and qty_asks_b_g_DCRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DCRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DCRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DCRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DCRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DCRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DCRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DCRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DCRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DCRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DCRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DCRUSDT_Trade).start() 

streamstorjusdt = 'storjusdt@bookTicker'
streamstorjbtc  = 'storjbtc@bookTicker'

symbol_a_g_STORJUSDT = 'STORJUSDT' 
price_bids_a_g_STORJUSDT = float(0.0) 
qty_bids_a_g_STORJUSDT = float(0.0) 
price_asks_a_g_STORJUSDT = float(0.0) 
qty_asks_a_g_STORJUSDT = float(0.0) 

stepSize_STORJUSDT = 1.00000000 

symbol_b_g_STORJBTC = 'STORJBTC' 
price_bids_b_g_STORJBTC = float(0.0) 
qty_bids_b_g_STORJBTC = float(0.0) 
price_asks_b_g_STORJBTC = float(0.0) 
qty_asks_b_g_STORJBTC = float(0.0) 

stepSize_STORJBTC = 1.00000000 

def on_message_STORJUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamstorjusdt :
		symbol_a_l_STORJUSDT = data['data']['s'] 
		price_bids_a_l_STORJUSDT = data['data']['b'] 
		qty_bids_a_l_STORJUSDT = data['data']['B'] 
		price_asks_a_l_STORJUSDT = data['data']['a'] 
		qty_asks_a_l_STORJUSDT = data['data']['A'] 

		global symbol_a_g_STORJUSDT 
		global price_bids_a_g_STORJUSDT 
		global qty_bids_a_g_STORJUSDT 
		global price_asks_a_g_STORJUSDT 
		global qty_asks_a_g_STORJUSDT 

		symbol_a_g_STORJUSDT = symbol_a_l_STORJUSDT 
		price_bids_a_g_STORJUSDT = price_bids_a_l_STORJUSDT 
		qty_bids_a_g_STORJUSDT = qty_bids_a_l_STORJUSDT 
		price_asks_a_g_STORJUSDT = price_asks_a_l_STORJUSDT 
		qty_asks_a_g_STORJUSDT = qty_asks_a_l_STORJUSDT 

	if data['stream'] == streamstorjbtc :
		data = json.loads(message) 

		symbol_b_l_STORJBTC = data['data']['s'] 
		price_bids_b_l_STORJBTC = data['data']['b'] 
		qty_bids_b_l_STORJBTC = data['data']['B']
		price_asks_b_l_STORJBTC = data['data']['a'] 
		qty_asks_b_l_STORJBTC = data['data']['A'] 

		global symbol_b_g_STORJBTC 
		global price_bids_b_g_STORJBTC 
		global qty_bids_b_g_STORJBTC 
		global price_asks_b_g_STORJBTC 
		global qty_asks_b_g_STORJBTC 

		symbol_b_g_STORJBTC = symbol_b_l_STORJBTC 
		price_bids_b_g_STORJBTC = price_bids_b_l_STORJBTC 
		qty_bids_b_g_STORJBTC = qty_bids_b_l_STORJBTC 
		price_asks_b_g_STORJBTC = price_asks_b_l_STORJBTC 
		qty_asks_b_g_STORJBTC = qty_asks_b_l_STORJBTC 


def loop_STORJUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamstorjusdt}/{streamstorjbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_STORJUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_STORJUSDT).start()

def loop_STORJUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_STORJUSDT != 0.0 and qty_bids_a_g_STORJUSDT != 0.0 and price_asks_a_g_STORJUSDT != 0.0 and qty_asks_a_g_STORJUSDT != 0.0 and price_bids_b_g_STORJBTC != 0.0 and qty_bids_b_g_STORJBTC != 0.0 and price_asks_b_g_STORJBTC != 0.0 and qty_asks_b_g_STORJBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_STORJBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_STORJBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_STORJUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_STORJUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_STORJBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_STORJBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_STORJUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_STORJUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_STORJBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_STORJBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_STORJUSDT_Trade).start() 

streammanausdt = 'manausdt@bookTicker'
streammanabtc  = 'manabtc@bookTicker'

symbol_a_g_MANAUSDT = 'MANAUSDT' 
price_bids_a_g_MANAUSDT = float(0.0) 
qty_bids_a_g_MANAUSDT = float(0.0) 
price_asks_a_g_MANAUSDT = float(0.0) 
qty_asks_a_g_MANAUSDT = float(0.0) 

stepSize_MANAUSDT = 1.00000000 

symbol_b_g_MANABTC = 'MANABTC' 
price_bids_b_g_MANABTC = float(0.0) 
qty_bids_b_g_MANABTC = float(0.0) 
price_asks_b_g_MANABTC = float(0.0) 
qty_asks_b_g_MANABTC = float(0.0) 

stepSize_MANABTC = 1.00000000 

def on_message_MANAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streammanausdt :
		symbol_a_l_MANAUSDT = data['data']['s'] 
		price_bids_a_l_MANAUSDT = data['data']['b'] 
		qty_bids_a_l_MANAUSDT = data['data']['B'] 
		price_asks_a_l_MANAUSDT = data['data']['a'] 
		qty_asks_a_l_MANAUSDT = data['data']['A'] 

		global symbol_a_g_MANAUSDT 
		global price_bids_a_g_MANAUSDT 
		global qty_bids_a_g_MANAUSDT 
		global price_asks_a_g_MANAUSDT 
		global qty_asks_a_g_MANAUSDT 

		symbol_a_g_MANAUSDT = symbol_a_l_MANAUSDT 
		price_bids_a_g_MANAUSDT = price_bids_a_l_MANAUSDT 
		qty_bids_a_g_MANAUSDT = qty_bids_a_l_MANAUSDT 
		price_asks_a_g_MANAUSDT = price_asks_a_l_MANAUSDT 
		qty_asks_a_g_MANAUSDT = qty_asks_a_l_MANAUSDT 

	if data['stream'] == streammanabtc :
		data = json.loads(message) 

		symbol_b_l_MANABTC = data['data']['s'] 
		price_bids_b_l_MANABTC = data['data']['b'] 
		qty_bids_b_l_MANABTC = data['data']['B']
		price_asks_b_l_MANABTC = data['data']['a'] 
		qty_asks_b_l_MANABTC = data['data']['A'] 

		global symbol_b_g_MANABTC 
		global price_bids_b_g_MANABTC 
		global qty_bids_b_g_MANABTC 
		global price_asks_b_g_MANABTC 
		global qty_asks_b_g_MANABTC 

		symbol_b_g_MANABTC = symbol_b_l_MANABTC 
		price_bids_b_g_MANABTC = price_bids_b_l_MANABTC 
		qty_bids_b_g_MANABTC = qty_bids_b_l_MANABTC 
		price_asks_b_g_MANABTC = price_asks_b_l_MANABTC 
		qty_asks_b_g_MANABTC = qty_asks_b_l_MANABTC 


def loop_MANAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streammanausdt}/{streammanabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_MANAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_MANAUSDT).start()

def loop_MANAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_MANAUSDT != 0.0 and qty_bids_a_g_MANAUSDT != 0.0 and price_asks_a_g_MANAUSDT != 0.0 and qty_asks_a_g_MANAUSDT != 0.0 and price_bids_b_g_MANABTC != 0.0 and qty_bids_b_g_MANABTC != 0.0 and price_asks_b_g_MANABTC != 0.0 and qty_asks_b_g_MANABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_MANABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_MANABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_MANAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_MANAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_MANABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_MANABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_MANAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_MANAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_MANABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_MANABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_MANAUSDT_Trade).start() 

streamyfiusdt = 'yfiusdt@bookTicker'
streamyfibtc  = 'yfibtc@bookTicker'

symbol_a_g_YFIUSDT = 'YFIUSDT' 
price_bids_a_g_YFIUSDT = float(0.0) 
qty_bids_a_g_YFIUSDT = float(0.0) 
price_asks_a_g_YFIUSDT = float(0.0) 
qty_asks_a_g_YFIUSDT = float(0.0) 

stepSize_YFIUSDT = 0.00001000 

symbol_b_g_YFIBTC = 'YFIBTC' 
price_bids_b_g_YFIBTC = float(0.0) 
qty_bids_b_g_YFIBTC = float(0.0) 
price_asks_b_g_YFIBTC = float(0.0) 
qty_asks_b_g_YFIBTC = float(0.0) 

stepSize_YFIBTC = 0.00001000 

def on_message_YFIUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamyfiusdt :
		symbol_a_l_YFIUSDT = data['data']['s'] 
		price_bids_a_l_YFIUSDT = data['data']['b'] 
		qty_bids_a_l_YFIUSDT = data['data']['B'] 
		price_asks_a_l_YFIUSDT = data['data']['a'] 
		qty_asks_a_l_YFIUSDT = data['data']['A'] 

		global symbol_a_g_YFIUSDT 
		global price_bids_a_g_YFIUSDT 
		global qty_bids_a_g_YFIUSDT 
		global price_asks_a_g_YFIUSDT 
		global qty_asks_a_g_YFIUSDT 

		symbol_a_g_YFIUSDT = symbol_a_l_YFIUSDT 
		price_bids_a_g_YFIUSDT = price_bids_a_l_YFIUSDT 
		qty_bids_a_g_YFIUSDT = qty_bids_a_l_YFIUSDT 
		price_asks_a_g_YFIUSDT = price_asks_a_l_YFIUSDT 
		qty_asks_a_g_YFIUSDT = qty_asks_a_l_YFIUSDT 

	if data['stream'] == streamyfibtc :
		data = json.loads(message) 

		symbol_b_l_YFIBTC = data['data']['s'] 
		price_bids_b_l_YFIBTC = data['data']['b'] 
		qty_bids_b_l_YFIBTC = data['data']['B']
		price_asks_b_l_YFIBTC = data['data']['a'] 
		qty_asks_b_l_YFIBTC = data['data']['A'] 

		global symbol_b_g_YFIBTC 
		global price_bids_b_g_YFIBTC 
		global qty_bids_b_g_YFIBTC 
		global price_asks_b_g_YFIBTC 
		global qty_asks_b_g_YFIBTC 

		symbol_b_g_YFIBTC = symbol_b_l_YFIBTC 
		price_bids_b_g_YFIBTC = price_bids_b_l_YFIBTC 
		qty_bids_b_g_YFIBTC = qty_bids_b_l_YFIBTC 
		price_asks_b_g_YFIBTC = price_asks_b_l_YFIBTC 
		qty_asks_b_g_YFIBTC = qty_asks_b_l_YFIBTC 


def loop_YFIUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamyfiusdt}/{streamyfibtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_YFIUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_YFIUSDT).start()

def loop_YFIUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_YFIUSDT != 0.0 and qty_bids_a_g_YFIUSDT != 0.0 and price_asks_a_g_YFIUSDT != 0.0 and qty_asks_a_g_YFIUSDT != 0.0 and price_bids_b_g_YFIBTC != 0.0 and qty_bids_b_g_YFIBTC != 0.0 and price_asks_b_g_YFIBTC != 0.0 and qty_asks_b_g_YFIBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_YFIBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_YFIBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_YFIUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_YFIUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_YFIBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_YFIBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_YFIUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_YFIUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_YFIBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_YFIBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_YFIUSDT_Trade).start() 

streambalusdt = 'balusdt@bookTicker'
streambalbtc  = 'balbtc@bookTicker'

symbol_a_g_BALUSDT = 'BALUSDT' 
price_bids_a_g_BALUSDT = float(0.0) 
qty_bids_a_g_BALUSDT = float(0.0) 
price_asks_a_g_BALUSDT = float(0.0) 
qty_asks_a_g_BALUSDT = float(0.0) 

stepSize_BALUSDT = 0.01000000 

symbol_b_g_BALBTC = 'BALBTC' 
price_bids_b_g_BALBTC = float(0.0) 
qty_bids_b_g_BALBTC = float(0.0) 
price_asks_b_g_BALBTC = float(0.0) 
qty_asks_b_g_BALBTC = float(0.0) 

stepSize_BALBTC = 0.01000000 

def on_message_BALUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambalusdt :
		symbol_a_l_BALUSDT = data['data']['s'] 
		price_bids_a_l_BALUSDT = data['data']['b'] 
		qty_bids_a_l_BALUSDT = data['data']['B'] 
		price_asks_a_l_BALUSDT = data['data']['a'] 
		qty_asks_a_l_BALUSDT = data['data']['A'] 

		global symbol_a_g_BALUSDT 
		global price_bids_a_g_BALUSDT 
		global qty_bids_a_g_BALUSDT 
		global price_asks_a_g_BALUSDT 
		global qty_asks_a_g_BALUSDT 

		symbol_a_g_BALUSDT = symbol_a_l_BALUSDT 
		price_bids_a_g_BALUSDT = price_bids_a_l_BALUSDT 
		qty_bids_a_g_BALUSDT = qty_bids_a_l_BALUSDT 
		price_asks_a_g_BALUSDT = price_asks_a_l_BALUSDT 
		qty_asks_a_g_BALUSDT = qty_asks_a_l_BALUSDT 

	if data['stream'] == streambalbtc :
		data = json.loads(message) 

		symbol_b_l_BALBTC = data['data']['s'] 
		price_bids_b_l_BALBTC = data['data']['b'] 
		qty_bids_b_l_BALBTC = data['data']['B']
		price_asks_b_l_BALBTC = data['data']['a'] 
		qty_asks_b_l_BALBTC = data['data']['A'] 

		global symbol_b_g_BALBTC 
		global price_bids_b_g_BALBTC 
		global qty_bids_b_g_BALBTC 
		global price_asks_b_g_BALBTC 
		global qty_asks_b_g_BALBTC 

		symbol_b_g_BALBTC = symbol_b_l_BALBTC 
		price_bids_b_g_BALBTC = price_bids_b_l_BALBTC 
		qty_bids_b_g_BALBTC = qty_bids_b_l_BALBTC 
		price_asks_b_g_BALBTC = price_asks_b_l_BALBTC 
		qty_asks_b_g_BALBTC = qty_asks_b_l_BALBTC 


def loop_BALUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambalusdt}/{streambalbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BALUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BALUSDT).start()

def loop_BALUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BALUSDT != 0.0 and qty_bids_a_g_BALUSDT != 0.0 and price_asks_a_g_BALUSDT != 0.0 and qty_asks_a_g_BALUSDT != 0.0 and price_bids_b_g_BALBTC != 0.0 and qty_bids_b_g_BALBTC != 0.0 and price_asks_b_g_BALBTC != 0.0 and qty_asks_b_g_BALBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BALBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BALBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BALUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BALUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BALBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BALBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BALUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BALUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BALBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BALBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BALUSDT_Trade).start() 

streamblzusdt = 'blzusdt@bookTicker'
streamblzbtc  = 'blzbtc@bookTicker'

symbol_a_g_BLZUSDT = 'BLZUSDT' 
price_bids_a_g_BLZUSDT = float(0.0) 
qty_bids_a_g_BLZUSDT = float(0.0) 
price_asks_a_g_BLZUSDT = float(0.0) 
qty_asks_a_g_BLZUSDT = float(0.0) 

stepSize_BLZUSDT = 1.00000000 

symbol_b_g_BLZBTC = 'BLZBTC' 
price_bids_b_g_BLZBTC = float(0.0) 
qty_bids_b_g_BLZBTC = float(0.0) 
price_asks_b_g_BLZBTC = float(0.0) 
qty_asks_b_g_BLZBTC = float(0.0) 

stepSize_BLZBTC = 1.00000000 

def on_message_BLZUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamblzusdt :
		symbol_a_l_BLZUSDT = data['data']['s'] 
		price_bids_a_l_BLZUSDT = data['data']['b'] 
		qty_bids_a_l_BLZUSDT = data['data']['B'] 
		price_asks_a_l_BLZUSDT = data['data']['a'] 
		qty_asks_a_l_BLZUSDT = data['data']['A'] 

		global symbol_a_g_BLZUSDT 
		global price_bids_a_g_BLZUSDT 
		global qty_bids_a_g_BLZUSDT 
		global price_asks_a_g_BLZUSDT 
		global qty_asks_a_g_BLZUSDT 

		symbol_a_g_BLZUSDT = symbol_a_l_BLZUSDT 
		price_bids_a_g_BLZUSDT = price_bids_a_l_BLZUSDT 
		qty_bids_a_g_BLZUSDT = qty_bids_a_l_BLZUSDT 
		price_asks_a_g_BLZUSDT = price_asks_a_l_BLZUSDT 
		qty_asks_a_g_BLZUSDT = qty_asks_a_l_BLZUSDT 

	if data['stream'] == streamblzbtc :
		data = json.loads(message) 

		symbol_b_l_BLZBTC = data['data']['s'] 
		price_bids_b_l_BLZBTC = data['data']['b'] 
		qty_bids_b_l_BLZBTC = data['data']['B']
		price_asks_b_l_BLZBTC = data['data']['a'] 
		qty_asks_b_l_BLZBTC = data['data']['A'] 

		global symbol_b_g_BLZBTC 
		global price_bids_b_g_BLZBTC 
		global qty_bids_b_g_BLZBTC 
		global price_asks_b_g_BLZBTC 
		global qty_asks_b_g_BLZBTC 

		symbol_b_g_BLZBTC = symbol_b_l_BLZBTC 
		price_bids_b_g_BLZBTC = price_bids_b_l_BLZBTC 
		qty_bids_b_g_BLZBTC = qty_bids_b_l_BLZBTC 
		price_asks_b_g_BLZBTC = price_asks_b_l_BLZBTC 
		qty_asks_b_g_BLZBTC = qty_asks_b_l_BLZBTC 


def loop_BLZUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamblzusdt}/{streamblzbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BLZUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BLZUSDT).start()

def loop_BLZUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BLZUSDT != 0.0 and qty_bids_a_g_BLZUSDT != 0.0 and price_asks_a_g_BLZUSDT != 0.0 and qty_asks_a_g_BLZUSDT != 0.0 and price_bids_b_g_BLZBTC != 0.0 and qty_bids_b_g_BLZBTC != 0.0 and price_asks_b_g_BLZBTC != 0.0 and qty_asks_b_g_BLZBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BLZBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BLZBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BLZUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BLZUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BLZBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BLZBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BLZUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BLZUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BLZBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BLZBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BLZUSDT_Trade).start() 

streamirisusdt = 'irisusdt@bookTicker'
streamirisbtc  = 'irisbtc@bookTicker'

symbol_a_g_IRISUSDT = 'IRISUSDT' 
price_bids_a_g_IRISUSDT = float(0.0) 
qty_bids_a_g_IRISUSDT = float(0.0) 
price_asks_a_g_IRISUSDT = float(0.0) 
qty_asks_a_g_IRISUSDT = float(0.0) 

stepSize_IRISUSDT = 0.10000000 

symbol_b_g_IRISBTC = 'IRISBTC' 
price_bids_b_g_IRISBTC = float(0.0) 
qty_bids_b_g_IRISBTC = float(0.0) 
price_asks_b_g_IRISBTC = float(0.0) 
qty_asks_b_g_IRISBTC = float(0.0) 

stepSize_IRISBTC = 1.00000000 

def on_message_IRISUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamirisusdt :
		symbol_a_l_IRISUSDT = data['data']['s'] 
		price_bids_a_l_IRISUSDT = data['data']['b'] 
		qty_bids_a_l_IRISUSDT = data['data']['B'] 
		price_asks_a_l_IRISUSDT = data['data']['a'] 
		qty_asks_a_l_IRISUSDT = data['data']['A'] 

		global symbol_a_g_IRISUSDT 
		global price_bids_a_g_IRISUSDT 
		global qty_bids_a_g_IRISUSDT 
		global price_asks_a_g_IRISUSDT 
		global qty_asks_a_g_IRISUSDT 

		symbol_a_g_IRISUSDT = symbol_a_l_IRISUSDT 
		price_bids_a_g_IRISUSDT = price_bids_a_l_IRISUSDT 
		qty_bids_a_g_IRISUSDT = qty_bids_a_l_IRISUSDT 
		price_asks_a_g_IRISUSDT = price_asks_a_l_IRISUSDT 
		qty_asks_a_g_IRISUSDT = qty_asks_a_l_IRISUSDT 

	if data['stream'] == streamirisbtc :
		data = json.loads(message) 

		symbol_b_l_IRISBTC = data['data']['s'] 
		price_bids_b_l_IRISBTC = data['data']['b'] 
		qty_bids_b_l_IRISBTC = data['data']['B']
		price_asks_b_l_IRISBTC = data['data']['a'] 
		qty_asks_b_l_IRISBTC = data['data']['A'] 

		global symbol_b_g_IRISBTC 
		global price_bids_b_g_IRISBTC 
		global qty_bids_b_g_IRISBTC 
		global price_asks_b_g_IRISBTC 
		global qty_asks_b_g_IRISBTC 

		symbol_b_g_IRISBTC = symbol_b_l_IRISBTC 
		price_bids_b_g_IRISBTC = price_bids_b_l_IRISBTC 
		qty_bids_b_g_IRISBTC = qty_bids_b_l_IRISBTC 
		price_asks_b_g_IRISBTC = price_asks_b_l_IRISBTC 
		qty_asks_b_g_IRISBTC = qty_asks_b_l_IRISBTC 


def loop_IRISUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamirisusdt}/{streamirisbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_IRISUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_IRISUSDT).start()

def loop_IRISUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_IRISUSDT != 0.0 and qty_bids_a_g_IRISUSDT != 0.0 and price_asks_a_g_IRISUSDT != 0.0 and qty_asks_a_g_IRISUSDT != 0.0 and price_bids_b_g_IRISBTC != 0.0 and qty_bids_b_g_IRISBTC != 0.0 and price_asks_b_g_IRISBTC != 0.0 and qty_asks_b_g_IRISBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_IRISBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_IRISBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_IRISUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_IRISUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_IRISBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_IRISBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_IRISUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_IRISUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_IRISBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_IRISBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_IRISUSDT_Trade).start() 

streamkmdusdt = 'kmdusdt@bookTicker'
streamkmdbtc  = 'kmdbtc@bookTicker'

symbol_a_g_KMDUSDT = 'KMDUSDT' 
price_bids_a_g_KMDUSDT = float(0.0) 
qty_bids_a_g_KMDUSDT = float(0.0) 
price_asks_a_g_KMDUSDT = float(0.0) 
qty_asks_a_g_KMDUSDT = float(0.0) 

stepSize_KMDUSDT = 1.00000000 

symbol_b_g_KMDBTC = 'KMDBTC' 
price_bids_b_g_KMDBTC = float(0.0) 
qty_bids_b_g_KMDBTC = float(0.0) 
price_asks_b_g_KMDBTC = float(0.0) 
qty_asks_b_g_KMDBTC = float(0.0) 

stepSize_KMDBTC = 1.00000000 

def on_message_KMDUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamkmdusdt :
		symbol_a_l_KMDUSDT = data['data']['s'] 
		price_bids_a_l_KMDUSDT = data['data']['b'] 
		qty_bids_a_l_KMDUSDT = data['data']['B'] 
		price_asks_a_l_KMDUSDT = data['data']['a'] 
		qty_asks_a_l_KMDUSDT = data['data']['A'] 

		global symbol_a_g_KMDUSDT 
		global price_bids_a_g_KMDUSDT 
		global qty_bids_a_g_KMDUSDT 
		global price_asks_a_g_KMDUSDT 
		global qty_asks_a_g_KMDUSDT 

		symbol_a_g_KMDUSDT = symbol_a_l_KMDUSDT 
		price_bids_a_g_KMDUSDT = price_bids_a_l_KMDUSDT 
		qty_bids_a_g_KMDUSDT = qty_bids_a_l_KMDUSDT 
		price_asks_a_g_KMDUSDT = price_asks_a_l_KMDUSDT 
		qty_asks_a_g_KMDUSDT = qty_asks_a_l_KMDUSDT 

	if data['stream'] == streamkmdbtc :
		data = json.loads(message) 

		symbol_b_l_KMDBTC = data['data']['s'] 
		price_bids_b_l_KMDBTC = data['data']['b'] 
		qty_bids_b_l_KMDBTC = data['data']['B']
		price_asks_b_l_KMDBTC = data['data']['a'] 
		qty_asks_b_l_KMDBTC = data['data']['A'] 

		global symbol_b_g_KMDBTC 
		global price_bids_b_g_KMDBTC 
		global qty_bids_b_g_KMDBTC 
		global price_asks_b_g_KMDBTC 
		global qty_asks_b_g_KMDBTC 

		symbol_b_g_KMDBTC = symbol_b_l_KMDBTC 
		price_bids_b_g_KMDBTC = price_bids_b_l_KMDBTC 
		qty_bids_b_g_KMDBTC = qty_bids_b_l_KMDBTC 
		price_asks_b_g_KMDBTC = price_asks_b_l_KMDBTC 
		qty_asks_b_g_KMDBTC = qty_asks_b_l_KMDBTC 


def loop_KMDUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamkmdusdt}/{streamkmdbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_KMDUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_KMDUSDT).start()

def loop_KMDUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_KMDUSDT != 0.0 and qty_bids_a_g_KMDUSDT != 0.0 and price_asks_a_g_KMDUSDT != 0.0 and qty_asks_a_g_KMDUSDT != 0.0 and price_bids_b_g_KMDBTC != 0.0 and qty_bids_b_g_KMDBTC != 0.0 and price_asks_b_g_KMDBTC != 0.0 and qty_asks_b_g_KMDBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_KMDBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_KMDBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_KMDUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_KMDUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_KMDBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_KMDBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_KMDUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_KMDUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_KMDBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_KMDBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_KMDUSDT_Trade).start() 

streamjstusdt = 'jstusdt@bookTicker'
streamjstbtc  = 'jstbtc@bookTicker'

symbol_a_g_JSTUSDT = 'JSTUSDT' 
price_bids_a_g_JSTUSDT = float(0.0) 
qty_bids_a_g_JSTUSDT = float(0.0) 
price_asks_a_g_JSTUSDT = float(0.0) 
qty_asks_a_g_JSTUSDT = float(0.0) 

stepSize_JSTUSDT = 0.10000000 

symbol_b_g_JSTBTC = 'JSTBTC' 
price_bids_b_g_JSTBTC = float(0.0) 
qty_bids_b_g_JSTBTC = float(0.0) 
price_asks_b_g_JSTBTC = float(0.0) 
qty_asks_b_g_JSTBTC = float(0.0) 

stepSize_JSTBTC = 1.00000000 

def on_message_JSTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamjstusdt :
		symbol_a_l_JSTUSDT = data['data']['s'] 
		price_bids_a_l_JSTUSDT = data['data']['b'] 
		qty_bids_a_l_JSTUSDT = data['data']['B'] 
		price_asks_a_l_JSTUSDT = data['data']['a'] 
		qty_asks_a_l_JSTUSDT = data['data']['A'] 

		global symbol_a_g_JSTUSDT 
		global price_bids_a_g_JSTUSDT 
		global qty_bids_a_g_JSTUSDT 
		global price_asks_a_g_JSTUSDT 
		global qty_asks_a_g_JSTUSDT 

		symbol_a_g_JSTUSDT = symbol_a_l_JSTUSDT 
		price_bids_a_g_JSTUSDT = price_bids_a_l_JSTUSDT 
		qty_bids_a_g_JSTUSDT = qty_bids_a_l_JSTUSDT 
		price_asks_a_g_JSTUSDT = price_asks_a_l_JSTUSDT 
		qty_asks_a_g_JSTUSDT = qty_asks_a_l_JSTUSDT 

	if data['stream'] == streamjstbtc :
		data = json.loads(message) 

		symbol_b_l_JSTBTC = data['data']['s'] 
		price_bids_b_l_JSTBTC = data['data']['b'] 
		qty_bids_b_l_JSTBTC = data['data']['B']
		price_asks_b_l_JSTBTC = data['data']['a'] 
		qty_asks_b_l_JSTBTC = data['data']['A'] 

		global symbol_b_g_JSTBTC 
		global price_bids_b_g_JSTBTC 
		global qty_bids_b_g_JSTBTC 
		global price_asks_b_g_JSTBTC 
		global qty_asks_b_g_JSTBTC 

		symbol_b_g_JSTBTC = symbol_b_l_JSTBTC 
		price_bids_b_g_JSTBTC = price_bids_b_l_JSTBTC 
		qty_bids_b_g_JSTBTC = qty_bids_b_l_JSTBTC 
		price_asks_b_g_JSTBTC = price_asks_b_l_JSTBTC 
		qty_asks_b_g_JSTBTC = qty_asks_b_l_JSTBTC 


def loop_JSTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamjstusdt}/{streamjstbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_JSTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_JSTUSDT).start()

def loop_JSTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_JSTUSDT != 0.0 and qty_bids_a_g_JSTUSDT != 0.0 and price_asks_a_g_JSTUSDT != 0.0 and qty_asks_a_g_JSTUSDT != 0.0 and price_bids_b_g_JSTBTC != 0.0 and qty_bids_b_g_JSTBTC != 0.0 and price_asks_b_g_JSTBTC != 0.0 and qty_asks_b_g_JSTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_JSTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_JSTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_JSTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_JSTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_JSTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_JSTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_JSTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_JSTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_JSTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_JSTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_JSTUSDT_Trade).start() 

streamantusdt = 'antusdt@bookTicker'
streamantbtc  = 'antbtc@bookTicker'

symbol_a_g_ANTUSDT = 'ANTUSDT' 
price_bids_a_g_ANTUSDT = float(0.0) 
qty_bids_a_g_ANTUSDT = float(0.0) 
price_asks_a_g_ANTUSDT = float(0.0) 
qty_asks_a_g_ANTUSDT = float(0.0) 

stepSize_ANTUSDT = 0.10000000 

symbol_b_g_ANTBTC = 'ANTBTC' 
price_bids_b_g_ANTBTC = float(0.0) 
qty_bids_b_g_ANTBTC = float(0.0) 
price_asks_b_g_ANTBTC = float(0.0) 
qty_asks_b_g_ANTBTC = float(0.0) 

stepSize_ANTBTC = 0.10000000 

def on_message_ANTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamantusdt :
		symbol_a_l_ANTUSDT = data['data']['s'] 
		price_bids_a_l_ANTUSDT = data['data']['b'] 
		qty_bids_a_l_ANTUSDT = data['data']['B'] 
		price_asks_a_l_ANTUSDT = data['data']['a'] 
		qty_asks_a_l_ANTUSDT = data['data']['A'] 

		global symbol_a_g_ANTUSDT 
		global price_bids_a_g_ANTUSDT 
		global qty_bids_a_g_ANTUSDT 
		global price_asks_a_g_ANTUSDT 
		global qty_asks_a_g_ANTUSDT 

		symbol_a_g_ANTUSDT = symbol_a_l_ANTUSDT 
		price_bids_a_g_ANTUSDT = price_bids_a_l_ANTUSDT 
		qty_bids_a_g_ANTUSDT = qty_bids_a_l_ANTUSDT 
		price_asks_a_g_ANTUSDT = price_asks_a_l_ANTUSDT 
		qty_asks_a_g_ANTUSDT = qty_asks_a_l_ANTUSDT 

	if data['stream'] == streamantbtc :
		data = json.loads(message) 

		symbol_b_l_ANTBTC = data['data']['s'] 
		price_bids_b_l_ANTBTC = data['data']['b'] 
		qty_bids_b_l_ANTBTC = data['data']['B']
		price_asks_b_l_ANTBTC = data['data']['a'] 
		qty_asks_b_l_ANTBTC = data['data']['A'] 

		global symbol_b_g_ANTBTC 
		global price_bids_b_g_ANTBTC 
		global qty_bids_b_g_ANTBTC 
		global price_asks_b_g_ANTBTC 
		global qty_asks_b_g_ANTBTC 

		symbol_b_g_ANTBTC = symbol_b_l_ANTBTC 
		price_bids_b_g_ANTBTC = price_bids_b_l_ANTBTC 
		qty_bids_b_g_ANTBTC = qty_bids_b_l_ANTBTC 
		price_asks_b_g_ANTBTC = price_asks_b_l_ANTBTC 
		qty_asks_b_g_ANTBTC = qty_asks_b_l_ANTBTC 


def loop_ANTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamantusdt}/{streamantbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ANTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ANTUSDT).start()

def loop_ANTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ANTUSDT != 0.0 and qty_bids_a_g_ANTUSDT != 0.0 and price_asks_a_g_ANTUSDT != 0.0 and qty_asks_a_g_ANTUSDT != 0.0 and price_bids_b_g_ANTBTC != 0.0 and qty_bids_b_g_ANTBTC != 0.0 and price_asks_b_g_ANTBTC != 0.0 and qty_asks_b_g_ANTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ANTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ANTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ANTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ANTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ANTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ANTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ANTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ANTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ANTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ANTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ANTUSDT_Trade).start() 

streamcrvusdt = 'crvusdt@bookTicker'
streamcrvbtc  = 'crvbtc@bookTicker'

symbol_a_g_CRVUSDT = 'CRVUSDT' 
price_bids_a_g_CRVUSDT = float(0.0) 
qty_bids_a_g_CRVUSDT = float(0.0) 
price_asks_a_g_CRVUSDT = float(0.0) 
qty_asks_a_g_CRVUSDT = float(0.0) 

stepSize_CRVUSDT = 0.10000000 

symbol_b_g_CRVBTC = 'CRVBTC' 
price_bids_b_g_CRVBTC = float(0.0) 
qty_bids_b_g_CRVBTC = float(0.0) 
price_asks_b_g_CRVBTC = float(0.0) 
qty_asks_b_g_CRVBTC = float(0.0) 

stepSize_CRVBTC = 0.10000000 

def on_message_CRVUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamcrvusdt :
		symbol_a_l_CRVUSDT = data['data']['s'] 
		price_bids_a_l_CRVUSDT = data['data']['b'] 
		qty_bids_a_l_CRVUSDT = data['data']['B'] 
		price_asks_a_l_CRVUSDT = data['data']['a'] 
		qty_asks_a_l_CRVUSDT = data['data']['A'] 

		global symbol_a_g_CRVUSDT 
		global price_bids_a_g_CRVUSDT 
		global qty_bids_a_g_CRVUSDT 
		global price_asks_a_g_CRVUSDT 
		global qty_asks_a_g_CRVUSDT 

		symbol_a_g_CRVUSDT = symbol_a_l_CRVUSDT 
		price_bids_a_g_CRVUSDT = price_bids_a_l_CRVUSDT 
		qty_bids_a_g_CRVUSDT = qty_bids_a_l_CRVUSDT 
		price_asks_a_g_CRVUSDT = price_asks_a_l_CRVUSDT 
		qty_asks_a_g_CRVUSDT = qty_asks_a_l_CRVUSDT 

	if data['stream'] == streamcrvbtc :
		data = json.loads(message) 

		symbol_b_l_CRVBTC = data['data']['s'] 
		price_bids_b_l_CRVBTC = data['data']['b'] 
		qty_bids_b_l_CRVBTC = data['data']['B']
		price_asks_b_l_CRVBTC = data['data']['a'] 
		qty_asks_b_l_CRVBTC = data['data']['A'] 

		global symbol_b_g_CRVBTC 
		global price_bids_b_g_CRVBTC 
		global qty_bids_b_g_CRVBTC 
		global price_asks_b_g_CRVBTC 
		global qty_asks_b_g_CRVBTC 

		symbol_b_g_CRVBTC = symbol_b_l_CRVBTC 
		price_bids_b_g_CRVBTC = price_bids_b_l_CRVBTC 
		qty_bids_b_g_CRVBTC = qty_bids_b_l_CRVBTC 
		price_asks_b_g_CRVBTC = price_asks_b_l_CRVBTC 
		qty_asks_b_g_CRVBTC = qty_asks_b_l_CRVBTC 


def loop_CRVUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamcrvusdt}/{streamcrvbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CRVUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CRVUSDT).start()

def loop_CRVUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CRVUSDT != 0.0 and qty_bids_a_g_CRVUSDT != 0.0 and price_asks_a_g_CRVUSDT != 0.0 and qty_asks_a_g_CRVUSDT != 0.0 and price_bids_b_g_CRVBTC != 0.0 and qty_bids_b_g_CRVBTC != 0.0 and price_asks_b_g_CRVBTC != 0.0 and qty_asks_b_g_CRVBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CRVBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CRVBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CRVUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CRVUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CRVBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CRVBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CRVUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CRVUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CRVBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CRVBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CRVUSDT_Trade).start() 

streamsandusdt = 'sandusdt@bookTicker'
streamsandbtc  = 'sandbtc@bookTicker'

symbol_a_g_SANDUSDT = 'SANDUSDT' 
price_bids_a_g_SANDUSDT = float(0.0) 
qty_bids_a_g_SANDUSDT = float(0.0) 
price_asks_a_g_SANDUSDT = float(0.0) 
qty_asks_a_g_SANDUSDT = float(0.0) 

stepSize_SANDUSDT = 1.00000000 

symbol_b_g_SANDBTC = 'SANDBTC' 
price_bids_b_g_SANDBTC = float(0.0) 
qty_bids_b_g_SANDBTC = float(0.0) 
price_asks_b_g_SANDBTC = float(0.0) 
qty_asks_b_g_SANDBTC = float(0.0) 

stepSize_SANDBTC = 1.00000000 

def on_message_SANDUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamsandusdt :
		symbol_a_l_SANDUSDT = data['data']['s'] 
		price_bids_a_l_SANDUSDT = data['data']['b'] 
		qty_bids_a_l_SANDUSDT = data['data']['B'] 
		price_asks_a_l_SANDUSDT = data['data']['a'] 
		qty_asks_a_l_SANDUSDT = data['data']['A'] 

		global symbol_a_g_SANDUSDT 
		global price_bids_a_g_SANDUSDT 
		global qty_bids_a_g_SANDUSDT 
		global price_asks_a_g_SANDUSDT 
		global qty_asks_a_g_SANDUSDT 

		symbol_a_g_SANDUSDT = symbol_a_l_SANDUSDT 
		price_bids_a_g_SANDUSDT = price_bids_a_l_SANDUSDT 
		qty_bids_a_g_SANDUSDT = qty_bids_a_l_SANDUSDT 
		price_asks_a_g_SANDUSDT = price_asks_a_l_SANDUSDT 
		qty_asks_a_g_SANDUSDT = qty_asks_a_l_SANDUSDT 

	if data['stream'] == streamsandbtc :
		data = json.loads(message) 

		symbol_b_l_SANDBTC = data['data']['s'] 
		price_bids_b_l_SANDBTC = data['data']['b'] 
		qty_bids_b_l_SANDBTC = data['data']['B']
		price_asks_b_l_SANDBTC = data['data']['a'] 
		qty_asks_b_l_SANDBTC = data['data']['A'] 

		global symbol_b_g_SANDBTC 
		global price_bids_b_g_SANDBTC 
		global qty_bids_b_g_SANDBTC 
		global price_asks_b_g_SANDBTC 
		global qty_asks_b_g_SANDBTC 

		symbol_b_g_SANDBTC = symbol_b_l_SANDBTC 
		price_bids_b_g_SANDBTC = price_bids_b_l_SANDBTC 
		qty_bids_b_g_SANDBTC = qty_bids_b_l_SANDBTC 
		price_asks_b_g_SANDBTC = price_asks_b_l_SANDBTC 
		qty_asks_b_g_SANDBTC = qty_asks_b_l_SANDBTC 


def loop_SANDUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamsandusdt}/{streamsandbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_SANDUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_SANDUSDT).start()

def loop_SANDUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_SANDUSDT != 0.0 and qty_bids_a_g_SANDUSDT != 0.0 and price_asks_a_g_SANDUSDT != 0.0 and qty_asks_a_g_SANDUSDT != 0.0 and price_bids_b_g_SANDBTC != 0.0 and qty_bids_b_g_SANDBTC != 0.0 and price_asks_b_g_SANDBTC != 0.0 and qty_asks_b_g_SANDBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_SANDBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_SANDBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_SANDUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_SANDUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_SANDBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_SANDBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_SANDUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_SANDUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_SANDBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_SANDBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_SANDUSDT_Trade).start() 

streamoceanusdt = 'oceanusdt@bookTicker'
streamoceanbtc  = 'oceanbtc@bookTicker'

symbol_a_g_OCEANUSDT = 'OCEANUSDT' 
price_bids_a_g_OCEANUSDT = float(0.0) 
qty_bids_a_g_OCEANUSDT = float(0.0) 
price_asks_a_g_OCEANUSDT = float(0.0) 
qty_asks_a_g_OCEANUSDT = float(0.0) 

stepSize_OCEANUSDT = 1.00000000 

symbol_b_g_OCEANBTC = 'OCEANBTC' 
price_bids_b_g_OCEANBTC = float(0.0) 
qty_bids_b_g_OCEANBTC = float(0.0) 
price_asks_b_g_OCEANBTC = float(0.0) 
qty_asks_b_g_OCEANBTC = float(0.0) 

stepSize_OCEANBTC = 1.00000000 

def on_message_OCEANUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamoceanusdt :
		symbol_a_l_OCEANUSDT = data['data']['s'] 
		price_bids_a_l_OCEANUSDT = data['data']['b'] 
		qty_bids_a_l_OCEANUSDT = data['data']['B'] 
		price_asks_a_l_OCEANUSDT = data['data']['a'] 
		qty_asks_a_l_OCEANUSDT = data['data']['A'] 

		global symbol_a_g_OCEANUSDT 
		global price_bids_a_g_OCEANUSDT 
		global qty_bids_a_g_OCEANUSDT 
		global price_asks_a_g_OCEANUSDT 
		global qty_asks_a_g_OCEANUSDT 

		symbol_a_g_OCEANUSDT = symbol_a_l_OCEANUSDT 
		price_bids_a_g_OCEANUSDT = price_bids_a_l_OCEANUSDT 
		qty_bids_a_g_OCEANUSDT = qty_bids_a_l_OCEANUSDT 
		price_asks_a_g_OCEANUSDT = price_asks_a_l_OCEANUSDT 
		qty_asks_a_g_OCEANUSDT = qty_asks_a_l_OCEANUSDT 

	if data['stream'] == streamoceanbtc :
		data = json.loads(message) 

		symbol_b_l_OCEANBTC = data['data']['s'] 
		price_bids_b_l_OCEANBTC = data['data']['b'] 
		qty_bids_b_l_OCEANBTC = data['data']['B']
		price_asks_b_l_OCEANBTC = data['data']['a'] 
		qty_asks_b_l_OCEANBTC = data['data']['A'] 

		global symbol_b_g_OCEANBTC 
		global price_bids_b_g_OCEANBTC 
		global qty_bids_b_g_OCEANBTC 
		global price_asks_b_g_OCEANBTC 
		global qty_asks_b_g_OCEANBTC 

		symbol_b_g_OCEANBTC = symbol_b_l_OCEANBTC 
		price_bids_b_g_OCEANBTC = price_bids_b_l_OCEANBTC 
		qty_bids_b_g_OCEANBTC = qty_bids_b_l_OCEANBTC 
		price_asks_b_g_OCEANBTC = price_asks_b_l_OCEANBTC 
		qty_asks_b_g_OCEANBTC = qty_asks_b_l_OCEANBTC 


def loop_OCEANUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamoceanusdt}/{streamoceanbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_OCEANUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_OCEANUSDT).start()

def loop_OCEANUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_OCEANUSDT != 0.0 and qty_bids_a_g_OCEANUSDT != 0.0 and price_asks_a_g_OCEANUSDT != 0.0 and qty_asks_a_g_OCEANUSDT != 0.0 and price_bids_b_g_OCEANBTC != 0.0 and qty_bids_b_g_OCEANBTC != 0.0 and price_asks_b_g_OCEANBTC != 0.0 and qty_asks_b_g_OCEANBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_OCEANBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_OCEANBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_OCEANUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_OCEANUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_OCEANBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_OCEANBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_OCEANUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_OCEANUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_OCEANBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_OCEANBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_OCEANUSDT_Trade).start() 

streamnmrusdt = 'nmrusdt@bookTicker'
streamnmrbtc  = 'nmrbtc@bookTicker'

symbol_a_g_NMRUSDT = 'NMRUSDT' 
price_bids_a_g_NMRUSDT = float(0.0) 
qty_bids_a_g_NMRUSDT = float(0.0) 
price_asks_a_g_NMRUSDT = float(0.0) 
qty_asks_a_g_NMRUSDT = float(0.0) 

stepSize_NMRUSDT = 0.01000000 

symbol_b_g_NMRBTC = 'NMRBTC' 
price_bids_b_g_NMRBTC = float(0.0) 
qty_bids_b_g_NMRBTC = float(0.0) 
price_asks_b_g_NMRBTC = float(0.0) 
qty_asks_b_g_NMRBTC = float(0.0) 

stepSize_NMRBTC = 0.01000000 

def on_message_NMRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamnmrusdt :
		symbol_a_l_NMRUSDT = data['data']['s'] 
		price_bids_a_l_NMRUSDT = data['data']['b'] 
		qty_bids_a_l_NMRUSDT = data['data']['B'] 
		price_asks_a_l_NMRUSDT = data['data']['a'] 
		qty_asks_a_l_NMRUSDT = data['data']['A'] 

		global symbol_a_g_NMRUSDT 
		global price_bids_a_g_NMRUSDT 
		global qty_bids_a_g_NMRUSDT 
		global price_asks_a_g_NMRUSDT 
		global qty_asks_a_g_NMRUSDT 

		symbol_a_g_NMRUSDT = symbol_a_l_NMRUSDT 
		price_bids_a_g_NMRUSDT = price_bids_a_l_NMRUSDT 
		qty_bids_a_g_NMRUSDT = qty_bids_a_l_NMRUSDT 
		price_asks_a_g_NMRUSDT = price_asks_a_l_NMRUSDT 
		qty_asks_a_g_NMRUSDT = qty_asks_a_l_NMRUSDT 

	if data['stream'] == streamnmrbtc :
		data = json.loads(message) 

		symbol_b_l_NMRBTC = data['data']['s'] 
		price_bids_b_l_NMRBTC = data['data']['b'] 
		qty_bids_b_l_NMRBTC = data['data']['B']
		price_asks_b_l_NMRBTC = data['data']['a'] 
		qty_asks_b_l_NMRBTC = data['data']['A'] 

		global symbol_b_g_NMRBTC 
		global price_bids_b_g_NMRBTC 
		global qty_bids_b_g_NMRBTC 
		global price_asks_b_g_NMRBTC 
		global qty_asks_b_g_NMRBTC 

		symbol_b_g_NMRBTC = symbol_b_l_NMRBTC 
		price_bids_b_g_NMRBTC = price_bids_b_l_NMRBTC 
		qty_bids_b_g_NMRBTC = qty_bids_b_l_NMRBTC 
		price_asks_b_g_NMRBTC = price_asks_b_l_NMRBTC 
		qty_asks_b_g_NMRBTC = qty_asks_b_l_NMRBTC 


def loop_NMRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamnmrusdt}/{streamnmrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_NMRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_NMRUSDT).start()

def loop_NMRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_NMRUSDT != 0.0 and qty_bids_a_g_NMRUSDT != 0.0 and price_asks_a_g_NMRUSDT != 0.0 and qty_asks_a_g_NMRUSDT != 0.0 and price_bids_b_g_NMRBTC != 0.0 and qty_bids_b_g_NMRBTC != 0.0 and price_asks_b_g_NMRBTC != 0.0 and qty_asks_b_g_NMRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_NMRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_NMRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_NMRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_NMRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_NMRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_NMRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_NMRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_NMRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_NMRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_NMRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_NMRUSDT_Trade).start() 

streamdotusdt = 'dotusdt@bookTicker'
streamdotbtc  = 'dotbtc@bookTicker'

symbol_a_g_DOTUSDT = 'DOTUSDT' 
price_bids_a_g_DOTUSDT = float(0.0) 
qty_bids_a_g_DOTUSDT = float(0.0) 
price_asks_a_g_DOTUSDT = float(0.0) 
qty_asks_a_g_DOTUSDT = float(0.0) 

stepSize_DOTUSDT = 0.01000000 

symbol_b_g_DOTBTC = 'DOTBTC' 
price_bids_b_g_DOTBTC = float(0.0) 
qty_bids_b_g_DOTBTC = float(0.0) 
price_asks_b_g_DOTBTC = float(0.0) 
qty_asks_b_g_DOTBTC = float(0.0) 

stepSize_DOTBTC = 0.01000000 

def on_message_DOTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamdotusdt :
		symbol_a_l_DOTUSDT = data['data']['s'] 
		price_bids_a_l_DOTUSDT = data['data']['b'] 
		qty_bids_a_l_DOTUSDT = data['data']['B'] 
		price_asks_a_l_DOTUSDT = data['data']['a'] 
		qty_asks_a_l_DOTUSDT = data['data']['A'] 

		global symbol_a_g_DOTUSDT 
		global price_bids_a_g_DOTUSDT 
		global qty_bids_a_g_DOTUSDT 
		global price_asks_a_g_DOTUSDT 
		global qty_asks_a_g_DOTUSDT 

		symbol_a_g_DOTUSDT = symbol_a_l_DOTUSDT 
		price_bids_a_g_DOTUSDT = price_bids_a_l_DOTUSDT 
		qty_bids_a_g_DOTUSDT = qty_bids_a_l_DOTUSDT 
		price_asks_a_g_DOTUSDT = price_asks_a_l_DOTUSDT 
		qty_asks_a_g_DOTUSDT = qty_asks_a_l_DOTUSDT 

	if data['stream'] == streamdotbtc :
		data = json.loads(message) 

		symbol_b_l_DOTBTC = data['data']['s'] 
		price_bids_b_l_DOTBTC = data['data']['b'] 
		qty_bids_b_l_DOTBTC = data['data']['B']
		price_asks_b_l_DOTBTC = data['data']['a'] 
		qty_asks_b_l_DOTBTC = data['data']['A'] 

		global symbol_b_g_DOTBTC 
		global price_bids_b_g_DOTBTC 
		global qty_bids_b_g_DOTBTC 
		global price_asks_b_g_DOTBTC 
		global qty_asks_b_g_DOTBTC 

		symbol_b_g_DOTBTC = symbol_b_l_DOTBTC 
		price_bids_b_g_DOTBTC = price_bids_b_l_DOTBTC 
		qty_bids_b_g_DOTBTC = qty_bids_b_l_DOTBTC 
		price_asks_b_g_DOTBTC = price_asks_b_l_DOTBTC 
		qty_asks_b_g_DOTBTC = qty_asks_b_l_DOTBTC 


def loop_DOTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamdotusdt}/{streamdotbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DOTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DOTUSDT).start()

def loop_DOTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DOTUSDT != 0.0 and qty_bids_a_g_DOTUSDT != 0.0 and price_asks_a_g_DOTUSDT != 0.0 and qty_asks_a_g_DOTUSDT != 0.0 and price_bids_b_g_DOTBTC != 0.0 and qty_bids_b_g_DOTBTC != 0.0 and price_asks_b_g_DOTBTC != 0.0 and qty_asks_b_g_DOTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DOTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DOTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DOTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DOTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DOTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DOTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DOTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DOTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DOTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DOTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DOTUSDT_Trade).start() 

streampaxgusdt = 'paxgusdt@bookTicker'
streampaxgbtc  = 'paxgbtc@bookTicker'

symbol_a_g_PAXGUSDT = 'PAXGUSDT' 
price_bids_a_g_PAXGUSDT = float(0.0) 
qty_bids_a_g_PAXGUSDT = float(0.0) 
price_asks_a_g_PAXGUSDT = float(0.0) 
qty_asks_a_g_PAXGUSDT = float(0.0) 

stepSize_PAXGUSDT = 0.00010000 

symbol_b_g_PAXGBTC = 'PAXGBTC' 
price_bids_b_g_PAXGBTC = float(0.0) 
qty_bids_b_g_PAXGBTC = float(0.0) 
price_asks_b_g_PAXGBTC = float(0.0) 
qty_asks_b_g_PAXGBTC = float(0.0) 

stepSize_PAXGBTC = 0.00010000 

def on_message_PAXGUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streampaxgusdt :
		symbol_a_l_PAXGUSDT = data['data']['s'] 
		price_bids_a_l_PAXGUSDT = data['data']['b'] 
		qty_bids_a_l_PAXGUSDT = data['data']['B'] 
		price_asks_a_l_PAXGUSDT = data['data']['a'] 
		qty_asks_a_l_PAXGUSDT = data['data']['A'] 

		global symbol_a_g_PAXGUSDT 
		global price_bids_a_g_PAXGUSDT 
		global qty_bids_a_g_PAXGUSDT 
		global price_asks_a_g_PAXGUSDT 
		global qty_asks_a_g_PAXGUSDT 

		symbol_a_g_PAXGUSDT = symbol_a_l_PAXGUSDT 
		price_bids_a_g_PAXGUSDT = price_bids_a_l_PAXGUSDT 
		qty_bids_a_g_PAXGUSDT = qty_bids_a_l_PAXGUSDT 
		price_asks_a_g_PAXGUSDT = price_asks_a_l_PAXGUSDT 
		qty_asks_a_g_PAXGUSDT = qty_asks_a_l_PAXGUSDT 

	if data['stream'] == streampaxgbtc :
		data = json.loads(message) 

		symbol_b_l_PAXGBTC = data['data']['s'] 
		price_bids_b_l_PAXGBTC = data['data']['b'] 
		qty_bids_b_l_PAXGBTC = data['data']['B']
		price_asks_b_l_PAXGBTC = data['data']['a'] 
		qty_asks_b_l_PAXGBTC = data['data']['A'] 

		global symbol_b_g_PAXGBTC 
		global price_bids_b_g_PAXGBTC 
		global qty_bids_b_g_PAXGBTC 
		global price_asks_b_g_PAXGBTC 
		global qty_asks_b_g_PAXGBTC 

		symbol_b_g_PAXGBTC = symbol_b_l_PAXGBTC 
		price_bids_b_g_PAXGBTC = price_bids_b_l_PAXGBTC 
		qty_bids_b_g_PAXGBTC = qty_bids_b_l_PAXGBTC 
		price_asks_b_g_PAXGBTC = price_asks_b_l_PAXGBTC 
		qty_asks_b_g_PAXGBTC = qty_asks_b_l_PAXGBTC 


def loop_PAXGUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streampaxgusdt}/{streampaxgbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_PAXGUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_PAXGUSDT).start()

def loop_PAXGUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_PAXGUSDT != 0.0 and qty_bids_a_g_PAXGUSDT != 0.0 and price_asks_a_g_PAXGUSDT != 0.0 and qty_asks_a_g_PAXGUSDT != 0.0 and price_bids_b_g_PAXGBTC != 0.0 and qty_bids_b_g_PAXGBTC != 0.0 and price_asks_b_g_PAXGBTC != 0.0 and qty_asks_b_g_PAXGBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_PAXGBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_PAXGBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_PAXGUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_PAXGUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_PAXGBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_PAXGBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_PAXGUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_PAXGUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_PAXGBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_PAXGBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_PAXGUSDT_Trade).start() 

streamtrbusdt = 'trbusdt@bookTicker'
streamtrbbtc  = 'trbbtc@bookTicker'

symbol_a_g_TRBUSDT = 'TRBUSDT' 
price_bids_a_g_TRBUSDT = float(0.0) 
qty_bids_a_g_TRBUSDT = float(0.0) 
price_asks_a_g_TRBUSDT = float(0.0) 
qty_asks_a_g_TRBUSDT = float(0.0) 

stepSize_TRBUSDT = 0.01000000 

symbol_b_g_TRBBTC = 'TRBBTC' 
price_bids_b_g_TRBBTC = float(0.0) 
qty_bids_b_g_TRBBTC = float(0.0) 
price_asks_b_g_TRBBTC = float(0.0) 
qty_asks_b_g_TRBBTC = float(0.0) 

stepSize_TRBBTC = 0.01000000 

def on_message_TRBUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamtrbusdt :
		symbol_a_l_TRBUSDT = data['data']['s'] 
		price_bids_a_l_TRBUSDT = data['data']['b'] 
		qty_bids_a_l_TRBUSDT = data['data']['B'] 
		price_asks_a_l_TRBUSDT = data['data']['a'] 
		qty_asks_a_l_TRBUSDT = data['data']['A'] 

		global symbol_a_g_TRBUSDT 
		global price_bids_a_g_TRBUSDT 
		global qty_bids_a_g_TRBUSDT 
		global price_asks_a_g_TRBUSDT 
		global qty_asks_a_g_TRBUSDT 

		symbol_a_g_TRBUSDT = symbol_a_l_TRBUSDT 
		price_bids_a_g_TRBUSDT = price_bids_a_l_TRBUSDT 
		qty_bids_a_g_TRBUSDT = qty_bids_a_l_TRBUSDT 
		price_asks_a_g_TRBUSDT = price_asks_a_l_TRBUSDT 
		qty_asks_a_g_TRBUSDT = qty_asks_a_l_TRBUSDT 

	if data['stream'] == streamtrbbtc :
		data = json.loads(message) 

		symbol_b_l_TRBBTC = data['data']['s'] 
		price_bids_b_l_TRBBTC = data['data']['b'] 
		qty_bids_b_l_TRBBTC = data['data']['B']
		price_asks_b_l_TRBBTC = data['data']['a'] 
		qty_asks_b_l_TRBBTC = data['data']['A'] 

		global symbol_b_g_TRBBTC 
		global price_bids_b_g_TRBBTC 
		global qty_bids_b_g_TRBBTC 
		global price_asks_b_g_TRBBTC 
		global qty_asks_b_g_TRBBTC 

		symbol_b_g_TRBBTC = symbol_b_l_TRBBTC 
		price_bids_b_g_TRBBTC = price_bids_b_l_TRBBTC 
		qty_bids_b_g_TRBBTC = qty_bids_b_l_TRBBTC 
		price_asks_b_g_TRBBTC = price_asks_b_l_TRBBTC 
		qty_asks_b_g_TRBBTC = qty_asks_b_l_TRBBTC 


def loop_TRBUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamtrbusdt}/{streamtrbbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_TRBUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_TRBUSDT).start()

def loop_TRBUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_TRBUSDT != 0.0 and qty_bids_a_g_TRBUSDT != 0.0 and price_asks_a_g_TRBUSDT != 0.0 and qty_asks_a_g_TRBUSDT != 0.0 and price_bids_b_g_TRBBTC != 0.0 and qty_bids_b_g_TRBBTC != 0.0 and price_asks_b_g_TRBBTC != 0.0 and qty_asks_b_g_TRBBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_TRBBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_TRBBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_TRBUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_TRBUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_TRBBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_TRBBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_TRBUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_TRBUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_TRBBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_TRBBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_TRBUSDT_Trade).start() 

streamsushiusdt = 'sushiusdt@bookTicker'
streamsushibtc  = 'sushibtc@bookTicker'

symbol_a_g_SUSHIUSDT = 'SUSHIUSDT' 
price_bids_a_g_SUSHIUSDT = float(0.0) 
qty_bids_a_g_SUSHIUSDT = float(0.0) 
price_asks_a_g_SUSHIUSDT = float(0.0) 
qty_asks_a_g_SUSHIUSDT = float(0.0) 

stepSize_SUSHIUSDT = 0.10000000 

symbol_b_g_SUSHIBTC = 'SUSHIBTC' 
price_bids_b_g_SUSHIBTC = float(0.0) 
qty_bids_b_g_SUSHIBTC = float(0.0) 
price_asks_b_g_SUSHIBTC = float(0.0) 
qty_asks_b_g_SUSHIBTC = float(0.0) 

stepSize_SUSHIBTC = 0.10000000 

def on_message_SUSHIUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamsushiusdt :
		symbol_a_l_SUSHIUSDT = data['data']['s'] 
		price_bids_a_l_SUSHIUSDT = data['data']['b'] 
		qty_bids_a_l_SUSHIUSDT = data['data']['B'] 
		price_asks_a_l_SUSHIUSDT = data['data']['a'] 
		qty_asks_a_l_SUSHIUSDT = data['data']['A'] 

		global symbol_a_g_SUSHIUSDT 
		global price_bids_a_g_SUSHIUSDT 
		global qty_bids_a_g_SUSHIUSDT 
		global price_asks_a_g_SUSHIUSDT 
		global qty_asks_a_g_SUSHIUSDT 

		symbol_a_g_SUSHIUSDT = symbol_a_l_SUSHIUSDT 
		price_bids_a_g_SUSHIUSDT = price_bids_a_l_SUSHIUSDT 
		qty_bids_a_g_SUSHIUSDT = qty_bids_a_l_SUSHIUSDT 
		price_asks_a_g_SUSHIUSDT = price_asks_a_l_SUSHIUSDT 
		qty_asks_a_g_SUSHIUSDT = qty_asks_a_l_SUSHIUSDT 

	if data['stream'] == streamsushibtc :
		data = json.loads(message) 

		symbol_b_l_SUSHIBTC = data['data']['s'] 
		price_bids_b_l_SUSHIBTC = data['data']['b'] 
		qty_bids_b_l_SUSHIBTC = data['data']['B']
		price_asks_b_l_SUSHIBTC = data['data']['a'] 
		qty_asks_b_l_SUSHIBTC = data['data']['A'] 

		global symbol_b_g_SUSHIBTC 
		global price_bids_b_g_SUSHIBTC 
		global qty_bids_b_g_SUSHIBTC 
		global price_asks_b_g_SUSHIBTC 
		global qty_asks_b_g_SUSHIBTC 

		symbol_b_g_SUSHIBTC = symbol_b_l_SUSHIBTC 
		price_bids_b_g_SUSHIBTC = price_bids_b_l_SUSHIBTC 
		qty_bids_b_g_SUSHIBTC = qty_bids_b_l_SUSHIBTC 
		price_asks_b_g_SUSHIBTC = price_asks_b_l_SUSHIBTC 
		qty_asks_b_g_SUSHIBTC = qty_asks_b_l_SUSHIBTC 


def loop_SUSHIUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamsushiusdt}/{streamsushibtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_SUSHIUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_SUSHIUSDT).start()

def loop_SUSHIUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_SUSHIUSDT != 0.0 and qty_bids_a_g_SUSHIUSDT != 0.0 and price_asks_a_g_SUSHIUSDT != 0.0 and qty_asks_a_g_SUSHIUSDT != 0.0 and price_bids_b_g_SUSHIBTC != 0.0 and qty_bids_b_g_SUSHIBTC != 0.0 and price_asks_b_g_SUSHIBTC != 0.0 and qty_asks_b_g_SUSHIBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_SUSHIBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_SUSHIBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_SUSHIUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_SUSHIUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_SUSHIBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_SUSHIBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_SUSHIUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_SUSHIUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_SUSHIBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_SUSHIBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_SUSHIUSDT_Trade).start() 

streamyfiiusdt = 'yfiiusdt@bookTicker'
streamyfiibtc  = 'yfiibtc@bookTicker'

symbol_a_g_YFIIUSDT = 'YFIIUSDT' 
price_bids_a_g_YFIIUSDT = float(0.0) 
qty_bids_a_g_YFIIUSDT = float(0.0) 
price_asks_a_g_YFIIUSDT = float(0.0) 
qty_asks_a_g_YFIIUSDT = float(0.0) 

stepSize_YFIIUSDT = 0.00010000 

symbol_b_g_YFIIBTC = 'YFIIBTC' 
price_bids_b_g_YFIIBTC = float(0.0) 
qty_bids_b_g_YFIIBTC = float(0.0) 
price_asks_b_g_YFIIBTC = float(0.0) 
qty_asks_b_g_YFIIBTC = float(0.0) 

stepSize_YFIIBTC = 0.00010000 

def on_message_YFIIUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamyfiiusdt :
		symbol_a_l_YFIIUSDT = data['data']['s'] 
		price_bids_a_l_YFIIUSDT = data['data']['b'] 
		qty_bids_a_l_YFIIUSDT = data['data']['B'] 
		price_asks_a_l_YFIIUSDT = data['data']['a'] 
		qty_asks_a_l_YFIIUSDT = data['data']['A'] 

		global symbol_a_g_YFIIUSDT 
		global price_bids_a_g_YFIIUSDT 
		global qty_bids_a_g_YFIIUSDT 
		global price_asks_a_g_YFIIUSDT 
		global qty_asks_a_g_YFIIUSDT 

		symbol_a_g_YFIIUSDT = symbol_a_l_YFIIUSDT 
		price_bids_a_g_YFIIUSDT = price_bids_a_l_YFIIUSDT 
		qty_bids_a_g_YFIIUSDT = qty_bids_a_l_YFIIUSDT 
		price_asks_a_g_YFIIUSDT = price_asks_a_l_YFIIUSDT 
		qty_asks_a_g_YFIIUSDT = qty_asks_a_l_YFIIUSDT 

	if data['stream'] == streamyfiibtc :
		data = json.loads(message) 

		symbol_b_l_YFIIBTC = data['data']['s'] 
		price_bids_b_l_YFIIBTC = data['data']['b'] 
		qty_bids_b_l_YFIIBTC = data['data']['B']
		price_asks_b_l_YFIIBTC = data['data']['a'] 
		qty_asks_b_l_YFIIBTC = data['data']['A'] 

		global symbol_b_g_YFIIBTC 
		global price_bids_b_g_YFIIBTC 
		global qty_bids_b_g_YFIIBTC 
		global price_asks_b_g_YFIIBTC 
		global qty_asks_b_g_YFIIBTC 

		symbol_b_g_YFIIBTC = symbol_b_l_YFIIBTC 
		price_bids_b_g_YFIIBTC = price_bids_b_l_YFIIBTC 
		qty_bids_b_g_YFIIBTC = qty_bids_b_l_YFIIBTC 
		price_asks_b_g_YFIIBTC = price_asks_b_l_YFIIBTC 
		qty_asks_b_g_YFIIBTC = qty_asks_b_l_YFIIBTC 


def loop_YFIIUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamyfiiusdt}/{streamyfiibtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_YFIIUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_YFIIUSDT).start()

def loop_YFIIUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_YFIIUSDT != 0.0 and qty_bids_a_g_YFIIUSDT != 0.0 and price_asks_a_g_YFIIUSDT != 0.0 and qty_asks_a_g_YFIIUSDT != 0.0 and price_bids_b_g_YFIIBTC != 0.0 and qty_bids_b_g_YFIIBTC != 0.0 and price_asks_b_g_YFIIBTC != 0.0 and qty_asks_b_g_YFIIBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_YFIIBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_YFIIBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_YFIIUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_YFIIUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_YFIIBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_YFIIBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_YFIIUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_YFIIUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_YFIIBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_YFIIBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_YFIIUSDT_Trade).start() 

streamksmusdt = 'ksmusdt@bookTicker'
streamksmbtc  = 'ksmbtc@bookTicker'

symbol_a_g_KSMUSDT = 'KSMUSDT' 
price_bids_a_g_KSMUSDT = float(0.0) 
qty_bids_a_g_KSMUSDT = float(0.0) 
price_asks_a_g_KSMUSDT = float(0.0) 
qty_asks_a_g_KSMUSDT = float(0.0) 

stepSize_KSMUSDT = 0.00100000 

symbol_b_g_KSMBTC = 'KSMBTC' 
price_bids_b_g_KSMBTC = float(0.0) 
qty_bids_b_g_KSMBTC = float(0.0) 
price_asks_b_g_KSMBTC = float(0.0) 
qty_asks_b_g_KSMBTC = float(0.0) 

stepSize_KSMBTC = 0.00100000 

def on_message_KSMUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamksmusdt :
		symbol_a_l_KSMUSDT = data['data']['s'] 
		price_bids_a_l_KSMUSDT = data['data']['b'] 
		qty_bids_a_l_KSMUSDT = data['data']['B'] 
		price_asks_a_l_KSMUSDT = data['data']['a'] 
		qty_asks_a_l_KSMUSDT = data['data']['A'] 

		global symbol_a_g_KSMUSDT 
		global price_bids_a_g_KSMUSDT 
		global qty_bids_a_g_KSMUSDT 
		global price_asks_a_g_KSMUSDT 
		global qty_asks_a_g_KSMUSDT 

		symbol_a_g_KSMUSDT = symbol_a_l_KSMUSDT 
		price_bids_a_g_KSMUSDT = price_bids_a_l_KSMUSDT 
		qty_bids_a_g_KSMUSDT = qty_bids_a_l_KSMUSDT 
		price_asks_a_g_KSMUSDT = price_asks_a_l_KSMUSDT 
		qty_asks_a_g_KSMUSDT = qty_asks_a_l_KSMUSDT 

	if data['stream'] == streamksmbtc :
		data = json.loads(message) 

		symbol_b_l_KSMBTC = data['data']['s'] 
		price_bids_b_l_KSMBTC = data['data']['b'] 
		qty_bids_b_l_KSMBTC = data['data']['B']
		price_asks_b_l_KSMBTC = data['data']['a'] 
		qty_asks_b_l_KSMBTC = data['data']['A'] 

		global symbol_b_g_KSMBTC 
		global price_bids_b_g_KSMBTC 
		global qty_bids_b_g_KSMBTC 
		global price_asks_b_g_KSMBTC 
		global qty_asks_b_g_KSMBTC 

		symbol_b_g_KSMBTC = symbol_b_l_KSMBTC 
		price_bids_b_g_KSMBTC = price_bids_b_l_KSMBTC 
		qty_bids_b_g_KSMBTC = qty_bids_b_l_KSMBTC 
		price_asks_b_g_KSMBTC = price_asks_b_l_KSMBTC 
		qty_asks_b_g_KSMBTC = qty_asks_b_l_KSMBTC 


def loop_KSMUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamksmusdt}/{streamksmbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_KSMUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_KSMUSDT).start()

def loop_KSMUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_KSMUSDT != 0.0 and qty_bids_a_g_KSMUSDT != 0.0 and price_asks_a_g_KSMUSDT != 0.0 and qty_asks_a_g_KSMUSDT != 0.0 and price_bids_b_g_KSMBTC != 0.0 and qty_bids_b_g_KSMBTC != 0.0 and price_asks_b_g_KSMBTC != 0.0 and qty_asks_b_g_KSMBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_KSMBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_KSMBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_KSMUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_KSMUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_KSMBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_KSMBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_KSMUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_KSMUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_KSMBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_KSMBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_KSMUSDT_Trade).start() 

streamegldusdt = 'egldusdt@bookTicker'
streamegldbtc  = 'egldbtc@bookTicker'

symbol_a_g_EGLDUSDT = 'EGLDUSDT' 
price_bids_a_g_EGLDUSDT = float(0.0) 
qty_bids_a_g_EGLDUSDT = float(0.0) 
price_asks_a_g_EGLDUSDT = float(0.0) 
qty_asks_a_g_EGLDUSDT = float(0.0) 

stepSize_EGLDUSDT = 0.01000000 

symbol_b_g_EGLDBTC = 'EGLDBTC' 
price_bids_b_g_EGLDBTC = float(0.0) 
qty_bids_b_g_EGLDBTC = float(0.0) 
price_asks_b_g_EGLDBTC = float(0.0) 
qty_asks_b_g_EGLDBTC = float(0.0) 

stepSize_EGLDBTC = 0.01000000 

def on_message_EGLDUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamegldusdt :
		symbol_a_l_EGLDUSDT = data['data']['s'] 
		price_bids_a_l_EGLDUSDT = data['data']['b'] 
		qty_bids_a_l_EGLDUSDT = data['data']['B'] 
		price_asks_a_l_EGLDUSDT = data['data']['a'] 
		qty_asks_a_l_EGLDUSDT = data['data']['A'] 

		global symbol_a_g_EGLDUSDT 
		global price_bids_a_g_EGLDUSDT 
		global qty_bids_a_g_EGLDUSDT 
		global price_asks_a_g_EGLDUSDT 
		global qty_asks_a_g_EGLDUSDT 

		symbol_a_g_EGLDUSDT = symbol_a_l_EGLDUSDT 
		price_bids_a_g_EGLDUSDT = price_bids_a_l_EGLDUSDT 
		qty_bids_a_g_EGLDUSDT = qty_bids_a_l_EGLDUSDT 
		price_asks_a_g_EGLDUSDT = price_asks_a_l_EGLDUSDT 
		qty_asks_a_g_EGLDUSDT = qty_asks_a_l_EGLDUSDT 

	if data['stream'] == streamegldbtc :
		data = json.loads(message) 

		symbol_b_l_EGLDBTC = data['data']['s'] 
		price_bids_b_l_EGLDBTC = data['data']['b'] 
		qty_bids_b_l_EGLDBTC = data['data']['B']
		price_asks_b_l_EGLDBTC = data['data']['a'] 
		qty_asks_b_l_EGLDBTC = data['data']['A'] 

		global symbol_b_g_EGLDBTC 
		global price_bids_b_g_EGLDBTC 
		global qty_bids_b_g_EGLDBTC 
		global price_asks_b_g_EGLDBTC 
		global qty_asks_b_g_EGLDBTC 

		symbol_b_g_EGLDBTC = symbol_b_l_EGLDBTC 
		price_bids_b_g_EGLDBTC = price_bids_b_l_EGLDBTC 
		qty_bids_b_g_EGLDBTC = qty_bids_b_l_EGLDBTC 
		price_asks_b_g_EGLDBTC = price_asks_b_l_EGLDBTC 
		qty_asks_b_g_EGLDBTC = qty_asks_b_l_EGLDBTC 


def loop_EGLDUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamegldusdt}/{streamegldbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_EGLDUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_EGLDUSDT).start()

def loop_EGLDUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_EGLDUSDT != 0.0 and qty_bids_a_g_EGLDUSDT != 0.0 and price_asks_a_g_EGLDUSDT != 0.0 and qty_asks_a_g_EGLDUSDT != 0.0 and price_bids_b_g_EGLDBTC != 0.0 and qty_bids_b_g_EGLDBTC != 0.0 and price_asks_b_g_EGLDBTC != 0.0 and qty_asks_b_g_EGLDBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_EGLDBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_EGLDBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_EGLDUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_EGLDUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_EGLDBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_EGLDBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_EGLDUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_EGLDUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_EGLDBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_EGLDBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_EGLDUSDT_Trade).start() 

streamdiausdt = 'diausdt@bookTicker'
streamdiabtc  = 'diabtc@bookTicker'

symbol_a_g_DIAUSDT = 'DIAUSDT' 
price_bids_a_g_DIAUSDT = float(0.0) 
qty_bids_a_g_DIAUSDT = float(0.0) 
price_asks_a_g_DIAUSDT = float(0.0) 
qty_asks_a_g_DIAUSDT = float(0.0) 

stepSize_DIAUSDT = 0.10000000 

symbol_b_g_DIABTC = 'DIABTC' 
price_bids_b_g_DIABTC = float(0.0) 
qty_bids_b_g_DIABTC = float(0.0) 
price_asks_b_g_DIABTC = float(0.0) 
qty_asks_b_g_DIABTC = float(0.0) 

stepSize_DIABTC = 0.10000000 

def on_message_DIAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamdiausdt :
		symbol_a_l_DIAUSDT = data['data']['s'] 
		price_bids_a_l_DIAUSDT = data['data']['b'] 
		qty_bids_a_l_DIAUSDT = data['data']['B'] 
		price_asks_a_l_DIAUSDT = data['data']['a'] 
		qty_asks_a_l_DIAUSDT = data['data']['A'] 

		global symbol_a_g_DIAUSDT 
		global price_bids_a_g_DIAUSDT 
		global qty_bids_a_g_DIAUSDT 
		global price_asks_a_g_DIAUSDT 
		global qty_asks_a_g_DIAUSDT 

		symbol_a_g_DIAUSDT = symbol_a_l_DIAUSDT 
		price_bids_a_g_DIAUSDT = price_bids_a_l_DIAUSDT 
		qty_bids_a_g_DIAUSDT = qty_bids_a_l_DIAUSDT 
		price_asks_a_g_DIAUSDT = price_asks_a_l_DIAUSDT 
		qty_asks_a_g_DIAUSDT = qty_asks_a_l_DIAUSDT 

	if data['stream'] == streamdiabtc :
		data = json.loads(message) 

		symbol_b_l_DIABTC = data['data']['s'] 
		price_bids_b_l_DIABTC = data['data']['b'] 
		qty_bids_b_l_DIABTC = data['data']['B']
		price_asks_b_l_DIABTC = data['data']['a'] 
		qty_asks_b_l_DIABTC = data['data']['A'] 

		global symbol_b_g_DIABTC 
		global price_bids_b_g_DIABTC 
		global qty_bids_b_g_DIABTC 
		global price_asks_b_g_DIABTC 
		global qty_asks_b_g_DIABTC 

		symbol_b_g_DIABTC = symbol_b_l_DIABTC 
		price_bids_b_g_DIABTC = price_bids_b_l_DIABTC 
		qty_bids_b_g_DIABTC = qty_bids_b_l_DIABTC 
		price_asks_b_g_DIABTC = price_asks_b_l_DIABTC 
		qty_asks_b_g_DIABTC = qty_asks_b_l_DIABTC 


def loop_DIAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamdiausdt}/{streamdiabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DIAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DIAUSDT).start()

def loop_DIAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DIAUSDT != 0.0 and qty_bids_a_g_DIAUSDT != 0.0 and price_asks_a_g_DIAUSDT != 0.0 and qty_asks_a_g_DIAUSDT != 0.0 and price_bids_b_g_DIABTC != 0.0 and qty_bids_b_g_DIABTC != 0.0 and price_asks_b_g_DIABTC != 0.0 and qty_asks_b_g_DIABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DIABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DIABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DIAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DIAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DIABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DIABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DIAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DIAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DIABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DIABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DIAUSDT_Trade).start() 

streamruneusdt = 'runeusdt@bookTicker'
streamrunebtc  = 'runebtc@bookTicker'

symbol_a_g_RUNEUSDT = 'RUNEUSDT' 
price_bids_a_g_RUNEUSDT = float(0.0) 
qty_bids_a_g_RUNEUSDT = float(0.0) 
price_asks_a_g_RUNEUSDT = float(0.0) 
qty_asks_a_g_RUNEUSDT = float(0.0) 

stepSize_RUNEUSDT = 0.10000000 

symbol_b_g_RUNEBTC = 'RUNEBTC' 
price_bids_b_g_RUNEBTC = float(0.0) 
qty_bids_b_g_RUNEBTC = float(0.0) 
price_asks_b_g_RUNEBTC = float(0.0) 
qty_asks_b_g_RUNEBTC = float(0.0) 

stepSize_RUNEBTC = 0.10000000 

def on_message_RUNEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamruneusdt :
		symbol_a_l_RUNEUSDT = data['data']['s'] 
		price_bids_a_l_RUNEUSDT = data['data']['b'] 
		qty_bids_a_l_RUNEUSDT = data['data']['B'] 
		price_asks_a_l_RUNEUSDT = data['data']['a'] 
		qty_asks_a_l_RUNEUSDT = data['data']['A'] 

		global symbol_a_g_RUNEUSDT 
		global price_bids_a_g_RUNEUSDT 
		global qty_bids_a_g_RUNEUSDT 
		global price_asks_a_g_RUNEUSDT 
		global qty_asks_a_g_RUNEUSDT 

		symbol_a_g_RUNEUSDT = symbol_a_l_RUNEUSDT 
		price_bids_a_g_RUNEUSDT = price_bids_a_l_RUNEUSDT 
		qty_bids_a_g_RUNEUSDT = qty_bids_a_l_RUNEUSDT 
		price_asks_a_g_RUNEUSDT = price_asks_a_l_RUNEUSDT 
		qty_asks_a_g_RUNEUSDT = qty_asks_a_l_RUNEUSDT 

	if data['stream'] == streamrunebtc :
		data = json.loads(message) 

		symbol_b_l_RUNEBTC = data['data']['s'] 
		price_bids_b_l_RUNEBTC = data['data']['b'] 
		qty_bids_b_l_RUNEBTC = data['data']['B']
		price_asks_b_l_RUNEBTC = data['data']['a'] 
		qty_asks_b_l_RUNEBTC = data['data']['A'] 

		global symbol_b_g_RUNEBTC 
		global price_bids_b_g_RUNEBTC 
		global qty_bids_b_g_RUNEBTC 
		global price_asks_b_g_RUNEBTC 
		global qty_asks_b_g_RUNEBTC 

		symbol_b_g_RUNEBTC = symbol_b_l_RUNEBTC 
		price_bids_b_g_RUNEBTC = price_bids_b_l_RUNEBTC 
		qty_bids_b_g_RUNEBTC = qty_bids_b_l_RUNEBTC 
		price_asks_b_g_RUNEBTC = price_asks_b_l_RUNEBTC 
		qty_asks_b_g_RUNEBTC = qty_asks_b_l_RUNEBTC 


def loop_RUNEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamruneusdt}/{streamrunebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_RUNEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_RUNEUSDT).start()

def loop_RUNEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_RUNEUSDT != 0.0 and qty_bids_a_g_RUNEUSDT != 0.0 and price_asks_a_g_RUNEUSDT != 0.0 and qty_asks_a_g_RUNEUSDT != 0.0 and price_bids_b_g_RUNEBTC != 0.0 and qty_bids_b_g_RUNEBTC != 0.0 and price_asks_b_g_RUNEBTC != 0.0 and qty_asks_b_g_RUNEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_RUNEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_RUNEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_RUNEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_RUNEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_RUNEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_RUNEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_RUNEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_RUNEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_RUNEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_RUNEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_RUNEUSDT_Trade).start() 

streamfiousdt = 'fiousdt@bookTicker'
streamfiobtc  = 'fiobtc@bookTicker'

symbol_a_g_FIOUSDT = 'FIOUSDT' 
price_bids_a_g_FIOUSDT = float(0.0) 
qty_bids_a_g_FIOUSDT = float(0.0) 
price_asks_a_g_FIOUSDT = float(0.0) 
qty_asks_a_g_FIOUSDT = float(0.0) 

stepSize_FIOUSDT = 1.00000000 

symbol_b_g_FIOBTC = 'FIOBTC' 
price_bids_b_g_FIOBTC = float(0.0) 
qty_bids_b_g_FIOBTC = float(0.0) 
price_asks_b_g_FIOBTC = float(0.0) 
qty_asks_b_g_FIOBTC = float(0.0) 

stepSize_FIOBTC = 1.00000000 

def on_message_FIOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamfiousdt :
		symbol_a_l_FIOUSDT = data['data']['s'] 
		price_bids_a_l_FIOUSDT = data['data']['b'] 
		qty_bids_a_l_FIOUSDT = data['data']['B'] 
		price_asks_a_l_FIOUSDT = data['data']['a'] 
		qty_asks_a_l_FIOUSDT = data['data']['A'] 

		global symbol_a_g_FIOUSDT 
		global price_bids_a_g_FIOUSDT 
		global qty_bids_a_g_FIOUSDT 
		global price_asks_a_g_FIOUSDT 
		global qty_asks_a_g_FIOUSDT 

		symbol_a_g_FIOUSDT = symbol_a_l_FIOUSDT 
		price_bids_a_g_FIOUSDT = price_bids_a_l_FIOUSDT 
		qty_bids_a_g_FIOUSDT = qty_bids_a_l_FIOUSDT 
		price_asks_a_g_FIOUSDT = price_asks_a_l_FIOUSDT 
		qty_asks_a_g_FIOUSDT = qty_asks_a_l_FIOUSDT 

	if data['stream'] == streamfiobtc :
		data = json.loads(message) 

		symbol_b_l_FIOBTC = data['data']['s'] 
		price_bids_b_l_FIOBTC = data['data']['b'] 
		qty_bids_b_l_FIOBTC = data['data']['B']
		price_asks_b_l_FIOBTC = data['data']['a'] 
		qty_asks_b_l_FIOBTC = data['data']['A'] 

		global symbol_b_g_FIOBTC 
		global price_bids_b_g_FIOBTC 
		global qty_bids_b_g_FIOBTC 
		global price_asks_b_g_FIOBTC 
		global qty_asks_b_g_FIOBTC 

		symbol_b_g_FIOBTC = symbol_b_l_FIOBTC 
		price_bids_b_g_FIOBTC = price_bids_b_l_FIOBTC 
		qty_bids_b_g_FIOBTC = qty_bids_b_l_FIOBTC 
		price_asks_b_g_FIOBTC = price_asks_b_l_FIOBTC 
		qty_asks_b_g_FIOBTC = qty_asks_b_l_FIOBTC 


def loop_FIOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamfiousdt}/{streamfiobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FIOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FIOUSDT).start()

def loop_FIOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FIOUSDT != 0.0 and qty_bids_a_g_FIOUSDT != 0.0 and price_asks_a_g_FIOUSDT != 0.0 and qty_asks_a_g_FIOUSDT != 0.0 and price_bids_b_g_FIOBTC != 0.0 and qty_bids_b_g_FIOBTC != 0.0 and price_asks_b_g_FIOBTC != 0.0 and qty_asks_b_g_FIOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FIOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FIOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FIOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FIOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FIOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FIOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FIOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FIOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FIOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FIOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FIOUSDT_Trade).start() 

streamumausdt = 'umausdt@bookTicker'
streamumabtc  = 'umabtc@bookTicker'

symbol_a_g_UMAUSDT = 'UMAUSDT' 
price_bids_a_g_UMAUSDT = float(0.0) 
qty_bids_a_g_UMAUSDT = float(0.0) 
price_asks_a_g_UMAUSDT = float(0.0) 
qty_asks_a_g_UMAUSDT = float(0.0) 

stepSize_UMAUSDT = 0.10000000 

symbol_b_g_UMABTC = 'UMABTC' 
price_bids_b_g_UMABTC = float(0.0) 
qty_bids_b_g_UMABTC = float(0.0) 
price_asks_b_g_UMABTC = float(0.0) 
qty_asks_b_g_UMABTC = float(0.0) 

stepSize_UMABTC = 0.10000000 

def on_message_UMAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamumausdt :
		symbol_a_l_UMAUSDT = data['data']['s'] 
		price_bids_a_l_UMAUSDT = data['data']['b'] 
		qty_bids_a_l_UMAUSDT = data['data']['B'] 
		price_asks_a_l_UMAUSDT = data['data']['a'] 
		qty_asks_a_l_UMAUSDT = data['data']['A'] 

		global symbol_a_g_UMAUSDT 
		global price_bids_a_g_UMAUSDT 
		global qty_bids_a_g_UMAUSDT 
		global price_asks_a_g_UMAUSDT 
		global qty_asks_a_g_UMAUSDT 

		symbol_a_g_UMAUSDT = symbol_a_l_UMAUSDT 
		price_bids_a_g_UMAUSDT = price_bids_a_l_UMAUSDT 
		qty_bids_a_g_UMAUSDT = qty_bids_a_l_UMAUSDT 
		price_asks_a_g_UMAUSDT = price_asks_a_l_UMAUSDT 
		qty_asks_a_g_UMAUSDT = qty_asks_a_l_UMAUSDT 

	if data['stream'] == streamumabtc :
		data = json.loads(message) 

		symbol_b_l_UMABTC = data['data']['s'] 
		price_bids_b_l_UMABTC = data['data']['b'] 
		qty_bids_b_l_UMABTC = data['data']['B']
		price_asks_b_l_UMABTC = data['data']['a'] 
		qty_asks_b_l_UMABTC = data['data']['A'] 

		global symbol_b_g_UMABTC 
		global price_bids_b_g_UMABTC 
		global qty_bids_b_g_UMABTC 
		global price_asks_b_g_UMABTC 
		global qty_asks_b_g_UMABTC 

		symbol_b_g_UMABTC = symbol_b_l_UMABTC 
		price_bids_b_g_UMABTC = price_bids_b_l_UMABTC 
		qty_bids_b_g_UMABTC = qty_bids_b_l_UMABTC 
		price_asks_b_g_UMABTC = price_asks_b_l_UMABTC 
		qty_asks_b_g_UMABTC = qty_asks_b_l_UMABTC 


def loop_UMAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamumausdt}/{streamumabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_UMAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_UMAUSDT).start()

def loop_UMAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_UMAUSDT != 0.0 and qty_bids_a_g_UMAUSDT != 0.0 and price_asks_a_g_UMAUSDT != 0.0 and qty_asks_a_g_UMAUSDT != 0.0 and price_bids_b_g_UMABTC != 0.0 and qty_bids_b_g_UMABTC != 0.0 and price_asks_b_g_UMABTC != 0.0 and qty_asks_b_g_UMABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_UMABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_UMABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_UMAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_UMAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_UMABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_UMABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_UMAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_UMAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_UMABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_UMABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_UMAUSDT_Trade).start() 

streambelusdt = 'belusdt@bookTicker'
streambelbtc  = 'belbtc@bookTicker'

symbol_a_g_BELUSDT = 'BELUSDT' 
price_bids_a_g_BELUSDT = float(0.0) 
qty_bids_a_g_BELUSDT = float(0.0) 
price_asks_a_g_BELUSDT = float(0.0) 
qty_asks_a_g_BELUSDT = float(0.0) 

stepSize_BELUSDT = 0.10000000 

symbol_b_g_BELBTC = 'BELBTC' 
price_bids_b_g_BELBTC = float(0.0) 
qty_bids_b_g_BELBTC = float(0.0) 
price_asks_b_g_BELBTC = float(0.0) 
qty_asks_b_g_BELBTC = float(0.0) 

stepSize_BELBTC = 0.10000000 

def on_message_BELUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambelusdt :
		symbol_a_l_BELUSDT = data['data']['s'] 
		price_bids_a_l_BELUSDT = data['data']['b'] 
		qty_bids_a_l_BELUSDT = data['data']['B'] 
		price_asks_a_l_BELUSDT = data['data']['a'] 
		qty_asks_a_l_BELUSDT = data['data']['A'] 

		global symbol_a_g_BELUSDT 
		global price_bids_a_g_BELUSDT 
		global qty_bids_a_g_BELUSDT 
		global price_asks_a_g_BELUSDT 
		global qty_asks_a_g_BELUSDT 

		symbol_a_g_BELUSDT = symbol_a_l_BELUSDT 
		price_bids_a_g_BELUSDT = price_bids_a_l_BELUSDT 
		qty_bids_a_g_BELUSDT = qty_bids_a_l_BELUSDT 
		price_asks_a_g_BELUSDT = price_asks_a_l_BELUSDT 
		qty_asks_a_g_BELUSDT = qty_asks_a_l_BELUSDT 

	if data['stream'] == streambelbtc :
		data = json.loads(message) 

		symbol_b_l_BELBTC = data['data']['s'] 
		price_bids_b_l_BELBTC = data['data']['b'] 
		qty_bids_b_l_BELBTC = data['data']['B']
		price_asks_b_l_BELBTC = data['data']['a'] 
		qty_asks_b_l_BELBTC = data['data']['A'] 

		global symbol_b_g_BELBTC 
		global price_bids_b_g_BELBTC 
		global qty_bids_b_g_BELBTC 
		global price_asks_b_g_BELBTC 
		global qty_asks_b_g_BELBTC 

		symbol_b_g_BELBTC = symbol_b_l_BELBTC 
		price_bids_b_g_BELBTC = price_bids_b_l_BELBTC 
		qty_bids_b_g_BELBTC = qty_bids_b_l_BELBTC 
		price_asks_b_g_BELBTC = price_asks_b_l_BELBTC 
		qty_asks_b_g_BELBTC = qty_asks_b_l_BELBTC 


def loop_BELUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambelusdt}/{streambelbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BELUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BELUSDT).start()

def loop_BELUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BELUSDT != 0.0 and qty_bids_a_g_BELUSDT != 0.0 and price_asks_a_g_BELUSDT != 0.0 and qty_asks_a_g_BELUSDT != 0.0 and price_bids_b_g_BELBTC != 0.0 and qty_bids_b_g_BELBTC != 0.0 and price_asks_b_g_BELBTC != 0.0 and qty_asks_b_g_BELBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BELBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BELBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BELUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BELUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BELBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BELBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BELUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BELUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BELBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BELBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BELUSDT_Trade).start() 

streamwingusdt = 'wingusdt@bookTicker'
streamwingbtc  = 'wingbtc@bookTicker'

symbol_a_g_WINGUSDT = 'WINGUSDT' 
price_bids_a_g_WINGUSDT = float(0.0) 
qty_bids_a_g_WINGUSDT = float(0.0) 
price_asks_a_g_WINGUSDT = float(0.0) 
qty_asks_a_g_WINGUSDT = float(0.0) 

stepSize_WINGUSDT = 0.01000000 

symbol_b_g_WINGBTC = 'WINGBTC' 
price_bids_b_g_WINGBTC = float(0.0) 
qty_bids_b_g_WINGBTC = float(0.0) 
price_asks_b_g_WINGBTC = float(0.0) 
qty_asks_b_g_WINGBTC = float(0.0) 

stepSize_WINGBTC = 0.01000000 

def on_message_WINGUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamwingusdt :
		symbol_a_l_WINGUSDT = data['data']['s'] 
		price_bids_a_l_WINGUSDT = data['data']['b'] 
		qty_bids_a_l_WINGUSDT = data['data']['B'] 
		price_asks_a_l_WINGUSDT = data['data']['a'] 
		qty_asks_a_l_WINGUSDT = data['data']['A'] 

		global symbol_a_g_WINGUSDT 
		global price_bids_a_g_WINGUSDT 
		global qty_bids_a_g_WINGUSDT 
		global price_asks_a_g_WINGUSDT 
		global qty_asks_a_g_WINGUSDT 

		symbol_a_g_WINGUSDT = symbol_a_l_WINGUSDT 
		price_bids_a_g_WINGUSDT = price_bids_a_l_WINGUSDT 
		qty_bids_a_g_WINGUSDT = qty_bids_a_l_WINGUSDT 
		price_asks_a_g_WINGUSDT = price_asks_a_l_WINGUSDT 
		qty_asks_a_g_WINGUSDT = qty_asks_a_l_WINGUSDT 

	if data['stream'] == streamwingbtc :
		data = json.loads(message) 

		symbol_b_l_WINGBTC = data['data']['s'] 
		price_bids_b_l_WINGBTC = data['data']['b'] 
		qty_bids_b_l_WINGBTC = data['data']['B']
		price_asks_b_l_WINGBTC = data['data']['a'] 
		qty_asks_b_l_WINGBTC = data['data']['A'] 

		global symbol_b_g_WINGBTC 
		global price_bids_b_g_WINGBTC 
		global qty_bids_b_g_WINGBTC 
		global price_asks_b_g_WINGBTC 
		global qty_asks_b_g_WINGBTC 

		symbol_b_g_WINGBTC = symbol_b_l_WINGBTC 
		price_bids_b_g_WINGBTC = price_bids_b_l_WINGBTC 
		qty_bids_b_g_WINGBTC = qty_bids_b_l_WINGBTC 
		price_asks_b_g_WINGBTC = price_asks_b_l_WINGBTC 
		qty_asks_b_g_WINGBTC = qty_asks_b_l_WINGBTC 


def loop_WINGUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamwingusdt}/{streamwingbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_WINGUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_WINGUSDT).start()

def loop_WINGUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_WINGUSDT != 0.0 and qty_bids_a_g_WINGUSDT != 0.0 and price_asks_a_g_WINGUSDT != 0.0 and qty_asks_a_g_WINGUSDT != 0.0 and price_bids_b_g_WINGBTC != 0.0 and qty_bids_b_g_WINGBTC != 0.0 and price_asks_b_g_WINGBTC != 0.0 and qty_asks_b_g_WINGBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_WINGBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_WINGBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_WINGUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_WINGUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_WINGBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_WINGBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_WINGUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_WINGUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_WINGBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_WINGBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_WINGUSDT_Trade).start() 

streamuniusdt = 'uniusdt@bookTicker'
streamunibtc  = 'unibtc@bookTicker'

symbol_a_g_UNIUSDT = 'UNIUSDT' 
price_bids_a_g_UNIUSDT = float(0.0) 
qty_bids_a_g_UNIUSDT = float(0.0) 
price_asks_a_g_UNIUSDT = float(0.0) 
qty_asks_a_g_UNIUSDT = float(0.0) 

stepSize_UNIUSDT = 0.01000000 

symbol_b_g_UNIBTC = 'UNIBTC' 
price_bids_b_g_UNIBTC = float(0.0) 
qty_bids_b_g_UNIBTC = float(0.0) 
price_asks_b_g_UNIBTC = float(0.0) 
qty_asks_b_g_UNIBTC = float(0.0) 

stepSize_UNIBTC = 0.01000000 

def on_message_UNIUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamuniusdt :
		symbol_a_l_UNIUSDT = data['data']['s'] 
		price_bids_a_l_UNIUSDT = data['data']['b'] 
		qty_bids_a_l_UNIUSDT = data['data']['B'] 
		price_asks_a_l_UNIUSDT = data['data']['a'] 
		qty_asks_a_l_UNIUSDT = data['data']['A'] 

		global symbol_a_g_UNIUSDT 
		global price_bids_a_g_UNIUSDT 
		global qty_bids_a_g_UNIUSDT 
		global price_asks_a_g_UNIUSDT 
		global qty_asks_a_g_UNIUSDT 

		symbol_a_g_UNIUSDT = symbol_a_l_UNIUSDT 
		price_bids_a_g_UNIUSDT = price_bids_a_l_UNIUSDT 
		qty_bids_a_g_UNIUSDT = qty_bids_a_l_UNIUSDT 
		price_asks_a_g_UNIUSDT = price_asks_a_l_UNIUSDT 
		qty_asks_a_g_UNIUSDT = qty_asks_a_l_UNIUSDT 

	if data['stream'] == streamunibtc :
		data = json.loads(message) 

		symbol_b_l_UNIBTC = data['data']['s'] 
		price_bids_b_l_UNIBTC = data['data']['b'] 
		qty_bids_b_l_UNIBTC = data['data']['B']
		price_asks_b_l_UNIBTC = data['data']['a'] 
		qty_asks_b_l_UNIBTC = data['data']['A'] 

		global symbol_b_g_UNIBTC 
		global price_bids_b_g_UNIBTC 
		global qty_bids_b_g_UNIBTC 
		global price_asks_b_g_UNIBTC 
		global qty_asks_b_g_UNIBTC 

		symbol_b_g_UNIBTC = symbol_b_l_UNIBTC 
		price_bids_b_g_UNIBTC = price_bids_b_l_UNIBTC 
		qty_bids_b_g_UNIBTC = qty_bids_b_l_UNIBTC 
		price_asks_b_g_UNIBTC = price_asks_b_l_UNIBTC 
		qty_asks_b_g_UNIBTC = qty_asks_b_l_UNIBTC 


def loop_UNIUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamuniusdt}/{streamunibtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_UNIUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_UNIUSDT).start()

def loop_UNIUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_UNIUSDT != 0.0 and qty_bids_a_g_UNIUSDT != 0.0 and price_asks_a_g_UNIUSDT != 0.0 and qty_asks_a_g_UNIUSDT != 0.0 and price_bids_b_g_UNIBTC != 0.0 and qty_bids_b_g_UNIBTC != 0.0 and price_asks_b_g_UNIBTC != 0.0 and qty_asks_b_g_UNIBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_UNIBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_UNIBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_UNIUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_UNIUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_UNIBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_UNIBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_UNIUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_UNIUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_UNIBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_UNIBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_UNIUSDT_Trade).start() 

streamoxtusdt = 'oxtusdt@bookTicker'
streamoxtbtc  = 'oxtbtc@bookTicker'

symbol_a_g_OXTUSDT = 'OXTUSDT' 
price_bids_a_g_OXTUSDT = float(0.0) 
qty_bids_a_g_OXTUSDT = float(0.0) 
price_asks_a_g_OXTUSDT = float(0.0) 
qty_asks_a_g_OXTUSDT = float(0.0) 

stepSize_OXTUSDT = 1.00000000 

symbol_b_g_OXTBTC = 'OXTBTC' 
price_bids_b_g_OXTBTC = float(0.0) 
qty_bids_b_g_OXTBTC = float(0.0) 
price_asks_b_g_OXTBTC = float(0.0) 
qty_asks_b_g_OXTBTC = float(0.0) 

stepSize_OXTBTC = 1.00000000 

def on_message_OXTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamoxtusdt :
		symbol_a_l_OXTUSDT = data['data']['s'] 
		price_bids_a_l_OXTUSDT = data['data']['b'] 
		qty_bids_a_l_OXTUSDT = data['data']['B'] 
		price_asks_a_l_OXTUSDT = data['data']['a'] 
		qty_asks_a_l_OXTUSDT = data['data']['A'] 

		global symbol_a_g_OXTUSDT 
		global price_bids_a_g_OXTUSDT 
		global qty_bids_a_g_OXTUSDT 
		global price_asks_a_g_OXTUSDT 
		global qty_asks_a_g_OXTUSDT 

		symbol_a_g_OXTUSDT = symbol_a_l_OXTUSDT 
		price_bids_a_g_OXTUSDT = price_bids_a_l_OXTUSDT 
		qty_bids_a_g_OXTUSDT = qty_bids_a_l_OXTUSDT 
		price_asks_a_g_OXTUSDT = price_asks_a_l_OXTUSDT 
		qty_asks_a_g_OXTUSDT = qty_asks_a_l_OXTUSDT 

	if data['stream'] == streamoxtbtc :
		data = json.loads(message) 

		symbol_b_l_OXTBTC = data['data']['s'] 
		price_bids_b_l_OXTBTC = data['data']['b'] 
		qty_bids_b_l_OXTBTC = data['data']['B']
		price_asks_b_l_OXTBTC = data['data']['a'] 
		qty_asks_b_l_OXTBTC = data['data']['A'] 

		global symbol_b_g_OXTBTC 
		global price_bids_b_g_OXTBTC 
		global qty_bids_b_g_OXTBTC 
		global price_asks_b_g_OXTBTC 
		global qty_asks_b_g_OXTBTC 

		symbol_b_g_OXTBTC = symbol_b_l_OXTBTC 
		price_bids_b_g_OXTBTC = price_bids_b_l_OXTBTC 
		qty_bids_b_g_OXTBTC = qty_bids_b_l_OXTBTC 
		price_asks_b_g_OXTBTC = price_asks_b_l_OXTBTC 
		qty_asks_b_g_OXTBTC = qty_asks_b_l_OXTBTC 


def loop_OXTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamoxtusdt}/{streamoxtbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_OXTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_OXTUSDT).start()

def loop_OXTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_OXTUSDT != 0.0 and qty_bids_a_g_OXTUSDT != 0.0 and price_asks_a_g_OXTUSDT != 0.0 and qty_asks_a_g_OXTUSDT != 0.0 and price_bids_b_g_OXTBTC != 0.0 and qty_bids_b_g_OXTBTC != 0.0 and price_asks_b_g_OXTBTC != 0.0 and qty_asks_b_g_OXTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_OXTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_OXTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_OXTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_OXTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_OXTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_OXTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_OXTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_OXTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_OXTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_OXTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_OXTUSDT_Trade).start() 

streamavaxusdt = 'avaxusdt@bookTicker'
streamavaxbtc  = 'avaxbtc@bookTicker'

symbol_a_g_AVAXUSDT = 'AVAXUSDT' 
price_bids_a_g_AVAXUSDT = float(0.0) 
qty_bids_a_g_AVAXUSDT = float(0.0) 
price_asks_a_g_AVAXUSDT = float(0.0) 
qty_asks_a_g_AVAXUSDT = float(0.0) 

stepSize_AVAXUSDT = 0.01000000 

symbol_b_g_AVAXBTC = 'AVAXBTC' 
price_bids_b_g_AVAXBTC = float(0.0) 
qty_bids_b_g_AVAXBTC = float(0.0) 
price_asks_b_g_AVAXBTC = float(0.0) 
qty_asks_b_g_AVAXBTC = float(0.0) 

stepSize_AVAXBTC = 0.01000000 

def on_message_AVAXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamavaxusdt :
		symbol_a_l_AVAXUSDT = data['data']['s'] 
		price_bids_a_l_AVAXUSDT = data['data']['b'] 
		qty_bids_a_l_AVAXUSDT = data['data']['B'] 
		price_asks_a_l_AVAXUSDT = data['data']['a'] 
		qty_asks_a_l_AVAXUSDT = data['data']['A'] 

		global symbol_a_g_AVAXUSDT 
		global price_bids_a_g_AVAXUSDT 
		global qty_bids_a_g_AVAXUSDT 
		global price_asks_a_g_AVAXUSDT 
		global qty_asks_a_g_AVAXUSDT 

		symbol_a_g_AVAXUSDT = symbol_a_l_AVAXUSDT 
		price_bids_a_g_AVAXUSDT = price_bids_a_l_AVAXUSDT 
		qty_bids_a_g_AVAXUSDT = qty_bids_a_l_AVAXUSDT 
		price_asks_a_g_AVAXUSDT = price_asks_a_l_AVAXUSDT 
		qty_asks_a_g_AVAXUSDT = qty_asks_a_l_AVAXUSDT 

	if data['stream'] == streamavaxbtc :
		data = json.loads(message) 

		symbol_b_l_AVAXBTC = data['data']['s'] 
		price_bids_b_l_AVAXBTC = data['data']['b'] 
		qty_bids_b_l_AVAXBTC = data['data']['B']
		price_asks_b_l_AVAXBTC = data['data']['a'] 
		qty_asks_b_l_AVAXBTC = data['data']['A'] 

		global symbol_b_g_AVAXBTC 
		global price_bids_b_g_AVAXBTC 
		global qty_bids_b_g_AVAXBTC 
		global price_asks_b_g_AVAXBTC 
		global qty_asks_b_g_AVAXBTC 

		symbol_b_g_AVAXBTC = symbol_b_l_AVAXBTC 
		price_bids_b_g_AVAXBTC = price_bids_b_l_AVAXBTC 
		qty_bids_b_g_AVAXBTC = qty_bids_b_l_AVAXBTC 
		price_asks_b_g_AVAXBTC = price_asks_b_l_AVAXBTC 
		qty_asks_b_g_AVAXBTC = qty_asks_b_l_AVAXBTC 


def loop_AVAXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamavaxusdt}/{streamavaxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_AVAXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_AVAXUSDT).start()

def loop_AVAXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_AVAXUSDT != 0.0 and qty_bids_a_g_AVAXUSDT != 0.0 and price_asks_a_g_AVAXUSDT != 0.0 and qty_asks_a_g_AVAXUSDT != 0.0 and price_bids_b_g_AVAXBTC != 0.0 and qty_bids_b_g_AVAXBTC != 0.0 and price_asks_b_g_AVAXBTC != 0.0 and qty_asks_b_g_AVAXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_AVAXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_AVAXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_AVAXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_AVAXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_AVAXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_AVAXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_AVAXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_AVAXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_AVAXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_AVAXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_AVAXUSDT_Trade).start() 

streamflmusdt = 'flmusdt@bookTicker'
streamflmbtc  = 'flmbtc@bookTicker'

symbol_a_g_FLMUSDT = 'FLMUSDT' 
price_bids_a_g_FLMUSDT = float(0.0) 
qty_bids_a_g_FLMUSDT = float(0.0) 
price_asks_a_g_FLMUSDT = float(0.0) 
qty_asks_a_g_FLMUSDT = float(0.0) 

stepSize_FLMUSDT = 1.00000000 

symbol_b_g_FLMBTC = 'FLMBTC' 
price_bids_b_g_FLMBTC = float(0.0) 
qty_bids_b_g_FLMBTC = float(0.0) 
price_asks_b_g_FLMBTC = float(0.0) 
qty_asks_b_g_FLMBTC = float(0.0) 

stepSize_FLMBTC = 1.00000000 

def on_message_FLMUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamflmusdt :
		symbol_a_l_FLMUSDT = data['data']['s'] 
		price_bids_a_l_FLMUSDT = data['data']['b'] 
		qty_bids_a_l_FLMUSDT = data['data']['B'] 
		price_asks_a_l_FLMUSDT = data['data']['a'] 
		qty_asks_a_l_FLMUSDT = data['data']['A'] 

		global symbol_a_g_FLMUSDT 
		global price_bids_a_g_FLMUSDT 
		global qty_bids_a_g_FLMUSDT 
		global price_asks_a_g_FLMUSDT 
		global qty_asks_a_g_FLMUSDT 

		symbol_a_g_FLMUSDT = symbol_a_l_FLMUSDT 
		price_bids_a_g_FLMUSDT = price_bids_a_l_FLMUSDT 
		qty_bids_a_g_FLMUSDT = qty_bids_a_l_FLMUSDT 
		price_asks_a_g_FLMUSDT = price_asks_a_l_FLMUSDT 
		qty_asks_a_g_FLMUSDT = qty_asks_a_l_FLMUSDT 

	if data['stream'] == streamflmbtc :
		data = json.loads(message) 

		symbol_b_l_FLMBTC = data['data']['s'] 
		price_bids_b_l_FLMBTC = data['data']['b'] 
		qty_bids_b_l_FLMBTC = data['data']['B']
		price_asks_b_l_FLMBTC = data['data']['a'] 
		qty_asks_b_l_FLMBTC = data['data']['A'] 

		global symbol_b_g_FLMBTC 
		global price_bids_b_g_FLMBTC 
		global qty_bids_b_g_FLMBTC 
		global price_asks_b_g_FLMBTC 
		global qty_asks_b_g_FLMBTC 

		symbol_b_g_FLMBTC = symbol_b_l_FLMBTC 
		price_bids_b_g_FLMBTC = price_bids_b_l_FLMBTC 
		qty_bids_b_g_FLMBTC = qty_bids_b_l_FLMBTC 
		price_asks_b_g_FLMBTC = price_asks_b_l_FLMBTC 
		qty_asks_b_g_FLMBTC = qty_asks_b_l_FLMBTC 


def loop_FLMUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamflmusdt}/{streamflmbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FLMUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FLMUSDT).start()

def loop_FLMUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FLMUSDT != 0.0 and qty_bids_a_g_FLMUSDT != 0.0 and price_asks_a_g_FLMUSDT != 0.0 and qty_asks_a_g_FLMUSDT != 0.0 and price_bids_b_g_FLMBTC != 0.0 and qty_bids_b_g_FLMBTC != 0.0 and price_asks_b_g_FLMBTC != 0.0 and qty_asks_b_g_FLMBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FLMBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FLMBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FLMUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FLMUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FLMBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FLMBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FLMUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FLMUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FLMBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FLMBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FLMUSDT_Trade).start() 

streamornusdt = 'ornusdt@bookTicker'
streamornbtc  = 'ornbtc@bookTicker'

symbol_a_g_ORNUSDT = 'ORNUSDT' 
price_bids_a_g_ORNUSDT = float(0.0) 
qty_bids_a_g_ORNUSDT = float(0.0) 
price_asks_a_g_ORNUSDT = float(0.0) 
qty_asks_a_g_ORNUSDT = float(0.0) 

stepSize_ORNUSDT = 0.10000000 

symbol_b_g_ORNBTC = 'ORNBTC' 
price_bids_b_g_ORNBTC = float(0.0) 
qty_bids_b_g_ORNBTC = float(0.0) 
price_asks_b_g_ORNBTC = float(0.0) 
qty_asks_b_g_ORNBTC = float(0.0) 

stepSize_ORNBTC = 0.10000000 

def on_message_ORNUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamornusdt :
		symbol_a_l_ORNUSDT = data['data']['s'] 
		price_bids_a_l_ORNUSDT = data['data']['b'] 
		qty_bids_a_l_ORNUSDT = data['data']['B'] 
		price_asks_a_l_ORNUSDT = data['data']['a'] 
		qty_asks_a_l_ORNUSDT = data['data']['A'] 

		global symbol_a_g_ORNUSDT 
		global price_bids_a_g_ORNUSDT 
		global qty_bids_a_g_ORNUSDT 
		global price_asks_a_g_ORNUSDT 
		global qty_asks_a_g_ORNUSDT 

		symbol_a_g_ORNUSDT = symbol_a_l_ORNUSDT 
		price_bids_a_g_ORNUSDT = price_bids_a_l_ORNUSDT 
		qty_bids_a_g_ORNUSDT = qty_bids_a_l_ORNUSDT 
		price_asks_a_g_ORNUSDT = price_asks_a_l_ORNUSDT 
		qty_asks_a_g_ORNUSDT = qty_asks_a_l_ORNUSDT 

	if data['stream'] == streamornbtc :
		data = json.loads(message) 

		symbol_b_l_ORNBTC = data['data']['s'] 
		price_bids_b_l_ORNBTC = data['data']['b'] 
		qty_bids_b_l_ORNBTC = data['data']['B']
		price_asks_b_l_ORNBTC = data['data']['a'] 
		qty_asks_b_l_ORNBTC = data['data']['A'] 

		global symbol_b_g_ORNBTC 
		global price_bids_b_g_ORNBTC 
		global qty_bids_b_g_ORNBTC 
		global price_asks_b_g_ORNBTC 
		global qty_asks_b_g_ORNBTC 

		symbol_b_g_ORNBTC = symbol_b_l_ORNBTC 
		price_bids_b_g_ORNBTC = price_bids_b_l_ORNBTC 
		qty_bids_b_g_ORNBTC = qty_bids_b_l_ORNBTC 
		price_asks_b_g_ORNBTC = price_asks_b_l_ORNBTC 
		qty_asks_b_g_ORNBTC = qty_asks_b_l_ORNBTC 


def loop_ORNUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamornusdt}/{streamornbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ORNUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ORNUSDT).start()

def loop_ORNUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ORNUSDT != 0.0 and qty_bids_a_g_ORNUSDT != 0.0 and price_asks_a_g_ORNUSDT != 0.0 and qty_asks_a_g_ORNUSDT != 0.0 and price_bids_b_g_ORNBTC != 0.0 and qty_bids_b_g_ORNBTC != 0.0 and price_asks_b_g_ORNBTC != 0.0 and qty_asks_b_g_ORNBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ORNBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ORNBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ORNUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ORNUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ORNBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ORNBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ORNUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ORNUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ORNBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ORNBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ORNUSDT_Trade).start() 

streamutkusdt = 'utkusdt@bookTicker'
streamutkbtc  = 'utkbtc@bookTicker'

symbol_a_g_UTKUSDT = 'UTKUSDT' 
price_bids_a_g_UTKUSDT = float(0.0) 
qty_bids_a_g_UTKUSDT = float(0.0) 
price_asks_a_g_UTKUSDT = float(0.0) 
qty_asks_a_g_UTKUSDT = float(0.0) 

stepSize_UTKUSDT = 1.00000000 

symbol_b_g_UTKBTC = 'UTKBTC' 
price_bids_b_g_UTKBTC = float(0.0) 
qty_bids_b_g_UTKBTC = float(0.0) 
price_asks_b_g_UTKBTC = float(0.0) 
qty_asks_b_g_UTKBTC = float(0.0) 

stepSize_UTKBTC = 1.00000000 

def on_message_UTKUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamutkusdt :
		symbol_a_l_UTKUSDT = data['data']['s'] 
		price_bids_a_l_UTKUSDT = data['data']['b'] 
		qty_bids_a_l_UTKUSDT = data['data']['B'] 
		price_asks_a_l_UTKUSDT = data['data']['a'] 
		qty_asks_a_l_UTKUSDT = data['data']['A'] 

		global symbol_a_g_UTKUSDT 
		global price_bids_a_g_UTKUSDT 
		global qty_bids_a_g_UTKUSDT 
		global price_asks_a_g_UTKUSDT 
		global qty_asks_a_g_UTKUSDT 

		symbol_a_g_UTKUSDT = symbol_a_l_UTKUSDT 
		price_bids_a_g_UTKUSDT = price_bids_a_l_UTKUSDT 
		qty_bids_a_g_UTKUSDT = qty_bids_a_l_UTKUSDT 
		price_asks_a_g_UTKUSDT = price_asks_a_l_UTKUSDT 
		qty_asks_a_g_UTKUSDT = qty_asks_a_l_UTKUSDT 

	if data['stream'] == streamutkbtc :
		data = json.loads(message) 

		symbol_b_l_UTKBTC = data['data']['s'] 
		price_bids_b_l_UTKBTC = data['data']['b'] 
		qty_bids_b_l_UTKBTC = data['data']['B']
		price_asks_b_l_UTKBTC = data['data']['a'] 
		qty_asks_b_l_UTKBTC = data['data']['A'] 

		global symbol_b_g_UTKBTC 
		global price_bids_b_g_UTKBTC 
		global qty_bids_b_g_UTKBTC 
		global price_asks_b_g_UTKBTC 
		global qty_asks_b_g_UTKBTC 

		symbol_b_g_UTKBTC = symbol_b_l_UTKBTC 
		price_bids_b_g_UTKBTC = price_bids_b_l_UTKBTC 
		qty_bids_b_g_UTKBTC = qty_bids_b_l_UTKBTC 
		price_asks_b_g_UTKBTC = price_asks_b_l_UTKBTC 
		qty_asks_b_g_UTKBTC = qty_asks_b_l_UTKBTC 


def loop_UTKUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamutkusdt}/{streamutkbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_UTKUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_UTKUSDT).start()

def loop_UTKUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_UTKUSDT != 0.0 and qty_bids_a_g_UTKUSDT != 0.0 and price_asks_a_g_UTKUSDT != 0.0 and qty_asks_a_g_UTKUSDT != 0.0 and price_bids_b_g_UTKBTC != 0.0 and qty_bids_b_g_UTKBTC != 0.0 and price_asks_b_g_UTKBTC != 0.0 and qty_asks_b_g_UTKBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_UTKBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_UTKBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_UTKUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_UTKUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_UTKBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_UTKBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_UTKUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_UTKUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_UTKBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_UTKBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_UTKUSDT_Trade).start() 

streamxvsusdt = 'xvsusdt@bookTicker'
streamxvsbtc  = 'xvsbtc@bookTicker'

symbol_a_g_XVSUSDT = 'XVSUSDT' 
price_bids_a_g_XVSUSDT = float(0.0) 
qty_bids_a_g_XVSUSDT = float(0.0) 
price_asks_a_g_XVSUSDT = float(0.0) 
qty_asks_a_g_XVSUSDT = float(0.0) 

stepSize_XVSUSDT = 0.01000000 

symbol_b_g_XVSBTC = 'XVSBTC' 
price_bids_b_g_XVSBTC = float(0.0) 
qty_bids_b_g_XVSBTC = float(0.0) 
price_asks_b_g_XVSBTC = float(0.0) 
qty_asks_b_g_XVSBTC = float(0.0) 

stepSize_XVSBTC = 0.01000000 

def on_message_XVSUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamxvsusdt :
		symbol_a_l_XVSUSDT = data['data']['s'] 
		price_bids_a_l_XVSUSDT = data['data']['b'] 
		qty_bids_a_l_XVSUSDT = data['data']['B'] 
		price_asks_a_l_XVSUSDT = data['data']['a'] 
		qty_asks_a_l_XVSUSDT = data['data']['A'] 

		global symbol_a_g_XVSUSDT 
		global price_bids_a_g_XVSUSDT 
		global qty_bids_a_g_XVSUSDT 
		global price_asks_a_g_XVSUSDT 
		global qty_asks_a_g_XVSUSDT 

		symbol_a_g_XVSUSDT = symbol_a_l_XVSUSDT 
		price_bids_a_g_XVSUSDT = price_bids_a_l_XVSUSDT 
		qty_bids_a_g_XVSUSDT = qty_bids_a_l_XVSUSDT 
		price_asks_a_g_XVSUSDT = price_asks_a_l_XVSUSDT 
		qty_asks_a_g_XVSUSDT = qty_asks_a_l_XVSUSDT 

	if data['stream'] == streamxvsbtc :
		data = json.loads(message) 

		symbol_b_l_XVSBTC = data['data']['s'] 
		price_bids_b_l_XVSBTC = data['data']['b'] 
		qty_bids_b_l_XVSBTC = data['data']['B']
		price_asks_b_l_XVSBTC = data['data']['a'] 
		qty_asks_b_l_XVSBTC = data['data']['A'] 

		global symbol_b_g_XVSBTC 
		global price_bids_b_g_XVSBTC 
		global qty_bids_b_g_XVSBTC 
		global price_asks_b_g_XVSBTC 
		global qty_asks_b_g_XVSBTC 

		symbol_b_g_XVSBTC = symbol_b_l_XVSBTC 
		price_bids_b_g_XVSBTC = price_bids_b_l_XVSBTC 
		qty_bids_b_g_XVSBTC = qty_bids_b_l_XVSBTC 
		price_asks_b_g_XVSBTC = price_asks_b_l_XVSBTC 
		qty_asks_b_g_XVSBTC = qty_asks_b_l_XVSBTC 


def loop_XVSUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamxvsusdt}/{streamxvsbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_XVSUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_XVSUSDT).start()

def loop_XVSUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_XVSUSDT != 0.0 and qty_bids_a_g_XVSUSDT != 0.0 and price_asks_a_g_XVSUSDT != 0.0 and qty_asks_a_g_XVSUSDT != 0.0 and price_bids_b_g_XVSBTC != 0.0 and qty_bids_b_g_XVSBTC != 0.0 and price_asks_b_g_XVSBTC != 0.0 and qty_asks_b_g_XVSBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_XVSBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_XVSBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_XVSUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_XVSUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_XVSBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_XVSBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_XVSUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_XVSUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_XVSBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_XVSBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_XVSUSDT_Trade).start() 

streamalphausdt = 'alphausdt@bookTicker'
streamalphabtc  = 'alphabtc@bookTicker'

symbol_a_g_ALPHAUSDT = 'ALPHAUSDT' 
price_bids_a_g_ALPHAUSDT = float(0.0) 
qty_bids_a_g_ALPHAUSDT = float(0.0) 
price_asks_a_g_ALPHAUSDT = float(0.0) 
qty_asks_a_g_ALPHAUSDT = float(0.0) 

stepSize_ALPHAUSDT = 1.00000000 

symbol_b_g_ALPHABTC = 'ALPHABTC' 
price_bids_b_g_ALPHABTC = float(0.0) 
qty_bids_b_g_ALPHABTC = float(0.0) 
price_asks_b_g_ALPHABTC = float(0.0) 
qty_asks_b_g_ALPHABTC = float(0.0) 

stepSize_ALPHABTC = 1.00000000 

def on_message_ALPHAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamalphausdt :
		symbol_a_l_ALPHAUSDT = data['data']['s'] 
		price_bids_a_l_ALPHAUSDT = data['data']['b'] 
		qty_bids_a_l_ALPHAUSDT = data['data']['B'] 
		price_asks_a_l_ALPHAUSDT = data['data']['a'] 
		qty_asks_a_l_ALPHAUSDT = data['data']['A'] 

		global symbol_a_g_ALPHAUSDT 
		global price_bids_a_g_ALPHAUSDT 
		global qty_bids_a_g_ALPHAUSDT 
		global price_asks_a_g_ALPHAUSDT 
		global qty_asks_a_g_ALPHAUSDT 

		symbol_a_g_ALPHAUSDT = symbol_a_l_ALPHAUSDT 
		price_bids_a_g_ALPHAUSDT = price_bids_a_l_ALPHAUSDT 
		qty_bids_a_g_ALPHAUSDT = qty_bids_a_l_ALPHAUSDT 
		price_asks_a_g_ALPHAUSDT = price_asks_a_l_ALPHAUSDT 
		qty_asks_a_g_ALPHAUSDT = qty_asks_a_l_ALPHAUSDT 

	if data['stream'] == streamalphabtc :
		data = json.loads(message) 

		symbol_b_l_ALPHABTC = data['data']['s'] 
		price_bids_b_l_ALPHABTC = data['data']['b'] 
		qty_bids_b_l_ALPHABTC = data['data']['B']
		price_asks_b_l_ALPHABTC = data['data']['a'] 
		qty_asks_b_l_ALPHABTC = data['data']['A'] 

		global symbol_b_g_ALPHABTC 
		global price_bids_b_g_ALPHABTC 
		global qty_bids_b_g_ALPHABTC 
		global price_asks_b_g_ALPHABTC 
		global qty_asks_b_g_ALPHABTC 

		symbol_b_g_ALPHABTC = symbol_b_l_ALPHABTC 
		price_bids_b_g_ALPHABTC = price_bids_b_l_ALPHABTC 
		qty_bids_b_g_ALPHABTC = qty_bids_b_l_ALPHABTC 
		price_asks_b_g_ALPHABTC = price_asks_b_l_ALPHABTC 
		qty_asks_b_g_ALPHABTC = qty_asks_b_l_ALPHABTC 


def loop_ALPHAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamalphausdt}/{streamalphabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ALPHAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ALPHAUSDT).start()

def loop_ALPHAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ALPHAUSDT != 0.0 and qty_bids_a_g_ALPHAUSDT != 0.0 and price_asks_a_g_ALPHAUSDT != 0.0 and qty_asks_a_g_ALPHAUSDT != 0.0 and price_bids_b_g_ALPHABTC != 0.0 and qty_bids_b_g_ALPHABTC != 0.0 and price_asks_b_g_ALPHABTC != 0.0 and qty_asks_b_g_ALPHABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ALPHABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ALPHABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ALPHAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ALPHAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ALPHABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ALPHABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ALPHAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ALPHAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ALPHABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ALPHABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ALPHAUSDT_Trade).start() 

streamaaveusdt = 'aaveusdt@bookTicker'
streamaavebtc  = 'aavebtc@bookTicker'

symbol_a_g_AAVEUSDT = 'AAVEUSDT' 
price_bids_a_g_AAVEUSDT = float(0.0) 
qty_bids_a_g_AAVEUSDT = float(0.0) 
price_asks_a_g_AAVEUSDT = float(0.0) 
qty_asks_a_g_AAVEUSDT = float(0.0) 

stepSize_AAVEUSDT = 0.00100000 

symbol_b_g_AAVEBTC = 'AAVEBTC' 
price_bids_b_g_AAVEBTC = float(0.0) 
qty_bids_b_g_AAVEBTC = float(0.0) 
price_asks_b_g_AAVEBTC = float(0.0) 
qty_asks_b_g_AAVEBTC = float(0.0) 

stepSize_AAVEBTC = 0.00100000 

def on_message_AAVEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamaaveusdt :
		symbol_a_l_AAVEUSDT = data['data']['s'] 
		price_bids_a_l_AAVEUSDT = data['data']['b'] 
		qty_bids_a_l_AAVEUSDT = data['data']['B'] 
		price_asks_a_l_AAVEUSDT = data['data']['a'] 
		qty_asks_a_l_AAVEUSDT = data['data']['A'] 

		global symbol_a_g_AAVEUSDT 
		global price_bids_a_g_AAVEUSDT 
		global qty_bids_a_g_AAVEUSDT 
		global price_asks_a_g_AAVEUSDT 
		global qty_asks_a_g_AAVEUSDT 

		symbol_a_g_AAVEUSDT = symbol_a_l_AAVEUSDT 
		price_bids_a_g_AAVEUSDT = price_bids_a_l_AAVEUSDT 
		qty_bids_a_g_AAVEUSDT = qty_bids_a_l_AAVEUSDT 
		price_asks_a_g_AAVEUSDT = price_asks_a_l_AAVEUSDT 
		qty_asks_a_g_AAVEUSDT = qty_asks_a_l_AAVEUSDT 

	if data['stream'] == streamaavebtc :
		data = json.loads(message) 

		symbol_b_l_AAVEBTC = data['data']['s'] 
		price_bids_b_l_AAVEBTC = data['data']['b'] 
		qty_bids_b_l_AAVEBTC = data['data']['B']
		price_asks_b_l_AAVEBTC = data['data']['a'] 
		qty_asks_b_l_AAVEBTC = data['data']['A'] 

		global symbol_b_g_AAVEBTC 
		global price_bids_b_g_AAVEBTC 
		global qty_bids_b_g_AAVEBTC 
		global price_asks_b_g_AAVEBTC 
		global qty_asks_b_g_AAVEBTC 

		symbol_b_g_AAVEBTC = symbol_b_l_AAVEBTC 
		price_bids_b_g_AAVEBTC = price_bids_b_l_AAVEBTC 
		qty_bids_b_g_AAVEBTC = qty_bids_b_l_AAVEBTC 
		price_asks_b_g_AAVEBTC = price_asks_b_l_AAVEBTC 
		qty_asks_b_g_AAVEBTC = qty_asks_b_l_AAVEBTC 


def loop_AAVEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamaaveusdt}/{streamaavebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_AAVEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_AAVEUSDT).start()

def loop_AAVEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_AAVEUSDT != 0.0 and qty_bids_a_g_AAVEUSDT != 0.0 and price_asks_a_g_AAVEUSDT != 0.0 and qty_asks_a_g_AAVEUSDT != 0.0 and price_bids_b_g_AAVEBTC != 0.0 and qty_bids_b_g_AAVEBTC != 0.0 and price_asks_b_g_AAVEBTC != 0.0 and qty_asks_b_g_AAVEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_AAVEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_AAVEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_AAVEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_AAVEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_AAVEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_AAVEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_AAVEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_AAVEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_AAVEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_AAVEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_AAVEUSDT_Trade).start() 

streamnearusdt = 'nearusdt@bookTicker'
streamnearbtc  = 'nearbtc@bookTicker'

symbol_a_g_NEARUSDT = 'NEARUSDT' 
price_bids_a_g_NEARUSDT = float(0.0) 
qty_bids_a_g_NEARUSDT = float(0.0) 
price_asks_a_g_NEARUSDT = float(0.0) 
qty_asks_a_g_NEARUSDT = float(0.0) 

stepSize_NEARUSDT = 0.10000000 

symbol_b_g_NEARBTC = 'NEARBTC' 
price_bids_b_g_NEARBTC = float(0.0) 
qty_bids_b_g_NEARBTC = float(0.0) 
price_asks_b_g_NEARBTC = float(0.0) 
qty_asks_b_g_NEARBTC = float(0.0) 

stepSize_NEARBTC = 0.10000000 

def on_message_NEARUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamnearusdt :
		symbol_a_l_NEARUSDT = data['data']['s'] 
		price_bids_a_l_NEARUSDT = data['data']['b'] 
		qty_bids_a_l_NEARUSDT = data['data']['B'] 
		price_asks_a_l_NEARUSDT = data['data']['a'] 
		qty_asks_a_l_NEARUSDT = data['data']['A'] 

		global symbol_a_g_NEARUSDT 
		global price_bids_a_g_NEARUSDT 
		global qty_bids_a_g_NEARUSDT 
		global price_asks_a_g_NEARUSDT 
		global qty_asks_a_g_NEARUSDT 

		symbol_a_g_NEARUSDT = symbol_a_l_NEARUSDT 
		price_bids_a_g_NEARUSDT = price_bids_a_l_NEARUSDT 
		qty_bids_a_g_NEARUSDT = qty_bids_a_l_NEARUSDT 
		price_asks_a_g_NEARUSDT = price_asks_a_l_NEARUSDT 
		qty_asks_a_g_NEARUSDT = qty_asks_a_l_NEARUSDT 

	if data['stream'] == streamnearbtc :
		data = json.loads(message) 

		symbol_b_l_NEARBTC = data['data']['s'] 
		price_bids_b_l_NEARBTC = data['data']['b'] 
		qty_bids_b_l_NEARBTC = data['data']['B']
		price_asks_b_l_NEARBTC = data['data']['a'] 
		qty_asks_b_l_NEARBTC = data['data']['A'] 

		global symbol_b_g_NEARBTC 
		global price_bids_b_g_NEARBTC 
		global qty_bids_b_g_NEARBTC 
		global price_asks_b_g_NEARBTC 
		global qty_asks_b_g_NEARBTC 

		symbol_b_g_NEARBTC = symbol_b_l_NEARBTC 
		price_bids_b_g_NEARBTC = price_bids_b_l_NEARBTC 
		qty_bids_b_g_NEARBTC = qty_bids_b_l_NEARBTC 
		price_asks_b_g_NEARBTC = price_asks_b_l_NEARBTC 
		qty_asks_b_g_NEARBTC = qty_asks_b_l_NEARBTC 


def loop_NEARUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamnearusdt}/{streamnearbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_NEARUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_NEARUSDT).start()

def loop_NEARUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_NEARUSDT != 0.0 and qty_bids_a_g_NEARUSDT != 0.0 and price_asks_a_g_NEARUSDT != 0.0 and qty_asks_a_g_NEARUSDT != 0.0 and price_bids_b_g_NEARBTC != 0.0 and qty_bids_b_g_NEARBTC != 0.0 and price_asks_b_g_NEARBTC != 0.0 and qty_asks_b_g_NEARBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_NEARBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_NEARBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_NEARUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_NEARUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_NEARBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_NEARBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_NEARUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_NEARUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_NEARBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_NEARBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_NEARUSDT_Trade).start() 

streamfilusdt = 'filusdt@bookTicker'
streamfilbtc  = 'filbtc@bookTicker'

symbol_a_g_FILUSDT = 'FILUSDT' 
price_bids_a_g_FILUSDT = float(0.0) 
qty_bids_a_g_FILUSDT = float(0.0) 
price_asks_a_g_FILUSDT = float(0.0) 
qty_asks_a_g_FILUSDT = float(0.0) 

stepSize_FILUSDT = 0.01000000 

symbol_b_g_FILBTC = 'FILBTC' 
price_bids_b_g_FILBTC = float(0.0) 
qty_bids_b_g_FILBTC = float(0.0) 
price_asks_b_g_FILBTC = float(0.0) 
qty_asks_b_g_FILBTC = float(0.0) 

stepSize_FILBTC = 0.01000000 

def on_message_FILUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamfilusdt :
		symbol_a_l_FILUSDT = data['data']['s'] 
		price_bids_a_l_FILUSDT = data['data']['b'] 
		qty_bids_a_l_FILUSDT = data['data']['B'] 
		price_asks_a_l_FILUSDT = data['data']['a'] 
		qty_asks_a_l_FILUSDT = data['data']['A'] 

		global symbol_a_g_FILUSDT 
		global price_bids_a_g_FILUSDT 
		global qty_bids_a_g_FILUSDT 
		global price_asks_a_g_FILUSDT 
		global qty_asks_a_g_FILUSDT 

		symbol_a_g_FILUSDT = symbol_a_l_FILUSDT 
		price_bids_a_g_FILUSDT = price_bids_a_l_FILUSDT 
		qty_bids_a_g_FILUSDT = qty_bids_a_l_FILUSDT 
		price_asks_a_g_FILUSDT = price_asks_a_l_FILUSDT 
		qty_asks_a_g_FILUSDT = qty_asks_a_l_FILUSDT 

	if data['stream'] == streamfilbtc :
		data = json.loads(message) 

		symbol_b_l_FILBTC = data['data']['s'] 
		price_bids_b_l_FILBTC = data['data']['b'] 
		qty_bids_b_l_FILBTC = data['data']['B']
		price_asks_b_l_FILBTC = data['data']['a'] 
		qty_asks_b_l_FILBTC = data['data']['A'] 

		global symbol_b_g_FILBTC 
		global price_bids_b_g_FILBTC 
		global qty_bids_b_g_FILBTC 
		global price_asks_b_g_FILBTC 
		global qty_asks_b_g_FILBTC 

		symbol_b_g_FILBTC = symbol_b_l_FILBTC 
		price_bids_b_g_FILBTC = price_bids_b_l_FILBTC 
		qty_bids_b_g_FILBTC = qty_bids_b_l_FILBTC 
		price_asks_b_g_FILBTC = price_asks_b_l_FILBTC 
		qty_asks_b_g_FILBTC = qty_asks_b_l_FILBTC 


def loop_FILUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamfilusdt}/{streamfilbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FILUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FILUSDT).start()

def loop_FILUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FILUSDT != 0.0 and qty_bids_a_g_FILUSDT != 0.0 and price_asks_a_g_FILUSDT != 0.0 and qty_asks_a_g_FILUSDT != 0.0 and price_bids_b_g_FILBTC != 0.0 and qty_bids_b_g_FILBTC != 0.0 and price_asks_b_g_FILBTC != 0.0 and qty_asks_b_g_FILBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FILBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FILBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FILUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FILUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FILBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FILBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FILUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FILUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FILBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FILBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FILUSDT_Trade).start() 

streaminjusdt = 'injusdt@bookTicker'
streaminjbtc  = 'injbtc@bookTicker'

symbol_a_g_INJUSDT = 'INJUSDT' 
price_bids_a_g_INJUSDT = float(0.0) 
qty_bids_a_g_INJUSDT = float(0.0) 
price_asks_a_g_INJUSDT = float(0.0) 
qty_asks_a_g_INJUSDT = float(0.0) 

stepSize_INJUSDT = 0.10000000 

symbol_b_g_INJBTC = 'INJBTC' 
price_bids_b_g_INJBTC = float(0.0) 
qty_bids_b_g_INJBTC = float(0.0) 
price_asks_b_g_INJBTC = float(0.0) 
qty_asks_b_g_INJBTC = float(0.0) 

stepSize_INJBTC = 0.10000000 

def on_message_INJUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streaminjusdt :
		symbol_a_l_INJUSDT = data['data']['s'] 
		price_bids_a_l_INJUSDT = data['data']['b'] 
		qty_bids_a_l_INJUSDT = data['data']['B'] 
		price_asks_a_l_INJUSDT = data['data']['a'] 
		qty_asks_a_l_INJUSDT = data['data']['A'] 

		global symbol_a_g_INJUSDT 
		global price_bids_a_g_INJUSDT 
		global qty_bids_a_g_INJUSDT 
		global price_asks_a_g_INJUSDT 
		global qty_asks_a_g_INJUSDT 

		symbol_a_g_INJUSDT = symbol_a_l_INJUSDT 
		price_bids_a_g_INJUSDT = price_bids_a_l_INJUSDT 
		qty_bids_a_g_INJUSDT = qty_bids_a_l_INJUSDT 
		price_asks_a_g_INJUSDT = price_asks_a_l_INJUSDT 
		qty_asks_a_g_INJUSDT = qty_asks_a_l_INJUSDT 

	if data['stream'] == streaminjbtc :
		data = json.loads(message) 

		symbol_b_l_INJBTC = data['data']['s'] 
		price_bids_b_l_INJBTC = data['data']['b'] 
		qty_bids_b_l_INJBTC = data['data']['B']
		price_asks_b_l_INJBTC = data['data']['a'] 
		qty_asks_b_l_INJBTC = data['data']['A'] 

		global symbol_b_g_INJBTC 
		global price_bids_b_g_INJBTC 
		global qty_bids_b_g_INJBTC 
		global price_asks_b_g_INJBTC 
		global qty_asks_b_g_INJBTC 

		symbol_b_g_INJBTC = symbol_b_l_INJBTC 
		price_bids_b_g_INJBTC = price_bids_b_l_INJBTC 
		qty_bids_b_g_INJBTC = qty_bids_b_l_INJBTC 
		price_asks_b_g_INJBTC = price_asks_b_l_INJBTC 
		qty_asks_b_g_INJBTC = qty_asks_b_l_INJBTC 


def loop_INJUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streaminjusdt}/{streaminjbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_INJUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_INJUSDT).start()

def loop_INJUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_INJUSDT != 0.0 and qty_bids_a_g_INJUSDT != 0.0 and price_asks_a_g_INJUSDT != 0.0 and qty_asks_a_g_INJUSDT != 0.0 and price_bids_b_g_INJBTC != 0.0 and qty_bids_b_g_INJBTC != 0.0 and price_asks_b_g_INJBTC != 0.0 and qty_asks_b_g_INJBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_INJBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_INJBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_INJUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_INJUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_INJBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_INJBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_INJUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_INJUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_INJBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_INJBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_INJUSDT_Trade).start() 

streamaudiousdt = 'audiousdt@bookTicker'
streamaudiobtc  = 'audiobtc@bookTicker'

symbol_a_g_AUDIOUSDT = 'AUDIOUSDT' 
price_bids_a_g_AUDIOUSDT = float(0.0) 
qty_bids_a_g_AUDIOUSDT = float(0.0) 
price_asks_a_g_AUDIOUSDT = float(0.0) 
qty_asks_a_g_AUDIOUSDT = float(0.0) 

stepSize_AUDIOUSDT = 0.10000000 

symbol_b_g_AUDIOBTC = 'AUDIOBTC' 
price_bids_b_g_AUDIOBTC = float(0.0) 
qty_bids_b_g_AUDIOBTC = float(0.0) 
price_asks_b_g_AUDIOBTC = float(0.0) 
qty_asks_b_g_AUDIOBTC = float(0.0) 

stepSize_AUDIOBTC = 0.10000000 

def on_message_AUDIOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamaudiousdt :
		symbol_a_l_AUDIOUSDT = data['data']['s'] 
		price_bids_a_l_AUDIOUSDT = data['data']['b'] 
		qty_bids_a_l_AUDIOUSDT = data['data']['B'] 
		price_asks_a_l_AUDIOUSDT = data['data']['a'] 
		qty_asks_a_l_AUDIOUSDT = data['data']['A'] 

		global symbol_a_g_AUDIOUSDT 
		global price_bids_a_g_AUDIOUSDT 
		global qty_bids_a_g_AUDIOUSDT 
		global price_asks_a_g_AUDIOUSDT 
		global qty_asks_a_g_AUDIOUSDT 

		symbol_a_g_AUDIOUSDT = symbol_a_l_AUDIOUSDT 
		price_bids_a_g_AUDIOUSDT = price_bids_a_l_AUDIOUSDT 
		qty_bids_a_g_AUDIOUSDT = qty_bids_a_l_AUDIOUSDT 
		price_asks_a_g_AUDIOUSDT = price_asks_a_l_AUDIOUSDT 
		qty_asks_a_g_AUDIOUSDT = qty_asks_a_l_AUDIOUSDT 

	if data['stream'] == streamaudiobtc :
		data = json.loads(message) 

		symbol_b_l_AUDIOBTC = data['data']['s'] 
		price_bids_b_l_AUDIOBTC = data['data']['b'] 
		qty_bids_b_l_AUDIOBTC = data['data']['B']
		price_asks_b_l_AUDIOBTC = data['data']['a'] 
		qty_asks_b_l_AUDIOBTC = data['data']['A'] 

		global symbol_b_g_AUDIOBTC 
		global price_bids_b_g_AUDIOBTC 
		global qty_bids_b_g_AUDIOBTC 
		global price_asks_b_g_AUDIOBTC 
		global qty_asks_b_g_AUDIOBTC 

		symbol_b_g_AUDIOBTC = symbol_b_l_AUDIOBTC 
		price_bids_b_g_AUDIOBTC = price_bids_b_l_AUDIOBTC 
		qty_bids_b_g_AUDIOBTC = qty_bids_b_l_AUDIOBTC 
		price_asks_b_g_AUDIOBTC = price_asks_b_l_AUDIOBTC 
		qty_asks_b_g_AUDIOBTC = qty_asks_b_l_AUDIOBTC 


def loop_AUDIOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamaudiousdt}/{streamaudiobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_AUDIOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_AUDIOUSDT).start()

def loop_AUDIOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_AUDIOUSDT != 0.0 and qty_bids_a_g_AUDIOUSDT != 0.0 and price_asks_a_g_AUDIOUSDT != 0.0 and qty_asks_a_g_AUDIOUSDT != 0.0 and price_bids_b_g_AUDIOBTC != 0.0 and qty_bids_b_g_AUDIOBTC != 0.0 and price_asks_b_g_AUDIOBTC != 0.0 and qty_asks_b_g_AUDIOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_AUDIOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_AUDIOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_AUDIOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_AUDIOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_AUDIOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_AUDIOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_AUDIOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_AUDIOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_AUDIOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_AUDIOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_AUDIOUSDT_Trade).start() 

streamctkusdt = 'ctkusdt@bookTicker'
streamctkbtc  = 'ctkbtc@bookTicker'

symbol_a_g_CTKUSDT = 'CTKUSDT' 
price_bids_a_g_CTKUSDT = float(0.0) 
qty_bids_a_g_CTKUSDT = float(0.0) 
price_asks_a_g_CTKUSDT = float(0.0) 
qty_asks_a_g_CTKUSDT = float(0.0) 

stepSize_CTKUSDT = 0.10000000 

symbol_b_g_CTKBTC = 'CTKBTC' 
price_bids_b_g_CTKBTC = float(0.0) 
qty_bids_b_g_CTKBTC = float(0.0) 
price_asks_b_g_CTKBTC = float(0.0) 
qty_asks_b_g_CTKBTC = float(0.0) 

stepSize_CTKBTC = 0.10000000 

def on_message_CTKUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamctkusdt :
		symbol_a_l_CTKUSDT = data['data']['s'] 
		price_bids_a_l_CTKUSDT = data['data']['b'] 
		qty_bids_a_l_CTKUSDT = data['data']['B'] 
		price_asks_a_l_CTKUSDT = data['data']['a'] 
		qty_asks_a_l_CTKUSDT = data['data']['A'] 

		global symbol_a_g_CTKUSDT 
		global price_bids_a_g_CTKUSDT 
		global qty_bids_a_g_CTKUSDT 
		global price_asks_a_g_CTKUSDT 
		global qty_asks_a_g_CTKUSDT 

		symbol_a_g_CTKUSDT = symbol_a_l_CTKUSDT 
		price_bids_a_g_CTKUSDT = price_bids_a_l_CTKUSDT 
		qty_bids_a_g_CTKUSDT = qty_bids_a_l_CTKUSDT 
		price_asks_a_g_CTKUSDT = price_asks_a_l_CTKUSDT 
		qty_asks_a_g_CTKUSDT = qty_asks_a_l_CTKUSDT 

	if data['stream'] == streamctkbtc :
		data = json.loads(message) 

		symbol_b_l_CTKBTC = data['data']['s'] 
		price_bids_b_l_CTKBTC = data['data']['b'] 
		qty_bids_b_l_CTKBTC = data['data']['B']
		price_asks_b_l_CTKBTC = data['data']['a'] 
		qty_asks_b_l_CTKBTC = data['data']['A'] 

		global symbol_b_g_CTKBTC 
		global price_bids_b_g_CTKBTC 
		global qty_bids_b_g_CTKBTC 
		global price_asks_b_g_CTKBTC 
		global qty_asks_b_g_CTKBTC 

		symbol_b_g_CTKBTC = symbol_b_l_CTKBTC 
		price_bids_b_g_CTKBTC = price_bids_b_l_CTKBTC 
		qty_bids_b_g_CTKBTC = qty_bids_b_l_CTKBTC 
		price_asks_b_g_CTKBTC = price_asks_b_l_CTKBTC 
		qty_asks_b_g_CTKBTC = qty_asks_b_l_CTKBTC 


def loop_CTKUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamctkusdt}/{streamctkbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CTKUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CTKUSDT).start()

def loop_CTKUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CTKUSDT != 0.0 and qty_bids_a_g_CTKUSDT != 0.0 and price_asks_a_g_CTKUSDT != 0.0 and qty_asks_a_g_CTKUSDT != 0.0 and price_bids_b_g_CTKBTC != 0.0 and qty_bids_b_g_CTKBTC != 0.0 and price_asks_b_g_CTKBTC != 0.0 and qty_asks_b_g_CTKBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CTKBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CTKBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CTKUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CTKUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CTKBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CTKBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CTKUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CTKUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CTKBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CTKBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CTKUSDT_Trade).start() 

streamaxsusdt = 'axsusdt@bookTicker'
streamaxsbtc  = 'axsbtc@bookTicker'

symbol_a_g_AXSUSDT = 'AXSUSDT' 
price_bids_a_g_AXSUSDT = float(0.0) 
qty_bids_a_g_AXSUSDT = float(0.0) 
price_asks_a_g_AXSUSDT = float(0.0) 
qty_asks_a_g_AXSUSDT = float(0.0) 

stepSize_AXSUSDT = 0.01000000 

symbol_b_g_AXSBTC = 'AXSBTC' 
price_bids_b_g_AXSBTC = float(0.0) 
qty_bids_b_g_AXSBTC = float(0.0) 
price_asks_b_g_AXSBTC = float(0.0) 
qty_asks_b_g_AXSBTC = float(0.0) 

stepSize_AXSBTC = 0.01000000 

def on_message_AXSUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamaxsusdt :
		symbol_a_l_AXSUSDT = data['data']['s'] 
		price_bids_a_l_AXSUSDT = data['data']['b'] 
		qty_bids_a_l_AXSUSDT = data['data']['B'] 
		price_asks_a_l_AXSUSDT = data['data']['a'] 
		qty_asks_a_l_AXSUSDT = data['data']['A'] 

		global symbol_a_g_AXSUSDT 
		global price_bids_a_g_AXSUSDT 
		global qty_bids_a_g_AXSUSDT 
		global price_asks_a_g_AXSUSDT 
		global qty_asks_a_g_AXSUSDT 

		symbol_a_g_AXSUSDT = symbol_a_l_AXSUSDT 
		price_bids_a_g_AXSUSDT = price_bids_a_l_AXSUSDT 
		qty_bids_a_g_AXSUSDT = qty_bids_a_l_AXSUSDT 
		price_asks_a_g_AXSUSDT = price_asks_a_l_AXSUSDT 
		qty_asks_a_g_AXSUSDT = qty_asks_a_l_AXSUSDT 

	if data['stream'] == streamaxsbtc :
		data = json.loads(message) 

		symbol_b_l_AXSBTC = data['data']['s'] 
		price_bids_b_l_AXSBTC = data['data']['b'] 
		qty_bids_b_l_AXSBTC = data['data']['B']
		price_asks_b_l_AXSBTC = data['data']['a'] 
		qty_asks_b_l_AXSBTC = data['data']['A'] 

		global symbol_b_g_AXSBTC 
		global price_bids_b_g_AXSBTC 
		global qty_bids_b_g_AXSBTC 
		global price_asks_b_g_AXSBTC 
		global qty_asks_b_g_AXSBTC 

		symbol_b_g_AXSBTC = symbol_b_l_AXSBTC 
		price_bids_b_g_AXSBTC = price_bids_b_l_AXSBTC 
		qty_bids_b_g_AXSBTC = qty_bids_b_l_AXSBTC 
		price_asks_b_g_AXSBTC = price_asks_b_l_AXSBTC 
		qty_asks_b_g_AXSBTC = qty_asks_b_l_AXSBTC 


def loop_AXSUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamaxsusdt}/{streamaxsbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_AXSUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_AXSUSDT).start()

def loop_AXSUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_AXSUSDT != 0.0 and qty_bids_a_g_AXSUSDT != 0.0 and price_asks_a_g_AXSUSDT != 0.0 and qty_asks_a_g_AXSUSDT != 0.0 and price_bids_b_g_AXSBTC != 0.0 and qty_bids_b_g_AXSBTC != 0.0 and price_asks_b_g_AXSBTC != 0.0 and qty_asks_b_g_AXSBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_AXSBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_AXSBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_AXSUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_AXSUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_AXSBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_AXSBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_AXSUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_AXSUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_AXSBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_AXSBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_AXSUSDT_Trade).start() 

streamhardusdt = 'hardusdt@bookTicker'
streamhardbtc  = 'hardbtc@bookTicker'

symbol_a_g_HARDUSDT = 'HARDUSDT' 
price_bids_a_g_HARDUSDT = float(0.0) 
qty_bids_a_g_HARDUSDT = float(0.0) 
price_asks_a_g_HARDUSDT = float(0.0) 
qty_asks_a_g_HARDUSDT = float(0.0) 

stepSize_HARDUSDT = 1.00000000 

symbol_b_g_HARDBTC = 'HARDBTC' 
price_bids_b_g_HARDBTC = float(0.0) 
qty_bids_b_g_HARDBTC = float(0.0) 
price_asks_b_g_HARDBTC = float(0.0) 
qty_asks_b_g_HARDBTC = float(0.0) 

stepSize_HARDBTC = 1.00000000 

def on_message_HARDUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamhardusdt :
		symbol_a_l_HARDUSDT = data['data']['s'] 
		price_bids_a_l_HARDUSDT = data['data']['b'] 
		qty_bids_a_l_HARDUSDT = data['data']['B'] 
		price_asks_a_l_HARDUSDT = data['data']['a'] 
		qty_asks_a_l_HARDUSDT = data['data']['A'] 

		global symbol_a_g_HARDUSDT 
		global price_bids_a_g_HARDUSDT 
		global qty_bids_a_g_HARDUSDT 
		global price_asks_a_g_HARDUSDT 
		global qty_asks_a_g_HARDUSDT 

		symbol_a_g_HARDUSDT = symbol_a_l_HARDUSDT 
		price_bids_a_g_HARDUSDT = price_bids_a_l_HARDUSDT 
		qty_bids_a_g_HARDUSDT = qty_bids_a_l_HARDUSDT 
		price_asks_a_g_HARDUSDT = price_asks_a_l_HARDUSDT 
		qty_asks_a_g_HARDUSDT = qty_asks_a_l_HARDUSDT 

	if data['stream'] == streamhardbtc :
		data = json.loads(message) 

		symbol_b_l_HARDBTC = data['data']['s'] 
		price_bids_b_l_HARDBTC = data['data']['b'] 
		qty_bids_b_l_HARDBTC = data['data']['B']
		price_asks_b_l_HARDBTC = data['data']['a'] 
		qty_asks_b_l_HARDBTC = data['data']['A'] 

		global symbol_b_g_HARDBTC 
		global price_bids_b_g_HARDBTC 
		global qty_bids_b_g_HARDBTC 
		global price_asks_b_g_HARDBTC 
		global qty_asks_b_g_HARDBTC 

		symbol_b_g_HARDBTC = symbol_b_l_HARDBTC 
		price_bids_b_g_HARDBTC = price_bids_b_l_HARDBTC 
		qty_bids_b_g_HARDBTC = qty_bids_b_l_HARDBTC 
		price_asks_b_g_HARDBTC = price_asks_b_l_HARDBTC 
		qty_asks_b_g_HARDBTC = qty_asks_b_l_HARDBTC 


def loop_HARDUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamhardusdt}/{streamhardbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_HARDUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_HARDUSDT).start()

def loop_HARDUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_HARDUSDT != 0.0 and qty_bids_a_g_HARDUSDT != 0.0 and price_asks_a_g_HARDUSDT != 0.0 and qty_asks_a_g_HARDUSDT != 0.0 and price_bids_b_g_HARDBTC != 0.0 and qty_bids_b_g_HARDBTC != 0.0 and price_asks_b_g_HARDBTC != 0.0 and qty_asks_b_g_HARDBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_HARDBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_HARDBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_HARDUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_HARDUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_HARDBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_HARDBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_HARDUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_HARDUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_HARDBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_HARDBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_HARDUSDT_Trade).start() 

streamstraxusdt = 'straxusdt@bookTicker'
streamstraxbtc  = 'straxbtc@bookTicker'

symbol_a_g_STRAXUSDT = 'STRAXUSDT' 
price_bids_a_g_STRAXUSDT = float(0.0) 
qty_bids_a_g_STRAXUSDT = float(0.0) 
price_asks_a_g_STRAXUSDT = float(0.0) 
qty_asks_a_g_STRAXUSDT = float(0.0) 

stepSize_STRAXUSDT = 0.10000000 

symbol_b_g_STRAXBTC = 'STRAXBTC' 
price_bids_b_g_STRAXBTC = float(0.0) 
qty_bids_b_g_STRAXBTC = float(0.0) 
price_asks_b_g_STRAXBTC = float(0.0) 
qty_asks_b_g_STRAXBTC = float(0.0) 

stepSize_STRAXBTC = 0.10000000 

def on_message_STRAXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamstraxusdt :
		symbol_a_l_STRAXUSDT = data['data']['s'] 
		price_bids_a_l_STRAXUSDT = data['data']['b'] 
		qty_bids_a_l_STRAXUSDT = data['data']['B'] 
		price_asks_a_l_STRAXUSDT = data['data']['a'] 
		qty_asks_a_l_STRAXUSDT = data['data']['A'] 

		global symbol_a_g_STRAXUSDT 
		global price_bids_a_g_STRAXUSDT 
		global qty_bids_a_g_STRAXUSDT 
		global price_asks_a_g_STRAXUSDT 
		global qty_asks_a_g_STRAXUSDT 

		symbol_a_g_STRAXUSDT = symbol_a_l_STRAXUSDT 
		price_bids_a_g_STRAXUSDT = price_bids_a_l_STRAXUSDT 
		qty_bids_a_g_STRAXUSDT = qty_bids_a_l_STRAXUSDT 
		price_asks_a_g_STRAXUSDT = price_asks_a_l_STRAXUSDT 
		qty_asks_a_g_STRAXUSDT = qty_asks_a_l_STRAXUSDT 

	if data['stream'] == streamstraxbtc :
		data = json.loads(message) 

		symbol_b_l_STRAXBTC = data['data']['s'] 
		price_bids_b_l_STRAXBTC = data['data']['b'] 
		qty_bids_b_l_STRAXBTC = data['data']['B']
		price_asks_b_l_STRAXBTC = data['data']['a'] 
		qty_asks_b_l_STRAXBTC = data['data']['A'] 

		global symbol_b_g_STRAXBTC 
		global price_bids_b_g_STRAXBTC 
		global qty_bids_b_g_STRAXBTC 
		global price_asks_b_g_STRAXBTC 
		global qty_asks_b_g_STRAXBTC 

		symbol_b_g_STRAXBTC = symbol_b_l_STRAXBTC 
		price_bids_b_g_STRAXBTC = price_bids_b_l_STRAXBTC 
		qty_bids_b_g_STRAXBTC = qty_bids_b_l_STRAXBTC 
		price_asks_b_g_STRAXBTC = price_asks_b_l_STRAXBTC 
		qty_asks_b_g_STRAXBTC = qty_asks_b_l_STRAXBTC 


def loop_STRAXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamstraxusdt}/{streamstraxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_STRAXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_STRAXUSDT).start()

def loop_STRAXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_STRAXUSDT != 0.0 and qty_bids_a_g_STRAXUSDT != 0.0 and price_asks_a_g_STRAXUSDT != 0.0 and qty_asks_a_g_STRAXUSDT != 0.0 and price_bids_b_g_STRAXBTC != 0.0 and qty_bids_b_g_STRAXBTC != 0.0 and price_asks_b_g_STRAXBTC != 0.0 and qty_asks_b_g_STRAXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_STRAXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_STRAXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_STRAXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_STRAXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_STRAXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_STRAXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_STRAXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_STRAXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_STRAXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_STRAXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_STRAXUSDT_Trade).start() 

streamunfiusdt = 'unfiusdt@bookTicker'
streamunfibtc  = 'unfibtc@bookTicker'

symbol_a_g_UNFIUSDT = 'UNFIUSDT' 
price_bids_a_g_UNFIUSDT = float(0.0) 
qty_bids_a_g_UNFIUSDT = float(0.0) 
price_asks_a_g_UNFIUSDT = float(0.0) 
qty_asks_a_g_UNFIUSDT = float(0.0) 

stepSize_UNFIUSDT = 0.10000000 

symbol_b_g_UNFIBTC = 'UNFIBTC' 
price_bids_b_g_UNFIBTC = float(0.0) 
qty_bids_b_g_UNFIBTC = float(0.0) 
price_asks_b_g_UNFIBTC = float(0.0) 
qty_asks_b_g_UNFIBTC = float(0.0) 

stepSize_UNFIBTC = 0.10000000 

def on_message_UNFIUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamunfiusdt :
		symbol_a_l_UNFIUSDT = data['data']['s'] 
		price_bids_a_l_UNFIUSDT = data['data']['b'] 
		qty_bids_a_l_UNFIUSDT = data['data']['B'] 
		price_asks_a_l_UNFIUSDT = data['data']['a'] 
		qty_asks_a_l_UNFIUSDT = data['data']['A'] 

		global symbol_a_g_UNFIUSDT 
		global price_bids_a_g_UNFIUSDT 
		global qty_bids_a_g_UNFIUSDT 
		global price_asks_a_g_UNFIUSDT 
		global qty_asks_a_g_UNFIUSDT 

		symbol_a_g_UNFIUSDT = symbol_a_l_UNFIUSDT 
		price_bids_a_g_UNFIUSDT = price_bids_a_l_UNFIUSDT 
		qty_bids_a_g_UNFIUSDT = qty_bids_a_l_UNFIUSDT 
		price_asks_a_g_UNFIUSDT = price_asks_a_l_UNFIUSDT 
		qty_asks_a_g_UNFIUSDT = qty_asks_a_l_UNFIUSDT 

	if data['stream'] == streamunfibtc :
		data = json.loads(message) 

		symbol_b_l_UNFIBTC = data['data']['s'] 
		price_bids_b_l_UNFIBTC = data['data']['b'] 
		qty_bids_b_l_UNFIBTC = data['data']['B']
		price_asks_b_l_UNFIBTC = data['data']['a'] 
		qty_asks_b_l_UNFIBTC = data['data']['A'] 

		global symbol_b_g_UNFIBTC 
		global price_bids_b_g_UNFIBTC 
		global qty_bids_b_g_UNFIBTC 
		global price_asks_b_g_UNFIBTC 
		global qty_asks_b_g_UNFIBTC 

		symbol_b_g_UNFIBTC = symbol_b_l_UNFIBTC 
		price_bids_b_g_UNFIBTC = price_bids_b_l_UNFIBTC 
		qty_bids_b_g_UNFIBTC = qty_bids_b_l_UNFIBTC 
		price_asks_b_g_UNFIBTC = price_asks_b_l_UNFIBTC 
		qty_asks_b_g_UNFIBTC = qty_asks_b_l_UNFIBTC 


def loop_UNFIUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamunfiusdt}/{streamunfibtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_UNFIUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_UNFIUSDT).start()

def loop_UNFIUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_UNFIUSDT != 0.0 and qty_bids_a_g_UNFIUSDT != 0.0 and price_asks_a_g_UNFIUSDT != 0.0 and qty_asks_a_g_UNFIUSDT != 0.0 and price_bids_b_g_UNFIBTC != 0.0 and qty_bids_b_g_UNFIBTC != 0.0 and price_asks_b_g_UNFIBTC != 0.0 and qty_asks_b_g_UNFIBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_UNFIBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_UNFIBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_UNFIUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_UNFIUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_UNFIBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_UNFIBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_UNFIUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_UNFIUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_UNFIBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_UNFIBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_UNFIUSDT_Trade).start() 

streamroseusdt = 'roseusdt@bookTicker'
streamrosebtc  = 'rosebtc@bookTicker'

symbol_a_g_ROSEUSDT = 'ROSEUSDT' 
price_bids_a_g_ROSEUSDT = float(0.0) 
qty_bids_a_g_ROSEUSDT = float(0.0) 
price_asks_a_g_ROSEUSDT = float(0.0) 
qty_asks_a_g_ROSEUSDT = float(0.0) 

stepSize_ROSEUSDT = 0.10000000 

symbol_b_g_ROSEBTC = 'ROSEBTC' 
price_bids_b_g_ROSEBTC = float(0.0) 
qty_bids_b_g_ROSEBTC = float(0.0) 
price_asks_b_g_ROSEBTC = float(0.0) 
qty_asks_b_g_ROSEBTC = float(0.0) 

stepSize_ROSEBTC = 1.00000000 

def on_message_ROSEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamroseusdt :
		symbol_a_l_ROSEUSDT = data['data']['s'] 
		price_bids_a_l_ROSEUSDT = data['data']['b'] 
		qty_bids_a_l_ROSEUSDT = data['data']['B'] 
		price_asks_a_l_ROSEUSDT = data['data']['a'] 
		qty_asks_a_l_ROSEUSDT = data['data']['A'] 

		global symbol_a_g_ROSEUSDT 
		global price_bids_a_g_ROSEUSDT 
		global qty_bids_a_g_ROSEUSDT 
		global price_asks_a_g_ROSEUSDT 
		global qty_asks_a_g_ROSEUSDT 

		symbol_a_g_ROSEUSDT = symbol_a_l_ROSEUSDT 
		price_bids_a_g_ROSEUSDT = price_bids_a_l_ROSEUSDT 
		qty_bids_a_g_ROSEUSDT = qty_bids_a_l_ROSEUSDT 
		price_asks_a_g_ROSEUSDT = price_asks_a_l_ROSEUSDT 
		qty_asks_a_g_ROSEUSDT = qty_asks_a_l_ROSEUSDT 

	if data['stream'] == streamrosebtc :
		data = json.loads(message) 

		symbol_b_l_ROSEBTC = data['data']['s'] 
		price_bids_b_l_ROSEBTC = data['data']['b'] 
		qty_bids_b_l_ROSEBTC = data['data']['B']
		price_asks_b_l_ROSEBTC = data['data']['a'] 
		qty_asks_b_l_ROSEBTC = data['data']['A'] 

		global symbol_b_g_ROSEBTC 
		global price_bids_b_g_ROSEBTC 
		global qty_bids_b_g_ROSEBTC 
		global price_asks_b_g_ROSEBTC 
		global qty_asks_b_g_ROSEBTC 

		symbol_b_g_ROSEBTC = symbol_b_l_ROSEBTC 
		price_bids_b_g_ROSEBTC = price_bids_b_l_ROSEBTC 
		qty_bids_b_g_ROSEBTC = qty_bids_b_l_ROSEBTC 
		price_asks_b_g_ROSEBTC = price_asks_b_l_ROSEBTC 
		qty_asks_b_g_ROSEBTC = qty_asks_b_l_ROSEBTC 


def loop_ROSEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamroseusdt}/{streamrosebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ROSEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ROSEUSDT).start()

def loop_ROSEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ROSEUSDT != 0.0 and qty_bids_a_g_ROSEUSDT != 0.0 and price_asks_a_g_ROSEUSDT != 0.0 and qty_asks_a_g_ROSEUSDT != 0.0 and price_bids_b_g_ROSEBTC != 0.0 and qty_bids_b_g_ROSEBTC != 0.0 and price_asks_b_g_ROSEBTC != 0.0 and qty_asks_b_g_ROSEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ROSEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ROSEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ROSEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ROSEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ROSEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ROSEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ROSEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ROSEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ROSEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ROSEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ROSEUSDT_Trade).start() 

streamavausdt = 'avausdt@bookTicker'
streamavabtc  = 'avabtc@bookTicker'

symbol_a_g_AVAUSDT = 'AVAUSDT' 
price_bids_a_g_AVAUSDT = float(0.0) 
qty_bids_a_g_AVAUSDT = float(0.0) 
price_asks_a_g_AVAUSDT = float(0.0) 
qty_asks_a_g_AVAUSDT = float(0.0) 

stepSize_AVAUSDT = 0.10000000 

symbol_b_g_AVABTC = 'AVABTC' 
price_bids_b_g_AVABTC = float(0.0) 
qty_bids_b_g_AVABTC = float(0.0) 
price_asks_b_g_AVABTC = float(0.0) 
qty_asks_b_g_AVABTC = float(0.0) 

stepSize_AVABTC = 0.10000000 

def on_message_AVAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamavausdt :
		symbol_a_l_AVAUSDT = data['data']['s'] 
		price_bids_a_l_AVAUSDT = data['data']['b'] 
		qty_bids_a_l_AVAUSDT = data['data']['B'] 
		price_asks_a_l_AVAUSDT = data['data']['a'] 
		qty_asks_a_l_AVAUSDT = data['data']['A'] 

		global symbol_a_g_AVAUSDT 
		global price_bids_a_g_AVAUSDT 
		global qty_bids_a_g_AVAUSDT 
		global price_asks_a_g_AVAUSDT 
		global qty_asks_a_g_AVAUSDT 

		symbol_a_g_AVAUSDT = symbol_a_l_AVAUSDT 
		price_bids_a_g_AVAUSDT = price_bids_a_l_AVAUSDT 
		qty_bids_a_g_AVAUSDT = qty_bids_a_l_AVAUSDT 
		price_asks_a_g_AVAUSDT = price_asks_a_l_AVAUSDT 
		qty_asks_a_g_AVAUSDT = qty_asks_a_l_AVAUSDT 

	if data['stream'] == streamavabtc :
		data = json.loads(message) 

		symbol_b_l_AVABTC = data['data']['s'] 
		price_bids_b_l_AVABTC = data['data']['b'] 
		qty_bids_b_l_AVABTC = data['data']['B']
		price_asks_b_l_AVABTC = data['data']['a'] 
		qty_asks_b_l_AVABTC = data['data']['A'] 

		global symbol_b_g_AVABTC 
		global price_bids_b_g_AVABTC 
		global qty_bids_b_g_AVABTC 
		global price_asks_b_g_AVABTC 
		global qty_asks_b_g_AVABTC 

		symbol_b_g_AVABTC = symbol_b_l_AVABTC 
		price_bids_b_g_AVABTC = price_bids_b_l_AVABTC 
		qty_bids_b_g_AVABTC = qty_bids_b_l_AVABTC 
		price_asks_b_g_AVABTC = price_asks_b_l_AVABTC 
		qty_asks_b_g_AVABTC = qty_asks_b_l_AVABTC 


def loop_AVAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamavausdt}/{streamavabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_AVAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_AVAUSDT).start()

def loop_AVAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_AVAUSDT != 0.0 and qty_bids_a_g_AVAUSDT != 0.0 and price_asks_a_g_AVAUSDT != 0.0 and qty_asks_a_g_AVAUSDT != 0.0 and price_bids_b_g_AVABTC != 0.0 and qty_bids_b_g_AVABTC != 0.0 and price_asks_b_g_AVABTC != 0.0 and qty_asks_b_g_AVABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_AVABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_AVABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_AVAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_AVAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_AVABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_AVABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_AVAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_AVAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_AVABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_AVABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_AVAUSDT_Trade).start() 

streamsklusdt = 'sklusdt@bookTicker'
streamsklbtc  = 'sklbtc@bookTicker'

symbol_a_g_SKLUSDT = 'SKLUSDT' 
price_bids_a_g_SKLUSDT = float(0.0) 
qty_bids_a_g_SKLUSDT = float(0.0) 
price_asks_a_g_SKLUSDT = float(0.0) 
qty_asks_a_g_SKLUSDT = float(0.0) 

stepSize_SKLUSDT = 1.00000000 

symbol_b_g_SKLBTC = 'SKLBTC' 
price_bids_b_g_SKLBTC = float(0.0) 
qty_bids_b_g_SKLBTC = float(0.0) 
price_asks_b_g_SKLBTC = float(0.0) 
qty_asks_b_g_SKLBTC = float(0.0) 

stepSize_SKLBTC = 1.00000000 

def on_message_SKLUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamsklusdt :
		symbol_a_l_SKLUSDT = data['data']['s'] 
		price_bids_a_l_SKLUSDT = data['data']['b'] 
		qty_bids_a_l_SKLUSDT = data['data']['B'] 
		price_asks_a_l_SKLUSDT = data['data']['a'] 
		qty_asks_a_l_SKLUSDT = data['data']['A'] 

		global symbol_a_g_SKLUSDT 
		global price_bids_a_g_SKLUSDT 
		global qty_bids_a_g_SKLUSDT 
		global price_asks_a_g_SKLUSDT 
		global qty_asks_a_g_SKLUSDT 

		symbol_a_g_SKLUSDT = symbol_a_l_SKLUSDT 
		price_bids_a_g_SKLUSDT = price_bids_a_l_SKLUSDT 
		qty_bids_a_g_SKLUSDT = qty_bids_a_l_SKLUSDT 
		price_asks_a_g_SKLUSDT = price_asks_a_l_SKLUSDT 
		qty_asks_a_g_SKLUSDT = qty_asks_a_l_SKLUSDT 

	if data['stream'] == streamsklbtc :
		data = json.loads(message) 

		symbol_b_l_SKLBTC = data['data']['s'] 
		price_bids_b_l_SKLBTC = data['data']['b'] 
		qty_bids_b_l_SKLBTC = data['data']['B']
		price_asks_b_l_SKLBTC = data['data']['a'] 
		qty_asks_b_l_SKLBTC = data['data']['A'] 

		global symbol_b_g_SKLBTC 
		global price_bids_b_g_SKLBTC 
		global qty_bids_b_g_SKLBTC 
		global price_asks_b_g_SKLBTC 
		global qty_asks_b_g_SKLBTC 

		symbol_b_g_SKLBTC = symbol_b_l_SKLBTC 
		price_bids_b_g_SKLBTC = price_bids_b_l_SKLBTC 
		qty_bids_b_g_SKLBTC = qty_bids_b_l_SKLBTC 
		price_asks_b_g_SKLBTC = price_asks_b_l_SKLBTC 
		qty_asks_b_g_SKLBTC = qty_asks_b_l_SKLBTC 


def loop_SKLUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamsklusdt}/{streamsklbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_SKLUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_SKLUSDT).start()

def loop_SKLUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_SKLUSDT != 0.0 and qty_bids_a_g_SKLUSDT != 0.0 and price_asks_a_g_SKLUSDT != 0.0 and qty_asks_a_g_SKLUSDT != 0.0 and price_bids_b_g_SKLBTC != 0.0 and qty_bids_b_g_SKLBTC != 0.0 and price_asks_b_g_SKLBTC != 0.0 and qty_asks_b_g_SKLBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_SKLBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_SKLBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_SKLUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_SKLUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_SKLBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_SKLBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_SKLUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_SKLUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_SKLBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_SKLBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_SKLUSDT_Trade).start() 

streamgrtusdt = 'grtusdt@bookTicker'
streamgrtbtc  = 'grtbtc@bookTicker'

symbol_a_g_GRTUSDT = 'GRTUSDT' 
price_bids_a_g_GRTUSDT = float(0.0) 
qty_bids_a_g_GRTUSDT = float(0.0) 
price_asks_a_g_GRTUSDT = float(0.0) 
qty_asks_a_g_GRTUSDT = float(0.0) 

stepSize_GRTUSDT = 1.00000000 

symbol_b_g_GRTBTC = 'GRTBTC' 
price_bids_b_g_GRTBTC = float(0.0) 
qty_bids_b_g_GRTBTC = float(0.0) 
price_asks_b_g_GRTBTC = float(0.0) 
qty_asks_b_g_GRTBTC = float(0.0) 

stepSize_GRTBTC = 1.00000000 

def on_message_GRTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamgrtusdt :
		symbol_a_l_GRTUSDT = data['data']['s'] 
		price_bids_a_l_GRTUSDT = data['data']['b'] 
		qty_bids_a_l_GRTUSDT = data['data']['B'] 
		price_asks_a_l_GRTUSDT = data['data']['a'] 
		qty_asks_a_l_GRTUSDT = data['data']['A'] 

		global symbol_a_g_GRTUSDT 
		global price_bids_a_g_GRTUSDT 
		global qty_bids_a_g_GRTUSDT 
		global price_asks_a_g_GRTUSDT 
		global qty_asks_a_g_GRTUSDT 

		symbol_a_g_GRTUSDT = symbol_a_l_GRTUSDT 
		price_bids_a_g_GRTUSDT = price_bids_a_l_GRTUSDT 
		qty_bids_a_g_GRTUSDT = qty_bids_a_l_GRTUSDT 
		price_asks_a_g_GRTUSDT = price_asks_a_l_GRTUSDT 
		qty_asks_a_g_GRTUSDT = qty_asks_a_l_GRTUSDT 

	if data['stream'] == streamgrtbtc :
		data = json.loads(message) 

		symbol_b_l_GRTBTC = data['data']['s'] 
		price_bids_b_l_GRTBTC = data['data']['b'] 
		qty_bids_b_l_GRTBTC = data['data']['B']
		price_asks_b_l_GRTBTC = data['data']['a'] 
		qty_asks_b_l_GRTBTC = data['data']['A'] 

		global symbol_b_g_GRTBTC 
		global price_bids_b_g_GRTBTC 
		global qty_bids_b_g_GRTBTC 
		global price_asks_b_g_GRTBTC 
		global qty_asks_b_g_GRTBTC 

		symbol_b_g_GRTBTC = symbol_b_l_GRTBTC 
		price_bids_b_g_GRTBTC = price_bids_b_l_GRTBTC 
		qty_bids_b_g_GRTBTC = qty_bids_b_l_GRTBTC 
		price_asks_b_g_GRTBTC = price_asks_b_l_GRTBTC 
		qty_asks_b_g_GRTBTC = qty_asks_b_l_GRTBTC 


def loop_GRTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamgrtusdt}/{streamgrtbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_GRTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_GRTUSDT).start()

def loop_GRTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_GRTUSDT != 0.0 and qty_bids_a_g_GRTUSDT != 0.0 and price_asks_a_g_GRTUSDT != 0.0 and qty_asks_a_g_GRTUSDT != 0.0 and price_bids_b_g_GRTBTC != 0.0 and qty_bids_b_g_GRTBTC != 0.0 and price_asks_b_g_GRTBTC != 0.0 and qty_asks_b_g_GRTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_GRTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_GRTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_GRTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_GRTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_GRTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_GRTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_GRTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_GRTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_GRTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_GRTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_GRTUSDT_Trade).start() 

streamjuvusdt = 'juvusdt@bookTicker'
streamjuvbtc  = 'juvbtc@bookTicker'

symbol_a_g_JUVUSDT = 'JUVUSDT' 
price_bids_a_g_JUVUSDT = float(0.0) 
qty_bids_a_g_JUVUSDT = float(0.0) 
price_asks_a_g_JUVUSDT = float(0.0) 
qty_asks_a_g_JUVUSDT = float(0.0) 

stepSize_JUVUSDT = 0.01000000 

symbol_b_g_JUVBTC = 'JUVBTC' 
price_bids_b_g_JUVBTC = float(0.0) 
qty_bids_b_g_JUVBTC = float(0.0) 
price_asks_b_g_JUVBTC = float(0.0) 
qty_asks_b_g_JUVBTC = float(0.0) 

stepSize_JUVBTC = 0.01000000 

def on_message_JUVUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamjuvusdt :
		symbol_a_l_JUVUSDT = data['data']['s'] 
		price_bids_a_l_JUVUSDT = data['data']['b'] 
		qty_bids_a_l_JUVUSDT = data['data']['B'] 
		price_asks_a_l_JUVUSDT = data['data']['a'] 
		qty_asks_a_l_JUVUSDT = data['data']['A'] 

		global symbol_a_g_JUVUSDT 
		global price_bids_a_g_JUVUSDT 
		global qty_bids_a_g_JUVUSDT 
		global price_asks_a_g_JUVUSDT 
		global qty_asks_a_g_JUVUSDT 

		symbol_a_g_JUVUSDT = symbol_a_l_JUVUSDT 
		price_bids_a_g_JUVUSDT = price_bids_a_l_JUVUSDT 
		qty_bids_a_g_JUVUSDT = qty_bids_a_l_JUVUSDT 
		price_asks_a_g_JUVUSDT = price_asks_a_l_JUVUSDT 
		qty_asks_a_g_JUVUSDT = qty_asks_a_l_JUVUSDT 

	if data['stream'] == streamjuvbtc :
		data = json.loads(message) 

		symbol_b_l_JUVBTC = data['data']['s'] 
		price_bids_b_l_JUVBTC = data['data']['b'] 
		qty_bids_b_l_JUVBTC = data['data']['B']
		price_asks_b_l_JUVBTC = data['data']['a'] 
		qty_asks_b_l_JUVBTC = data['data']['A'] 

		global symbol_b_g_JUVBTC 
		global price_bids_b_g_JUVBTC 
		global qty_bids_b_g_JUVBTC 
		global price_asks_b_g_JUVBTC 
		global qty_asks_b_g_JUVBTC 

		symbol_b_g_JUVBTC = symbol_b_l_JUVBTC 
		price_bids_b_g_JUVBTC = price_bids_b_l_JUVBTC 
		qty_bids_b_g_JUVBTC = qty_bids_b_l_JUVBTC 
		price_asks_b_g_JUVBTC = price_asks_b_l_JUVBTC 
		qty_asks_b_g_JUVBTC = qty_asks_b_l_JUVBTC 


def loop_JUVUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamjuvusdt}/{streamjuvbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_JUVUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_JUVUSDT).start()

def loop_JUVUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_JUVUSDT != 0.0 and qty_bids_a_g_JUVUSDT != 0.0 and price_asks_a_g_JUVUSDT != 0.0 and qty_asks_a_g_JUVUSDT != 0.0 and price_bids_b_g_JUVBTC != 0.0 and qty_bids_b_g_JUVBTC != 0.0 and price_asks_b_g_JUVBTC != 0.0 and qty_asks_b_g_JUVBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_JUVBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_JUVBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_JUVUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_JUVUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_JUVBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_JUVBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_JUVUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_JUVUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_JUVBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_JUVBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_JUVUSDT_Trade).start() 

streampsgusdt = 'psgusdt@bookTicker'
streampsgbtc  = 'psgbtc@bookTicker'

symbol_a_g_PSGUSDT = 'PSGUSDT' 
price_bids_a_g_PSGUSDT = float(0.0) 
qty_bids_a_g_PSGUSDT = float(0.0) 
price_asks_a_g_PSGUSDT = float(0.0) 
qty_asks_a_g_PSGUSDT = float(0.0) 

stepSize_PSGUSDT = 0.01000000 

symbol_b_g_PSGBTC = 'PSGBTC' 
price_bids_b_g_PSGBTC = float(0.0) 
qty_bids_b_g_PSGBTC = float(0.0) 
price_asks_b_g_PSGBTC = float(0.0) 
qty_asks_b_g_PSGBTC = float(0.0) 

stepSize_PSGBTC = 0.01000000 

def on_message_PSGUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streampsgusdt :
		symbol_a_l_PSGUSDT = data['data']['s'] 
		price_bids_a_l_PSGUSDT = data['data']['b'] 
		qty_bids_a_l_PSGUSDT = data['data']['B'] 
		price_asks_a_l_PSGUSDT = data['data']['a'] 
		qty_asks_a_l_PSGUSDT = data['data']['A'] 

		global symbol_a_g_PSGUSDT 
		global price_bids_a_g_PSGUSDT 
		global qty_bids_a_g_PSGUSDT 
		global price_asks_a_g_PSGUSDT 
		global qty_asks_a_g_PSGUSDT 

		symbol_a_g_PSGUSDT = symbol_a_l_PSGUSDT 
		price_bids_a_g_PSGUSDT = price_bids_a_l_PSGUSDT 
		qty_bids_a_g_PSGUSDT = qty_bids_a_l_PSGUSDT 
		price_asks_a_g_PSGUSDT = price_asks_a_l_PSGUSDT 
		qty_asks_a_g_PSGUSDT = qty_asks_a_l_PSGUSDT 

	if data['stream'] == streampsgbtc :
		data = json.loads(message) 

		symbol_b_l_PSGBTC = data['data']['s'] 
		price_bids_b_l_PSGBTC = data['data']['b'] 
		qty_bids_b_l_PSGBTC = data['data']['B']
		price_asks_b_l_PSGBTC = data['data']['a'] 
		qty_asks_b_l_PSGBTC = data['data']['A'] 

		global symbol_b_g_PSGBTC 
		global price_bids_b_g_PSGBTC 
		global qty_bids_b_g_PSGBTC 
		global price_asks_b_g_PSGBTC 
		global qty_asks_b_g_PSGBTC 

		symbol_b_g_PSGBTC = symbol_b_l_PSGBTC 
		price_bids_b_g_PSGBTC = price_bids_b_l_PSGBTC 
		qty_bids_b_g_PSGBTC = qty_bids_b_l_PSGBTC 
		price_asks_b_g_PSGBTC = price_asks_b_l_PSGBTC 
		qty_asks_b_g_PSGBTC = qty_asks_b_l_PSGBTC 


def loop_PSGUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streampsgusdt}/{streampsgbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_PSGUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_PSGUSDT).start()

def loop_PSGUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_PSGUSDT != 0.0 and qty_bids_a_g_PSGUSDT != 0.0 and price_asks_a_g_PSGUSDT != 0.0 and qty_asks_a_g_PSGUSDT != 0.0 and price_bids_b_g_PSGBTC != 0.0 and qty_bids_b_g_PSGBTC != 0.0 and price_asks_b_g_PSGBTC != 0.0 and qty_asks_b_g_PSGBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_PSGBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_PSGBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_PSGUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_PSGUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_PSGBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_PSGBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_PSGUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_PSGUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_PSGBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_PSGBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_PSGUSDT_Trade).start() 

stream1inchusdt = '1inchusdt@bookTicker'
stream1inchbtc  = '1inchbtc@bookTicker'

symbol_a_g_1INCHUSDT = '1INCHUSDT' 
price_bids_a_g_1INCHUSDT = float(0.0) 
qty_bids_a_g_1INCHUSDT = float(0.0) 
price_asks_a_g_1INCHUSDT = float(0.0) 
qty_asks_a_g_1INCHUSDT = float(0.0) 

stepSize_1INCHUSDT = 0.10000000 

symbol_b_g_1INCHBTC = '1INCHBTC' 
price_bids_b_g_1INCHBTC = float(0.0) 
qty_bids_b_g_1INCHBTC = float(0.0) 
price_asks_b_g_1INCHBTC = float(0.0) 
qty_asks_b_g_1INCHBTC = float(0.0) 

stepSize_1INCHBTC = 0.10000000 

def on_message_1INCHUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == stream1inchusdt :
		symbol_a_l_1INCHUSDT = data['data']['s'] 
		price_bids_a_l_1INCHUSDT = data['data']['b'] 
		qty_bids_a_l_1INCHUSDT = data['data']['B'] 
		price_asks_a_l_1INCHUSDT = data['data']['a'] 
		qty_asks_a_l_1INCHUSDT = data['data']['A'] 

		global symbol_a_g_1INCHUSDT 
		global price_bids_a_g_1INCHUSDT 
		global qty_bids_a_g_1INCHUSDT 
		global price_asks_a_g_1INCHUSDT 
		global qty_asks_a_g_1INCHUSDT 

		symbol_a_g_1INCHUSDT = symbol_a_l_1INCHUSDT 
		price_bids_a_g_1INCHUSDT = price_bids_a_l_1INCHUSDT 
		qty_bids_a_g_1INCHUSDT = qty_bids_a_l_1INCHUSDT 
		price_asks_a_g_1INCHUSDT = price_asks_a_l_1INCHUSDT 
		qty_asks_a_g_1INCHUSDT = qty_asks_a_l_1INCHUSDT 

	if data['stream'] == stream1inchbtc :
		data = json.loads(message) 

		symbol_b_l_1INCHBTC = data['data']['s'] 
		price_bids_b_l_1INCHBTC = data['data']['b'] 
		qty_bids_b_l_1INCHBTC = data['data']['B']
		price_asks_b_l_1INCHBTC = data['data']['a'] 
		qty_asks_b_l_1INCHBTC = data['data']['A'] 

		global symbol_b_g_1INCHBTC 
		global price_bids_b_g_1INCHBTC 
		global qty_bids_b_g_1INCHBTC 
		global price_asks_b_g_1INCHBTC 
		global qty_asks_b_g_1INCHBTC 

		symbol_b_g_1INCHBTC = symbol_b_l_1INCHBTC 
		price_bids_b_g_1INCHBTC = price_bids_b_l_1INCHBTC 
		qty_bids_b_g_1INCHBTC = qty_bids_b_l_1INCHBTC 
		price_asks_b_g_1INCHBTC = price_asks_b_l_1INCHBTC 
		qty_asks_b_g_1INCHBTC = qty_asks_b_l_1INCHBTC 


def loop_1INCHUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={stream1inchusdt}/{stream1inchbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_1INCHUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_1INCHUSDT).start()

def loop_1INCHUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_1INCHUSDT != 0.0 and qty_bids_a_g_1INCHUSDT != 0.0 and price_asks_a_g_1INCHUSDT != 0.0 and qty_asks_a_g_1INCHUSDT != 0.0 and price_bids_b_g_1INCHBTC != 0.0 and qty_bids_b_g_1INCHBTC != 0.0 and price_asks_b_g_1INCHBTC != 0.0 and qty_asks_b_g_1INCHBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_1INCHBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_1INCHBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_1INCHUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_1INCHUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_1INCHBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_1INCHBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_1INCHUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_1INCHUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_1INCHBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_1INCHBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_1INCHUSDT_Trade).start() 

streamogusdt = 'ogusdt@bookTicker'
streamogbtc  = 'ogbtc@bookTicker'

symbol_a_g_OGUSDT = 'OGUSDT' 
price_bids_a_g_OGUSDT = float(0.0) 
qty_bids_a_g_OGUSDT = float(0.0) 
price_asks_a_g_OGUSDT = float(0.0) 
qty_asks_a_g_OGUSDT = float(0.0) 

stepSize_OGUSDT = 0.10000000 

symbol_b_g_OGBTC = 'OGBTC' 
price_bids_b_g_OGBTC = float(0.0) 
qty_bids_b_g_OGBTC = float(0.0) 
price_asks_b_g_OGBTC = float(0.0) 
qty_asks_b_g_OGBTC = float(0.0) 

stepSize_OGBTC = 0.10000000 

def on_message_OGUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamogusdt :
		symbol_a_l_OGUSDT = data['data']['s'] 
		price_bids_a_l_OGUSDT = data['data']['b'] 
		qty_bids_a_l_OGUSDT = data['data']['B'] 
		price_asks_a_l_OGUSDT = data['data']['a'] 
		qty_asks_a_l_OGUSDT = data['data']['A'] 

		global symbol_a_g_OGUSDT 
		global price_bids_a_g_OGUSDT 
		global qty_bids_a_g_OGUSDT 
		global price_asks_a_g_OGUSDT 
		global qty_asks_a_g_OGUSDT 

		symbol_a_g_OGUSDT = symbol_a_l_OGUSDT 
		price_bids_a_g_OGUSDT = price_bids_a_l_OGUSDT 
		qty_bids_a_g_OGUSDT = qty_bids_a_l_OGUSDT 
		price_asks_a_g_OGUSDT = price_asks_a_l_OGUSDT 
		qty_asks_a_g_OGUSDT = qty_asks_a_l_OGUSDT 

	if data['stream'] == streamogbtc :
		data = json.loads(message) 

		symbol_b_l_OGBTC = data['data']['s'] 
		price_bids_b_l_OGBTC = data['data']['b'] 
		qty_bids_b_l_OGBTC = data['data']['B']
		price_asks_b_l_OGBTC = data['data']['a'] 
		qty_asks_b_l_OGBTC = data['data']['A'] 

		global symbol_b_g_OGBTC 
		global price_bids_b_g_OGBTC 
		global qty_bids_b_g_OGBTC 
		global price_asks_b_g_OGBTC 
		global qty_asks_b_g_OGBTC 

		symbol_b_g_OGBTC = symbol_b_l_OGBTC 
		price_bids_b_g_OGBTC = price_bids_b_l_OGBTC 
		qty_bids_b_g_OGBTC = qty_bids_b_l_OGBTC 
		price_asks_b_g_OGBTC = price_asks_b_l_OGBTC 
		qty_asks_b_g_OGBTC = qty_asks_b_l_OGBTC 


def loop_OGUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamogusdt}/{streamogbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_OGUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_OGUSDT).start()

def loop_OGUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_OGUSDT != 0.0 and qty_bids_a_g_OGUSDT != 0.0 and price_asks_a_g_OGUSDT != 0.0 and qty_asks_a_g_OGUSDT != 0.0 and price_bids_b_g_OGBTC != 0.0 and qty_bids_b_g_OGBTC != 0.0 and price_asks_b_g_OGBTC != 0.0 and qty_asks_b_g_OGBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_OGBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_OGBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_OGUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_OGUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_OGBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_OGBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_OGUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_OGUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_OGBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_OGBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_OGUSDT_Trade).start() 

streamatmusdt = 'atmusdt@bookTicker'
streamatmbtc  = 'atmbtc@bookTicker'

symbol_a_g_ATMUSDT = 'ATMUSDT' 
price_bids_a_g_ATMUSDT = float(0.0) 
qty_bids_a_g_ATMUSDT = float(0.0) 
price_asks_a_g_ATMUSDT = float(0.0) 
qty_asks_a_g_ATMUSDT = float(0.0) 

stepSize_ATMUSDT = 0.01000000 

symbol_b_g_ATMBTC = 'ATMBTC' 
price_bids_b_g_ATMBTC = float(0.0) 
qty_bids_b_g_ATMBTC = float(0.0) 
price_asks_b_g_ATMBTC = float(0.0) 
qty_asks_b_g_ATMBTC = float(0.0) 

stepSize_ATMBTC = 0.01000000 

def on_message_ATMUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamatmusdt :
		symbol_a_l_ATMUSDT = data['data']['s'] 
		price_bids_a_l_ATMUSDT = data['data']['b'] 
		qty_bids_a_l_ATMUSDT = data['data']['B'] 
		price_asks_a_l_ATMUSDT = data['data']['a'] 
		qty_asks_a_l_ATMUSDT = data['data']['A'] 

		global symbol_a_g_ATMUSDT 
		global price_bids_a_g_ATMUSDT 
		global qty_bids_a_g_ATMUSDT 
		global price_asks_a_g_ATMUSDT 
		global qty_asks_a_g_ATMUSDT 

		symbol_a_g_ATMUSDT = symbol_a_l_ATMUSDT 
		price_bids_a_g_ATMUSDT = price_bids_a_l_ATMUSDT 
		qty_bids_a_g_ATMUSDT = qty_bids_a_l_ATMUSDT 
		price_asks_a_g_ATMUSDT = price_asks_a_l_ATMUSDT 
		qty_asks_a_g_ATMUSDT = qty_asks_a_l_ATMUSDT 

	if data['stream'] == streamatmbtc :
		data = json.loads(message) 

		symbol_b_l_ATMBTC = data['data']['s'] 
		price_bids_b_l_ATMBTC = data['data']['b'] 
		qty_bids_b_l_ATMBTC = data['data']['B']
		price_asks_b_l_ATMBTC = data['data']['a'] 
		qty_asks_b_l_ATMBTC = data['data']['A'] 

		global symbol_b_g_ATMBTC 
		global price_bids_b_g_ATMBTC 
		global qty_bids_b_g_ATMBTC 
		global price_asks_b_g_ATMBTC 
		global qty_asks_b_g_ATMBTC 

		symbol_b_g_ATMBTC = symbol_b_l_ATMBTC 
		price_bids_b_g_ATMBTC = price_bids_b_l_ATMBTC 
		qty_bids_b_g_ATMBTC = qty_bids_b_l_ATMBTC 
		price_asks_b_g_ATMBTC = price_asks_b_l_ATMBTC 
		qty_asks_b_g_ATMBTC = qty_asks_b_l_ATMBTC 


def loop_ATMUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamatmusdt}/{streamatmbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ATMUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ATMUSDT).start()

def loop_ATMUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ATMUSDT != 0.0 and qty_bids_a_g_ATMUSDT != 0.0 and price_asks_a_g_ATMUSDT != 0.0 and qty_asks_a_g_ATMUSDT != 0.0 and price_bids_b_g_ATMBTC != 0.0 and qty_bids_b_g_ATMBTC != 0.0 and price_asks_b_g_ATMBTC != 0.0 and qty_asks_b_g_ATMBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ATMBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ATMBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ATMUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ATMUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ATMBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ATMBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ATMUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ATMUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ATMBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ATMBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ATMUSDT_Trade).start() 

streamasrusdt = 'asrusdt@bookTicker'
streamasrbtc  = 'asrbtc@bookTicker'

symbol_a_g_ASRUSDT = 'ASRUSDT' 
price_bids_a_g_ASRUSDT = float(0.0) 
qty_bids_a_g_ASRUSDT = float(0.0) 
price_asks_a_g_ASRUSDT = float(0.0) 
qty_asks_a_g_ASRUSDT = float(0.0) 

stepSize_ASRUSDT = 0.10000000 

symbol_b_g_ASRBTC = 'ASRBTC' 
price_bids_b_g_ASRBTC = float(0.0) 
qty_bids_b_g_ASRBTC = float(0.0) 
price_asks_b_g_ASRBTC = float(0.0) 
qty_asks_b_g_ASRBTC = float(0.0) 

stepSize_ASRBTC = 0.10000000 

def on_message_ASRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamasrusdt :
		symbol_a_l_ASRUSDT = data['data']['s'] 
		price_bids_a_l_ASRUSDT = data['data']['b'] 
		qty_bids_a_l_ASRUSDT = data['data']['B'] 
		price_asks_a_l_ASRUSDT = data['data']['a'] 
		qty_asks_a_l_ASRUSDT = data['data']['A'] 

		global symbol_a_g_ASRUSDT 
		global price_bids_a_g_ASRUSDT 
		global qty_bids_a_g_ASRUSDT 
		global price_asks_a_g_ASRUSDT 
		global qty_asks_a_g_ASRUSDT 

		symbol_a_g_ASRUSDT = symbol_a_l_ASRUSDT 
		price_bids_a_g_ASRUSDT = price_bids_a_l_ASRUSDT 
		qty_bids_a_g_ASRUSDT = qty_bids_a_l_ASRUSDT 
		price_asks_a_g_ASRUSDT = price_asks_a_l_ASRUSDT 
		qty_asks_a_g_ASRUSDT = qty_asks_a_l_ASRUSDT 

	if data['stream'] == streamasrbtc :
		data = json.loads(message) 

		symbol_b_l_ASRBTC = data['data']['s'] 
		price_bids_b_l_ASRBTC = data['data']['b'] 
		qty_bids_b_l_ASRBTC = data['data']['B']
		price_asks_b_l_ASRBTC = data['data']['a'] 
		qty_asks_b_l_ASRBTC = data['data']['A'] 

		global symbol_b_g_ASRBTC 
		global price_bids_b_g_ASRBTC 
		global qty_bids_b_g_ASRBTC 
		global price_asks_b_g_ASRBTC 
		global qty_asks_b_g_ASRBTC 

		symbol_b_g_ASRBTC = symbol_b_l_ASRBTC 
		price_bids_b_g_ASRBTC = price_bids_b_l_ASRBTC 
		qty_bids_b_g_ASRBTC = qty_bids_b_l_ASRBTC 
		price_asks_b_g_ASRBTC = price_asks_b_l_ASRBTC 
		qty_asks_b_g_ASRBTC = qty_asks_b_l_ASRBTC 


def loop_ASRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamasrusdt}/{streamasrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ASRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ASRUSDT).start()

def loop_ASRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ASRUSDT != 0.0 and qty_bids_a_g_ASRUSDT != 0.0 and price_asks_a_g_ASRUSDT != 0.0 and qty_asks_a_g_ASRUSDT != 0.0 and price_bids_b_g_ASRBTC != 0.0 and qty_bids_b_g_ASRBTC != 0.0 and price_asks_b_g_ASRBTC != 0.0 and qty_asks_b_g_ASRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ASRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ASRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ASRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ASRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ASRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ASRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ASRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ASRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ASRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ASRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ASRUSDT_Trade).start() 

streamcelousdt = 'celousdt@bookTicker'
streamcelobtc  = 'celobtc@bookTicker'

symbol_a_g_CELOUSDT = 'CELOUSDT' 
price_bids_a_g_CELOUSDT = float(0.0) 
qty_bids_a_g_CELOUSDT = float(0.0) 
price_asks_a_g_CELOUSDT = float(0.0) 
qty_asks_a_g_CELOUSDT = float(0.0) 

stepSize_CELOUSDT = 0.10000000 

symbol_b_g_CELOBTC = 'CELOBTC' 
price_bids_b_g_CELOBTC = float(0.0) 
qty_bids_b_g_CELOBTC = float(0.0) 
price_asks_b_g_CELOBTC = float(0.0) 
qty_asks_b_g_CELOBTC = float(0.0) 

stepSize_CELOBTC = 0.10000000 

def on_message_CELOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamcelousdt :
		symbol_a_l_CELOUSDT = data['data']['s'] 
		price_bids_a_l_CELOUSDT = data['data']['b'] 
		qty_bids_a_l_CELOUSDT = data['data']['B'] 
		price_asks_a_l_CELOUSDT = data['data']['a'] 
		qty_asks_a_l_CELOUSDT = data['data']['A'] 

		global symbol_a_g_CELOUSDT 
		global price_bids_a_g_CELOUSDT 
		global qty_bids_a_g_CELOUSDT 
		global price_asks_a_g_CELOUSDT 
		global qty_asks_a_g_CELOUSDT 

		symbol_a_g_CELOUSDT = symbol_a_l_CELOUSDT 
		price_bids_a_g_CELOUSDT = price_bids_a_l_CELOUSDT 
		qty_bids_a_g_CELOUSDT = qty_bids_a_l_CELOUSDT 
		price_asks_a_g_CELOUSDT = price_asks_a_l_CELOUSDT 
		qty_asks_a_g_CELOUSDT = qty_asks_a_l_CELOUSDT 

	if data['stream'] == streamcelobtc :
		data = json.loads(message) 

		symbol_b_l_CELOBTC = data['data']['s'] 
		price_bids_b_l_CELOBTC = data['data']['b'] 
		qty_bids_b_l_CELOBTC = data['data']['B']
		price_asks_b_l_CELOBTC = data['data']['a'] 
		qty_asks_b_l_CELOBTC = data['data']['A'] 

		global symbol_b_g_CELOBTC 
		global price_bids_b_g_CELOBTC 
		global qty_bids_b_g_CELOBTC 
		global price_asks_b_g_CELOBTC 
		global qty_asks_b_g_CELOBTC 

		symbol_b_g_CELOBTC = symbol_b_l_CELOBTC 
		price_bids_b_g_CELOBTC = price_bids_b_l_CELOBTC 
		qty_bids_b_g_CELOBTC = qty_bids_b_l_CELOBTC 
		price_asks_b_g_CELOBTC = price_asks_b_l_CELOBTC 
		qty_asks_b_g_CELOBTC = qty_asks_b_l_CELOBTC 


def loop_CELOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamcelousdt}/{streamcelobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CELOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CELOUSDT).start()

def loop_CELOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CELOUSDT != 0.0 and qty_bids_a_g_CELOUSDT != 0.0 and price_asks_a_g_CELOUSDT != 0.0 and qty_asks_a_g_CELOUSDT != 0.0 and price_bids_b_g_CELOBTC != 0.0 and qty_bids_b_g_CELOBTC != 0.0 and price_asks_b_g_CELOBTC != 0.0 and qty_asks_b_g_CELOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CELOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CELOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CELOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CELOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CELOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CELOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CELOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CELOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CELOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CELOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CELOUSDT_Trade).start() 

streamrifusdt = 'rifusdt@bookTicker'
streamrifbtc  = 'rifbtc@bookTicker'

symbol_a_g_RIFUSDT = 'RIFUSDT' 
price_bids_a_g_RIFUSDT = float(0.0) 
qty_bids_a_g_RIFUSDT = float(0.0) 
price_asks_a_g_RIFUSDT = float(0.0) 
qty_asks_a_g_RIFUSDT = float(0.0) 

stepSize_RIFUSDT = 1.00000000 

symbol_b_g_RIFBTC = 'RIFBTC' 
price_bids_b_g_RIFBTC = float(0.0) 
qty_bids_b_g_RIFBTC = float(0.0) 
price_asks_b_g_RIFBTC = float(0.0) 
qty_asks_b_g_RIFBTC = float(0.0) 

stepSize_RIFBTC = 1.00000000 

def on_message_RIFUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamrifusdt :
		symbol_a_l_RIFUSDT = data['data']['s'] 
		price_bids_a_l_RIFUSDT = data['data']['b'] 
		qty_bids_a_l_RIFUSDT = data['data']['B'] 
		price_asks_a_l_RIFUSDT = data['data']['a'] 
		qty_asks_a_l_RIFUSDT = data['data']['A'] 

		global symbol_a_g_RIFUSDT 
		global price_bids_a_g_RIFUSDT 
		global qty_bids_a_g_RIFUSDT 
		global price_asks_a_g_RIFUSDT 
		global qty_asks_a_g_RIFUSDT 

		symbol_a_g_RIFUSDT = symbol_a_l_RIFUSDT 
		price_bids_a_g_RIFUSDT = price_bids_a_l_RIFUSDT 
		qty_bids_a_g_RIFUSDT = qty_bids_a_l_RIFUSDT 
		price_asks_a_g_RIFUSDT = price_asks_a_l_RIFUSDT 
		qty_asks_a_g_RIFUSDT = qty_asks_a_l_RIFUSDT 

	if data['stream'] == streamrifbtc :
		data = json.loads(message) 

		symbol_b_l_RIFBTC = data['data']['s'] 
		price_bids_b_l_RIFBTC = data['data']['b'] 
		qty_bids_b_l_RIFBTC = data['data']['B']
		price_asks_b_l_RIFBTC = data['data']['a'] 
		qty_asks_b_l_RIFBTC = data['data']['A'] 

		global symbol_b_g_RIFBTC 
		global price_bids_b_g_RIFBTC 
		global qty_bids_b_g_RIFBTC 
		global price_asks_b_g_RIFBTC 
		global qty_asks_b_g_RIFBTC 

		symbol_b_g_RIFBTC = symbol_b_l_RIFBTC 
		price_bids_b_g_RIFBTC = price_bids_b_l_RIFBTC 
		qty_bids_b_g_RIFBTC = qty_bids_b_l_RIFBTC 
		price_asks_b_g_RIFBTC = price_asks_b_l_RIFBTC 
		qty_asks_b_g_RIFBTC = qty_asks_b_l_RIFBTC 


def loop_RIFUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamrifusdt}/{streamrifbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_RIFUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_RIFUSDT).start()

def loop_RIFUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_RIFUSDT != 0.0 and qty_bids_a_g_RIFUSDT != 0.0 and price_asks_a_g_RIFUSDT != 0.0 and qty_asks_a_g_RIFUSDT != 0.0 and price_bids_b_g_RIFBTC != 0.0 and qty_bids_b_g_RIFBTC != 0.0 and price_asks_b_g_RIFBTC != 0.0 and qty_asks_b_g_RIFBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_RIFBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_RIFBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_RIFUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_RIFUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_RIFBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_RIFBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_RIFUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_RIFUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_RIFBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_RIFBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_RIFUSDT_Trade).start() 

streamtruusdt = 'truusdt@bookTicker'
streamtrubtc  = 'trubtc@bookTicker'

symbol_a_g_TRUUSDT = 'TRUUSDT' 
price_bids_a_g_TRUUSDT = float(0.0) 
qty_bids_a_g_TRUUSDT = float(0.0) 
price_asks_a_g_TRUUSDT = float(0.0) 
qty_asks_a_g_TRUUSDT = float(0.0) 

stepSize_TRUUSDT = 1.00000000 

symbol_b_g_TRUBTC = 'TRUBTC' 
price_bids_b_g_TRUBTC = float(0.0) 
qty_bids_b_g_TRUBTC = float(0.0) 
price_asks_b_g_TRUBTC = float(0.0) 
qty_asks_b_g_TRUBTC = float(0.0) 

stepSize_TRUBTC = 1.00000000 

def on_message_TRUUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamtruusdt :
		symbol_a_l_TRUUSDT = data['data']['s'] 
		price_bids_a_l_TRUUSDT = data['data']['b'] 
		qty_bids_a_l_TRUUSDT = data['data']['B'] 
		price_asks_a_l_TRUUSDT = data['data']['a'] 
		qty_asks_a_l_TRUUSDT = data['data']['A'] 

		global symbol_a_g_TRUUSDT 
		global price_bids_a_g_TRUUSDT 
		global qty_bids_a_g_TRUUSDT 
		global price_asks_a_g_TRUUSDT 
		global qty_asks_a_g_TRUUSDT 

		symbol_a_g_TRUUSDT = symbol_a_l_TRUUSDT 
		price_bids_a_g_TRUUSDT = price_bids_a_l_TRUUSDT 
		qty_bids_a_g_TRUUSDT = qty_bids_a_l_TRUUSDT 
		price_asks_a_g_TRUUSDT = price_asks_a_l_TRUUSDT 
		qty_asks_a_g_TRUUSDT = qty_asks_a_l_TRUUSDT 

	if data['stream'] == streamtrubtc :
		data = json.loads(message) 

		symbol_b_l_TRUBTC = data['data']['s'] 
		price_bids_b_l_TRUBTC = data['data']['b'] 
		qty_bids_b_l_TRUBTC = data['data']['B']
		price_asks_b_l_TRUBTC = data['data']['a'] 
		qty_asks_b_l_TRUBTC = data['data']['A'] 

		global symbol_b_g_TRUBTC 
		global price_bids_b_g_TRUBTC 
		global qty_bids_b_g_TRUBTC 
		global price_asks_b_g_TRUBTC 
		global qty_asks_b_g_TRUBTC 

		symbol_b_g_TRUBTC = symbol_b_l_TRUBTC 
		price_bids_b_g_TRUBTC = price_bids_b_l_TRUBTC 
		qty_bids_b_g_TRUBTC = qty_bids_b_l_TRUBTC 
		price_asks_b_g_TRUBTC = price_asks_b_l_TRUBTC 
		qty_asks_b_g_TRUBTC = qty_asks_b_l_TRUBTC 


def loop_TRUUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamtruusdt}/{streamtrubtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_TRUUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_TRUUSDT).start()

def loop_TRUUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_TRUUSDT != 0.0 and qty_bids_a_g_TRUUSDT != 0.0 and price_asks_a_g_TRUUSDT != 0.0 and qty_asks_a_g_TRUUSDT != 0.0 and price_bids_b_g_TRUBTC != 0.0 and qty_bids_b_g_TRUBTC != 0.0 and price_asks_b_g_TRUBTC != 0.0 and qty_asks_b_g_TRUBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_TRUBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_TRUBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_TRUUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_TRUUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_TRUBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_TRUBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_TRUUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_TRUUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_TRUBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_TRUBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_TRUUSDT_Trade).start() 

streamtwtusdt = 'twtusdt@bookTicker'
streamtwtbtc  = 'twtbtc@bookTicker'

symbol_a_g_TWTUSDT = 'TWTUSDT' 
price_bids_a_g_TWTUSDT = float(0.0) 
qty_bids_a_g_TWTUSDT = float(0.0) 
price_asks_a_g_TWTUSDT = float(0.0) 
qty_asks_a_g_TWTUSDT = float(0.0) 

stepSize_TWTUSDT = 1.00000000 

symbol_b_g_TWTBTC = 'TWTBTC' 
price_bids_b_g_TWTBTC = float(0.0) 
qty_bids_b_g_TWTBTC = float(0.0) 
price_asks_b_g_TWTBTC = float(0.0) 
qty_asks_b_g_TWTBTC = float(0.0) 

stepSize_TWTBTC = 1.00000000 

def on_message_TWTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamtwtusdt :
		symbol_a_l_TWTUSDT = data['data']['s'] 
		price_bids_a_l_TWTUSDT = data['data']['b'] 
		qty_bids_a_l_TWTUSDT = data['data']['B'] 
		price_asks_a_l_TWTUSDT = data['data']['a'] 
		qty_asks_a_l_TWTUSDT = data['data']['A'] 

		global symbol_a_g_TWTUSDT 
		global price_bids_a_g_TWTUSDT 
		global qty_bids_a_g_TWTUSDT 
		global price_asks_a_g_TWTUSDT 
		global qty_asks_a_g_TWTUSDT 

		symbol_a_g_TWTUSDT = symbol_a_l_TWTUSDT 
		price_bids_a_g_TWTUSDT = price_bids_a_l_TWTUSDT 
		qty_bids_a_g_TWTUSDT = qty_bids_a_l_TWTUSDT 
		price_asks_a_g_TWTUSDT = price_asks_a_l_TWTUSDT 
		qty_asks_a_g_TWTUSDT = qty_asks_a_l_TWTUSDT 

	if data['stream'] == streamtwtbtc :
		data = json.loads(message) 

		symbol_b_l_TWTBTC = data['data']['s'] 
		price_bids_b_l_TWTBTC = data['data']['b'] 
		qty_bids_b_l_TWTBTC = data['data']['B']
		price_asks_b_l_TWTBTC = data['data']['a'] 
		qty_asks_b_l_TWTBTC = data['data']['A'] 

		global symbol_b_g_TWTBTC 
		global price_bids_b_g_TWTBTC 
		global qty_bids_b_g_TWTBTC 
		global price_asks_b_g_TWTBTC 
		global qty_asks_b_g_TWTBTC 

		symbol_b_g_TWTBTC = symbol_b_l_TWTBTC 
		price_bids_b_g_TWTBTC = price_bids_b_l_TWTBTC 
		qty_bids_b_g_TWTBTC = qty_bids_b_l_TWTBTC 
		price_asks_b_g_TWTBTC = price_asks_b_l_TWTBTC 
		qty_asks_b_g_TWTBTC = qty_asks_b_l_TWTBTC 


def loop_TWTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamtwtusdt}/{streamtwtbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_TWTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_TWTUSDT).start()

def loop_TWTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_TWTUSDT != 0.0 and qty_bids_a_g_TWTUSDT != 0.0 and price_asks_a_g_TWTUSDT != 0.0 and qty_asks_a_g_TWTUSDT != 0.0 and price_bids_b_g_TWTBTC != 0.0 and qty_bids_b_g_TWTBTC != 0.0 and price_asks_b_g_TWTBTC != 0.0 and qty_asks_b_g_TWTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_TWTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_TWTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_TWTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_TWTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_TWTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_TWTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_TWTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_TWTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_TWTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_TWTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_TWTUSDT_Trade).start() 

streamfirousdt = 'firousdt@bookTicker'
streamfirobtc  = 'firobtc@bookTicker'

symbol_a_g_FIROUSDT = 'FIROUSDT' 
price_bids_a_g_FIROUSDT = float(0.0) 
qty_bids_a_g_FIROUSDT = float(0.0) 
price_asks_a_g_FIROUSDT = float(0.0) 
qty_asks_a_g_FIROUSDT = float(0.0) 

stepSize_FIROUSDT = 0.10000000 

symbol_b_g_FIROBTC = 'FIROBTC' 
price_bids_b_g_FIROBTC = float(0.0) 
qty_bids_b_g_FIROBTC = float(0.0) 
price_asks_b_g_FIROBTC = float(0.0) 
qty_asks_b_g_FIROBTC = float(0.0) 

stepSize_FIROBTC = 0.10000000 

def on_message_FIROUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamfirousdt :
		symbol_a_l_FIROUSDT = data['data']['s'] 
		price_bids_a_l_FIROUSDT = data['data']['b'] 
		qty_bids_a_l_FIROUSDT = data['data']['B'] 
		price_asks_a_l_FIROUSDT = data['data']['a'] 
		qty_asks_a_l_FIROUSDT = data['data']['A'] 

		global symbol_a_g_FIROUSDT 
		global price_bids_a_g_FIROUSDT 
		global qty_bids_a_g_FIROUSDT 
		global price_asks_a_g_FIROUSDT 
		global qty_asks_a_g_FIROUSDT 

		symbol_a_g_FIROUSDT = symbol_a_l_FIROUSDT 
		price_bids_a_g_FIROUSDT = price_bids_a_l_FIROUSDT 
		qty_bids_a_g_FIROUSDT = qty_bids_a_l_FIROUSDT 
		price_asks_a_g_FIROUSDT = price_asks_a_l_FIROUSDT 
		qty_asks_a_g_FIROUSDT = qty_asks_a_l_FIROUSDT 

	if data['stream'] == streamfirobtc :
		data = json.loads(message) 

		symbol_b_l_FIROBTC = data['data']['s'] 
		price_bids_b_l_FIROBTC = data['data']['b'] 
		qty_bids_b_l_FIROBTC = data['data']['B']
		price_asks_b_l_FIROBTC = data['data']['a'] 
		qty_asks_b_l_FIROBTC = data['data']['A'] 

		global symbol_b_g_FIROBTC 
		global price_bids_b_g_FIROBTC 
		global qty_bids_b_g_FIROBTC 
		global price_asks_b_g_FIROBTC 
		global qty_asks_b_g_FIROBTC 

		symbol_b_g_FIROBTC = symbol_b_l_FIROBTC 
		price_bids_b_g_FIROBTC = price_bids_b_l_FIROBTC 
		qty_bids_b_g_FIROBTC = qty_bids_b_l_FIROBTC 
		price_asks_b_g_FIROBTC = price_asks_b_l_FIROBTC 
		qty_asks_b_g_FIROBTC = qty_asks_b_l_FIROBTC 


def loop_FIROUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamfirousdt}/{streamfirobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FIROUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FIROUSDT).start()

def loop_FIROUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FIROUSDT != 0.0 and qty_bids_a_g_FIROUSDT != 0.0 and price_asks_a_g_FIROUSDT != 0.0 and qty_asks_a_g_FIROUSDT != 0.0 and price_bids_b_g_FIROBTC != 0.0 and qty_bids_b_g_FIROBTC != 0.0 and price_asks_b_g_FIROBTC != 0.0 and qty_asks_b_g_FIROBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FIROBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FIROBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FIROUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FIROUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FIROBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FIROBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FIROUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FIROUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FIROBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FIROBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FIROUSDT_Trade).start() 

streamlitusdt = 'litusdt@bookTicker'
streamlitbtc  = 'litbtc@bookTicker'

symbol_a_g_LITUSDT = 'LITUSDT' 
price_bids_a_g_LITUSDT = float(0.0) 
qty_bids_a_g_LITUSDT = float(0.0) 
price_asks_a_g_LITUSDT = float(0.0) 
qty_asks_a_g_LITUSDT = float(0.0) 

stepSize_LITUSDT = 0.10000000 

symbol_b_g_LITBTC = 'LITBTC' 
price_bids_b_g_LITBTC = float(0.0) 
qty_bids_b_g_LITBTC = float(0.0) 
price_asks_b_g_LITBTC = float(0.0) 
qty_asks_b_g_LITBTC = float(0.0) 

stepSize_LITBTC = 0.10000000 

def on_message_LITUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamlitusdt :
		symbol_a_l_LITUSDT = data['data']['s'] 
		price_bids_a_l_LITUSDT = data['data']['b'] 
		qty_bids_a_l_LITUSDT = data['data']['B'] 
		price_asks_a_l_LITUSDT = data['data']['a'] 
		qty_asks_a_l_LITUSDT = data['data']['A'] 

		global symbol_a_g_LITUSDT 
		global price_bids_a_g_LITUSDT 
		global qty_bids_a_g_LITUSDT 
		global price_asks_a_g_LITUSDT 
		global qty_asks_a_g_LITUSDT 

		symbol_a_g_LITUSDT = symbol_a_l_LITUSDT 
		price_bids_a_g_LITUSDT = price_bids_a_l_LITUSDT 
		qty_bids_a_g_LITUSDT = qty_bids_a_l_LITUSDT 
		price_asks_a_g_LITUSDT = price_asks_a_l_LITUSDT 
		qty_asks_a_g_LITUSDT = qty_asks_a_l_LITUSDT 

	if data['stream'] == streamlitbtc :
		data = json.loads(message) 

		symbol_b_l_LITBTC = data['data']['s'] 
		price_bids_b_l_LITBTC = data['data']['b'] 
		qty_bids_b_l_LITBTC = data['data']['B']
		price_asks_b_l_LITBTC = data['data']['a'] 
		qty_asks_b_l_LITBTC = data['data']['A'] 

		global symbol_b_g_LITBTC 
		global price_bids_b_g_LITBTC 
		global qty_bids_b_g_LITBTC 
		global price_asks_b_g_LITBTC 
		global qty_asks_b_g_LITBTC 

		symbol_b_g_LITBTC = symbol_b_l_LITBTC 
		price_bids_b_g_LITBTC = price_bids_b_l_LITBTC 
		qty_bids_b_g_LITBTC = qty_bids_b_l_LITBTC 
		price_asks_b_g_LITBTC = price_asks_b_l_LITBTC 
		qty_asks_b_g_LITBTC = qty_asks_b_l_LITBTC 


def loop_LITUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamlitusdt}/{streamlitbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_LITUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_LITUSDT).start()

def loop_LITUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_LITUSDT != 0.0 and qty_bids_a_g_LITUSDT != 0.0 and price_asks_a_g_LITUSDT != 0.0 and qty_asks_a_g_LITUSDT != 0.0 and price_bids_b_g_LITBTC != 0.0 and qty_bids_b_g_LITBTC != 0.0 and price_asks_b_g_LITBTC != 0.0 and qty_asks_b_g_LITBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_LITBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_LITBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_LITUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_LITUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_LITBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_LITBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_LITUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_LITUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_LITBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_LITBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_LITUSDT_Trade).start() 

streamsfpusdt = 'sfpusdt@bookTicker'
streamsfpbtc  = 'sfpbtc@bookTicker'

symbol_a_g_SFPUSDT = 'SFPUSDT' 
price_bids_a_g_SFPUSDT = float(0.0) 
qty_bids_a_g_SFPUSDT = float(0.0) 
price_asks_a_g_SFPUSDT = float(0.0) 
qty_asks_a_g_SFPUSDT = float(0.0) 

stepSize_SFPUSDT = 1.00000000 

symbol_b_g_SFPBTC = 'SFPBTC' 
price_bids_b_g_SFPBTC = float(0.0) 
qty_bids_b_g_SFPBTC = float(0.0) 
price_asks_b_g_SFPBTC = float(0.0) 
qty_asks_b_g_SFPBTC = float(0.0) 

stepSize_SFPBTC = 1.00000000 

def on_message_SFPUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamsfpusdt :
		symbol_a_l_SFPUSDT = data['data']['s'] 
		price_bids_a_l_SFPUSDT = data['data']['b'] 
		qty_bids_a_l_SFPUSDT = data['data']['B'] 
		price_asks_a_l_SFPUSDT = data['data']['a'] 
		qty_asks_a_l_SFPUSDT = data['data']['A'] 

		global symbol_a_g_SFPUSDT 
		global price_bids_a_g_SFPUSDT 
		global qty_bids_a_g_SFPUSDT 
		global price_asks_a_g_SFPUSDT 
		global qty_asks_a_g_SFPUSDT 

		symbol_a_g_SFPUSDT = symbol_a_l_SFPUSDT 
		price_bids_a_g_SFPUSDT = price_bids_a_l_SFPUSDT 
		qty_bids_a_g_SFPUSDT = qty_bids_a_l_SFPUSDT 
		price_asks_a_g_SFPUSDT = price_asks_a_l_SFPUSDT 
		qty_asks_a_g_SFPUSDT = qty_asks_a_l_SFPUSDT 

	if data['stream'] == streamsfpbtc :
		data = json.loads(message) 

		symbol_b_l_SFPBTC = data['data']['s'] 
		price_bids_b_l_SFPBTC = data['data']['b'] 
		qty_bids_b_l_SFPBTC = data['data']['B']
		price_asks_b_l_SFPBTC = data['data']['a'] 
		qty_asks_b_l_SFPBTC = data['data']['A'] 

		global symbol_b_g_SFPBTC 
		global price_bids_b_g_SFPBTC 
		global qty_bids_b_g_SFPBTC 
		global price_asks_b_g_SFPBTC 
		global qty_asks_b_g_SFPBTC 

		symbol_b_g_SFPBTC = symbol_b_l_SFPBTC 
		price_bids_b_g_SFPBTC = price_bids_b_l_SFPBTC 
		qty_bids_b_g_SFPBTC = qty_bids_b_l_SFPBTC 
		price_asks_b_g_SFPBTC = price_asks_b_l_SFPBTC 
		qty_asks_b_g_SFPBTC = qty_asks_b_l_SFPBTC 


def loop_SFPUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamsfpusdt}/{streamsfpbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_SFPUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_SFPUSDT).start()

def loop_SFPUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_SFPUSDT != 0.0 and qty_bids_a_g_SFPUSDT != 0.0 and price_asks_a_g_SFPUSDT != 0.0 and qty_asks_a_g_SFPUSDT != 0.0 and price_bids_b_g_SFPBTC != 0.0 and qty_bids_b_g_SFPBTC != 0.0 and price_asks_b_g_SFPBTC != 0.0 and qty_asks_b_g_SFPBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_SFPBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_SFPBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_SFPUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_SFPUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_SFPBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_SFPBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_SFPUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_SFPUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_SFPBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_SFPBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_SFPUSDT_Trade).start() 

streamdodousdt = 'dodousdt@bookTicker'
streamdodobtc  = 'dodobtc@bookTicker'

symbol_a_g_DODOUSDT = 'DODOUSDT' 
price_bids_a_g_DODOUSDT = float(0.0) 
qty_bids_a_g_DODOUSDT = float(0.0) 
price_asks_a_g_DODOUSDT = float(0.0) 
qty_asks_a_g_DODOUSDT = float(0.0) 

stepSize_DODOUSDT = 0.10000000 

symbol_b_g_DODOBTC = 'DODOBTC' 
price_bids_b_g_DODOBTC = float(0.0) 
qty_bids_b_g_DODOBTC = float(0.0) 
price_asks_b_g_DODOBTC = float(0.0) 
qty_asks_b_g_DODOBTC = float(0.0) 

stepSize_DODOBTC = 0.10000000 

def on_message_DODOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamdodousdt :
		symbol_a_l_DODOUSDT = data['data']['s'] 
		price_bids_a_l_DODOUSDT = data['data']['b'] 
		qty_bids_a_l_DODOUSDT = data['data']['B'] 
		price_asks_a_l_DODOUSDT = data['data']['a'] 
		qty_asks_a_l_DODOUSDT = data['data']['A'] 

		global symbol_a_g_DODOUSDT 
		global price_bids_a_g_DODOUSDT 
		global qty_bids_a_g_DODOUSDT 
		global price_asks_a_g_DODOUSDT 
		global qty_asks_a_g_DODOUSDT 

		symbol_a_g_DODOUSDT = symbol_a_l_DODOUSDT 
		price_bids_a_g_DODOUSDT = price_bids_a_l_DODOUSDT 
		qty_bids_a_g_DODOUSDT = qty_bids_a_l_DODOUSDT 
		price_asks_a_g_DODOUSDT = price_asks_a_l_DODOUSDT 
		qty_asks_a_g_DODOUSDT = qty_asks_a_l_DODOUSDT 

	if data['stream'] == streamdodobtc :
		data = json.loads(message) 

		symbol_b_l_DODOBTC = data['data']['s'] 
		price_bids_b_l_DODOBTC = data['data']['b'] 
		qty_bids_b_l_DODOBTC = data['data']['B']
		price_asks_b_l_DODOBTC = data['data']['a'] 
		qty_asks_b_l_DODOBTC = data['data']['A'] 

		global symbol_b_g_DODOBTC 
		global price_bids_b_g_DODOBTC 
		global qty_bids_b_g_DODOBTC 
		global price_asks_b_g_DODOBTC 
		global qty_asks_b_g_DODOBTC 

		symbol_b_g_DODOBTC = symbol_b_l_DODOBTC 
		price_bids_b_g_DODOBTC = price_bids_b_l_DODOBTC 
		qty_bids_b_g_DODOBTC = qty_bids_b_l_DODOBTC 
		price_asks_b_g_DODOBTC = price_asks_b_l_DODOBTC 
		qty_asks_b_g_DODOBTC = qty_asks_b_l_DODOBTC 


def loop_DODOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamdodousdt}/{streamdodobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DODOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DODOUSDT).start()

def loop_DODOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DODOUSDT != 0.0 and qty_bids_a_g_DODOUSDT != 0.0 and price_asks_a_g_DODOUSDT != 0.0 and qty_asks_a_g_DODOUSDT != 0.0 and price_bids_b_g_DODOBTC != 0.0 and qty_bids_b_g_DODOBTC != 0.0 and price_asks_b_g_DODOBTC != 0.0 and qty_asks_b_g_DODOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DODOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DODOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DODOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DODOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DODOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DODOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DODOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DODOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DODOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DODOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DODOUSDT_Trade).start() 

streamcakeusdt = 'cakeusdt@bookTicker'
streamcakebtc  = 'cakebtc@bookTicker'

symbol_a_g_CAKEUSDT = 'CAKEUSDT' 
price_bids_a_g_CAKEUSDT = float(0.0) 
qty_bids_a_g_CAKEUSDT = float(0.0) 
price_asks_a_g_CAKEUSDT = float(0.0) 
qty_asks_a_g_CAKEUSDT = float(0.0) 

stepSize_CAKEUSDT = 0.01000000 

symbol_b_g_CAKEBTC = 'CAKEBTC' 
price_bids_b_g_CAKEBTC = float(0.0) 
qty_bids_b_g_CAKEBTC = float(0.0) 
price_asks_b_g_CAKEBTC = float(0.0) 
qty_asks_b_g_CAKEBTC = float(0.0) 

stepSize_CAKEBTC = 0.01000000 

def on_message_CAKEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamcakeusdt :
		symbol_a_l_CAKEUSDT = data['data']['s'] 
		price_bids_a_l_CAKEUSDT = data['data']['b'] 
		qty_bids_a_l_CAKEUSDT = data['data']['B'] 
		price_asks_a_l_CAKEUSDT = data['data']['a'] 
		qty_asks_a_l_CAKEUSDT = data['data']['A'] 

		global symbol_a_g_CAKEUSDT 
		global price_bids_a_g_CAKEUSDT 
		global qty_bids_a_g_CAKEUSDT 
		global price_asks_a_g_CAKEUSDT 
		global qty_asks_a_g_CAKEUSDT 

		symbol_a_g_CAKEUSDT = symbol_a_l_CAKEUSDT 
		price_bids_a_g_CAKEUSDT = price_bids_a_l_CAKEUSDT 
		qty_bids_a_g_CAKEUSDT = qty_bids_a_l_CAKEUSDT 
		price_asks_a_g_CAKEUSDT = price_asks_a_l_CAKEUSDT 
		qty_asks_a_g_CAKEUSDT = qty_asks_a_l_CAKEUSDT 

	if data['stream'] == streamcakebtc :
		data = json.loads(message) 

		symbol_b_l_CAKEBTC = data['data']['s'] 
		price_bids_b_l_CAKEBTC = data['data']['b'] 
		qty_bids_b_l_CAKEBTC = data['data']['B']
		price_asks_b_l_CAKEBTC = data['data']['a'] 
		qty_asks_b_l_CAKEBTC = data['data']['A'] 

		global symbol_b_g_CAKEBTC 
		global price_bids_b_g_CAKEBTC 
		global qty_bids_b_g_CAKEBTC 
		global price_asks_b_g_CAKEBTC 
		global qty_asks_b_g_CAKEBTC 

		symbol_b_g_CAKEBTC = symbol_b_l_CAKEBTC 
		price_bids_b_g_CAKEBTC = price_bids_b_l_CAKEBTC 
		qty_bids_b_g_CAKEBTC = qty_bids_b_l_CAKEBTC 
		price_asks_b_g_CAKEBTC = price_asks_b_l_CAKEBTC 
		qty_asks_b_g_CAKEBTC = qty_asks_b_l_CAKEBTC 


def loop_CAKEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamcakeusdt}/{streamcakebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CAKEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CAKEUSDT).start()

def loop_CAKEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CAKEUSDT != 0.0 and qty_bids_a_g_CAKEUSDT != 0.0 and price_asks_a_g_CAKEUSDT != 0.0 and qty_asks_a_g_CAKEUSDT != 0.0 and price_bids_b_g_CAKEBTC != 0.0 and qty_bids_b_g_CAKEBTC != 0.0 and price_asks_b_g_CAKEBTC != 0.0 and qty_asks_b_g_CAKEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CAKEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CAKEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CAKEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CAKEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CAKEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CAKEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CAKEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CAKEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CAKEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CAKEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CAKEUSDT_Trade).start() 

streamacmusdt = 'acmusdt@bookTicker'
streamacmbtc  = 'acmbtc@bookTicker'

symbol_a_g_ACMUSDT = 'ACMUSDT' 
price_bids_a_g_ACMUSDT = float(0.0) 
qty_bids_a_g_ACMUSDT = float(0.0) 
price_asks_a_g_ACMUSDT = float(0.0) 
qty_asks_a_g_ACMUSDT = float(0.0) 

stepSize_ACMUSDT = 0.10000000 

symbol_b_g_ACMBTC = 'ACMBTC' 
price_bids_b_g_ACMBTC = float(0.0) 
qty_bids_b_g_ACMBTC = float(0.0) 
price_asks_b_g_ACMBTC = float(0.0) 
qty_asks_b_g_ACMBTC = float(0.0) 

stepSize_ACMBTC = 0.10000000 

def on_message_ACMUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamacmusdt :
		symbol_a_l_ACMUSDT = data['data']['s'] 
		price_bids_a_l_ACMUSDT = data['data']['b'] 
		qty_bids_a_l_ACMUSDT = data['data']['B'] 
		price_asks_a_l_ACMUSDT = data['data']['a'] 
		qty_asks_a_l_ACMUSDT = data['data']['A'] 

		global symbol_a_g_ACMUSDT 
		global price_bids_a_g_ACMUSDT 
		global qty_bids_a_g_ACMUSDT 
		global price_asks_a_g_ACMUSDT 
		global qty_asks_a_g_ACMUSDT 

		symbol_a_g_ACMUSDT = symbol_a_l_ACMUSDT 
		price_bids_a_g_ACMUSDT = price_bids_a_l_ACMUSDT 
		qty_bids_a_g_ACMUSDT = qty_bids_a_l_ACMUSDT 
		price_asks_a_g_ACMUSDT = price_asks_a_l_ACMUSDT 
		qty_asks_a_g_ACMUSDT = qty_asks_a_l_ACMUSDT 

	if data['stream'] == streamacmbtc :
		data = json.loads(message) 

		symbol_b_l_ACMBTC = data['data']['s'] 
		price_bids_b_l_ACMBTC = data['data']['b'] 
		qty_bids_b_l_ACMBTC = data['data']['B']
		price_asks_b_l_ACMBTC = data['data']['a'] 
		qty_asks_b_l_ACMBTC = data['data']['A'] 

		global symbol_b_g_ACMBTC 
		global price_bids_b_g_ACMBTC 
		global qty_bids_b_g_ACMBTC 
		global price_asks_b_g_ACMBTC 
		global qty_asks_b_g_ACMBTC 

		symbol_b_g_ACMBTC = symbol_b_l_ACMBTC 
		price_bids_b_g_ACMBTC = price_bids_b_l_ACMBTC 
		qty_bids_b_g_ACMBTC = qty_bids_b_l_ACMBTC 
		price_asks_b_g_ACMBTC = price_asks_b_l_ACMBTC 
		qty_asks_b_g_ACMBTC = qty_asks_b_l_ACMBTC 


def loop_ACMUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamacmusdt}/{streamacmbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ACMUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ACMUSDT).start()

def loop_ACMUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ACMUSDT != 0.0 and qty_bids_a_g_ACMUSDT != 0.0 and price_asks_a_g_ACMUSDT != 0.0 and qty_asks_a_g_ACMUSDT != 0.0 and price_bids_b_g_ACMBTC != 0.0 and qty_bids_b_g_ACMBTC != 0.0 and price_asks_b_g_ACMBTC != 0.0 and qty_asks_b_g_ACMBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ACMBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ACMBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ACMUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ACMUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ACMBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ACMBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ACMUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ACMUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ACMBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ACMBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ACMUSDT_Trade).start() 

streambadgerusdt = 'badgerusdt@bookTicker'
streambadgerbtc  = 'badgerbtc@bookTicker'

symbol_a_g_BADGERUSDT = 'BADGERUSDT' 
price_bids_a_g_BADGERUSDT = float(0.0) 
qty_bids_a_g_BADGERUSDT = float(0.0) 
price_asks_a_g_BADGERUSDT = float(0.0) 
qty_asks_a_g_BADGERUSDT = float(0.0) 

stepSize_BADGERUSDT = 0.01000000 

symbol_b_g_BADGERBTC = 'BADGERBTC' 
price_bids_b_g_BADGERBTC = float(0.0) 
qty_bids_b_g_BADGERBTC = float(0.0) 
price_asks_b_g_BADGERBTC = float(0.0) 
qty_asks_b_g_BADGERBTC = float(0.0) 

stepSize_BADGERBTC = 0.01000000 

def on_message_BADGERUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambadgerusdt :
		symbol_a_l_BADGERUSDT = data['data']['s'] 
		price_bids_a_l_BADGERUSDT = data['data']['b'] 
		qty_bids_a_l_BADGERUSDT = data['data']['B'] 
		price_asks_a_l_BADGERUSDT = data['data']['a'] 
		qty_asks_a_l_BADGERUSDT = data['data']['A'] 

		global symbol_a_g_BADGERUSDT 
		global price_bids_a_g_BADGERUSDT 
		global qty_bids_a_g_BADGERUSDT 
		global price_asks_a_g_BADGERUSDT 
		global qty_asks_a_g_BADGERUSDT 

		symbol_a_g_BADGERUSDT = symbol_a_l_BADGERUSDT 
		price_bids_a_g_BADGERUSDT = price_bids_a_l_BADGERUSDT 
		qty_bids_a_g_BADGERUSDT = qty_bids_a_l_BADGERUSDT 
		price_asks_a_g_BADGERUSDT = price_asks_a_l_BADGERUSDT 
		qty_asks_a_g_BADGERUSDT = qty_asks_a_l_BADGERUSDT 

	if data['stream'] == streambadgerbtc :
		data = json.loads(message) 

		symbol_b_l_BADGERBTC = data['data']['s'] 
		price_bids_b_l_BADGERBTC = data['data']['b'] 
		qty_bids_b_l_BADGERBTC = data['data']['B']
		price_asks_b_l_BADGERBTC = data['data']['a'] 
		qty_asks_b_l_BADGERBTC = data['data']['A'] 

		global symbol_b_g_BADGERBTC 
		global price_bids_b_g_BADGERBTC 
		global qty_bids_b_g_BADGERBTC 
		global price_asks_b_g_BADGERBTC 
		global qty_asks_b_g_BADGERBTC 

		symbol_b_g_BADGERBTC = symbol_b_l_BADGERBTC 
		price_bids_b_g_BADGERBTC = price_bids_b_l_BADGERBTC 
		qty_bids_b_g_BADGERBTC = qty_bids_b_l_BADGERBTC 
		price_asks_b_g_BADGERBTC = price_asks_b_l_BADGERBTC 
		qty_asks_b_g_BADGERBTC = qty_asks_b_l_BADGERBTC 


def loop_BADGERUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambadgerusdt}/{streambadgerbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BADGERUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BADGERUSDT).start()

def loop_BADGERUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BADGERUSDT != 0.0 and qty_bids_a_g_BADGERUSDT != 0.0 and price_asks_a_g_BADGERUSDT != 0.0 and qty_asks_a_g_BADGERUSDT != 0.0 and price_bids_b_g_BADGERBTC != 0.0 and qty_bids_b_g_BADGERBTC != 0.0 and price_asks_b_g_BADGERBTC != 0.0 and qty_asks_b_g_BADGERBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BADGERBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BADGERBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BADGERUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BADGERUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BADGERBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BADGERBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BADGERUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BADGERUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BADGERBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BADGERBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BADGERUSDT_Trade).start() 

streamfisusdt = 'fisusdt@bookTicker'
streamfisbtc  = 'fisbtc@bookTicker'

symbol_a_g_FISUSDT = 'FISUSDT' 
price_bids_a_g_FISUSDT = float(0.0) 
qty_bids_a_g_FISUSDT = float(0.0) 
price_asks_a_g_FISUSDT = float(0.0) 
qty_asks_a_g_FISUSDT = float(0.0) 

stepSize_FISUSDT = 1.00000000 

symbol_b_g_FISBTC = 'FISBTC' 
price_bids_b_g_FISBTC = float(0.0) 
qty_bids_b_g_FISBTC = float(0.0) 
price_asks_b_g_FISBTC = float(0.0) 
qty_asks_b_g_FISBTC = float(0.0) 

stepSize_FISBTC = 1.00000000 

def on_message_FISUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamfisusdt :
		symbol_a_l_FISUSDT = data['data']['s'] 
		price_bids_a_l_FISUSDT = data['data']['b'] 
		qty_bids_a_l_FISUSDT = data['data']['B'] 
		price_asks_a_l_FISUSDT = data['data']['a'] 
		qty_asks_a_l_FISUSDT = data['data']['A'] 

		global symbol_a_g_FISUSDT 
		global price_bids_a_g_FISUSDT 
		global qty_bids_a_g_FISUSDT 
		global price_asks_a_g_FISUSDT 
		global qty_asks_a_g_FISUSDT 

		symbol_a_g_FISUSDT = symbol_a_l_FISUSDT 
		price_bids_a_g_FISUSDT = price_bids_a_l_FISUSDT 
		qty_bids_a_g_FISUSDT = qty_bids_a_l_FISUSDT 
		price_asks_a_g_FISUSDT = price_asks_a_l_FISUSDT 
		qty_asks_a_g_FISUSDT = qty_asks_a_l_FISUSDT 

	if data['stream'] == streamfisbtc :
		data = json.loads(message) 

		symbol_b_l_FISBTC = data['data']['s'] 
		price_bids_b_l_FISBTC = data['data']['b'] 
		qty_bids_b_l_FISBTC = data['data']['B']
		price_asks_b_l_FISBTC = data['data']['a'] 
		qty_asks_b_l_FISBTC = data['data']['A'] 

		global symbol_b_g_FISBTC 
		global price_bids_b_g_FISBTC 
		global qty_bids_b_g_FISBTC 
		global price_asks_b_g_FISBTC 
		global qty_asks_b_g_FISBTC 

		symbol_b_g_FISBTC = symbol_b_l_FISBTC 
		price_bids_b_g_FISBTC = price_bids_b_l_FISBTC 
		qty_bids_b_g_FISBTC = qty_bids_b_l_FISBTC 
		price_asks_b_g_FISBTC = price_asks_b_l_FISBTC 
		qty_asks_b_g_FISBTC = qty_asks_b_l_FISBTC 


def loop_FISUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamfisusdt}/{streamfisbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FISUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FISUSDT).start()

def loop_FISUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FISUSDT != 0.0 and qty_bids_a_g_FISUSDT != 0.0 and price_asks_a_g_FISUSDT != 0.0 and qty_asks_a_g_FISUSDT != 0.0 and price_bids_b_g_FISBTC != 0.0 and qty_bids_b_g_FISBTC != 0.0 and price_asks_b_g_FISBTC != 0.0 and qty_asks_b_g_FISBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FISBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FISBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FISUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FISUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FISBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FISBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FISUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FISUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FISBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FISBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FISUSDT_Trade).start() 

streamomusdt = 'omusdt@bookTicker'
streamombtc  = 'ombtc@bookTicker'

symbol_a_g_OMUSDT = 'OMUSDT' 
price_bids_a_g_OMUSDT = float(0.0) 
qty_bids_a_g_OMUSDT = float(0.0) 
price_asks_a_g_OMUSDT = float(0.0) 
qty_asks_a_g_OMUSDT = float(0.0) 

stepSize_OMUSDT = 1.00000000 

symbol_b_g_OMBTC = 'OMBTC' 
price_bids_b_g_OMBTC = float(0.0) 
qty_bids_b_g_OMBTC = float(0.0) 
price_asks_b_g_OMBTC = float(0.0) 
qty_asks_b_g_OMBTC = float(0.0) 

stepSize_OMBTC = 1.00000000 

def on_message_OMUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamomusdt :
		symbol_a_l_OMUSDT = data['data']['s'] 
		price_bids_a_l_OMUSDT = data['data']['b'] 
		qty_bids_a_l_OMUSDT = data['data']['B'] 
		price_asks_a_l_OMUSDT = data['data']['a'] 
		qty_asks_a_l_OMUSDT = data['data']['A'] 

		global symbol_a_g_OMUSDT 
		global price_bids_a_g_OMUSDT 
		global qty_bids_a_g_OMUSDT 
		global price_asks_a_g_OMUSDT 
		global qty_asks_a_g_OMUSDT 

		symbol_a_g_OMUSDT = symbol_a_l_OMUSDT 
		price_bids_a_g_OMUSDT = price_bids_a_l_OMUSDT 
		qty_bids_a_g_OMUSDT = qty_bids_a_l_OMUSDT 
		price_asks_a_g_OMUSDT = price_asks_a_l_OMUSDT 
		qty_asks_a_g_OMUSDT = qty_asks_a_l_OMUSDT 

	if data['stream'] == streamombtc :
		data = json.loads(message) 

		symbol_b_l_OMBTC = data['data']['s'] 
		price_bids_b_l_OMBTC = data['data']['b'] 
		qty_bids_b_l_OMBTC = data['data']['B']
		price_asks_b_l_OMBTC = data['data']['a'] 
		qty_asks_b_l_OMBTC = data['data']['A'] 

		global symbol_b_g_OMBTC 
		global price_bids_b_g_OMBTC 
		global qty_bids_b_g_OMBTC 
		global price_asks_b_g_OMBTC 
		global qty_asks_b_g_OMBTC 

		symbol_b_g_OMBTC = symbol_b_l_OMBTC 
		price_bids_b_g_OMBTC = price_bids_b_l_OMBTC 
		qty_bids_b_g_OMBTC = qty_bids_b_l_OMBTC 
		price_asks_b_g_OMBTC = price_asks_b_l_OMBTC 
		qty_asks_b_g_OMBTC = qty_asks_b_l_OMBTC 


def loop_OMUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamomusdt}/{streamombtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_OMUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_OMUSDT).start()

def loop_OMUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_OMUSDT != 0.0 and qty_bids_a_g_OMUSDT != 0.0 and price_asks_a_g_OMUSDT != 0.0 and qty_asks_a_g_OMUSDT != 0.0 and price_bids_b_g_OMBTC != 0.0 and qty_bids_b_g_OMBTC != 0.0 and price_asks_b_g_OMBTC != 0.0 and qty_asks_b_g_OMBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_OMBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_OMBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_OMUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_OMUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_OMBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_OMBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_OMUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_OMUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_OMBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_OMBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_OMUSDT_Trade).start() 

streampondusdt = 'pondusdt@bookTicker'
streampondbtc  = 'pondbtc@bookTicker'

symbol_a_g_PONDUSDT = 'PONDUSDT' 
price_bids_a_g_PONDUSDT = float(0.0) 
qty_bids_a_g_PONDUSDT = float(0.0) 
price_asks_a_g_PONDUSDT = float(0.0) 
qty_asks_a_g_PONDUSDT = float(0.0) 

stepSize_PONDUSDT = 0.01000000 

symbol_b_g_PONDBTC = 'PONDBTC' 
price_bids_b_g_PONDBTC = float(0.0) 
qty_bids_b_g_PONDBTC = float(0.0) 
price_asks_b_g_PONDBTC = float(0.0) 
qty_asks_b_g_PONDBTC = float(0.0) 

stepSize_PONDBTC = 1.00000000 

def on_message_PONDUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streampondusdt :
		symbol_a_l_PONDUSDT = data['data']['s'] 
		price_bids_a_l_PONDUSDT = data['data']['b'] 
		qty_bids_a_l_PONDUSDT = data['data']['B'] 
		price_asks_a_l_PONDUSDT = data['data']['a'] 
		qty_asks_a_l_PONDUSDT = data['data']['A'] 

		global symbol_a_g_PONDUSDT 
		global price_bids_a_g_PONDUSDT 
		global qty_bids_a_g_PONDUSDT 
		global price_asks_a_g_PONDUSDT 
		global qty_asks_a_g_PONDUSDT 

		symbol_a_g_PONDUSDT = symbol_a_l_PONDUSDT 
		price_bids_a_g_PONDUSDT = price_bids_a_l_PONDUSDT 
		qty_bids_a_g_PONDUSDT = qty_bids_a_l_PONDUSDT 
		price_asks_a_g_PONDUSDT = price_asks_a_l_PONDUSDT 
		qty_asks_a_g_PONDUSDT = qty_asks_a_l_PONDUSDT 

	if data['stream'] == streampondbtc :
		data = json.loads(message) 

		symbol_b_l_PONDBTC = data['data']['s'] 
		price_bids_b_l_PONDBTC = data['data']['b'] 
		qty_bids_b_l_PONDBTC = data['data']['B']
		price_asks_b_l_PONDBTC = data['data']['a'] 
		qty_asks_b_l_PONDBTC = data['data']['A'] 

		global symbol_b_g_PONDBTC 
		global price_bids_b_g_PONDBTC 
		global qty_bids_b_g_PONDBTC 
		global price_asks_b_g_PONDBTC 
		global qty_asks_b_g_PONDBTC 

		symbol_b_g_PONDBTC = symbol_b_l_PONDBTC 
		price_bids_b_g_PONDBTC = price_bids_b_l_PONDBTC 
		qty_bids_b_g_PONDBTC = qty_bids_b_l_PONDBTC 
		price_asks_b_g_PONDBTC = price_asks_b_l_PONDBTC 
		qty_asks_b_g_PONDBTC = qty_asks_b_l_PONDBTC 


def loop_PONDUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streampondusdt}/{streampondbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_PONDUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_PONDUSDT).start()

def loop_PONDUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_PONDUSDT != 0.0 and qty_bids_a_g_PONDUSDT != 0.0 and price_asks_a_g_PONDUSDT != 0.0 and qty_asks_a_g_PONDUSDT != 0.0 and price_bids_b_g_PONDBTC != 0.0 and qty_bids_b_g_PONDBTC != 0.0 and price_asks_b_g_PONDBTC != 0.0 and qty_asks_b_g_PONDBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_PONDBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_PONDBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_PONDUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_PONDUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_PONDBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_PONDBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_PONDUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_PONDUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_PONDBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_PONDBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_PONDUSDT_Trade).start() 

streamdegousdt = 'degousdt@bookTicker'
streamdegobtc  = 'degobtc@bookTicker'

symbol_a_g_DEGOUSDT = 'DEGOUSDT' 
price_bids_a_g_DEGOUSDT = float(0.0) 
qty_bids_a_g_DEGOUSDT = float(0.0) 
price_asks_a_g_DEGOUSDT = float(0.0) 
qty_asks_a_g_DEGOUSDT = float(0.0) 

stepSize_DEGOUSDT = 0.01000000 

symbol_b_g_DEGOBTC = 'DEGOBTC' 
price_bids_b_g_DEGOBTC = float(0.0) 
qty_bids_b_g_DEGOBTC = float(0.0) 
price_asks_b_g_DEGOBTC = float(0.0) 
qty_asks_b_g_DEGOBTC = float(0.0) 

stepSize_DEGOBTC = 0.01000000 

def on_message_DEGOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamdegousdt :
		symbol_a_l_DEGOUSDT = data['data']['s'] 
		price_bids_a_l_DEGOUSDT = data['data']['b'] 
		qty_bids_a_l_DEGOUSDT = data['data']['B'] 
		price_asks_a_l_DEGOUSDT = data['data']['a'] 
		qty_asks_a_l_DEGOUSDT = data['data']['A'] 

		global symbol_a_g_DEGOUSDT 
		global price_bids_a_g_DEGOUSDT 
		global qty_bids_a_g_DEGOUSDT 
		global price_asks_a_g_DEGOUSDT 
		global qty_asks_a_g_DEGOUSDT 

		symbol_a_g_DEGOUSDT = symbol_a_l_DEGOUSDT 
		price_bids_a_g_DEGOUSDT = price_bids_a_l_DEGOUSDT 
		qty_bids_a_g_DEGOUSDT = qty_bids_a_l_DEGOUSDT 
		price_asks_a_g_DEGOUSDT = price_asks_a_l_DEGOUSDT 
		qty_asks_a_g_DEGOUSDT = qty_asks_a_l_DEGOUSDT 

	if data['stream'] == streamdegobtc :
		data = json.loads(message) 

		symbol_b_l_DEGOBTC = data['data']['s'] 
		price_bids_b_l_DEGOBTC = data['data']['b'] 
		qty_bids_b_l_DEGOBTC = data['data']['B']
		price_asks_b_l_DEGOBTC = data['data']['a'] 
		qty_asks_b_l_DEGOBTC = data['data']['A'] 

		global symbol_b_g_DEGOBTC 
		global price_bids_b_g_DEGOBTC 
		global qty_bids_b_g_DEGOBTC 
		global price_asks_b_g_DEGOBTC 
		global qty_asks_b_g_DEGOBTC 

		symbol_b_g_DEGOBTC = symbol_b_l_DEGOBTC 
		price_bids_b_g_DEGOBTC = price_bids_b_l_DEGOBTC 
		qty_bids_b_g_DEGOBTC = qty_bids_b_l_DEGOBTC 
		price_asks_b_g_DEGOBTC = price_asks_b_l_DEGOBTC 
		qty_asks_b_g_DEGOBTC = qty_asks_b_l_DEGOBTC 


def loop_DEGOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamdegousdt}/{streamdegobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DEGOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DEGOUSDT).start()

def loop_DEGOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DEGOUSDT != 0.0 and qty_bids_a_g_DEGOUSDT != 0.0 and price_asks_a_g_DEGOUSDT != 0.0 and qty_asks_a_g_DEGOUSDT != 0.0 and price_bids_b_g_DEGOBTC != 0.0 and qty_bids_b_g_DEGOBTC != 0.0 and price_asks_b_g_DEGOBTC != 0.0 and qty_asks_b_g_DEGOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DEGOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DEGOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DEGOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DEGOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DEGOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DEGOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DEGOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DEGOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DEGOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DEGOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DEGOUSDT_Trade).start() 

streamaliceusdt = 'aliceusdt@bookTicker'
streamalicebtc  = 'alicebtc@bookTicker'

symbol_a_g_ALICEUSDT = 'ALICEUSDT' 
price_bids_a_g_ALICEUSDT = float(0.0) 
qty_bids_a_g_ALICEUSDT = float(0.0) 
price_asks_a_g_ALICEUSDT = float(0.0) 
qty_asks_a_g_ALICEUSDT = float(0.0) 

stepSize_ALICEUSDT = 0.01000000 

symbol_b_g_ALICEBTC = 'ALICEBTC' 
price_bids_b_g_ALICEBTC = float(0.0) 
qty_bids_b_g_ALICEBTC = float(0.0) 
price_asks_b_g_ALICEBTC = float(0.0) 
qty_asks_b_g_ALICEBTC = float(0.0) 

stepSize_ALICEBTC = 0.01000000 

def on_message_ALICEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamaliceusdt :
		symbol_a_l_ALICEUSDT = data['data']['s'] 
		price_bids_a_l_ALICEUSDT = data['data']['b'] 
		qty_bids_a_l_ALICEUSDT = data['data']['B'] 
		price_asks_a_l_ALICEUSDT = data['data']['a'] 
		qty_asks_a_l_ALICEUSDT = data['data']['A'] 

		global symbol_a_g_ALICEUSDT 
		global price_bids_a_g_ALICEUSDT 
		global qty_bids_a_g_ALICEUSDT 
		global price_asks_a_g_ALICEUSDT 
		global qty_asks_a_g_ALICEUSDT 

		symbol_a_g_ALICEUSDT = symbol_a_l_ALICEUSDT 
		price_bids_a_g_ALICEUSDT = price_bids_a_l_ALICEUSDT 
		qty_bids_a_g_ALICEUSDT = qty_bids_a_l_ALICEUSDT 
		price_asks_a_g_ALICEUSDT = price_asks_a_l_ALICEUSDT 
		qty_asks_a_g_ALICEUSDT = qty_asks_a_l_ALICEUSDT 

	if data['stream'] == streamalicebtc :
		data = json.loads(message) 

		symbol_b_l_ALICEBTC = data['data']['s'] 
		price_bids_b_l_ALICEBTC = data['data']['b'] 
		qty_bids_b_l_ALICEBTC = data['data']['B']
		price_asks_b_l_ALICEBTC = data['data']['a'] 
		qty_asks_b_l_ALICEBTC = data['data']['A'] 

		global symbol_b_g_ALICEBTC 
		global price_bids_b_g_ALICEBTC 
		global qty_bids_b_g_ALICEBTC 
		global price_asks_b_g_ALICEBTC 
		global qty_asks_b_g_ALICEBTC 

		symbol_b_g_ALICEBTC = symbol_b_l_ALICEBTC 
		price_bids_b_g_ALICEBTC = price_bids_b_l_ALICEBTC 
		qty_bids_b_g_ALICEBTC = qty_bids_b_l_ALICEBTC 
		price_asks_b_g_ALICEBTC = price_asks_b_l_ALICEBTC 
		qty_asks_b_g_ALICEBTC = qty_asks_b_l_ALICEBTC 


def loop_ALICEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamaliceusdt}/{streamalicebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ALICEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ALICEUSDT).start()

def loop_ALICEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ALICEUSDT != 0.0 and qty_bids_a_g_ALICEUSDT != 0.0 and price_asks_a_g_ALICEUSDT != 0.0 and qty_asks_a_g_ALICEUSDT != 0.0 and price_bids_b_g_ALICEBTC != 0.0 and qty_bids_b_g_ALICEBTC != 0.0 and price_asks_b_g_ALICEBTC != 0.0 and qty_asks_b_g_ALICEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ALICEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ALICEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ALICEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ALICEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ALICEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ALICEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ALICEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ALICEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ALICEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ALICEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ALICEUSDT_Trade).start() 

streamlinausdt = 'linausdt@bookTicker'
streamlinabtc  = 'linabtc@bookTicker'

symbol_a_g_LINAUSDT = 'LINAUSDT' 
price_bids_a_g_LINAUSDT = float(0.0) 
qty_bids_a_g_LINAUSDT = float(0.0) 
price_asks_a_g_LINAUSDT = float(0.0) 
qty_asks_a_g_LINAUSDT = float(0.0) 

stepSize_LINAUSDT = 0.01000000 

symbol_b_g_LINABTC = 'LINABTC' 
price_bids_b_g_LINABTC = float(0.0) 
qty_bids_b_g_LINABTC = float(0.0) 
price_asks_b_g_LINABTC = float(0.0) 
qty_asks_b_g_LINABTC = float(0.0) 

stepSize_LINABTC = 1.00000000 

def on_message_LINAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamlinausdt :
		symbol_a_l_LINAUSDT = data['data']['s'] 
		price_bids_a_l_LINAUSDT = data['data']['b'] 
		qty_bids_a_l_LINAUSDT = data['data']['B'] 
		price_asks_a_l_LINAUSDT = data['data']['a'] 
		qty_asks_a_l_LINAUSDT = data['data']['A'] 

		global symbol_a_g_LINAUSDT 
		global price_bids_a_g_LINAUSDT 
		global qty_bids_a_g_LINAUSDT 
		global price_asks_a_g_LINAUSDT 
		global qty_asks_a_g_LINAUSDT 

		symbol_a_g_LINAUSDT = symbol_a_l_LINAUSDT 
		price_bids_a_g_LINAUSDT = price_bids_a_l_LINAUSDT 
		qty_bids_a_g_LINAUSDT = qty_bids_a_l_LINAUSDT 
		price_asks_a_g_LINAUSDT = price_asks_a_l_LINAUSDT 
		qty_asks_a_g_LINAUSDT = qty_asks_a_l_LINAUSDT 

	if data['stream'] == streamlinabtc :
		data = json.loads(message) 

		symbol_b_l_LINABTC = data['data']['s'] 
		price_bids_b_l_LINABTC = data['data']['b'] 
		qty_bids_b_l_LINABTC = data['data']['B']
		price_asks_b_l_LINABTC = data['data']['a'] 
		qty_asks_b_l_LINABTC = data['data']['A'] 

		global symbol_b_g_LINABTC 
		global price_bids_b_g_LINABTC 
		global qty_bids_b_g_LINABTC 
		global price_asks_b_g_LINABTC 
		global qty_asks_b_g_LINABTC 

		symbol_b_g_LINABTC = symbol_b_l_LINABTC 
		price_bids_b_g_LINABTC = price_bids_b_l_LINABTC 
		qty_bids_b_g_LINABTC = qty_bids_b_l_LINABTC 
		price_asks_b_g_LINABTC = price_asks_b_l_LINABTC 
		qty_asks_b_g_LINABTC = qty_asks_b_l_LINABTC 


def loop_LINAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamlinausdt}/{streamlinabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_LINAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_LINAUSDT).start()

def loop_LINAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_LINAUSDT != 0.0 and qty_bids_a_g_LINAUSDT != 0.0 and price_asks_a_g_LINAUSDT != 0.0 and qty_asks_a_g_LINAUSDT != 0.0 and price_bids_b_g_LINABTC != 0.0 and qty_bids_b_g_LINABTC != 0.0 and price_asks_b_g_LINABTC != 0.0 and qty_asks_b_g_LINABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_LINABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_LINABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_LINAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_LINAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_LINABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_LINABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_LINAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_LINAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_LINABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_LINABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_LINAUSDT_Trade).start() 

streamperpusdt = 'perpusdt@bookTicker'
streamperpbtc  = 'perpbtc@bookTicker'

symbol_a_g_PERPUSDT = 'PERPUSDT' 
price_bids_a_g_PERPUSDT = float(0.0) 
qty_bids_a_g_PERPUSDT = float(0.0) 
price_asks_a_g_PERPUSDT = float(0.0) 
qty_asks_a_g_PERPUSDT = float(0.0) 

stepSize_PERPUSDT = 0.01000000 

symbol_b_g_PERPBTC = 'PERPBTC' 
price_bids_b_g_PERPBTC = float(0.0) 
qty_bids_b_g_PERPBTC = float(0.0) 
price_asks_b_g_PERPBTC = float(0.0) 
qty_asks_b_g_PERPBTC = float(0.0) 

stepSize_PERPBTC = 0.01000000 

def on_message_PERPUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamperpusdt :
		symbol_a_l_PERPUSDT = data['data']['s'] 
		price_bids_a_l_PERPUSDT = data['data']['b'] 
		qty_bids_a_l_PERPUSDT = data['data']['B'] 
		price_asks_a_l_PERPUSDT = data['data']['a'] 
		qty_asks_a_l_PERPUSDT = data['data']['A'] 

		global symbol_a_g_PERPUSDT 
		global price_bids_a_g_PERPUSDT 
		global qty_bids_a_g_PERPUSDT 
		global price_asks_a_g_PERPUSDT 
		global qty_asks_a_g_PERPUSDT 

		symbol_a_g_PERPUSDT = symbol_a_l_PERPUSDT 
		price_bids_a_g_PERPUSDT = price_bids_a_l_PERPUSDT 
		qty_bids_a_g_PERPUSDT = qty_bids_a_l_PERPUSDT 
		price_asks_a_g_PERPUSDT = price_asks_a_l_PERPUSDT 
		qty_asks_a_g_PERPUSDT = qty_asks_a_l_PERPUSDT 

	if data['stream'] == streamperpbtc :
		data = json.loads(message) 

		symbol_b_l_PERPBTC = data['data']['s'] 
		price_bids_b_l_PERPBTC = data['data']['b'] 
		qty_bids_b_l_PERPBTC = data['data']['B']
		price_asks_b_l_PERPBTC = data['data']['a'] 
		qty_asks_b_l_PERPBTC = data['data']['A'] 

		global symbol_b_g_PERPBTC 
		global price_bids_b_g_PERPBTC 
		global qty_bids_b_g_PERPBTC 
		global price_asks_b_g_PERPBTC 
		global qty_asks_b_g_PERPBTC 

		symbol_b_g_PERPBTC = symbol_b_l_PERPBTC 
		price_bids_b_g_PERPBTC = price_bids_b_l_PERPBTC 
		qty_bids_b_g_PERPBTC = qty_bids_b_l_PERPBTC 
		price_asks_b_g_PERPBTC = price_asks_b_l_PERPBTC 
		qty_asks_b_g_PERPBTC = qty_asks_b_l_PERPBTC 


def loop_PERPUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamperpusdt}/{streamperpbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_PERPUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_PERPUSDT).start()

def loop_PERPUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_PERPUSDT != 0.0 and qty_bids_a_g_PERPUSDT != 0.0 and price_asks_a_g_PERPUSDT != 0.0 and qty_asks_a_g_PERPUSDT != 0.0 and price_bids_b_g_PERPBTC != 0.0 and qty_bids_b_g_PERPBTC != 0.0 and price_asks_b_g_PERPBTC != 0.0 and qty_asks_b_g_PERPBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_PERPBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_PERPBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_PERPUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_PERPUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_PERPBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_PERPBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_PERPUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_PERPUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_PERPBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_PERPBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_PERPUSDT_Trade).start() 

streamsuperusdt = 'superusdt@bookTicker'
streamsuperbtc  = 'superbtc@bookTicker'

symbol_a_g_SUPERUSDT = 'SUPERUSDT' 
price_bids_a_g_SUPERUSDT = float(0.0) 
qty_bids_a_g_SUPERUSDT = float(0.0) 
price_asks_a_g_SUPERUSDT = float(0.0) 
qty_asks_a_g_SUPERUSDT = float(0.0) 

stepSize_SUPERUSDT = 1.00000000 

symbol_b_g_SUPERBTC = 'SUPERBTC' 
price_bids_b_g_SUPERBTC = float(0.0) 
qty_bids_b_g_SUPERBTC = float(0.0) 
price_asks_b_g_SUPERBTC = float(0.0) 
qty_asks_b_g_SUPERBTC = float(0.0) 

stepSize_SUPERBTC = 1.00000000 

def on_message_SUPERUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamsuperusdt :
		symbol_a_l_SUPERUSDT = data['data']['s'] 
		price_bids_a_l_SUPERUSDT = data['data']['b'] 
		qty_bids_a_l_SUPERUSDT = data['data']['B'] 
		price_asks_a_l_SUPERUSDT = data['data']['a'] 
		qty_asks_a_l_SUPERUSDT = data['data']['A'] 

		global symbol_a_g_SUPERUSDT 
		global price_bids_a_g_SUPERUSDT 
		global qty_bids_a_g_SUPERUSDT 
		global price_asks_a_g_SUPERUSDT 
		global qty_asks_a_g_SUPERUSDT 

		symbol_a_g_SUPERUSDT = symbol_a_l_SUPERUSDT 
		price_bids_a_g_SUPERUSDT = price_bids_a_l_SUPERUSDT 
		qty_bids_a_g_SUPERUSDT = qty_bids_a_l_SUPERUSDT 
		price_asks_a_g_SUPERUSDT = price_asks_a_l_SUPERUSDT 
		qty_asks_a_g_SUPERUSDT = qty_asks_a_l_SUPERUSDT 

	if data['stream'] == streamsuperbtc :
		data = json.loads(message) 

		symbol_b_l_SUPERBTC = data['data']['s'] 
		price_bids_b_l_SUPERBTC = data['data']['b'] 
		qty_bids_b_l_SUPERBTC = data['data']['B']
		price_asks_b_l_SUPERBTC = data['data']['a'] 
		qty_asks_b_l_SUPERBTC = data['data']['A'] 

		global symbol_b_g_SUPERBTC 
		global price_bids_b_g_SUPERBTC 
		global qty_bids_b_g_SUPERBTC 
		global price_asks_b_g_SUPERBTC 
		global qty_asks_b_g_SUPERBTC 

		symbol_b_g_SUPERBTC = symbol_b_l_SUPERBTC 
		price_bids_b_g_SUPERBTC = price_bids_b_l_SUPERBTC 
		qty_bids_b_g_SUPERBTC = qty_bids_b_l_SUPERBTC 
		price_asks_b_g_SUPERBTC = price_asks_b_l_SUPERBTC 
		qty_asks_b_g_SUPERBTC = qty_asks_b_l_SUPERBTC 


def loop_SUPERUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamsuperusdt}/{streamsuperbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_SUPERUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_SUPERUSDT).start()

def loop_SUPERUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_SUPERUSDT != 0.0 and qty_bids_a_g_SUPERUSDT != 0.0 and price_asks_a_g_SUPERUSDT != 0.0 and qty_asks_a_g_SUPERUSDT != 0.0 and price_bids_b_g_SUPERBTC != 0.0 and qty_bids_b_g_SUPERBTC != 0.0 and price_asks_b_g_SUPERBTC != 0.0 and qty_asks_b_g_SUPERBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_SUPERBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_SUPERBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_SUPERUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_SUPERUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_SUPERBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_SUPERBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_SUPERUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_SUPERUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_SUPERBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_SUPERBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_SUPERUSDT_Trade).start() 

streamcfxusdt = 'cfxusdt@bookTicker'
streamcfxbtc  = 'cfxbtc@bookTicker'

symbol_a_g_CFXUSDT = 'CFXUSDT' 
price_bids_a_g_CFXUSDT = float(0.0) 
qty_bids_a_g_CFXUSDT = float(0.0) 
price_asks_a_g_CFXUSDT = float(0.0) 
qty_asks_a_g_CFXUSDT = float(0.0) 

stepSize_CFXUSDT = 1.00000000 

symbol_b_g_CFXBTC = 'CFXBTC' 
price_bids_b_g_CFXBTC = float(0.0) 
qty_bids_b_g_CFXBTC = float(0.0) 
price_asks_b_g_CFXBTC = float(0.0) 
qty_asks_b_g_CFXBTC = float(0.0) 

stepSize_CFXBTC = 1.00000000 

def on_message_CFXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamcfxusdt :
		symbol_a_l_CFXUSDT = data['data']['s'] 
		price_bids_a_l_CFXUSDT = data['data']['b'] 
		qty_bids_a_l_CFXUSDT = data['data']['B'] 
		price_asks_a_l_CFXUSDT = data['data']['a'] 
		qty_asks_a_l_CFXUSDT = data['data']['A'] 

		global symbol_a_g_CFXUSDT 
		global price_bids_a_g_CFXUSDT 
		global qty_bids_a_g_CFXUSDT 
		global price_asks_a_g_CFXUSDT 
		global qty_asks_a_g_CFXUSDT 

		symbol_a_g_CFXUSDT = symbol_a_l_CFXUSDT 
		price_bids_a_g_CFXUSDT = price_bids_a_l_CFXUSDT 
		qty_bids_a_g_CFXUSDT = qty_bids_a_l_CFXUSDT 
		price_asks_a_g_CFXUSDT = price_asks_a_l_CFXUSDT 
		qty_asks_a_g_CFXUSDT = qty_asks_a_l_CFXUSDT 

	if data['stream'] == streamcfxbtc :
		data = json.loads(message) 

		symbol_b_l_CFXBTC = data['data']['s'] 
		price_bids_b_l_CFXBTC = data['data']['b'] 
		qty_bids_b_l_CFXBTC = data['data']['B']
		price_asks_b_l_CFXBTC = data['data']['a'] 
		qty_asks_b_l_CFXBTC = data['data']['A'] 

		global symbol_b_g_CFXBTC 
		global price_bids_b_g_CFXBTC 
		global qty_bids_b_g_CFXBTC 
		global price_asks_b_g_CFXBTC 
		global qty_asks_b_g_CFXBTC 

		symbol_b_g_CFXBTC = symbol_b_l_CFXBTC 
		price_bids_b_g_CFXBTC = price_bids_b_l_CFXBTC 
		qty_bids_b_g_CFXBTC = qty_bids_b_l_CFXBTC 
		price_asks_b_g_CFXBTC = price_asks_b_l_CFXBTC 
		qty_asks_b_g_CFXBTC = qty_asks_b_l_CFXBTC 


def loop_CFXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamcfxusdt}/{streamcfxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CFXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CFXUSDT).start()

def loop_CFXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CFXUSDT != 0.0 and qty_bids_a_g_CFXUSDT != 0.0 and price_asks_a_g_CFXUSDT != 0.0 and qty_asks_a_g_CFXUSDT != 0.0 and price_bids_b_g_CFXBTC != 0.0 and qty_bids_b_g_CFXBTC != 0.0 and price_asks_b_g_CFXBTC != 0.0 and qty_asks_b_g_CFXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CFXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CFXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CFXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CFXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CFXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CFXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CFXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CFXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CFXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CFXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CFXUSDT_Trade).start() 

streamautousdt = 'autousdt@bookTicker'
streamautobtc  = 'autobtc@bookTicker'

symbol_a_g_AUTOUSDT = 'AUTOUSDT' 
price_bids_a_g_AUTOUSDT = float(0.0) 
qty_bids_a_g_AUTOUSDT = float(0.0) 
price_asks_a_g_AUTOUSDT = float(0.0) 
qty_asks_a_g_AUTOUSDT = float(0.0) 

stepSize_AUTOUSDT = 0.00100000 

symbol_b_g_AUTOBTC = 'AUTOBTC' 
price_bids_b_g_AUTOBTC = float(0.0) 
qty_bids_b_g_AUTOBTC = float(0.0) 
price_asks_b_g_AUTOBTC = float(0.0) 
qty_asks_b_g_AUTOBTC = float(0.0) 

stepSize_AUTOBTC = 0.00100000 

def on_message_AUTOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamautousdt :
		symbol_a_l_AUTOUSDT = data['data']['s'] 
		price_bids_a_l_AUTOUSDT = data['data']['b'] 
		qty_bids_a_l_AUTOUSDT = data['data']['B'] 
		price_asks_a_l_AUTOUSDT = data['data']['a'] 
		qty_asks_a_l_AUTOUSDT = data['data']['A'] 

		global symbol_a_g_AUTOUSDT 
		global price_bids_a_g_AUTOUSDT 
		global qty_bids_a_g_AUTOUSDT 
		global price_asks_a_g_AUTOUSDT 
		global qty_asks_a_g_AUTOUSDT 

		symbol_a_g_AUTOUSDT = symbol_a_l_AUTOUSDT 
		price_bids_a_g_AUTOUSDT = price_bids_a_l_AUTOUSDT 
		qty_bids_a_g_AUTOUSDT = qty_bids_a_l_AUTOUSDT 
		price_asks_a_g_AUTOUSDT = price_asks_a_l_AUTOUSDT 
		qty_asks_a_g_AUTOUSDT = qty_asks_a_l_AUTOUSDT 

	if data['stream'] == streamautobtc :
		data = json.loads(message) 

		symbol_b_l_AUTOBTC = data['data']['s'] 
		price_bids_b_l_AUTOBTC = data['data']['b'] 
		qty_bids_b_l_AUTOBTC = data['data']['B']
		price_asks_b_l_AUTOBTC = data['data']['a'] 
		qty_asks_b_l_AUTOBTC = data['data']['A'] 

		global symbol_b_g_AUTOBTC 
		global price_bids_b_g_AUTOBTC 
		global qty_bids_b_g_AUTOBTC 
		global price_asks_b_g_AUTOBTC 
		global qty_asks_b_g_AUTOBTC 

		symbol_b_g_AUTOBTC = symbol_b_l_AUTOBTC 
		price_bids_b_g_AUTOBTC = price_bids_b_l_AUTOBTC 
		qty_bids_b_g_AUTOBTC = qty_bids_b_l_AUTOBTC 
		price_asks_b_g_AUTOBTC = price_asks_b_l_AUTOBTC 
		qty_asks_b_g_AUTOBTC = qty_asks_b_l_AUTOBTC 


def loop_AUTOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamautousdt}/{streamautobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_AUTOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_AUTOUSDT).start()

def loop_AUTOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_AUTOUSDT != 0.0 and qty_bids_a_g_AUTOUSDT != 0.0 and price_asks_a_g_AUTOUSDT != 0.0 and qty_asks_a_g_AUTOUSDT != 0.0 and price_bids_b_g_AUTOBTC != 0.0 and qty_bids_b_g_AUTOBTC != 0.0 and price_asks_b_g_AUTOBTC != 0.0 and qty_asks_b_g_AUTOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_AUTOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_AUTOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_AUTOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_AUTOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_AUTOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_AUTOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_AUTOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_AUTOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_AUTOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_AUTOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_AUTOUSDT_Trade).start() 

streamtkousdt = 'tkousdt@bookTicker'
streamtkobtc  = 'tkobtc@bookTicker'

symbol_a_g_TKOUSDT = 'TKOUSDT' 
price_bids_a_g_TKOUSDT = float(0.0) 
qty_bids_a_g_TKOUSDT = float(0.0) 
price_asks_a_g_TKOUSDT = float(0.0) 
qty_asks_a_g_TKOUSDT = float(0.0) 

stepSize_TKOUSDT = 0.10000000 

symbol_b_g_TKOBTC = 'TKOBTC' 
price_bids_b_g_TKOBTC = float(0.0) 
qty_bids_b_g_TKOBTC = float(0.0) 
price_asks_b_g_TKOBTC = float(0.0) 
qty_asks_b_g_TKOBTC = float(0.0) 

stepSize_TKOBTC = 0.10000000 

def on_message_TKOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamtkousdt :
		symbol_a_l_TKOUSDT = data['data']['s'] 
		price_bids_a_l_TKOUSDT = data['data']['b'] 
		qty_bids_a_l_TKOUSDT = data['data']['B'] 
		price_asks_a_l_TKOUSDT = data['data']['a'] 
		qty_asks_a_l_TKOUSDT = data['data']['A'] 

		global symbol_a_g_TKOUSDT 
		global price_bids_a_g_TKOUSDT 
		global qty_bids_a_g_TKOUSDT 
		global price_asks_a_g_TKOUSDT 
		global qty_asks_a_g_TKOUSDT 

		symbol_a_g_TKOUSDT = symbol_a_l_TKOUSDT 
		price_bids_a_g_TKOUSDT = price_bids_a_l_TKOUSDT 
		qty_bids_a_g_TKOUSDT = qty_bids_a_l_TKOUSDT 
		price_asks_a_g_TKOUSDT = price_asks_a_l_TKOUSDT 
		qty_asks_a_g_TKOUSDT = qty_asks_a_l_TKOUSDT 

	if data['stream'] == streamtkobtc :
		data = json.loads(message) 

		symbol_b_l_TKOBTC = data['data']['s'] 
		price_bids_b_l_TKOBTC = data['data']['b'] 
		qty_bids_b_l_TKOBTC = data['data']['B']
		price_asks_b_l_TKOBTC = data['data']['a'] 
		qty_asks_b_l_TKOBTC = data['data']['A'] 

		global symbol_b_g_TKOBTC 
		global price_bids_b_g_TKOBTC 
		global qty_bids_b_g_TKOBTC 
		global price_asks_b_g_TKOBTC 
		global qty_asks_b_g_TKOBTC 

		symbol_b_g_TKOBTC = symbol_b_l_TKOBTC 
		price_bids_b_g_TKOBTC = price_bids_b_l_TKOBTC 
		qty_bids_b_g_TKOBTC = qty_bids_b_l_TKOBTC 
		price_asks_b_g_TKOBTC = price_asks_b_l_TKOBTC 
		qty_asks_b_g_TKOBTC = qty_asks_b_l_TKOBTC 


def loop_TKOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamtkousdt}/{streamtkobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_TKOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_TKOUSDT).start()

def loop_TKOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_TKOUSDT != 0.0 and qty_bids_a_g_TKOUSDT != 0.0 and price_asks_a_g_TKOUSDT != 0.0 and qty_asks_a_g_TKOUSDT != 0.0 and price_bids_b_g_TKOBTC != 0.0 and qty_bids_b_g_TKOBTC != 0.0 and price_asks_b_g_TKOBTC != 0.0 and qty_asks_b_g_TKOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_TKOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_TKOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_TKOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_TKOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_TKOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_TKOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_TKOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_TKOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_TKOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_TKOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_TKOUSDT_Trade).start() 

streamtlmusdt = 'tlmusdt@bookTicker'
streamtlmbtc  = 'tlmbtc@bookTicker'

symbol_a_g_TLMUSDT = 'TLMUSDT' 
price_bids_a_g_TLMUSDT = float(0.0) 
qty_bids_a_g_TLMUSDT = float(0.0) 
price_asks_a_g_TLMUSDT = float(0.0) 
qty_asks_a_g_TLMUSDT = float(0.0) 

stepSize_TLMUSDT = 1.00000000 

symbol_b_g_TLMBTC = 'TLMBTC' 
price_bids_b_g_TLMBTC = float(0.0) 
qty_bids_b_g_TLMBTC = float(0.0) 
price_asks_b_g_TLMBTC = float(0.0) 
qty_asks_b_g_TLMBTC = float(0.0) 

stepSize_TLMBTC = 1.00000000 

def on_message_TLMUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamtlmusdt :
		symbol_a_l_TLMUSDT = data['data']['s'] 
		price_bids_a_l_TLMUSDT = data['data']['b'] 
		qty_bids_a_l_TLMUSDT = data['data']['B'] 
		price_asks_a_l_TLMUSDT = data['data']['a'] 
		qty_asks_a_l_TLMUSDT = data['data']['A'] 

		global symbol_a_g_TLMUSDT 
		global price_bids_a_g_TLMUSDT 
		global qty_bids_a_g_TLMUSDT 
		global price_asks_a_g_TLMUSDT 
		global qty_asks_a_g_TLMUSDT 

		symbol_a_g_TLMUSDT = symbol_a_l_TLMUSDT 
		price_bids_a_g_TLMUSDT = price_bids_a_l_TLMUSDT 
		qty_bids_a_g_TLMUSDT = qty_bids_a_l_TLMUSDT 
		price_asks_a_g_TLMUSDT = price_asks_a_l_TLMUSDT 
		qty_asks_a_g_TLMUSDT = qty_asks_a_l_TLMUSDT 

	if data['stream'] == streamtlmbtc :
		data = json.loads(message) 

		symbol_b_l_TLMBTC = data['data']['s'] 
		price_bids_b_l_TLMBTC = data['data']['b'] 
		qty_bids_b_l_TLMBTC = data['data']['B']
		price_asks_b_l_TLMBTC = data['data']['a'] 
		qty_asks_b_l_TLMBTC = data['data']['A'] 

		global symbol_b_g_TLMBTC 
		global price_bids_b_g_TLMBTC 
		global qty_bids_b_g_TLMBTC 
		global price_asks_b_g_TLMBTC 
		global qty_asks_b_g_TLMBTC 

		symbol_b_g_TLMBTC = symbol_b_l_TLMBTC 
		price_bids_b_g_TLMBTC = price_bids_b_l_TLMBTC 
		qty_bids_b_g_TLMBTC = qty_bids_b_l_TLMBTC 
		price_asks_b_g_TLMBTC = price_asks_b_l_TLMBTC 
		qty_asks_b_g_TLMBTC = qty_asks_b_l_TLMBTC 


def loop_TLMUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamtlmusdt}/{streamtlmbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_TLMUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_TLMUSDT).start()

def loop_TLMUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_TLMUSDT != 0.0 and qty_bids_a_g_TLMUSDT != 0.0 and price_asks_a_g_TLMUSDT != 0.0 and qty_asks_a_g_TLMUSDT != 0.0 and price_bids_b_g_TLMBTC != 0.0 and qty_bids_b_g_TLMBTC != 0.0 and price_asks_b_g_TLMBTC != 0.0 and qty_asks_b_g_TLMBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_TLMBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_TLMBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_TLMUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_TLMUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_TLMBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_TLMBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_TLMUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_TLMUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_TLMBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_TLMBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_TLMUSDT_Trade).start() 

streammirusdt = 'mirusdt@bookTicker'
streammirbtc  = 'mirbtc@bookTicker'

symbol_a_g_MIRUSDT = 'MIRUSDT' 
price_bids_a_g_MIRUSDT = float(0.0) 
qty_bids_a_g_MIRUSDT = float(0.0) 
price_asks_a_g_MIRUSDT = float(0.0) 
qty_asks_a_g_MIRUSDT = float(0.0) 

stepSize_MIRUSDT = 0.10000000 

symbol_b_g_MIRBTC = 'MIRBTC' 
price_bids_b_g_MIRBTC = float(0.0) 
qty_bids_b_g_MIRBTC = float(0.0) 
price_asks_b_g_MIRBTC = float(0.0) 
qty_asks_b_g_MIRBTC = float(0.0) 

stepSize_MIRBTC = 0.10000000 

def on_message_MIRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streammirusdt :
		symbol_a_l_MIRUSDT = data['data']['s'] 
		price_bids_a_l_MIRUSDT = data['data']['b'] 
		qty_bids_a_l_MIRUSDT = data['data']['B'] 
		price_asks_a_l_MIRUSDT = data['data']['a'] 
		qty_asks_a_l_MIRUSDT = data['data']['A'] 

		global symbol_a_g_MIRUSDT 
		global price_bids_a_g_MIRUSDT 
		global qty_bids_a_g_MIRUSDT 
		global price_asks_a_g_MIRUSDT 
		global qty_asks_a_g_MIRUSDT 

		symbol_a_g_MIRUSDT = symbol_a_l_MIRUSDT 
		price_bids_a_g_MIRUSDT = price_bids_a_l_MIRUSDT 
		qty_bids_a_g_MIRUSDT = qty_bids_a_l_MIRUSDT 
		price_asks_a_g_MIRUSDT = price_asks_a_l_MIRUSDT 
		qty_asks_a_g_MIRUSDT = qty_asks_a_l_MIRUSDT 

	if data['stream'] == streammirbtc :
		data = json.loads(message) 

		symbol_b_l_MIRBTC = data['data']['s'] 
		price_bids_b_l_MIRBTC = data['data']['b'] 
		qty_bids_b_l_MIRBTC = data['data']['B']
		price_asks_b_l_MIRBTC = data['data']['a'] 
		qty_asks_b_l_MIRBTC = data['data']['A'] 

		global symbol_b_g_MIRBTC 
		global price_bids_b_g_MIRBTC 
		global qty_bids_b_g_MIRBTC 
		global price_asks_b_g_MIRBTC 
		global qty_asks_b_g_MIRBTC 

		symbol_b_g_MIRBTC = symbol_b_l_MIRBTC 
		price_bids_b_g_MIRBTC = price_bids_b_l_MIRBTC 
		qty_bids_b_g_MIRBTC = qty_bids_b_l_MIRBTC 
		price_asks_b_g_MIRBTC = price_asks_b_l_MIRBTC 
		qty_asks_b_g_MIRBTC = qty_asks_b_l_MIRBTC 


def loop_MIRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streammirusdt}/{streammirbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_MIRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_MIRUSDT).start()

def loop_MIRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_MIRUSDT != 0.0 and qty_bids_a_g_MIRUSDT != 0.0 and price_asks_a_g_MIRUSDT != 0.0 and qty_asks_a_g_MIRUSDT != 0.0 and price_bids_b_g_MIRBTC != 0.0 and qty_bids_b_g_MIRBTC != 0.0 and price_asks_b_g_MIRBTC != 0.0 and qty_asks_b_g_MIRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_MIRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_MIRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_MIRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_MIRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_MIRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_MIRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_MIRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_MIRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_MIRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_MIRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_MIRUSDT_Trade).start() 

streambarusdt = 'barusdt@bookTicker'
streambarbtc  = 'barbtc@bookTicker'

symbol_a_g_BARUSDT = 'BARUSDT' 
price_bids_a_g_BARUSDT = float(0.0) 
qty_bids_a_g_BARUSDT = float(0.0) 
price_asks_a_g_BARUSDT = float(0.0) 
qty_asks_a_g_BARUSDT = float(0.0) 

stepSize_BARUSDT = 0.01000000 

symbol_b_g_BARBTC = 'BARBTC' 
price_bids_b_g_BARBTC = float(0.0) 
qty_bids_b_g_BARBTC = float(0.0) 
price_asks_b_g_BARBTC = float(0.0) 
qty_asks_b_g_BARBTC = float(0.0) 

stepSize_BARBTC = 0.01000000 

def on_message_BARUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambarusdt :
		symbol_a_l_BARUSDT = data['data']['s'] 
		price_bids_a_l_BARUSDT = data['data']['b'] 
		qty_bids_a_l_BARUSDT = data['data']['B'] 
		price_asks_a_l_BARUSDT = data['data']['a'] 
		qty_asks_a_l_BARUSDT = data['data']['A'] 

		global symbol_a_g_BARUSDT 
		global price_bids_a_g_BARUSDT 
		global qty_bids_a_g_BARUSDT 
		global price_asks_a_g_BARUSDT 
		global qty_asks_a_g_BARUSDT 

		symbol_a_g_BARUSDT = symbol_a_l_BARUSDT 
		price_bids_a_g_BARUSDT = price_bids_a_l_BARUSDT 
		qty_bids_a_g_BARUSDT = qty_bids_a_l_BARUSDT 
		price_asks_a_g_BARUSDT = price_asks_a_l_BARUSDT 
		qty_asks_a_g_BARUSDT = qty_asks_a_l_BARUSDT 

	if data['stream'] == streambarbtc :
		data = json.loads(message) 

		symbol_b_l_BARBTC = data['data']['s'] 
		price_bids_b_l_BARBTC = data['data']['b'] 
		qty_bids_b_l_BARBTC = data['data']['B']
		price_asks_b_l_BARBTC = data['data']['a'] 
		qty_asks_b_l_BARBTC = data['data']['A'] 

		global symbol_b_g_BARBTC 
		global price_bids_b_g_BARBTC 
		global qty_bids_b_g_BARBTC 
		global price_asks_b_g_BARBTC 
		global qty_asks_b_g_BARBTC 

		symbol_b_g_BARBTC = symbol_b_l_BARBTC 
		price_bids_b_g_BARBTC = price_bids_b_l_BARBTC 
		qty_bids_b_g_BARBTC = qty_bids_b_l_BARBTC 
		price_asks_b_g_BARBTC = price_asks_b_l_BARBTC 
		qty_asks_b_g_BARBTC = qty_asks_b_l_BARBTC 


def loop_BARUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambarusdt}/{streambarbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BARUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BARUSDT).start()

def loop_BARUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BARUSDT != 0.0 and qty_bids_a_g_BARUSDT != 0.0 and price_asks_a_g_BARUSDT != 0.0 and qty_asks_a_g_BARUSDT != 0.0 and price_bids_b_g_BARBTC != 0.0 and qty_bids_b_g_BARBTC != 0.0 and price_asks_b_g_BARBTC != 0.0 and qty_asks_b_g_BARBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BARBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BARBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BARUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BARUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BARBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BARBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BARUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BARUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BARBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BARBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BARUSDT_Trade).start() 

streamforthusdt = 'forthusdt@bookTicker'
streamforthbtc  = 'forthbtc@bookTicker'

symbol_a_g_FORTHUSDT = 'FORTHUSDT' 
price_bids_a_g_FORTHUSDT = float(0.0) 
qty_bids_a_g_FORTHUSDT = float(0.0) 
price_asks_a_g_FORTHUSDT = float(0.0) 
qty_asks_a_g_FORTHUSDT = float(0.0) 

stepSize_FORTHUSDT = 0.01000000 

symbol_b_g_FORTHBTC = 'FORTHBTC' 
price_bids_b_g_FORTHBTC = float(0.0) 
qty_bids_b_g_FORTHBTC = float(0.0) 
price_asks_b_g_FORTHBTC = float(0.0) 
qty_asks_b_g_FORTHBTC = float(0.0) 

stepSize_FORTHBTC = 0.01000000 

def on_message_FORTHUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamforthusdt :
		symbol_a_l_FORTHUSDT = data['data']['s'] 
		price_bids_a_l_FORTHUSDT = data['data']['b'] 
		qty_bids_a_l_FORTHUSDT = data['data']['B'] 
		price_asks_a_l_FORTHUSDT = data['data']['a'] 
		qty_asks_a_l_FORTHUSDT = data['data']['A'] 

		global symbol_a_g_FORTHUSDT 
		global price_bids_a_g_FORTHUSDT 
		global qty_bids_a_g_FORTHUSDT 
		global price_asks_a_g_FORTHUSDT 
		global qty_asks_a_g_FORTHUSDT 

		symbol_a_g_FORTHUSDT = symbol_a_l_FORTHUSDT 
		price_bids_a_g_FORTHUSDT = price_bids_a_l_FORTHUSDT 
		qty_bids_a_g_FORTHUSDT = qty_bids_a_l_FORTHUSDT 
		price_asks_a_g_FORTHUSDT = price_asks_a_l_FORTHUSDT 
		qty_asks_a_g_FORTHUSDT = qty_asks_a_l_FORTHUSDT 

	if data['stream'] == streamforthbtc :
		data = json.loads(message) 

		symbol_b_l_FORTHBTC = data['data']['s'] 
		price_bids_b_l_FORTHBTC = data['data']['b'] 
		qty_bids_b_l_FORTHBTC = data['data']['B']
		price_asks_b_l_FORTHBTC = data['data']['a'] 
		qty_asks_b_l_FORTHBTC = data['data']['A'] 

		global symbol_b_g_FORTHBTC 
		global price_bids_b_g_FORTHBTC 
		global qty_bids_b_g_FORTHBTC 
		global price_asks_b_g_FORTHBTC 
		global qty_asks_b_g_FORTHBTC 

		symbol_b_g_FORTHBTC = symbol_b_l_FORTHBTC 
		price_bids_b_g_FORTHBTC = price_bids_b_l_FORTHBTC 
		qty_bids_b_g_FORTHBTC = qty_bids_b_l_FORTHBTC 
		price_asks_b_g_FORTHBTC = price_asks_b_l_FORTHBTC 
		qty_asks_b_g_FORTHBTC = qty_asks_b_l_FORTHBTC 


def loop_FORTHUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamforthusdt}/{streamforthbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FORTHUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FORTHUSDT).start()

def loop_FORTHUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FORTHUSDT != 0.0 and qty_bids_a_g_FORTHUSDT != 0.0 and price_asks_a_g_FORTHUSDT != 0.0 and qty_asks_a_g_FORTHUSDT != 0.0 and price_bids_b_g_FORTHBTC != 0.0 and qty_bids_b_g_FORTHBTC != 0.0 and price_asks_b_g_FORTHBTC != 0.0 and qty_asks_b_g_FORTHBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FORTHBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FORTHBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FORTHUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FORTHUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FORTHBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FORTHBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FORTHUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FORTHUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FORTHBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FORTHBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FORTHUSDT_Trade).start() 

streambakeusdt = 'bakeusdt@bookTicker'
streambakebtc  = 'bakebtc@bookTicker'

symbol_a_g_BAKEUSDT = 'BAKEUSDT' 
price_bids_a_g_BAKEUSDT = float(0.0) 
qty_bids_a_g_BAKEUSDT = float(0.0) 
price_asks_a_g_BAKEUSDT = float(0.0) 
qty_asks_a_g_BAKEUSDT = float(0.0) 

stepSize_BAKEUSDT = 0.10000000 

symbol_b_g_BAKEBTC = 'BAKEBTC' 
price_bids_b_g_BAKEBTC = float(0.0) 
qty_bids_b_g_BAKEBTC = float(0.0) 
price_asks_b_g_BAKEBTC = float(0.0) 
qty_asks_b_g_BAKEBTC = float(0.0) 

stepSize_BAKEBTC = 0.10000000 

def on_message_BAKEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambakeusdt :
		symbol_a_l_BAKEUSDT = data['data']['s'] 
		price_bids_a_l_BAKEUSDT = data['data']['b'] 
		qty_bids_a_l_BAKEUSDT = data['data']['B'] 
		price_asks_a_l_BAKEUSDT = data['data']['a'] 
		qty_asks_a_l_BAKEUSDT = data['data']['A'] 

		global symbol_a_g_BAKEUSDT 
		global price_bids_a_g_BAKEUSDT 
		global qty_bids_a_g_BAKEUSDT 
		global price_asks_a_g_BAKEUSDT 
		global qty_asks_a_g_BAKEUSDT 

		symbol_a_g_BAKEUSDT = symbol_a_l_BAKEUSDT 
		price_bids_a_g_BAKEUSDT = price_bids_a_l_BAKEUSDT 
		qty_bids_a_g_BAKEUSDT = qty_bids_a_l_BAKEUSDT 
		price_asks_a_g_BAKEUSDT = price_asks_a_l_BAKEUSDT 
		qty_asks_a_g_BAKEUSDT = qty_asks_a_l_BAKEUSDT 

	if data['stream'] == streambakebtc :
		data = json.loads(message) 

		symbol_b_l_BAKEBTC = data['data']['s'] 
		price_bids_b_l_BAKEBTC = data['data']['b'] 
		qty_bids_b_l_BAKEBTC = data['data']['B']
		price_asks_b_l_BAKEBTC = data['data']['a'] 
		qty_asks_b_l_BAKEBTC = data['data']['A'] 

		global symbol_b_g_BAKEBTC 
		global price_bids_b_g_BAKEBTC 
		global qty_bids_b_g_BAKEBTC 
		global price_asks_b_g_BAKEBTC 
		global qty_asks_b_g_BAKEBTC 

		symbol_b_g_BAKEBTC = symbol_b_l_BAKEBTC 
		price_bids_b_g_BAKEBTC = price_bids_b_l_BAKEBTC 
		qty_bids_b_g_BAKEBTC = qty_bids_b_l_BAKEBTC 
		price_asks_b_g_BAKEBTC = price_asks_b_l_BAKEBTC 
		qty_asks_b_g_BAKEBTC = qty_asks_b_l_BAKEBTC 


def loop_BAKEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambakeusdt}/{streambakebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BAKEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BAKEUSDT).start()

def loop_BAKEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BAKEUSDT != 0.0 and qty_bids_a_g_BAKEUSDT != 0.0 and price_asks_a_g_BAKEUSDT != 0.0 and qty_asks_a_g_BAKEUSDT != 0.0 and price_bids_b_g_BAKEBTC != 0.0 and qty_bids_b_g_BAKEBTC != 0.0 and price_asks_b_g_BAKEBTC != 0.0 and qty_asks_b_g_BAKEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BAKEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BAKEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BAKEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BAKEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BAKEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BAKEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BAKEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BAKEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BAKEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BAKEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BAKEUSDT_Trade).start() 

streamicpusdt = 'icpusdt@bookTicker'
streamicpbtc  = 'icpbtc@bookTicker'

symbol_a_g_ICPUSDT = 'ICPUSDT' 
price_bids_a_g_ICPUSDT = float(0.0) 
qty_bids_a_g_ICPUSDT = float(0.0) 
price_asks_a_g_ICPUSDT = float(0.0) 
qty_asks_a_g_ICPUSDT = float(0.0) 

stepSize_ICPUSDT = 0.01000000 

symbol_b_g_ICPBTC = 'ICPBTC' 
price_bids_b_g_ICPBTC = float(0.0) 
qty_bids_b_g_ICPBTC = float(0.0) 
price_asks_b_g_ICPBTC = float(0.0) 
qty_asks_b_g_ICPBTC = float(0.0) 

stepSize_ICPBTC = 0.01000000 

def on_message_ICPUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamicpusdt :
		symbol_a_l_ICPUSDT = data['data']['s'] 
		price_bids_a_l_ICPUSDT = data['data']['b'] 
		qty_bids_a_l_ICPUSDT = data['data']['B'] 
		price_asks_a_l_ICPUSDT = data['data']['a'] 
		qty_asks_a_l_ICPUSDT = data['data']['A'] 

		global symbol_a_g_ICPUSDT 
		global price_bids_a_g_ICPUSDT 
		global qty_bids_a_g_ICPUSDT 
		global price_asks_a_g_ICPUSDT 
		global qty_asks_a_g_ICPUSDT 

		symbol_a_g_ICPUSDT = symbol_a_l_ICPUSDT 
		price_bids_a_g_ICPUSDT = price_bids_a_l_ICPUSDT 
		qty_bids_a_g_ICPUSDT = qty_bids_a_l_ICPUSDT 
		price_asks_a_g_ICPUSDT = price_asks_a_l_ICPUSDT 
		qty_asks_a_g_ICPUSDT = qty_asks_a_l_ICPUSDT 

	if data['stream'] == streamicpbtc :
		data = json.loads(message) 

		symbol_b_l_ICPBTC = data['data']['s'] 
		price_bids_b_l_ICPBTC = data['data']['b'] 
		qty_bids_b_l_ICPBTC = data['data']['B']
		price_asks_b_l_ICPBTC = data['data']['a'] 
		qty_asks_b_l_ICPBTC = data['data']['A'] 

		global symbol_b_g_ICPBTC 
		global price_bids_b_g_ICPBTC 
		global qty_bids_b_g_ICPBTC 
		global price_asks_b_g_ICPBTC 
		global qty_asks_b_g_ICPBTC 

		symbol_b_g_ICPBTC = symbol_b_l_ICPBTC 
		price_bids_b_g_ICPBTC = price_bids_b_l_ICPBTC 
		qty_bids_b_g_ICPBTC = qty_bids_b_l_ICPBTC 
		price_asks_b_g_ICPBTC = price_asks_b_l_ICPBTC 
		qty_asks_b_g_ICPBTC = qty_asks_b_l_ICPBTC 


def loop_ICPUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamicpusdt}/{streamicpbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ICPUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ICPUSDT).start()

def loop_ICPUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ICPUSDT != 0.0 and qty_bids_a_g_ICPUSDT != 0.0 and price_asks_a_g_ICPUSDT != 0.0 and qty_asks_a_g_ICPUSDT != 0.0 and price_bids_b_g_ICPBTC != 0.0 and qty_bids_b_g_ICPBTC != 0.0 and price_asks_b_g_ICPBTC != 0.0 and qty_asks_b_g_ICPBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ICPBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ICPBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ICPUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ICPUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ICPBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ICPBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ICPUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ICPUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ICPBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ICPBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ICPUSDT_Trade).start() 

streamarusdt = 'arusdt@bookTicker'
streamarbtc  = 'arbtc@bookTicker'

symbol_a_g_ARUSDT = 'ARUSDT' 
price_bids_a_g_ARUSDT = float(0.0) 
qty_bids_a_g_ARUSDT = float(0.0) 
price_asks_a_g_ARUSDT = float(0.0) 
qty_asks_a_g_ARUSDT = float(0.0) 

stepSize_ARUSDT = 0.01000000 

symbol_b_g_ARBTC = 'ARBTC' 
price_bids_b_g_ARBTC = float(0.0) 
qty_bids_b_g_ARBTC = float(0.0) 
price_asks_b_g_ARBTC = float(0.0) 
qty_asks_b_g_ARBTC = float(0.0) 

stepSize_ARBTC = 0.01000000 

def on_message_ARUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamarusdt :
		symbol_a_l_ARUSDT = data['data']['s'] 
		price_bids_a_l_ARUSDT = data['data']['b'] 
		qty_bids_a_l_ARUSDT = data['data']['B'] 
		price_asks_a_l_ARUSDT = data['data']['a'] 
		qty_asks_a_l_ARUSDT = data['data']['A'] 

		global symbol_a_g_ARUSDT 
		global price_bids_a_g_ARUSDT 
		global qty_bids_a_g_ARUSDT 
		global price_asks_a_g_ARUSDT 
		global qty_asks_a_g_ARUSDT 

		symbol_a_g_ARUSDT = symbol_a_l_ARUSDT 
		price_bids_a_g_ARUSDT = price_bids_a_l_ARUSDT 
		qty_bids_a_g_ARUSDT = qty_bids_a_l_ARUSDT 
		price_asks_a_g_ARUSDT = price_asks_a_l_ARUSDT 
		qty_asks_a_g_ARUSDT = qty_asks_a_l_ARUSDT 

	if data['stream'] == streamarbtc :
		data = json.loads(message) 

		symbol_b_l_ARBTC = data['data']['s'] 
		price_bids_b_l_ARBTC = data['data']['b'] 
		qty_bids_b_l_ARBTC = data['data']['B']
		price_asks_b_l_ARBTC = data['data']['a'] 
		qty_asks_b_l_ARBTC = data['data']['A'] 

		global symbol_b_g_ARBTC 
		global price_bids_b_g_ARBTC 
		global qty_bids_b_g_ARBTC 
		global price_asks_b_g_ARBTC 
		global qty_asks_b_g_ARBTC 

		symbol_b_g_ARBTC = symbol_b_l_ARBTC 
		price_bids_b_g_ARBTC = price_bids_b_l_ARBTC 
		qty_bids_b_g_ARBTC = qty_bids_b_l_ARBTC 
		price_asks_b_g_ARBTC = price_asks_b_l_ARBTC 
		qty_asks_b_g_ARBTC = qty_asks_b_l_ARBTC 


def loop_ARUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamarusdt}/{streamarbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ARUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ARUSDT).start()

def loop_ARUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ARUSDT != 0.0 and qty_bids_a_g_ARUSDT != 0.0 and price_asks_a_g_ARUSDT != 0.0 and qty_asks_a_g_ARUSDT != 0.0 and price_bids_b_g_ARBTC != 0.0 and qty_bids_b_g_ARBTC != 0.0 and price_asks_b_g_ARBTC != 0.0 and qty_asks_b_g_ARBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ARBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ARBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ARUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ARUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ARBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ARBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ARUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ARUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ARBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ARBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ARUSDT_Trade).start() 

streampolsusdt = 'polsusdt@bookTicker'
streampolsbtc  = 'polsbtc@bookTicker'

symbol_a_g_POLSUSDT = 'POLSUSDT' 
price_bids_a_g_POLSUSDT = float(0.0) 
qty_bids_a_g_POLSUSDT = float(0.0) 
price_asks_a_g_POLSUSDT = float(0.0) 
qty_asks_a_g_POLSUSDT = float(0.0) 

stepSize_POLSUSDT = 0.10000000 

symbol_b_g_POLSBTC = 'POLSBTC' 
price_bids_b_g_POLSBTC = float(0.0) 
qty_bids_b_g_POLSBTC = float(0.0) 
price_asks_b_g_POLSBTC = float(0.0) 
qty_asks_b_g_POLSBTC = float(0.0) 

stepSize_POLSBTC = 0.10000000 

def on_message_POLSUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streampolsusdt :
		symbol_a_l_POLSUSDT = data['data']['s'] 
		price_bids_a_l_POLSUSDT = data['data']['b'] 
		qty_bids_a_l_POLSUSDT = data['data']['B'] 
		price_asks_a_l_POLSUSDT = data['data']['a'] 
		qty_asks_a_l_POLSUSDT = data['data']['A'] 

		global symbol_a_g_POLSUSDT 
		global price_bids_a_g_POLSUSDT 
		global qty_bids_a_g_POLSUSDT 
		global price_asks_a_g_POLSUSDT 
		global qty_asks_a_g_POLSUSDT 

		symbol_a_g_POLSUSDT = symbol_a_l_POLSUSDT 
		price_bids_a_g_POLSUSDT = price_bids_a_l_POLSUSDT 
		qty_bids_a_g_POLSUSDT = qty_bids_a_l_POLSUSDT 
		price_asks_a_g_POLSUSDT = price_asks_a_l_POLSUSDT 
		qty_asks_a_g_POLSUSDT = qty_asks_a_l_POLSUSDT 

	if data['stream'] == streampolsbtc :
		data = json.loads(message) 

		symbol_b_l_POLSBTC = data['data']['s'] 
		price_bids_b_l_POLSBTC = data['data']['b'] 
		qty_bids_b_l_POLSBTC = data['data']['B']
		price_asks_b_l_POLSBTC = data['data']['a'] 
		qty_asks_b_l_POLSBTC = data['data']['A'] 

		global symbol_b_g_POLSBTC 
		global price_bids_b_g_POLSBTC 
		global qty_bids_b_g_POLSBTC 
		global price_asks_b_g_POLSBTC 
		global qty_asks_b_g_POLSBTC 

		symbol_b_g_POLSBTC = symbol_b_l_POLSBTC 
		price_bids_b_g_POLSBTC = price_bids_b_l_POLSBTC 
		qty_bids_b_g_POLSBTC = qty_bids_b_l_POLSBTC 
		price_asks_b_g_POLSBTC = price_asks_b_l_POLSBTC 
		qty_asks_b_g_POLSBTC = qty_asks_b_l_POLSBTC 


def loop_POLSUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streampolsusdt}/{streampolsbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_POLSUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_POLSUSDT).start()

def loop_POLSUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_POLSUSDT != 0.0 and qty_bids_a_g_POLSUSDT != 0.0 and price_asks_a_g_POLSUSDT != 0.0 and qty_asks_a_g_POLSUSDT != 0.0 and price_bids_b_g_POLSBTC != 0.0 and qty_bids_b_g_POLSBTC != 0.0 and price_asks_b_g_POLSBTC != 0.0 and qty_asks_b_g_POLSBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_POLSBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_POLSBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_POLSUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_POLSUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_POLSBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_POLSBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_POLSUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_POLSUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_POLSBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_POLSBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_POLSUSDT_Trade).start() 

streammdxusdt = 'mdxusdt@bookTicker'
streammdxbtc  = 'mdxbtc@bookTicker'

symbol_a_g_MDXUSDT = 'MDXUSDT' 
price_bids_a_g_MDXUSDT = float(0.0) 
qty_bids_a_g_MDXUSDT = float(0.0) 
price_asks_a_g_MDXUSDT = float(0.0) 
qty_asks_a_g_MDXUSDT = float(0.0) 

stepSize_MDXUSDT = 0.10000000 

symbol_b_g_MDXBTC = 'MDXBTC' 
price_bids_b_g_MDXBTC = float(0.0) 
qty_bids_b_g_MDXBTC = float(0.0) 
price_asks_b_g_MDXBTC = float(0.0) 
qty_asks_b_g_MDXBTC = float(0.0) 

stepSize_MDXBTC = 0.10000000 

def on_message_MDXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streammdxusdt :
		symbol_a_l_MDXUSDT = data['data']['s'] 
		price_bids_a_l_MDXUSDT = data['data']['b'] 
		qty_bids_a_l_MDXUSDT = data['data']['B'] 
		price_asks_a_l_MDXUSDT = data['data']['a'] 
		qty_asks_a_l_MDXUSDT = data['data']['A'] 

		global symbol_a_g_MDXUSDT 
		global price_bids_a_g_MDXUSDT 
		global qty_bids_a_g_MDXUSDT 
		global price_asks_a_g_MDXUSDT 
		global qty_asks_a_g_MDXUSDT 

		symbol_a_g_MDXUSDT = symbol_a_l_MDXUSDT 
		price_bids_a_g_MDXUSDT = price_bids_a_l_MDXUSDT 
		qty_bids_a_g_MDXUSDT = qty_bids_a_l_MDXUSDT 
		price_asks_a_g_MDXUSDT = price_asks_a_l_MDXUSDT 
		qty_asks_a_g_MDXUSDT = qty_asks_a_l_MDXUSDT 

	if data['stream'] == streammdxbtc :
		data = json.loads(message) 

		symbol_b_l_MDXBTC = data['data']['s'] 
		price_bids_b_l_MDXBTC = data['data']['b'] 
		qty_bids_b_l_MDXBTC = data['data']['B']
		price_asks_b_l_MDXBTC = data['data']['a'] 
		qty_asks_b_l_MDXBTC = data['data']['A'] 

		global symbol_b_g_MDXBTC 
		global price_bids_b_g_MDXBTC 
		global qty_bids_b_g_MDXBTC 
		global price_asks_b_g_MDXBTC 
		global qty_asks_b_g_MDXBTC 

		symbol_b_g_MDXBTC = symbol_b_l_MDXBTC 
		price_bids_b_g_MDXBTC = price_bids_b_l_MDXBTC 
		qty_bids_b_g_MDXBTC = qty_bids_b_l_MDXBTC 
		price_asks_b_g_MDXBTC = price_asks_b_l_MDXBTC 
		qty_asks_b_g_MDXBTC = qty_asks_b_l_MDXBTC 


def loop_MDXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streammdxusdt}/{streammdxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_MDXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_MDXUSDT).start()

def loop_MDXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_MDXUSDT != 0.0 and qty_bids_a_g_MDXUSDT != 0.0 and price_asks_a_g_MDXUSDT != 0.0 and qty_asks_a_g_MDXUSDT != 0.0 and price_bids_b_g_MDXBTC != 0.0 and qty_bids_b_g_MDXBTC != 0.0 and price_asks_b_g_MDXBTC != 0.0 and qty_asks_b_g_MDXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_MDXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_MDXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_MDXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_MDXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_MDXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_MDXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_MDXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_MDXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_MDXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_MDXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_MDXUSDT_Trade).start() 

streamlptusdt = 'lptusdt@bookTicker'
streamlptbtc  = 'lptbtc@bookTicker'

symbol_a_g_LPTUSDT = 'LPTUSDT' 
price_bids_a_g_LPTUSDT = float(0.0) 
qty_bids_a_g_LPTUSDT = float(0.0) 
price_asks_a_g_LPTUSDT = float(0.0) 
qty_asks_a_g_LPTUSDT = float(0.0) 

stepSize_LPTUSDT = 0.01000000 

symbol_b_g_LPTBTC = 'LPTBTC' 
price_bids_b_g_LPTBTC = float(0.0) 
qty_bids_b_g_LPTBTC = float(0.0) 
price_asks_b_g_LPTBTC = float(0.0) 
qty_asks_b_g_LPTBTC = float(0.0) 

stepSize_LPTBTC = 0.01000000 

def on_message_LPTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamlptusdt :
		symbol_a_l_LPTUSDT = data['data']['s'] 
		price_bids_a_l_LPTUSDT = data['data']['b'] 
		qty_bids_a_l_LPTUSDT = data['data']['B'] 
		price_asks_a_l_LPTUSDT = data['data']['a'] 
		qty_asks_a_l_LPTUSDT = data['data']['A'] 

		global symbol_a_g_LPTUSDT 
		global price_bids_a_g_LPTUSDT 
		global qty_bids_a_g_LPTUSDT 
		global price_asks_a_g_LPTUSDT 
		global qty_asks_a_g_LPTUSDT 

		symbol_a_g_LPTUSDT = symbol_a_l_LPTUSDT 
		price_bids_a_g_LPTUSDT = price_bids_a_l_LPTUSDT 
		qty_bids_a_g_LPTUSDT = qty_bids_a_l_LPTUSDT 
		price_asks_a_g_LPTUSDT = price_asks_a_l_LPTUSDT 
		qty_asks_a_g_LPTUSDT = qty_asks_a_l_LPTUSDT 

	if data['stream'] == streamlptbtc :
		data = json.loads(message) 

		symbol_b_l_LPTBTC = data['data']['s'] 
		price_bids_b_l_LPTBTC = data['data']['b'] 
		qty_bids_b_l_LPTBTC = data['data']['B']
		price_asks_b_l_LPTBTC = data['data']['a'] 
		qty_asks_b_l_LPTBTC = data['data']['A'] 

		global symbol_b_g_LPTBTC 
		global price_bids_b_g_LPTBTC 
		global qty_bids_b_g_LPTBTC 
		global price_asks_b_g_LPTBTC 
		global qty_asks_b_g_LPTBTC 

		symbol_b_g_LPTBTC = symbol_b_l_LPTBTC 
		price_bids_b_g_LPTBTC = price_bids_b_l_LPTBTC 
		qty_bids_b_g_LPTBTC = qty_bids_b_l_LPTBTC 
		price_asks_b_g_LPTBTC = price_asks_b_l_LPTBTC 
		qty_asks_b_g_LPTBTC = qty_asks_b_l_LPTBTC 


def loop_LPTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamlptusdt}/{streamlptbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_LPTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_LPTUSDT).start()

def loop_LPTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_LPTUSDT != 0.0 and qty_bids_a_g_LPTUSDT != 0.0 and price_asks_a_g_LPTUSDT != 0.0 and qty_asks_a_g_LPTUSDT != 0.0 and price_bids_b_g_LPTBTC != 0.0 and qty_bids_b_g_LPTBTC != 0.0 and price_asks_b_g_LPTBTC != 0.0 and qty_asks_b_g_LPTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_LPTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_LPTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_LPTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_LPTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_LPTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_LPTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_LPTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_LPTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_LPTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_LPTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_LPTUSDT_Trade).start() 

streamatausdt = 'atausdt@bookTicker'
streamatabtc  = 'atabtc@bookTicker'

symbol_a_g_ATAUSDT = 'ATAUSDT' 
price_bids_a_g_ATAUSDT = float(0.0) 
qty_bids_a_g_ATAUSDT = float(0.0) 
price_asks_a_g_ATAUSDT = float(0.0) 
qty_asks_a_g_ATAUSDT = float(0.0) 

stepSize_ATAUSDT = 1.00000000 

symbol_b_g_ATABTC = 'ATABTC' 
price_bids_b_g_ATABTC = float(0.0) 
qty_bids_b_g_ATABTC = float(0.0) 
price_asks_b_g_ATABTC = float(0.0) 
qty_asks_b_g_ATABTC = float(0.0) 

stepSize_ATABTC = 1.00000000 

def on_message_ATAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamatausdt :
		symbol_a_l_ATAUSDT = data['data']['s'] 
		price_bids_a_l_ATAUSDT = data['data']['b'] 
		qty_bids_a_l_ATAUSDT = data['data']['B'] 
		price_asks_a_l_ATAUSDT = data['data']['a'] 
		qty_asks_a_l_ATAUSDT = data['data']['A'] 

		global symbol_a_g_ATAUSDT 
		global price_bids_a_g_ATAUSDT 
		global qty_bids_a_g_ATAUSDT 
		global price_asks_a_g_ATAUSDT 
		global qty_asks_a_g_ATAUSDT 

		symbol_a_g_ATAUSDT = symbol_a_l_ATAUSDT 
		price_bids_a_g_ATAUSDT = price_bids_a_l_ATAUSDT 
		qty_bids_a_g_ATAUSDT = qty_bids_a_l_ATAUSDT 
		price_asks_a_g_ATAUSDT = price_asks_a_l_ATAUSDT 
		qty_asks_a_g_ATAUSDT = qty_asks_a_l_ATAUSDT 

	if data['stream'] == streamatabtc :
		data = json.loads(message) 

		symbol_b_l_ATABTC = data['data']['s'] 
		price_bids_b_l_ATABTC = data['data']['b'] 
		qty_bids_b_l_ATABTC = data['data']['B']
		price_asks_b_l_ATABTC = data['data']['a'] 
		qty_asks_b_l_ATABTC = data['data']['A'] 

		global symbol_b_g_ATABTC 
		global price_bids_b_g_ATABTC 
		global qty_bids_b_g_ATABTC 
		global price_asks_b_g_ATABTC 
		global qty_asks_b_g_ATABTC 

		symbol_b_g_ATABTC = symbol_b_l_ATABTC 
		price_bids_b_g_ATABTC = price_bids_b_l_ATABTC 
		qty_bids_b_g_ATABTC = qty_bids_b_l_ATABTC 
		price_asks_b_g_ATABTC = price_asks_b_l_ATABTC 
		qty_asks_b_g_ATABTC = qty_asks_b_l_ATABTC 


def loop_ATAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamatausdt}/{streamatabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ATAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ATAUSDT).start()

def loop_ATAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ATAUSDT != 0.0 and qty_bids_a_g_ATAUSDT != 0.0 and price_asks_a_g_ATAUSDT != 0.0 and qty_asks_a_g_ATAUSDT != 0.0 and price_bids_b_g_ATABTC != 0.0 and qty_bids_b_g_ATABTC != 0.0 and price_asks_b_g_ATABTC != 0.0 and qty_asks_b_g_ATABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ATABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ATABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ATAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ATAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ATABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ATABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ATAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ATAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ATABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ATABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ATAUSDT_Trade).start() 

streamgtcusdt = 'gtcusdt@bookTicker'
streamgtcbtc  = 'gtcbtc@bookTicker'

symbol_a_g_GTCUSDT = 'GTCUSDT' 
price_bids_a_g_GTCUSDT = float(0.0) 
qty_bids_a_g_GTCUSDT = float(0.0) 
price_asks_a_g_GTCUSDT = float(0.0) 
qty_asks_a_g_GTCUSDT = float(0.0) 

stepSize_GTCUSDT = 0.10000000 

symbol_b_g_GTCBTC = 'GTCBTC' 
price_bids_b_g_GTCBTC = float(0.0) 
qty_bids_b_g_GTCBTC = float(0.0) 
price_asks_b_g_GTCBTC = float(0.0) 
qty_asks_b_g_GTCBTC = float(0.0) 

stepSize_GTCBTC = 0.10000000 

def on_message_GTCUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamgtcusdt :
		symbol_a_l_GTCUSDT = data['data']['s'] 
		price_bids_a_l_GTCUSDT = data['data']['b'] 
		qty_bids_a_l_GTCUSDT = data['data']['B'] 
		price_asks_a_l_GTCUSDT = data['data']['a'] 
		qty_asks_a_l_GTCUSDT = data['data']['A'] 

		global symbol_a_g_GTCUSDT 
		global price_bids_a_g_GTCUSDT 
		global qty_bids_a_g_GTCUSDT 
		global price_asks_a_g_GTCUSDT 
		global qty_asks_a_g_GTCUSDT 

		symbol_a_g_GTCUSDT = symbol_a_l_GTCUSDT 
		price_bids_a_g_GTCUSDT = price_bids_a_l_GTCUSDT 
		qty_bids_a_g_GTCUSDT = qty_bids_a_l_GTCUSDT 
		price_asks_a_g_GTCUSDT = price_asks_a_l_GTCUSDT 
		qty_asks_a_g_GTCUSDT = qty_asks_a_l_GTCUSDT 

	if data['stream'] == streamgtcbtc :
		data = json.loads(message) 

		symbol_b_l_GTCBTC = data['data']['s'] 
		price_bids_b_l_GTCBTC = data['data']['b'] 
		qty_bids_b_l_GTCBTC = data['data']['B']
		price_asks_b_l_GTCBTC = data['data']['a'] 
		qty_asks_b_l_GTCBTC = data['data']['A'] 

		global symbol_b_g_GTCBTC 
		global price_bids_b_g_GTCBTC 
		global qty_bids_b_g_GTCBTC 
		global price_asks_b_g_GTCBTC 
		global qty_asks_b_g_GTCBTC 

		symbol_b_g_GTCBTC = symbol_b_l_GTCBTC 
		price_bids_b_g_GTCBTC = price_bids_b_l_GTCBTC 
		qty_bids_b_g_GTCBTC = qty_bids_b_l_GTCBTC 
		price_asks_b_g_GTCBTC = price_asks_b_l_GTCBTC 
		qty_asks_b_g_GTCBTC = qty_asks_b_l_GTCBTC 


def loop_GTCUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamgtcusdt}/{streamgtcbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_GTCUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_GTCUSDT).start()

def loop_GTCUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_GTCUSDT != 0.0 and qty_bids_a_g_GTCUSDT != 0.0 and price_asks_a_g_GTCUSDT != 0.0 and qty_asks_a_g_GTCUSDT != 0.0 and price_bids_b_g_GTCBTC != 0.0 and qty_bids_b_g_GTCBTC != 0.0 and price_asks_b_g_GTCBTC != 0.0 and qty_asks_b_g_GTCBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_GTCBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_GTCBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_GTCUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_GTCUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_GTCBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_GTCBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_GTCUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_GTCUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_GTCBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_GTCBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_GTCUSDT_Trade).start() 

streamtornusdt = 'tornusdt@bookTicker'
streamtornbtc  = 'tornbtc@bookTicker'

symbol_a_g_TORNUSDT = 'TORNUSDT' 
price_bids_a_g_TORNUSDT = float(0.0) 
qty_bids_a_g_TORNUSDT = float(0.0) 
price_asks_a_g_TORNUSDT = float(0.0) 
qty_asks_a_g_TORNUSDT = float(0.0) 

stepSize_TORNUSDT = 0.01000000 

symbol_b_g_TORNBTC = 'TORNBTC' 
price_bids_b_g_TORNBTC = float(0.0) 
qty_bids_b_g_TORNBTC = float(0.0) 
price_asks_b_g_TORNBTC = float(0.0) 
qty_asks_b_g_TORNBTC = float(0.0) 

stepSize_TORNBTC = 0.01000000 

def on_message_TORNUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamtornusdt :
		symbol_a_l_TORNUSDT = data['data']['s'] 
		price_bids_a_l_TORNUSDT = data['data']['b'] 
		qty_bids_a_l_TORNUSDT = data['data']['B'] 
		price_asks_a_l_TORNUSDT = data['data']['a'] 
		qty_asks_a_l_TORNUSDT = data['data']['A'] 

		global symbol_a_g_TORNUSDT 
		global price_bids_a_g_TORNUSDT 
		global qty_bids_a_g_TORNUSDT 
		global price_asks_a_g_TORNUSDT 
		global qty_asks_a_g_TORNUSDT 

		symbol_a_g_TORNUSDT = symbol_a_l_TORNUSDT 
		price_bids_a_g_TORNUSDT = price_bids_a_l_TORNUSDT 
		qty_bids_a_g_TORNUSDT = qty_bids_a_l_TORNUSDT 
		price_asks_a_g_TORNUSDT = price_asks_a_l_TORNUSDT 
		qty_asks_a_g_TORNUSDT = qty_asks_a_l_TORNUSDT 

	if data['stream'] == streamtornbtc :
		data = json.loads(message) 

		symbol_b_l_TORNBTC = data['data']['s'] 
		price_bids_b_l_TORNBTC = data['data']['b'] 
		qty_bids_b_l_TORNBTC = data['data']['B']
		price_asks_b_l_TORNBTC = data['data']['a'] 
		qty_asks_b_l_TORNBTC = data['data']['A'] 

		global symbol_b_g_TORNBTC 
		global price_bids_b_g_TORNBTC 
		global qty_bids_b_g_TORNBTC 
		global price_asks_b_g_TORNBTC 
		global qty_asks_b_g_TORNBTC 

		symbol_b_g_TORNBTC = symbol_b_l_TORNBTC 
		price_bids_b_g_TORNBTC = price_bids_b_l_TORNBTC 
		qty_bids_b_g_TORNBTC = qty_bids_b_l_TORNBTC 
		price_asks_b_g_TORNBTC = price_asks_b_l_TORNBTC 
		qty_asks_b_g_TORNBTC = qty_asks_b_l_TORNBTC 


def loop_TORNUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamtornusdt}/{streamtornbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_TORNUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_TORNUSDT).start()

def loop_TORNUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_TORNUSDT != 0.0 and qty_bids_a_g_TORNUSDT != 0.0 and price_asks_a_g_TORNUSDT != 0.0 and qty_asks_a_g_TORNUSDT != 0.0 and price_bids_b_g_TORNBTC != 0.0 and qty_bids_b_g_TORNBTC != 0.0 and price_asks_b_g_TORNBTC != 0.0 and qty_asks_b_g_TORNBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_TORNBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_TORNBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_TORNUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_TORNUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_TORNBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_TORNBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_TORNUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_TORNUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_TORNBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_TORNBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_TORNUSDT_Trade).start() 

streamklayusdt = 'klayusdt@bookTicker'
streamklaybtc  = 'klaybtc@bookTicker'

symbol_a_g_KLAYUSDT = 'KLAYUSDT' 
price_bids_a_g_KLAYUSDT = float(0.0) 
qty_bids_a_g_KLAYUSDT = float(0.0) 
price_asks_a_g_KLAYUSDT = float(0.0) 
qty_asks_a_g_KLAYUSDT = float(0.0) 

stepSize_KLAYUSDT = 0.10000000 

symbol_b_g_KLAYBTC = 'KLAYBTC' 
price_bids_b_g_KLAYBTC = float(0.0) 
qty_bids_b_g_KLAYBTC = float(0.0) 
price_asks_b_g_KLAYBTC = float(0.0) 
qty_asks_b_g_KLAYBTC = float(0.0) 

stepSize_KLAYBTC = 0.10000000 

def on_message_KLAYUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamklayusdt :
		symbol_a_l_KLAYUSDT = data['data']['s'] 
		price_bids_a_l_KLAYUSDT = data['data']['b'] 
		qty_bids_a_l_KLAYUSDT = data['data']['B'] 
		price_asks_a_l_KLAYUSDT = data['data']['a'] 
		qty_asks_a_l_KLAYUSDT = data['data']['A'] 

		global symbol_a_g_KLAYUSDT 
		global price_bids_a_g_KLAYUSDT 
		global qty_bids_a_g_KLAYUSDT 
		global price_asks_a_g_KLAYUSDT 
		global qty_asks_a_g_KLAYUSDT 

		symbol_a_g_KLAYUSDT = symbol_a_l_KLAYUSDT 
		price_bids_a_g_KLAYUSDT = price_bids_a_l_KLAYUSDT 
		qty_bids_a_g_KLAYUSDT = qty_bids_a_l_KLAYUSDT 
		price_asks_a_g_KLAYUSDT = price_asks_a_l_KLAYUSDT 
		qty_asks_a_g_KLAYUSDT = qty_asks_a_l_KLAYUSDT 

	if data['stream'] == streamklaybtc :
		data = json.loads(message) 

		symbol_b_l_KLAYBTC = data['data']['s'] 
		price_bids_b_l_KLAYBTC = data['data']['b'] 
		qty_bids_b_l_KLAYBTC = data['data']['B']
		price_asks_b_l_KLAYBTC = data['data']['a'] 
		qty_asks_b_l_KLAYBTC = data['data']['A'] 

		global symbol_b_g_KLAYBTC 
		global price_bids_b_g_KLAYBTC 
		global qty_bids_b_g_KLAYBTC 
		global price_asks_b_g_KLAYBTC 
		global qty_asks_b_g_KLAYBTC 

		symbol_b_g_KLAYBTC = symbol_b_l_KLAYBTC 
		price_bids_b_g_KLAYBTC = price_bids_b_l_KLAYBTC 
		qty_bids_b_g_KLAYBTC = qty_bids_b_l_KLAYBTC 
		price_asks_b_g_KLAYBTC = price_asks_b_l_KLAYBTC 
		qty_asks_b_g_KLAYBTC = qty_asks_b_l_KLAYBTC 


def loop_KLAYUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamklayusdt}/{streamklaybtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_KLAYUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_KLAYUSDT).start()

def loop_KLAYUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_KLAYUSDT != 0.0 and qty_bids_a_g_KLAYUSDT != 0.0 and price_asks_a_g_KLAYUSDT != 0.0 and qty_asks_a_g_KLAYUSDT != 0.0 and price_bids_b_g_KLAYBTC != 0.0 and qty_bids_b_g_KLAYBTC != 0.0 and price_asks_b_g_KLAYBTC != 0.0 and qty_asks_b_g_KLAYBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_KLAYBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_KLAYBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_KLAYUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_KLAYUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_KLAYBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_KLAYBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_KLAYUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_KLAYUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_KLAYBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_KLAYBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_KLAYUSDT_Trade).start() 

streamphausdt = 'phausdt@bookTicker'
streamphabtc  = 'phabtc@bookTicker'

symbol_a_g_PHAUSDT = 'PHAUSDT' 
price_bids_a_g_PHAUSDT = float(0.0) 
qty_bids_a_g_PHAUSDT = float(0.0) 
price_asks_a_g_PHAUSDT = float(0.0) 
qty_asks_a_g_PHAUSDT = float(0.0) 

stepSize_PHAUSDT = 1.00000000 

symbol_b_g_PHABTC = 'PHABTC' 
price_bids_b_g_PHABTC = float(0.0) 
qty_bids_b_g_PHABTC = float(0.0) 
price_asks_b_g_PHABTC = float(0.0) 
qty_asks_b_g_PHABTC = float(0.0) 

stepSize_PHABTC = 1.00000000 

def on_message_PHAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamphausdt :
		symbol_a_l_PHAUSDT = data['data']['s'] 
		price_bids_a_l_PHAUSDT = data['data']['b'] 
		qty_bids_a_l_PHAUSDT = data['data']['B'] 
		price_asks_a_l_PHAUSDT = data['data']['a'] 
		qty_asks_a_l_PHAUSDT = data['data']['A'] 

		global symbol_a_g_PHAUSDT 
		global price_bids_a_g_PHAUSDT 
		global qty_bids_a_g_PHAUSDT 
		global price_asks_a_g_PHAUSDT 
		global qty_asks_a_g_PHAUSDT 

		symbol_a_g_PHAUSDT = symbol_a_l_PHAUSDT 
		price_bids_a_g_PHAUSDT = price_bids_a_l_PHAUSDT 
		qty_bids_a_g_PHAUSDT = qty_bids_a_l_PHAUSDT 
		price_asks_a_g_PHAUSDT = price_asks_a_l_PHAUSDT 
		qty_asks_a_g_PHAUSDT = qty_asks_a_l_PHAUSDT 

	if data['stream'] == streamphabtc :
		data = json.loads(message) 

		symbol_b_l_PHABTC = data['data']['s'] 
		price_bids_b_l_PHABTC = data['data']['b'] 
		qty_bids_b_l_PHABTC = data['data']['B']
		price_asks_b_l_PHABTC = data['data']['a'] 
		qty_asks_b_l_PHABTC = data['data']['A'] 

		global symbol_b_g_PHABTC 
		global price_bids_b_g_PHABTC 
		global qty_bids_b_g_PHABTC 
		global price_asks_b_g_PHABTC 
		global qty_asks_b_g_PHABTC 

		symbol_b_g_PHABTC = symbol_b_l_PHABTC 
		price_bids_b_g_PHABTC = price_bids_b_l_PHABTC 
		qty_bids_b_g_PHABTC = qty_bids_b_l_PHABTC 
		price_asks_b_g_PHABTC = price_asks_b_l_PHABTC 
		qty_asks_b_g_PHABTC = qty_asks_b_l_PHABTC 


def loop_PHAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamphausdt}/{streamphabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_PHAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_PHAUSDT).start()

def loop_PHAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_PHAUSDT != 0.0 and qty_bids_a_g_PHAUSDT != 0.0 and price_asks_a_g_PHAUSDT != 0.0 and qty_asks_a_g_PHAUSDT != 0.0 and price_bids_b_g_PHABTC != 0.0 and qty_bids_b_g_PHABTC != 0.0 and price_asks_b_g_PHABTC != 0.0 and qty_asks_b_g_PHABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_PHABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_PHABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_PHAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_PHAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_PHABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_PHABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_PHAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_PHAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_PHABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_PHABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_PHAUSDT_Trade).start() 

streambondusdt = 'bondusdt@bookTicker'
streambondbtc  = 'bondbtc@bookTicker'

symbol_a_g_BONDUSDT = 'BONDUSDT' 
price_bids_a_g_BONDUSDT = float(0.0) 
qty_bids_a_g_BONDUSDT = float(0.0) 
price_asks_a_g_BONDUSDT = float(0.0) 
qty_asks_a_g_BONDUSDT = float(0.0) 

stepSize_BONDUSDT = 0.01000000 

symbol_b_g_BONDBTC = 'BONDBTC' 
price_bids_b_g_BONDBTC = float(0.0) 
qty_bids_b_g_BONDBTC = float(0.0) 
price_asks_b_g_BONDBTC = float(0.0) 
qty_asks_b_g_BONDBTC = float(0.0) 

stepSize_BONDBTC = 0.01000000 

def on_message_BONDUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambondusdt :
		symbol_a_l_BONDUSDT = data['data']['s'] 
		price_bids_a_l_BONDUSDT = data['data']['b'] 
		qty_bids_a_l_BONDUSDT = data['data']['B'] 
		price_asks_a_l_BONDUSDT = data['data']['a'] 
		qty_asks_a_l_BONDUSDT = data['data']['A'] 

		global symbol_a_g_BONDUSDT 
		global price_bids_a_g_BONDUSDT 
		global qty_bids_a_g_BONDUSDT 
		global price_asks_a_g_BONDUSDT 
		global qty_asks_a_g_BONDUSDT 

		symbol_a_g_BONDUSDT = symbol_a_l_BONDUSDT 
		price_bids_a_g_BONDUSDT = price_bids_a_l_BONDUSDT 
		qty_bids_a_g_BONDUSDT = qty_bids_a_l_BONDUSDT 
		price_asks_a_g_BONDUSDT = price_asks_a_l_BONDUSDT 
		qty_asks_a_g_BONDUSDT = qty_asks_a_l_BONDUSDT 

	if data['stream'] == streambondbtc :
		data = json.loads(message) 

		symbol_b_l_BONDBTC = data['data']['s'] 
		price_bids_b_l_BONDBTC = data['data']['b'] 
		qty_bids_b_l_BONDBTC = data['data']['B']
		price_asks_b_l_BONDBTC = data['data']['a'] 
		qty_asks_b_l_BONDBTC = data['data']['A'] 

		global symbol_b_g_BONDBTC 
		global price_bids_b_g_BONDBTC 
		global qty_bids_b_g_BONDBTC 
		global price_asks_b_g_BONDBTC 
		global qty_asks_b_g_BONDBTC 

		symbol_b_g_BONDBTC = symbol_b_l_BONDBTC 
		price_bids_b_g_BONDBTC = price_bids_b_l_BONDBTC 
		qty_bids_b_g_BONDBTC = qty_bids_b_l_BONDBTC 
		price_asks_b_g_BONDBTC = price_asks_b_l_BONDBTC 
		qty_asks_b_g_BONDBTC = qty_asks_b_l_BONDBTC 


def loop_BONDUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambondusdt}/{streambondbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BONDUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BONDUSDT).start()

def loop_BONDUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BONDUSDT != 0.0 and qty_bids_a_g_BONDUSDT != 0.0 and price_asks_a_g_BONDUSDT != 0.0 and qty_asks_a_g_BONDUSDT != 0.0 and price_bids_b_g_BONDBTC != 0.0 and qty_bids_b_g_BONDBTC != 0.0 and price_asks_b_g_BONDBTC != 0.0 and qty_asks_b_g_BONDBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BONDBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BONDBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BONDUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BONDUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BONDBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BONDBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BONDUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BONDUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BONDBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BONDBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BONDUSDT_Trade).start() 

streammlnusdt = 'mlnusdt@bookTicker'
streammlnbtc  = 'mlnbtc@bookTicker'

symbol_a_g_MLNUSDT = 'MLNUSDT' 
price_bids_a_g_MLNUSDT = float(0.0) 
qty_bids_a_g_MLNUSDT = float(0.0) 
price_asks_a_g_MLNUSDT = float(0.0) 
qty_asks_a_g_MLNUSDT = float(0.0) 

stepSize_MLNUSDT = 0.00100000 

symbol_b_g_MLNBTC = 'MLNBTC' 
price_bids_b_g_MLNBTC = float(0.0) 
qty_bids_b_g_MLNBTC = float(0.0) 
price_asks_b_g_MLNBTC = float(0.0) 
qty_asks_b_g_MLNBTC = float(0.0) 

stepSize_MLNBTC = 0.00100000 

def on_message_MLNUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streammlnusdt :
		symbol_a_l_MLNUSDT = data['data']['s'] 
		price_bids_a_l_MLNUSDT = data['data']['b'] 
		qty_bids_a_l_MLNUSDT = data['data']['B'] 
		price_asks_a_l_MLNUSDT = data['data']['a'] 
		qty_asks_a_l_MLNUSDT = data['data']['A'] 

		global symbol_a_g_MLNUSDT 
		global price_bids_a_g_MLNUSDT 
		global qty_bids_a_g_MLNUSDT 
		global price_asks_a_g_MLNUSDT 
		global qty_asks_a_g_MLNUSDT 

		symbol_a_g_MLNUSDT = symbol_a_l_MLNUSDT 
		price_bids_a_g_MLNUSDT = price_bids_a_l_MLNUSDT 
		qty_bids_a_g_MLNUSDT = qty_bids_a_l_MLNUSDT 
		price_asks_a_g_MLNUSDT = price_asks_a_l_MLNUSDT 
		qty_asks_a_g_MLNUSDT = qty_asks_a_l_MLNUSDT 

	if data['stream'] == streammlnbtc :
		data = json.loads(message) 

		symbol_b_l_MLNBTC = data['data']['s'] 
		price_bids_b_l_MLNBTC = data['data']['b'] 
		qty_bids_b_l_MLNBTC = data['data']['B']
		price_asks_b_l_MLNBTC = data['data']['a'] 
		qty_asks_b_l_MLNBTC = data['data']['A'] 

		global symbol_b_g_MLNBTC 
		global price_bids_b_g_MLNBTC 
		global qty_bids_b_g_MLNBTC 
		global price_asks_b_g_MLNBTC 
		global qty_asks_b_g_MLNBTC 

		symbol_b_g_MLNBTC = symbol_b_l_MLNBTC 
		price_bids_b_g_MLNBTC = price_bids_b_l_MLNBTC 
		qty_bids_b_g_MLNBTC = qty_bids_b_l_MLNBTC 
		price_asks_b_g_MLNBTC = price_asks_b_l_MLNBTC 
		qty_asks_b_g_MLNBTC = qty_asks_b_l_MLNBTC 


def loop_MLNUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streammlnusdt}/{streammlnbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_MLNUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_MLNUSDT).start()

def loop_MLNUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_MLNUSDT != 0.0 and qty_bids_a_g_MLNUSDT != 0.0 and price_asks_a_g_MLNUSDT != 0.0 and qty_asks_a_g_MLNUSDT != 0.0 and price_bids_b_g_MLNBTC != 0.0 and qty_bids_b_g_MLNBTC != 0.0 and price_asks_b_g_MLNBTC != 0.0 and qty_asks_b_g_MLNBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_MLNBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_MLNBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_MLNUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_MLNUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_MLNBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_MLNBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_MLNUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_MLNUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_MLNBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_MLNBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_MLNUSDT_Trade).start() 

streamc98usdt = 'c98usdt@bookTicker'
streamc98btc  = 'c98btc@bookTicker'

symbol_a_g_C98USDT = 'C98USDT' 
price_bids_a_g_C98USDT = float(0.0) 
qty_bids_a_g_C98USDT = float(0.0) 
price_asks_a_g_C98USDT = float(0.0) 
qty_asks_a_g_C98USDT = float(0.0) 

stepSize_C98USDT = 0.10000000 

symbol_b_g_C98BTC = 'C98BTC' 
price_bids_b_g_C98BTC = float(0.0) 
qty_bids_b_g_C98BTC = float(0.0) 
price_asks_b_g_C98BTC = float(0.0) 
qty_asks_b_g_C98BTC = float(0.0) 

stepSize_C98BTC = 0.10000000 

def on_message_C98USDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamc98usdt :
		symbol_a_l_C98USDT = data['data']['s'] 
		price_bids_a_l_C98USDT = data['data']['b'] 
		qty_bids_a_l_C98USDT = data['data']['B'] 
		price_asks_a_l_C98USDT = data['data']['a'] 
		qty_asks_a_l_C98USDT = data['data']['A'] 

		global symbol_a_g_C98USDT 
		global price_bids_a_g_C98USDT 
		global qty_bids_a_g_C98USDT 
		global price_asks_a_g_C98USDT 
		global qty_asks_a_g_C98USDT 

		symbol_a_g_C98USDT = symbol_a_l_C98USDT 
		price_bids_a_g_C98USDT = price_bids_a_l_C98USDT 
		qty_bids_a_g_C98USDT = qty_bids_a_l_C98USDT 
		price_asks_a_g_C98USDT = price_asks_a_l_C98USDT 
		qty_asks_a_g_C98USDT = qty_asks_a_l_C98USDT 

	if data['stream'] == streamc98btc :
		data = json.loads(message) 

		symbol_b_l_C98BTC = data['data']['s'] 
		price_bids_b_l_C98BTC = data['data']['b'] 
		qty_bids_b_l_C98BTC = data['data']['B']
		price_asks_b_l_C98BTC = data['data']['a'] 
		qty_asks_b_l_C98BTC = data['data']['A'] 

		global symbol_b_g_C98BTC 
		global price_bids_b_g_C98BTC 
		global qty_bids_b_g_C98BTC 
		global price_asks_b_g_C98BTC 
		global qty_asks_b_g_C98BTC 

		symbol_b_g_C98BTC = symbol_b_l_C98BTC 
		price_bids_b_g_C98BTC = price_bids_b_l_C98BTC 
		qty_bids_b_g_C98BTC = qty_bids_b_l_C98BTC 
		price_asks_b_g_C98BTC = price_asks_b_l_C98BTC 
		qty_asks_b_g_C98BTC = qty_asks_b_l_C98BTC 


def loop_C98USDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamc98usdt}/{streamc98btc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_C98USDT 
	) 

	ws.run_forever() 

Thread(target=loop_C98USDT).start()

def loop_C98USDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_C98USDT != 0.0 and qty_bids_a_g_C98USDT != 0.0 and price_asks_a_g_C98USDT != 0.0 and qty_asks_a_g_C98USDT != 0.0 and price_bids_b_g_C98BTC != 0.0 and qty_bids_b_g_C98BTC != 0.0 and price_asks_b_g_C98BTC != 0.0 and qty_asks_b_g_C98BTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_C98BTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_C98BTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_C98USDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_C98USDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_C98BTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_C98BTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_C98USDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_C98USDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_C98BTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_C98BTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_C98USDT_Trade).start() 

streamclvusdt = 'clvusdt@bookTicker'
streamclvbtc  = 'clvbtc@bookTicker'

symbol_a_g_CLVUSDT = 'CLVUSDT' 
price_bids_a_g_CLVUSDT = float(0.0) 
qty_bids_a_g_CLVUSDT = float(0.0) 
price_asks_a_g_CLVUSDT = float(0.0) 
qty_asks_a_g_CLVUSDT = float(0.0) 

stepSize_CLVUSDT = 0.10000000 

symbol_b_g_CLVBTC = 'CLVBTC' 
price_bids_b_g_CLVBTC = float(0.0) 
qty_bids_b_g_CLVBTC = float(0.0) 
price_asks_b_g_CLVBTC = float(0.0) 
qty_asks_b_g_CLVBTC = float(0.0) 

stepSize_CLVBTC = 0.10000000 

def on_message_CLVUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamclvusdt :
		symbol_a_l_CLVUSDT = data['data']['s'] 
		price_bids_a_l_CLVUSDT = data['data']['b'] 
		qty_bids_a_l_CLVUSDT = data['data']['B'] 
		price_asks_a_l_CLVUSDT = data['data']['a'] 
		qty_asks_a_l_CLVUSDT = data['data']['A'] 

		global symbol_a_g_CLVUSDT 
		global price_bids_a_g_CLVUSDT 
		global qty_bids_a_g_CLVUSDT 
		global price_asks_a_g_CLVUSDT 
		global qty_asks_a_g_CLVUSDT 

		symbol_a_g_CLVUSDT = symbol_a_l_CLVUSDT 
		price_bids_a_g_CLVUSDT = price_bids_a_l_CLVUSDT 
		qty_bids_a_g_CLVUSDT = qty_bids_a_l_CLVUSDT 
		price_asks_a_g_CLVUSDT = price_asks_a_l_CLVUSDT 
		qty_asks_a_g_CLVUSDT = qty_asks_a_l_CLVUSDT 

	if data['stream'] == streamclvbtc :
		data = json.loads(message) 

		symbol_b_l_CLVBTC = data['data']['s'] 
		price_bids_b_l_CLVBTC = data['data']['b'] 
		qty_bids_b_l_CLVBTC = data['data']['B']
		price_asks_b_l_CLVBTC = data['data']['a'] 
		qty_asks_b_l_CLVBTC = data['data']['A'] 

		global symbol_b_g_CLVBTC 
		global price_bids_b_g_CLVBTC 
		global qty_bids_b_g_CLVBTC 
		global price_asks_b_g_CLVBTC 
		global qty_asks_b_g_CLVBTC 

		symbol_b_g_CLVBTC = symbol_b_l_CLVBTC 
		price_bids_b_g_CLVBTC = price_bids_b_l_CLVBTC 
		qty_bids_b_g_CLVBTC = qty_bids_b_l_CLVBTC 
		price_asks_b_g_CLVBTC = price_asks_b_l_CLVBTC 
		qty_asks_b_g_CLVBTC = qty_asks_b_l_CLVBTC 


def loop_CLVUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamclvusdt}/{streamclvbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CLVUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CLVUSDT).start()

def loop_CLVUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CLVUSDT != 0.0 and qty_bids_a_g_CLVUSDT != 0.0 and price_asks_a_g_CLVUSDT != 0.0 and qty_asks_a_g_CLVUSDT != 0.0 and price_bids_b_g_CLVBTC != 0.0 and qty_bids_b_g_CLVBTC != 0.0 and price_asks_b_g_CLVBTC != 0.0 and qty_asks_b_g_CLVBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CLVBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CLVBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CLVUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CLVUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CLVBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CLVBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CLVUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CLVUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CLVBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CLVBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CLVUSDT_Trade).start() 

streamqntusdt = 'qntusdt@bookTicker'
streamqntbtc  = 'qntbtc@bookTicker'

symbol_a_g_QNTUSDT = 'QNTUSDT' 
price_bids_a_g_QNTUSDT = float(0.0) 
qty_bids_a_g_QNTUSDT = float(0.0) 
price_asks_a_g_QNTUSDT = float(0.0) 
qty_asks_a_g_QNTUSDT = float(0.0) 

stepSize_QNTUSDT = 0.00100000 

symbol_b_g_QNTBTC = 'QNTBTC' 
price_bids_b_g_QNTBTC = float(0.0) 
qty_bids_b_g_QNTBTC = float(0.0) 
price_asks_b_g_QNTBTC = float(0.0) 
qty_asks_b_g_QNTBTC = float(0.0) 

stepSize_QNTBTC = 0.00100000 

def on_message_QNTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamqntusdt :
		symbol_a_l_QNTUSDT = data['data']['s'] 
		price_bids_a_l_QNTUSDT = data['data']['b'] 
		qty_bids_a_l_QNTUSDT = data['data']['B'] 
		price_asks_a_l_QNTUSDT = data['data']['a'] 
		qty_asks_a_l_QNTUSDT = data['data']['A'] 

		global symbol_a_g_QNTUSDT 
		global price_bids_a_g_QNTUSDT 
		global qty_bids_a_g_QNTUSDT 
		global price_asks_a_g_QNTUSDT 
		global qty_asks_a_g_QNTUSDT 

		symbol_a_g_QNTUSDT = symbol_a_l_QNTUSDT 
		price_bids_a_g_QNTUSDT = price_bids_a_l_QNTUSDT 
		qty_bids_a_g_QNTUSDT = qty_bids_a_l_QNTUSDT 
		price_asks_a_g_QNTUSDT = price_asks_a_l_QNTUSDT 
		qty_asks_a_g_QNTUSDT = qty_asks_a_l_QNTUSDT 

	if data['stream'] == streamqntbtc :
		data = json.loads(message) 

		symbol_b_l_QNTBTC = data['data']['s'] 
		price_bids_b_l_QNTBTC = data['data']['b'] 
		qty_bids_b_l_QNTBTC = data['data']['B']
		price_asks_b_l_QNTBTC = data['data']['a'] 
		qty_asks_b_l_QNTBTC = data['data']['A'] 

		global symbol_b_g_QNTBTC 
		global price_bids_b_g_QNTBTC 
		global qty_bids_b_g_QNTBTC 
		global price_asks_b_g_QNTBTC 
		global qty_asks_b_g_QNTBTC 

		symbol_b_g_QNTBTC = symbol_b_l_QNTBTC 
		price_bids_b_g_QNTBTC = price_bids_b_l_QNTBTC 
		qty_bids_b_g_QNTBTC = qty_bids_b_l_QNTBTC 
		price_asks_b_g_QNTBTC = price_asks_b_l_QNTBTC 
		qty_asks_b_g_QNTBTC = qty_asks_b_l_QNTBTC 


def loop_QNTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamqntusdt}/{streamqntbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_QNTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_QNTUSDT).start()

def loop_QNTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_QNTUSDT != 0.0 and qty_bids_a_g_QNTUSDT != 0.0 and price_asks_a_g_QNTUSDT != 0.0 and qty_asks_a_g_QNTUSDT != 0.0 and price_bids_b_g_QNTBTC != 0.0 and qty_bids_b_g_QNTBTC != 0.0 and price_asks_b_g_QNTBTC != 0.0 and qty_asks_b_g_QNTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_QNTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_QNTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_QNTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_QNTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_QNTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_QNTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_QNTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_QNTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_QNTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_QNTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_QNTUSDT_Trade).start() 

streamflowusdt = 'flowusdt@bookTicker'
streamflowbtc  = 'flowbtc@bookTicker'

symbol_a_g_FLOWUSDT = 'FLOWUSDT' 
price_bids_a_g_FLOWUSDT = float(0.0) 
qty_bids_a_g_FLOWUSDT = float(0.0) 
price_asks_a_g_FLOWUSDT = float(0.0) 
qty_asks_a_g_FLOWUSDT = float(0.0) 

stepSize_FLOWUSDT = 0.01000000 

symbol_b_g_FLOWBTC = 'FLOWBTC' 
price_bids_b_g_FLOWBTC = float(0.0) 
qty_bids_b_g_FLOWBTC = float(0.0) 
price_asks_b_g_FLOWBTC = float(0.0) 
qty_asks_b_g_FLOWBTC = float(0.0) 

stepSize_FLOWBTC = 0.01000000 

def on_message_FLOWUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamflowusdt :
		symbol_a_l_FLOWUSDT = data['data']['s'] 
		price_bids_a_l_FLOWUSDT = data['data']['b'] 
		qty_bids_a_l_FLOWUSDT = data['data']['B'] 
		price_asks_a_l_FLOWUSDT = data['data']['a'] 
		qty_asks_a_l_FLOWUSDT = data['data']['A'] 

		global symbol_a_g_FLOWUSDT 
		global price_bids_a_g_FLOWUSDT 
		global qty_bids_a_g_FLOWUSDT 
		global price_asks_a_g_FLOWUSDT 
		global qty_asks_a_g_FLOWUSDT 

		symbol_a_g_FLOWUSDT = symbol_a_l_FLOWUSDT 
		price_bids_a_g_FLOWUSDT = price_bids_a_l_FLOWUSDT 
		qty_bids_a_g_FLOWUSDT = qty_bids_a_l_FLOWUSDT 
		price_asks_a_g_FLOWUSDT = price_asks_a_l_FLOWUSDT 
		qty_asks_a_g_FLOWUSDT = qty_asks_a_l_FLOWUSDT 

	if data['stream'] == streamflowbtc :
		data = json.loads(message) 

		symbol_b_l_FLOWBTC = data['data']['s'] 
		price_bids_b_l_FLOWBTC = data['data']['b'] 
		qty_bids_b_l_FLOWBTC = data['data']['B']
		price_asks_b_l_FLOWBTC = data['data']['a'] 
		qty_asks_b_l_FLOWBTC = data['data']['A'] 

		global symbol_b_g_FLOWBTC 
		global price_bids_b_g_FLOWBTC 
		global qty_bids_b_g_FLOWBTC 
		global price_asks_b_g_FLOWBTC 
		global qty_asks_b_g_FLOWBTC 

		symbol_b_g_FLOWBTC = symbol_b_l_FLOWBTC 
		price_bids_b_g_FLOWBTC = price_bids_b_l_FLOWBTC 
		qty_bids_b_g_FLOWBTC = qty_bids_b_l_FLOWBTC 
		price_asks_b_g_FLOWBTC = price_asks_b_l_FLOWBTC 
		qty_asks_b_g_FLOWBTC = qty_asks_b_l_FLOWBTC 


def loop_FLOWUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamflowusdt}/{streamflowbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FLOWUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FLOWUSDT).start()

def loop_FLOWUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FLOWUSDT != 0.0 and qty_bids_a_g_FLOWUSDT != 0.0 and price_asks_a_g_FLOWUSDT != 0.0 and qty_asks_a_g_FLOWUSDT != 0.0 and price_bids_b_g_FLOWBTC != 0.0 and qty_bids_b_g_FLOWBTC != 0.0 and price_asks_b_g_FLOWBTC != 0.0 and qty_asks_b_g_FLOWBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FLOWBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FLOWBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FLOWUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FLOWUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FLOWBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FLOWBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FLOWUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FLOWUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FLOWBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FLOWBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FLOWUSDT_Trade).start() 

streamtvkusdt = 'tvkusdt@bookTicker'
streamtvkbtc  = 'tvkbtc@bookTicker'

symbol_a_g_TVKUSDT = 'TVKUSDT' 
price_bids_a_g_TVKUSDT = float(0.0) 
qty_bids_a_g_TVKUSDT = float(0.0) 
price_asks_a_g_TVKUSDT = float(0.0) 
qty_asks_a_g_TVKUSDT = float(0.0) 

stepSize_TVKUSDT = 1.00000000 

symbol_b_g_TVKBTC = 'TVKBTC' 
price_bids_b_g_TVKBTC = float(0.0) 
qty_bids_b_g_TVKBTC = float(0.0) 
price_asks_b_g_TVKBTC = float(0.0) 
qty_asks_b_g_TVKBTC = float(0.0) 

stepSize_TVKBTC = 1.00000000 

def on_message_TVKUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamtvkusdt :
		symbol_a_l_TVKUSDT = data['data']['s'] 
		price_bids_a_l_TVKUSDT = data['data']['b'] 
		qty_bids_a_l_TVKUSDT = data['data']['B'] 
		price_asks_a_l_TVKUSDT = data['data']['a'] 
		qty_asks_a_l_TVKUSDT = data['data']['A'] 

		global symbol_a_g_TVKUSDT 
		global price_bids_a_g_TVKUSDT 
		global qty_bids_a_g_TVKUSDT 
		global price_asks_a_g_TVKUSDT 
		global qty_asks_a_g_TVKUSDT 

		symbol_a_g_TVKUSDT = symbol_a_l_TVKUSDT 
		price_bids_a_g_TVKUSDT = price_bids_a_l_TVKUSDT 
		qty_bids_a_g_TVKUSDT = qty_bids_a_l_TVKUSDT 
		price_asks_a_g_TVKUSDT = price_asks_a_l_TVKUSDT 
		qty_asks_a_g_TVKUSDT = qty_asks_a_l_TVKUSDT 

	if data['stream'] == streamtvkbtc :
		data = json.loads(message) 

		symbol_b_l_TVKBTC = data['data']['s'] 
		price_bids_b_l_TVKBTC = data['data']['b'] 
		qty_bids_b_l_TVKBTC = data['data']['B']
		price_asks_b_l_TVKBTC = data['data']['a'] 
		qty_asks_b_l_TVKBTC = data['data']['A'] 

		global symbol_b_g_TVKBTC 
		global price_bids_b_g_TVKBTC 
		global qty_bids_b_g_TVKBTC 
		global price_asks_b_g_TVKBTC 
		global qty_asks_b_g_TVKBTC 

		symbol_b_g_TVKBTC = symbol_b_l_TVKBTC 
		price_bids_b_g_TVKBTC = price_bids_b_l_TVKBTC 
		qty_bids_b_g_TVKBTC = qty_bids_b_l_TVKBTC 
		price_asks_b_g_TVKBTC = price_asks_b_l_TVKBTC 
		qty_asks_b_g_TVKBTC = qty_asks_b_l_TVKBTC 


def loop_TVKUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamtvkusdt}/{streamtvkbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_TVKUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_TVKUSDT).start()

def loop_TVKUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_TVKUSDT != 0.0 and qty_bids_a_g_TVKUSDT != 0.0 and price_asks_a_g_TVKUSDT != 0.0 and qty_asks_a_g_TVKUSDT != 0.0 and price_bids_b_g_TVKBTC != 0.0 and qty_bids_b_g_TVKBTC != 0.0 and price_asks_b_g_TVKBTC != 0.0 and qty_asks_b_g_TVKBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_TVKBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_TVKBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_TVKUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_TVKUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_TVKBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_TVKBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_TVKUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_TVKUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_TVKBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_TVKBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_TVKUSDT_Trade).start() 

streamminausdt = 'minausdt@bookTicker'
streamminabtc  = 'minabtc@bookTicker'

symbol_a_g_MINAUSDT = 'MINAUSDT' 
price_bids_a_g_MINAUSDT = float(0.0) 
qty_bids_a_g_MINAUSDT = float(0.0) 
price_asks_a_g_MINAUSDT = float(0.0) 
qty_asks_a_g_MINAUSDT = float(0.0) 

stepSize_MINAUSDT = 0.10000000 

symbol_b_g_MINABTC = 'MINABTC' 
price_bids_b_g_MINABTC = float(0.0) 
qty_bids_b_g_MINABTC = float(0.0) 
price_asks_b_g_MINABTC = float(0.0) 
qty_asks_b_g_MINABTC = float(0.0) 

stepSize_MINABTC = 0.10000000 

def on_message_MINAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamminausdt :
		symbol_a_l_MINAUSDT = data['data']['s'] 
		price_bids_a_l_MINAUSDT = data['data']['b'] 
		qty_bids_a_l_MINAUSDT = data['data']['B'] 
		price_asks_a_l_MINAUSDT = data['data']['a'] 
		qty_asks_a_l_MINAUSDT = data['data']['A'] 

		global symbol_a_g_MINAUSDT 
		global price_bids_a_g_MINAUSDT 
		global qty_bids_a_g_MINAUSDT 
		global price_asks_a_g_MINAUSDT 
		global qty_asks_a_g_MINAUSDT 

		symbol_a_g_MINAUSDT = symbol_a_l_MINAUSDT 
		price_bids_a_g_MINAUSDT = price_bids_a_l_MINAUSDT 
		qty_bids_a_g_MINAUSDT = qty_bids_a_l_MINAUSDT 
		price_asks_a_g_MINAUSDT = price_asks_a_l_MINAUSDT 
		qty_asks_a_g_MINAUSDT = qty_asks_a_l_MINAUSDT 

	if data['stream'] == streamminabtc :
		data = json.loads(message) 

		symbol_b_l_MINABTC = data['data']['s'] 
		price_bids_b_l_MINABTC = data['data']['b'] 
		qty_bids_b_l_MINABTC = data['data']['B']
		price_asks_b_l_MINABTC = data['data']['a'] 
		qty_asks_b_l_MINABTC = data['data']['A'] 

		global symbol_b_g_MINABTC 
		global price_bids_b_g_MINABTC 
		global qty_bids_b_g_MINABTC 
		global price_asks_b_g_MINABTC 
		global qty_asks_b_g_MINABTC 

		symbol_b_g_MINABTC = symbol_b_l_MINABTC 
		price_bids_b_g_MINABTC = price_bids_b_l_MINABTC 
		qty_bids_b_g_MINABTC = qty_bids_b_l_MINABTC 
		price_asks_b_g_MINABTC = price_asks_b_l_MINABTC 
		qty_asks_b_g_MINABTC = qty_asks_b_l_MINABTC 


def loop_MINAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamminausdt}/{streamminabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_MINAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_MINAUSDT).start()

def loop_MINAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_MINAUSDT != 0.0 and qty_bids_a_g_MINAUSDT != 0.0 and price_asks_a_g_MINAUSDT != 0.0 and qty_asks_a_g_MINAUSDT != 0.0 and price_bids_b_g_MINABTC != 0.0 and qty_bids_b_g_MINABTC != 0.0 and price_asks_b_g_MINABTC != 0.0 and qty_asks_b_g_MINABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_MINABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_MINABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_MINAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_MINAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_MINABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_MINABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_MINAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_MINAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_MINABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_MINABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_MINAUSDT_Trade).start() 

streamfarmusdt = 'farmusdt@bookTicker'
streamfarmbtc  = 'farmbtc@bookTicker'

symbol_a_g_FARMUSDT = 'FARMUSDT' 
price_bids_a_g_FARMUSDT = float(0.0) 
qty_bids_a_g_FARMUSDT = float(0.0) 
price_asks_a_g_FARMUSDT = float(0.0) 
qty_asks_a_g_FARMUSDT = float(0.0) 

stepSize_FARMUSDT = 0.00100000 

symbol_b_g_FARMBTC = 'FARMBTC' 
price_bids_b_g_FARMBTC = float(0.0) 
qty_bids_b_g_FARMBTC = float(0.0) 
price_asks_b_g_FARMBTC = float(0.0) 
qty_asks_b_g_FARMBTC = float(0.0) 

stepSize_FARMBTC = 0.00100000 

def on_message_FARMUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamfarmusdt :
		symbol_a_l_FARMUSDT = data['data']['s'] 
		price_bids_a_l_FARMUSDT = data['data']['b'] 
		qty_bids_a_l_FARMUSDT = data['data']['B'] 
		price_asks_a_l_FARMUSDT = data['data']['a'] 
		qty_asks_a_l_FARMUSDT = data['data']['A'] 

		global symbol_a_g_FARMUSDT 
		global price_bids_a_g_FARMUSDT 
		global qty_bids_a_g_FARMUSDT 
		global price_asks_a_g_FARMUSDT 
		global qty_asks_a_g_FARMUSDT 

		symbol_a_g_FARMUSDT = symbol_a_l_FARMUSDT 
		price_bids_a_g_FARMUSDT = price_bids_a_l_FARMUSDT 
		qty_bids_a_g_FARMUSDT = qty_bids_a_l_FARMUSDT 
		price_asks_a_g_FARMUSDT = price_asks_a_l_FARMUSDT 
		qty_asks_a_g_FARMUSDT = qty_asks_a_l_FARMUSDT 

	if data['stream'] == streamfarmbtc :
		data = json.loads(message) 

		symbol_b_l_FARMBTC = data['data']['s'] 
		price_bids_b_l_FARMBTC = data['data']['b'] 
		qty_bids_b_l_FARMBTC = data['data']['B']
		price_asks_b_l_FARMBTC = data['data']['a'] 
		qty_asks_b_l_FARMBTC = data['data']['A'] 

		global symbol_b_g_FARMBTC 
		global price_bids_b_g_FARMBTC 
		global qty_bids_b_g_FARMBTC 
		global price_asks_b_g_FARMBTC 
		global qty_asks_b_g_FARMBTC 

		symbol_b_g_FARMBTC = symbol_b_l_FARMBTC 
		price_bids_b_g_FARMBTC = price_bids_b_l_FARMBTC 
		qty_bids_b_g_FARMBTC = qty_bids_b_l_FARMBTC 
		price_asks_b_g_FARMBTC = price_asks_b_l_FARMBTC 
		qty_asks_b_g_FARMBTC = qty_asks_b_l_FARMBTC 


def loop_FARMUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamfarmusdt}/{streamfarmbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FARMUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FARMUSDT).start()

def loop_FARMUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FARMUSDT != 0.0 and qty_bids_a_g_FARMUSDT != 0.0 and price_asks_a_g_FARMUSDT != 0.0 and qty_asks_a_g_FARMUSDT != 0.0 and price_bids_b_g_FARMBTC != 0.0 and qty_bids_b_g_FARMBTC != 0.0 and price_asks_b_g_FARMBTC != 0.0 and qty_asks_b_g_FARMBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FARMBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FARMBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FARMUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FARMUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FARMBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FARMBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FARMUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FARMUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FARMBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FARMBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FARMUSDT_Trade).start() 

streamalpacausdt = 'alpacausdt@bookTicker'
streamalpacabtc  = 'alpacabtc@bookTicker'

symbol_a_g_ALPACAUSDT = 'ALPACAUSDT' 
price_bids_a_g_ALPACAUSDT = float(0.0) 
qty_bids_a_g_ALPACAUSDT = float(0.0) 
price_asks_a_g_ALPACAUSDT = float(0.0) 
qty_asks_a_g_ALPACAUSDT = float(0.0) 

stepSize_ALPACAUSDT = 0.10000000 

symbol_b_g_ALPACABTC = 'ALPACABTC' 
price_bids_b_g_ALPACABTC = float(0.0) 
qty_bids_b_g_ALPACABTC = float(0.0) 
price_asks_b_g_ALPACABTC = float(0.0) 
qty_asks_b_g_ALPACABTC = float(0.0) 

stepSize_ALPACABTC = 0.10000000 

def on_message_ALPACAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamalpacausdt :
		symbol_a_l_ALPACAUSDT = data['data']['s'] 
		price_bids_a_l_ALPACAUSDT = data['data']['b'] 
		qty_bids_a_l_ALPACAUSDT = data['data']['B'] 
		price_asks_a_l_ALPACAUSDT = data['data']['a'] 
		qty_asks_a_l_ALPACAUSDT = data['data']['A'] 

		global symbol_a_g_ALPACAUSDT 
		global price_bids_a_g_ALPACAUSDT 
		global qty_bids_a_g_ALPACAUSDT 
		global price_asks_a_g_ALPACAUSDT 
		global qty_asks_a_g_ALPACAUSDT 

		symbol_a_g_ALPACAUSDT = symbol_a_l_ALPACAUSDT 
		price_bids_a_g_ALPACAUSDT = price_bids_a_l_ALPACAUSDT 
		qty_bids_a_g_ALPACAUSDT = qty_bids_a_l_ALPACAUSDT 
		price_asks_a_g_ALPACAUSDT = price_asks_a_l_ALPACAUSDT 
		qty_asks_a_g_ALPACAUSDT = qty_asks_a_l_ALPACAUSDT 

	if data['stream'] == streamalpacabtc :
		data = json.loads(message) 

		symbol_b_l_ALPACABTC = data['data']['s'] 
		price_bids_b_l_ALPACABTC = data['data']['b'] 
		qty_bids_b_l_ALPACABTC = data['data']['B']
		price_asks_b_l_ALPACABTC = data['data']['a'] 
		qty_asks_b_l_ALPACABTC = data['data']['A'] 

		global symbol_b_g_ALPACABTC 
		global price_bids_b_g_ALPACABTC 
		global qty_bids_b_g_ALPACABTC 
		global price_asks_b_g_ALPACABTC 
		global qty_asks_b_g_ALPACABTC 

		symbol_b_g_ALPACABTC = symbol_b_l_ALPACABTC 
		price_bids_b_g_ALPACABTC = price_bids_b_l_ALPACABTC 
		qty_bids_b_g_ALPACABTC = qty_bids_b_l_ALPACABTC 
		price_asks_b_g_ALPACABTC = price_asks_b_l_ALPACABTC 
		qty_asks_b_g_ALPACABTC = qty_asks_b_l_ALPACABTC 


def loop_ALPACAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamalpacausdt}/{streamalpacabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ALPACAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ALPACAUSDT).start()

def loop_ALPACAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ALPACAUSDT != 0.0 and qty_bids_a_g_ALPACAUSDT != 0.0 and price_asks_a_g_ALPACAUSDT != 0.0 and qty_asks_a_g_ALPACAUSDT != 0.0 and price_bids_b_g_ALPACABTC != 0.0 and qty_bids_b_g_ALPACABTC != 0.0 and price_asks_b_g_ALPACABTC != 0.0 and qty_asks_b_g_ALPACABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ALPACABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ALPACABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ALPACAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ALPACAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ALPACABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ALPACABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ALPACAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ALPACAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ALPACABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ALPACABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ALPACAUSDT_Trade).start() 

streamquickusdt = 'quickusdt@bookTicker'
streamquickbtc  = 'quickbtc@bookTicker'

symbol_a_g_QUICKUSDT = 'QUICKUSDT' 
price_bids_a_g_QUICKUSDT = float(0.0) 
qty_bids_a_g_QUICKUSDT = float(0.0) 
price_asks_a_g_QUICKUSDT = float(0.0) 
qty_asks_a_g_QUICKUSDT = float(0.0) 

stepSize_QUICKUSDT = 0.00100000 

symbol_b_g_QUICKBTC = 'QUICKBTC' 
price_bids_b_g_QUICKBTC = float(0.0) 
qty_bids_b_g_QUICKBTC = float(0.0) 
price_asks_b_g_QUICKBTC = float(0.0) 
qty_asks_b_g_QUICKBTC = float(0.0) 

stepSize_QUICKBTC = 0.00100000 

def on_message_QUICKUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamquickusdt :
		symbol_a_l_QUICKUSDT = data['data']['s'] 
		price_bids_a_l_QUICKUSDT = data['data']['b'] 
		qty_bids_a_l_QUICKUSDT = data['data']['B'] 
		price_asks_a_l_QUICKUSDT = data['data']['a'] 
		qty_asks_a_l_QUICKUSDT = data['data']['A'] 

		global symbol_a_g_QUICKUSDT 
		global price_bids_a_g_QUICKUSDT 
		global qty_bids_a_g_QUICKUSDT 
		global price_asks_a_g_QUICKUSDT 
		global qty_asks_a_g_QUICKUSDT 

		symbol_a_g_QUICKUSDT = symbol_a_l_QUICKUSDT 
		price_bids_a_g_QUICKUSDT = price_bids_a_l_QUICKUSDT 
		qty_bids_a_g_QUICKUSDT = qty_bids_a_l_QUICKUSDT 
		price_asks_a_g_QUICKUSDT = price_asks_a_l_QUICKUSDT 
		qty_asks_a_g_QUICKUSDT = qty_asks_a_l_QUICKUSDT 

	if data['stream'] == streamquickbtc :
		data = json.loads(message) 

		symbol_b_l_QUICKBTC = data['data']['s'] 
		price_bids_b_l_QUICKBTC = data['data']['b'] 
		qty_bids_b_l_QUICKBTC = data['data']['B']
		price_asks_b_l_QUICKBTC = data['data']['a'] 
		qty_asks_b_l_QUICKBTC = data['data']['A'] 

		global symbol_b_g_QUICKBTC 
		global price_bids_b_g_QUICKBTC 
		global qty_bids_b_g_QUICKBTC 
		global price_asks_b_g_QUICKBTC 
		global qty_asks_b_g_QUICKBTC 

		symbol_b_g_QUICKBTC = symbol_b_l_QUICKBTC 
		price_bids_b_g_QUICKBTC = price_bids_b_l_QUICKBTC 
		qty_bids_b_g_QUICKBTC = qty_bids_b_l_QUICKBTC 
		price_asks_b_g_QUICKBTC = price_asks_b_l_QUICKBTC 
		qty_asks_b_g_QUICKBTC = qty_asks_b_l_QUICKBTC 


def loop_QUICKUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamquickusdt}/{streamquickbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_QUICKUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_QUICKUSDT).start()

def loop_QUICKUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_QUICKUSDT != 0.0 and qty_bids_a_g_QUICKUSDT != 0.0 and price_asks_a_g_QUICKUSDT != 0.0 and qty_asks_a_g_QUICKUSDT != 0.0 and price_bids_b_g_QUICKBTC != 0.0 and qty_bids_b_g_QUICKBTC != 0.0 and price_asks_b_g_QUICKBTC != 0.0 and qty_asks_b_g_QUICKBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_QUICKBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_QUICKBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_QUICKUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_QUICKUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_QUICKBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_QUICKBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_QUICKUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_QUICKUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_QUICKBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_QUICKBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_QUICKUSDT_Trade).start() 

streammboxusdt = 'mboxusdt@bookTicker'
streammboxbtc  = 'mboxbtc@bookTicker'

symbol_a_g_MBOXUSDT = 'MBOXUSDT' 
price_bids_a_g_MBOXUSDT = float(0.0) 
qty_bids_a_g_MBOXUSDT = float(0.0) 
price_asks_a_g_MBOXUSDT = float(0.0) 
qty_asks_a_g_MBOXUSDT = float(0.0) 

stepSize_MBOXUSDT = 0.10000000 

symbol_b_g_MBOXBTC = 'MBOXBTC' 
price_bids_b_g_MBOXBTC = float(0.0) 
qty_bids_b_g_MBOXBTC = float(0.0) 
price_asks_b_g_MBOXBTC = float(0.0) 
qty_asks_b_g_MBOXBTC = float(0.0) 

stepSize_MBOXBTC = 0.10000000 

def on_message_MBOXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streammboxusdt :
		symbol_a_l_MBOXUSDT = data['data']['s'] 
		price_bids_a_l_MBOXUSDT = data['data']['b'] 
		qty_bids_a_l_MBOXUSDT = data['data']['B'] 
		price_asks_a_l_MBOXUSDT = data['data']['a'] 
		qty_asks_a_l_MBOXUSDT = data['data']['A'] 

		global symbol_a_g_MBOXUSDT 
		global price_bids_a_g_MBOXUSDT 
		global qty_bids_a_g_MBOXUSDT 
		global price_asks_a_g_MBOXUSDT 
		global qty_asks_a_g_MBOXUSDT 

		symbol_a_g_MBOXUSDT = symbol_a_l_MBOXUSDT 
		price_bids_a_g_MBOXUSDT = price_bids_a_l_MBOXUSDT 
		qty_bids_a_g_MBOXUSDT = qty_bids_a_l_MBOXUSDT 
		price_asks_a_g_MBOXUSDT = price_asks_a_l_MBOXUSDT 
		qty_asks_a_g_MBOXUSDT = qty_asks_a_l_MBOXUSDT 

	if data['stream'] == streammboxbtc :
		data = json.loads(message) 

		symbol_b_l_MBOXBTC = data['data']['s'] 
		price_bids_b_l_MBOXBTC = data['data']['b'] 
		qty_bids_b_l_MBOXBTC = data['data']['B']
		price_asks_b_l_MBOXBTC = data['data']['a'] 
		qty_asks_b_l_MBOXBTC = data['data']['A'] 

		global symbol_b_g_MBOXBTC 
		global price_bids_b_g_MBOXBTC 
		global qty_bids_b_g_MBOXBTC 
		global price_asks_b_g_MBOXBTC 
		global qty_asks_b_g_MBOXBTC 

		symbol_b_g_MBOXBTC = symbol_b_l_MBOXBTC 
		price_bids_b_g_MBOXBTC = price_bids_b_l_MBOXBTC 
		qty_bids_b_g_MBOXBTC = qty_bids_b_l_MBOXBTC 
		price_asks_b_g_MBOXBTC = price_asks_b_l_MBOXBTC 
		qty_asks_b_g_MBOXBTC = qty_asks_b_l_MBOXBTC 


def loop_MBOXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streammboxusdt}/{streammboxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_MBOXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_MBOXUSDT).start()

def loop_MBOXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_MBOXUSDT != 0.0 and qty_bids_a_g_MBOXUSDT != 0.0 and price_asks_a_g_MBOXUSDT != 0.0 and qty_asks_a_g_MBOXUSDT != 0.0 and price_bids_b_g_MBOXBTC != 0.0 and qty_bids_b_g_MBOXBTC != 0.0 and price_asks_b_g_MBOXBTC != 0.0 and qty_asks_b_g_MBOXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_MBOXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_MBOXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_MBOXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_MBOXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_MBOXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_MBOXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_MBOXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_MBOXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_MBOXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_MBOXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_MBOXUSDT_Trade).start() 

streamforusdt = 'forusdt@bookTicker'
streamforbtc  = 'forbtc@bookTicker'

symbol_a_g_FORUSDT = 'FORUSDT' 
price_bids_a_g_FORUSDT = float(0.0) 
qty_bids_a_g_FORUSDT = float(0.0) 
price_asks_a_g_FORUSDT = float(0.0) 
qty_asks_a_g_FORUSDT = float(0.0) 

stepSize_FORUSDT = 1.00000000 

symbol_b_g_FORBTC = 'FORBTC' 
price_bids_b_g_FORBTC = float(0.0) 
qty_bids_b_g_FORBTC = float(0.0) 
price_asks_b_g_FORBTC = float(0.0) 
qty_asks_b_g_FORBTC = float(0.0) 

stepSize_FORBTC = 1.00000000 

def on_message_FORUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamforusdt :
		symbol_a_l_FORUSDT = data['data']['s'] 
		price_bids_a_l_FORUSDT = data['data']['b'] 
		qty_bids_a_l_FORUSDT = data['data']['B'] 
		price_asks_a_l_FORUSDT = data['data']['a'] 
		qty_asks_a_l_FORUSDT = data['data']['A'] 

		global symbol_a_g_FORUSDT 
		global price_bids_a_g_FORUSDT 
		global qty_bids_a_g_FORUSDT 
		global price_asks_a_g_FORUSDT 
		global qty_asks_a_g_FORUSDT 

		symbol_a_g_FORUSDT = symbol_a_l_FORUSDT 
		price_bids_a_g_FORUSDT = price_bids_a_l_FORUSDT 
		qty_bids_a_g_FORUSDT = qty_bids_a_l_FORUSDT 
		price_asks_a_g_FORUSDT = price_asks_a_l_FORUSDT 
		qty_asks_a_g_FORUSDT = qty_asks_a_l_FORUSDT 

	if data['stream'] == streamforbtc :
		data = json.loads(message) 

		symbol_b_l_FORBTC = data['data']['s'] 
		price_bids_b_l_FORBTC = data['data']['b'] 
		qty_bids_b_l_FORBTC = data['data']['B']
		price_asks_b_l_FORBTC = data['data']['a'] 
		qty_asks_b_l_FORBTC = data['data']['A'] 

		global symbol_b_g_FORBTC 
		global price_bids_b_g_FORBTC 
		global qty_bids_b_g_FORBTC 
		global price_asks_b_g_FORBTC 
		global qty_asks_b_g_FORBTC 

		symbol_b_g_FORBTC = symbol_b_l_FORBTC 
		price_bids_b_g_FORBTC = price_bids_b_l_FORBTC 
		qty_bids_b_g_FORBTC = qty_bids_b_l_FORBTC 
		price_asks_b_g_FORBTC = price_asks_b_l_FORBTC 
		qty_asks_b_g_FORBTC = qty_asks_b_l_FORBTC 


def loop_FORUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamforusdt}/{streamforbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FORUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FORUSDT).start()

def loop_FORUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FORUSDT != 0.0 and qty_bids_a_g_FORUSDT != 0.0 and price_asks_a_g_FORUSDT != 0.0 and qty_asks_a_g_FORUSDT != 0.0 and price_bids_b_g_FORBTC != 0.0 and qty_bids_b_g_FORBTC != 0.0 and price_asks_b_g_FORBTC != 0.0 and qty_asks_b_g_FORBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FORBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FORBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FORUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FORUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FORBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FORBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FORUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FORUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FORBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FORBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FORUSDT_Trade).start() 

streamrequsdt = 'requsdt@bookTicker'
streamreqbtc  = 'reqbtc@bookTicker'

symbol_a_g_REQUSDT = 'REQUSDT' 
price_bids_a_g_REQUSDT = float(0.0) 
qty_bids_a_g_REQUSDT = float(0.0) 
price_asks_a_g_REQUSDT = float(0.0) 
qty_asks_a_g_REQUSDT = float(0.0) 

stepSize_REQUSDT = 1.00000000 

symbol_b_g_REQBTC = 'REQBTC' 
price_bids_b_g_REQBTC = float(0.0) 
qty_bids_b_g_REQBTC = float(0.0) 
price_asks_b_g_REQBTC = float(0.0) 
qty_asks_b_g_REQBTC = float(0.0) 

stepSize_REQBTC = 1.00000000 

def on_message_REQUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamrequsdt :
		symbol_a_l_REQUSDT = data['data']['s'] 
		price_bids_a_l_REQUSDT = data['data']['b'] 
		qty_bids_a_l_REQUSDT = data['data']['B'] 
		price_asks_a_l_REQUSDT = data['data']['a'] 
		qty_asks_a_l_REQUSDT = data['data']['A'] 

		global symbol_a_g_REQUSDT 
		global price_bids_a_g_REQUSDT 
		global qty_bids_a_g_REQUSDT 
		global price_asks_a_g_REQUSDT 
		global qty_asks_a_g_REQUSDT 

		symbol_a_g_REQUSDT = symbol_a_l_REQUSDT 
		price_bids_a_g_REQUSDT = price_bids_a_l_REQUSDT 
		qty_bids_a_g_REQUSDT = qty_bids_a_l_REQUSDT 
		price_asks_a_g_REQUSDT = price_asks_a_l_REQUSDT 
		qty_asks_a_g_REQUSDT = qty_asks_a_l_REQUSDT 

	if data['stream'] == streamreqbtc :
		data = json.loads(message) 

		symbol_b_l_REQBTC = data['data']['s'] 
		price_bids_b_l_REQBTC = data['data']['b'] 
		qty_bids_b_l_REQBTC = data['data']['B']
		price_asks_b_l_REQBTC = data['data']['a'] 
		qty_asks_b_l_REQBTC = data['data']['A'] 

		global symbol_b_g_REQBTC 
		global price_bids_b_g_REQBTC 
		global qty_bids_b_g_REQBTC 
		global price_asks_b_g_REQBTC 
		global qty_asks_b_g_REQBTC 

		symbol_b_g_REQBTC = symbol_b_l_REQBTC 
		price_bids_b_g_REQBTC = price_bids_b_l_REQBTC 
		qty_bids_b_g_REQBTC = qty_bids_b_l_REQBTC 
		price_asks_b_g_REQBTC = price_asks_b_l_REQBTC 
		qty_asks_b_g_REQBTC = qty_asks_b_l_REQBTC 


def loop_REQUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamrequsdt}/{streamreqbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_REQUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_REQUSDT).start()

def loop_REQUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_REQUSDT != 0.0 and qty_bids_a_g_REQUSDT != 0.0 and price_asks_a_g_REQUSDT != 0.0 and qty_asks_a_g_REQUSDT != 0.0 and price_bids_b_g_REQBTC != 0.0 and qty_bids_b_g_REQBTC != 0.0 and price_asks_b_g_REQBTC != 0.0 and qty_asks_b_g_REQBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_REQBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_REQBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_REQUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_REQUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_REQBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_REQBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_REQUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_REQUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_REQBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_REQBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_REQUSDT_Trade).start() 

streamwaxpusdt = 'waxpusdt@bookTicker'
streamwaxpbtc  = 'waxpbtc@bookTicker'

symbol_a_g_WAXPUSDT = 'WAXPUSDT' 
price_bids_a_g_WAXPUSDT = float(0.0) 
qty_bids_a_g_WAXPUSDT = float(0.0) 
price_asks_a_g_WAXPUSDT = float(0.0) 
qty_asks_a_g_WAXPUSDT = float(0.0) 

stepSize_WAXPUSDT = 1.00000000 

symbol_b_g_WAXPBTC = 'WAXPBTC' 
price_bids_b_g_WAXPBTC = float(0.0) 
qty_bids_b_g_WAXPBTC = float(0.0) 
price_asks_b_g_WAXPBTC = float(0.0) 
qty_asks_b_g_WAXPBTC = float(0.0) 

stepSize_WAXPBTC = 1.00000000 

def on_message_WAXPUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamwaxpusdt :
		symbol_a_l_WAXPUSDT = data['data']['s'] 
		price_bids_a_l_WAXPUSDT = data['data']['b'] 
		qty_bids_a_l_WAXPUSDT = data['data']['B'] 
		price_asks_a_l_WAXPUSDT = data['data']['a'] 
		qty_asks_a_l_WAXPUSDT = data['data']['A'] 

		global symbol_a_g_WAXPUSDT 
		global price_bids_a_g_WAXPUSDT 
		global qty_bids_a_g_WAXPUSDT 
		global price_asks_a_g_WAXPUSDT 
		global qty_asks_a_g_WAXPUSDT 

		symbol_a_g_WAXPUSDT = symbol_a_l_WAXPUSDT 
		price_bids_a_g_WAXPUSDT = price_bids_a_l_WAXPUSDT 
		qty_bids_a_g_WAXPUSDT = qty_bids_a_l_WAXPUSDT 
		price_asks_a_g_WAXPUSDT = price_asks_a_l_WAXPUSDT 
		qty_asks_a_g_WAXPUSDT = qty_asks_a_l_WAXPUSDT 

	if data['stream'] == streamwaxpbtc :
		data = json.loads(message) 

		symbol_b_l_WAXPBTC = data['data']['s'] 
		price_bids_b_l_WAXPBTC = data['data']['b'] 
		qty_bids_b_l_WAXPBTC = data['data']['B']
		price_asks_b_l_WAXPBTC = data['data']['a'] 
		qty_asks_b_l_WAXPBTC = data['data']['A'] 

		global symbol_b_g_WAXPBTC 
		global price_bids_b_g_WAXPBTC 
		global qty_bids_b_g_WAXPBTC 
		global price_asks_b_g_WAXPBTC 
		global qty_asks_b_g_WAXPBTC 

		symbol_b_g_WAXPBTC = symbol_b_l_WAXPBTC 
		price_bids_b_g_WAXPBTC = price_bids_b_l_WAXPBTC 
		qty_bids_b_g_WAXPBTC = qty_bids_b_l_WAXPBTC 
		price_asks_b_g_WAXPBTC = price_asks_b_l_WAXPBTC 
		qty_asks_b_g_WAXPBTC = qty_asks_b_l_WAXPBTC 


def loop_WAXPUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamwaxpusdt}/{streamwaxpbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_WAXPUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_WAXPUSDT).start()

def loop_WAXPUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_WAXPUSDT != 0.0 and qty_bids_a_g_WAXPUSDT != 0.0 and price_asks_a_g_WAXPUSDT != 0.0 and qty_asks_a_g_WAXPUSDT != 0.0 and price_bids_b_g_WAXPBTC != 0.0 and qty_bids_b_g_WAXPBTC != 0.0 and price_asks_b_g_WAXPBTC != 0.0 and qty_asks_b_g_WAXPBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_WAXPBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_WAXPBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_WAXPUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_WAXPUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_WAXPBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_WAXPBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_WAXPUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_WAXPUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_WAXPBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_WAXPBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_WAXPUSDT_Trade).start() 

streamelfusdt = 'elfusdt@bookTicker'
streamelfbtc  = 'elfbtc@bookTicker'

symbol_a_g_ELFUSDT = 'ELFUSDT' 
price_bids_a_g_ELFUSDT = float(0.0) 
qty_bids_a_g_ELFUSDT = float(0.0) 
price_asks_a_g_ELFUSDT = float(0.0) 
qty_asks_a_g_ELFUSDT = float(0.0) 

stepSize_ELFUSDT = 0.10000000 

symbol_b_g_ELFBTC = 'ELFBTC' 
price_bids_b_g_ELFBTC = float(0.0) 
qty_bids_b_g_ELFBTC = float(0.0) 
price_asks_b_g_ELFBTC = float(0.0) 
qty_asks_b_g_ELFBTC = float(0.0) 

stepSize_ELFBTC = 1.00000000 

def on_message_ELFUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamelfusdt :
		symbol_a_l_ELFUSDT = data['data']['s'] 
		price_bids_a_l_ELFUSDT = data['data']['b'] 
		qty_bids_a_l_ELFUSDT = data['data']['B'] 
		price_asks_a_l_ELFUSDT = data['data']['a'] 
		qty_asks_a_l_ELFUSDT = data['data']['A'] 

		global symbol_a_g_ELFUSDT 
		global price_bids_a_g_ELFUSDT 
		global qty_bids_a_g_ELFUSDT 
		global price_asks_a_g_ELFUSDT 
		global qty_asks_a_g_ELFUSDT 

		symbol_a_g_ELFUSDT = symbol_a_l_ELFUSDT 
		price_bids_a_g_ELFUSDT = price_bids_a_l_ELFUSDT 
		qty_bids_a_g_ELFUSDT = qty_bids_a_l_ELFUSDT 
		price_asks_a_g_ELFUSDT = price_asks_a_l_ELFUSDT 
		qty_asks_a_g_ELFUSDT = qty_asks_a_l_ELFUSDT 

	if data['stream'] == streamelfbtc :
		data = json.loads(message) 

		symbol_b_l_ELFBTC = data['data']['s'] 
		price_bids_b_l_ELFBTC = data['data']['b'] 
		qty_bids_b_l_ELFBTC = data['data']['B']
		price_asks_b_l_ELFBTC = data['data']['a'] 
		qty_asks_b_l_ELFBTC = data['data']['A'] 

		global symbol_b_g_ELFBTC 
		global price_bids_b_g_ELFBTC 
		global qty_bids_b_g_ELFBTC 
		global price_asks_b_g_ELFBTC 
		global qty_asks_b_g_ELFBTC 

		symbol_b_g_ELFBTC = symbol_b_l_ELFBTC 
		price_bids_b_g_ELFBTC = price_bids_b_l_ELFBTC 
		qty_bids_b_g_ELFBTC = qty_bids_b_l_ELFBTC 
		price_asks_b_g_ELFBTC = price_asks_b_l_ELFBTC 
		qty_asks_b_g_ELFBTC = qty_asks_b_l_ELFBTC 


def loop_ELFUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamelfusdt}/{streamelfbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ELFUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ELFUSDT).start()

def loop_ELFUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ELFUSDT != 0.0 and qty_bids_a_g_ELFUSDT != 0.0 and price_asks_a_g_ELFUSDT != 0.0 and qty_asks_a_g_ELFUSDT != 0.0 and price_bids_b_g_ELFBTC != 0.0 and qty_bids_b_g_ELFBTC != 0.0 and price_asks_b_g_ELFBTC != 0.0 and qty_asks_b_g_ELFBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ELFBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ELFBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ELFUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ELFUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ELFBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ELFBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ELFUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ELFUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ELFBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ELFBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ELFUSDT_Trade).start() 

streamdydxusdt = 'dydxusdt@bookTicker'
streamdydxbtc  = 'dydxbtc@bookTicker'

symbol_a_g_DYDXUSDT = 'DYDXUSDT' 
price_bids_a_g_DYDXUSDT = float(0.0) 
qty_bids_a_g_DYDXUSDT = float(0.0) 
price_asks_a_g_DYDXUSDT = float(0.0) 
qty_asks_a_g_DYDXUSDT = float(0.0) 

stepSize_DYDXUSDT = 0.01000000 

symbol_b_g_DYDXBTC = 'DYDXBTC' 
price_bids_b_g_DYDXBTC = float(0.0) 
qty_bids_b_g_DYDXBTC = float(0.0) 
price_asks_b_g_DYDXBTC = float(0.0) 
qty_asks_b_g_DYDXBTC = float(0.0) 

stepSize_DYDXBTC = 0.01000000 

def on_message_DYDXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamdydxusdt :
		symbol_a_l_DYDXUSDT = data['data']['s'] 
		price_bids_a_l_DYDXUSDT = data['data']['b'] 
		qty_bids_a_l_DYDXUSDT = data['data']['B'] 
		price_asks_a_l_DYDXUSDT = data['data']['a'] 
		qty_asks_a_l_DYDXUSDT = data['data']['A'] 

		global symbol_a_g_DYDXUSDT 
		global price_bids_a_g_DYDXUSDT 
		global qty_bids_a_g_DYDXUSDT 
		global price_asks_a_g_DYDXUSDT 
		global qty_asks_a_g_DYDXUSDT 

		symbol_a_g_DYDXUSDT = symbol_a_l_DYDXUSDT 
		price_bids_a_g_DYDXUSDT = price_bids_a_l_DYDXUSDT 
		qty_bids_a_g_DYDXUSDT = qty_bids_a_l_DYDXUSDT 
		price_asks_a_g_DYDXUSDT = price_asks_a_l_DYDXUSDT 
		qty_asks_a_g_DYDXUSDT = qty_asks_a_l_DYDXUSDT 

	if data['stream'] == streamdydxbtc :
		data = json.loads(message) 

		symbol_b_l_DYDXBTC = data['data']['s'] 
		price_bids_b_l_DYDXBTC = data['data']['b'] 
		qty_bids_b_l_DYDXBTC = data['data']['B']
		price_asks_b_l_DYDXBTC = data['data']['a'] 
		qty_asks_b_l_DYDXBTC = data['data']['A'] 

		global symbol_b_g_DYDXBTC 
		global price_bids_b_g_DYDXBTC 
		global qty_bids_b_g_DYDXBTC 
		global price_asks_b_g_DYDXBTC 
		global qty_asks_b_g_DYDXBTC 

		symbol_b_g_DYDXBTC = symbol_b_l_DYDXBTC 
		price_bids_b_g_DYDXBTC = price_bids_b_l_DYDXBTC 
		qty_bids_b_g_DYDXBTC = qty_bids_b_l_DYDXBTC 
		price_asks_b_g_DYDXBTC = price_asks_b_l_DYDXBTC 
		qty_asks_b_g_DYDXBTC = qty_asks_b_l_DYDXBTC 


def loop_DYDXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamdydxusdt}/{streamdydxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DYDXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DYDXUSDT).start()

def loop_DYDXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DYDXUSDT != 0.0 and qty_bids_a_g_DYDXUSDT != 0.0 and price_asks_a_g_DYDXUSDT != 0.0 and qty_asks_a_g_DYDXUSDT != 0.0 and price_bids_b_g_DYDXBTC != 0.0 and qty_bids_b_g_DYDXBTC != 0.0 and price_asks_b_g_DYDXBTC != 0.0 and qty_asks_b_g_DYDXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DYDXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DYDXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DYDXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DYDXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DYDXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DYDXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DYDXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DYDXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DYDXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DYDXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DYDXUSDT_Trade).start() 

streamidexusdt = 'idexusdt@bookTicker'
streamidexbtc  = 'idexbtc@bookTicker'

symbol_a_g_IDEXUSDT = 'IDEXUSDT' 
price_bids_a_g_IDEXUSDT = float(0.0) 
qty_bids_a_g_IDEXUSDT = float(0.0) 
price_asks_a_g_IDEXUSDT = float(0.0) 
qty_asks_a_g_IDEXUSDT = float(0.0) 

stepSize_IDEXUSDT = 0.10000000 

symbol_b_g_IDEXBTC = 'IDEXBTC' 
price_bids_b_g_IDEXBTC = float(0.0) 
qty_bids_b_g_IDEXBTC = float(0.0) 
price_asks_b_g_IDEXBTC = float(0.0) 
qty_asks_b_g_IDEXBTC = float(0.0) 

stepSize_IDEXBTC = 1.00000000 

def on_message_IDEXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamidexusdt :
		symbol_a_l_IDEXUSDT = data['data']['s'] 
		price_bids_a_l_IDEXUSDT = data['data']['b'] 
		qty_bids_a_l_IDEXUSDT = data['data']['B'] 
		price_asks_a_l_IDEXUSDT = data['data']['a'] 
		qty_asks_a_l_IDEXUSDT = data['data']['A'] 

		global symbol_a_g_IDEXUSDT 
		global price_bids_a_g_IDEXUSDT 
		global qty_bids_a_g_IDEXUSDT 
		global price_asks_a_g_IDEXUSDT 
		global qty_asks_a_g_IDEXUSDT 

		symbol_a_g_IDEXUSDT = symbol_a_l_IDEXUSDT 
		price_bids_a_g_IDEXUSDT = price_bids_a_l_IDEXUSDT 
		qty_bids_a_g_IDEXUSDT = qty_bids_a_l_IDEXUSDT 
		price_asks_a_g_IDEXUSDT = price_asks_a_l_IDEXUSDT 
		qty_asks_a_g_IDEXUSDT = qty_asks_a_l_IDEXUSDT 

	if data['stream'] == streamidexbtc :
		data = json.loads(message) 

		symbol_b_l_IDEXBTC = data['data']['s'] 
		price_bids_b_l_IDEXBTC = data['data']['b'] 
		qty_bids_b_l_IDEXBTC = data['data']['B']
		price_asks_b_l_IDEXBTC = data['data']['a'] 
		qty_asks_b_l_IDEXBTC = data['data']['A'] 

		global symbol_b_g_IDEXBTC 
		global price_bids_b_g_IDEXBTC 
		global qty_bids_b_g_IDEXBTC 
		global price_asks_b_g_IDEXBTC 
		global qty_asks_b_g_IDEXBTC 

		symbol_b_g_IDEXBTC = symbol_b_l_IDEXBTC 
		price_bids_b_g_IDEXBTC = price_bids_b_l_IDEXBTC 
		qty_bids_b_g_IDEXBTC = qty_bids_b_l_IDEXBTC 
		price_asks_b_g_IDEXBTC = price_asks_b_l_IDEXBTC 
		qty_asks_b_g_IDEXBTC = qty_asks_b_l_IDEXBTC 


def loop_IDEXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamidexusdt}/{streamidexbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_IDEXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_IDEXUSDT).start()

def loop_IDEXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_IDEXUSDT != 0.0 and qty_bids_a_g_IDEXUSDT != 0.0 and price_asks_a_g_IDEXUSDT != 0.0 and qty_asks_a_g_IDEXUSDT != 0.0 and price_bids_b_g_IDEXBTC != 0.0 and qty_bids_b_g_IDEXBTC != 0.0 and price_asks_b_g_IDEXBTC != 0.0 and qty_asks_b_g_IDEXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_IDEXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_IDEXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_IDEXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_IDEXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_IDEXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_IDEXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_IDEXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_IDEXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_IDEXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_IDEXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_IDEXUSDT_Trade).start() 

streamvidtusdt = 'vidtusdt@bookTicker'
streamvidtbtc  = 'vidtbtc@bookTicker'

symbol_a_g_VIDTUSDT = 'VIDTUSDT' 
price_bids_a_g_VIDTUSDT = float(0.0) 
qty_bids_a_g_VIDTUSDT = float(0.0) 
price_asks_a_g_VIDTUSDT = float(0.0) 
qty_asks_a_g_VIDTUSDT = float(0.0) 

stepSize_VIDTUSDT = 1.00000000 

symbol_b_g_VIDTBTC = 'VIDTBTC' 
price_bids_b_g_VIDTBTC = float(0.0) 
qty_bids_b_g_VIDTBTC = float(0.0) 
price_asks_b_g_VIDTBTC = float(0.0) 
qty_asks_b_g_VIDTBTC = float(0.0) 

stepSize_VIDTBTC = 1.00000000 

def on_message_VIDTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamvidtusdt :
		symbol_a_l_VIDTUSDT = data['data']['s'] 
		price_bids_a_l_VIDTUSDT = data['data']['b'] 
		qty_bids_a_l_VIDTUSDT = data['data']['B'] 
		price_asks_a_l_VIDTUSDT = data['data']['a'] 
		qty_asks_a_l_VIDTUSDT = data['data']['A'] 

		global symbol_a_g_VIDTUSDT 
		global price_bids_a_g_VIDTUSDT 
		global qty_bids_a_g_VIDTUSDT 
		global price_asks_a_g_VIDTUSDT 
		global qty_asks_a_g_VIDTUSDT 

		symbol_a_g_VIDTUSDT = symbol_a_l_VIDTUSDT 
		price_bids_a_g_VIDTUSDT = price_bids_a_l_VIDTUSDT 
		qty_bids_a_g_VIDTUSDT = qty_bids_a_l_VIDTUSDT 
		price_asks_a_g_VIDTUSDT = price_asks_a_l_VIDTUSDT 
		qty_asks_a_g_VIDTUSDT = qty_asks_a_l_VIDTUSDT 

	if data['stream'] == streamvidtbtc :
		data = json.loads(message) 

		symbol_b_l_VIDTBTC = data['data']['s'] 
		price_bids_b_l_VIDTBTC = data['data']['b'] 
		qty_bids_b_l_VIDTBTC = data['data']['B']
		price_asks_b_l_VIDTBTC = data['data']['a'] 
		qty_asks_b_l_VIDTBTC = data['data']['A'] 

		global symbol_b_g_VIDTBTC 
		global price_bids_b_g_VIDTBTC 
		global qty_bids_b_g_VIDTBTC 
		global price_asks_b_g_VIDTBTC 
		global qty_asks_b_g_VIDTBTC 

		symbol_b_g_VIDTBTC = symbol_b_l_VIDTBTC 
		price_bids_b_g_VIDTBTC = price_bids_b_l_VIDTBTC 
		qty_bids_b_g_VIDTBTC = qty_bids_b_l_VIDTBTC 
		price_asks_b_g_VIDTBTC = price_asks_b_l_VIDTBTC 
		qty_asks_b_g_VIDTBTC = qty_asks_b_l_VIDTBTC 


def loop_VIDTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamvidtusdt}/{streamvidtbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_VIDTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_VIDTUSDT).start()

def loop_VIDTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_VIDTUSDT != 0.0 and qty_bids_a_g_VIDTUSDT != 0.0 and price_asks_a_g_VIDTUSDT != 0.0 and qty_asks_a_g_VIDTUSDT != 0.0 and price_bids_b_g_VIDTBTC != 0.0 and qty_bids_b_g_VIDTBTC != 0.0 and price_asks_b_g_VIDTBTC != 0.0 and qty_asks_b_g_VIDTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_VIDTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_VIDTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_VIDTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_VIDTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_VIDTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_VIDTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_VIDTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_VIDTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_VIDTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_VIDTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_VIDTUSDT_Trade).start() 

streamgalausdt = 'galausdt@bookTicker'
streamgalabtc  = 'galabtc@bookTicker'

symbol_a_g_GALAUSDT = 'GALAUSDT' 
price_bids_a_g_GALAUSDT = float(0.0) 
qty_bids_a_g_GALAUSDT = float(0.0) 
price_asks_a_g_GALAUSDT = float(0.0) 
qty_asks_a_g_GALAUSDT = float(0.0) 

stepSize_GALAUSDT = 1.00000000 

symbol_b_g_GALABTC = 'GALABTC' 
price_bids_b_g_GALABTC = float(0.0) 
qty_bids_b_g_GALABTC = float(0.0) 
price_asks_b_g_GALABTC = float(0.0) 
qty_asks_b_g_GALABTC = float(0.0) 

stepSize_GALABTC = 1.00000000 

def on_message_GALAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamgalausdt :
		symbol_a_l_GALAUSDT = data['data']['s'] 
		price_bids_a_l_GALAUSDT = data['data']['b'] 
		qty_bids_a_l_GALAUSDT = data['data']['B'] 
		price_asks_a_l_GALAUSDT = data['data']['a'] 
		qty_asks_a_l_GALAUSDT = data['data']['A'] 

		global symbol_a_g_GALAUSDT 
		global price_bids_a_g_GALAUSDT 
		global qty_bids_a_g_GALAUSDT 
		global price_asks_a_g_GALAUSDT 
		global qty_asks_a_g_GALAUSDT 

		symbol_a_g_GALAUSDT = symbol_a_l_GALAUSDT 
		price_bids_a_g_GALAUSDT = price_bids_a_l_GALAUSDT 
		qty_bids_a_g_GALAUSDT = qty_bids_a_l_GALAUSDT 
		price_asks_a_g_GALAUSDT = price_asks_a_l_GALAUSDT 
		qty_asks_a_g_GALAUSDT = qty_asks_a_l_GALAUSDT 

	if data['stream'] == streamgalabtc :
		data = json.loads(message) 

		symbol_b_l_GALABTC = data['data']['s'] 
		price_bids_b_l_GALABTC = data['data']['b'] 
		qty_bids_b_l_GALABTC = data['data']['B']
		price_asks_b_l_GALABTC = data['data']['a'] 
		qty_asks_b_l_GALABTC = data['data']['A'] 

		global symbol_b_g_GALABTC 
		global price_bids_b_g_GALABTC 
		global qty_bids_b_g_GALABTC 
		global price_asks_b_g_GALABTC 
		global qty_asks_b_g_GALABTC 

		symbol_b_g_GALABTC = symbol_b_l_GALABTC 
		price_bids_b_g_GALABTC = price_bids_b_l_GALABTC 
		qty_bids_b_g_GALABTC = qty_bids_b_l_GALABTC 
		price_asks_b_g_GALABTC = price_asks_b_l_GALABTC 
		qty_asks_b_g_GALABTC = qty_asks_b_l_GALABTC 


def loop_GALAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamgalausdt}/{streamgalabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_GALAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_GALAUSDT).start()

def loop_GALAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_GALAUSDT != 0.0 and qty_bids_a_g_GALAUSDT != 0.0 and price_asks_a_g_GALAUSDT != 0.0 and qty_asks_a_g_GALAUSDT != 0.0 and price_bids_b_g_GALABTC != 0.0 and qty_bids_b_g_GALABTC != 0.0 and price_asks_b_g_GALABTC != 0.0 and qty_asks_b_g_GALABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_GALABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_GALABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_GALAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_GALAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_GALABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_GALABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_GALAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_GALAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_GALABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_GALABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_GALAUSDT_Trade).start() 

streamilvusdt = 'ilvusdt@bookTicker'
streamilvbtc  = 'ilvbtc@bookTicker'

symbol_a_g_ILVUSDT = 'ILVUSDT' 
price_bids_a_g_ILVUSDT = float(0.0) 
qty_bids_a_g_ILVUSDT = float(0.0) 
price_asks_a_g_ILVUSDT = float(0.0) 
qty_asks_a_g_ILVUSDT = float(0.0) 

stepSize_ILVUSDT = 0.00100000 

symbol_b_g_ILVBTC = 'ILVBTC' 
price_bids_b_g_ILVBTC = float(0.0) 
qty_bids_b_g_ILVBTC = float(0.0) 
price_asks_b_g_ILVBTC = float(0.0) 
qty_asks_b_g_ILVBTC = float(0.0) 

stepSize_ILVBTC = 0.00100000 

def on_message_ILVUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamilvusdt :
		symbol_a_l_ILVUSDT = data['data']['s'] 
		price_bids_a_l_ILVUSDT = data['data']['b'] 
		qty_bids_a_l_ILVUSDT = data['data']['B'] 
		price_asks_a_l_ILVUSDT = data['data']['a'] 
		qty_asks_a_l_ILVUSDT = data['data']['A'] 

		global symbol_a_g_ILVUSDT 
		global price_bids_a_g_ILVUSDT 
		global qty_bids_a_g_ILVUSDT 
		global price_asks_a_g_ILVUSDT 
		global qty_asks_a_g_ILVUSDT 

		symbol_a_g_ILVUSDT = symbol_a_l_ILVUSDT 
		price_bids_a_g_ILVUSDT = price_bids_a_l_ILVUSDT 
		qty_bids_a_g_ILVUSDT = qty_bids_a_l_ILVUSDT 
		price_asks_a_g_ILVUSDT = price_asks_a_l_ILVUSDT 
		qty_asks_a_g_ILVUSDT = qty_asks_a_l_ILVUSDT 

	if data['stream'] == streamilvbtc :
		data = json.loads(message) 

		symbol_b_l_ILVBTC = data['data']['s'] 
		price_bids_b_l_ILVBTC = data['data']['b'] 
		qty_bids_b_l_ILVBTC = data['data']['B']
		price_asks_b_l_ILVBTC = data['data']['a'] 
		qty_asks_b_l_ILVBTC = data['data']['A'] 

		global symbol_b_g_ILVBTC 
		global price_bids_b_g_ILVBTC 
		global qty_bids_b_g_ILVBTC 
		global price_asks_b_g_ILVBTC 
		global qty_asks_b_g_ILVBTC 

		symbol_b_g_ILVBTC = symbol_b_l_ILVBTC 
		price_bids_b_g_ILVBTC = price_bids_b_l_ILVBTC 
		qty_bids_b_g_ILVBTC = qty_bids_b_l_ILVBTC 
		price_asks_b_g_ILVBTC = price_asks_b_l_ILVBTC 
		qty_asks_b_g_ILVBTC = qty_asks_b_l_ILVBTC 


def loop_ILVUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamilvusdt}/{streamilvbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ILVUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ILVUSDT).start()

def loop_ILVUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ILVUSDT != 0.0 and qty_bids_a_g_ILVUSDT != 0.0 and price_asks_a_g_ILVUSDT != 0.0 and qty_asks_a_g_ILVUSDT != 0.0 and price_bids_b_g_ILVBTC != 0.0 and qty_bids_b_g_ILVBTC != 0.0 and price_asks_b_g_ILVBTC != 0.0 and qty_asks_b_g_ILVBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ILVBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ILVBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ILVUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ILVUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ILVBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ILVBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ILVUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ILVUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ILVBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ILVBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ILVUSDT_Trade).start() 

streamyggusdt = 'yggusdt@bookTicker'
streamyggbtc  = 'yggbtc@bookTicker'

symbol_a_g_YGGUSDT = 'YGGUSDT' 
price_bids_a_g_YGGUSDT = float(0.0) 
qty_bids_a_g_YGGUSDT = float(0.0) 
price_asks_a_g_YGGUSDT = float(0.0) 
qty_asks_a_g_YGGUSDT = float(0.0) 

stepSize_YGGUSDT = 0.10000000 

symbol_b_g_YGGBTC = 'YGGBTC' 
price_bids_b_g_YGGBTC = float(0.0) 
qty_bids_b_g_YGGBTC = float(0.0) 
price_asks_b_g_YGGBTC = float(0.0) 
qty_asks_b_g_YGGBTC = float(0.0) 

stepSize_YGGBTC = 0.10000000 

def on_message_YGGUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamyggusdt :
		symbol_a_l_YGGUSDT = data['data']['s'] 
		price_bids_a_l_YGGUSDT = data['data']['b'] 
		qty_bids_a_l_YGGUSDT = data['data']['B'] 
		price_asks_a_l_YGGUSDT = data['data']['a'] 
		qty_asks_a_l_YGGUSDT = data['data']['A'] 

		global symbol_a_g_YGGUSDT 
		global price_bids_a_g_YGGUSDT 
		global qty_bids_a_g_YGGUSDT 
		global price_asks_a_g_YGGUSDT 
		global qty_asks_a_g_YGGUSDT 

		symbol_a_g_YGGUSDT = symbol_a_l_YGGUSDT 
		price_bids_a_g_YGGUSDT = price_bids_a_l_YGGUSDT 
		qty_bids_a_g_YGGUSDT = qty_bids_a_l_YGGUSDT 
		price_asks_a_g_YGGUSDT = price_asks_a_l_YGGUSDT 
		qty_asks_a_g_YGGUSDT = qty_asks_a_l_YGGUSDT 

	if data['stream'] == streamyggbtc :
		data = json.loads(message) 

		symbol_b_l_YGGBTC = data['data']['s'] 
		price_bids_b_l_YGGBTC = data['data']['b'] 
		qty_bids_b_l_YGGBTC = data['data']['B']
		price_asks_b_l_YGGBTC = data['data']['a'] 
		qty_asks_b_l_YGGBTC = data['data']['A'] 

		global symbol_b_g_YGGBTC 
		global price_bids_b_g_YGGBTC 
		global qty_bids_b_g_YGGBTC 
		global price_asks_b_g_YGGBTC 
		global qty_asks_b_g_YGGBTC 

		symbol_b_g_YGGBTC = symbol_b_l_YGGBTC 
		price_bids_b_g_YGGBTC = price_bids_b_l_YGGBTC 
		qty_bids_b_g_YGGBTC = qty_bids_b_l_YGGBTC 
		price_asks_b_g_YGGBTC = price_asks_b_l_YGGBTC 
		qty_asks_b_g_YGGBTC = qty_asks_b_l_YGGBTC 


def loop_YGGUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamyggusdt}/{streamyggbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_YGGUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_YGGUSDT).start()

def loop_YGGUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_YGGUSDT != 0.0 and qty_bids_a_g_YGGUSDT != 0.0 and price_asks_a_g_YGGUSDT != 0.0 and qty_asks_a_g_YGGUSDT != 0.0 and price_bids_b_g_YGGBTC != 0.0 and qty_bids_b_g_YGGBTC != 0.0 and price_asks_b_g_YGGBTC != 0.0 and qty_asks_b_g_YGGBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_YGGBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_YGGBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_YGGUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_YGGUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_YGGBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_YGGBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_YGGUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_YGGUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_YGGBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_YGGBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_YGGUSDT_Trade).start() 

streamsysusdt = 'sysusdt@bookTicker'
streamsysbtc  = 'sysbtc@bookTicker'

symbol_a_g_SYSUSDT = 'SYSUSDT' 
price_bids_a_g_SYSUSDT = float(0.0) 
qty_bids_a_g_SYSUSDT = float(0.0) 
price_asks_a_g_SYSUSDT = float(0.0) 
qty_asks_a_g_SYSUSDT = float(0.0) 

stepSize_SYSUSDT = 1.00000000 

symbol_b_g_SYSBTC = 'SYSBTC' 
price_bids_b_g_SYSBTC = float(0.0) 
qty_bids_b_g_SYSBTC = float(0.0) 
price_asks_b_g_SYSBTC = float(0.0) 
qty_asks_b_g_SYSBTC = float(0.0) 

stepSize_SYSBTC = 1.00000000 

def on_message_SYSUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamsysusdt :
		symbol_a_l_SYSUSDT = data['data']['s'] 
		price_bids_a_l_SYSUSDT = data['data']['b'] 
		qty_bids_a_l_SYSUSDT = data['data']['B'] 
		price_asks_a_l_SYSUSDT = data['data']['a'] 
		qty_asks_a_l_SYSUSDT = data['data']['A'] 

		global symbol_a_g_SYSUSDT 
		global price_bids_a_g_SYSUSDT 
		global qty_bids_a_g_SYSUSDT 
		global price_asks_a_g_SYSUSDT 
		global qty_asks_a_g_SYSUSDT 

		symbol_a_g_SYSUSDT = symbol_a_l_SYSUSDT 
		price_bids_a_g_SYSUSDT = price_bids_a_l_SYSUSDT 
		qty_bids_a_g_SYSUSDT = qty_bids_a_l_SYSUSDT 
		price_asks_a_g_SYSUSDT = price_asks_a_l_SYSUSDT 
		qty_asks_a_g_SYSUSDT = qty_asks_a_l_SYSUSDT 

	if data['stream'] == streamsysbtc :
		data = json.loads(message) 

		symbol_b_l_SYSBTC = data['data']['s'] 
		price_bids_b_l_SYSBTC = data['data']['b'] 
		qty_bids_b_l_SYSBTC = data['data']['B']
		price_asks_b_l_SYSBTC = data['data']['a'] 
		qty_asks_b_l_SYSBTC = data['data']['A'] 

		global symbol_b_g_SYSBTC 
		global price_bids_b_g_SYSBTC 
		global qty_bids_b_g_SYSBTC 
		global price_asks_b_g_SYSBTC 
		global qty_asks_b_g_SYSBTC 

		symbol_b_g_SYSBTC = symbol_b_l_SYSBTC 
		price_bids_b_g_SYSBTC = price_bids_b_l_SYSBTC 
		qty_bids_b_g_SYSBTC = qty_bids_b_l_SYSBTC 
		price_asks_b_g_SYSBTC = price_asks_b_l_SYSBTC 
		qty_asks_b_g_SYSBTC = qty_asks_b_l_SYSBTC 


def loop_SYSUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamsysusdt}/{streamsysbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_SYSUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_SYSUSDT).start()

def loop_SYSUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_SYSUSDT != 0.0 and qty_bids_a_g_SYSUSDT != 0.0 and price_asks_a_g_SYSUSDT != 0.0 and qty_asks_a_g_SYSUSDT != 0.0 and price_bids_b_g_SYSBTC != 0.0 and qty_bids_b_g_SYSBTC != 0.0 and price_asks_b_g_SYSBTC != 0.0 and qty_asks_b_g_SYSBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_SYSBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_SYSBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_SYSUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_SYSUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_SYSBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_SYSBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_SYSUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_SYSUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_SYSBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_SYSBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_SYSUSDT_Trade).start() 

streamfidausdt = 'fidausdt@bookTicker'
streamfidabtc  = 'fidabtc@bookTicker'

symbol_a_g_FIDAUSDT = 'FIDAUSDT' 
price_bids_a_g_FIDAUSDT = float(0.0) 
qty_bids_a_g_FIDAUSDT = float(0.0) 
price_asks_a_g_FIDAUSDT = float(0.0) 
qty_asks_a_g_FIDAUSDT = float(0.0) 

stepSize_FIDAUSDT = 0.10000000 

symbol_b_g_FIDABTC = 'FIDABTC' 
price_bids_b_g_FIDABTC = float(0.0) 
qty_bids_b_g_FIDABTC = float(0.0) 
price_asks_b_g_FIDABTC = float(0.0) 
qty_asks_b_g_FIDABTC = float(0.0) 

stepSize_FIDABTC = 0.10000000 

def on_message_FIDAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamfidausdt :
		symbol_a_l_FIDAUSDT = data['data']['s'] 
		price_bids_a_l_FIDAUSDT = data['data']['b'] 
		qty_bids_a_l_FIDAUSDT = data['data']['B'] 
		price_asks_a_l_FIDAUSDT = data['data']['a'] 
		qty_asks_a_l_FIDAUSDT = data['data']['A'] 

		global symbol_a_g_FIDAUSDT 
		global price_bids_a_g_FIDAUSDT 
		global qty_bids_a_g_FIDAUSDT 
		global price_asks_a_g_FIDAUSDT 
		global qty_asks_a_g_FIDAUSDT 

		symbol_a_g_FIDAUSDT = symbol_a_l_FIDAUSDT 
		price_bids_a_g_FIDAUSDT = price_bids_a_l_FIDAUSDT 
		qty_bids_a_g_FIDAUSDT = qty_bids_a_l_FIDAUSDT 
		price_asks_a_g_FIDAUSDT = price_asks_a_l_FIDAUSDT 
		qty_asks_a_g_FIDAUSDT = qty_asks_a_l_FIDAUSDT 

	if data['stream'] == streamfidabtc :
		data = json.loads(message) 

		symbol_b_l_FIDABTC = data['data']['s'] 
		price_bids_b_l_FIDABTC = data['data']['b'] 
		qty_bids_b_l_FIDABTC = data['data']['B']
		price_asks_b_l_FIDABTC = data['data']['a'] 
		qty_asks_b_l_FIDABTC = data['data']['A'] 

		global symbol_b_g_FIDABTC 
		global price_bids_b_g_FIDABTC 
		global qty_bids_b_g_FIDABTC 
		global price_asks_b_g_FIDABTC 
		global qty_asks_b_g_FIDABTC 

		symbol_b_g_FIDABTC = symbol_b_l_FIDABTC 
		price_bids_b_g_FIDABTC = price_bids_b_l_FIDABTC 
		qty_bids_b_g_FIDABTC = qty_bids_b_l_FIDABTC 
		price_asks_b_g_FIDABTC = price_asks_b_l_FIDABTC 
		qty_asks_b_g_FIDABTC = qty_asks_b_l_FIDABTC 


def loop_FIDAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamfidausdt}/{streamfidabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FIDAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FIDAUSDT).start()

def loop_FIDAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FIDAUSDT != 0.0 and qty_bids_a_g_FIDAUSDT != 0.0 and price_asks_a_g_FIDAUSDT != 0.0 and qty_asks_a_g_FIDAUSDT != 0.0 and price_bids_b_g_FIDABTC != 0.0 and qty_bids_b_g_FIDABTC != 0.0 and price_asks_b_g_FIDABTC != 0.0 and qty_asks_b_g_FIDABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FIDABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FIDABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FIDAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FIDAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FIDABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FIDABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FIDAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FIDAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FIDABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FIDABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FIDAUSDT_Trade).start() 

streamfrontusdt = 'frontusdt@bookTicker'
streamfrontbtc  = 'frontbtc@bookTicker'

symbol_a_g_FRONTUSDT = 'FRONTUSDT' 
price_bids_a_g_FRONTUSDT = float(0.0) 
qty_bids_a_g_FRONTUSDT = float(0.0) 
price_asks_a_g_FRONTUSDT = float(0.0) 
qty_asks_a_g_FRONTUSDT = float(0.0) 

stepSize_FRONTUSDT = 1.00000000 

symbol_b_g_FRONTBTC = 'FRONTBTC' 
price_bids_b_g_FRONTBTC = float(0.0) 
qty_bids_b_g_FRONTBTC = float(0.0) 
price_asks_b_g_FRONTBTC = float(0.0) 
qty_asks_b_g_FRONTBTC = float(0.0) 

stepSize_FRONTBTC = 1.00000000 

def on_message_FRONTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamfrontusdt :
		symbol_a_l_FRONTUSDT = data['data']['s'] 
		price_bids_a_l_FRONTUSDT = data['data']['b'] 
		qty_bids_a_l_FRONTUSDT = data['data']['B'] 
		price_asks_a_l_FRONTUSDT = data['data']['a'] 
		qty_asks_a_l_FRONTUSDT = data['data']['A'] 

		global symbol_a_g_FRONTUSDT 
		global price_bids_a_g_FRONTUSDT 
		global qty_bids_a_g_FRONTUSDT 
		global price_asks_a_g_FRONTUSDT 
		global qty_asks_a_g_FRONTUSDT 

		symbol_a_g_FRONTUSDT = symbol_a_l_FRONTUSDT 
		price_bids_a_g_FRONTUSDT = price_bids_a_l_FRONTUSDT 
		qty_bids_a_g_FRONTUSDT = qty_bids_a_l_FRONTUSDT 
		price_asks_a_g_FRONTUSDT = price_asks_a_l_FRONTUSDT 
		qty_asks_a_g_FRONTUSDT = qty_asks_a_l_FRONTUSDT 

	if data['stream'] == streamfrontbtc :
		data = json.loads(message) 

		symbol_b_l_FRONTBTC = data['data']['s'] 
		price_bids_b_l_FRONTBTC = data['data']['b'] 
		qty_bids_b_l_FRONTBTC = data['data']['B']
		price_asks_b_l_FRONTBTC = data['data']['a'] 
		qty_asks_b_l_FRONTBTC = data['data']['A'] 

		global symbol_b_g_FRONTBTC 
		global price_bids_b_g_FRONTBTC 
		global qty_bids_b_g_FRONTBTC 
		global price_asks_b_g_FRONTBTC 
		global qty_asks_b_g_FRONTBTC 

		symbol_b_g_FRONTBTC = symbol_b_l_FRONTBTC 
		price_bids_b_g_FRONTBTC = price_bids_b_l_FRONTBTC 
		qty_bids_b_g_FRONTBTC = qty_bids_b_l_FRONTBTC 
		price_asks_b_g_FRONTBTC = price_asks_b_l_FRONTBTC 
		qty_asks_b_g_FRONTBTC = qty_asks_b_l_FRONTBTC 


def loop_FRONTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamfrontusdt}/{streamfrontbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FRONTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FRONTUSDT).start()

def loop_FRONTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FRONTUSDT != 0.0 and qty_bids_a_g_FRONTUSDT != 0.0 and price_asks_a_g_FRONTUSDT != 0.0 and qty_asks_a_g_FRONTUSDT != 0.0 and price_bids_b_g_FRONTBTC != 0.0 and qty_bids_b_g_FRONTBTC != 0.0 and price_asks_b_g_FRONTBTC != 0.0 and qty_asks_b_g_FRONTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FRONTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FRONTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FRONTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FRONTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FRONTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FRONTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FRONTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FRONTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FRONTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FRONTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FRONTUSDT_Trade).start() 

streamagldusdt = 'agldusdt@bookTicker'
streamagldbtc  = 'agldbtc@bookTicker'

symbol_a_g_AGLDUSDT = 'AGLDUSDT' 
price_bids_a_g_AGLDUSDT = float(0.0) 
qty_bids_a_g_AGLDUSDT = float(0.0) 
price_asks_a_g_AGLDUSDT = float(0.0) 
qty_asks_a_g_AGLDUSDT = float(0.0) 

stepSize_AGLDUSDT = 0.10000000 

symbol_b_g_AGLDBTC = 'AGLDBTC' 
price_bids_b_g_AGLDBTC = float(0.0) 
qty_bids_b_g_AGLDBTC = float(0.0) 
price_asks_b_g_AGLDBTC = float(0.0) 
qty_asks_b_g_AGLDBTC = float(0.0) 

stepSize_AGLDBTC = 0.10000000 

def on_message_AGLDUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamagldusdt :
		symbol_a_l_AGLDUSDT = data['data']['s'] 
		price_bids_a_l_AGLDUSDT = data['data']['b'] 
		qty_bids_a_l_AGLDUSDT = data['data']['B'] 
		price_asks_a_l_AGLDUSDT = data['data']['a'] 
		qty_asks_a_l_AGLDUSDT = data['data']['A'] 

		global symbol_a_g_AGLDUSDT 
		global price_bids_a_g_AGLDUSDT 
		global qty_bids_a_g_AGLDUSDT 
		global price_asks_a_g_AGLDUSDT 
		global qty_asks_a_g_AGLDUSDT 

		symbol_a_g_AGLDUSDT = symbol_a_l_AGLDUSDT 
		price_bids_a_g_AGLDUSDT = price_bids_a_l_AGLDUSDT 
		qty_bids_a_g_AGLDUSDT = qty_bids_a_l_AGLDUSDT 
		price_asks_a_g_AGLDUSDT = price_asks_a_l_AGLDUSDT 
		qty_asks_a_g_AGLDUSDT = qty_asks_a_l_AGLDUSDT 

	if data['stream'] == streamagldbtc :
		data = json.loads(message) 

		symbol_b_l_AGLDBTC = data['data']['s'] 
		price_bids_b_l_AGLDBTC = data['data']['b'] 
		qty_bids_b_l_AGLDBTC = data['data']['B']
		price_asks_b_l_AGLDBTC = data['data']['a'] 
		qty_asks_b_l_AGLDBTC = data['data']['A'] 

		global symbol_b_g_AGLDBTC 
		global price_bids_b_g_AGLDBTC 
		global qty_bids_b_g_AGLDBTC 
		global price_asks_b_g_AGLDBTC 
		global qty_asks_b_g_AGLDBTC 

		symbol_b_g_AGLDBTC = symbol_b_l_AGLDBTC 
		price_bids_b_g_AGLDBTC = price_bids_b_l_AGLDBTC 
		qty_bids_b_g_AGLDBTC = qty_bids_b_l_AGLDBTC 
		price_asks_b_g_AGLDBTC = price_asks_b_l_AGLDBTC 
		qty_asks_b_g_AGLDBTC = qty_asks_b_l_AGLDBTC 


def loop_AGLDUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamagldusdt}/{streamagldbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_AGLDUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_AGLDUSDT).start()

def loop_AGLDUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_AGLDUSDT != 0.0 and qty_bids_a_g_AGLDUSDT != 0.0 and price_asks_a_g_AGLDUSDT != 0.0 and qty_asks_a_g_AGLDUSDT != 0.0 and price_bids_b_g_AGLDBTC != 0.0 and qty_bids_b_g_AGLDBTC != 0.0 and price_asks_b_g_AGLDBTC != 0.0 and qty_asks_b_g_AGLDBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_AGLDBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_AGLDBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_AGLDUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_AGLDUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_AGLDBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_AGLDBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_AGLDUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_AGLDUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_AGLDBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_AGLDBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_AGLDUSDT_Trade).start() 

streamradusdt = 'radusdt@bookTicker'
streamradbtc  = 'radbtc@bookTicker'

symbol_a_g_RADUSDT = 'RADUSDT' 
price_bids_a_g_RADUSDT = float(0.0) 
qty_bids_a_g_RADUSDT = float(0.0) 
price_asks_a_g_RADUSDT = float(0.0) 
qty_asks_a_g_RADUSDT = float(0.0) 

stepSize_RADUSDT = 0.10000000 

symbol_b_g_RADBTC = 'RADBTC' 
price_bids_b_g_RADBTC = float(0.0) 
qty_bids_b_g_RADBTC = float(0.0) 
price_asks_b_g_RADBTC = float(0.0) 
qty_asks_b_g_RADBTC = float(0.0) 

stepSize_RADBTC = 0.10000000 

def on_message_RADUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamradusdt :
		symbol_a_l_RADUSDT = data['data']['s'] 
		price_bids_a_l_RADUSDT = data['data']['b'] 
		qty_bids_a_l_RADUSDT = data['data']['B'] 
		price_asks_a_l_RADUSDT = data['data']['a'] 
		qty_asks_a_l_RADUSDT = data['data']['A'] 

		global symbol_a_g_RADUSDT 
		global price_bids_a_g_RADUSDT 
		global qty_bids_a_g_RADUSDT 
		global price_asks_a_g_RADUSDT 
		global qty_asks_a_g_RADUSDT 

		symbol_a_g_RADUSDT = symbol_a_l_RADUSDT 
		price_bids_a_g_RADUSDT = price_bids_a_l_RADUSDT 
		qty_bids_a_g_RADUSDT = qty_bids_a_l_RADUSDT 
		price_asks_a_g_RADUSDT = price_asks_a_l_RADUSDT 
		qty_asks_a_g_RADUSDT = qty_asks_a_l_RADUSDT 

	if data['stream'] == streamradbtc :
		data = json.loads(message) 

		symbol_b_l_RADBTC = data['data']['s'] 
		price_bids_b_l_RADBTC = data['data']['b'] 
		qty_bids_b_l_RADBTC = data['data']['B']
		price_asks_b_l_RADBTC = data['data']['a'] 
		qty_asks_b_l_RADBTC = data['data']['A'] 

		global symbol_b_g_RADBTC 
		global price_bids_b_g_RADBTC 
		global qty_bids_b_g_RADBTC 
		global price_asks_b_g_RADBTC 
		global qty_asks_b_g_RADBTC 

		symbol_b_g_RADBTC = symbol_b_l_RADBTC 
		price_bids_b_g_RADBTC = price_bids_b_l_RADBTC 
		qty_bids_b_g_RADBTC = qty_bids_b_l_RADBTC 
		price_asks_b_g_RADBTC = price_asks_b_l_RADBTC 
		qty_asks_b_g_RADBTC = qty_asks_b_l_RADBTC 


def loop_RADUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamradusdt}/{streamradbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_RADUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_RADUSDT).start()

def loop_RADUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_RADUSDT != 0.0 and qty_bids_a_g_RADUSDT != 0.0 and price_asks_a_g_RADUSDT != 0.0 and qty_asks_a_g_RADUSDT != 0.0 and price_bids_b_g_RADBTC != 0.0 and qty_bids_b_g_RADBTC != 0.0 and price_asks_b_g_RADBTC != 0.0 and qty_asks_b_g_RADBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_RADBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_RADBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_RADUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_RADUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_RADBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_RADBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_RADUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_RADUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_RADBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_RADBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_RADUSDT_Trade).start() 

streambetausdt = 'betausdt@bookTicker'
streambetabtc  = 'betabtc@bookTicker'

symbol_a_g_BETAUSDT = 'BETAUSDT' 
price_bids_a_g_BETAUSDT = float(0.0) 
qty_bids_a_g_BETAUSDT = float(0.0) 
price_asks_a_g_BETAUSDT = float(0.0) 
qty_asks_a_g_BETAUSDT = float(0.0) 

stepSize_BETAUSDT = 1.00000000 

symbol_b_g_BETABTC = 'BETABTC' 
price_bids_b_g_BETABTC = float(0.0) 
qty_bids_b_g_BETABTC = float(0.0) 
price_asks_b_g_BETABTC = float(0.0) 
qty_asks_b_g_BETABTC = float(0.0) 

stepSize_BETABTC = 1.00000000 

def on_message_BETAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambetausdt :
		symbol_a_l_BETAUSDT = data['data']['s'] 
		price_bids_a_l_BETAUSDT = data['data']['b'] 
		qty_bids_a_l_BETAUSDT = data['data']['B'] 
		price_asks_a_l_BETAUSDT = data['data']['a'] 
		qty_asks_a_l_BETAUSDT = data['data']['A'] 

		global symbol_a_g_BETAUSDT 
		global price_bids_a_g_BETAUSDT 
		global qty_bids_a_g_BETAUSDT 
		global price_asks_a_g_BETAUSDT 
		global qty_asks_a_g_BETAUSDT 

		symbol_a_g_BETAUSDT = symbol_a_l_BETAUSDT 
		price_bids_a_g_BETAUSDT = price_bids_a_l_BETAUSDT 
		qty_bids_a_g_BETAUSDT = qty_bids_a_l_BETAUSDT 
		price_asks_a_g_BETAUSDT = price_asks_a_l_BETAUSDT 
		qty_asks_a_g_BETAUSDT = qty_asks_a_l_BETAUSDT 

	if data['stream'] == streambetabtc :
		data = json.loads(message) 

		symbol_b_l_BETABTC = data['data']['s'] 
		price_bids_b_l_BETABTC = data['data']['b'] 
		qty_bids_b_l_BETABTC = data['data']['B']
		price_asks_b_l_BETABTC = data['data']['a'] 
		qty_asks_b_l_BETABTC = data['data']['A'] 

		global symbol_b_g_BETABTC 
		global price_bids_b_g_BETABTC 
		global qty_bids_b_g_BETABTC 
		global price_asks_b_g_BETABTC 
		global qty_asks_b_g_BETABTC 

		symbol_b_g_BETABTC = symbol_b_l_BETABTC 
		price_bids_b_g_BETABTC = price_bids_b_l_BETABTC 
		qty_bids_b_g_BETABTC = qty_bids_b_l_BETABTC 
		price_asks_b_g_BETABTC = price_asks_b_l_BETABTC 
		qty_asks_b_g_BETABTC = qty_asks_b_l_BETABTC 


def loop_BETAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambetausdt}/{streambetabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BETAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BETAUSDT).start()

def loop_BETAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BETAUSDT != 0.0 and qty_bids_a_g_BETAUSDT != 0.0 and price_asks_a_g_BETAUSDT != 0.0 and qty_asks_a_g_BETAUSDT != 0.0 and price_bids_b_g_BETABTC != 0.0 and qty_bids_b_g_BETABTC != 0.0 and price_asks_b_g_BETABTC != 0.0 and qty_asks_b_g_BETABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BETABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BETABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BETAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BETAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BETABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BETABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BETAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BETAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BETABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BETABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BETAUSDT_Trade).start() 

streamrareusdt = 'rareusdt@bookTicker'
streamrarebtc  = 'rarebtc@bookTicker'

symbol_a_g_RAREUSDT = 'RAREUSDT' 
price_bids_a_g_RAREUSDT = float(0.0) 
qty_bids_a_g_RAREUSDT = float(0.0) 
price_asks_a_g_RAREUSDT = float(0.0) 
qty_asks_a_g_RAREUSDT = float(0.0) 

stepSize_RAREUSDT = 0.10000000 

symbol_b_g_RAREBTC = 'RAREBTC' 
price_bids_b_g_RAREBTC = float(0.0) 
qty_bids_b_g_RAREBTC = float(0.0) 
price_asks_b_g_RAREBTC = float(0.0) 
qty_asks_b_g_RAREBTC = float(0.0) 

stepSize_RAREBTC = 0.10000000 

def on_message_RAREUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamrareusdt :
		symbol_a_l_RAREUSDT = data['data']['s'] 
		price_bids_a_l_RAREUSDT = data['data']['b'] 
		qty_bids_a_l_RAREUSDT = data['data']['B'] 
		price_asks_a_l_RAREUSDT = data['data']['a'] 
		qty_asks_a_l_RAREUSDT = data['data']['A'] 

		global symbol_a_g_RAREUSDT 
		global price_bids_a_g_RAREUSDT 
		global qty_bids_a_g_RAREUSDT 
		global price_asks_a_g_RAREUSDT 
		global qty_asks_a_g_RAREUSDT 

		symbol_a_g_RAREUSDT = symbol_a_l_RAREUSDT 
		price_bids_a_g_RAREUSDT = price_bids_a_l_RAREUSDT 
		qty_bids_a_g_RAREUSDT = qty_bids_a_l_RAREUSDT 
		price_asks_a_g_RAREUSDT = price_asks_a_l_RAREUSDT 
		qty_asks_a_g_RAREUSDT = qty_asks_a_l_RAREUSDT 

	if data['stream'] == streamrarebtc :
		data = json.loads(message) 

		symbol_b_l_RAREBTC = data['data']['s'] 
		price_bids_b_l_RAREBTC = data['data']['b'] 
		qty_bids_b_l_RAREBTC = data['data']['B']
		price_asks_b_l_RAREBTC = data['data']['a'] 
		qty_asks_b_l_RAREBTC = data['data']['A'] 

		global symbol_b_g_RAREBTC 
		global price_bids_b_g_RAREBTC 
		global qty_bids_b_g_RAREBTC 
		global price_asks_b_g_RAREBTC 
		global qty_asks_b_g_RAREBTC 

		symbol_b_g_RAREBTC = symbol_b_l_RAREBTC 
		price_bids_b_g_RAREBTC = price_bids_b_l_RAREBTC 
		qty_bids_b_g_RAREBTC = qty_bids_b_l_RAREBTC 
		price_asks_b_g_RAREBTC = price_asks_b_l_RAREBTC 
		qty_asks_b_g_RAREBTC = qty_asks_b_l_RAREBTC 


def loop_RAREUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamrareusdt}/{streamrarebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_RAREUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_RAREUSDT).start()

def loop_RAREUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_RAREUSDT != 0.0 and qty_bids_a_g_RAREUSDT != 0.0 and price_asks_a_g_RAREUSDT != 0.0 and qty_asks_a_g_RAREUSDT != 0.0 and price_bids_b_g_RAREBTC != 0.0 and qty_bids_b_g_RAREBTC != 0.0 and price_asks_b_g_RAREBTC != 0.0 and qty_asks_b_g_RAREBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_RAREBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_RAREBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_RAREUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_RAREUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_RAREBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_RAREBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_RAREUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_RAREUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_RAREBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_RAREBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_RAREUSDT_Trade).start() 

streamlaziousdt = 'laziousdt@bookTicker'
streamlaziobtc  = 'laziobtc@bookTicker'

symbol_a_g_LAZIOUSDT = 'LAZIOUSDT' 
price_bids_a_g_LAZIOUSDT = float(0.0) 
qty_bids_a_g_LAZIOUSDT = float(0.0) 
price_asks_a_g_LAZIOUSDT = float(0.0) 
qty_asks_a_g_LAZIOUSDT = float(0.0) 

stepSize_LAZIOUSDT = 0.01000000 

symbol_b_g_LAZIOBTC = 'LAZIOBTC' 
price_bids_b_g_LAZIOBTC = float(0.0) 
qty_bids_b_g_LAZIOBTC = float(0.0) 
price_asks_b_g_LAZIOBTC = float(0.0) 
qty_asks_b_g_LAZIOBTC = float(0.0) 

stepSize_LAZIOBTC = 0.01000000 

def on_message_LAZIOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamlaziousdt :
		symbol_a_l_LAZIOUSDT = data['data']['s'] 
		price_bids_a_l_LAZIOUSDT = data['data']['b'] 
		qty_bids_a_l_LAZIOUSDT = data['data']['B'] 
		price_asks_a_l_LAZIOUSDT = data['data']['a'] 
		qty_asks_a_l_LAZIOUSDT = data['data']['A'] 

		global symbol_a_g_LAZIOUSDT 
		global price_bids_a_g_LAZIOUSDT 
		global qty_bids_a_g_LAZIOUSDT 
		global price_asks_a_g_LAZIOUSDT 
		global qty_asks_a_g_LAZIOUSDT 

		symbol_a_g_LAZIOUSDT = symbol_a_l_LAZIOUSDT 
		price_bids_a_g_LAZIOUSDT = price_bids_a_l_LAZIOUSDT 
		qty_bids_a_g_LAZIOUSDT = qty_bids_a_l_LAZIOUSDT 
		price_asks_a_g_LAZIOUSDT = price_asks_a_l_LAZIOUSDT 
		qty_asks_a_g_LAZIOUSDT = qty_asks_a_l_LAZIOUSDT 

	if data['stream'] == streamlaziobtc :
		data = json.loads(message) 

		symbol_b_l_LAZIOBTC = data['data']['s'] 
		price_bids_b_l_LAZIOBTC = data['data']['b'] 
		qty_bids_b_l_LAZIOBTC = data['data']['B']
		price_asks_b_l_LAZIOBTC = data['data']['a'] 
		qty_asks_b_l_LAZIOBTC = data['data']['A'] 

		global symbol_b_g_LAZIOBTC 
		global price_bids_b_g_LAZIOBTC 
		global qty_bids_b_g_LAZIOBTC 
		global price_asks_b_g_LAZIOBTC 
		global qty_asks_b_g_LAZIOBTC 

		symbol_b_g_LAZIOBTC = symbol_b_l_LAZIOBTC 
		price_bids_b_g_LAZIOBTC = price_bids_b_l_LAZIOBTC 
		qty_bids_b_g_LAZIOBTC = qty_bids_b_l_LAZIOBTC 
		price_asks_b_g_LAZIOBTC = price_asks_b_l_LAZIOBTC 
		qty_asks_b_g_LAZIOBTC = qty_asks_b_l_LAZIOBTC 


def loop_LAZIOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamlaziousdt}/{streamlaziobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_LAZIOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_LAZIOUSDT).start()

def loop_LAZIOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_LAZIOUSDT != 0.0 and qty_bids_a_g_LAZIOUSDT != 0.0 and price_asks_a_g_LAZIOUSDT != 0.0 and qty_asks_a_g_LAZIOUSDT != 0.0 and price_bids_b_g_LAZIOBTC != 0.0 and qty_bids_b_g_LAZIOBTC != 0.0 and price_asks_b_g_LAZIOBTC != 0.0 and qty_asks_b_g_LAZIOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_LAZIOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_LAZIOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_LAZIOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_LAZIOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_LAZIOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_LAZIOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_LAZIOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_LAZIOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_LAZIOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_LAZIOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_LAZIOUSDT_Trade).start() 

streamchessusdt = 'chessusdt@bookTicker'
streamchessbtc  = 'chessbtc@bookTicker'

symbol_a_g_CHESSUSDT = 'CHESSUSDT' 
price_bids_a_g_CHESSUSDT = float(0.0) 
qty_bids_a_g_CHESSUSDT = float(0.0) 
price_asks_a_g_CHESSUSDT = float(0.0) 
qty_asks_a_g_CHESSUSDT = float(0.0) 

stepSize_CHESSUSDT = 0.10000000 

symbol_b_g_CHESSBTC = 'CHESSBTC' 
price_bids_b_g_CHESSBTC = float(0.0) 
qty_bids_b_g_CHESSBTC = float(0.0) 
price_asks_b_g_CHESSBTC = float(0.0) 
qty_asks_b_g_CHESSBTC = float(0.0) 

stepSize_CHESSBTC = 0.10000000 

def on_message_CHESSUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamchessusdt :
		symbol_a_l_CHESSUSDT = data['data']['s'] 
		price_bids_a_l_CHESSUSDT = data['data']['b'] 
		qty_bids_a_l_CHESSUSDT = data['data']['B'] 
		price_asks_a_l_CHESSUSDT = data['data']['a'] 
		qty_asks_a_l_CHESSUSDT = data['data']['A'] 

		global symbol_a_g_CHESSUSDT 
		global price_bids_a_g_CHESSUSDT 
		global qty_bids_a_g_CHESSUSDT 
		global price_asks_a_g_CHESSUSDT 
		global qty_asks_a_g_CHESSUSDT 

		symbol_a_g_CHESSUSDT = symbol_a_l_CHESSUSDT 
		price_bids_a_g_CHESSUSDT = price_bids_a_l_CHESSUSDT 
		qty_bids_a_g_CHESSUSDT = qty_bids_a_l_CHESSUSDT 
		price_asks_a_g_CHESSUSDT = price_asks_a_l_CHESSUSDT 
		qty_asks_a_g_CHESSUSDT = qty_asks_a_l_CHESSUSDT 

	if data['stream'] == streamchessbtc :
		data = json.loads(message) 

		symbol_b_l_CHESSBTC = data['data']['s'] 
		price_bids_b_l_CHESSBTC = data['data']['b'] 
		qty_bids_b_l_CHESSBTC = data['data']['B']
		price_asks_b_l_CHESSBTC = data['data']['a'] 
		qty_asks_b_l_CHESSBTC = data['data']['A'] 

		global symbol_b_g_CHESSBTC 
		global price_bids_b_g_CHESSBTC 
		global qty_bids_b_g_CHESSBTC 
		global price_asks_b_g_CHESSBTC 
		global qty_asks_b_g_CHESSBTC 

		symbol_b_g_CHESSBTC = symbol_b_l_CHESSBTC 
		price_bids_b_g_CHESSBTC = price_bids_b_l_CHESSBTC 
		qty_bids_b_g_CHESSBTC = qty_bids_b_l_CHESSBTC 
		price_asks_b_g_CHESSBTC = price_asks_b_l_CHESSBTC 
		qty_asks_b_g_CHESSBTC = qty_asks_b_l_CHESSBTC 


def loop_CHESSUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamchessusdt}/{streamchessbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CHESSUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CHESSUSDT).start()

def loop_CHESSUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CHESSUSDT != 0.0 and qty_bids_a_g_CHESSUSDT != 0.0 and price_asks_a_g_CHESSUSDT != 0.0 and qty_asks_a_g_CHESSUSDT != 0.0 and price_bids_b_g_CHESSBTC != 0.0 and qty_bids_b_g_CHESSBTC != 0.0 and price_asks_b_g_CHESSBTC != 0.0 and qty_asks_b_g_CHESSBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CHESSBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CHESSBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CHESSUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CHESSUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CHESSBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CHESSBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CHESSUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CHESSUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CHESSBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CHESSBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CHESSUSDT_Trade).start() 

streamadxusdt = 'adxusdt@bookTicker'
streamadxbtc  = 'adxbtc@bookTicker'

symbol_a_g_ADXUSDT = 'ADXUSDT' 
price_bids_a_g_ADXUSDT = float(0.0) 
qty_bids_a_g_ADXUSDT = float(0.0) 
price_asks_a_g_ADXUSDT = float(0.0) 
qty_asks_a_g_ADXUSDT = float(0.0) 

stepSize_ADXUSDT = 1.00000000 

symbol_b_g_ADXBTC = 'ADXBTC' 
price_bids_b_g_ADXBTC = float(0.0) 
qty_bids_b_g_ADXBTC = float(0.0) 
price_asks_b_g_ADXBTC = float(0.0) 
qty_asks_b_g_ADXBTC = float(0.0) 

stepSize_ADXBTC = 1.00000000 

def on_message_ADXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamadxusdt :
		symbol_a_l_ADXUSDT = data['data']['s'] 
		price_bids_a_l_ADXUSDT = data['data']['b'] 
		qty_bids_a_l_ADXUSDT = data['data']['B'] 
		price_asks_a_l_ADXUSDT = data['data']['a'] 
		qty_asks_a_l_ADXUSDT = data['data']['A'] 

		global symbol_a_g_ADXUSDT 
		global price_bids_a_g_ADXUSDT 
		global qty_bids_a_g_ADXUSDT 
		global price_asks_a_g_ADXUSDT 
		global qty_asks_a_g_ADXUSDT 

		symbol_a_g_ADXUSDT = symbol_a_l_ADXUSDT 
		price_bids_a_g_ADXUSDT = price_bids_a_l_ADXUSDT 
		qty_bids_a_g_ADXUSDT = qty_bids_a_l_ADXUSDT 
		price_asks_a_g_ADXUSDT = price_asks_a_l_ADXUSDT 
		qty_asks_a_g_ADXUSDT = qty_asks_a_l_ADXUSDT 

	if data['stream'] == streamadxbtc :
		data = json.loads(message) 

		symbol_b_l_ADXBTC = data['data']['s'] 
		price_bids_b_l_ADXBTC = data['data']['b'] 
		qty_bids_b_l_ADXBTC = data['data']['B']
		price_asks_b_l_ADXBTC = data['data']['a'] 
		qty_asks_b_l_ADXBTC = data['data']['A'] 

		global symbol_b_g_ADXBTC 
		global price_bids_b_g_ADXBTC 
		global qty_bids_b_g_ADXBTC 
		global price_asks_b_g_ADXBTC 
		global qty_asks_b_g_ADXBTC 

		symbol_b_g_ADXBTC = symbol_b_l_ADXBTC 
		price_bids_b_g_ADXBTC = price_bids_b_l_ADXBTC 
		qty_bids_b_g_ADXBTC = qty_bids_b_l_ADXBTC 
		price_asks_b_g_ADXBTC = price_asks_b_l_ADXBTC 
		qty_asks_b_g_ADXBTC = qty_asks_b_l_ADXBTC 


def loop_ADXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamadxusdt}/{streamadxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ADXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ADXUSDT).start()

def loop_ADXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ADXUSDT != 0.0 and qty_bids_a_g_ADXUSDT != 0.0 and price_asks_a_g_ADXUSDT != 0.0 and qty_asks_a_g_ADXUSDT != 0.0 and price_bids_b_g_ADXBTC != 0.0 and qty_bids_b_g_ADXBTC != 0.0 and price_asks_b_g_ADXBTC != 0.0 and qty_asks_b_g_ADXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ADXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ADXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ADXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ADXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ADXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ADXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ADXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ADXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ADXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ADXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ADXUSDT_Trade).start() 

streamauctionusdt = 'auctionusdt@bookTicker'
streamauctionbtc  = 'auctionbtc@bookTicker'

symbol_a_g_AUCTIONUSDT = 'AUCTIONUSDT' 
price_bids_a_g_AUCTIONUSDT = float(0.0) 
qty_bids_a_g_AUCTIONUSDT = float(0.0) 
price_asks_a_g_AUCTIONUSDT = float(0.0) 
qty_asks_a_g_AUCTIONUSDT = float(0.0) 

stepSize_AUCTIONUSDT = 0.01000000 

symbol_b_g_AUCTIONBTC = 'AUCTIONBTC' 
price_bids_b_g_AUCTIONBTC = float(0.0) 
qty_bids_b_g_AUCTIONBTC = float(0.0) 
price_asks_b_g_AUCTIONBTC = float(0.0) 
qty_asks_b_g_AUCTIONBTC = float(0.0) 

stepSize_AUCTIONBTC = 0.01000000 

def on_message_AUCTIONUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamauctionusdt :
		symbol_a_l_AUCTIONUSDT = data['data']['s'] 
		price_bids_a_l_AUCTIONUSDT = data['data']['b'] 
		qty_bids_a_l_AUCTIONUSDT = data['data']['B'] 
		price_asks_a_l_AUCTIONUSDT = data['data']['a'] 
		qty_asks_a_l_AUCTIONUSDT = data['data']['A'] 

		global symbol_a_g_AUCTIONUSDT 
		global price_bids_a_g_AUCTIONUSDT 
		global qty_bids_a_g_AUCTIONUSDT 
		global price_asks_a_g_AUCTIONUSDT 
		global qty_asks_a_g_AUCTIONUSDT 

		symbol_a_g_AUCTIONUSDT = symbol_a_l_AUCTIONUSDT 
		price_bids_a_g_AUCTIONUSDT = price_bids_a_l_AUCTIONUSDT 
		qty_bids_a_g_AUCTIONUSDT = qty_bids_a_l_AUCTIONUSDT 
		price_asks_a_g_AUCTIONUSDT = price_asks_a_l_AUCTIONUSDT 
		qty_asks_a_g_AUCTIONUSDT = qty_asks_a_l_AUCTIONUSDT 

	if data['stream'] == streamauctionbtc :
		data = json.loads(message) 

		symbol_b_l_AUCTIONBTC = data['data']['s'] 
		price_bids_b_l_AUCTIONBTC = data['data']['b'] 
		qty_bids_b_l_AUCTIONBTC = data['data']['B']
		price_asks_b_l_AUCTIONBTC = data['data']['a'] 
		qty_asks_b_l_AUCTIONBTC = data['data']['A'] 

		global symbol_b_g_AUCTIONBTC 
		global price_bids_b_g_AUCTIONBTC 
		global qty_bids_b_g_AUCTIONBTC 
		global price_asks_b_g_AUCTIONBTC 
		global qty_asks_b_g_AUCTIONBTC 

		symbol_b_g_AUCTIONBTC = symbol_b_l_AUCTIONBTC 
		price_bids_b_g_AUCTIONBTC = price_bids_b_l_AUCTIONBTC 
		qty_bids_b_g_AUCTIONBTC = qty_bids_b_l_AUCTIONBTC 
		price_asks_b_g_AUCTIONBTC = price_asks_b_l_AUCTIONBTC 
		qty_asks_b_g_AUCTIONBTC = qty_asks_b_l_AUCTIONBTC 


def loop_AUCTIONUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamauctionusdt}/{streamauctionbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_AUCTIONUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_AUCTIONUSDT).start()

def loop_AUCTIONUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_AUCTIONUSDT != 0.0 and qty_bids_a_g_AUCTIONUSDT != 0.0 and price_asks_a_g_AUCTIONUSDT != 0.0 and qty_asks_a_g_AUCTIONUSDT != 0.0 and price_bids_b_g_AUCTIONBTC != 0.0 and qty_bids_b_g_AUCTIONBTC != 0.0 and price_asks_b_g_AUCTIONBTC != 0.0 and qty_asks_b_g_AUCTIONBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_AUCTIONBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_AUCTIONBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_AUCTIONUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_AUCTIONUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_AUCTIONBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_AUCTIONBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_AUCTIONUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_AUCTIONUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_AUCTIONBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_AUCTIONBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_AUCTIONUSDT_Trade).start() 

streamdarusdt = 'darusdt@bookTicker'
streamdarbtc  = 'darbtc@bookTicker'

symbol_a_g_DARUSDT = 'DARUSDT' 
price_bids_a_g_DARUSDT = float(0.0) 
qty_bids_a_g_DARUSDT = float(0.0) 
price_asks_a_g_DARUSDT = float(0.0) 
qty_asks_a_g_DARUSDT = float(0.0) 

stepSize_DARUSDT = 1.00000000 

symbol_b_g_DARBTC = 'DARBTC' 
price_bids_b_g_DARBTC = float(0.0) 
qty_bids_b_g_DARBTC = float(0.0) 
price_asks_b_g_DARBTC = float(0.0) 
qty_asks_b_g_DARBTC = float(0.0) 

stepSize_DARBTC = 1.00000000 

def on_message_DARUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamdarusdt :
		symbol_a_l_DARUSDT = data['data']['s'] 
		price_bids_a_l_DARUSDT = data['data']['b'] 
		qty_bids_a_l_DARUSDT = data['data']['B'] 
		price_asks_a_l_DARUSDT = data['data']['a'] 
		qty_asks_a_l_DARUSDT = data['data']['A'] 

		global symbol_a_g_DARUSDT 
		global price_bids_a_g_DARUSDT 
		global qty_bids_a_g_DARUSDT 
		global price_asks_a_g_DARUSDT 
		global qty_asks_a_g_DARUSDT 

		symbol_a_g_DARUSDT = symbol_a_l_DARUSDT 
		price_bids_a_g_DARUSDT = price_bids_a_l_DARUSDT 
		qty_bids_a_g_DARUSDT = qty_bids_a_l_DARUSDT 
		price_asks_a_g_DARUSDT = price_asks_a_l_DARUSDT 
		qty_asks_a_g_DARUSDT = qty_asks_a_l_DARUSDT 

	if data['stream'] == streamdarbtc :
		data = json.loads(message) 

		symbol_b_l_DARBTC = data['data']['s'] 
		price_bids_b_l_DARBTC = data['data']['b'] 
		qty_bids_b_l_DARBTC = data['data']['B']
		price_asks_b_l_DARBTC = data['data']['a'] 
		qty_asks_b_l_DARBTC = data['data']['A'] 

		global symbol_b_g_DARBTC 
		global price_bids_b_g_DARBTC 
		global qty_bids_b_g_DARBTC 
		global price_asks_b_g_DARBTC 
		global qty_asks_b_g_DARBTC 

		symbol_b_g_DARBTC = symbol_b_l_DARBTC 
		price_bids_b_g_DARBTC = price_bids_b_l_DARBTC 
		qty_bids_b_g_DARBTC = qty_bids_b_l_DARBTC 
		price_asks_b_g_DARBTC = price_asks_b_l_DARBTC 
		qty_asks_b_g_DARBTC = qty_asks_b_l_DARBTC 


def loop_DARUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamdarusdt}/{streamdarbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_DARUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_DARUSDT).start()

def loop_DARUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_DARUSDT != 0.0 and qty_bids_a_g_DARUSDT != 0.0 and price_asks_a_g_DARUSDT != 0.0 and qty_asks_a_g_DARUSDT != 0.0 and price_bids_b_g_DARBTC != 0.0 and qty_bids_b_g_DARBTC != 0.0 and price_asks_b_g_DARBTC != 0.0 and qty_asks_b_g_DARBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_DARBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_DARBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_DARUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_DARUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_DARBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_DARBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_DARUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_DARUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_DARBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_DARBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_DARUSDT_Trade).start() 

streambnxusdt = 'bnxusdt@bookTicker'
streambnxbtc  = 'bnxbtc@bookTicker'

symbol_a_g_BNXUSDT = 'BNXUSDT' 
price_bids_a_g_BNXUSDT = float(0.0) 
qty_bids_a_g_BNXUSDT = float(0.0) 
price_asks_a_g_BNXUSDT = float(0.0) 
qty_asks_a_g_BNXUSDT = float(0.0) 

stepSize_BNXUSDT = 0.00100000 

symbol_b_g_BNXBTC = 'BNXBTC' 
price_bids_b_g_BNXBTC = float(0.0) 
qty_bids_b_g_BNXBTC = float(0.0) 
price_asks_b_g_BNXBTC = float(0.0) 
qty_asks_b_g_BNXBTC = float(0.0) 

stepSize_BNXBTC = 0.00100000 

def on_message_BNXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambnxusdt :
		symbol_a_l_BNXUSDT = data['data']['s'] 
		price_bids_a_l_BNXUSDT = data['data']['b'] 
		qty_bids_a_l_BNXUSDT = data['data']['B'] 
		price_asks_a_l_BNXUSDT = data['data']['a'] 
		qty_asks_a_l_BNXUSDT = data['data']['A'] 

		global symbol_a_g_BNXUSDT 
		global price_bids_a_g_BNXUSDT 
		global qty_bids_a_g_BNXUSDT 
		global price_asks_a_g_BNXUSDT 
		global qty_asks_a_g_BNXUSDT 

		symbol_a_g_BNXUSDT = symbol_a_l_BNXUSDT 
		price_bids_a_g_BNXUSDT = price_bids_a_l_BNXUSDT 
		qty_bids_a_g_BNXUSDT = qty_bids_a_l_BNXUSDT 
		price_asks_a_g_BNXUSDT = price_asks_a_l_BNXUSDT 
		qty_asks_a_g_BNXUSDT = qty_asks_a_l_BNXUSDT 

	if data['stream'] == streambnxbtc :
		data = json.loads(message) 

		symbol_b_l_BNXBTC = data['data']['s'] 
		price_bids_b_l_BNXBTC = data['data']['b'] 
		qty_bids_b_l_BNXBTC = data['data']['B']
		price_asks_b_l_BNXBTC = data['data']['a'] 
		qty_asks_b_l_BNXBTC = data['data']['A'] 

		global symbol_b_g_BNXBTC 
		global price_bids_b_g_BNXBTC 
		global qty_bids_b_g_BNXBTC 
		global price_asks_b_g_BNXBTC 
		global qty_asks_b_g_BNXBTC 

		symbol_b_g_BNXBTC = symbol_b_l_BNXBTC 
		price_bids_b_g_BNXBTC = price_bids_b_l_BNXBTC 
		qty_bids_b_g_BNXBTC = qty_bids_b_l_BNXBTC 
		price_asks_b_g_BNXBTC = price_asks_b_l_BNXBTC 
		qty_asks_b_g_BNXBTC = qty_asks_b_l_BNXBTC 


def loop_BNXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambnxusdt}/{streambnxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BNXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BNXUSDT).start()

def loop_BNXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BNXUSDT != 0.0 and qty_bids_a_g_BNXUSDT != 0.0 and price_asks_a_g_BNXUSDT != 0.0 and qty_asks_a_g_BNXUSDT != 0.0 and price_bids_b_g_BNXBTC != 0.0 and qty_bids_b_g_BNXBTC != 0.0 and price_asks_b_g_BNXBTC != 0.0 and qty_asks_b_g_BNXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BNXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BNXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BNXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BNXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BNXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BNXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BNXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BNXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BNXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BNXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BNXUSDT_Trade).start() 

streammovrusdt = 'movrusdt@bookTicker'
streammovrbtc  = 'movrbtc@bookTicker'

symbol_a_g_MOVRUSDT = 'MOVRUSDT' 
price_bids_a_g_MOVRUSDT = float(0.0) 
qty_bids_a_g_MOVRUSDT = float(0.0) 
price_asks_a_g_MOVRUSDT = float(0.0) 
qty_asks_a_g_MOVRUSDT = float(0.0) 

stepSize_MOVRUSDT = 0.00100000 

symbol_b_g_MOVRBTC = 'MOVRBTC' 
price_bids_b_g_MOVRBTC = float(0.0) 
qty_bids_b_g_MOVRBTC = float(0.0) 
price_asks_b_g_MOVRBTC = float(0.0) 
qty_asks_b_g_MOVRBTC = float(0.0) 

stepSize_MOVRBTC = 0.00100000 

def on_message_MOVRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streammovrusdt :
		symbol_a_l_MOVRUSDT = data['data']['s'] 
		price_bids_a_l_MOVRUSDT = data['data']['b'] 
		qty_bids_a_l_MOVRUSDT = data['data']['B'] 
		price_asks_a_l_MOVRUSDT = data['data']['a'] 
		qty_asks_a_l_MOVRUSDT = data['data']['A'] 

		global symbol_a_g_MOVRUSDT 
		global price_bids_a_g_MOVRUSDT 
		global qty_bids_a_g_MOVRUSDT 
		global price_asks_a_g_MOVRUSDT 
		global qty_asks_a_g_MOVRUSDT 

		symbol_a_g_MOVRUSDT = symbol_a_l_MOVRUSDT 
		price_bids_a_g_MOVRUSDT = price_bids_a_l_MOVRUSDT 
		qty_bids_a_g_MOVRUSDT = qty_bids_a_l_MOVRUSDT 
		price_asks_a_g_MOVRUSDT = price_asks_a_l_MOVRUSDT 
		qty_asks_a_g_MOVRUSDT = qty_asks_a_l_MOVRUSDT 

	if data['stream'] == streammovrbtc :
		data = json.loads(message) 

		symbol_b_l_MOVRBTC = data['data']['s'] 
		price_bids_b_l_MOVRBTC = data['data']['b'] 
		qty_bids_b_l_MOVRBTC = data['data']['B']
		price_asks_b_l_MOVRBTC = data['data']['a'] 
		qty_asks_b_l_MOVRBTC = data['data']['A'] 

		global symbol_b_g_MOVRBTC 
		global price_bids_b_g_MOVRBTC 
		global qty_bids_b_g_MOVRBTC 
		global price_asks_b_g_MOVRBTC 
		global qty_asks_b_g_MOVRBTC 

		symbol_b_g_MOVRBTC = symbol_b_l_MOVRBTC 
		price_bids_b_g_MOVRBTC = price_bids_b_l_MOVRBTC 
		qty_bids_b_g_MOVRBTC = qty_bids_b_l_MOVRBTC 
		price_asks_b_g_MOVRBTC = price_asks_b_l_MOVRBTC 
		qty_asks_b_g_MOVRBTC = qty_asks_b_l_MOVRBTC 


def loop_MOVRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streammovrusdt}/{streammovrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_MOVRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_MOVRUSDT).start()

def loop_MOVRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_MOVRUSDT != 0.0 and qty_bids_a_g_MOVRUSDT != 0.0 and price_asks_a_g_MOVRUSDT != 0.0 and qty_asks_a_g_MOVRUSDT != 0.0 and price_bids_b_g_MOVRBTC != 0.0 and qty_bids_b_g_MOVRBTC != 0.0 and price_asks_b_g_MOVRBTC != 0.0 and qty_asks_b_g_MOVRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_MOVRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_MOVRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_MOVRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_MOVRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_MOVRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_MOVRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_MOVRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_MOVRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_MOVRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_MOVRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_MOVRUSDT_Trade).start() 

streamcityusdt = 'cityusdt@bookTicker'
streamcitybtc  = 'citybtc@bookTicker'

symbol_a_g_CITYUSDT = 'CITYUSDT' 
price_bids_a_g_CITYUSDT = float(0.0) 
qty_bids_a_g_CITYUSDT = float(0.0) 
price_asks_a_g_CITYUSDT = float(0.0) 
qty_asks_a_g_CITYUSDT = float(0.0) 

stepSize_CITYUSDT = 0.01000000 

symbol_b_g_CITYBTC = 'CITYBTC' 
price_bids_b_g_CITYBTC = float(0.0) 
qty_bids_b_g_CITYBTC = float(0.0) 
price_asks_b_g_CITYBTC = float(0.0) 
qty_asks_b_g_CITYBTC = float(0.0) 

stepSize_CITYBTC = 0.01000000 

def on_message_CITYUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamcityusdt :
		symbol_a_l_CITYUSDT = data['data']['s'] 
		price_bids_a_l_CITYUSDT = data['data']['b'] 
		qty_bids_a_l_CITYUSDT = data['data']['B'] 
		price_asks_a_l_CITYUSDT = data['data']['a'] 
		qty_asks_a_l_CITYUSDT = data['data']['A'] 

		global symbol_a_g_CITYUSDT 
		global price_bids_a_g_CITYUSDT 
		global qty_bids_a_g_CITYUSDT 
		global price_asks_a_g_CITYUSDT 
		global qty_asks_a_g_CITYUSDT 

		symbol_a_g_CITYUSDT = symbol_a_l_CITYUSDT 
		price_bids_a_g_CITYUSDT = price_bids_a_l_CITYUSDT 
		qty_bids_a_g_CITYUSDT = qty_bids_a_l_CITYUSDT 
		price_asks_a_g_CITYUSDT = price_asks_a_l_CITYUSDT 
		qty_asks_a_g_CITYUSDT = qty_asks_a_l_CITYUSDT 

	if data['stream'] == streamcitybtc :
		data = json.loads(message) 

		symbol_b_l_CITYBTC = data['data']['s'] 
		price_bids_b_l_CITYBTC = data['data']['b'] 
		qty_bids_b_l_CITYBTC = data['data']['B']
		price_asks_b_l_CITYBTC = data['data']['a'] 
		qty_asks_b_l_CITYBTC = data['data']['A'] 

		global symbol_b_g_CITYBTC 
		global price_bids_b_g_CITYBTC 
		global qty_bids_b_g_CITYBTC 
		global price_asks_b_g_CITYBTC 
		global qty_asks_b_g_CITYBTC 

		symbol_b_g_CITYBTC = symbol_b_l_CITYBTC 
		price_bids_b_g_CITYBTC = price_bids_b_l_CITYBTC 
		qty_bids_b_g_CITYBTC = qty_bids_b_l_CITYBTC 
		price_asks_b_g_CITYBTC = price_asks_b_l_CITYBTC 
		qty_asks_b_g_CITYBTC = qty_asks_b_l_CITYBTC 


def loop_CITYUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamcityusdt}/{streamcitybtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CITYUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CITYUSDT).start()

def loop_CITYUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CITYUSDT != 0.0 and qty_bids_a_g_CITYUSDT != 0.0 and price_asks_a_g_CITYUSDT != 0.0 and qty_asks_a_g_CITYUSDT != 0.0 and price_bids_b_g_CITYBTC != 0.0 and qty_bids_b_g_CITYBTC != 0.0 and price_asks_b_g_CITYBTC != 0.0 and qty_asks_b_g_CITYBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CITYBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CITYBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CITYUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CITYUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CITYBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CITYBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CITYUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CITYUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CITYBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CITYBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CITYUSDT_Trade).start() 

streamensusdt = 'ensusdt@bookTicker'
streamensbtc  = 'ensbtc@bookTicker'

symbol_a_g_ENSUSDT = 'ENSUSDT' 
price_bids_a_g_ENSUSDT = float(0.0) 
qty_bids_a_g_ENSUSDT = float(0.0) 
price_asks_a_g_ENSUSDT = float(0.0) 
qty_asks_a_g_ENSUSDT = float(0.0) 

stepSize_ENSUSDT = 0.01000000 

symbol_b_g_ENSBTC = 'ENSBTC' 
price_bids_b_g_ENSBTC = float(0.0) 
qty_bids_b_g_ENSBTC = float(0.0) 
price_asks_b_g_ENSBTC = float(0.0) 
qty_asks_b_g_ENSBTC = float(0.0) 

stepSize_ENSBTC = 0.01000000 

def on_message_ENSUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamensusdt :
		symbol_a_l_ENSUSDT = data['data']['s'] 
		price_bids_a_l_ENSUSDT = data['data']['b'] 
		qty_bids_a_l_ENSUSDT = data['data']['B'] 
		price_asks_a_l_ENSUSDT = data['data']['a'] 
		qty_asks_a_l_ENSUSDT = data['data']['A'] 

		global symbol_a_g_ENSUSDT 
		global price_bids_a_g_ENSUSDT 
		global qty_bids_a_g_ENSUSDT 
		global price_asks_a_g_ENSUSDT 
		global qty_asks_a_g_ENSUSDT 

		symbol_a_g_ENSUSDT = symbol_a_l_ENSUSDT 
		price_bids_a_g_ENSUSDT = price_bids_a_l_ENSUSDT 
		qty_bids_a_g_ENSUSDT = qty_bids_a_l_ENSUSDT 
		price_asks_a_g_ENSUSDT = price_asks_a_l_ENSUSDT 
		qty_asks_a_g_ENSUSDT = qty_asks_a_l_ENSUSDT 

	if data['stream'] == streamensbtc :
		data = json.loads(message) 

		symbol_b_l_ENSBTC = data['data']['s'] 
		price_bids_b_l_ENSBTC = data['data']['b'] 
		qty_bids_b_l_ENSBTC = data['data']['B']
		price_asks_b_l_ENSBTC = data['data']['a'] 
		qty_asks_b_l_ENSBTC = data['data']['A'] 

		global symbol_b_g_ENSBTC 
		global price_bids_b_g_ENSBTC 
		global qty_bids_b_g_ENSBTC 
		global price_asks_b_g_ENSBTC 
		global qty_asks_b_g_ENSBTC 

		symbol_b_g_ENSBTC = symbol_b_l_ENSBTC 
		price_bids_b_g_ENSBTC = price_bids_b_l_ENSBTC 
		qty_bids_b_g_ENSBTC = qty_bids_b_l_ENSBTC 
		price_asks_b_g_ENSBTC = price_asks_b_l_ENSBTC 
		qty_asks_b_g_ENSBTC = qty_asks_b_l_ENSBTC 


def loop_ENSUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamensusdt}/{streamensbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ENSUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ENSUSDT).start()

def loop_ENSUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ENSUSDT != 0.0 and qty_bids_a_g_ENSUSDT != 0.0 and price_asks_a_g_ENSUSDT != 0.0 and qty_asks_a_g_ENSUSDT != 0.0 and price_bids_b_g_ENSBTC != 0.0 and qty_bids_b_g_ENSBTC != 0.0 and price_asks_b_g_ENSBTC != 0.0 and qty_asks_b_g_ENSBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ENSBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ENSBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ENSUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ENSUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ENSBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ENSBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ENSUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ENSUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ENSBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ENSBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ENSUSDT_Trade).start() 

streamqiusdt = 'qiusdt@bookTicker'
streamqibtc  = 'qibtc@bookTicker'

symbol_a_g_QIUSDT = 'QIUSDT' 
price_bids_a_g_QIUSDT = float(0.0) 
qty_bids_a_g_QIUSDT = float(0.0) 
price_asks_a_g_QIUSDT = float(0.0) 
qty_asks_a_g_QIUSDT = float(0.0) 

stepSize_QIUSDT = 1.00000000 

symbol_b_g_QIBTC = 'QIBTC' 
price_bids_b_g_QIBTC = float(0.0) 
qty_bids_b_g_QIBTC = float(0.0) 
price_asks_b_g_QIBTC = float(0.0) 
qty_asks_b_g_QIBTC = float(0.0) 

stepSize_QIBTC = 1.00000000 

def on_message_QIUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamqiusdt :
		symbol_a_l_QIUSDT = data['data']['s'] 
		price_bids_a_l_QIUSDT = data['data']['b'] 
		qty_bids_a_l_QIUSDT = data['data']['B'] 
		price_asks_a_l_QIUSDT = data['data']['a'] 
		qty_asks_a_l_QIUSDT = data['data']['A'] 

		global symbol_a_g_QIUSDT 
		global price_bids_a_g_QIUSDT 
		global qty_bids_a_g_QIUSDT 
		global price_asks_a_g_QIUSDT 
		global qty_asks_a_g_QIUSDT 

		symbol_a_g_QIUSDT = symbol_a_l_QIUSDT 
		price_bids_a_g_QIUSDT = price_bids_a_l_QIUSDT 
		qty_bids_a_g_QIUSDT = qty_bids_a_l_QIUSDT 
		price_asks_a_g_QIUSDT = price_asks_a_l_QIUSDT 
		qty_asks_a_g_QIUSDT = qty_asks_a_l_QIUSDT 

	if data['stream'] == streamqibtc :
		data = json.loads(message) 

		symbol_b_l_QIBTC = data['data']['s'] 
		price_bids_b_l_QIBTC = data['data']['b'] 
		qty_bids_b_l_QIBTC = data['data']['B']
		price_asks_b_l_QIBTC = data['data']['a'] 
		qty_asks_b_l_QIBTC = data['data']['A'] 

		global symbol_b_g_QIBTC 
		global price_bids_b_g_QIBTC 
		global qty_bids_b_g_QIBTC 
		global price_asks_b_g_QIBTC 
		global qty_asks_b_g_QIBTC 

		symbol_b_g_QIBTC = symbol_b_l_QIBTC 
		price_bids_b_g_QIBTC = price_bids_b_l_QIBTC 
		qty_bids_b_g_QIBTC = qty_bids_b_l_QIBTC 
		price_asks_b_g_QIBTC = price_asks_b_l_QIBTC 
		qty_asks_b_g_QIBTC = qty_asks_b_l_QIBTC 


def loop_QIUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamqiusdt}/{streamqibtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_QIUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_QIUSDT).start()

def loop_QIUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_QIUSDT != 0.0 and qty_bids_a_g_QIUSDT != 0.0 and price_asks_a_g_QIUSDT != 0.0 and qty_asks_a_g_QIUSDT != 0.0 and price_bids_b_g_QIBTC != 0.0 and qty_bids_b_g_QIBTC != 0.0 and price_asks_b_g_QIBTC != 0.0 and qty_asks_b_g_QIBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_QIBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_QIBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_QIUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_QIUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_QIBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_QIBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_QIUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_QIUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_QIBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_QIBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_QIUSDT_Trade).start() 

streamportousdt = 'portousdt@bookTicker'
streamportobtc  = 'portobtc@bookTicker'

symbol_a_g_PORTOUSDT = 'PORTOUSDT' 
price_bids_a_g_PORTOUSDT = float(0.0) 
qty_bids_a_g_PORTOUSDT = float(0.0) 
price_asks_a_g_PORTOUSDT = float(0.0) 
qty_asks_a_g_PORTOUSDT = float(0.0) 

stepSize_PORTOUSDT = 0.01000000 

symbol_b_g_PORTOBTC = 'PORTOBTC' 
price_bids_b_g_PORTOBTC = float(0.0) 
qty_bids_b_g_PORTOBTC = float(0.0) 
price_asks_b_g_PORTOBTC = float(0.0) 
qty_asks_b_g_PORTOBTC = float(0.0) 

stepSize_PORTOBTC = 0.01000000 

def on_message_PORTOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamportousdt :
		symbol_a_l_PORTOUSDT = data['data']['s'] 
		price_bids_a_l_PORTOUSDT = data['data']['b'] 
		qty_bids_a_l_PORTOUSDT = data['data']['B'] 
		price_asks_a_l_PORTOUSDT = data['data']['a'] 
		qty_asks_a_l_PORTOUSDT = data['data']['A'] 

		global symbol_a_g_PORTOUSDT 
		global price_bids_a_g_PORTOUSDT 
		global qty_bids_a_g_PORTOUSDT 
		global price_asks_a_g_PORTOUSDT 
		global qty_asks_a_g_PORTOUSDT 

		symbol_a_g_PORTOUSDT = symbol_a_l_PORTOUSDT 
		price_bids_a_g_PORTOUSDT = price_bids_a_l_PORTOUSDT 
		qty_bids_a_g_PORTOUSDT = qty_bids_a_l_PORTOUSDT 
		price_asks_a_g_PORTOUSDT = price_asks_a_l_PORTOUSDT 
		qty_asks_a_g_PORTOUSDT = qty_asks_a_l_PORTOUSDT 

	if data['stream'] == streamportobtc :
		data = json.loads(message) 

		symbol_b_l_PORTOBTC = data['data']['s'] 
		price_bids_b_l_PORTOBTC = data['data']['b'] 
		qty_bids_b_l_PORTOBTC = data['data']['B']
		price_asks_b_l_PORTOBTC = data['data']['a'] 
		qty_asks_b_l_PORTOBTC = data['data']['A'] 

		global symbol_b_g_PORTOBTC 
		global price_bids_b_g_PORTOBTC 
		global qty_bids_b_g_PORTOBTC 
		global price_asks_b_g_PORTOBTC 
		global qty_asks_b_g_PORTOBTC 

		symbol_b_g_PORTOBTC = symbol_b_l_PORTOBTC 
		price_bids_b_g_PORTOBTC = price_bids_b_l_PORTOBTC 
		qty_bids_b_g_PORTOBTC = qty_bids_b_l_PORTOBTC 
		price_asks_b_g_PORTOBTC = price_asks_b_l_PORTOBTC 
		qty_asks_b_g_PORTOBTC = qty_asks_b_l_PORTOBTC 


def loop_PORTOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamportousdt}/{streamportobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_PORTOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_PORTOUSDT).start()

def loop_PORTOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_PORTOUSDT != 0.0 and qty_bids_a_g_PORTOUSDT != 0.0 and price_asks_a_g_PORTOUSDT != 0.0 and qty_asks_a_g_PORTOUSDT != 0.0 and price_bids_b_g_PORTOBTC != 0.0 and qty_bids_b_g_PORTOBTC != 0.0 and price_asks_b_g_PORTOBTC != 0.0 and qty_asks_b_g_PORTOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_PORTOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_PORTOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_PORTOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_PORTOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_PORTOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_PORTOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_PORTOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_PORTOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_PORTOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_PORTOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_PORTOUSDT_Trade).start() 

streampowrusdt = 'powrusdt@bookTicker'
streampowrbtc  = 'powrbtc@bookTicker'

symbol_a_g_POWRUSDT = 'POWRUSDT' 
price_bids_a_g_POWRUSDT = float(0.0) 
qty_bids_a_g_POWRUSDT = float(0.0) 
price_asks_a_g_POWRUSDT = float(0.0) 
qty_asks_a_g_POWRUSDT = float(0.0) 

stepSize_POWRUSDT = 1.00000000 

symbol_b_g_POWRBTC = 'POWRBTC' 
price_bids_b_g_POWRBTC = float(0.0) 
qty_bids_b_g_POWRBTC = float(0.0) 
price_asks_b_g_POWRBTC = float(0.0) 
qty_asks_b_g_POWRBTC = float(0.0) 

stepSize_POWRBTC = 1.00000000 

def on_message_POWRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streampowrusdt :
		symbol_a_l_POWRUSDT = data['data']['s'] 
		price_bids_a_l_POWRUSDT = data['data']['b'] 
		qty_bids_a_l_POWRUSDT = data['data']['B'] 
		price_asks_a_l_POWRUSDT = data['data']['a'] 
		qty_asks_a_l_POWRUSDT = data['data']['A'] 

		global symbol_a_g_POWRUSDT 
		global price_bids_a_g_POWRUSDT 
		global qty_bids_a_g_POWRUSDT 
		global price_asks_a_g_POWRUSDT 
		global qty_asks_a_g_POWRUSDT 

		symbol_a_g_POWRUSDT = symbol_a_l_POWRUSDT 
		price_bids_a_g_POWRUSDT = price_bids_a_l_POWRUSDT 
		qty_bids_a_g_POWRUSDT = qty_bids_a_l_POWRUSDT 
		price_asks_a_g_POWRUSDT = price_asks_a_l_POWRUSDT 
		qty_asks_a_g_POWRUSDT = qty_asks_a_l_POWRUSDT 

	if data['stream'] == streampowrbtc :
		data = json.loads(message) 

		symbol_b_l_POWRBTC = data['data']['s'] 
		price_bids_b_l_POWRBTC = data['data']['b'] 
		qty_bids_b_l_POWRBTC = data['data']['B']
		price_asks_b_l_POWRBTC = data['data']['a'] 
		qty_asks_b_l_POWRBTC = data['data']['A'] 

		global symbol_b_g_POWRBTC 
		global price_bids_b_g_POWRBTC 
		global qty_bids_b_g_POWRBTC 
		global price_asks_b_g_POWRBTC 
		global qty_asks_b_g_POWRBTC 

		symbol_b_g_POWRBTC = symbol_b_l_POWRBTC 
		price_bids_b_g_POWRBTC = price_bids_b_l_POWRBTC 
		qty_bids_b_g_POWRBTC = qty_bids_b_l_POWRBTC 
		price_asks_b_g_POWRBTC = price_asks_b_l_POWRBTC 
		qty_asks_b_g_POWRBTC = qty_asks_b_l_POWRBTC 


def loop_POWRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streampowrusdt}/{streampowrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_POWRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_POWRUSDT).start()

def loop_POWRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_POWRUSDT != 0.0 and qty_bids_a_g_POWRUSDT != 0.0 and price_asks_a_g_POWRUSDT != 0.0 and qty_asks_a_g_POWRUSDT != 0.0 and price_bids_b_g_POWRBTC != 0.0 and qty_bids_b_g_POWRBTC != 0.0 and price_asks_b_g_POWRBTC != 0.0 and qty_asks_b_g_POWRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_POWRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_POWRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_POWRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_POWRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_POWRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_POWRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_POWRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_POWRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_POWRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_POWRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_POWRUSDT_Trade).start() 

streamjasmyusdt = 'jasmyusdt@bookTicker'
streamjasmybtc  = 'jasmybtc@bookTicker'

symbol_a_g_JASMYUSDT = 'JASMYUSDT' 
price_bids_a_g_JASMYUSDT = float(0.0) 
qty_bids_a_g_JASMYUSDT = float(0.0) 
price_asks_a_g_JASMYUSDT = float(0.0) 
qty_asks_a_g_JASMYUSDT = float(0.0) 

stepSize_JASMYUSDT = 0.10000000 

symbol_b_g_JASMYBTC = 'JASMYBTC' 
price_bids_b_g_JASMYBTC = float(0.0) 
qty_bids_b_g_JASMYBTC = float(0.0) 
price_asks_b_g_JASMYBTC = float(0.0) 
qty_asks_b_g_JASMYBTC = float(0.0) 

stepSize_JASMYBTC = 0.10000000 

def on_message_JASMYUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamjasmyusdt :
		symbol_a_l_JASMYUSDT = data['data']['s'] 
		price_bids_a_l_JASMYUSDT = data['data']['b'] 
		qty_bids_a_l_JASMYUSDT = data['data']['B'] 
		price_asks_a_l_JASMYUSDT = data['data']['a'] 
		qty_asks_a_l_JASMYUSDT = data['data']['A'] 

		global symbol_a_g_JASMYUSDT 
		global price_bids_a_g_JASMYUSDT 
		global qty_bids_a_g_JASMYUSDT 
		global price_asks_a_g_JASMYUSDT 
		global qty_asks_a_g_JASMYUSDT 

		symbol_a_g_JASMYUSDT = symbol_a_l_JASMYUSDT 
		price_bids_a_g_JASMYUSDT = price_bids_a_l_JASMYUSDT 
		qty_bids_a_g_JASMYUSDT = qty_bids_a_l_JASMYUSDT 
		price_asks_a_g_JASMYUSDT = price_asks_a_l_JASMYUSDT 
		qty_asks_a_g_JASMYUSDT = qty_asks_a_l_JASMYUSDT 

	if data['stream'] == streamjasmybtc :
		data = json.loads(message) 

		symbol_b_l_JASMYBTC = data['data']['s'] 
		price_bids_b_l_JASMYBTC = data['data']['b'] 
		qty_bids_b_l_JASMYBTC = data['data']['B']
		price_asks_b_l_JASMYBTC = data['data']['a'] 
		qty_asks_b_l_JASMYBTC = data['data']['A'] 

		global symbol_b_g_JASMYBTC 
		global price_bids_b_g_JASMYBTC 
		global qty_bids_b_g_JASMYBTC 
		global price_asks_b_g_JASMYBTC 
		global qty_asks_b_g_JASMYBTC 

		symbol_b_g_JASMYBTC = symbol_b_l_JASMYBTC 
		price_bids_b_g_JASMYBTC = price_bids_b_l_JASMYBTC 
		qty_bids_b_g_JASMYBTC = qty_bids_b_l_JASMYBTC 
		price_asks_b_g_JASMYBTC = price_asks_b_l_JASMYBTC 
		qty_asks_b_g_JASMYBTC = qty_asks_b_l_JASMYBTC 


def loop_JASMYUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamjasmyusdt}/{streamjasmybtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_JASMYUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_JASMYUSDT).start()

def loop_JASMYUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_JASMYUSDT != 0.0 and qty_bids_a_g_JASMYUSDT != 0.0 and price_asks_a_g_JASMYUSDT != 0.0 and qty_asks_a_g_JASMYUSDT != 0.0 and price_bids_b_g_JASMYBTC != 0.0 and qty_bids_b_g_JASMYBTC != 0.0 and price_asks_b_g_JASMYBTC != 0.0 and qty_asks_b_g_JASMYBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_JASMYBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_JASMYBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_JASMYUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_JASMYUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_JASMYBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_JASMYBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_JASMYUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_JASMYUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_JASMYBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_JASMYBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_JASMYUSDT_Trade).start() 

streamampusdt = 'ampusdt@bookTicker'
streamampbtc  = 'ampbtc@bookTicker'

symbol_a_g_AMPUSDT = 'AMPUSDT' 
price_bids_a_g_AMPUSDT = float(0.0) 
qty_bids_a_g_AMPUSDT = float(0.0) 
price_asks_a_g_AMPUSDT = float(0.0) 
qty_asks_a_g_AMPUSDT = float(0.0) 

stepSize_AMPUSDT = 1.00000000 

symbol_b_g_AMPBTC = 'AMPBTC' 
price_bids_b_g_AMPBTC = float(0.0) 
qty_bids_b_g_AMPBTC = float(0.0) 
price_asks_b_g_AMPBTC = float(0.0) 
qty_asks_b_g_AMPBTC = float(0.0) 

stepSize_AMPBTC = 1.00000000 

def on_message_AMPUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamampusdt :
		symbol_a_l_AMPUSDT = data['data']['s'] 
		price_bids_a_l_AMPUSDT = data['data']['b'] 
		qty_bids_a_l_AMPUSDT = data['data']['B'] 
		price_asks_a_l_AMPUSDT = data['data']['a'] 
		qty_asks_a_l_AMPUSDT = data['data']['A'] 

		global symbol_a_g_AMPUSDT 
		global price_bids_a_g_AMPUSDT 
		global qty_bids_a_g_AMPUSDT 
		global price_asks_a_g_AMPUSDT 
		global qty_asks_a_g_AMPUSDT 

		symbol_a_g_AMPUSDT = symbol_a_l_AMPUSDT 
		price_bids_a_g_AMPUSDT = price_bids_a_l_AMPUSDT 
		qty_bids_a_g_AMPUSDT = qty_bids_a_l_AMPUSDT 
		price_asks_a_g_AMPUSDT = price_asks_a_l_AMPUSDT 
		qty_asks_a_g_AMPUSDT = qty_asks_a_l_AMPUSDT 

	if data['stream'] == streamampbtc :
		data = json.loads(message) 

		symbol_b_l_AMPBTC = data['data']['s'] 
		price_bids_b_l_AMPBTC = data['data']['b'] 
		qty_bids_b_l_AMPBTC = data['data']['B']
		price_asks_b_l_AMPBTC = data['data']['a'] 
		qty_asks_b_l_AMPBTC = data['data']['A'] 

		global symbol_b_g_AMPBTC 
		global price_bids_b_g_AMPBTC 
		global qty_bids_b_g_AMPBTC 
		global price_asks_b_g_AMPBTC 
		global qty_asks_b_g_AMPBTC 

		symbol_b_g_AMPBTC = symbol_b_l_AMPBTC 
		price_bids_b_g_AMPBTC = price_bids_b_l_AMPBTC 
		qty_bids_b_g_AMPBTC = qty_bids_b_l_AMPBTC 
		price_asks_b_g_AMPBTC = price_asks_b_l_AMPBTC 
		qty_asks_b_g_AMPBTC = qty_asks_b_l_AMPBTC 


def loop_AMPUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamampusdt}/{streamampbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_AMPUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_AMPUSDT).start()

def loop_AMPUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_AMPUSDT != 0.0 and qty_bids_a_g_AMPUSDT != 0.0 and price_asks_a_g_AMPUSDT != 0.0 and qty_asks_a_g_AMPUSDT != 0.0 and price_bids_b_g_AMPBTC != 0.0 and qty_bids_b_g_AMPBTC != 0.0 and price_asks_b_g_AMPBTC != 0.0 and qty_asks_b_g_AMPBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_AMPBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_AMPBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_AMPUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_AMPUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_AMPBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_AMPBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_AMPUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_AMPUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_AMPBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_AMPBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_AMPUSDT_Trade).start() 

streamplausdt = 'plausdt@bookTicker'
streamplabtc  = 'plabtc@bookTicker'

symbol_a_g_PLAUSDT = 'PLAUSDT' 
price_bids_a_g_PLAUSDT = float(0.0) 
qty_bids_a_g_PLAUSDT = float(0.0) 
price_asks_a_g_PLAUSDT = float(0.0) 
qty_asks_a_g_PLAUSDT = float(0.0) 

stepSize_PLAUSDT = 0.01000000 

symbol_b_g_PLABTC = 'PLABTC' 
price_bids_b_g_PLABTC = float(0.0) 
qty_bids_b_g_PLABTC = float(0.0) 
price_asks_b_g_PLABTC = float(0.0) 
qty_asks_b_g_PLABTC = float(0.0) 

stepSize_PLABTC = 0.01000000 

def on_message_PLAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamplausdt :
		symbol_a_l_PLAUSDT = data['data']['s'] 
		price_bids_a_l_PLAUSDT = data['data']['b'] 
		qty_bids_a_l_PLAUSDT = data['data']['B'] 
		price_asks_a_l_PLAUSDT = data['data']['a'] 
		qty_asks_a_l_PLAUSDT = data['data']['A'] 

		global symbol_a_g_PLAUSDT 
		global price_bids_a_g_PLAUSDT 
		global qty_bids_a_g_PLAUSDT 
		global price_asks_a_g_PLAUSDT 
		global qty_asks_a_g_PLAUSDT 

		symbol_a_g_PLAUSDT = symbol_a_l_PLAUSDT 
		price_bids_a_g_PLAUSDT = price_bids_a_l_PLAUSDT 
		qty_bids_a_g_PLAUSDT = qty_bids_a_l_PLAUSDT 
		price_asks_a_g_PLAUSDT = price_asks_a_l_PLAUSDT 
		qty_asks_a_g_PLAUSDT = qty_asks_a_l_PLAUSDT 

	if data['stream'] == streamplabtc :
		data = json.loads(message) 

		symbol_b_l_PLABTC = data['data']['s'] 
		price_bids_b_l_PLABTC = data['data']['b'] 
		qty_bids_b_l_PLABTC = data['data']['B']
		price_asks_b_l_PLABTC = data['data']['a'] 
		qty_asks_b_l_PLABTC = data['data']['A'] 

		global symbol_b_g_PLABTC 
		global price_bids_b_g_PLABTC 
		global qty_bids_b_g_PLABTC 
		global price_asks_b_g_PLABTC 
		global qty_asks_b_g_PLABTC 

		symbol_b_g_PLABTC = symbol_b_l_PLABTC 
		price_bids_b_g_PLABTC = price_bids_b_l_PLABTC 
		qty_bids_b_g_PLABTC = qty_bids_b_l_PLABTC 
		price_asks_b_g_PLABTC = price_asks_b_l_PLABTC 
		qty_asks_b_g_PLABTC = qty_asks_b_l_PLABTC 


def loop_PLAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamplausdt}/{streamplabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_PLAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_PLAUSDT).start()

def loop_PLAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_PLAUSDT != 0.0 and qty_bids_a_g_PLAUSDT != 0.0 and price_asks_a_g_PLAUSDT != 0.0 and qty_asks_a_g_PLAUSDT != 0.0 and price_bids_b_g_PLABTC != 0.0 and qty_bids_b_g_PLABTC != 0.0 and price_asks_b_g_PLABTC != 0.0 and qty_asks_b_g_PLABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_PLABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_PLABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_PLAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_PLAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_PLABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_PLABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_PLAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_PLAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_PLABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_PLABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_PLAUSDT_Trade).start() 

streampyrusdt = 'pyrusdt@bookTicker'
streampyrbtc  = 'pyrbtc@bookTicker'

symbol_a_g_PYRUSDT = 'PYRUSDT' 
price_bids_a_g_PYRUSDT = float(0.0) 
qty_bids_a_g_PYRUSDT = float(0.0) 
price_asks_a_g_PYRUSDT = float(0.0) 
qty_asks_a_g_PYRUSDT = float(0.0) 

stepSize_PYRUSDT = 0.00100000 

symbol_b_g_PYRBTC = 'PYRBTC' 
price_bids_b_g_PYRBTC = float(0.0) 
qty_bids_b_g_PYRBTC = float(0.0) 
price_asks_b_g_PYRBTC = float(0.0) 
qty_asks_b_g_PYRBTC = float(0.0) 

stepSize_PYRBTC = 0.00100000 

def on_message_PYRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streampyrusdt :
		symbol_a_l_PYRUSDT = data['data']['s'] 
		price_bids_a_l_PYRUSDT = data['data']['b'] 
		qty_bids_a_l_PYRUSDT = data['data']['B'] 
		price_asks_a_l_PYRUSDT = data['data']['a'] 
		qty_asks_a_l_PYRUSDT = data['data']['A'] 

		global symbol_a_g_PYRUSDT 
		global price_bids_a_g_PYRUSDT 
		global qty_bids_a_g_PYRUSDT 
		global price_asks_a_g_PYRUSDT 
		global qty_asks_a_g_PYRUSDT 

		symbol_a_g_PYRUSDT = symbol_a_l_PYRUSDT 
		price_bids_a_g_PYRUSDT = price_bids_a_l_PYRUSDT 
		qty_bids_a_g_PYRUSDT = qty_bids_a_l_PYRUSDT 
		price_asks_a_g_PYRUSDT = price_asks_a_l_PYRUSDT 
		qty_asks_a_g_PYRUSDT = qty_asks_a_l_PYRUSDT 

	if data['stream'] == streampyrbtc :
		data = json.loads(message) 

		symbol_b_l_PYRBTC = data['data']['s'] 
		price_bids_b_l_PYRBTC = data['data']['b'] 
		qty_bids_b_l_PYRBTC = data['data']['B']
		price_asks_b_l_PYRBTC = data['data']['a'] 
		qty_asks_b_l_PYRBTC = data['data']['A'] 

		global symbol_b_g_PYRBTC 
		global price_bids_b_g_PYRBTC 
		global qty_bids_b_g_PYRBTC 
		global price_asks_b_g_PYRBTC 
		global qty_asks_b_g_PYRBTC 

		symbol_b_g_PYRBTC = symbol_b_l_PYRBTC 
		price_bids_b_g_PYRBTC = price_bids_b_l_PYRBTC 
		qty_bids_b_g_PYRBTC = qty_bids_b_l_PYRBTC 
		price_asks_b_g_PYRBTC = price_asks_b_l_PYRBTC 
		qty_asks_b_g_PYRBTC = qty_asks_b_l_PYRBTC 


def loop_PYRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streampyrusdt}/{streampyrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_PYRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_PYRUSDT).start()

def loop_PYRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_PYRUSDT != 0.0 and qty_bids_a_g_PYRUSDT != 0.0 and price_asks_a_g_PYRUSDT != 0.0 and qty_asks_a_g_PYRUSDT != 0.0 and price_bids_b_g_PYRBTC != 0.0 and qty_bids_b_g_PYRBTC != 0.0 and price_asks_b_g_PYRBTC != 0.0 and qty_asks_b_g_PYRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_PYRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_PYRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_PYRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_PYRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_PYRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_PYRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_PYRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_PYRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_PYRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_PYRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_PYRUSDT_Trade).start() 

streamrndrusdt = 'rndrusdt@bookTicker'
streamrndrbtc  = 'rndrbtc@bookTicker'

symbol_a_g_RNDRUSDT = 'RNDRUSDT' 
price_bids_a_g_RNDRUSDT = float(0.0) 
qty_bids_a_g_RNDRUSDT = float(0.0) 
price_asks_a_g_RNDRUSDT = float(0.0) 
qty_asks_a_g_RNDRUSDT = float(0.0) 

stepSize_RNDRUSDT = 0.01000000 

symbol_b_g_RNDRBTC = 'RNDRBTC' 
price_bids_b_g_RNDRBTC = float(0.0) 
qty_bids_b_g_RNDRBTC = float(0.0) 
price_asks_b_g_RNDRBTC = float(0.0) 
qty_asks_b_g_RNDRBTC = float(0.0) 

stepSize_RNDRBTC = 0.01000000 

def on_message_RNDRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamrndrusdt :
		symbol_a_l_RNDRUSDT = data['data']['s'] 
		price_bids_a_l_RNDRUSDT = data['data']['b'] 
		qty_bids_a_l_RNDRUSDT = data['data']['B'] 
		price_asks_a_l_RNDRUSDT = data['data']['a'] 
		qty_asks_a_l_RNDRUSDT = data['data']['A'] 

		global symbol_a_g_RNDRUSDT 
		global price_bids_a_g_RNDRUSDT 
		global qty_bids_a_g_RNDRUSDT 
		global price_asks_a_g_RNDRUSDT 
		global qty_asks_a_g_RNDRUSDT 

		symbol_a_g_RNDRUSDT = symbol_a_l_RNDRUSDT 
		price_bids_a_g_RNDRUSDT = price_bids_a_l_RNDRUSDT 
		qty_bids_a_g_RNDRUSDT = qty_bids_a_l_RNDRUSDT 
		price_asks_a_g_RNDRUSDT = price_asks_a_l_RNDRUSDT 
		qty_asks_a_g_RNDRUSDT = qty_asks_a_l_RNDRUSDT 

	if data['stream'] == streamrndrbtc :
		data = json.loads(message) 

		symbol_b_l_RNDRBTC = data['data']['s'] 
		price_bids_b_l_RNDRBTC = data['data']['b'] 
		qty_bids_b_l_RNDRBTC = data['data']['B']
		price_asks_b_l_RNDRBTC = data['data']['a'] 
		qty_asks_b_l_RNDRBTC = data['data']['A'] 

		global symbol_b_g_RNDRBTC 
		global price_bids_b_g_RNDRBTC 
		global qty_bids_b_g_RNDRBTC 
		global price_asks_b_g_RNDRBTC 
		global qty_asks_b_g_RNDRBTC 

		symbol_b_g_RNDRBTC = symbol_b_l_RNDRBTC 
		price_bids_b_g_RNDRBTC = price_bids_b_l_RNDRBTC 
		qty_bids_b_g_RNDRBTC = qty_bids_b_l_RNDRBTC 
		price_asks_b_g_RNDRBTC = price_asks_b_l_RNDRBTC 
		qty_asks_b_g_RNDRBTC = qty_asks_b_l_RNDRBTC 


def loop_RNDRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamrndrusdt}/{streamrndrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_RNDRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_RNDRUSDT).start()

def loop_RNDRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_RNDRUSDT != 0.0 and qty_bids_a_g_RNDRUSDT != 0.0 and price_asks_a_g_RNDRUSDT != 0.0 and qty_asks_a_g_RNDRUSDT != 0.0 and price_bids_b_g_RNDRBTC != 0.0 and qty_bids_b_g_RNDRBTC != 0.0 and price_asks_b_g_RNDRBTC != 0.0 and qty_asks_b_g_RNDRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_RNDRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_RNDRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_RNDRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_RNDRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_RNDRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_RNDRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_RNDRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_RNDRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_RNDRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_RNDRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_RNDRUSDT_Trade).start() 

streamalcxusdt = 'alcxusdt@bookTicker'
streamalcxbtc  = 'alcxbtc@bookTicker'

symbol_a_g_ALCXUSDT = 'ALCXUSDT' 
price_bids_a_g_ALCXUSDT = float(0.0) 
qty_bids_a_g_ALCXUSDT = float(0.0) 
price_asks_a_g_ALCXUSDT = float(0.0) 
qty_asks_a_g_ALCXUSDT = float(0.0) 

stepSize_ALCXUSDT = 0.00010000 

symbol_b_g_ALCXBTC = 'ALCXBTC' 
price_bids_b_g_ALCXBTC = float(0.0) 
qty_bids_b_g_ALCXBTC = float(0.0) 
price_asks_b_g_ALCXBTC = float(0.0) 
qty_asks_b_g_ALCXBTC = float(0.0) 

stepSize_ALCXBTC = 0.00010000 

def on_message_ALCXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamalcxusdt :
		symbol_a_l_ALCXUSDT = data['data']['s'] 
		price_bids_a_l_ALCXUSDT = data['data']['b'] 
		qty_bids_a_l_ALCXUSDT = data['data']['B'] 
		price_asks_a_l_ALCXUSDT = data['data']['a'] 
		qty_asks_a_l_ALCXUSDT = data['data']['A'] 

		global symbol_a_g_ALCXUSDT 
		global price_bids_a_g_ALCXUSDT 
		global qty_bids_a_g_ALCXUSDT 
		global price_asks_a_g_ALCXUSDT 
		global qty_asks_a_g_ALCXUSDT 

		symbol_a_g_ALCXUSDT = symbol_a_l_ALCXUSDT 
		price_bids_a_g_ALCXUSDT = price_bids_a_l_ALCXUSDT 
		qty_bids_a_g_ALCXUSDT = qty_bids_a_l_ALCXUSDT 
		price_asks_a_g_ALCXUSDT = price_asks_a_l_ALCXUSDT 
		qty_asks_a_g_ALCXUSDT = qty_asks_a_l_ALCXUSDT 

	if data['stream'] == streamalcxbtc :
		data = json.loads(message) 

		symbol_b_l_ALCXBTC = data['data']['s'] 
		price_bids_b_l_ALCXBTC = data['data']['b'] 
		qty_bids_b_l_ALCXBTC = data['data']['B']
		price_asks_b_l_ALCXBTC = data['data']['a'] 
		qty_asks_b_l_ALCXBTC = data['data']['A'] 

		global symbol_b_g_ALCXBTC 
		global price_bids_b_g_ALCXBTC 
		global qty_bids_b_g_ALCXBTC 
		global price_asks_b_g_ALCXBTC 
		global qty_asks_b_g_ALCXBTC 

		symbol_b_g_ALCXBTC = symbol_b_l_ALCXBTC 
		price_bids_b_g_ALCXBTC = price_bids_b_l_ALCXBTC 
		qty_bids_b_g_ALCXBTC = qty_bids_b_l_ALCXBTC 
		price_asks_b_g_ALCXBTC = price_asks_b_l_ALCXBTC 
		qty_asks_b_g_ALCXBTC = qty_asks_b_l_ALCXBTC 


def loop_ALCXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamalcxusdt}/{streamalcxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ALCXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ALCXUSDT).start()

def loop_ALCXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ALCXUSDT != 0.0 and qty_bids_a_g_ALCXUSDT != 0.0 and price_asks_a_g_ALCXUSDT != 0.0 and qty_asks_a_g_ALCXUSDT != 0.0 and price_bids_b_g_ALCXBTC != 0.0 and qty_bids_b_g_ALCXBTC != 0.0 and price_asks_b_g_ALCXBTC != 0.0 and qty_asks_b_g_ALCXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ALCXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ALCXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ALCXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ALCXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ALCXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ALCXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ALCXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ALCXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ALCXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ALCXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ALCXUSDT_Trade).start() 

streamsantosusdt = 'santosusdt@bookTicker'
streamsantosbtc  = 'santosbtc@bookTicker'

symbol_a_g_SANTOSUSDT = 'SANTOSUSDT' 
price_bids_a_g_SANTOSUSDT = float(0.0) 
qty_bids_a_g_SANTOSUSDT = float(0.0) 
price_asks_a_g_SANTOSUSDT = float(0.0) 
qty_asks_a_g_SANTOSUSDT = float(0.0) 

stepSize_SANTOSUSDT = 0.01000000 

symbol_b_g_SANTOSBTC = 'SANTOSBTC' 
price_bids_b_g_SANTOSBTC = float(0.0) 
qty_bids_b_g_SANTOSBTC = float(0.0) 
price_asks_b_g_SANTOSBTC = float(0.0) 
qty_asks_b_g_SANTOSBTC = float(0.0) 

stepSize_SANTOSBTC = 0.01000000 

def on_message_SANTOSUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamsantosusdt :
		symbol_a_l_SANTOSUSDT = data['data']['s'] 
		price_bids_a_l_SANTOSUSDT = data['data']['b'] 
		qty_bids_a_l_SANTOSUSDT = data['data']['B'] 
		price_asks_a_l_SANTOSUSDT = data['data']['a'] 
		qty_asks_a_l_SANTOSUSDT = data['data']['A'] 

		global symbol_a_g_SANTOSUSDT 
		global price_bids_a_g_SANTOSUSDT 
		global qty_bids_a_g_SANTOSUSDT 
		global price_asks_a_g_SANTOSUSDT 
		global qty_asks_a_g_SANTOSUSDT 

		symbol_a_g_SANTOSUSDT = symbol_a_l_SANTOSUSDT 
		price_bids_a_g_SANTOSUSDT = price_bids_a_l_SANTOSUSDT 
		qty_bids_a_g_SANTOSUSDT = qty_bids_a_l_SANTOSUSDT 
		price_asks_a_g_SANTOSUSDT = price_asks_a_l_SANTOSUSDT 
		qty_asks_a_g_SANTOSUSDT = qty_asks_a_l_SANTOSUSDT 

	if data['stream'] == streamsantosbtc :
		data = json.loads(message) 

		symbol_b_l_SANTOSBTC = data['data']['s'] 
		price_bids_b_l_SANTOSBTC = data['data']['b'] 
		qty_bids_b_l_SANTOSBTC = data['data']['B']
		price_asks_b_l_SANTOSBTC = data['data']['a'] 
		qty_asks_b_l_SANTOSBTC = data['data']['A'] 

		global symbol_b_g_SANTOSBTC 
		global price_bids_b_g_SANTOSBTC 
		global qty_bids_b_g_SANTOSBTC 
		global price_asks_b_g_SANTOSBTC 
		global qty_asks_b_g_SANTOSBTC 

		symbol_b_g_SANTOSBTC = symbol_b_l_SANTOSBTC 
		price_bids_b_g_SANTOSBTC = price_bids_b_l_SANTOSBTC 
		qty_bids_b_g_SANTOSBTC = qty_bids_b_l_SANTOSBTC 
		price_asks_b_g_SANTOSBTC = price_asks_b_l_SANTOSBTC 
		qty_asks_b_g_SANTOSBTC = qty_asks_b_l_SANTOSBTC 


def loop_SANTOSUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamsantosusdt}/{streamsantosbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_SANTOSUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_SANTOSUSDT).start()

def loop_SANTOSUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_SANTOSUSDT != 0.0 and qty_bids_a_g_SANTOSUSDT != 0.0 and price_asks_a_g_SANTOSUSDT != 0.0 and qty_asks_a_g_SANTOSUSDT != 0.0 and price_bids_b_g_SANTOSBTC != 0.0 and qty_bids_b_g_SANTOSBTC != 0.0 and price_asks_b_g_SANTOSBTC != 0.0 and qty_asks_b_g_SANTOSBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_SANTOSBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_SANTOSBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_SANTOSUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_SANTOSUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_SANTOSBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_SANTOSBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_SANTOSUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_SANTOSUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_SANTOSBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_SANTOSBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_SANTOSUSDT_Trade).start() 

streammcusdt = 'mcusdt@bookTicker'
streammcbtc  = 'mcbtc@bookTicker'

symbol_a_g_MCUSDT = 'MCUSDT' 
price_bids_a_g_MCUSDT = float(0.0) 
qty_bids_a_g_MCUSDT = float(0.0) 
price_asks_a_g_MCUSDT = float(0.0) 
qty_asks_a_g_MCUSDT = float(0.0) 

stepSize_MCUSDT = 0.01000000 

symbol_b_g_MCBTC = 'MCBTC' 
price_bids_b_g_MCBTC = float(0.0) 
qty_bids_b_g_MCBTC = float(0.0) 
price_asks_b_g_MCBTC = float(0.0) 
qty_asks_b_g_MCBTC = float(0.0) 

stepSize_MCBTC = 0.01000000 

def on_message_MCUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streammcusdt :
		symbol_a_l_MCUSDT = data['data']['s'] 
		price_bids_a_l_MCUSDT = data['data']['b'] 
		qty_bids_a_l_MCUSDT = data['data']['B'] 
		price_asks_a_l_MCUSDT = data['data']['a'] 
		qty_asks_a_l_MCUSDT = data['data']['A'] 

		global symbol_a_g_MCUSDT 
		global price_bids_a_g_MCUSDT 
		global qty_bids_a_g_MCUSDT 
		global price_asks_a_g_MCUSDT 
		global qty_asks_a_g_MCUSDT 

		symbol_a_g_MCUSDT = symbol_a_l_MCUSDT 
		price_bids_a_g_MCUSDT = price_bids_a_l_MCUSDT 
		qty_bids_a_g_MCUSDT = qty_bids_a_l_MCUSDT 
		price_asks_a_g_MCUSDT = price_asks_a_l_MCUSDT 
		qty_asks_a_g_MCUSDT = qty_asks_a_l_MCUSDT 

	if data['stream'] == streammcbtc :
		data = json.loads(message) 

		symbol_b_l_MCBTC = data['data']['s'] 
		price_bids_b_l_MCBTC = data['data']['b'] 
		qty_bids_b_l_MCBTC = data['data']['B']
		price_asks_b_l_MCBTC = data['data']['a'] 
		qty_asks_b_l_MCBTC = data['data']['A'] 

		global symbol_b_g_MCBTC 
		global price_bids_b_g_MCBTC 
		global qty_bids_b_g_MCBTC 
		global price_asks_b_g_MCBTC 
		global qty_asks_b_g_MCBTC 

		symbol_b_g_MCBTC = symbol_b_l_MCBTC 
		price_bids_b_g_MCBTC = price_bids_b_l_MCBTC 
		qty_bids_b_g_MCBTC = qty_bids_b_l_MCBTC 
		price_asks_b_g_MCBTC = price_asks_b_l_MCBTC 
		qty_asks_b_g_MCBTC = qty_asks_b_l_MCBTC 


def loop_MCUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streammcusdt}/{streammcbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_MCUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_MCUSDT).start()

def loop_MCUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_MCUSDT != 0.0 and qty_bids_a_g_MCUSDT != 0.0 and price_asks_a_g_MCUSDT != 0.0 and qty_asks_a_g_MCUSDT != 0.0 and price_bids_b_g_MCBTC != 0.0 and qty_bids_b_g_MCBTC != 0.0 and price_asks_b_g_MCBTC != 0.0 and qty_asks_b_g_MCBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_MCBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_MCBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_MCUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_MCUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_MCBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_MCBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_MCUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_MCUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_MCBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_MCBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_MCUSDT_Trade).start() 

streambicousdt = 'bicousdt@bookTicker'
streambicobtc  = 'bicobtc@bookTicker'

symbol_a_g_BICOUSDT = 'BICOUSDT' 
price_bids_a_g_BICOUSDT = float(0.0) 
qty_bids_a_g_BICOUSDT = float(0.0) 
price_asks_a_g_BICOUSDT = float(0.0) 
qty_asks_a_g_BICOUSDT = float(0.0) 

stepSize_BICOUSDT = 0.01000000 

symbol_b_g_BICOBTC = 'BICOBTC' 
price_bids_b_g_BICOBTC = float(0.0) 
qty_bids_b_g_BICOBTC = float(0.0) 
price_asks_b_g_BICOBTC = float(0.0) 
qty_asks_b_g_BICOBTC = float(0.0) 

stepSize_BICOBTC = 0.01000000 

def on_message_BICOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streambicousdt :
		symbol_a_l_BICOUSDT = data['data']['s'] 
		price_bids_a_l_BICOUSDT = data['data']['b'] 
		qty_bids_a_l_BICOUSDT = data['data']['B'] 
		price_asks_a_l_BICOUSDT = data['data']['a'] 
		qty_asks_a_l_BICOUSDT = data['data']['A'] 

		global symbol_a_g_BICOUSDT 
		global price_bids_a_g_BICOUSDT 
		global qty_bids_a_g_BICOUSDT 
		global price_asks_a_g_BICOUSDT 
		global qty_asks_a_g_BICOUSDT 

		symbol_a_g_BICOUSDT = symbol_a_l_BICOUSDT 
		price_bids_a_g_BICOUSDT = price_bids_a_l_BICOUSDT 
		qty_bids_a_g_BICOUSDT = qty_bids_a_l_BICOUSDT 
		price_asks_a_g_BICOUSDT = price_asks_a_l_BICOUSDT 
		qty_asks_a_g_BICOUSDT = qty_asks_a_l_BICOUSDT 

	if data['stream'] == streambicobtc :
		data = json.loads(message) 

		symbol_b_l_BICOBTC = data['data']['s'] 
		price_bids_b_l_BICOBTC = data['data']['b'] 
		qty_bids_b_l_BICOBTC = data['data']['B']
		price_asks_b_l_BICOBTC = data['data']['a'] 
		qty_asks_b_l_BICOBTC = data['data']['A'] 

		global symbol_b_g_BICOBTC 
		global price_bids_b_g_BICOBTC 
		global qty_bids_b_g_BICOBTC 
		global price_asks_b_g_BICOBTC 
		global qty_asks_b_g_BICOBTC 

		symbol_b_g_BICOBTC = symbol_b_l_BICOBTC 
		price_bids_b_g_BICOBTC = price_bids_b_l_BICOBTC 
		qty_bids_b_g_BICOBTC = qty_bids_b_l_BICOBTC 
		price_asks_b_g_BICOBTC = price_asks_b_l_BICOBTC 
		qty_asks_b_g_BICOBTC = qty_asks_b_l_BICOBTC 


def loop_BICOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streambicousdt}/{streambicobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_BICOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_BICOUSDT).start()

def loop_BICOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_BICOUSDT != 0.0 and qty_bids_a_g_BICOUSDT != 0.0 and price_asks_a_g_BICOUSDT != 0.0 and qty_asks_a_g_BICOUSDT != 0.0 and price_bids_b_g_BICOBTC != 0.0 and qty_bids_b_g_BICOBTC != 0.0 and price_asks_b_g_BICOBTC != 0.0 and qty_asks_b_g_BICOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_BICOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_BICOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_BICOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_BICOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_BICOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_BICOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_BICOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_BICOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_BICOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_BICOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_BICOUSDT_Trade).start() 

streamfluxusdt = 'fluxusdt@bookTicker'
streamfluxbtc  = 'fluxbtc@bookTicker'

symbol_a_g_FLUXUSDT = 'FLUXUSDT' 
price_bids_a_g_FLUXUSDT = float(0.0) 
qty_bids_a_g_FLUXUSDT = float(0.0) 
price_asks_a_g_FLUXUSDT = float(0.0) 
qty_asks_a_g_FLUXUSDT = float(0.0) 

stepSize_FLUXUSDT = 0.01000000 

symbol_b_g_FLUXBTC = 'FLUXBTC' 
price_bids_b_g_FLUXBTC = float(0.0) 
qty_bids_b_g_FLUXBTC = float(0.0) 
price_asks_b_g_FLUXBTC = float(0.0) 
qty_asks_b_g_FLUXBTC = float(0.0) 

stepSize_FLUXBTC = 0.01000000 

def on_message_FLUXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamfluxusdt :
		symbol_a_l_FLUXUSDT = data['data']['s'] 
		price_bids_a_l_FLUXUSDT = data['data']['b'] 
		qty_bids_a_l_FLUXUSDT = data['data']['B'] 
		price_asks_a_l_FLUXUSDT = data['data']['a'] 
		qty_asks_a_l_FLUXUSDT = data['data']['A'] 

		global symbol_a_g_FLUXUSDT 
		global price_bids_a_g_FLUXUSDT 
		global qty_bids_a_g_FLUXUSDT 
		global price_asks_a_g_FLUXUSDT 
		global qty_asks_a_g_FLUXUSDT 

		symbol_a_g_FLUXUSDT = symbol_a_l_FLUXUSDT 
		price_bids_a_g_FLUXUSDT = price_bids_a_l_FLUXUSDT 
		qty_bids_a_g_FLUXUSDT = qty_bids_a_l_FLUXUSDT 
		price_asks_a_g_FLUXUSDT = price_asks_a_l_FLUXUSDT 
		qty_asks_a_g_FLUXUSDT = qty_asks_a_l_FLUXUSDT 

	if data['stream'] == streamfluxbtc :
		data = json.loads(message) 

		symbol_b_l_FLUXBTC = data['data']['s'] 
		price_bids_b_l_FLUXBTC = data['data']['b'] 
		qty_bids_b_l_FLUXBTC = data['data']['B']
		price_asks_b_l_FLUXBTC = data['data']['a'] 
		qty_asks_b_l_FLUXBTC = data['data']['A'] 

		global symbol_b_g_FLUXBTC 
		global price_bids_b_g_FLUXBTC 
		global qty_bids_b_g_FLUXBTC 
		global price_asks_b_g_FLUXBTC 
		global qty_asks_b_g_FLUXBTC 

		symbol_b_g_FLUXBTC = symbol_b_l_FLUXBTC 
		price_bids_b_g_FLUXBTC = price_bids_b_l_FLUXBTC 
		qty_bids_b_g_FLUXBTC = qty_bids_b_l_FLUXBTC 
		price_asks_b_g_FLUXBTC = price_asks_b_l_FLUXBTC 
		qty_asks_b_g_FLUXBTC = qty_asks_b_l_FLUXBTC 


def loop_FLUXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamfluxusdt}/{streamfluxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FLUXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FLUXUSDT).start()

def loop_FLUXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FLUXUSDT != 0.0 and qty_bids_a_g_FLUXUSDT != 0.0 and price_asks_a_g_FLUXUSDT != 0.0 and qty_asks_a_g_FLUXUSDT != 0.0 and price_bids_b_g_FLUXBTC != 0.0 and qty_bids_b_g_FLUXBTC != 0.0 and price_asks_b_g_FLUXBTC != 0.0 and qty_asks_b_g_FLUXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FLUXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FLUXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FLUXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FLUXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FLUXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FLUXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FLUXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FLUXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FLUXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FLUXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FLUXUSDT_Trade).start() 

streamfxsusdt = 'fxsusdt@bookTicker'
streamfxsbtc  = 'fxsbtc@bookTicker'

symbol_a_g_FXSUSDT = 'FXSUSDT' 
price_bids_a_g_FXSUSDT = float(0.0) 
qty_bids_a_g_FXSUSDT = float(0.0) 
price_asks_a_g_FXSUSDT = float(0.0) 
qty_asks_a_g_FXSUSDT = float(0.0) 

stepSize_FXSUSDT = 0.10000000 

symbol_b_g_FXSBTC = 'FXSBTC' 
price_bids_b_g_FXSBTC = float(0.0) 
qty_bids_b_g_FXSBTC = float(0.0) 
price_asks_b_g_FXSBTC = float(0.0) 
qty_asks_b_g_FXSBTC = float(0.0) 

stepSize_FXSBTC = 0.10000000 

def on_message_FXSUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamfxsusdt :
		symbol_a_l_FXSUSDT = data['data']['s'] 
		price_bids_a_l_FXSUSDT = data['data']['b'] 
		qty_bids_a_l_FXSUSDT = data['data']['B'] 
		price_asks_a_l_FXSUSDT = data['data']['a'] 
		qty_asks_a_l_FXSUSDT = data['data']['A'] 

		global symbol_a_g_FXSUSDT 
		global price_bids_a_g_FXSUSDT 
		global qty_bids_a_g_FXSUSDT 
		global price_asks_a_g_FXSUSDT 
		global qty_asks_a_g_FXSUSDT 

		symbol_a_g_FXSUSDT = symbol_a_l_FXSUSDT 
		price_bids_a_g_FXSUSDT = price_bids_a_l_FXSUSDT 
		qty_bids_a_g_FXSUSDT = qty_bids_a_l_FXSUSDT 
		price_asks_a_g_FXSUSDT = price_asks_a_l_FXSUSDT 
		qty_asks_a_g_FXSUSDT = qty_asks_a_l_FXSUSDT 

	if data['stream'] == streamfxsbtc :
		data = json.loads(message) 

		symbol_b_l_FXSBTC = data['data']['s'] 
		price_bids_b_l_FXSBTC = data['data']['b'] 
		qty_bids_b_l_FXSBTC = data['data']['B']
		price_asks_b_l_FXSBTC = data['data']['a'] 
		qty_asks_b_l_FXSBTC = data['data']['A'] 

		global symbol_b_g_FXSBTC 
		global price_bids_b_g_FXSBTC 
		global qty_bids_b_g_FXSBTC 
		global price_asks_b_g_FXSBTC 
		global qty_asks_b_g_FXSBTC 

		symbol_b_g_FXSBTC = symbol_b_l_FXSBTC 
		price_bids_b_g_FXSBTC = price_bids_b_l_FXSBTC 
		qty_bids_b_g_FXSBTC = qty_bids_b_l_FXSBTC 
		price_asks_b_g_FXSBTC = price_asks_b_l_FXSBTC 
		qty_asks_b_g_FXSBTC = qty_asks_b_l_FXSBTC 


def loop_FXSUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamfxsusdt}/{streamfxsbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_FXSUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_FXSUSDT).start()

def loop_FXSUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_FXSUSDT != 0.0 and qty_bids_a_g_FXSUSDT != 0.0 and price_asks_a_g_FXSUSDT != 0.0 and qty_asks_a_g_FXSUSDT != 0.0 and price_bids_b_g_FXSBTC != 0.0 and qty_bids_b_g_FXSBTC != 0.0 and price_asks_b_g_FXSBTC != 0.0 and qty_asks_b_g_FXSBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_FXSBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_FXSBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_FXSUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_FXSUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_FXSBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_FXSBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_FXSUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_FXSUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_FXSBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_FXSBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_FXSUSDT_Trade).start() 

streamvoxelusdt = 'voxelusdt@bookTicker'
streamvoxelbtc  = 'voxelbtc@bookTicker'

symbol_a_g_VOXELUSDT = 'VOXELUSDT' 
price_bids_a_g_VOXELUSDT = float(0.0) 
qty_bids_a_g_VOXELUSDT = float(0.0) 
price_asks_a_g_VOXELUSDT = float(0.0) 
qty_asks_a_g_VOXELUSDT = float(0.0) 

stepSize_VOXELUSDT = 0.10000000 

symbol_b_g_VOXELBTC = 'VOXELBTC' 
price_bids_b_g_VOXELBTC = float(0.0) 
qty_bids_b_g_VOXELBTC = float(0.0) 
price_asks_b_g_VOXELBTC = float(0.0) 
qty_asks_b_g_VOXELBTC = float(0.0) 

stepSize_VOXELBTC = 0.10000000 

def on_message_VOXELUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamvoxelusdt :
		symbol_a_l_VOXELUSDT = data['data']['s'] 
		price_bids_a_l_VOXELUSDT = data['data']['b'] 
		qty_bids_a_l_VOXELUSDT = data['data']['B'] 
		price_asks_a_l_VOXELUSDT = data['data']['a'] 
		qty_asks_a_l_VOXELUSDT = data['data']['A'] 

		global symbol_a_g_VOXELUSDT 
		global price_bids_a_g_VOXELUSDT 
		global qty_bids_a_g_VOXELUSDT 
		global price_asks_a_g_VOXELUSDT 
		global qty_asks_a_g_VOXELUSDT 

		symbol_a_g_VOXELUSDT = symbol_a_l_VOXELUSDT 
		price_bids_a_g_VOXELUSDT = price_bids_a_l_VOXELUSDT 
		qty_bids_a_g_VOXELUSDT = qty_bids_a_l_VOXELUSDT 
		price_asks_a_g_VOXELUSDT = price_asks_a_l_VOXELUSDT 
		qty_asks_a_g_VOXELUSDT = qty_asks_a_l_VOXELUSDT 

	if data['stream'] == streamvoxelbtc :
		data = json.loads(message) 

		symbol_b_l_VOXELBTC = data['data']['s'] 
		price_bids_b_l_VOXELBTC = data['data']['b'] 
		qty_bids_b_l_VOXELBTC = data['data']['B']
		price_asks_b_l_VOXELBTC = data['data']['a'] 
		qty_asks_b_l_VOXELBTC = data['data']['A'] 

		global symbol_b_g_VOXELBTC 
		global price_bids_b_g_VOXELBTC 
		global qty_bids_b_g_VOXELBTC 
		global price_asks_b_g_VOXELBTC 
		global qty_asks_b_g_VOXELBTC 

		symbol_b_g_VOXELBTC = symbol_b_l_VOXELBTC 
		price_bids_b_g_VOXELBTC = price_bids_b_l_VOXELBTC 
		qty_bids_b_g_VOXELBTC = qty_bids_b_l_VOXELBTC 
		price_asks_b_g_VOXELBTC = price_asks_b_l_VOXELBTC 
		qty_asks_b_g_VOXELBTC = qty_asks_b_l_VOXELBTC 


def loop_VOXELUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamvoxelusdt}/{streamvoxelbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_VOXELUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_VOXELUSDT).start()

def loop_VOXELUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_VOXELUSDT != 0.0 and qty_bids_a_g_VOXELUSDT != 0.0 and price_asks_a_g_VOXELUSDT != 0.0 and qty_asks_a_g_VOXELUSDT != 0.0 and price_bids_b_g_VOXELBTC != 0.0 and qty_bids_b_g_VOXELBTC != 0.0 and price_asks_b_g_VOXELBTC != 0.0 and qty_asks_b_g_VOXELBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_VOXELBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_VOXELBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_VOXELUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_VOXELUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_VOXELBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_VOXELBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_VOXELUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_VOXELUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_VOXELBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_VOXELBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_VOXELUSDT_Trade).start() 

streamhighusdt = 'highusdt@bookTicker'
streamhighbtc  = 'highbtc@bookTicker'

symbol_a_g_HIGHUSDT = 'HIGHUSDT' 
price_bids_a_g_HIGHUSDT = float(0.0) 
qty_bids_a_g_HIGHUSDT = float(0.0) 
price_asks_a_g_HIGHUSDT = float(0.0) 
qty_asks_a_g_HIGHUSDT = float(0.0) 

stepSize_HIGHUSDT = 0.00100000 

symbol_b_g_HIGHBTC = 'HIGHBTC' 
price_bids_b_g_HIGHBTC = float(0.0) 
qty_bids_b_g_HIGHBTC = float(0.0) 
price_asks_b_g_HIGHBTC = float(0.0) 
qty_asks_b_g_HIGHBTC = float(0.0) 

stepSize_HIGHBTC = 0.00100000 

def on_message_HIGHUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamhighusdt :
		symbol_a_l_HIGHUSDT = data['data']['s'] 
		price_bids_a_l_HIGHUSDT = data['data']['b'] 
		qty_bids_a_l_HIGHUSDT = data['data']['B'] 
		price_asks_a_l_HIGHUSDT = data['data']['a'] 
		qty_asks_a_l_HIGHUSDT = data['data']['A'] 

		global symbol_a_g_HIGHUSDT 
		global price_bids_a_g_HIGHUSDT 
		global qty_bids_a_g_HIGHUSDT 
		global price_asks_a_g_HIGHUSDT 
		global qty_asks_a_g_HIGHUSDT 

		symbol_a_g_HIGHUSDT = symbol_a_l_HIGHUSDT 
		price_bids_a_g_HIGHUSDT = price_bids_a_l_HIGHUSDT 
		qty_bids_a_g_HIGHUSDT = qty_bids_a_l_HIGHUSDT 
		price_asks_a_g_HIGHUSDT = price_asks_a_l_HIGHUSDT 
		qty_asks_a_g_HIGHUSDT = qty_asks_a_l_HIGHUSDT 

	if data['stream'] == streamhighbtc :
		data = json.loads(message) 

		symbol_b_l_HIGHBTC = data['data']['s'] 
		price_bids_b_l_HIGHBTC = data['data']['b'] 
		qty_bids_b_l_HIGHBTC = data['data']['B']
		price_asks_b_l_HIGHBTC = data['data']['a'] 
		qty_asks_b_l_HIGHBTC = data['data']['A'] 

		global symbol_b_g_HIGHBTC 
		global price_bids_b_g_HIGHBTC 
		global qty_bids_b_g_HIGHBTC 
		global price_asks_b_g_HIGHBTC 
		global qty_asks_b_g_HIGHBTC 

		symbol_b_g_HIGHBTC = symbol_b_l_HIGHBTC 
		price_bids_b_g_HIGHBTC = price_bids_b_l_HIGHBTC 
		qty_bids_b_g_HIGHBTC = qty_bids_b_l_HIGHBTC 
		price_asks_b_g_HIGHBTC = price_asks_b_l_HIGHBTC 
		qty_asks_b_g_HIGHBTC = qty_asks_b_l_HIGHBTC 


def loop_HIGHUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamhighusdt}/{streamhighbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_HIGHUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_HIGHUSDT).start()

def loop_HIGHUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_HIGHUSDT != 0.0 and qty_bids_a_g_HIGHUSDT != 0.0 and price_asks_a_g_HIGHUSDT != 0.0 and qty_asks_a_g_HIGHUSDT != 0.0 and price_bids_b_g_HIGHBTC != 0.0 and qty_bids_b_g_HIGHBTC != 0.0 and price_asks_b_g_HIGHBTC != 0.0 and qty_asks_b_g_HIGHBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_HIGHBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_HIGHBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_HIGHUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_HIGHUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_HIGHBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_HIGHBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_HIGHUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_HIGHUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_HIGHBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_HIGHBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_HIGHUSDT_Trade).start() 

streamcvxusdt = 'cvxusdt@bookTicker'
streamcvxbtc  = 'cvxbtc@bookTicker'

symbol_a_g_CVXUSDT = 'CVXUSDT' 
price_bids_a_g_CVXUSDT = float(0.0) 
qty_bids_a_g_CVXUSDT = float(0.0) 
price_asks_a_g_CVXUSDT = float(0.0) 
qty_asks_a_g_CVXUSDT = float(0.0) 

stepSize_CVXUSDT = 0.00100000 

symbol_b_g_CVXBTC = 'CVXBTC' 
price_bids_b_g_CVXBTC = float(0.0) 
qty_bids_b_g_CVXBTC = float(0.0) 
price_asks_b_g_CVXBTC = float(0.0) 
qty_asks_b_g_CVXBTC = float(0.0) 

stepSize_CVXBTC = 0.00100000 

def on_message_CVXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamcvxusdt :
		symbol_a_l_CVXUSDT = data['data']['s'] 
		price_bids_a_l_CVXUSDT = data['data']['b'] 
		qty_bids_a_l_CVXUSDT = data['data']['B'] 
		price_asks_a_l_CVXUSDT = data['data']['a'] 
		qty_asks_a_l_CVXUSDT = data['data']['A'] 

		global symbol_a_g_CVXUSDT 
		global price_bids_a_g_CVXUSDT 
		global qty_bids_a_g_CVXUSDT 
		global price_asks_a_g_CVXUSDT 
		global qty_asks_a_g_CVXUSDT 

		symbol_a_g_CVXUSDT = symbol_a_l_CVXUSDT 
		price_bids_a_g_CVXUSDT = price_bids_a_l_CVXUSDT 
		qty_bids_a_g_CVXUSDT = qty_bids_a_l_CVXUSDT 
		price_asks_a_g_CVXUSDT = price_asks_a_l_CVXUSDT 
		qty_asks_a_g_CVXUSDT = qty_asks_a_l_CVXUSDT 

	if data['stream'] == streamcvxbtc :
		data = json.loads(message) 

		symbol_b_l_CVXBTC = data['data']['s'] 
		price_bids_b_l_CVXBTC = data['data']['b'] 
		qty_bids_b_l_CVXBTC = data['data']['B']
		price_asks_b_l_CVXBTC = data['data']['a'] 
		qty_asks_b_l_CVXBTC = data['data']['A'] 

		global symbol_b_g_CVXBTC 
		global price_bids_b_g_CVXBTC 
		global qty_bids_b_g_CVXBTC 
		global price_asks_b_g_CVXBTC 
		global qty_asks_b_g_CVXBTC 

		symbol_b_g_CVXBTC = symbol_b_l_CVXBTC 
		price_bids_b_g_CVXBTC = price_bids_b_l_CVXBTC 
		qty_bids_b_g_CVXBTC = qty_bids_b_l_CVXBTC 
		price_asks_b_g_CVXBTC = price_asks_b_l_CVXBTC 
		qty_asks_b_g_CVXBTC = qty_asks_b_l_CVXBTC 


def loop_CVXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamcvxusdt}/{streamcvxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_CVXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_CVXUSDT).start()

def loop_CVXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_CVXUSDT != 0.0 and qty_bids_a_g_CVXUSDT != 0.0 and price_asks_a_g_CVXUSDT != 0.0 and qty_asks_a_g_CVXUSDT != 0.0 and price_bids_b_g_CVXBTC != 0.0 and qty_bids_b_g_CVXBTC != 0.0 and price_asks_b_g_CVXBTC != 0.0 and qty_asks_b_g_CVXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_CVXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_CVXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_CVXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_CVXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_CVXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_CVXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_CVXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_CVXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_CVXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_CVXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_CVXUSDT_Trade).start() 

streampeopleusdt = 'peopleusdt@bookTicker'
streampeoplebtc  = 'peoplebtc@bookTicker'

symbol_a_g_PEOPLEUSDT = 'PEOPLEUSDT' 
price_bids_a_g_PEOPLEUSDT = float(0.0) 
qty_bids_a_g_PEOPLEUSDT = float(0.0) 
price_asks_a_g_PEOPLEUSDT = float(0.0) 
qty_asks_a_g_PEOPLEUSDT = float(0.0) 

stepSize_PEOPLEUSDT = 0.10000000 

symbol_b_g_PEOPLEBTC = 'PEOPLEBTC' 
price_bids_b_g_PEOPLEBTC = float(0.0) 
qty_bids_b_g_PEOPLEBTC = float(0.0) 
price_asks_b_g_PEOPLEBTC = float(0.0) 
qty_asks_b_g_PEOPLEBTC = float(0.0) 

stepSize_PEOPLEBTC = 0.10000000 

def on_message_PEOPLEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streampeopleusdt :
		symbol_a_l_PEOPLEUSDT = data['data']['s'] 
		price_bids_a_l_PEOPLEUSDT = data['data']['b'] 
		qty_bids_a_l_PEOPLEUSDT = data['data']['B'] 
		price_asks_a_l_PEOPLEUSDT = data['data']['a'] 
		qty_asks_a_l_PEOPLEUSDT = data['data']['A'] 

		global symbol_a_g_PEOPLEUSDT 
		global price_bids_a_g_PEOPLEUSDT 
		global qty_bids_a_g_PEOPLEUSDT 
		global price_asks_a_g_PEOPLEUSDT 
		global qty_asks_a_g_PEOPLEUSDT 

		symbol_a_g_PEOPLEUSDT = symbol_a_l_PEOPLEUSDT 
		price_bids_a_g_PEOPLEUSDT = price_bids_a_l_PEOPLEUSDT 
		qty_bids_a_g_PEOPLEUSDT = qty_bids_a_l_PEOPLEUSDT 
		price_asks_a_g_PEOPLEUSDT = price_asks_a_l_PEOPLEUSDT 
		qty_asks_a_g_PEOPLEUSDT = qty_asks_a_l_PEOPLEUSDT 

	if data['stream'] == streampeoplebtc :
		data = json.loads(message) 

		symbol_b_l_PEOPLEBTC = data['data']['s'] 
		price_bids_b_l_PEOPLEBTC = data['data']['b'] 
		qty_bids_b_l_PEOPLEBTC = data['data']['B']
		price_asks_b_l_PEOPLEBTC = data['data']['a'] 
		qty_asks_b_l_PEOPLEBTC = data['data']['A'] 

		global symbol_b_g_PEOPLEBTC 
		global price_bids_b_g_PEOPLEBTC 
		global qty_bids_b_g_PEOPLEBTC 
		global price_asks_b_g_PEOPLEBTC 
		global qty_asks_b_g_PEOPLEBTC 

		symbol_b_g_PEOPLEBTC = symbol_b_l_PEOPLEBTC 
		price_bids_b_g_PEOPLEBTC = price_bids_b_l_PEOPLEBTC 
		qty_bids_b_g_PEOPLEBTC = qty_bids_b_l_PEOPLEBTC 
		price_asks_b_g_PEOPLEBTC = price_asks_b_l_PEOPLEBTC 
		qty_asks_b_g_PEOPLEBTC = qty_asks_b_l_PEOPLEBTC 


def loop_PEOPLEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streampeopleusdt}/{streampeoplebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_PEOPLEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_PEOPLEUSDT).start()

def loop_PEOPLEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_PEOPLEUSDT != 0.0 and qty_bids_a_g_PEOPLEUSDT != 0.0 and price_asks_a_g_PEOPLEUSDT != 0.0 and qty_asks_a_g_PEOPLEUSDT != 0.0 and price_bids_b_g_PEOPLEBTC != 0.0 and qty_bids_b_g_PEOPLEBTC != 0.0 and price_asks_b_g_PEOPLEBTC != 0.0 and qty_asks_b_g_PEOPLEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_PEOPLEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_PEOPLEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_PEOPLEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_PEOPLEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_PEOPLEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_PEOPLEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_PEOPLEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_PEOPLEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_PEOPLEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_PEOPLEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_PEOPLEUSDT_Trade).start() 

streamjoeusdt = 'joeusdt@bookTicker'
streamjoebtc  = 'joebtc@bookTicker'

symbol_a_g_JOEUSDT = 'JOEUSDT' 
price_bids_a_g_JOEUSDT = float(0.0) 
qty_bids_a_g_JOEUSDT = float(0.0) 
price_asks_a_g_JOEUSDT = float(0.0) 
qty_asks_a_g_JOEUSDT = float(0.0) 

stepSize_JOEUSDT = 0.01000000 

symbol_b_g_JOEBTC = 'JOEBTC' 
price_bids_b_g_JOEBTC = float(0.0) 
qty_bids_b_g_JOEBTC = float(0.0) 
price_asks_b_g_JOEBTC = float(0.0) 
qty_asks_b_g_JOEBTC = float(0.0) 

stepSize_JOEBTC = 0.01000000 

def on_message_JOEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamjoeusdt :
		symbol_a_l_JOEUSDT = data['data']['s'] 
		price_bids_a_l_JOEUSDT = data['data']['b'] 
		qty_bids_a_l_JOEUSDT = data['data']['B'] 
		price_asks_a_l_JOEUSDT = data['data']['a'] 
		qty_asks_a_l_JOEUSDT = data['data']['A'] 

		global symbol_a_g_JOEUSDT 
		global price_bids_a_g_JOEUSDT 
		global qty_bids_a_g_JOEUSDT 
		global price_asks_a_g_JOEUSDT 
		global qty_asks_a_g_JOEUSDT 

		symbol_a_g_JOEUSDT = symbol_a_l_JOEUSDT 
		price_bids_a_g_JOEUSDT = price_bids_a_l_JOEUSDT 
		qty_bids_a_g_JOEUSDT = qty_bids_a_l_JOEUSDT 
		price_asks_a_g_JOEUSDT = price_asks_a_l_JOEUSDT 
		qty_asks_a_g_JOEUSDT = qty_asks_a_l_JOEUSDT 

	if data['stream'] == streamjoebtc :
		data = json.loads(message) 

		symbol_b_l_JOEBTC = data['data']['s'] 
		price_bids_b_l_JOEBTC = data['data']['b'] 
		qty_bids_b_l_JOEBTC = data['data']['B']
		price_asks_b_l_JOEBTC = data['data']['a'] 
		qty_asks_b_l_JOEBTC = data['data']['A'] 

		global symbol_b_g_JOEBTC 
		global price_bids_b_g_JOEBTC 
		global qty_bids_b_g_JOEBTC 
		global price_asks_b_g_JOEBTC 
		global qty_asks_b_g_JOEBTC 

		symbol_b_g_JOEBTC = symbol_b_l_JOEBTC 
		price_bids_b_g_JOEBTC = price_bids_b_l_JOEBTC 
		qty_bids_b_g_JOEBTC = qty_bids_b_l_JOEBTC 
		price_asks_b_g_JOEBTC = price_asks_b_l_JOEBTC 
		qty_asks_b_g_JOEBTC = qty_asks_b_l_JOEBTC 


def loop_JOEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamjoeusdt}/{streamjoebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_JOEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_JOEUSDT).start()

def loop_JOEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_JOEUSDT != 0.0 and qty_bids_a_g_JOEUSDT != 0.0 and price_asks_a_g_JOEUSDT != 0.0 and qty_asks_a_g_JOEUSDT != 0.0 and price_bids_b_g_JOEBTC != 0.0 and qty_bids_b_g_JOEBTC != 0.0 and price_asks_b_g_JOEBTC != 0.0 and qty_asks_b_g_JOEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_JOEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_JOEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_JOEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_JOEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_JOEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_JOEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_JOEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_JOEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_JOEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_JOEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_JOEUSDT_Trade).start() 

streamachusdt = 'achusdt@bookTicker'
streamachbtc  = 'achbtc@bookTicker'

symbol_a_g_ACHUSDT = 'ACHUSDT' 
price_bids_a_g_ACHUSDT = float(0.0) 
qty_bids_a_g_ACHUSDT = float(0.0) 
price_asks_a_g_ACHUSDT = float(0.0) 
qty_asks_a_g_ACHUSDT = float(0.0) 

stepSize_ACHUSDT = 1.00000000 

symbol_b_g_ACHBTC = 'ACHBTC' 
price_bids_b_g_ACHBTC = float(0.0) 
qty_bids_b_g_ACHBTC = float(0.0) 
price_asks_b_g_ACHBTC = float(0.0) 
qty_asks_b_g_ACHBTC = float(0.0) 

stepSize_ACHBTC = 1.00000000 

def on_message_ACHUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamachusdt :
		symbol_a_l_ACHUSDT = data['data']['s'] 
		price_bids_a_l_ACHUSDT = data['data']['b'] 
		qty_bids_a_l_ACHUSDT = data['data']['B'] 
		price_asks_a_l_ACHUSDT = data['data']['a'] 
		qty_asks_a_l_ACHUSDT = data['data']['A'] 

		global symbol_a_g_ACHUSDT 
		global price_bids_a_g_ACHUSDT 
		global qty_bids_a_g_ACHUSDT 
		global price_asks_a_g_ACHUSDT 
		global qty_asks_a_g_ACHUSDT 

		symbol_a_g_ACHUSDT = symbol_a_l_ACHUSDT 
		price_bids_a_g_ACHUSDT = price_bids_a_l_ACHUSDT 
		qty_bids_a_g_ACHUSDT = qty_bids_a_l_ACHUSDT 
		price_asks_a_g_ACHUSDT = price_asks_a_l_ACHUSDT 
		qty_asks_a_g_ACHUSDT = qty_asks_a_l_ACHUSDT 

	if data['stream'] == streamachbtc :
		data = json.loads(message) 

		symbol_b_l_ACHBTC = data['data']['s'] 
		price_bids_b_l_ACHBTC = data['data']['b'] 
		qty_bids_b_l_ACHBTC = data['data']['B']
		price_asks_b_l_ACHBTC = data['data']['a'] 
		qty_asks_b_l_ACHBTC = data['data']['A'] 

		global symbol_b_g_ACHBTC 
		global price_bids_b_g_ACHBTC 
		global qty_bids_b_g_ACHBTC 
		global price_asks_b_g_ACHBTC 
		global qty_asks_b_g_ACHBTC 

		symbol_b_g_ACHBTC = symbol_b_l_ACHBTC 
		price_bids_b_g_ACHBTC = price_bids_b_l_ACHBTC 
		qty_bids_b_g_ACHBTC = qty_bids_b_l_ACHBTC 
		price_asks_b_g_ACHBTC = price_asks_b_l_ACHBTC 
		qty_asks_b_g_ACHBTC = qty_asks_b_l_ACHBTC 


def loop_ACHUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamachusdt}/{streamachbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ACHUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ACHUSDT).start()

def loop_ACHUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ACHUSDT != 0.0 and qty_bids_a_g_ACHUSDT != 0.0 and price_asks_a_g_ACHUSDT != 0.0 and qty_asks_a_g_ACHUSDT != 0.0 and price_bids_b_g_ACHBTC != 0.0 and qty_bids_b_g_ACHBTC != 0.0 and price_asks_b_g_ACHBTC != 0.0 and qty_asks_b_g_ACHBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ACHBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ACHBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ACHUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ACHUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ACHBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ACHBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ACHUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ACHUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ACHBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ACHBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ACHUSDT_Trade).start() 

streamimxusdt = 'imxusdt@bookTicker'
streamimxbtc  = 'imxbtc@bookTicker'

symbol_a_g_IMXUSDT = 'IMXUSDT' 
price_bids_a_g_IMXUSDT = float(0.0) 
qty_bids_a_g_IMXUSDT = float(0.0) 
price_asks_a_g_IMXUSDT = float(0.0) 
qty_asks_a_g_IMXUSDT = float(0.0) 

stepSize_IMXUSDT = 0.01000000 

symbol_b_g_IMXBTC = 'IMXBTC' 
price_bids_b_g_IMXBTC = float(0.0) 
qty_bids_b_g_IMXBTC = float(0.0) 
price_asks_b_g_IMXBTC = float(0.0) 
qty_asks_b_g_IMXBTC = float(0.0) 

stepSize_IMXBTC = 0.01000000 

def on_message_IMXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamimxusdt :
		symbol_a_l_IMXUSDT = data['data']['s'] 
		price_bids_a_l_IMXUSDT = data['data']['b'] 
		qty_bids_a_l_IMXUSDT = data['data']['B'] 
		price_asks_a_l_IMXUSDT = data['data']['a'] 
		qty_asks_a_l_IMXUSDT = data['data']['A'] 

		global symbol_a_g_IMXUSDT 
		global price_bids_a_g_IMXUSDT 
		global qty_bids_a_g_IMXUSDT 
		global price_asks_a_g_IMXUSDT 
		global qty_asks_a_g_IMXUSDT 

		symbol_a_g_IMXUSDT = symbol_a_l_IMXUSDT 
		price_bids_a_g_IMXUSDT = price_bids_a_l_IMXUSDT 
		qty_bids_a_g_IMXUSDT = qty_bids_a_l_IMXUSDT 
		price_asks_a_g_IMXUSDT = price_asks_a_l_IMXUSDT 
		qty_asks_a_g_IMXUSDT = qty_asks_a_l_IMXUSDT 

	if data['stream'] == streamimxbtc :
		data = json.loads(message) 

		symbol_b_l_IMXBTC = data['data']['s'] 
		price_bids_b_l_IMXBTC = data['data']['b'] 
		qty_bids_b_l_IMXBTC = data['data']['B']
		price_asks_b_l_IMXBTC = data['data']['a'] 
		qty_asks_b_l_IMXBTC = data['data']['A'] 

		global symbol_b_g_IMXBTC 
		global price_bids_b_g_IMXBTC 
		global qty_bids_b_g_IMXBTC 
		global price_asks_b_g_IMXBTC 
		global qty_asks_b_g_IMXBTC 

		symbol_b_g_IMXBTC = symbol_b_l_IMXBTC 
		price_bids_b_g_IMXBTC = price_bids_b_l_IMXBTC 
		qty_bids_b_g_IMXBTC = qty_bids_b_l_IMXBTC 
		price_asks_b_g_IMXBTC = price_asks_b_l_IMXBTC 
		qty_asks_b_g_IMXBTC = qty_asks_b_l_IMXBTC 


def loop_IMXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamimxusdt}/{streamimxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_IMXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_IMXUSDT).start()

def loop_IMXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_IMXUSDT != 0.0 and qty_bids_a_g_IMXUSDT != 0.0 and price_asks_a_g_IMXUSDT != 0.0 and qty_asks_a_g_IMXUSDT != 0.0 and price_bids_b_g_IMXBTC != 0.0 and qty_bids_b_g_IMXBTC != 0.0 and price_asks_b_g_IMXBTC != 0.0 and qty_asks_b_g_IMXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_IMXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_IMXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_IMXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_IMXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_IMXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_IMXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_IMXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_IMXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_IMXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_IMXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_IMXUSDT_Trade).start() 

streamglmrusdt = 'glmrusdt@bookTicker'
streamglmrbtc  = 'glmrbtc@bookTicker'

symbol_a_g_GLMRUSDT = 'GLMRUSDT' 
price_bids_a_g_GLMRUSDT = float(0.0) 
qty_bids_a_g_GLMRUSDT = float(0.0) 
price_asks_a_g_GLMRUSDT = float(0.0) 
qty_asks_a_g_GLMRUSDT = float(0.0) 

stepSize_GLMRUSDT = 0.10000000 

symbol_b_g_GLMRBTC = 'GLMRBTC' 
price_bids_b_g_GLMRBTC = float(0.0) 
qty_bids_b_g_GLMRBTC = float(0.0) 
price_asks_b_g_GLMRBTC = float(0.0) 
qty_asks_b_g_GLMRBTC = float(0.0) 

stepSize_GLMRBTC = 0.10000000 

def on_message_GLMRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamglmrusdt :
		symbol_a_l_GLMRUSDT = data['data']['s'] 
		price_bids_a_l_GLMRUSDT = data['data']['b'] 
		qty_bids_a_l_GLMRUSDT = data['data']['B'] 
		price_asks_a_l_GLMRUSDT = data['data']['a'] 
		qty_asks_a_l_GLMRUSDT = data['data']['A'] 

		global symbol_a_g_GLMRUSDT 
		global price_bids_a_g_GLMRUSDT 
		global qty_bids_a_g_GLMRUSDT 
		global price_asks_a_g_GLMRUSDT 
		global qty_asks_a_g_GLMRUSDT 

		symbol_a_g_GLMRUSDT = symbol_a_l_GLMRUSDT 
		price_bids_a_g_GLMRUSDT = price_bids_a_l_GLMRUSDT 
		qty_bids_a_g_GLMRUSDT = qty_bids_a_l_GLMRUSDT 
		price_asks_a_g_GLMRUSDT = price_asks_a_l_GLMRUSDT 
		qty_asks_a_g_GLMRUSDT = qty_asks_a_l_GLMRUSDT 

	if data['stream'] == streamglmrbtc :
		data = json.loads(message) 

		symbol_b_l_GLMRBTC = data['data']['s'] 
		price_bids_b_l_GLMRBTC = data['data']['b'] 
		qty_bids_b_l_GLMRBTC = data['data']['B']
		price_asks_b_l_GLMRBTC = data['data']['a'] 
		qty_asks_b_l_GLMRBTC = data['data']['A'] 

		global symbol_b_g_GLMRBTC 
		global price_bids_b_g_GLMRBTC 
		global qty_bids_b_g_GLMRBTC 
		global price_asks_b_g_GLMRBTC 
		global qty_asks_b_g_GLMRBTC 

		symbol_b_g_GLMRBTC = symbol_b_l_GLMRBTC 
		price_bids_b_g_GLMRBTC = price_bids_b_l_GLMRBTC 
		qty_bids_b_g_GLMRBTC = qty_bids_b_l_GLMRBTC 
		price_asks_b_g_GLMRBTC = price_asks_b_l_GLMRBTC 
		qty_asks_b_g_GLMRBTC = qty_asks_b_l_GLMRBTC 


def loop_GLMRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamglmrusdt}/{streamglmrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_GLMRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_GLMRUSDT).start()

def loop_GLMRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_GLMRUSDT != 0.0 and qty_bids_a_g_GLMRUSDT != 0.0 and price_asks_a_g_GLMRUSDT != 0.0 and qty_asks_a_g_GLMRUSDT != 0.0 and price_bids_b_g_GLMRBTC != 0.0 and qty_bids_b_g_GLMRBTC != 0.0 and price_asks_b_g_GLMRBTC != 0.0 and qty_asks_b_g_GLMRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_GLMRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_GLMRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_GLMRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_GLMRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_GLMRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_GLMRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_GLMRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_GLMRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_GLMRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_GLMRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_GLMRUSDT_Trade).start() 

streamlokausdt = 'lokausdt@bookTicker'
streamlokabtc  = 'lokabtc@bookTicker'

symbol_a_g_LOKAUSDT = 'LOKAUSDT' 
price_bids_a_g_LOKAUSDT = float(0.0) 
qty_bids_a_g_LOKAUSDT = float(0.0) 
price_asks_a_g_LOKAUSDT = float(0.0) 
qty_asks_a_g_LOKAUSDT = float(0.0) 

stepSize_LOKAUSDT = 0.10000000 

symbol_b_g_LOKABTC = 'LOKABTC' 
price_bids_b_g_LOKABTC = float(0.0) 
qty_bids_b_g_LOKABTC = float(0.0) 
price_asks_b_g_LOKABTC = float(0.0) 
qty_asks_b_g_LOKABTC = float(0.0) 

stepSize_LOKABTC = 0.10000000 

def on_message_LOKAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamlokausdt :
		symbol_a_l_LOKAUSDT = data['data']['s'] 
		price_bids_a_l_LOKAUSDT = data['data']['b'] 
		qty_bids_a_l_LOKAUSDT = data['data']['B'] 
		price_asks_a_l_LOKAUSDT = data['data']['a'] 
		qty_asks_a_l_LOKAUSDT = data['data']['A'] 

		global symbol_a_g_LOKAUSDT 
		global price_bids_a_g_LOKAUSDT 
		global qty_bids_a_g_LOKAUSDT 
		global price_asks_a_g_LOKAUSDT 
		global qty_asks_a_g_LOKAUSDT 

		symbol_a_g_LOKAUSDT = symbol_a_l_LOKAUSDT 
		price_bids_a_g_LOKAUSDT = price_bids_a_l_LOKAUSDT 
		qty_bids_a_g_LOKAUSDT = qty_bids_a_l_LOKAUSDT 
		price_asks_a_g_LOKAUSDT = price_asks_a_l_LOKAUSDT 
		qty_asks_a_g_LOKAUSDT = qty_asks_a_l_LOKAUSDT 

	if data['stream'] == streamlokabtc :
		data = json.loads(message) 

		symbol_b_l_LOKABTC = data['data']['s'] 
		price_bids_b_l_LOKABTC = data['data']['b'] 
		qty_bids_b_l_LOKABTC = data['data']['B']
		price_asks_b_l_LOKABTC = data['data']['a'] 
		qty_asks_b_l_LOKABTC = data['data']['A'] 

		global symbol_b_g_LOKABTC 
		global price_bids_b_g_LOKABTC 
		global qty_bids_b_g_LOKABTC 
		global price_asks_b_g_LOKABTC 
		global qty_asks_b_g_LOKABTC 

		symbol_b_g_LOKABTC = symbol_b_l_LOKABTC 
		price_bids_b_g_LOKABTC = price_bids_b_l_LOKABTC 
		qty_bids_b_g_LOKABTC = qty_bids_b_l_LOKABTC 
		price_asks_b_g_LOKABTC = price_asks_b_l_LOKABTC 
		qty_asks_b_g_LOKABTC = qty_asks_b_l_LOKABTC 


def loop_LOKAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamlokausdt}/{streamlokabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_LOKAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_LOKAUSDT).start()

def loop_LOKAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_LOKAUSDT != 0.0 and qty_bids_a_g_LOKAUSDT != 0.0 and price_asks_a_g_LOKAUSDT != 0.0 and qty_asks_a_g_LOKAUSDT != 0.0 and price_bids_b_g_LOKABTC != 0.0 and qty_bids_b_g_LOKABTC != 0.0 and price_asks_b_g_LOKABTC != 0.0 and qty_asks_b_g_LOKABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_LOKABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_LOKABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_LOKAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_LOKAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_LOKABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_LOKABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_LOKAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_LOKAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_LOKABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_LOKABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_LOKAUSDT_Trade).start() 

streamscrtusdt = 'scrtusdt@bookTicker'
streamscrtbtc  = 'scrtbtc@bookTicker'

symbol_a_g_SCRTUSDT = 'SCRTUSDT' 
price_bids_a_g_SCRTUSDT = float(0.0) 
qty_bids_a_g_SCRTUSDT = float(0.0) 
price_asks_a_g_SCRTUSDT = float(0.0) 
qty_asks_a_g_SCRTUSDT = float(0.0) 

stepSize_SCRTUSDT = 0.10000000 

symbol_b_g_SCRTBTC = 'SCRTBTC' 
price_bids_b_g_SCRTBTC = float(0.0) 
qty_bids_b_g_SCRTBTC = float(0.0) 
price_asks_b_g_SCRTBTC = float(0.0) 
qty_asks_b_g_SCRTBTC = float(0.0) 

stepSize_SCRTBTC = 0.10000000 

def on_message_SCRTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamscrtusdt :
		symbol_a_l_SCRTUSDT = data['data']['s'] 
		price_bids_a_l_SCRTUSDT = data['data']['b'] 
		qty_bids_a_l_SCRTUSDT = data['data']['B'] 
		price_asks_a_l_SCRTUSDT = data['data']['a'] 
		qty_asks_a_l_SCRTUSDT = data['data']['A'] 

		global symbol_a_g_SCRTUSDT 
		global price_bids_a_g_SCRTUSDT 
		global qty_bids_a_g_SCRTUSDT 
		global price_asks_a_g_SCRTUSDT 
		global qty_asks_a_g_SCRTUSDT 

		symbol_a_g_SCRTUSDT = symbol_a_l_SCRTUSDT 
		price_bids_a_g_SCRTUSDT = price_bids_a_l_SCRTUSDT 
		qty_bids_a_g_SCRTUSDT = qty_bids_a_l_SCRTUSDT 
		price_asks_a_g_SCRTUSDT = price_asks_a_l_SCRTUSDT 
		qty_asks_a_g_SCRTUSDT = qty_asks_a_l_SCRTUSDT 

	if data['stream'] == streamscrtbtc :
		data = json.loads(message) 

		symbol_b_l_SCRTBTC = data['data']['s'] 
		price_bids_b_l_SCRTBTC = data['data']['b'] 
		qty_bids_b_l_SCRTBTC = data['data']['B']
		price_asks_b_l_SCRTBTC = data['data']['a'] 
		qty_asks_b_l_SCRTBTC = data['data']['A'] 

		global symbol_b_g_SCRTBTC 
		global price_bids_b_g_SCRTBTC 
		global qty_bids_b_g_SCRTBTC 
		global price_asks_b_g_SCRTBTC 
		global qty_asks_b_g_SCRTBTC 

		symbol_b_g_SCRTBTC = symbol_b_l_SCRTBTC 
		price_bids_b_g_SCRTBTC = price_bids_b_l_SCRTBTC 
		qty_bids_b_g_SCRTBTC = qty_bids_b_l_SCRTBTC 
		price_asks_b_g_SCRTBTC = price_asks_b_l_SCRTBTC 
		qty_asks_b_g_SCRTBTC = qty_asks_b_l_SCRTBTC 


def loop_SCRTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamscrtusdt}/{streamscrtbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_SCRTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_SCRTUSDT).start()

def loop_SCRTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_SCRTUSDT != 0.0 and qty_bids_a_g_SCRTUSDT != 0.0 and price_asks_a_g_SCRTUSDT != 0.0 and qty_asks_a_g_SCRTUSDT != 0.0 and price_bids_b_g_SCRTBTC != 0.0 and qty_bids_b_g_SCRTBTC != 0.0 and price_asks_b_g_SCRTBTC != 0.0 and qty_asks_b_g_SCRTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_SCRTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_SCRTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_SCRTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_SCRTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_SCRTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_SCRTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_SCRTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_SCRTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_SCRTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_SCRTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_SCRTUSDT_Trade).start() 

streamapi3usdt = 'api3usdt@bookTicker'
streamapi3btc  = 'api3btc@bookTicker'

symbol_a_g_API3USDT = 'API3USDT' 
price_bids_a_g_API3USDT = float(0.0) 
qty_bids_a_g_API3USDT = float(0.0) 
price_asks_a_g_API3USDT = float(0.0) 
qty_asks_a_g_API3USDT = float(0.0) 

stepSize_API3USDT = 0.01000000 

symbol_b_g_API3BTC = 'API3BTC' 
price_bids_b_g_API3BTC = float(0.0) 
qty_bids_b_g_API3BTC = float(0.0) 
price_asks_b_g_API3BTC = float(0.0) 
qty_asks_b_g_API3BTC = float(0.0) 

stepSize_API3BTC = 0.01000000 

def on_message_API3USDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamapi3usdt :
		symbol_a_l_API3USDT = data['data']['s'] 
		price_bids_a_l_API3USDT = data['data']['b'] 
		qty_bids_a_l_API3USDT = data['data']['B'] 
		price_asks_a_l_API3USDT = data['data']['a'] 
		qty_asks_a_l_API3USDT = data['data']['A'] 

		global symbol_a_g_API3USDT 
		global price_bids_a_g_API3USDT 
		global qty_bids_a_g_API3USDT 
		global price_asks_a_g_API3USDT 
		global qty_asks_a_g_API3USDT 

		symbol_a_g_API3USDT = symbol_a_l_API3USDT 
		price_bids_a_g_API3USDT = price_bids_a_l_API3USDT 
		qty_bids_a_g_API3USDT = qty_bids_a_l_API3USDT 
		price_asks_a_g_API3USDT = price_asks_a_l_API3USDT 
		qty_asks_a_g_API3USDT = qty_asks_a_l_API3USDT 

	if data['stream'] == streamapi3btc :
		data = json.loads(message) 

		symbol_b_l_API3BTC = data['data']['s'] 
		price_bids_b_l_API3BTC = data['data']['b'] 
		qty_bids_b_l_API3BTC = data['data']['B']
		price_asks_b_l_API3BTC = data['data']['a'] 
		qty_asks_b_l_API3BTC = data['data']['A'] 

		global symbol_b_g_API3BTC 
		global price_bids_b_g_API3BTC 
		global qty_bids_b_g_API3BTC 
		global price_asks_b_g_API3BTC 
		global qty_asks_b_g_API3BTC 

		symbol_b_g_API3BTC = symbol_b_l_API3BTC 
		price_bids_b_g_API3BTC = price_bids_b_l_API3BTC 
		qty_bids_b_g_API3BTC = qty_bids_b_l_API3BTC 
		price_asks_b_g_API3BTC = price_asks_b_l_API3BTC 
		qty_asks_b_g_API3BTC = qty_asks_b_l_API3BTC 


def loop_API3USDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamapi3usdt}/{streamapi3btc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_API3USDT 
	) 

	ws.run_forever() 

Thread(target=loop_API3USDT).start()

def loop_API3USDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_API3USDT != 0.0 and qty_bids_a_g_API3USDT != 0.0 and price_asks_a_g_API3USDT != 0.0 and qty_asks_a_g_API3USDT != 0.0 and price_bids_b_g_API3BTC != 0.0 and qty_bids_b_g_API3BTC != 0.0 and price_asks_b_g_API3BTC != 0.0 and qty_asks_b_g_API3BTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_API3BTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_API3BTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_API3USDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_API3USDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_API3BTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_API3BTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_API3USDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_API3USDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_API3BTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_API3BTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_API3USDT_Trade).start() 

streamacausdt = 'acausdt@bookTicker'
streamacabtc  = 'acabtc@bookTicker'

symbol_a_g_ACAUSDT = 'ACAUSDT' 
price_bids_a_g_ACAUSDT = float(0.0) 
qty_bids_a_g_ACAUSDT = float(0.0) 
price_asks_a_g_ACAUSDT = float(0.0) 
qty_asks_a_g_ACAUSDT = float(0.0) 

stepSize_ACAUSDT = 0.01000000 

symbol_b_g_ACABTC = 'ACABTC' 
price_bids_b_g_ACABTC = float(0.0) 
qty_bids_b_g_ACABTC = float(0.0) 
price_asks_b_g_ACABTC = float(0.0) 
qty_asks_b_g_ACABTC = float(0.0) 

stepSize_ACABTC = 0.01000000 

def on_message_ACAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamacausdt :
		symbol_a_l_ACAUSDT = data['data']['s'] 
		price_bids_a_l_ACAUSDT = data['data']['b'] 
		qty_bids_a_l_ACAUSDT = data['data']['B'] 
		price_asks_a_l_ACAUSDT = data['data']['a'] 
		qty_asks_a_l_ACAUSDT = data['data']['A'] 

		global symbol_a_g_ACAUSDT 
		global price_bids_a_g_ACAUSDT 
		global qty_bids_a_g_ACAUSDT 
		global price_asks_a_g_ACAUSDT 
		global qty_asks_a_g_ACAUSDT 

		symbol_a_g_ACAUSDT = symbol_a_l_ACAUSDT 
		price_bids_a_g_ACAUSDT = price_bids_a_l_ACAUSDT 
		qty_bids_a_g_ACAUSDT = qty_bids_a_l_ACAUSDT 
		price_asks_a_g_ACAUSDT = price_asks_a_l_ACAUSDT 
		qty_asks_a_g_ACAUSDT = qty_asks_a_l_ACAUSDT 

	if data['stream'] == streamacabtc :
		data = json.loads(message) 

		symbol_b_l_ACABTC = data['data']['s'] 
		price_bids_b_l_ACABTC = data['data']['b'] 
		qty_bids_b_l_ACABTC = data['data']['B']
		price_asks_b_l_ACABTC = data['data']['a'] 
		qty_asks_b_l_ACABTC = data['data']['A'] 

		global symbol_b_g_ACABTC 
		global price_bids_b_g_ACABTC 
		global qty_bids_b_g_ACABTC 
		global price_asks_b_g_ACABTC 
		global qty_asks_b_g_ACABTC 

		symbol_b_g_ACABTC = symbol_b_l_ACABTC 
		price_bids_b_g_ACABTC = price_bids_b_l_ACABTC 
		qty_bids_b_g_ACABTC = qty_bids_b_l_ACABTC 
		price_asks_b_g_ACABTC = price_asks_b_l_ACABTC 
		qty_asks_b_g_ACABTC = qty_asks_b_l_ACABTC 


def loop_ACAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamacausdt}/{streamacabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ACAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ACAUSDT).start()

def loop_ACAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ACAUSDT != 0.0 and qty_bids_a_g_ACAUSDT != 0.0 and price_asks_a_g_ACAUSDT != 0.0 and qty_asks_a_g_ACAUSDT != 0.0 and price_bids_b_g_ACABTC != 0.0 and qty_bids_b_g_ACABTC != 0.0 and price_asks_b_g_ACABTC != 0.0 and qty_asks_b_g_ACABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ACABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ACABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ACAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ACAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ACABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ACABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ACAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ACAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ACABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ACABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ACAUSDT_Trade).start() 

streamancusdt = 'ancusdt@bookTicker'
streamancbtc  = 'ancbtc@bookTicker'

symbol_a_g_ANCUSDT = 'ANCUSDT' 
price_bids_a_g_ANCUSDT = float(0.0) 
qty_bids_a_g_ANCUSDT = float(0.0) 
price_asks_a_g_ANCUSDT = float(0.0) 
qty_asks_a_g_ANCUSDT = float(0.0) 

stepSize_ANCUSDT = 0.01000000 

symbol_b_g_ANCBTC = 'ANCBTC' 
price_bids_b_g_ANCBTC = float(0.0) 
qty_bids_b_g_ANCBTC = float(0.0) 
price_asks_b_g_ANCBTC = float(0.0) 
qty_asks_b_g_ANCBTC = float(0.0) 

stepSize_ANCBTC = 0.01000000 

def on_message_ANCUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamancusdt :
		symbol_a_l_ANCUSDT = data['data']['s'] 
		price_bids_a_l_ANCUSDT = data['data']['b'] 
		qty_bids_a_l_ANCUSDT = data['data']['B'] 
		price_asks_a_l_ANCUSDT = data['data']['a'] 
		qty_asks_a_l_ANCUSDT = data['data']['A'] 

		global symbol_a_g_ANCUSDT 
		global price_bids_a_g_ANCUSDT 
		global qty_bids_a_g_ANCUSDT 
		global price_asks_a_g_ANCUSDT 
		global qty_asks_a_g_ANCUSDT 

		symbol_a_g_ANCUSDT = symbol_a_l_ANCUSDT 
		price_bids_a_g_ANCUSDT = price_bids_a_l_ANCUSDT 
		qty_bids_a_g_ANCUSDT = qty_bids_a_l_ANCUSDT 
		price_asks_a_g_ANCUSDT = price_asks_a_l_ANCUSDT 
		qty_asks_a_g_ANCUSDT = qty_asks_a_l_ANCUSDT 

	if data['stream'] == streamancbtc :
		data = json.loads(message) 

		symbol_b_l_ANCBTC = data['data']['s'] 
		price_bids_b_l_ANCBTC = data['data']['b'] 
		qty_bids_b_l_ANCBTC = data['data']['B']
		price_asks_b_l_ANCBTC = data['data']['a'] 
		qty_asks_b_l_ANCBTC = data['data']['A'] 

		global symbol_b_g_ANCBTC 
		global price_bids_b_g_ANCBTC 
		global qty_bids_b_g_ANCBTC 
		global price_asks_b_g_ANCBTC 
		global qty_asks_b_g_ANCBTC 

		symbol_b_g_ANCBTC = symbol_b_l_ANCBTC 
		price_bids_b_g_ANCBTC = price_bids_b_l_ANCBTC 
		qty_bids_b_g_ANCBTC = qty_bids_b_l_ANCBTC 
		price_asks_b_g_ANCBTC = price_asks_b_l_ANCBTC 
		qty_asks_b_g_ANCBTC = qty_asks_b_l_ANCBTC 


def loop_ANCUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamancusdt}/{streamancbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ANCUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ANCUSDT).start()

def loop_ANCUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ANCUSDT != 0.0 and qty_bids_a_g_ANCUSDT != 0.0 and price_asks_a_g_ANCUSDT != 0.0 and qty_asks_a_g_ANCUSDT != 0.0 and price_bids_b_g_ANCBTC != 0.0 and qty_bids_b_g_ANCBTC != 0.0 and price_asks_b_g_ANCBTC != 0.0 and qty_asks_b_g_ANCBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ANCBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ANCBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ANCUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ANCUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ANCBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ANCBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ANCUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ANCUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ANCBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ANCBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ANCUSDT_Trade).start() 

streamxnousdt = 'xnousdt@bookTicker'
streamxnobtc  = 'xnobtc@bookTicker'

symbol_a_g_XNOUSDT = 'XNOUSDT' 
price_bids_a_g_XNOUSDT = float(0.0) 
qty_bids_a_g_XNOUSDT = float(0.0) 
price_asks_a_g_XNOUSDT = float(0.0) 
qty_asks_a_g_XNOUSDT = float(0.0) 

stepSize_XNOUSDT = 0.01000000 

symbol_b_g_XNOBTC = 'XNOBTC' 
price_bids_b_g_XNOBTC = float(0.0) 
qty_bids_b_g_XNOBTC = float(0.0) 
price_asks_b_g_XNOBTC = float(0.0) 
qty_asks_b_g_XNOBTC = float(0.0) 

stepSize_XNOBTC = 0.01000000 

def on_message_XNOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamxnousdt :
		symbol_a_l_XNOUSDT = data['data']['s'] 
		price_bids_a_l_XNOUSDT = data['data']['b'] 
		qty_bids_a_l_XNOUSDT = data['data']['B'] 
		price_asks_a_l_XNOUSDT = data['data']['a'] 
		qty_asks_a_l_XNOUSDT = data['data']['A'] 

		global symbol_a_g_XNOUSDT 
		global price_bids_a_g_XNOUSDT 
		global qty_bids_a_g_XNOUSDT 
		global price_asks_a_g_XNOUSDT 
		global qty_asks_a_g_XNOUSDT 

		symbol_a_g_XNOUSDT = symbol_a_l_XNOUSDT 
		price_bids_a_g_XNOUSDT = price_bids_a_l_XNOUSDT 
		qty_bids_a_g_XNOUSDT = qty_bids_a_l_XNOUSDT 
		price_asks_a_g_XNOUSDT = price_asks_a_l_XNOUSDT 
		qty_asks_a_g_XNOUSDT = qty_asks_a_l_XNOUSDT 

	if data['stream'] == streamxnobtc :
		data = json.loads(message) 

		symbol_b_l_XNOBTC = data['data']['s'] 
		price_bids_b_l_XNOBTC = data['data']['b'] 
		qty_bids_b_l_XNOBTC = data['data']['B']
		price_asks_b_l_XNOBTC = data['data']['a'] 
		qty_asks_b_l_XNOBTC = data['data']['A'] 

		global symbol_b_g_XNOBTC 
		global price_bids_b_g_XNOBTC 
		global qty_bids_b_g_XNOBTC 
		global price_asks_b_g_XNOBTC 
		global qty_asks_b_g_XNOBTC 

		symbol_b_g_XNOBTC = symbol_b_l_XNOBTC 
		price_bids_b_g_XNOBTC = price_bids_b_l_XNOBTC 
		qty_bids_b_g_XNOBTC = qty_bids_b_l_XNOBTC 
		price_asks_b_g_XNOBTC = price_asks_b_l_XNOBTC 
		qty_asks_b_g_XNOBTC = qty_asks_b_l_XNOBTC 


def loop_XNOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamxnousdt}/{streamxnobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_XNOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_XNOUSDT).start()

def loop_XNOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_XNOUSDT != 0.0 and qty_bids_a_g_XNOUSDT != 0.0 and price_asks_a_g_XNOUSDT != 0.0 and qty_asks_a_g_XNOUSDT != 0.0 and price_bids_b_g_XNOBTC != 0.0 and qty_bids_b_g_XNOBTC != 0.0 and price_asks_b_g_XNOBTC != 0.0 and qty_asks_b_g_XNOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_XNOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_XNOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_XNOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_XNOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_XNOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_XNOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_XNOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_XNOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_XNOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_XNOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_XNOUSDT_Trade).start() 

streamwoousdt = 'woousdt@bookTicker'
streamwoobtc  = 'woobtc@bookTicker'

symbol_a_g_WOOUSDT = 'WOOUSDT' 
price_bids_a_g_WOOUSDT = float(0.0) 
qty_bids_a_g_WOOUSDT = float(0.0) 
price_asks_a_g_WOOUSDT = float(0.0) 
qty_asks_a_g_WOOUSDT = float(0.0) 

stepSize_WOOUSDT = 0.10000000 

symbol_b_g_WOOBTC = 'WOOBTC' 
price_bids_b_g_WOOBTC = float(0.0) 
qty_bids_b_g_WOOBTC = float(0.0) 
price_asks_b_g_WOOBTC = float(0.0) 
qty_asks_b_g_WOOBTC = float(0.0) 

stepSize_WOOBTC = 0.10000000 

def on_message_WOOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamwoousdt :
		symbol_a_l_WOOUSDT = data['data']['s'] 
		price_bids_a_l_WOOUSDT = data['data']['b'] 
		qty_bids_a_l_WOOUSDT = data['data']['B'] 
		price_asks_a_l_WOOUSDT = data['data']['a'] 
		qty_asks_a_l_WOOUSDT = data['data']['A'] 

		global symbol_a_g_WOOUSDT 
		global price_bids_a_g_WOOUSDT 
		global qty_bids_a_g_WOOUSDT 
		global price_asks_a_g_WOOUSDT 
		global qty_asks_a_g_WOOUSDT 

		symbol_a_g_WOOUSDT = symbol_a_l_WOOUSDT 
		price_bids_a_g_WOOUSDT = price_bids_a_l_WOOUSDT 
		qty_bids_a_g_WOOUSDT = qty_bids_a_l_WOOUSDT 
		price_asks_a_g_WOOUSDT = price_asks_a_l_WOOUSDT 
		qty_asks_a_g_WOOUSDT = qty_asks_a_l_WOOUSDT 

	if data['stream'] == streamwoobtc :
		data = json.loads(message) 

		symbol_b_l_WOOBTC = data['data']['s'] 
		price_bids_b_l_WOOBTC = data['data']['b'] 
		qty_bids_b_l_WOOBTC = data['data']['B']
		price_asks_b_l_WOOBTC = data['data']['a'] 
		qty_asks_b_l_WOOBTC = data['data']['A'] 

		global symbol_b_g_WOOBTC 
		global price_bids_b_g_WOOBTC 
		global qty_bids_b_g_WOOBTC 
		global price_asks_b_g_WOOBTC 
		global qty_asks_b_g_WOOBTC 

		symbol_b_g_WOOBTC = symbol_b_l_WOOBTC 
		price_bids_b_g_WOOBTC = price_bids_b_l_WOOBTC 
		qty_bids_b_g_WOOBTC = qty_bids_b_l_WOOBTC 
		price_asks_b_g_WOOBTC = price_asks_b_l_WOOBTC 
		qty_asks_b_g_WOOBTC = qty_asks_b_l_WOOBTC 


def loop_WOOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamwoousdt}/{streamwoobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_WOOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_WOOUSDT).start()

def loop_WOOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_WOOUSDT != 0.0 and qty_bids_a_g_WOOUSDT != 0.0 and price_asks_a_g_WOOUSDT != 0.0 and qty_asks_a_g_WOOUSDT != 0.0 and price_bids_b_g_WOOBTC != 0.0 and qty_bids_b_g_WOOBTC != 0.0 and price_asks_b_g_WOOBTC != 0.0 and qty_asks_b_g_WOOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_WOOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_WOOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_WOOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_WOOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_WOOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_WOOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_WOOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_WOOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_WOOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_WOOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_WOOUSDT_Trade).start() 

streamalpineusdt = 'alpineusdt@bookTicker'
streamalpinebtc  = 'alpinebtc@bookTicker'

symbol_a_g_ALPINEUSDT = 'ALPINEUSDT' 
price_bids_a_g_ALPINEUSDT = float(0.0) 
qty_bids_a_g_ALPINEUSDT = float(0.0) 
price_asks_a_g_ALPINEUSDT = float(0.0) 
qty_asks_a_g_ALPINEUSDT = float(0.0) 

stepSize_ALPINEUSDT = 0.01000000 

symbol_b_g_ALPINEBTC = 'ALPINEBTC' 
price_bids_b_g_ALPINEBTC = float(0.0) 
qty_bids_b_g_ALPINEBTC = float(0.0) 
price_asks_b_g_ALPINEBTC = float(0.0) 
qty_asks_b_g_ALPINEBTC = float(0.0) 

stepSize_ALPINEBTC = 0.01000000 

def on_message_ALPINEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamalpineusdt :
		symbol_a_l_ALPINEUSDT = data['data']['s'] 
		price_bids_a_l_ALPINEUSDT = data['data']['b'] 
		qty_bids_a_l_ALPINEUSDT = data['data']['B'] 
		price_asks_a_l_ALPINEUSDT = data['data']['a'] 
		qty_asks_a_l_ALPINEUSDT = data['data']['A'] 

		global symbol_a_g_ALPINEUSDT 
		global price_bids_a_g_ALPINEUSDT 
		global qty_bids_a_g_ALPINEUSDT 
		global price_asks_a_g_ALPINEUSDT 
		global qty_asks_a_g_ALPINEUSDT 

		symbol_a_g_ALPINEUSDT = symbol_a_l_ALPINEUSDT 
		price_bids_a_g_ALPINEUSDT = price_bids_a_l_ALPINEUSDT 
		qty_bids_a_g_ALPINEUSDT = qty_bids_a_l_ALPINEUSDT 
		price_asks_a_g_ALPINEUSDT = price_asks_a_l_ALPINEUSDT 
		qty_asks_a_g_ALPINEUSDT = qty_asks_a_l_ALPINEUSDT 

	if data['stream'] == streamalpinebtc :
		data = json.loads(message) 

		symbol_b_l_ALPINEBTC = data['data']['s'] 
		price_bids_b_l_ALPINEBTC = data['data']['b'] 
		qty_bids_b_l_ALPINEBTC = data['data']['B']
		price_asks_b_l_ALPINEBTC = data['data']['a'] 
		qty_asks_b_l_ALPINEBTC = data['data']['A'] 

		global symbol_b_g_ALPINEBTC 
		global price_bids_b_g_ALPINEBTC 
		global qty_bids_b_g_ALPINEBTC 
		global price_asks_b_g_ALPINEBTC 
		global qty_asks_b_g_ALPINEBTC 

		symbol_b_g_ALPINEBTC = symbol_b_l_ALPINEBTC 
		price_bids_b_g_ALPINEBTC = price_bids_b_l_ALPINEBTC 
		qty_bids_b_g_ALPINEBTC = qty_bids_b_l_ALPINEBTC 
		price_asks_b_g_ALPINEBTC = price_asks_b_l_ALPINEBTC 
		qty_asks_b_g_ALPINEBTC = qty_asks_b_l_ALPINEBTC 


def loop_ALPINEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamalpineusdt}/{streamalpinebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ALPINEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ALPINEUSDT).start()

def loop_ALPINEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ALPINEUSDT != 0.0 and qty_bids_a_g_ALPINEUSDT != 0.0 and price_asks_a_g_ALPINEUSDT != 0.0 and qty_asks_a_g_ALPINEUSDT != 0.0 and price_bids_b_g_ALPINEBTC != 0.0 and qty_bids_b_g_ALPINEBTC != 0.0 and price_asks_b_g_ALPINEBTC != 0.0 and qty_asks_b_g_ALPINEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ALPINEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ALPINEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ALPINEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ALPINEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ALPINEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ALPINEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ALPINEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ALPINEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ALPINEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ALPINEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ALPINEUSDT_Trade).start() 

streamastrusdt = 'astrusdt@bookTicker'
streamastrbtc  = 'astrbtc@bookTicker'

symbol_a_g_ASTRUSDT = 'ASTRUSDT' 
price_bids_a_g_ASTRUSDT = float(0.0) 
qty_bids_a_g_ASTRUSDT = float(0.0) 
price_asks_a_g_ASTRUSDT = float(0.0) 
qty_asks_a_g_ASTRUSDT = float(0.0) 

stepSize_ASTRUSDT = 0.10000000 

symbol_b_g_ASTRBTC = 'ASTRBTC' 
price_bids_b_g_ASTRBTC = float(0.0) 
qty_bids_b_g_ASTRBTC = float(0.0) 
price_asks_b_g_ASTRBTC = float(0.0) 
qty_asks_b_g_ASTRBTC = float(0.0) 

stepSize_ASTRBTC = 0.10000000 

def on_message_ASTRUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamastrusdt :
		symbol_a_l_ASTRUSDT = data['data']['s'] 
		price_bids_a_l_ASTRUSDT = data['data']['b'] 
		qty_bids_a_l_ASTRUSDT = data['data']['B'] 
		price_asks_a_l_ASTRUSDT = data['data']['a'] 
		qty_asks_a_l_ASTRUSDT = data['data']['A'] 

		global symbol_a_g_ASTRUSDT 
		global price_bids_a_g_ASTRUSDT 
		global qty_bids_a_g_ASTRUSDT 
		global price_asks_a_g_ASTRUSDT 
		global qty_asks_a_g_ASTRUSDT 

		symbol_a_g_ASTRUSDT = symbol_a_l_ASTRUSDT 
		price_bids_a_g_ASTRUSDT = price_bids_a_l_ASTRUSDT 
		qty_bids_a_g_ASTRUSDT = qty_bids_a_l_ASTRUSDT 
		price_asks_a_g_ASTRUSDT = price_asks_a_l_ASTRUSDT 
		qty_asks_a_g_ASTRUSDT = qty_asks_a_l_ASTRUSDT 

	if data['stream'] == streamastrbtc :
		data = json.loads(message) 

		symbol_b_l_ASTRBTC = data['data']['s'] 
		price_bids_b_l_ASTRBTC = data['data']['b'] 
		qty_bids_b_l_ASTRBTC = data['data']['B']
		price_asks_b_l_ASTRBTC = data['data']['a'] 
		qty_asks_b_l_ASTRBTC = data['data']['A'] 

		global symbol_b_g_ASTRBTC 
		global price_bids_b_g_ASTRBTC 
		global qty_bids_b_g_ASTRBTC 
		global price_asks_b_g_ASTRBTC 
		global qty_asks_b_g_ASTRBTC 

		symbol_b_g_ASTRBTC = symbol_b_l_ASTRBTC 
		price_bids_b_g_ASTRBTC = price_bids_b_l_ASTRBTC 
		qty_bids_b_g_ASTRBTC = qty_bids_b_l_ASTRBTC 
		price_asks_b_g_ASTRBTC = price_asks_b_l_ASTRBTC 
		qty_asks_b_g_ASTRBTC = qty_asks_b_l_ASTRBTC 


def loop_ASTRUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamastrusdt}/{streamastrbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_ASTRUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_ASTRUSDT).start()

def loop_ASTRUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_ASTRUSDT != 0.0 and qty_bids_a_g_ASTRUSDT != 0.0 and price_asks_a_g_ASTRUSDT != 0.0 and qty_asks_a_g_ASTRUSDT != 0.0 and price_bids_b_g_ASTRBTC != 0.0 and qty_bids_b_g_ASTRBTC != 0.0 and price_asks_b_g_ASTRBTC != 0.0 and qty_asks_b_g_ASTRBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_ASTRBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_ASTRBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_ASTRUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_ASTRUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_ASTRBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_ASTRBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_ASTRUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_ASTRUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_ASTRBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_ASTRBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_ASTRUSDT_Trade).start() 

streamgmtusdt = 'gmtusdt@bookTicker'
streamgmtbtc  = 'gmtbtc@bookTicker'

symbol_a_g_GMTUSDT = 'GMTUSDT' 
price_bids_a_g_GMTUSDT = float(0.0) 
qty_bids_a_g_GMTUSDT = float(0.0) 
price_asks_a_g_GMTUSDT = float(0.0) 
qty_asks_a_g_GMTUSDT = float(0.0) 

stepSize_GMTUSDT = 0.10000000 

symbol_b_g_GMTBTC = 'GMTBTC' 
price_bids_b_g_GMTBTC = float(0.0) 
qty_bids_b_g_GMTBTC = float(0.0) 
price_asks_b_g_GMTBTC = float(0.0) 
qty_asks_b_g_GMTBTC = float(0.0) 

stepSize_GMTBTC = 0.10000000 

def on_message_GMTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamgmtusdt :
		symbol_a_l_GMTUSDT = data['data']['s'] 
		price_bids_a_l_GMTUSDT = data['data']['b'] 
		qty_bids_a_l_GMTUSDT = data['data']['B'] 
		price_asks_a_l_GMTUSDT = data['data']['a'] 
		qty_asks_a_l_GMTUSDT = data['data']['A'] 

		global symbol_a_g_GMTUSDT 
		global price_bids_a_g_GMTUSDT 
		global qty_bids_a_g_GMTUSDT 
		global price_asks_a_g_GMTUSDT 
		global qty_asks_a_g_GMTUSDT 

		symbol_a_g_GMTUSDT = symbol_a_l_GMTUSDT 
		price_bids_a_g_GMTUSDT = price_bids_a_l_GMTUSDT 
		qty_bids_a_g_GMTUSDT = qty_bids_a_l_GMTUSDT 
		price_asks_a_g_GMTUSDT = price_asks_a_l_GMTUSDT 
		qty_asks_a_g_GMTUSDT = qty_asks_a_l_GMTUSDT 

	if data['stream'] == streamgmtbtc :
		data = json.loads(message) 

		symbol_b_l_GMTBTC = data['data']['s'] 
		price_bids_b_l_GMTBTC = data['data']['b'] 
		qty_bids_b_l_GMTBTC = data['data']['B']
		price_asks_b_l_GMTBTC = data['data']['a'] 
		qty_asks_b_l_GMTBTC = data['data']['A'] 

		global symbol_b_g_GMTBTC 
		global price_bids_b_g_GMTBTC 
		global qty_bids_b_g_GMTBTC 
		global price_asks_b_g_GMTBTC 
		global qty_asks_b_g_GMTBTC 

		symbol_b_g_GMTBTC = symbol_b_l_GMTBTC 
		price_bids_b_g_GMTBTC = price_bids_b_l_GMTBTC 
		qty_bids_b_g_GMTBTC = qty_bids_b_l_GMTBTC 
		price_asks_b_g_GMTBTC = price_asks_b_l_GMTBTC 
		qty_asks_b_g_GMTBTC = qty_asks_b_l_GMTBTC 


def loop_GMTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamgmtusdt}/{streamgmtbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_GMTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_GMTUSDT).start()

def loop_GMTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_GMTUSDT != 0.0 and qty_bids_a_g_GMTUSDT != 0.0 and price_asks_a_g_GMTUSDT != 0.0 and qty_asks_a_g_GMTUSDT != 0.0 and price_bids_b_g_GMTBTC != 0.0 and qty_bids_b_g_GMTBTC != 0.0 and price_asks_b_g_GMTBTC != 0.0 and qty_asks_b_g_GMTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_GMTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_GMTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_GMTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_GMTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_GMTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_GMTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_GMTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_GMTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_GMTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_GMTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_GMTUSDT_Trade).start() 

streamkdausdt = 'kdausdt@bookTicker'
streamkdabtc  = 'kdabtc@bookTicker'

symbol_a_g_KDAUSDT = 'KDAUSDT' 
price_bids_a_g_KDAUSDT = float(0.0) 
qty_bids_a_g_KDAUSDT = float(0.0) 
price_asks_a_g_KDAUSDT = float(0.0) 
qty_asks_a_g_KDAUSDT = float(0.0) 

stepSize_KDAUSDT = 0.01000000 

symbol_b_g_KDABTC = 'KDABTC' 
price_bids_b_g_KDABTC = float(0.0) 
qty_bids_b_g_KDABTC = float(0.0) 
price_asks_b_g_KDABTC = float(0.0) 
qty_asks_b_g_KDABTC = float(0.0) 

stepSize_KDABTC = 0.01000000 

def on_message_KDAUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamkdausdt :
		symbol_a_l_KDAUSDT = data['data']['s'] 
		price_bids_a_l_KDAUSDT = data['data']['b'] 
		qty_bids_a_l_KDAUSDT = data['data']['B'] 
		price_asks_a_l_KDAUSDT = data['data']['a'] 
		qty_asks_a_l_KDAUSDT = data['data']['A'] 

		global symbol_a_g_KDAUSDT 
		global price_bids_a_g_KDAUSDT 
		global qty_bids_a_g_KDAUSDT 
		global price_asks_a_g_KDAUSDT 
		global qty_asks_a_g_KDAUSDT 

		symbol_a_g_KDAUSDT = symbol_a_l_KDAUSDT 
		price_bids_a_g_KDAUSDT = price_bids_a_l_KDAUSDT 
		qty_bids_a_g_KDAUSDT = qty_bids_a_l_KDAUSDT 
		price_asks_a_g_KDAUSDT = price_asks_a_l_KDAUSDT 
		qty_asks_a_g_KDAUSDT = qty_asks_a_l_KDAUSDT 

	if data['stream'] == streamkdabtc :
		data = json.loads(message) 

		symbol_b_l_KDABTC = data['data']['s'] 
		price_bids_b_l_KDABTC = data['data']['b'] 
		qty_bids_b_l_KDABTC = data['data']['B']
		price_asks_b_l_KDABTC = data['data']['a'] 
		qty_asks_b_l_KDABTC = data['data']['A'] 

		global symbol_b_g_KDABTC 
		global price_bids_b_g_KDABTC 
		global qty_bids_b_g_KDABTC 
		global price_asks_b_g_KDABTC 
		global qty_asks_b_g_KDABTC 

		symbol_b_g_KDABTC = symbol_b_l_KDABTC 
		price_bids_b_g_KDABTC = price_bids_b_l_KDABTC 
		qty_bids_b_g_KDABTC = qty_bids_b_l_KDABTC 
		price_asks_b_g_KDABTC = price_asks_b_l_KDABTC 
		qty_asks_b_g_KDABTC = qty_asks_b_l_KDABTC 


def loop_KDAUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamkdausdt}/{streamkdabtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_KDAUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_KDAUSDT).start()

def loop_KDAUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_KDAUSDT != 0.0 and qty_bids_a_g_KDAUSDT != 0.0 and price_asks_a_g_KDAUSDT != 0.0 and qty_asks_a_g_KDAUSDT != 0.0 and price_bids_b_g_KDABTC != 0.0 and qty_bids_b_g_KDABTC != 0.0 and price_asks_b_g_KDABTC != 0.0 and qty_asks_b_g_KDABTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_KDABTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_KDABTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_KDAUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_KDAUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_KDABTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_KDABTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_KDAUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_KDAUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_KDABTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_KDABTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_KDAUSDT_Trade).start() 

streamapeusdt = 'apeusdt@bookTicker'
streamapebtc  = 'apebtc@bookTicker'

symbol_a_g_APEUSDT = 'APEUSDT' 
price_bids_a_g_APEUSDT = float(0.0) 
qty_bids_a_g_APEUSDT = float(0.0) 
price_asks_a_g_APEUSDT = float(0.0) 
qty_asks_a_g_APEUSDT = float(0.0) 

stepSize_APEUSDT = 0.01000000 

symbol_b_g_APEBTC = 'APEBTC' 
price_bids_b_g_APEBTC = float(0.0) 
qty_bids_b_g_APEBTC = float(0.0) 
price_asks_b_g_APEBTC = float(0.0) 
qty_asks_b_g_APEBTC = float(0.0) 

stepSize_APEBTC = 0.01000000 

def on_message_APEUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamapeusdt :
		symbol_a_l_APEUSDT = data['data']['s'] 
		price_bids_a_l_APEUSDT = data['data']['b'] 
		qty_bids_a_l_APEUSDT = data['data']['B'] 
		price_asks_a_l_APEUSDT = data['data']['a'] 
		qty_asks_a_l_APEUSDT = data['data']['A'] 

		global symbol_a_g_APEUSDT 
		global price_bids_a_g_APEUSDT 
		global qty_bids_a_g_APEUSDT 
		global price_asks_a_g_APEUSDT 
		global qty_asks_a_g_APEUSDT 

		symbol_a_g_APEUSDT = symbol_a_l_APEUSDT 
		price_bids_a_g_APEUSDT = price_bids_a_l_APEUSDT 
		qty_bids_a_g_APEUSDT = qty_bids_a_l_APEUSDT 
		price_asks_a_g_APEUSDT = price_asks_a_l_APEUSDT 
		qty_asks_a_g_APEUSDT = qty_asks_a_l_APEUSDT 

	if data['stream'] == streamapebtc :
		data = json.loads(message) 

		symbol_b_l_APEBTC = data['data']['s'] 
		price_bids_b_l_APEBTC = data['data']['b'] 
		qty_bids_b_l_APEBTC = data['data']['B']
		price_asks_b_l_APEBTC = data['data']['a'] 
		qty_asks_b_l_APEBTC = data['data']['A'] 

		global symbol_b_g_APEBTC 
		global price_bids_b_g_APEBTC 
		global qty_bids_b_g_APEBTC 
		global price_asks_b_g_APEBTC 
		global qty_asks_b_g_APEBTC 

		symbol_b_g_APEBTC = symbol_b_l_APEBTC 
		price_bids_b_g_APEBTC = price_bids_b_l_APEBTC 
		qty_bids_b_g_APEBTC = qty_bids_b_l_APEBTC 
		price_asks_b_g_APEBTC = price_asks_b_l_APEBTC 
		qty_asks_b_g_APEBTC = qty_asks_b_l_APEBTC 


def loop_APEUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamapeusdt}/{streamapebtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_APEUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_APEUSDT).start()

def loop_APEUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_APEUSDT != 0.0 and qty_bids_a_g_APEUSDT != 0.0 and price_asks_a_g_APEUSDT != 0.0 and qty_asks_a_g_APEUSDT != 0.0 and price_bids_b_g_APEBTC != 0.0 and qty_bids_b_g_APEBTC != 0.0 and price_asks_b_g_APEBTC != 0.0 and qty_asks_b_g_APEBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_APEBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_APEBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_APEUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_APEUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_APEBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_APEBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_APEUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_APEUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_APEBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_APEBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_APEUSDT_Trade).start() 

streammultiusdt = 'multiusdt@bookTicker'
streammultibtc  = 'multibtc@bookTicker'

symbol_a_g_MULTIUSDT = 'MULTIUSDT' 
price_bids_a_g_MULTIUSDT = float(0.0) 
qty_bids_a_g_MULTIUSDT = float(0.0) 
price_asks_a_g_MULTIUSDT = float(0.0) 
qty_asks_a_g_MULTIUSDT = float(0.0) 

stepSize_MULTIUSDT = 0.00100000 

symbol_b_g_MULTIBTC = 'MULTIBTC' 
price_bids_b_g_MULTIBTC = float(0.0) 
qty_bids_b_g_MULTIBTC = float(0.0) 
price_asks_b_g_MULTIBTC = float(0.0) 
qty_asks_b_g_MULTIBTC = float(0.0) 

stepSize_MULTIBTC = 0.00100000 

def on_message_MULTIUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streammultiusdt :
		symbol_a_l_MULTIUSDT = data['data']['s'] 
		price_bids_a_l_MULTIUSDT = data['data']['b'] 
		qty_bids_a_l_MULTIUSDT = data['data']['B'] 
		price_asks_a_l_MULTIUSDT = data['data']['a'] 
		qty_asks_a_l_MULTIUSDT = data['data']['A'] 

		global symbol_a_g_MULTIUSDT 
		global price_bids_a_g_MULTIUSDT 
		global qty_bids_a_g_MULTIUSDT 
		global price_asks_a_g_MULTIUSDT 
		global qty_asks_a_g_MULTIUSDT 

		symbol_a_g_MULTIUSDT = symbol_a_l_MULTIUSDT 
		price_bids_a_g_MULTIUSDT = price_bids_a_l_MULTIUSDT 
		qty_bids_a_g_MULTIUSDT = qty_bids_a_l_MULTIUSDT 
		price_asks_a_g_MULTIUSDT = price_asks_a_l_MULTIUSDT 
		qty_asks_a_g_MULTIUSDT = qty_asks_a_l_MULTIUSDT 

	if data['stream'] == streammultibtc :
		data = json.loads(message) 

		symbol_b_l_MULTIBTC = data['data']['s'] 
		price_bids_b_l_MULTIBTC = data['data']['b'] 
		qty_bids_b_l_MULTIBTC = data['data']['B']
		price_asks_b_l_MULTIBTC = data['data']['a'] 
		qty_asks_b_l_MULTIBTC = data['data']['A'] 

		global symbol_b_g_MULTIBTC 
		global price_bids_b_g_MULTIBTC 
		global qty_bids_b_g_MULTIBTC 
		global price_asks_b_g_MULTIBTC 
		global qty_asks_b_g_MULTIBTC 

		symbol_b_g_MULTIBTC = symbol_b_l_MULTIBTC 
		price_bids_b_g_MULTIBTC = price_bids_b_l_MULTIBTC 
		qty_bids_b_g_MULTIBTC = qty_bids_b_l_MULTIBTC 
		price_asks_b_g_MULTIBTC = price_asks_b_l_MULTIBTC 
		qty_asks_b_g_MULTIBTC = qty_asks_b_l_MULTIBTC 


def loop_MULTIUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streammultiusdt}/{streammultibtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_MULTIUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_MULTIUSDT).start()

def loop_MULTIUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_MULTIUSDT != 0.0 and qty_bids_a_g_MULTIUSDT != 0.0 and price_asks_a_g_MULTIUSDT != 0.0 and qty_asks_a_g_MULTIUSDT != 0.0 and price_bids_b_g_MULTIBTC != 0.0 and qty_bids_b_g_MULTIBTC != 0.0 and price_asks_b_g_MULTIBTC != 0.0 and qty_asks_b_g_MULTIBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_MULTIBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_MULTIBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_MULTIUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_MULTIUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_MULTIBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_MULTIBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_MULTIUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_MULTIUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_MULTIBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_MULTIBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_MULTIUSDT_Trade).start() 

streamsteemusdt = 'steemusdt@bookTicker'
streamsteembtc  = 'steembtc@bookTicker'

symbol_a_g_STEEMUSDT = 'STEEMUSDT' 
price_bids_a_g_STEEMUSDT = float(0.0) 
qty_bids_a_g_STEEMUSDT = float(0.0) 
price_asks_a_g_STEEMUSDT = float(0.0) 
qty_asks_a_g_STEEMUSDT = float(0.0) 

stepSize_STEEMUSDT = 0.10000000 

symbol_b_g_STEEMBTC = 'STEEMBTC' 
price_bids_b_g_STEEMBTC = float(0.0) 
qty_bids_b_g_STEEMBTC = float(0.0) 
price_asks_b_g_STEEMBTC = float(0.0) 
qty_asks_b_g_STEEMBTC = float(0.0) 

stepSize_STEEMBTC = 1.00000000 

def on_message_STEEMUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamsteemusdt :
		symbol_a_l_STEEMUSDT = data['data']['s'] 
		price_bids_a_l_STEEMUSDT = data['data']['b'] 
		qty_bids_a_l_STEEMUSDT = data['data']['B'] 
		price_asks_a_l_STEEMUSDT = data['data']['a'] 
		qty_asks_a_l_STEEMUSDT = data['data']['A'] 

		global symbol_a_g_STEEMUSDT 
		global price_bids_a_g_STEEMUSDT 
		global qty_bids_a_g_STEEMUSDT 
		global price_asks_a_g_STEEMUSDT 
		global qty_asks_a_g_STEEMUSDT 

		symbol_a_g_STEEMUSDT = symbol_a_l_STEEMUSDT 
		price_bids_a_g_STEEMUSDT = price_bids_a_l_STEEMUSDT 
		qty_bids_a_g_STEEMUSDT = qty_bids_a_l_STEEMUSDT 
		price_asks_a_g_STEEMUSDT = price_asks_a_l_STEEMUSDT 
		qty_asks_a_g_STEEMUSDT = qty_asks_a_l_STEEMUSDT 

	if data['stream'] == streamsteembtc :
		data = json.loads(message) 

		symbol_b_l_STEEMBTC = data['data']['s'] 
		price_bids_b_l_STEEMBTC = data['data']['b'] 
		qty_bids_b_l_STEEMBTC = data['data']['B']
		price_asks_b_l_STEEMBTC = data['data']['a'] 
		qty_asks_b_l_STEEMBTC = data['data']['A'] 

		global symbol_b_g_STEEMBTC 
		global price_bids_b_g_STEEMBTC 
		global qty_bids_b_g_STEEMBTC 
		global price_asks_b_g_STEEMBTC 
		global qty_asks_b_g_STEEMBTC 

		symbol_b_g_STEEMBTC = symbol_b_l_STEEMBTC 
		price_bids_b_g_STEEMBTC = price_bids_b_l_STEEMBTC 
		qty_bids_b_g_STEEMBTC = qty_bids_b_l_STEEMBTC 
		price_asks_b_g_STEEMBTC = price_asks_b_l_STEEMBTC 
		qty_asks_b_g_STEEMBTC = qty_asks_b_l_STEEMBTC 


def loop_STEEMUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamsteemusdt}/{streamsteembtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_STEEMUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_STEEMUSDT).start()

def loop_STEEMUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_STEEMUSDT != 0.0 and qty_bids_a_g_STEEMUSDT != 0.0 and price_asks_a_g_STEEMUSDT != 0.0 and qty_asks_a_g_STEEMUSDT != 0.0 and price_bids_b_g_STEEMBTC != 0.0 and qty_bids_b_g_STEEMBTC != 0.0 and price_asks_b_g_STEEMBTC != 0.0 and qty_asks_b_g_STEEMBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_STEEMBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_STEEMBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_STEEMUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_STEEMUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_STEEMBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_STEEMBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_STEEMUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_STEEMUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_STEEMBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_STEEMBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_STEEMUSDT_Trade).start() 

streammobusdt = 'mobusdt@bookTicker'
streammobbtc  = 'mobbtc@bookTicker'

symbol_a_g_MOBUSDT = 'MOBUSDT' 
price_bids_a_g_MOBUSDT = float(0.0) 
qty_bids_a_g_MOBUSDT = float(0.0) 
price_asks_a_g_MOBUSDT = float(0.0) 
qty_asks_a_g_MOBUSDT = float(0.0) 

stepSize_MOBUSDT = 0.01000000 

symbol_b_g_MOBBTC = 'MOBBTC' 
price_bids_b_g_MOBBTC = float(0.0) 
qty_bids_b_g_MOBBTC = float(0.0) 
price_asks_b_g_MOBBTC = float(0.0) 
qty_asks_b_g_MOBBTC = float(0.0) 

stepSize_MOBBTC = 0.01000000 

def on_message_MOBUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streammobusdt :
		symbol_a_l_MOBUSDT = data['data']['s'] 
		price_bids_a_l_MOBUSDT = data['data']['b'] 
		qty_bids_a_l_MOBUSDT = data['data']['B'] 
		price_asks_a_l_MOBUSDT = data['data']['a'] 
		qty_asks_a_l_MOBUSDT = data['data']['A'] 

		global symbol_a_g_MOBUSDT 
		global price_bids_a_g_MOBUSDT 
		global qty_bids_a_g_MOBUSDT 
		global price_asks_a_g_MOBUSDT 
		global qty_asks_a_g_MOBUSDT 

		symbol_a_g_MOBUSDT = symbol_a_l_MOBUSDT 
		price_bids_a_g_MOBUSDT = price_bids_a_l_MOBUSDT 
		qty_bids_a_g_MOBUSDT = qty_bids_a_l_MOBUSDT 
		price_asks_a_g_MOBUSDT = price_asks_a_l_MOBUSDT 
		qty_asks_a_g_MOBUSDT = qty_asks_a_l_MOBUSDT 

	if data['stream'] == streammobbtc :
		data = json.loads(message) 

		symbol_b_l_MOBBTC = data['data']['s'] 
		price_bids_b_l_MOBBTC = data['data']['b'] 
		qty_bids_b_l_MOBBTC = data['data']['B']
		price_asks_b_l_MOBBTC = data['data']['a'] 
		qty_asks_b_l_MOBBTC = data['data']['A'] 

		global symbol_b_g_MOBBTC 
		global price_bids_b_g_MOBBTC 
		global qty_bids_b_g_MOBBTC 
		global price_asks_b_g_MOBBTC 
		global qty_asks_b_g_MOBBTC 

		symbol_b_g_MOBBTC = symbol_b_l_MOBBTC 
		price_bids_b_g_MOBBTC = price_bids_b_l_MOBBTC 
		qty_bids_b_g_MOBBTC = qty_bids_b_l_MOBBTC 
		price_asks_b_g_MOBBTC = price_asks_b_l_MOBBTC 
		qty_asks_b_g_MOBBTC = qty_asks_b_l_MOBBTC 


def loop_MOBUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streammobusdt}/{streammobbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_MOBUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_MOBUSDT).start()

def loop_MOBUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_MOBUSDT != 0.0 and qty_bids_a_g_MOBUSDT != 0.0 and price_asks_a_g_MOBUSDT != 0.0 and qty_asks_a_g_MOBUSDT != 0.0 and price_bids_b_g_MOBBTC != 0.0 and qty_bids_b_g_MOBBTC != 0.0 and price_asks_b_g_MOBBTC != 0.0 and qty_asks_b_g_MOBBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_MOBBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_MOBBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_MOBUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_MOBUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_MOBBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_MOBBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_MOBUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_MOBUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_MOBBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_MOBBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_MOBUSDT_Trade).start() 

streamnexousdt = 'nexousdt@bookTicker'
streamnexobtc  = 'nexobtc@bookTicker'

symbol_a_g_NEXOUSDT = 'NEXOUSDT' 
price_bids_a_g_NEXOUSDT = float(0.0) 
qty_bids_a_g_NEXOUSDT = float(0.0) 
price_asks_a_g_NEXOUSDT = float(0.0) 
qty_asks_a_g_NEXOUSDT = float(0.0) 

stepSize_NEXOUSDT = 0.01000000 

symbol_b_g_NEXOBTC = 'NEXOBTC' 
price_bids_b_g_NEXOBTC = float(0.0) 
qty_bids_b_g_NEXOBTC = float(0.0) 
price_asks_b_g_NEXOBTC = float(0.0) 
qty_asks_b_g_NEXOBTC = float(0.0) 

stepSize_NEXOBTC = 0.01000000 

def on_message_NEXOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamnexousdt :
		symbol_a_l_NEXOUSDT = data['data']['s'] 
		price_bids_a_l_NEXOUSDT = data['data']['b'] 
		qty_bids_a_l_NEXOUSDT = data['data']['B'] 
		price_asks_a_l_NEXOUSDT = data['data']['a'] 
		qty_asks_a_l_NEXOUSDT = data['data']['A'] 

		global symbol_a_g_NEXOUSDT 
		global price_bids_a_g_NEXOUSDT 
		global qty_bids_a_g_NEXOUSDT 
		global price_asks_a_g_NEXOUSDT 
		global qty_asks_a_g_NEXOUSDT 

		symbol_a_g_NEXOUSDT = symbol_a_l_NEXOUSDT 
		price_bids_a_g_NEXOUSDT = price_bids_a_l_NEXOUSDT 
		qty_bids_a_g_NEXOUSDT = qty_bids_a_l_NEXOUSDT 
		price_asks_a_g_NEXOUSDT = price_asks_a_l_NEXOUSDT 
		qty_asks_a_g_NEXOUSDT = qty_asks_a_l_NEXOUSDT 

	if data['stream'] == streamnexobtc :
		data = json.loads(message) 

		symbol_b_l_NEXOBTC = data['data']['s'] 
		price_bids_b_l_NEXOBTC = data['data']['b'] 
		qty_bids_b_l_NEXOBTC = data['data']['B']
		price_asks_b_l_NEXOBTC = data['data']['a'] 
		qty_asks_b_l_NEXOBTC = data['data']['A'] 

		global symbol_b_g_NEXOBTC 
		global price_bids_b_g_NEXOBTC 
		global qty_bids_b_g_NEXOBTC 
		global price_asks_b_g_NEXOBTC 
		global qty_asks_b_g_NEXOBTC 

		symbol_b_g_NEXOBTC = symbol_b_l_NEXOBTC 
		price_bids_b_g_NEXOBTC = price_bids_b_l_NEXOBTC 
		qty_bids_b_g_NEXOBTC = qty_bids_b_l_NEXOBTC 
		price_asks_b_g_NEXOBTC = price_asks_b_l_NEXOBTC 
		qty_asks_b_g_NEXOBTC = qty_asks_b_l_NEXOBTC 


def loop_NEXOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamnexousdt}/{streamnexobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_NEXOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_NEXOUSDT).start()

def loop_NEXOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_NEXOUSDT != 0.0 and qty_bids_a_g_NEXOUSDT != 0.0 and price_asks_a_g_NEXOUSDT != 0.0 and qty_asks_a_g_NEXOUSDT != 0.0 and price_bids_b_g_NEXOBTC != 0.0 and qty_bids_b_g_NEXOBTC != 0.0 and price_asks_b_g_NEXOBTC != 0.0 and qty_asks_b_g_NEXOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_NEXOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_NEXOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_NEXOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_NEXOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_NEXOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_NEXOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_NEXOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_NEXOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_NEXOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_NEXOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_NEXOUSDT_Trade).start() 

streamgalusdt = 'galusdt@bookTicker'
streamgalbtc  = 'galbtc@bookTicker'

symbol_a_g_GALUSDT = 'GALUSDT' 
price_bids_a_g_GALUSDT = float(0.0) 
qty_bids_a_g_GALUSDT = float(0.0) 
price_asks_a_g_GALUSDT = float(0.0) 
qty_asks_a_g_GALUSDT = float(0.0) 

stepSize_GALUSDT = 0.00100000 

symbol_b_g_GALBTC = 'GALBTC' 
price_bids_b_g_GALBTC = float(0.0) 
qty_bids_b_g_GALBTC = float(0.0) 
price_asks_b_g_GALBTC = float(0.0) 
qty_asks_b_g_GALBTC = float(0.0) 

stepSize_GALBTC = 0.00100000 

def on_message_GALUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamgalusdt :
		symbol_a_l_GALUSDT = data['data']['s'] 
		price_bids_a_l_GALUSDT = data['data']['b'] 
		qty_bids_a_l_GALUSDT = data['data']['B'] 
		price_asks_a_l_GALUSDT = data['data']['a'] 
		qty_asks_a_l_GALUSDT = data['data']['A'] 

		global symbol_a_g_GALUSDT 
		global price_bids_a_g_GALUSDT 
		global qty_bids_a_g_GALUSDT 
		global price_asks_a_g_GALUSDT 
		global qty_asks_a_g_GALUSDT 

		symbol_a_g_GALUSDT = symbol_a_l_GALUSDT 
		price_bids_a_g_GALUSDT = price_bids_a_l_GALUSDT 
		qty_bids_a_g_GALUSDT = qty_bids_a_l_GALUSDT 
		price_asks_a_g_GALUSDT = price_asks_a_l_GALUSDT 
		qty_asks_a_g_GALUSDT = qty_asks_a_l_GALUSDT 

	if data['stream'] == streamgalbtc :
		data = json.loads(message) 

		symbol_b_l_GALBTC = data['data']['s'] 
		price_bids_b_l_GALBTC = data['data']['b'] 
		qty_bids_b_l_GALBTC = data['data']['B']
		price_asks_b_l_GALBTC = data['data']['a'] 
		qty_asks_b_l_GALBTC = data['data']['A'] 

		global symbol_b_g_GALBTC 
		global price_bids_b_g_GALBTC 
		global qty_bids_b_g_GALBTC 
		global price_asks_b_g_GALBTC 
		global qty_asks_b_g_GALBTC 

		symbol_b_g_GALBTC = symbol_b_l_GALBTC 
		price_bids_b_g_GALBTC = price_bids_b_l_GALBTC 
		qty_bids_b_g_GALBTC = qty_bids_b_l_GALBTC 
		price_asks_b_g_GALBTC = price_asks_b_l_GALBTC 
		qty_asks_b_g_GALBTC = qty_asks_b_l_GALBTC 


def loop_GALUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamgalusdt}/{streamgalbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_GALUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_GALUSDT).start()

def loop_GALUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_GALUSDT != 0.0 and qty_bids_a_g_GALUSDT != 0.0 and price_asks_a_g_GALUSDT != 0.0 and qty_asks_a_g_GALUSDT != 0.0 and price_bids_b_g_GALBTC != 0.0 and qty_bids_b_g_GALBTC != 0.0 and price_asks_b_g_GALBTC != 0.0 and qty_asks_b_g_GALBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_GALBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_GALBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_GALUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_GALUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_GALBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_GALBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_GALUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_GALUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_GALBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_GALBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_GALUSDT_Trade).start() 

streamldousdt = 'ldousdt@bookTicker'
streamldobtc  = 'ldobtc@bookTicker'

symbol_a_g_LDOUSDT = 'LDOUSDT' 
price_bids_a_g_LDOUSDT = float(0.0) 
qty_bids_a_g_LDOUSDT = float(0.0) 
price_asks_a_g_LDOUSDT = float(0.0) 
qty_asks_a_g_LDOUSDT = float(0.0) 

stepSize_LDOUSDT = 0.01000000 

symbol_b_g_LDOBTC = 'LDOBTC' 
price_bids_b_g_LDOBTC = float(0.0) 
qty_bids_b_g_LDOBTC = float(0.0) 
price_asks_b_g_LDOBTC = float(0.0) 
qty_asks_b_g_LDOBTC = float(0.0) 

stepSize_LDOBTC = 0.01000000 

def on_message_LDOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamldousdt :
		symbol_a_l_LDOUSDT = data['data']['s'] 
		price_bids_a_l_LDOUSDT = data['data']['b'] 
		qty_bids_a_l_LDOUSDT = data['data']['B'] 
		price_asks_a_l_LDOUSDT = data['data']['a'] 
		qty_asks_a_l_LDOUSDT = data['data']['A'] 

		global symbol_a_g_LDOUSDT 
		global price_bids_a_g_LDOUSDT 
		global qty_bids_a_g_LDOUSDT 
		global price_asks_a_g_LDOUSDT 
		global qty_asks_a_g_LDOUSDT 

		symbol_a_g_LDOUSDT = symbol_a_l_LDOUSDT 
		price_bids_a_g_LDOUSDT = price_bids_a_l_LDOUSDT 
		qty_bids_a_g_LDOUSDT = qty_bids_a_l_LDOUSDT 
		price_asks_a_g_LDOUSDT = price_asks_a_l_LDOUSDT 
		qty_asks_a_g_LDOUSDT = qty_asks_a_l_LDOUSDT 

	if data['stream'] == streamldobtc :
		data = json.loads(message) 

		symbol_b_l_LDOBTC = data['data']['s'] 
		price_bids_b_l_LDOBTC = data['data']['b'] 
		qty_bids_b_l_LDOBTC = data['data']['B']
		price_asks_b_l_LDOBTC = data['data']['a'] 
		qty_asks_b_l_LDOBTC = data['data']['A'] 

		global symbol_b_g_LDOBTC 
		global price_bids_b_g_LDOBTC 
		global qty_bids_b_g_LDOBTC 
		global price_asks_b_g_LDOBTC 
		global qty_asks_b_g_LDOBTC 

		symbol_b_g_LDOBTC = symbol_b_l_LDOBTC 
		price_bids_b_g_LDOBTC = price_bids_b_l_LDOBTC 
		qty_bids_b_g_LDOBTC = qty_bids_b_l_LDOBTC 
		price_asks_b_g_LDOBTC = price_asks_b_l_LDOBTC 
		qty_asks_b_g_LDOBTC = qty_asks_b_l_LDOBTC 


def loop_LDOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamldousdt}/{streamldobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_LDOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_LDOUSDT).start()

def loop_LDOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_LDOUSDT != 0.0 and qty_bids_a_g_LDOUSDT != 0.0 and price_asks_a_g_LDOUSDT != 0.0 and qty_asks_a_g_LDOUSDT != 0.0 and price_bids_b_g_LDOBTC != 0.0 and qty_bids_b_g_LDOBTC != 0.0 and price_asks_b_g_LDOBTC != 0.0 and qty_asks_b_g_LDOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_LDOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_LDOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_LDOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_LDOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_LDOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_LDOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_LDOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_LDOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_LDOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_LDOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_LDOUSDT_Trade).start() 

streamopusdt = 'opusdt@bookTicker'
streamopbtc  = 'opbtc@bookTicker'

symbol_a_g_OPUSDT = 'OPUSDT' 
price_bids_a_g_OPUSDT = float(0.0) 
qty_bids_a_g_OPUSDT = float(0.0) 
price_asks_a_g_OPUSDT = float(0.0) 
qty_asks_a_g_OPUSDT = float(0.0) 

stepSize_OPUSDT = 0.01000000 

symbol_b_g_OPBTC = 'OPBTC' 
price_bids_b_g_OPBTC = float(0.0) 
qty_bids_b_g_OPBTC = float(0.0) 
price_asks_b_g_OPBTC = float(0.0) 
qty_asks_b_g_OPBTC = float(0.0) 

stepSize_OPBTC = 0.01000000 

def on_message_OPUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamopusdt :
		symbol_a_l_OPUSDT = data['data']['s'] 
		price_bids_a_l_OPUSDT = data['data']['b'] 
		qty_bids_a_l_OPUSDT = data['data']['B'] 
		price_asks_a_l_OPUSDT = data['data']['a'] 
		qty_asks_a_l_OPUSDT = data['data']['A'] 

		global symbol_a_g_OPUSDT 
		global price_bids_a_g_OPUSDT 
		global qty_bids_a_g_OPUSDT 
		global price_asks_a_g_OPUSDT 
		global qty_asks_a_g_OPUSDT 

		symbol_a_g_OPUSDT = symbol_a_l_OPUSDT 
		price_bids_a_g_OPUSDT = price_bids_a_l_OPUSDT 
		qty_bids_a_g_OPUSDT = qty_bids_a_l_OPUSDT 
		price_asks_a_g_OPUSDT = price_asks_a_l_OPUSDT 
		qty_asks_a_g_OPUSDT = qty_asks_a_l_OPUSDT 

	if data['stream'] == streamopbtc :
		data = json.loads(message) 

		symbol_b_l_OPBTC = data['data']['s'] 
		price_bids_b_l_OPBTC = data['data']['b'] 
		qty_bids_b_l_OPBTC = data['data']['B']
		price_asks_b_l_OPBTC = data['data']['a'] 
		qty_asks_b_l_OPBTC = data['data']['A'] 

		global symbol_b_g_OPBTC 
		global price_bids_b_g_OPBTC 
		global qty_bids_b_g_OPBTC 
		global price_asks_b_g_OPBTC 
		global qty_asks_b_g_OPBTC 

		symbol_b_g_OPBTC = symbol_b_l_OPBTC 
		price_bids_b_g_OPBTC = price_bids_b_l_OPBTC 
		qty_bids_b_g_OPBTC = qty_bids_b_l_OPBTC 
		price_asks_b_g_OPBTC = price_asks_b_l_OPBTC 
		qty_asks_b_g_OPBTC = qty_asks_b_l_OPBTC 


def loop_OPUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamopusdt}/{streamopbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_OPUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_OPUSDT).start()

def loop_OPUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_OPUSDT != 0.0 and qty_bids_a_g_OPUSDT != 0.0 and price_asks_a_g_OPUSDT != 0.0 and qty_asks_a_g_OPUSDT != 0.0 and price_bids_b_g_OPBTC != 0.0 and qty_bids_b_g_OPBTC != 0.0 and price_asks_b_g_OPBTC != 0.0 and qty_asks_b_g_OPBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_OPBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_OPBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_OPUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_OPUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_OPBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_OPBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_OPUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_OPUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_OPBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_OPBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_OPUSDT_Trade).start() 

streamstgusdt = 'stgusdt@bookTicker'
streamstgbtc  = 'stgbtc@bookTicker'

symbol_a_g_STGUSDT = 'STGUSDT' 
price_bids_a_g_STGUSDT = float(0.0) 
qty_bids_a_g_STGUSDT = float(0.0) 
price_asks_a_g_STGUSDT = float(0.0) 
qty_asks_a_g_STGUSDT = float(0.0) 

stepSize_STGUSDT = 0.10000000 

symbol_b_g_STGBTC = 'STGBTC' 
price_bids_b_g_STGBTC = float(0.0) 
qty_bids_b_g_STGBTC = float(0.0) 
price_asks_b_g_STGBTC = float(0.0) 
qty_asks_b_g_STGBTC = float(0.0) 

stepSize_STGBTC = 0.10000000 

def on_message_STGUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamstgusdt :
		symbol_a_l_STGUSDT = data['data']['s'] 
		price_bids_a_l_STGUSDT = data['data']['b'] 
		qty_bids_a_l_STGUSDT = data['data']['B'] 
		price_asks_a_l_STGUSDT = data['data']['a'] 
		qty_asks_a_l_STGUSDT = data['data']['A'] 

		global symbol_a_g_STGUSDT 
		global price_bids_a_g_STGUSDT 
		global qty_bids_a_g_STGUSDT 
		global price_asks_a_g_STGUSDT 
		global qty_asks_a_g_STGUSDT 

		symbol_a_g_STGUSDT = symbol_a_l_STGUSDT 
		price_bids_a_g_STGUSDT = price_bids_a_l_STGUSDT 
		qty_bids_a_g_STGUSDT = qty_bids_a_l_STGUSDT 
		price_asks_a_g_STGUSDT = price_asks_a_l_STGUSDT 
		qty_asks_a_g_STGUSDT = qty_asks_a_l_STGUSDT 

	if data['stream'] == streamstgbtc :
		data = json.loads(message) 

		symbol_b_l_STGBTC = data['data']['s'] 
		price_bids_b_l_STGBTC = data['data']['b'] 
		qty_bids_b_l_STGBTC = data['data']['B']
		price_asks_b_l_STGBTC = data['data']['a'] 
		qty_asks_b_l_STGBTC = data['data']['A'] 

		global symbol_b_g_STGBTC 
		global price_bids_b_g_STGBTC 
		global qty_bids_b_g_STGBTC 
		global price_asks_b_g_STGBTC 
		global qty_asks_b_g_STGBTC 

		symbol_b_g_STGBTC = symbol_b_l_STGBTC 
		price_bids_b_g_STGBTC = price_bids_b_l_STGBTC 
		qty_bids_b_g_STGBTC = qty_bids_b_l_STGBTC 
		price_asks_b_g_STGBTC = price_asks_b_l_STGBTC 
		qty_asks_b_g_STGBTC = qty_asks_b_l_STGBTC 


def loop_STGUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamstgusdt}/{streamstgbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_STGUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_STGUSDT).start()

def loop_STGUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_STGUSDT != 0.0 and qty_bids_a_g_STGUSDT != 0.0 and price_asks_a_g_STGUSDT != 0.0 and qty_asks_a_g_STGUSDT != 0.0 and price_bids_b_g_STGBTC != 0.0 and qty_bids_b_g_STGBTC != 0.0 and price_asks_b_g_STGBTC != 0.0 and qty_asks_b_g_STGBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_STGBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_STGBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_STGUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_STGUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_STGBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_STGBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_STGUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_STGUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_STGBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_STGBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_STGUSDT_Trade).start() 

streamgmxusdt = 'gmxusdt@bookTicker'
streamgmxbtc  = 'gmxbtc@bookTicker'

symbol_a_g_GMXUSDT = 'GMXUSDT' 
price_bids_a_g_GMXUSDT = float(0.0) 
qty_bids_a_g_GMXUSDT = float(0.0) 
price_asks_a_g_GMXUSDT = float(0.0) 
qty_asks_a_g_GMXUSDT = float(0.0) 

stepSize_GMXUSDT = 0.00100000 

symbol_b_g_GMXBTC = 'GMXBTC' 
price_bids_b_g_GMXBTC = float(0.0) 
qty_bids_b_g_GMXBTC = float(0.0) 
price_asks_b_g_GMXBTC = float(0.0) 
qty_asks_b_g_GMXBTC = float(0.0) 

stepSize_GMXBTC = 0.00100000 

def on_message_GMXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamgmxusdt :
		symbol_a_l_GMXUSDT = data['data']['s'] 
		price_bids_a_l_GMXUSDT = data['data']['b'] 
		qty_bids_a_l_GMXUSDT = data['data']['B'] 
		price_asks_a_l_GMXUSDT = data['data']['a'] 
		qty_asks_a_l_GMXUSDT = data['data']['A'] 

		global symbol_a_g_GMXUSDT 
		global price_bids_a_g_GMXUSDT 
		global qty_bids_a_g_GMXUSDT 
		global price_asks_a_g_GMXUSDT 
		global qty_asks_a_g_GMXUSDT 

		symbol_a_g_GMXUSDT = symbol_a_l_GMXUSDT 
		price_bids_a_g_GMXUSDT = price_bids_a_l_GMXUSDT 
		qty_bids_a_g_GMXUSDT = qty_bids_a_l_GMXUSDT 
		price_asks_a_g_GMXUSDT = price_asks_a_l_GMXUSDT 
		qty_asks_a_g_GMXUSDT = qty_asks_a_l_GMXUSDT 

	if data['stream'] == streamgmxbtc :
		data = json.loads(message) 

		symbol_b_l_GMXBTC = data['data']['s'] 
		price_bids_b_l_GMXBTC = data['data']['b'] 
		qty_bids_b_l_GMXBTC = data['data']['B']
		price_asks_b_l_GMXBTC = data['data']['a'] 
		qty_asks_b_l_GMXBTC = data['data']['A'] 

		global symbol_b_g_GMXBTC 
		global price_bids_b_g_GMXBTC 
		global qty_bids_b_g_GMXBTC 
		global price_asks_b_g_GMXBTC 
		global qty_asks_b_g_GMXBTC 

		symbol_b_g_GMXBTC = symbol_b_l_GMXBTC 
		price_bids_b_g_GMXBTC = price_bids_b_l_GMXBTC 
		qty_bids_b_g_GMXBTC = qty_bids_b_l_GMXBTC 
		price_asks_b_g_GMXBTC = price_asks_b_l_GMXBTC 
		qty_asks_b_g_GMXBTC = qty_asks_b_l_GMXBTC 


def loop_GMXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamgmxusdt}/{streamgmxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_GMXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_GMXUSDT).start()

def loop_GMXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_GMXUSDT != 0.0 and qty_bids_a_g_GMXUSDT != 0.0 and price_asks_a_g_GMXUSDT != 0.0 and qty_asks_a_g_GMXUSDT != 0.0 and price_bids_b_g_GMXBTC != 0.0 and qty_bids_b_g_GMXBTC != 0.0 and price_asks_b_g_GMXBTC != 0.0 and qty_asks_b_g_GMXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_GMXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_GMXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_GMXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_GMXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_GMXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_GMXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_GMXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_GMXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_GMXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_GMXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_GMXUSDT_Trade).start() 

streamneblusdt = 'neblusdt@bookTicker'
streamneblbtc  = 'neblbtc@bookTicker'

symbol_a_g_NEBLUSDT = 'NEBLUSDT' 
price_bids_a_g_NEBLUSDT = float(0.0) 
qty_bids_a_g_NEBLUSDT = float(0.0) 
price_asks_a_g_NEBLUSDT = float(0.0) 
qty_asks_a_g_NEBLUSDT = float(0.0) 

stepSize_NEBLUSDT = 0.10000000 

symbol_b_g_NEBLBTC = 'NEBLBTC' 
price_bids_b_g_NEBLBTC = float(0.0) 
qty_bids_b_g_NEBLBTC = float(0.0) 
price_asks_b_g_NEBLBTC = float(0.0) 
qty_asks_b_g_NEBLBTC = float(0.0) 

stepSize_NEBLBTC = 0.10000000 

def on_message_NEBLUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamneblusdt :
		symbol_a_l_NEBLUSDT = data['data']['s'] 
		price_bids_a_l_NEBLUSDT = data['data']['b'] 
		qty_bids_a_l_NEBLUSDT = data['data']['B'] 
		price_asks_a_l_NEBLUSDT = data['data']['a'] 
		qty_asks_a_l_NEBLUSDT = data['data']['A'] 

		global symbol_a_g_NEBLUSDT 
		global price_bids_a_g_NEBLUSDT 
		global qty_bids_a_g_NEBLUSDT 
		global price_asks_a_g_NEBLUSDT 
		global qty_asks_a_g_NEBLUSDT 

		symbol_a_g_NEBLUSDT = symbol_a_l_NEBLUSDT 
		price_bids_a_g_NEBLUSDT = price_bids_a_l_NEBLUSDT 
		qty_bids_a_g_NEBLUSDT = qty_bids_a_l_NEBLUSDT 
		price_asks_a_g_NEBLUSDT = price_asks_a_l_NEBLUSDT 
		qty_asks_a_g_NEBLUSDT = qty_asks_a_l_NEBLUSDT 

	if data['stream'] == streamneblbtc :
		data = json.loads(message) 

		symbol_b_l_NEBLBTC = data['data']['s'] 
		price_bids_b_l_NEBLBTC = data['data']['b'] 
		qty_bids_b_l_NEBLBTC = data['data']['B']
		price_asks_b_l_NEBLBTC = data['data']['a'] 
		qty_asks_b_l_NEBLBTC = data['data']['A'] 

		global symbol_b_g_NEBLBTC 
		global price_bids_b_g_NEBLBTC 
		global qty_bids_b_g_NEBLBTC 
		global price_asks_b_g_NEBLBTC 
		global qty_asks_b_g_NEBLBTC 

		symbol_b_g_NEBLBTC = symbol_b_l_NEBLBTC 
		price_bids_b_g_NEBLBTC = price_bids_b_l_NEBLBTC 
		qty_bids_b_g_NEBLBTC = qty_bids_b_l_NEBLBTC 
		price_asks_b_g_NEBLBTC = price_asks_b_l_NEBLBTC 
		qty_asks_b_g_NEBLBTC = qty_asks_b_l_NEBLBTC 


def loop_NEBLUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamneblusdt}/{streamneblbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_NEBLUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_NEBLUSDT).start()

def loop_NEBLUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_NEBLUSDT != 0.0 and qty_bids_a_g_NEBLUSDT != 0.0 and price_asks_a_g_NEBLUSDT != 0.0 and qty_asks_a_g_NEBLUSDT != 0.0 and price_bids_b_g_NEBLBTC != 0.0 and qty_bids_b_g_NEBLBTC != 0.0 and price_asks_b_g_NEBLBTC != 0.0 and qty_asks_b_g_NEBLBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_NEBLBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_NEBLBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_NEBLUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_NEBLUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_NEBLBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_NEBLBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_NEBLUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_NEBLUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_NEBLBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_NEBLBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_NEBLUSDT_Trade).start() 

streampolyxusdt = 'polyxusdt@bookTicker'
streampolyxbtc  = 'polyxbtc@bookTicker'

symbol_a_g_POLYXUSDT = 'POLYXUSDT' 
price_bids_a_g_POLYXUSDT = float(0.0) 
qty_bids_a_g_POLYXUSDT = float(0.0) 
price_asks_a_g_POLYXUSDT = float(0.0) 
qty_asks_a_g_POLYXUSDT = float(0.0) 

stepSize_POLYXUSDT = 0.10000000 

symbol_b_g_POLYXBTC = 'POLYXBTC' 
price_bids_b_g_POLYXBTC = float(0.0) 
qty_bids_b_g_POLYXBTC = float(0.0) 
price_asks_b_g_POLYXBTC = float(0.0) 
qty_asks_b_g_POLYXBTC = float(0.0) 

stepSize_POLYXBTC = 0.10000000 

def on_message_POLYXUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streampolyxusdt :
		symbol_a_l_POLYXUSDT = data['data']['s'] 
		price_bids_a_l_POLYXUSDT = data['data']['b'] 
		qty_bids_a_l_POLYXUSDT = data['data']['B'] 
		price_asks_a_l_POLYXUSDT = data['data']['a'] 
		qty_asks_a_l_POLYXUSDT = data['data']['A'] 

		global symbol_a_g_POLYXUSDT 
		global price_bids_a_g_POLYXUSDT 
		global qty_bids_a_g_POLYXUSDT 
		global price_asks_a_g_POLYXUSDT 
		global qty_asks_a_g_POLYXUSDT 

		symbol_a_g_POLYXUSDT = symbol_a_l_POLYXUSDT 
		price_bids_a_g_POLYXUSDT = price_bids_a_l_POLYXUSDT 
		qty_bids_a_g_POLYXUSDT = qty_bids_a_l_POLYXUSDT 
		price_asks_a_g_POLYXUSDT = price_asks_a_l_POLYXUSDT 
		qty_asks_a_g_POLYXUSDT = qty_asks_a_l_POLYXUSDT 

	if data['stream'] == streampolyxbtc :
		data = json.loads(message) 

		symbol_b_l_POLYXBTC = data['data']['s'] 
		price_bids_b_l_POLYXBTC = data['data']['b'] 
		qty_bids_b_l_POLYXBTC = data['data']['B']
		price_asks_b_l_POLYXBTC = data['data']['a'] 
		qty_asks_b_l_POLYXBTC = data['data']['A'] 

		global symbol_b_g_POLYXBTC 
		global price_bids_b_g_POLYXBTC 
		global qty_bids_b_g_POLYXBTC 
		global price_asks_b_g_POLYXBTC 
		global qty_asks_b_g_POLYXBTC 

		symbol_b_g_POLYXBTC = symbol_b_l_POLYXBTC 
		price_bids_b_g_POLYXBTC = price_bids_b_l_POLYXBTC 
		qty_bids_b_g_POLYXBTC = qty_bids_b_l_POLYXBTC 
		price_asks_b_g_POLYXBTC = price_asks_b_l_POLYXBTC 
		qty_asks_b_g_POLYXBTC = qty_asks_b_l_POLYXBTC 


def loop_POLYXUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streampolyxusdt}/{streampolyxbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_POLYXUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_POLYXUSDT).start()

def loop_POLYXUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_POLYXUSDT != 0.0 and qty_bids_a_g_POLYXUSDT != 0.0 and price_asks_a_g_POLYXUSDT != 0.0 and qty_asks_a_g_POLYXUSDT != 0.0 and price_bids_b_g_POLYXBTC != 0.0 and qty_bids_b_g_POLYXBTC != 0.0 and price_asks_b_g_POLYXBTC != 0.0 and qty_asks_b_g_POLYXBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_POLYXBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_POLYXBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_POLYXUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_POLYXUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_POLYXBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_POLYXBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_POLYXUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_POLYXUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_POLYXBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_POLYXBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_POLYXUSDT_Trade).start() 

streamaptusdt = 'aptusdt@bookTicker'
streamaptbtc  = 'aptbtc@bookTicker'

symbol_a_g_APTUSDT = 'APTUSDT' 
price_bids_a_g_APTUSDT = float(0.0) 
qty_bids_a_g_APTUSDT = float(0.0) 
price_asks_a_g_APTUSDT = float(0.0) 
qty_asks_a_g_APTUSDT = float(0.0) 

stepSize_APTUSDT = 0.01000000 

symbol_b_g_APTBTC = 'APTBTC' 
price_bids_b_g_APTBTC = float(0.0) 
qty_bids_b_g_APTBTC = float(0.0) 
price_asks_b_g_APTBTC = float(0.0) 
qty_asks_b_g_APTBTC = float(0.0) 

stepSize_APTBTC = 0.01000000 

def on_message_APTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamaptusdt :
		symbol_a_l_APTUSDT = data['data']['s'] 
		price_bids_a_l_APTUSDT = data['data']['b'] 
		qty_bids_a_l_APTUSDT = data['data']['B'] 
		price_asks_a_l_APTUSDT = data['data']['a'] 
		qty_asks_a_l_APTUSDT = data['data']['A'] 

		global symbol_a_g_APTUSDT 
		global price_bids_a_g_APTUSDT 
		global qty_bids_a_g_APTUSDT 
		global price_asks_a_g_APTUSDT 
		global qty_asks_a_g_APTUSDT 

		symbol_a_g_APTUSDT = symbol_a_l_APTUSDT 
		price_bids_a_g_APTUSDT = price_bids_a_l_APTUSDT 
		qty_bids_a_g_APTUSDT = qty_bids_a_l_APTUSDT 
		price_asks_a_g_APTUSDT = price_asks_a_l_APTUSDT 
		qty_asks_a_g_APTUSDT = qty_asks_a_l_APTUSDT 

	if data['stream'] == streamaptbtc :
		data = json.loads(message) 

		symbol_b_l_APTBTC = data['data']['s'] 
		price_bids_b_l_APTBTC = data['data']['b'] 
		qty_bids_b_l_APTBTC = data['data']['B']
		price_asks_b_l_APTBTC = data['data']['a'] 
		qty_asks_b_l_APTBTC = data['data']['A'] 

		global symbol_b_g_APTBTC 
		global price_bids_b_g_APTBTC 
		global qty_bids_b_g_APTBTC 
		global price_asks_b_g_APTBTC 
		global qty_asks_b_g_APTBTC 

		symbol_b_g_APTBTC = symbol_b_l_APTBTC 
		price_bids_b_g_APTBTC = price_bids_b_l_APTBTC 
		qty_bids_b_g_APTBTC = qty_bids_b_l_APTBTC 
		price_asks_b_g_APTBTC = price_asks_b_l_APTBTC 
		qty_asks_b_g_APTBTC = qty_asks_b_l_APTBTC 


def loop_APTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamaptusdt}/{streamaptbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_APTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_APTUSDT).start()

def loop_APTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_APTUSDT != 0.0 and qty_bids_a_g_APTUSDT != 0.0 and price_asks_a_g_APTUSDT != 0.0 and qty_asks_a_g_APTUSDT != 0.0 and price_bids_b_g_APTBTC != 0.0 and qty_bids_b_g_APTBTC != 0.0 and price_asks_b_g_APTBTC != 0.0 and qty_asks_b_g_APTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_APTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_APTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_APTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_APTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_APTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_APTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_APTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_APTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_APTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_APTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_APTUSDT_Trade).start() 

streamosmousdt = 'osmousdt@bookTicker'
streamosmobtc  = 'osmobtc@bookTicker'

symbol_a_g_OSMOUSDT = 'OSMOUSDT' 
price_bids_a_g_OSMOUSDT = float(0.0) 
qty_bids_a_g_OSMOUSDT = float(0.0) 
price_asks_a_g_OSMOUSDT = float(0.0) 
qty_asks_a_g_OSMOUSDT = float(0.0) 

stepSize_OSMOUSDT = 0.01000000 

symbol_b_g_OSMOBTC = 'OSMOBTC' 
price_bids_b_g_OSMOBTC = float(0.0) 
qty_bids_b_g_OSMOBTC = float(0.0) 
price_asks_b_g_OSMOBTC = float(0.0) 
qty_asks_b_g_OSMOBTC = float(0.0) 

stepSize_OSMOBTC = 0.01000000 

def on_message_OSMOUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamosmousdt :
		symbol_a_l_OSMOUSDT = data['data']['s'] 
		price_bids_a_l_OSMOUSDT = data['data']['b'] 
		qty_bids_a_l_OSMOUSDT = data['data']['B'] 
		price_asks_a_l_OSMOUSDT = data['data']['a'] 
		qty_asks_a_l_OSMOUSDT = data['data']['A'] 

		global symbol_a_g_OSMOUSDT 
		global price_bids_a_g_OSMOUSDT 
		global qty_bids_a_g_OSMOUSDT 
		global price_asks_a_g_OSMOUSDT 
		global qty_asks_a_g_OSMOUSDT 

		symbol_a_g_OSMOUSDT = symbol_a_l_OSMOUSDT 
		price_bids_a_g_OSMOUSDT = price_bids_a_l_OSMOUSDT 
		qty_bids_a_g_OSMOUSDT = qty_bids_a_l_OSMOUSDT 
		price_asks_a_g_OSMOUSDT = price_asks_a_l_OSMOUSDT 
		qty_asks_a_g_OSMOUSDT = qty_asks_a_l_OSMOUSDT 

	if data['stream'] == streamosmobtc :
		data = json.loads(message) 

		symbol_b_l_OSMOBTC = data['data']['s'] 
		price_bids_b_l_OSMOBTC = data['data']['b'] 
		qty_bids_b_l_OSMOBTC = data['data']['B']
		price_asks_b_l_OSMOBTC = data['data']['a'] 
		qty_asks_b_l_OSMOBTC = data['data']['A'] 

		global symbol_b_g_OSMOBTC 
		global price_bids_b_g_OSMOBTC 
		global qty_bids_b_g_OSMOBTC 
		global price_asks_b_g_OSMOBTC 
		global qty_asks_b_g_OSMOBTC 

		symbol_b_g_OSMOBTC = symbol_b_l_OSMOBTC 
		price_bids_b_g_OSMOBTC = price_bids_b_l_OSMOBTC 
		qty_bids_b_g_OSMOBTC = qty_bids_b_l_OSMOBTC 
		price_asks_b_g_OSMOBTC = price_asks_b_l_OSMOBTC 
		qty_asks_b_g_OSMOBTC = qty_asks_b_l_OSMOBTC 


def loop_OSMOUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamosmousdt}/{streamosmobtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_OSMOUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_OSMOUSDT).start()

def loop_OSMOUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_OSMOUSDT != 0.0 and qty_bids_a_g_OSMOUSDT != 0.0 and price_asks_a_g_OSMOUSDT != 0.0 and qty_asks_a_g_OSMOUSDT != 0.0 and price_bids_b_g_OSMOBTC != 0.0 and qty_bids_b_g_OSMOBTC != 0.0 and price_asks_b_g_OSMOBTC != 0.0 and qty_asks_b_g_OSMOBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_OSMOBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_OSMOBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_OSMOUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_OSMOUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_OSMOBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_OSMOBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_OSMOUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_OSMOUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_OSMOBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_OSMOBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_OSMOUSDT_Trade).start() 

streamhftusdt = 'hftusdt@bookTicker'
streamhftbtc  = 'hftbtc@bookTicker'

symbol_a_g_HFTUSDT = 'HFTUSDT' 
price_bids_a_g_HFTUSDT = float(0.0) 
qty_bids_a_g_HFTUSDT = float(0.0) 
price_asks_a_g_HFTUSDT = float(0.0) 
qty_asks_a_g_HFTUSDT = float(0.0) 

stepSize_HFTUSDT = 0.10000000 

symbol_b_g_HFTBTC = 'HFTBTC' 
price_bids_b_g_HFTBTC = float(0.0) 
qty_bids_b_g_HFTBTC = float(0.0) 
price_asks_b_g_HFTBTC = float(0.0) 
qty_asks_b_g_HFTBTC = float(0.0) 

stepSize_HFTBTC = 0.10000000 

def on_message_HFTUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamhftusdt :
		symbol_a_l_HFTUSDT = data['data']['s'] 
		price_bids_a_l_HFTUSDT = data['data']['b'] 
		qty_bids_a_l_HFTUSDT = data['data']['B'] 
		price_asks_a_l_HFTUSDT = data['data']['a'] 
		qty_asks_a_l_HFTUSDT = data['data']['A'] 

		global symbol_a_g_HFTUSDT 
		global price_bids_a_g_HFTUSDT 
		global qty_bids_a_g_HFTUSDT 
		global price_asks_a_g_HFTUSDT 
		global qty_asks_a_g_HFTUSDT 

		symbol_a_g_HFTUSDT = symbol_a_l_HFTUSDT 
		price_bids_a_g_HFTUSDT = price_bids_a_l_HFTUSDT 
		qty_bids_a_g_HFTUSDT = qty_bids_a_l_HFTUSDT 
		price_asks_a_g_HFTUSDT = price_asks_a_l_HFTUSDT 
		qty_asks_a_g_HFTUSDT = qty_asks_a_l_HFTUSDT 

	if data['stream'] == streamhftbtc :
		data = json.loads(message) 

		symbol_b_l_HFTBTC = data['data']['s'] 
		price_bids_b_l_HFTBTC = data['data']['b'] 
		qty_bids_b_l_HFTBTC = data['data']['B']
		price_asks_b_l_HFTBTC = data['data']['a'] 
		qty_asks_b_l_HFTBTC = data['data']['A'] 

		global symbol_b_g_HFTBTC 
		global price_bids_b_g_HFTBTC 
		global qty_bids_b_g_HFTBTC 
		global price_asks_b_g_HFTBTC 
		global qty_asks_b_g_HFTBTC 

		symbol_b_g_HFTBTC = symbol_b_l_HFTBTC 
		price_bids_b_g_HFTBTC = price_bids_b_l_HFTBTC 
		qty_bids_b_g_HFTBTC = qty_bids_b_l_HFTBTC 
		price_asks_b_g_HFTBTC = price_asks_b_l_HFTBTC 
		qty_asks_b_g_HFTBTC = qty_asks_b_l_HFTBTC 


def loop_HFTUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamhftusdt}/{streamhftbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_HFTUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_HFTUSDT).start()

def loop_HFTUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_HFTUSDT != 0.0 and qty_bids_a_g_HFTUSDT != 0.0 and price_asks_a_g_HFTUSDT != 0.0 and qty_asks_a_g_HFTUSDT != 0.0 and price_bids_b_g_HFTBTC != 0.0 and qty_bids_b_g_HFTBTC != 0.0 and price_asks_b_g_HFTBTC != 0.0 and qty_asks_b_g_HFTBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_HFTBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_HFTBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_HFTUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_HFTUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_HFTBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_HFTBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_HFTUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_HFTUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_HFTBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_HFTBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_HFTUSDT_Trade).start() 

streamphbusdt = 'phbusdt@bookTicker'
streamphbbtc  = 'phbbtc@bookTicker'

symbol_a_g_PHBUSDT = 'PHBUSDT' 
price_bids_a_g_PHBUSDT = float(0.0) 
qty_bids_a_g_PHBUSDT = float(0.0) 
price_asks_a_g_PHBUSDT = float(0.0) 
qty_asks_a_g_PHBUSDT = float(0.0) 

stepSize_PHBUSDT = 1.00000000 

symbol_b_g_PHBBTC = 'PHBBTC' 
price_bids_b_g_PHBBTC = float(0.0) 
qty_bids_b_g_PHBBTC = float(0.0) 
price_asks_b_g_PHBBTC = float(0.0) 
qty_asks_b_g_PHBBTC = float(0.0) 

stepSize_PHBBTC = 0.10000000 

def on_message_PHBUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamphbusdt :
		symbol_a_l_PHBUSDT = data['data']['s'] 
		price_bids_a_l_PHBUSDT = data['data']['b'] 
		qty_bids_a_l_PHBUSDT = data['data']['B'] 
		price_asks_a_l_PHBUSDT = data['data']['a'] 
		qty_asks_a_l_PHBUSDT = data['data']['A'] 

		global symbol_a_g_PHBUSDT 
		global price_bids_a_g_PHBUSDT 
		global qty_bids_a_g_PHBUSDT 
		global price_asks_a_g_PHBUSDT 
		global qty_asks_a_g_PHBUSDT 

		symbol_a_g_PHBUSDT = symbol_a_l_PHBUSDT 
		price_bids_a_g_PHBUSDT = price_bids_a_l_PHBUSDT 
		qty_bids_a_g_PHBUSDT = qty_bids_a_l_PHBUSDT 
		price_asks_a_g_PHBUSDT = price_asks_a_l_PHBUSDT 
		qty_asks_a_g_PHBUSDT = qty_asks_a_l_PHBUSDT 

	if data['stream'] == streamphbbtc :
		data = json.loads(message) 

		symbol_b_l_PHBBTC = data['data']['s'] 
		price_bids_b_l_PHBBTC = data['data']['b'] 
		qty_bids_b_l_PHBBTC = data['data']['B']
		price_asks_b_l_PHBBTC = data['data']['a'] 
		qty_asks_b_l_PHBBTC = data['data']['A'] 

		global symbol_b_g_PHBBTC 
		global price_bids_b_g_PHBBTC 
		global qty_bids_b_g_PHBBTC 
		global price_asks_b_g_PHBBTC 
		global qty_asks_b_g_PHBBTC 

		symbol_b_g_PHBBTC = symbol_b_l_PHBBTC 
		price_bids_b_g_PHBBTC = price_bids_b_l_PHBBTC 
		qty_bids_b_g_PHBBTC = qty_bids_b_l_PHBBTC 
		price_asks_b_g_PHBBTC = price_asks_b_l_PHBBTC 
		qty_asks_b_g_PHBBTC = qty_asks_b_l_PHBBTC 


def loop_PHBUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamphbusdt}/{streamphbbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_PHBUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_PHBUSDT).start()

def loop_PHBUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_PHBUSDT != 0.0 and qty_bids_a_g_PHBUSDT != 0.0 and price_asks_a_g_PHBUSDT != 0.0 and qty_asks_a_g_PHBUSDT != 0.0 and price_bids_b_g_PHBBTC != 0.0 and qty_bids_b_g_PHBBTC != 0.0 and price_asks_b_g_PHBBTC != 0.0 and qty_asks_b_g_PHBBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_PHBBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_PHBBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_PHBUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_PHBUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_PHBBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_PHBBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_PHBUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_PHBUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_PHBBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_PHBBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_PHBUSDT_Trade).start() 

streamhookusdt = 'hookusdt@bookTicker'
streamhookbtc  = 'hookbtc@bookTicker'

symbol_a_g_HOOKUSDT = 'HOOKUSDT' 
price_bids_a_g_HOOKUSDT = float(0.0) 
qty_bids_a_g_HOOKUSDT = float(0.0) 
price_asks_a_g_HOOKUSDT = float(0.0) 
qty_asks_a_g_HOOKUSDT = float(0.0) 

stepSize_HOOKUSDT = 0.10000000 

symbol_b_g_HOOKBTC = 'HOOKBTC' 
price_bids_b_g_HOOKBTC = float(0.0) 
qty_bids_b_g_HOOKBTC = float(0.0) 
price_asks_b_g_HOOKBTC = float(0.0) 
qty_asks_b_g_HOOKBTC = float(0.0) 

stepSize_HOOKBTC = 0.10000000 

def on_message_HOOKUSDT(ws, message): 
	data = json.loads(message) 

	if data['stream'] == streamhookusdt :
		symbol_a_l_HOOKUSDT = data['data']['s'] 
		price_bids_a_l_HOOKUSDT = data['data']['b'] 
		qty_bids_a_l_HOOKUSDT = data['data']['B'] 
		price_asks_a_l_HOOKUSDT = data['data']['a'] 
		qty_asks_a_l_HOOKUSDT = data['data']['A'] 

		global symbol_a_g_HOOKUSDT 
		global price_bids_a_g_HOOKUSDT 
		global qty_bids_a_g_HOOKUSDT 
		global price_asks_a_g_HOOKUSDT 
		global qty_asks_a_g_HOOKUSDT 

		symbol_a_g_HOOKUSDT = symbol_a_l_HOOKUSDT 
		price_bids_a_g_HOOKUSDT = price_bids_a_l_HOOKUSDT 
		qty_bids_a_g_HOOKUSDT = qty_bids_a_l_HOOKUSDT 
		price_asks_a_g_HOOKUSDT = price_asks_a_l_HOOKUSDT 
		qty_asks_a_g_HOOKUSDT = qty_asks_a_l_HOOKUSDT 

	if data['stream'] == streamhookbtc :
		data = json.loads(message) 

		symbol_b_l_HOOKBTC = data['data']['s'] 
		price_bids_b_l_HOOKBTC = data['data']['b'] 
		qty_bids_b_l_HOOKBTC = data['data']['B']
		price_asks_b_l_HOOKBTC = data['data']['a'] 
		qty_asks_b_l_HOOKBTC = data['data']['A'] 

		global symbol_b_g_HOOKBTC 
		global price_bids_b_g_HOOKBTC 
		global qty_bids_b_g_HOOKBTC 
		global price_asks_b_g_HOOKBTC 
		global qty_asks_b_g_HOOKBTC 

		symbol_b_g_HOOKBTC = symbol_b_l_HOOKBTC 
		price_bids_b_g_HOOKBTC = price_bids_b_l_HOOKBTC 
		qty_bids_b_g_HOOKBTC = qty_bids_b_l_HOOKBTC 
		price_asks_b_g_HOOKBTC = price_asks_b_l_HOOKBTC 
		qty_asks_b_g_HOOKBTC = qty_asks_b_l_HOOKBTC 


def loop_HOOKUSDT():
	socket1 = f'wss://stream.binance.com:9443/stream?streams={streamhookusdt}/{streamhookbtc}' 

	ws = websocket.WebSocketApp(socket1, 
	on_message=on_message_HOOKUSDT 
	) 

	ws.run_forever() 

Thread(target=loop_HOOKUSDT).start()

def loop_HOOKUSDT_Trade(): 
	while True: 
		time.sleep(0.1)


		if price_bids_c_g_BTCUSDT != 0.0 and qty_bids_c_g_BTCUSDT != 0.0 and price_asks_c_g_BTCUSDT != 0.0 and qty_asks_c_g_BTCUSDT != 0.0 and price_bids_a_g_HOOKUSDT != 0.0 and qty_bids_a_g_HOOKUSDT != 0.0 and price_asks_a_g_HOOKUSDT != 0.0 and qty_asks_a_g_HOOKUSDT != 0.0 and price_bids_b_g_HOOKBTC != 0.0 and qty_bids_b_g_HOOKBTC != 0.0 and price_asks_b_g_HOOKBTC != 0.0 and qty_asks_b_g_HOOKBTC != 0.0: 

			praice_pair_c_raschet = usdt_count / float(price_bids_c_g_BTCUSDT) 
			praice_pair_c_raschet_size_up = float(f_minqty_size_up(praice_pair_c_raschet, stepSize_BTCUSDT)) 
			praice_pair_c_raschet_size_up_round = round(praice_pair_c_raschet_size_up, 14) 

			praice_pair_b_raschet = float(praice_pair_c_raschet_size_up_round) / float(price_bids_b_g_HOOKBTC) 
			praice_pair_b_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet, stepSize_HOOKBTC)) 
			praice_pair_b_raschet_size_up_round = round(praice_pair_b_raschet_size_up, 14) 

			price_pair_a_raschet_size_up = float(f_minqty_size_up(praice_pair_b_raschet_size_up_round, stepSize_HOOKUSDT)) 
			price_pair_a_raschet = price_pair_a_raschet_size_up * float(price_asks_a_g_HOOKUSDT) 
			praice_pair_a_raschet_round = round(price_pair_a_raschet, 14) 
	
			price_a = round(price_pair_a_raschet_size_up, 14) 

			price_b_round_size_down = float(f_minqty_size_down(price_a, stepSize_HOOKBTC)) 
			price_b = price_b_round_size_down * float(price_bids_b_g_HOOKBTC) 
			price_b_round = round(price_b, 14) 

			price_c_round_size_down = float(f_minqty_size_down(price_b_round, stepSize_BTCUSDT)) 
			price_c = price_c_round_size_down * float(price_bids_c_g_BTCUSDT) 
			price_c_round = round(price_c, 7) 

			a = 0.15 / 100 
			b = price_c_round * a 
			itog_minus_proc = price_c_round - b 

			pribil = itog_minus_proc - praice_pair_a_raschet_round 

			time_test = datetime.datetime.now() 

			if pribil > 0.0: 

				print('1111') 
				global all_pribil 
				all_pribil = float(all_pribil) + float(pribil) 

				print('############################################################################################################') 
				print('Kupili:', symbol_a_g_HOOKUSDT, 'V kolichestve:', price_a, 'Po cene:', price_asks_a_g_HOOKUSDT, 'potratili:', praice_pair_a_raschet_round, time_test) 
				print('Prodali:', symbol_b_g_HOOKBTC, 'V kolichestve:', price_b_round, 'Po cene:', price_bids_b_g_HOOKBTC) 
				print('Prodali:', symbol_c_g_BTCUSDT, 'V kolichestve:', price_c_round_size_down, 'Po cene:', price_bids_c_g_BTCUSDT) 
				print('Potratili:', praice_pair_a_raschet_round, 'Poluchili:', price_c_round, 'Minus Com = :', itog_minus_proc, 'Pribil:', pribil) 
				print(all_pribil) 

				time.sleep(1) 

Thread(target=loop_HOOKUSDT_Trade).start() 

